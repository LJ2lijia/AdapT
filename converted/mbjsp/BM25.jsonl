{"task_id": "MBJSP/11", "prompt": "function countChar(string, ch) {\n/**\n * * Write a function to count occurrence of a character in a string.\n */\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === char) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction capitalizeFirstLastLetters(str1) {\n/**\n * * Write a JavaScript function to capitalize first and last letters of each word of a given string.\n */\n    return str1.split(\" \").map(function(word) {\n        return word[0].toUpperCase() + word.slice(1, word.length - 1).toLowerCase() + word[word.length - 1].toUpperCase();\n    }).join(\" \");\n}\nfunction lastOccurenceChar(string, ch) {\n/**\n * * Write a function to find the last occurrence of a character in a string.\n */\n  const position = string.lastIndexOf(char);\n\n  if (position === -1) {\n    return null;\n  }\n\n  return position + 1;\n}\nfunction removeOcc(s, ch) {\n/**\n * * Write a JavaScript function to remove first and last occurrence of a given character from the string.\n */", "entry_point": "removeOcc", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"hello\";\nvar arg01 = \"l\";\nvar x0 = removeOcc(arg00, arg01);\nvar v0 = \"heo\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar arg11 = \"a\";\nvar x1 = removeOcc(arg10, arg11);\nvar v1 = \"bcd\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"PHP\";\nvar arg21 = \"P\";\nvar x2 = removeOcc(arg20, arg21);\nvar v2 = \"H\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== ch) {\n      result += s[i];\n    }\n  }\n\n  return result;\n}\n\n/* Write the following JavaScript functions.\n- replaceSubstring(str1, oldSubstring, newSubstring)\n- replaceAll(str1, oldSubstring, newSubstring)\n- upperCase(str1)\n- lowerCase(str1)\n- removeAll(str1, oldSubstring) */\n\n/**\n * * Replace the substring oldSubstring in the string str1 with newSubstring.\n */\n", "\n  return s.replace(new RegExp(ch, 'g'), '');\n}\n", "\n  const i = s.indexOf(ch);\n  if (i!== -1) {\n    s = s.slice(0, i) + s.slice(i + 1, s.length);\n  }\n  return s;\n}\n", "\n  let res = \"\";\n\n  let start = s.indexOf(ch);\n  let end = s.lastIndexOf(ch);\n\n  if (start === -1 || end === -1) {\n    return s;\n  }\n\n  return s.substring(0, start) + s.substring(end + 1);\n}\n", "\n    let res = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== ch) {\n            res += s[i];\n        }\n    }\n    return res;\n}\n"]}
{"task_id": "MBJSP/12", "prompt": "function sortSublists(list1) {\n/**\n * * Write a function to sort each sublist of strings in a given list of lists.\n */\n  return list1.map(sublist => sublist.sort());\n}\nfunction assignElements(testlist) {\n/**\n * * Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n */\n  let result = {};\n  for (let i = 0; i < testList.length; i++) {\n    let pair = testList[i];\n    for (let j = 0; j < pair.length; j++) {\n      if (result[pair[j]]) {\n        result[pair[j]].push(pair[0]);\n      } else {\n        result[pair[j]] = [pair[0]];\n      }\n    }\n  }\n  return result;\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction sortMatrix(m) {\n/**\n * * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n */", "entry_point": "sortMatrix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nvar x0 = sortMatrix(arg00);\nvar v0 = [[1, 1, 1], [1, 2, 3], [2, 4, 5]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nvar x1 = sortMatrix(arg10);\nvar v1 = [[-2, 4, -5], [1, -1, 1], [1, 2, 3]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 8, 9], [6, 4, 3], [2, 1, 4]];\nvar x2 = sortMatrix(arg20);\nvar v2 = [[2, 1, 4], [6, 4, 3], [5, 8, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = m.map((row) => row.map((v) => v.reduce((a, b) => a + b, 0)));\n  let r = 0;\n  let c = 0;\n  let len = result.length;\n  let sum = result[0][0];\n  while (r < len && c < len) {\n    if (sum < result[r][c]) {\n      sum += result[r][c];\n      r++;\n    } else {\n      sum -= result[r][c];\n      c++;\n    }\n  }\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < len && j < len) {\n    if (sum < result[i][j]) {\n      sum += result[i][j];\n      result[k][0] = result[i][j];\n      result[k][1] = i;\n      result[k][2] = j;\n      i++;\n      j++;\n      k++;\n    } else {\n      sum -= result[i][j];\n      result[k][0] = result[i][j];\n      result[k][1] = i;\n      result[k][2] = j;\n      i++;\n      j++;\n      k++;\n    }\n  }\n  return result;\n}\n", "\n  let result = m.slice();\n  for (let i = 0; i < result.length; i++) {\n    for (let j = i + 1; j < result.length; j++) {\n      if (result[i][0] < result[j][0]) {\n        result[i], result[j] = result[j], result[j];\n      }\n    }\n  }\n  return result;\n}\n", "\n  let s = [];\n  for (let i = 0; i < m.length; i++) {\n    s[i] = 0;\n    for (let j = 0; j < m[i].length; j++) {\n      s[i] += m[i][j];\n    }\n  }\n  return m.sort((a, b) => s[a.length - 1] - s[b.length - 1]);\n}\n", "\n  let matrix = m;\n  matrix.sort((a, b) => a.reduce((r, c) => r + c, 0) - b.reduce((r, c) => r + c, 0));\n  return matrix;\n}\n", "\n  m.sort((a, b) => a.reduce((sum, row) => sum + row, 0) - b.reduce((sum, row) => sum + row, 0));\n  return m;\n}\n"]}
{"task_id": "MBJSP/13", "prompt": "function mostCommonElem(s, a) {\n/**\n * * Write a function to find the most common elements and their counts of a specified text.\n */\n  const counts = {};\n  const result = [];\n\n  for (let i = 0; i < s.length; i += 1) {\n    if (counts[s[i]]) {\n      counts[s[i]] += 1;\n    } else {\n      counts[s[i]] = 1;\n    }\n  }\n\n  for (let i = 0; i < a; i += 1) {\n    const max = Math.max(...Object.values(counts));\n    const maxKey = Object.keys(counts).find(key => counts[key] === max);\n    result.push([maxKey, max]);\n    delete counts[maxKey];\n  }\n\n  return result;\n}\nfunction maxChar(str1) {\n/**\n * * Write a function to count the most common character in a given string.\n */\n    let charMap = {};\n    let max = 0;\n    let maxChar = '';\n\n    for (let char of str1) {\n        if (charMap[char]) {\n            charMap[char]++;\n        } else {\n            charMap[char] = 1;\n        }\n    }\n\n    for (let char in charMap) {\n        if (charMap[char] > max) {\n            max = charMap[char];\n            maxChar = char;\n        }\n    }\n\n    return maxChar;\n}\nfunction nCommonWords(text, n) {\n/**\n * * Write a function to find the occurrences of n most common words in a given text.\n */\n  const words = text.split(\" \");\n  const counts = {};\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    counts[word] = counts[word] ? counts[word] + 1 : 1;\n  }\n  const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);\n  const top = sorted.slice(0, n);\n  return top;\n}\nfunction countCommon(words) {\n/**\n * * Write a function to count the most common words in a dictionary.\n */", "entry_point": "countCommon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"];\nvar x0 = countCommon(arg00);\nvar v0 = [[\"pink\", 6], [\"black\", 5], [\"white\", 5], [\"red\", 4]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"];\nvar x1 = countCommon(arg10);\nvar v1 = [[\"one\", 4], [\"two\", 2], [\"three\", 2], [\"four\", 1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"];\nvar x2 = countCommon(arg20);\nvar v2 = [[\"Apple\", 2], [\"Amazon\", 2], [\"Netflix\", 2], [\"Facebook\", 1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const wordMap = {};\n  words.forEach(word => {\n    wordMap[word] = wordMap[word]? wordMap[word] + 1 : 1;\n  });\n  const sorted = Object.entries(wordMap).sort((a, b) => b[1] - a[1]);\n  return sorted.slice(0, 10);\n}\n", "\n  const counts = {};\n  for (let word of words) {\n    counts[word] = counts[word]? counts[word] + 1 : 1;\n  }\n  const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);\n  return sorted;\n}\n\n", "\n  let counts = {};\n  words.forEach(word => {\n    counts[word] = counts[word]? counts[word] + 1 : 1;\n  });\n  return counts;\n}\n", "\n  const counts = {};\n  for (let i = 0; i < words.length; i++) {\n    counts[words[i]] = counts[words[i]]? counts[words[i]] + 1 : 1;\n  }\n  return Object.values(counts);\n}\n\n", "\n  const counts = {};\n  words.forEach(word => {\n    counts[word] = counts[word]? counts[word] + 1 : 1;\n  });\n  return Object.entries(counts).sort((a, b) => b[1] - a[1]);\n}\n"]}
{"task_id": "MBJSP/14", "prompt": "function lenLog(list1) {\n/**\n * * Write a JavaScript function to find the length of the shortest word.\n */\n  let min = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length < min) {\n      min = list1[i].length;\n    }\n  }\n  return min;\n}\nfunction volumeTetrahedron(num) {\n/**\n * * Write a function to calculate volume of a tetrahedron.\n */\n  return (num * (num + 1) * (num + 2) * (num + 3)) / 6;\n}\nfunction findIndex(n) {\n/**\n * * Write a JavaScript function to find the index of smallest triangular number with n digits.\n */\n    const limit = Math.pow(10, n)\n    for (let i = 1; i <= limit; i++) {\n        const triangularNumber = i * (i + 1) / 2\n        if (triangularNumber.toString().length === n) {\n            return i\n        }\n    }\n}\nfunction findVolume(l, b, h) {\n/**\n * * Write a JavaScript function to find the volume of a triangular prism.\n */", "entry_point": "findVolume", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 8;\nvar arg02 = 6;\nvar x0 = findVolume(arg00, arg01, arg02);\nvar v0 = 240;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = findVolume(arg10, arg11, arg12);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar arg22 = 1;\nvar x2 = findVolume(arg20, arg21, arg22);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const height = h - b\n    const length = l - b\n    return height * length * length\n}\n", "\n    return (l * b * h) / 6\n}\n", "\n  return (l * b * h) / 3;\n}\n", "\n  const h1 = Math.round(h);\n  const b1 = Math.round(b);\n  const l1 = Math.round(l);\n  const x1 = l1 + (l1 * (l1 + 1) / 2);\n  const y1 = b1 + (b1 * (b1 + 1) / 2);\n  const z1 = h1 + (h1 * (h1 + 1) / 2);\n  const xyz1 = volumeTetrahedron(x1) * volumeTetrahedron(y1) * volumeTetrahedron(z1)\n  const xyz = volumeTetrahedron(x1) * volumeTetrahedron(y1) * volumeTetrahedron(z1);\n  return xyz1 / xyz;\n}\n", "\n    return ((l * b * h) / 3) * Math.sqrt(l * l + b * b + h * h);\n}\n"]}
{"task_id": "MBJSP/15", "prompt": "function split(word) {\n/**\n * * Write a JavaScript function to split a string into characters.\n */\n    return word.split('');\n}\nfunction splitList(text) {\n/**\n * * Write a function to split the given string at uppercase letters by using regex.\n */\n  return text.split(/(?=[A-Z])/);\n}\nfunction splitUpperstring(text) {\n/**\n * * Write a function to split a string at uppercase letters.\n */\n  return text.split(/(?=[A-Z])/).filter(Boolean);\n}\nfunction splitLowerstring(text) {\n/**\n * * Write a function to split a string at lowercase letters.\n */", "entry_point": "splitLowerstring", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AbCd\";\nvar x0 = splitLowerstring(arg00);\nvar v0 = [\"bC\", \"d\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Python\";\nvar x1 = splitLowerstring(arg10);\nvar v1 = [\"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Programming\";\nvar x2 = splitLowerstring(arg20);\nvar v2 = [\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.split(/(?=[a-z])/).filter(Boolean);\n}\n", "\n  return text.split(/(?=[a-z])/).filter(Boolean);\n}\n", "\n  return text.split(/(?=[a-z])/).filter(Boolean);\n}\n", "\n  return text.split(/(?=[a-z])/).filter(Boolean);\n}\n", "\n  return text.split(/(?=[a-z])/).filter(Boolean);\n}\n"]}
{"task_id": "MBJSP/16", "prompt": "function capitalWordsSpaces(str1) {\n/**\n * * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n */\n    return str1.replace(/([A-Z])/g, ' $1').trim();\n}\nfunction textUppercaseLowercase(text) {\n/**\n * * Write a function to find the sequences of one upper case letter followed by lower case letters.\n */\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\nfunction sampleNam(samplenames) {\n/**\n * * Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n */\n  let sum = 0;\n  for (let i = 0; i < sampleNames.length; i++) {\n    if (sampleNames[i].charAt(0) !== sampleNames[i].charAt(0).toLowerCase()) {\n      sum += sampleNames[i].length;\n    }\n  }\n  return sum;\n}\nfunction textLowercaseUnderscore(text) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n */", "entry_point": "textLowercaseUnderscore", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab_cbbbc\";\nvar x0 = textLowercaseUnderscore(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aab_Abbbc\";\nvar x1 = textLowercaseUnderscore(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Aaab_abbbc\";\nvar x2 = textLowercaseUnderscore(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const regex = /[a-z]+ _ + [a-z]+/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\n", "\n  const regex = /[a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\n", "\n  return text.replace(/([a-z])([A-Z])/g, '$1_$2').trim();\n}\n", "\n  const regex = /[a-z]_(?!_)[a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\n", "\n  return text.replace(/([a-z])([A-Z])/g, '$1 $2').trim();\n}\n"]}
{"task_id": "MBJSP/17", "prompt": "function perimeterPolygon(s, l) {\n/**\n * * Write a function to calculate the perimeter of a regular polygon.\n */\n  return s * l;\n}\nfunction rombusPerimeter(a) {\n/**\n * * Write a function to find the perimeter of a rombus.\n */\n  return a * 4;\n}\nfunction rectanglePerimeter(l, b) {\n/**\n * * Write a function to find the perimeter of a rectangle.\n */\n  return 2 * (l + b);\n}\nfunction squarePerimeter(a) {\n/**\n * * Write a function to find the perimeter of a square.\n */", "entry_point": "squarePerimeter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = squarePerimeter(arg00);\nvar v0 = 40;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = squarePerimeter(arg10);\nvar v1 = 20;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squarePerimeter(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return a * a;\n}\n", "\n  return a * a;\n}\n\nmodule.exports = {\n  perimeter: perimeter,\n  trianglePerimeter: trianglePerimeter,\n  hexagonPerimeter: hexagonPerimeter,\n  rhombusPerimeter: rhombusPerimeter,\n  rombusPerimeter: rombusPerimeter,\n  rectanglePerimeter: rectanglePerimeter,\n  squarePerimeter: squarePerimeter\n}\n", "\n  return a * 4;\n}\n", "\n  return 4 * a;\n}\n", "\n  return 4 * a;\n}\n"]}
{"task_id": "MBJSP/18", "prompt": "function countVowels(teststr) {\n/**\n * * Write a function to count those characters which have vowels as their neighbors in the given string.\n */\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (vowels.includes(testStr[i])) {\n      if (i === 0 || vowels.includes(testStr[i - 1])) {\n        count++;\n      }\n      if (i === testStr.length - 1 || vowels.includes(testStr[i + 1])) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction removeExtraChar(text1) {\n/**\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n */\n    return text1.replace(/[^a-zA-Z0-9]/g, '');\n}\nfunction findCharLong(text) {\n/**\n * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n */\n  return text.match(/\\w{4,}/g) || [];\n}\nfunction removeDirtyChars(string, secondstring) {\n/**\n * * Write a function to remove characters from the first string which are present in the second string.\n */", "entry_point": "removeDirtyChars", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"probasscurve\";\nvar arg01 = \"pros\";\nvar x0 = removeDirtyChars(arg00, arg01);\nvar v0 = \"bacuve\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"digitalindia\";\nvar arg11 = \"talent\";\nvar x1 = removeDirtyChars(arg10, arg11);\nvar v1 = \"digiidi\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"exoticmiles\";\nvar arg21 = \"toxic\";\nvar x2 = removeDirtyChars(arg20, arg21);\nvar v2 = \"emles\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return string.replace(secondstring, '');\n}\n", "\n    return string.replace(secondstring, '');\n}\n", "\n  let dirtyChars = ['<', '>', ':', '\"', '=', '\\\\', '/', '?', '*', '|', '.','', '+', '#', ';', '@', '!', '*', '&', '%', '$', '\"', '\\'', '<', '>', ':', '\"', '=', '\\\\', '/', '?', '*', '|', '.', '!', '\\'', '+', '#', ';', '@', '!', '*', '&', '%', '$'];\n  let cleanChars = [',', ';', ':', '\"', '?', '+', '!', '*', '&', '%', '$', '\"', '\\'', '<', '>', '=', '\\\\', '/', '?', '*', '|', '.',''];\n  let cleanString = cleanChars.join('');\n  let cleanSecondString = cleanChars.join('');\n  for (let i = 0; i < dirtyChars.length; i++) {\n    let currChar = dirtyChars[i];\n    let indexOfChar = string.indexOf(currChar);\n    if (indexOfChar!== -1) {\n      let indexOfSecondChar = secondstring.indexOf(currChar);\n      if (indexOfSecondChar!== -1) {\n        string = string.replace(currChar, '');\n        secondstring = secondstring.replace(currChar, '');\n        i = -1;\n      }\n    }\n  }\n  return [string, secondstring];\n}\n", "\n  let stringarray = string.split(\"\");\n  let secondstringarray = secondstring.split(\"\");\n  for (let i = 0; i < stringarray.length; i++) {\n    if (secondstringarray.includes(stringarray[i])) {\n      stringarray.splice(i, 1);\n    }\n  }\n  let result = stringarray.join(\"\");\n  return result;\n}\n", "\n  let regex = /[~`!@#$%^&*()_+=-|}:\"<>,.?{}|'][\\\\/]/g;\n  secondstring = secondstring.replace(regex, '');\n  let dirtychars = secondstring.split('');\n  for (let i = 0; i < dirtychars.length; i++) {\n    if (dirtychars[i] === string[i]) {\n      dirtychars.splice(i, 1);\n      i--;\n    }\n  }\n  return dirtychars.join('');\n}\n"]}
{"task_id": "MBJSP/19", "prompt": "function sortByDnf(arr, n) {\n/**\n * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n */\n  const count = new Array(n).fill(0);\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    count[arr[i]]++;\n  }\n  for (let i = 0; i < n; i++) {\n    while (count[i] > 0) {\n      result.push(i);\n      count[i]--;\n    }\n  }\n  return result;\n}\nfunction uniqueElement(arr, n) {\n/**\n * * Write a JavaScript function to check whether an array contains only one distinct element or not.\n */\n    let set = new Set(arr);\n    if (set.size === 1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\nfunction minJumps(arr, n) {\n/**\n * * ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n */\n  let jumps = 0;\n  let maxReach = arr[0];\n  let i = 0;\n\n  while (i < n) {\n    if (maxReach >= n - 1) {\n      return jumps;\n    }\n    if (arr[i] === 0) {\n      maxReach = Math.max(maxReach, i + arr[i]);\n      i++;\n    } else {\n      maxReach = Math.max(maxReach, i + arr[i]);\n      i += arr[i];\n      jumps++;\n    }\n  }\n  return jumps;\n}\nfunction testDuplicate(arraynums) {\n/**\n * * Write a function to find whether a given array of integers contains any duplicate element.\n */", "entry_point": "testDuplicate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar x0 = testDuplicate(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 4];\nvar x1 = testDuplicate(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2, 2, 3, 3, 4, 4, 5];\nvar x2 = testDuplicate(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const set = new Set(arraynums);\n    if (set.size > 1) {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }\n}\n", "\n  let duplicates = false;\n  const set = new Set(arraynums);\n  if (set.size!== arraynums.length) {\n    duplicates = true;\n  }\n  return duplicates;\n}\n", "\n  let set = new Set(arraynums);\n  return set.size > 0;\n}\n", "\n  for (let i = 0; i < arraynums.length; i++) {\n    for (let j = i + 1; j < arraynums.length; j++) {\n      if (arraynums[i] === arraynums[j]) {\n        return \"YES\";\n      }\n    }\n  }\n  return \"NO\";\n}\n", "\n  const testArray = [];\n  for (let i = 0; i < arraynums.length; i++) {\n    if (testArray.indexOf(arraynums[i]) < 0) {\n      testArray.push(arraynums[i]);\n    }\n  }\n  if (testArray.length > 1) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n"]}
{"task_id": "MBJSP/20", "prompt": "function validityTriangle(a, b, c) {\n/**\n * * Write a function to check if the triangle is valid or not.\n */\n    let sum = a + b + c;\n    return sum === 180;\n}\nfunction checkExpression(exp) {\n/**\n * * Write a function to check if the given expression is balanced or not.\n */\n  let stack = [];\n  let map = {\n    '{': '}',\n    '(': ')',\n    '[': ']'\n  };\n\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === '{' || exp[i] === '(' || exp[i] === '[') {\n      stack.push(exp[i]);\n    } else if (exp[i] === '}' || exp[i] === ')' || exp[i] === ']') {\n      if (map[stack.pop()] !== exp[i]) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n}\nfunction checkAbundant(n) {\n/**\n * * Write a function to find if the given number is abundant or not.\n */\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum > n;\n}\nfunction isWoodall(x) {\n/**\n * * Write a function to check if the given number is woodball or not.\n */", "entry_point": "isWoodall", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 383;\nvar x0 = isWoodall(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 254;\nvar x1 = isWoodall(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 200;\nvar x2 = isWoodall(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 2; i < x; i++) {\n    if (x % i === 0) {\n      sum += i;\n      if (sum === x) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "\n  let y = x * 2;\n  return y <= 997;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= x; i++) {\n    if (isPow2(i) && isPerfect(x - i)) {\n      sum += i;\n    }\n  }\n  return sum === x;\n}\n", "\n  let map = {\n    8: 1,\n    10: 2,\n    11: 2,\n    12: 3,\n    13: 3,\n    14: 4,\n    15: 4,\n    16: 5,\n    17: 5,\n    18: 5,\n    19: 6,\n    20: 6,\n    30: 7,\n    40: 8,\n    50: 8,\n    60: 9,\n    70: 9,\n    80: 10,\n    90: 10,\n    100: 11\n  };\n\n  return map[x] === 2;\n}\n", "\n  return ((x + 2) * (x + 1)) === (Math.sqrt(x) * Math.sqrt(x + 1));\n}\n"]}
{"task_id": "MBJSP/21", "prompt": "function lobbNum(n, m) {\n/**\n * * Write a function to find ln, m lobb number.\n */\n    let factorial = (num) => {\n        return num === 0 ? 1 : num * factorial(num - 1);\n    };\n    let binomial_coeff = (n, k) => {\n        return (n === 0 || k === 0) ? 1 : factorial(n) / (factorial(k) * factorial(n - k));\n    };\n    return ((2 * m + 1) * binomial_coeff(2 * n, m + n)) / (m + n + 1);\n}\nfunction maximumSegments(n, a, b, c) {\n/**\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n */\n  // O(n)\n  if (!n || !a || !b || !c) return null;\n\n  let dp = [];\n  dp[0] = 0;\n\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(\n      ...[\n        // if current segment can be formed with a, b and c,\n        dp[i - a] + 1,\n        dp[i - b] + 1,\n        dp[i - c] + 1,\n      ].filter((e) => e > 0)\n    );\n  }\n\n  return dp[n];\n}\nfunction noOfCubes(n, k) {\n/**\n * * Write a JavaScript function to count number of cubes of size k in a cube of size n.\n */\n    return (n - k + 1) * (n - k + 1) * (n - k + 1)\n}\nfunction multiplesOfNum(m, n) {\n/**\n * * Write a function to find m number of multiples of n.\n */", "entry_point": "multiplesOfNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = multiplesOfNum(arg00, arg01);\nvar v0 = [3, 6, 9, 12];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 5;\nvar x1 = multiplesOfNum(arg10, arg11);\nvar v1 = [5, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 2;\nvar x2 = multiplesOfNum(arg20, arg21);\nvar v2 = [2, 4, 6, 8, 10, 12, 14, 16, 18];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return m - (m / n) * n;\n}\n", "\n  // O(n)\n  if (!n ||!m) return null;\n  let dp = [];\n  dp[0] = 1;\n  for (let i = 1; i <= n; i++) {\n    dp[i] = 0;\n    for (let j = 1; j <= m; j++) {\n      dp[i] += dp[i - j] * dp[i - j];\n    }\n  }\n\n  return dp[n];\n}\n", "\n    if (m == 0 ||!n) return 0;\n\n    let count = n;\n\n    for (let i = 1; i <= n; i++) {\n        if (count >= m) {\n            return i;\n        }\n        count += n;\n    }\n    return 0;\n}\n", "\n    let num_of_multiples = (num) => {\n        return num === 0? 1 : num * (num - 1) / 2;\n    };\n    return Math.max(...[...new Set([m, m - 1, m - 2]).filter((e) => e > 0)].map((e) => num_of_multiples(e)));\n}\n\nconst num = [];\nfor (let i = 1; i < 11; i++) {\n  num.push(i);\n}\nfor (let i = 0; i < num.length; i++) {\n  num.push(num[i]);\n}\n", "\n    if (!m ||!n) return null;\n\n    let dp = [];\n    dp[0] = 0;\n\n    for (let i = 1; i <= n; i++) {\n        dp[i] = dp[i - 1];\n        if (i % m === 0) dp[i]++;\n    }\n\n    return dp[n];\n}\n"]}
{"task_id": "MBJSP/22", "prompt": "function maxProduct(arr) {\n/**\n * * Write a function to find a pair with the highest product from a given array of integers.\n */\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}\nfunction getNumber(n, k) {\n/**\n * * Write a JavaScript function to find the kth element in an array containing odd elements first and then even elements.\n */\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let odd = arr.filter(x => x % 2 !== 0);\n    let even = arr.filter(x => x % 2 === 0);\n    return k <= odd.length ? odd[k - 1] : even[k - odd.length - 1];\n}\nfunction negativeCount(nums) {\n/**\n * * Write a function to find the ration of negative numbers in an array of integers.\n */\n  const negatives = nums.filter(num => num < 0);\n  const total = negatives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\nfunction findFirstDuplicate(nums) {\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */", "entry_point": "findFirstDuplicate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 4, 5];\nvar x0 = findFirstDuplicate(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar x1 = findFirstDuplicate(arg10);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2, 3, 3, 2, 2];\nvar x2 = findFirstDuplicate(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let hashMap = {};\n  for (let i = 0; i < nums.length; i++) {\n      if (hashMap.hasOwnProperty(nums[i])) {\n          return nums[i];\n      } else {\n          hashMap[nums[i]] = true;\n      }\n  }\n  return -1;\n}\n", "\n  let min = nums[0];\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n      if (nums[i] < min) {\n          min = nums[i];\n          minIndex = i;\n      }\n  }\n  return minIndex;\n}\n", "\n  let slow = nums[0];\n  let fast = nums[nums[0]];\n  while (slow!== fast) {\n      slow = nums[slow];\n      fast = nums[nums[fast]];\n  }\n  let index = 0;\n  while (nums[index]!== slow) {\n      index = nums[index];\n  }\n  return nums[index];\n}\n", "\n  for (let i = 0; i < nums.length - 1; i++) {\n    let j = i + 1;\n    while (nums[i] === nums[j]) {\n      j++;\n    }\n    if (i!== j) {\n      return nums[i];\n    }\n  }\n  return nums[nums.length - 1];\n}\n", "\n  for (let i = 0; i < nums.length; i++) {\n    let j = Math.floor(Math.random() * nums.length);\n    if (nums[i] === nums[j]) {\n      return nums[i];\n    }\n  }\n}\n"]}
{"task_id": "MBJSP/23", "prompt": "function merge(lst) {\n/**\n * * Write a JavaScript function to merge the first and last elements separately in a list of lists.\n */\n    if (lst.length <= 1) {\n        return lst;\n    }\n\n    var result = [];\n\n    var first = lst[0];\n    var firstLen = first.length;\n\n    for (var i = 0; i < firstLen; i++) {\n        result.push([first[i]]);\n    }\n\n    for (var i = 1; i < lst.length; i++) {\n        var item = lst[i];\n        var len = item.length;\n\n        for (var j = 0; j < len; j++) {\n            result[j].push(item[j]);\n        }\n    }\n\n    return result;\n}\nfunction maxSumList(lists) {\n/**\n * * Write a function to find the list in a list of lists whose sum of elements is the highest.\n */\n  let maxSum = 0;\n  let maxSumList = [];\n  for (let i = 0; i < lists.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lists[i].length; j++) {\n      sum += lists[i][j];\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumList = lists[i];\n    }\n  }\n  return maxSumList;\n}\nfunction sumColumn(list1, c) {\n/**\n * * Write a function to sum a specific column of a list in a given list of lists.\n */\n  let sum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    sum += list1[i][c];\n  }\n  return sum;\n}\nfunction maximumSum(list1) {\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */", "entry_point": "maximumSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nvar x0 = maximumSum(arg00);\nvar v0 = 33;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[0, 1, 1], [1, 1, 2], [3, 2, 1]];\nvar x1 = maximumSum(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]];\nvar x2 = maximumSum(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let maxSum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < list1[i].length; j++) {\n      sum += list1[i][j];\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n}\n", "\n  let sum = 0;\n  let maxSum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    sum = 0;\n    for (let j = 0; j < list1[i].length; j++) {\n      sum += list1[i][j];\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n}\n", "\n  let sum = 0;\n  let maxSum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      sum += list1[i][j];\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n    sum = 0;\n  }\n  return maxSum;\n}\n", "\n  let maxSum = 0;\n  for (let c = 0; c < list1.length; c++) {\n    let sum = sumColumn(list1, c);\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      sum += list1[i][j];\n    }\n    if (sum > list1.length * list1[i].length) {\n      return sum;\n    }\n    sum = 0;\n  }\n  return 0;\n}\n"]}
{"task_id": "MBJSP/24", "prompt": "function minSwaps(s1, s2) {\n/**\n * * Write a JavaScript function to find minimum number swaps required to make two binary strings equal.\n */\n    let count = 0;\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            count += 1;\n            s1 = s1.replace(s1[i], '');\n            s2 = s2.replace(s2[i], '');\n        }\n    }\n    return count;\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to count minimum number of swaps required to convert one binary string to another.\n */\n    // Write your code here\n    count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return count / 2;\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to find the minimum number of swaps required to convert one binary string to another.\n */\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return (count / 2);\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction binaryToDecimal(binary) {\n/**\n * * Write a function to convert the given binary number to its decimal equivalent.\n */", "entry_point": "binaryToDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 100;\nvar x0 = binaryToDecimal(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1011;\nvar x1 = binaryToDecimal(arg10);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1101101;\nvar x2 = binaryToDecimal(arg20);\nvar v2 = 109;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 0; i < binary.length; i++) {\n        if (binary[i] === '1') {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    // Write your code here\n    let answer = 0, length = binary.length;\n    for (let i = 0; i < length; i++) {\n        answer += Math.pow(2, length - i - 1) * (binary[i] - 48);\n    }\n    return answer;\n}\n", "\n    // Write your code here\n    let count = 0;\n    for (let i = 0; i < binary.length; i++) {\n        if (binary[i] == '1') {\n            count += Math.pow(2, binary.length - i - 1);\n        }\n    }\n    return count;\n}\n", "\n    let decimal = 0;\n    let i = 0;\n    while (binary!= 0) {\n        let val = binary % 10;\n        decimal = decimal + val * Math.pow(2, i);\n        binary = binary / 10;\n        i++;\n    }\n    return decimal;\n}\n", "\n    let num = binary.toString();\n    let count = 0;\n    while (num.length > 1) {\n        count += (num.length - 1) * Math.pow(2, (num.length - 1));\n        num = num.substring(num.length - 1);\n    }\n    count += Math.pow(2, num.length - 1);\n    return count;\n}\n"]}
{"task_id": "MBJSP/25", "prompt": "function findKProduct(testlist, k) {\n/**\n * * Write a function to find the product of it\u2019s kth index in the given tuples.\n */\n  let product = 1;\n  for (let i = 0; i < testList.length; i++) {\n    product *= testList[i][k];\n  }\n  return product;\n}\nfunction findMinDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return minDiff;\n}\nfunction findSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of non-repeated elements in a given array.\n */\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    sum += arr[i];\n  }\n  return sum;\n}\nfunction findProduct(arr, n) {\n/**\n * * Write a JavaScript function to find the product of non-repeated elements in a given array.\n */", "entry_point": "findProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3];\nvar arg01 = 4;\nvar x0 = findProduct(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 1];\nvar arg11 = 5;\nvar x1 = findProduct(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 4, 5, 6];\nvar arg21 = 5;\nvar x2 = findProduct(arg20, arg21);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    product *= arr[i];\n  }\n  return product;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    product *= arr[i];\n  }\n  return product;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    product *= arr[i];\n  }\n  return product;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    product *= arr[i];\n  }\n  return product;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    product *= arr[i];\n  }\n  return product;\n}\n"]}
{"task_id": "MBJSP/26", "prompt": "function checkValid(testtup) {\n/**\n * * Write a function to check if the given tuple contains all valid values or not.\n */\n  return testTup.every(function(element) {\n    return element === true;\n  });\n}\nfunction checkNone(testtup) {\n/**\n * * Write a function to check if the given tuple has any \"none\" value or not.\n */\n  return testTup.some(x => x === null);\n}\nfunction checkTuples(testtuple, k) {\n/**\n * * Write a function to check if the given tuple contains only k elements.\n */\n  const tuple = [...testTuple];\n  const kSet = new Set(k);\n  for (let i = 0; i < tuple.length; i++) {\n    if (!kSet.has(tuple[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction checkKElements(testlist, k) {\n/**\n * * Write a function to check if the given tuple list has all k elements.\n */", "entry_point": "checkKElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]];\nvar arg01 = 4;\nvar x0 = checkKElements(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 7, 7], [7, 7]];\nvar arg11 = 7;\nvar x1 = checkKElements(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[9, 9], [9, 9, 9, 9]];\nvar arg21 = 7;\nvar x2 = checkKElements(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let tupleList = [...testTuple];\n  for (let i = 0; i < testlist.length; i++) {\n    tupleList = tupleList.filter(", "\n  const tupleList = testlist.map(", "\n  const testTuple = testlist.map(x => [...x]);\n  return testTuple.every(", "\n  const list = [...testTuple];\n  for (let i = 0; i < list.length; i++) {\n    if (k.indexOf(list[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  const list = [...testTuple];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== k[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]}
{"task_id": "MBJSP/27", "prompt": "function removeDuplicate(list1) {\n/**\n * * Write a function to remove duplicates from a list of lists.\n */\n  let list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (!list2.includes(list1[i][j])) {\n        list2.push(list1[i][j]);\n      }\n    }\n  }\n  return list2;\n}\nfunction removeAllSpaces(text) {\n/**\n * * Write a function to remove all whitespaces from a string.\n */\n  return text.replace(/\\s/g, '');\n}\nfunction removeDuplicList(l) {\n/**\n * * Write a function to remove duplicate words from a given list of strings.\n */\n  const set = new Set(l);\n  return [...set];\n}\nfunction remove(list) {\n/**\n * * Write a JavaScript function to remove all digits from a list of strings.\n */", "entry_point": "remove", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"4words\", \"3letters\", \"4digits\"];\nvar x0 = remove(arg00);\nvar v0 = [\"words\", \"letters\", \"digits\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"28Jan\", \"12Jan\", \"11Jan\"];\nvar x1 = remove(arg10);\nvar v1 = [\"Jan\", \"Jan\", \"Jan\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"wonder1\", \"wonder2\", \"wonder3\"];\nvar x2 = remove(arg20);\nvar v2 = [\"wonder\", \"wonder\", \"wonder\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return list.filter((e) => e.match(/\\d+/g))\n}\n", "\n  return list.filter(x =>!x.match(/\\d/));\n}\n", "\n  return list.filter(e =>!isNaN(parseFloat(e)));\n}\n", "\n  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (isString(list[i])) {\n      list[i] = removeDigits(list[i]);\n    }\n    result.push(list[i]);\n  }\n  return result;\n}\n", "\n  return list.filter(x => {\n    return x.match(/\\d/g) === null;\n  });\n}\n"]}
{"task_id": "MBJSP/28", "prompt": "function bellNumber(n) {\n/**\n * * Write a JavaScript function to find nth bell number.\n */\n  let bell = 1;\n  for (let i = 1; i <= n; i++) {\n    bell = bell * (n + 1 - i) / i;\n  }\n  return bell;\n}\nfunction sumOfSquare(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of binomial co-efficients.\n */\n  function factorial(start, end) {\n    var res = 1\n    for (var i = start; i <= end; i++) {\n      res *= i\n    }\n    return res\n  }\n\n  return (factorial(n + 1, 2 * n) / factorial(1, n))\n}\nfunction sumOfProduct(n) {\n/**\n * * Write a JavaScript function to find sum of product of binomial co-efficients.\n */\n  function binomialCoeff(n, k) {\n    if (n < k) {\n      return 0;\n    }\n    return factorial(n) / factorial(k) / factorial(n - k);\n  }\n\n  function factorial(n) {\n    if (n < 2) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  }\n  return binomialCoeff(2 * n, n - 1);\n}\nfunction binomialCoeff(n, k) {\n/**\n * * Write a JavaScript function to find binomial co-efficient.\n */", "entry_point": "binomialCoeff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 2;\nvar x0 = binomialCoeff(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 3;\nvar x1 = binomialCoeff(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 2;\nvar x2 = binomialCoeff(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n < k) {\n    return 0;\n  }\n  var res = 1;\n  for (var i = n - k + 1; i <= n; i++) {\n    res *= i;\n  }\n  for (var i = 2; i <= k; i++) {\n    res /= i;\n  }\n  return res;\n}\n", "\n  return Math.pow(1 - 1 / (2 * n), n) * Math.pow(1 / (2 * n), n - k) * Math.pow(1 / (2 * n), k);\n}\n", "\n  ", "\n  if (n < k) {\n    return 0;\n  }\n  if (n == k || k == 0) {\n    return 1;\n  }\n  return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k);\n}\n", "\n  return Math.pow(1 - 1 / n, k);\n}\n"]}
{"task_id": "MBJSP/29", "prompt": "function getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction getNumber(n, k) {\n/**\n * * Write a JavaScript function to find the kth element in an array containing odd elements first and then even elements.\n */\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let odd = arr.filter(x => x % 2 !== 0);\n    let even = arr.filter(x => x % 2 === 0);\n    return k <= odd.length ? odd[k - 1] : even[k - odd.length - 1];\n}\nfunction firstOdd(nums) {\n/**\n * * Write a JavaScript function to find the first odd number in a given list of numbers.\n */\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !== 0) {\n            return nums[i];\n        }\n    }\n}\nfunction getOddOccurrence(arr, arrsize) {\n/**\n * * Write a JavaScript function to find the element occurring odd number of times.\n */", "entry_point": "getOddOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 2, 3, 1];\nvar arg01 = 7;\nvar x0 = getOddOccurrence(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 2, 3, 1, 3];\nvar arg11 = 7;\nvar x1 = getOddOccurrence(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2];\nvar arg21 = 13;\nvar x2 = getOddOccurrence(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2!== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\n", "\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2!== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\n", "\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2!== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\n", "\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2!== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\n", "\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2!== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/30", "prompt": "function split(word) {\n/**\n * * Write a JavaScript function to split a string into characters.\n */\n    return word.split('');\n}\nfunction occuranceSubstring(text, pattern) {\n/**\n * * Write a function to find the occurrence and position of the substrings within a string.\n */\n  const first = text.indexOf(pattern);\n  const last = first + pattern.length;\n  return [pattern, first, last];\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction countSubstringWithEqualEnds(s) {\n/**\n * * Write a JavaScript function to count all the substrings starting and ending with same characters.\n */", "entry_point": "countSubstringWithEqualEnds", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = countSubstringWithEqualEnds(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar x1 = countSubstringWithEqualEnds(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = countSubstringWithEqualEnds(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        for (let j = i; j < s.length; j++) {\n            if (s[i] === s[j]) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n", "\n    let counts = [];\n    for (let i = 0; i < s.length; i++) {\n        for (let j = 0; j < s.length; j++) {\n            if (s[i] === s[j]) {\n                counts.push(s.substr(i, j - i + 1));\n            }\n        }\n    }\n    return counts;\n}\n", "\n  const first = s.substring(0, s.length - 1);\n  const last = s.substring(1, s.length);\n  return first.length + last.length;\n}\n", "\n  const end = s.length - 1;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[end]) {\n            count++;\n        }\n    }\n  return count;\n}\n", "\n    return s.split('').length;\n}\n"]}
{"task_id": "MBJSP/31", "prompt": "function nthSuperUglyNumber(n, primes) {\n/**\n * * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n */\n  const pq = new Heap();\n  const uglyNumbers = [];\n  pq.push(1);\n\n  while (uglyNumbers.length < n) {\n    const uglyNumber = pq.pop();\n    uglyNumbers.push(uglyNumber);\n\n    for (let i = 0; i < primes.length; i++) {\n      const prime = primes[i];\n      const nextUglyNumber = uglyNumber * prime;\n      if (nextUglyNumber > uglyNumbers[uglyNumbers.length - 1]) {\n        pq.push(nextUglyNumber);\n      }\n    }\n  }\n\n  return uglyNumbers[n - 1];\n}\nfunction maximumProduct(nums) {\n/**\n * * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n */\n    let arr = nums.sort((a, b) => a - b)\n    let len = arr.length\n    return Math.max(arr[0] * arr[1] * arr[len - 1], arr[len - 1] * arr[len - 2] * arr[len - 3])\n}\nfunction heapQueueLargest(nums, n) {\n/**\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n */\n  const sortedNums = nums.sort((a, b) => b - a)\n  const minHeap = []\n  for (let i = 0; i < n; i++) {\n    minHeap.push(sortedNums.shift())\n  }\n  return minHeap\n}\nfunction func(nums, k) {\n/**\n * * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n */", "entry_point": "func", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg01 = 3;\nvar x0 = func(arg00, arg01);\nvar v0 = [5, 7, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg11 = 1;\nvar x1 = func(arg10, arg11);\nvar v1 = [1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg21 = 5;\nvar x2 = func(arg20, arg21);\nvar v2 = [6, 5, 7, 8, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const distinct = new Set();\n  const maxHeap = new Heap(nums => nums.length)\n  for (let i = 0; i < k; i++) {\n    const num = maxHeap.pop()\n    distinct.add(num)\n  }\n\n  const sortedDistinct = Array.from(distinct).sort((a, b) => b - a)\n  let sum = 0\n  let n = 0;\n  while (n < k) {\n    sum += sortedDistinct[n];\n    n++;\n  }\n\n  return sum;\n}\n", "\n  const sortedNums = nums.sort((a, b) => b - a)\n  const maxHeap = []\n  for (let i = 0; i < k; i++) {\n    maxHeap.push(sortedNums.shift())\n  }\n  let count = 0\n  while (sortedNums.length) {\n    maxHeap.push(sortedNums.shift())\n    count++\n  }\n  return maxHeap\n}\n", "\n  const numsLen = nums.length\n  const minHeap = new MinHeap(k)\n  for (let i = 0; i < numsLen; i++) {\n    const num = nums[i];\n    if (minHeap.getCount(num) < k) {\n      minHeap.decrease(num, minHeap.getCount(num) + 1);\n    }\n  }\n  return minHeap.getElements();\n}\n", "\n  const heap = new Heap();\n  const counts = {}\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (!counts[num]) {\n      counts[num] = 1;\n      heap.push(num);\n    } else {\n      counts[num] += 1;\n    }\n  }\n  while (heap.length > 0 && k > 0) {\n    const num = heap.pop();\n    if (counts[num]) {\n      if (--counts[num] == 0) {\n        delete counts[num];\n      }\n      heap.push(num);\n    }\n    k--;\n  }\n  return counts;\n}\n", "\n  const heap = new Heap()\n  const counts = {}\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    counts[num] = (counts[num] || 0) + 1;\n    if (counts[num] > heap.size() + 1) {\n      heap.push(num);\n    } else if (counts[num] === heap.size() + 1) {\n      heap.push(num);\n      heap.pop();\n    }\n  }\n\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(heap.pop())\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/32", "prompt": "function sum(n) {\n/**\n * * Write a JavaScript function to find sum of all prime divisors of a given number.\n */\n    let result = 0;\n    let n_sqrt = Math.sqrt(n);\n    let divisor = 2;\n\n    while (divisor <= n_sqrt) {\n        if (n % divisor === 0) {\n            while (n % divisor === 0) {\n                n = n / divisor;\n            }\n            result += divisor;\n        }\n        divisor += 1;\n    }\n    if (n > 1) {\n        result += n;\n    }\n\n    return result;\n}\nfunction smallestDivisor(n) {\n/**\n * * Write a JavaScript function to find the smallest prime divisor of a number.\n */\n    let i = 2;\n    while (i <= n / i) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nfunction countFac(n) {\n/**\n * * Write a JavaScript function to count the number of distinct power of prime factor of given number.\n */\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i === 0) {\n          n /= i;\n          count++;\n        } else {\n          j++;\n        }\n      }\n    }\n  }\n  return count;\n}\nfunction maxPrimeFactors(n) {\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */", "entry_point": "maxPrimeFactors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar x0 = maxPrimeFactors(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = maxPrimeFactors(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = maxPrimeFactors(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let i = 2;\n  while (i <= n / i) {\n    if (n % i === 0) {\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i * j === 0) {\n          n /= i * j;\n          return i * j;\n        } else {\n          j++;\n        }\n      }\n    }\n    i++;\n  }\n  return n;\n}\n", "\n  let i = 2;\n  while (i <= n / 2) {\n    if (n % i === 0) {\n      n /= i;\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i === 0) {\n          n /= i;\n          j++;\n        } else {\n          j++;\n        }\n      }\n    } else {\n      i++;\n    }\n  }\n  if (n > 1) {\n    return n;\n  }\n  return 0;\n}\n", "\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i === 0) {\n          n /= i;\n        } else {\n          j++;\n        }\n      }\n      result = i;\n    }\n  }\n  return result;\n}\n", "\n  let i = 2;\n  while (i <= n / i) {\n    if (n % i === 0) {\n      let j = 2;\n      while (n % i === 0) {\n        if (i * j > n) {\n          return i;\n        } else {\n          n /= i;\n        }\n      }\n    }\n    i++;\n  }\n  return n;\n}\n", "\n  let i = 2;\n  let maxPrimeFactors = 0;\n  while (i <= n / i) {\n    if (n % i === 0) {\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i === 0) {\n          if (i > maxPrimeFactors) {\n            maxPrimeFactors = i;\n          }\n        } else {\n          j++;\n        }\n      }\n    }\n    i++;\n  }\n  return maxPrimeFactors;\n}\n"]}
{"task_id": "MBJSP/33", "prompt": "function minSwaps(s1, s2) {\n/**\n * * Write a JavaScript function to find minimum number swaps required to make two binary strings equal.\n */\n    let count = 0;\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            count += 1;\n            s1 = s1.replace(s1[i], '');\n            s2 = s2.replace(s2[i], '');\n        }\n    }\n    return count;\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to find the minimum number of swaps required to convert one binary string to another.\n */\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return (count / 2);\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to count minimum number of swaps required to convert one binary string to another.\n */\n    // Write your code here\n    count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return count / 2;\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction decimalToBinary(n) {\n/**\n * * Write a JavaScript function to convert a decimal number to binary number.\n */", "entry_point": "decimalToBinary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = decimalToBinary(arg00);\nvar v0 = 1010;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar x1 = decimalToBinary(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = decimalToBinary(arg20);\nvar v2 = 10100;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    if (n == 0) {\n        return \"\";\n    } else if (n % 2 == 0) {\n        return decimalToBinary(n / 2);\n    } else {\n        return \"1\" + decimalToBinary((n - 1) / 2);\n    }\n}\n", "\n    let bin = 0;\n    let rem = 0;\n    while (n > 0) {\n        rem = n % 2;\n        bin = bin + rem * Math.pow(10, n / 2);\n        n = n / 2;\n    }\n    return bin;\n}\n", "\n    let result = '';\n    while (n > 0) {\n        let rem = n % 2;\n        result = rem + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "\n    let s = '';\n    let res = '';\n    while (n > 0) {\n        res = n % 2 + res;\n        n = n / 2;\n    }\n    return res;\n}\n", "\n    let binary = 0;\n    let temp = n;\n    while (temp > 0) {\n        binary = binary * 2 + (temp % 2);\n        temp = temp / 2;\n    }\n    return binary;\n}\n"]}
{"task_id": "MBJSP/34", "prompt": "function findFirstOccurrence(a, x) {\n/**\n * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n */\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\nfunction findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction findFirstMissing(array, start, end) {\n/**\n * * Write a JavaScript function to find the smallest missing number from the given array.\n */\n  let result = end + 1;\n\n  for (let i = start; i <= end; i++) {\n    if (array.includes(i) === false) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction findMissing(ar, n) {\n/**\n * * Write a JavaScript function to find the missing number in a sorted array.\n */", "entry_point": "findMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5];\nvar arg01 = 4;\nvar x0 = findMissing(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 4, 5];\nvar arg11 = 4;\nvar x1 = findMissing(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 5, 6, 7];\nvar arg21 = 5;\nvar x2 = findMissing(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let low = 0;\n  let high = n - 1;\n  let mid;\n\n  if (ar[low]!== ar[high]) {\n    while (low <= high) {\n      mid = Math.floor((low + high) / 2);\n      if (ar[mid] < ar[high]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (ar[i]!== i + 1) {\n      return i + 1;\n    }\n  }\n  return -1;\n}\n", "\n  let result = 0;\n\n  for (let i = 0; i < n; i++) {\n    if (ar[i]!== i + 1) {\n      result = i + 1;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  let result = n + 1;\n\n  for (let i = 0; i < n; i++) {\n    if (ar[i]!== i) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  let result = n + 1;\n\n  for (let i = 0; i < n; i++) {\n    if (ar[i]!== i + 1) {\n      result = ar[i];\n      break;\n    }\n  }\n  return result;\n}\n", "\n  return ar[n - 1] + 1;\n}\n"]}
{"task_id": "MBJSP/35", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction findRectNum(n) {\n/**\n * * Write a function to find the n-th rectangular number.\n */", "entry_point": "findRectNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = findRectNum(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = findRectNum(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = findRectNum(arg20);\nvar v2 = 42;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\treturn n * (2 * n - 1) / 2\n}\n", "\n\treturn n * (n + 1) / 2\n}\n", "\n\tif (n <= 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn findRectNum(n - 1) + n;\n}\n", "\n\treturn jacobsthalNum(n) * (n + 1);\n}\n", "\n\treturn n * (n + 1) / 2;\n}\n"]}
{"task_id": "MBJSP/36", "prompt": "function firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit in factorial of a given number.\n */\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    let firstDigit = factorial.toString().split('').map(Number)[0];\n    return firstDigit;\n}\nfunction lastDigitFactorial(n) {\n/**\n * * Write a JavaScript function to find the last digit in factorial of a given number.\n */\n    return n < 10 ? n : lastDigitFactorial(n / 10 >> 0) * 10 % 10;\n}\nfunction digitDistanceNums(n1, n2) {\n/**\n * * Write a JavaScript function to find the digit distance between two integers.\n */\n    // convert to string to get the string length.\n    n1 = n1.toString();\n    n2 = n2.toString();\n\n    let difference = Math.abs(n1.length - n2.length);\n\n    if (n1.length > n2.length) {\n        difference -= 1;\n    }\n\n    let min = Math.min(n1.length, n2.length);\n\n    for (let i = 0; i < min; i++) {\n        difference += Math.abs(n1.charCodeAt(i) - n2.charCodeAt(i));\n    }\n\n    return difference;\n}\nfunction findNthDigit(p, q, n) {\n/**\n * * Write a JavaScript function to find the nth digit in the proper fraction of two given numbers.\n */", "entry_point": "findNthDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 1;\nvar x0 = findNthDigit(arg00, arg01, arg02);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 5;\nvar arg12 = 1;\nvar x1 = findNthDigit(arg10, arg11, arg12);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 6;\nvar arg22 = 5;\nvar x2 = findNthDigit(arg20, arg21, arg22);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let nthDigit = n;\n    let intPart = Math.floor(p);\n    let fractPart = q / Math.pow(10, n);\n\n    if (fractPart < 1 && fractPart > 0) {\n        nthDigit = intPart;\n    } else {\n        nthDigit = intPart + fractPart;\n    }\n\n    return nthDigit.toString().charCodeAt(0);\n}\n", "\n    let result = 0;\n    let quotient = p / q;\n    let num = p % q;\n    let quotientList = [];\n\n    while (quotient) {\n        quotientList.push(quotient);\n        quotient = quotient / 10;\n    }\n\n    let i = 0;\n    for (let number of quotientList) {\n        if (number > quotientList[i]) {\n            i++;\n        }\n    }\n\n    i = i + n;\n\n    if (i < quotientList.length) {\n        result = Math.abs(quotientList[i] - quotientList[i - 1]);\n    }\n\n    return result;\n}\n", "\n    let first = Math.floor(p / q);\n    let second = p % q;\n    // find the first digit in the proper fraction\n    let firstDigit = first.toString().split('').map(Number)[0];\n    // get the first digit in the proper fraction\n    let num = n;\n\n    while (num > 0) {\n        firstDigit *= num;\n        num--;\n    }\n    // find the second digit in the proper fraction\n    second = second.toString().split('').map(Number)[0];\n    // get the second digit in the proper fraction\n    num = n;\n\n    while (num > 0) {\n        second *= num;\n        num--;\n    }\n\n    // get the last digit in the proper fraction\n    let lastDigit = second.toString().split('').map(Number)[0];\n\n    return firstDigit % 10 + lastDigit % 10;\n}\n", "\n    let arr1 = [...p.toString()];\n    let arr2 = [...q.toString()];\n\n    let arr1Length = arr1.length;\n    let arr2Length = arr2.length;\n    let length = Math.min(arr1Length, arr2Length);\n    let index = arr1Length > arr2Length? arr2Length - 1 : arr1Length - 1;\n\n    while (length > 0) {\n        if (p[index] - q[index] == n) {\n            return p[index];\n        } else if (p[index] - q[index] > n) {\n            index--;\n        } else if (p[index] - q[index] < n) {\n            index--;\n            length--;\n        }\n    }\n\n    return '-1';\n}\n", "\n    let whole = Math.floor(p / q);\n    let part = p - (q * whole);\n\n    let digit = Math.floor(part / q);\n\n    if (n == whole + digit) {\n        return digit;\n    }\n\n    if (n == whole) {\n        return n % digit;\n    }\n\n    if (n > whole && n < whole + digit) {\n        return findNthDigit(q, whole, n);\n    }\n\n    return findNthDigit(p, q, n - whole - digit);\n}\n"]}
{"task_id": "MBJSP/37", "prompt": "function sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction sortSublists(list1) {\n/**\n * * Write a function to sort a list of lists by length and value.\n */\n  const result = []\n  list1.sort((a, b) => {\n    if (a.length === b.length) {\n      return a[0] > b[0] ? 1 : -1\n    } else {\n      return a.length > b.length ? 1 : -1\n    }\n  })\n  for (let sub = 0; sub < list1.length; sub++) {\n    for (let item = 0; item < list1[sub].length; item++) {\n      if (!result[sub]) result[sub] = []\n      result[sub].push(list1[sub][item])\n    }\n  }\n  return result\n}\nfunction removeDuplicList(l) {\n/**\n * * Write a function to remove duplicate words from a given list of strings.\n */\n  const set = new Set(l);\n  return [...set];\n}\nfunction sortMixedList(mixedlist) {\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */", "entry_point": "sortMixedList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x0 = sortMixedList(arg00);\nvar v0 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x1 = sortMixedList(arg10);\nvar v1 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x2 = sortMixedList(arg20);\nvar v2 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const mixednum = mixedlist.filter(e => e.length > 0 && typeof e === 'number')\n  const mixedstr = mixedlist.filter(e => e.length > 0 && typeof e ==='string')\n  const mixednumSorted = mixednum.sort((a, b) => a - b);\n  const mixedstrSorted = mixedstr.sort((a, b) => a - b);\n  return mixednumSorted.concat(mixedstrSorted)\n}\n", "\n  return mixedlist.sort((a, b) => {\n    if (typeof a ==='string') return a.localeCompare(b)\n    if (typeof b ==='string') return -1\n    return a < b? -1 : a > b? 1 : 0;\n  });\n}\n", "\n  const mixedStrings = mixedlist.filter(x => typeof x === \"string\");\n  const mixedIntegers = mixedlist.filter(x => typeof x === \"number\");\n  const mixedStringsAndIntegers = mixedlist.filter(x => typeof x === \"string\" || typeof x === \"number\");\n  if (mixedStrings.length > 0) {\n    mixedStrings.sort((a, b) => {\n      return a > b? 1 : -1\n    })\n  }\n  if (mixedIntegers.length > 0) {\n    mixedIntegers.sort((a, b) => {\n      if (a > b) {\n        return 1\n      } else if (a < b) {\n        return -1\n      } else {\n        return 0\n      }\n    })\n  }\n  if (mixedStringsAndIntegers.length > 0) {\n    mixedStringsAndIntegers.sort((a, b) => {\n      if (a > b) {\n        return 1\n      } else if (a < b) {\n        return -1\n      } else {\n        return 0\n      }\n    })\n  }\n  return mixedlist.concat(mixedStrings, mixedStringsAndIntegers, mixedIntegers);\n}\n", "\n  const mixedlist1 = mixedlist.map(l => typeof l ==='string'? l.toUpperCase() : l)\n  mixedlist1.sort((a, b) => {\n    return a > b? 1 : -1\n  })\n  return mixedlist1\n}\n", "\n  let list = [];\n  mixedlist.forEach(item => {\n    if (typeof item ==='string') list.push(item)\n    else if (typeof item === 'number') list.push(item)\n  });\n  const sortedNumbers = list.sort((a, b) => a - b);\n  return sortedNumbers;\n}\n"]}
{"task_id": "MBJSP/38", "prompt": "function sumEvenOdd(list1) {\n/**\n * * Write a function to find the sum of first even and odd number of a given list.\n */\n    var firstEven = list1.find(function(el) {\n        return el % 2 == 0;\n    });\n    var firstOdd = list1.find(function(el) {\n        return el % 2 != 0;\n    });\n    return (firstEven + firstOdd);\n}\nfunction mulEvenOdd(list1) {\n/**\n * * Write a function to find the product of first even and odd number of a given list.\n */\n  const even = list1.filter(num => num % 2 === 0);\n  const odd = list1.filter(num => num % 2 !== 0);\n\n  return odd[0] * even[0];\n}\nfunction diffEvenOdd(list1) {\n/**\n * * Write a function to find the difference of first even and odd number of a given list.\n */\n  if (list1.length < 1) {\n    return 'List is empty';\n  }\n  if (list1.length === 1) {\n    return 0;\n  }\n  const evenList = list1.filter(x => x % 2 === 0);\n  const oddList = list1.filter(x => x % 2 === 1);\n  return Math.abs(evenList[0] - oddList[0]);\n}\nfunction divEvenOdd(list1) {\n/**\n * * Write a function to find the division of first even and odd number of a given list.\n */", "entry_point": "divEvenOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 7, 4, 1, 6, 8];\nvar x0 = divEvenOdd(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x1 = divEvenOdd(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 5, 7, 9, 10];\nvar x2 = divEvenOdd(arg20);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (list1.length < 1) {\n    return 'List is empty';\n  }\n  if (list1.length === 1) {\n    return 0;\n  }\n  const evenList = list1.filter(x => x % 2 === 0);\n  const oddList = list1.filter(x => x % 2 === 1);\n  return evenList[0] / oddList[0];\n}\n", "\n  const evenList = list1.filter(x => x % 2 === 0);\n  const oddList = list1.filter(x => x % 2 === 1);\n  return (oddList[0] / evenList[0]);\n}\n```\n\n</section>\n", "\n  if (list1.length < 1) {\n    return 'List is empty';\n  }\n  if (list1.length === 1) {\n    return 0;\n  }\n  const evenList = list1.filter(x => x % 2 === 0);\n  const oddList = list1.filter(x => x % 2 === 1);\n  return evenList[0] / oddList[0];\n}\n", "\n  if (list1.length < 1) {\n    return 'List is empty';\n  }\n  if (list1.length === 1) {\n    return 1;\n  }\n  const evenList = list1.filter(x => x % 2 === 0);\n  const oddList = list1.filter(x => x % 2 === 1);\n  return oddList[0] / evenList[0];\n}\n", "\n  if (list1.length < 1) {\n    return 'List is empty';\n  }\n  if (list1.length === 1) {\n    return 1;\n  }\n  const evenList = list1.filter(x => x % 2 === 0);\n  const oddList = list1.filter(x => x % 2 === 1);\n  return oddList[0] / evenList[0];\n}\n"]}
{"task_id": "MBJSP/39", "prompt": "function checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to check if roots of a quadratic equation are reciprocal of each other or not.\n */\n    if (a == c) {\n        return (\"Yes\");\n    } else {\n        return (\"No\");\n    }\n}\nfunction isIsomorphic(str1, str2) {\n/**\n * * Write a JavaScript function to check whether the two given strings are isomorphic to each other or not.\n */\n  var set1 = {}, set2 = {};\n\n  if (str1.length !== str2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < str1.length; i++) {\n    if (set1[str1[i]] !== undefined && set1[str1[i]] !== str2[i]) {\n      return false;\n    }\n\n    if (set2[str2[i]] !== undefined && set2[str2[i]] !== str1[i]) {\n      return false;\n    }\n\n    set1[str1[i]] = str2[i];\n    set2[str2[i]] = str1[i];\n  }\n\n  return true;\n}\nfunction checkPermutation(str1, str2) {\n/**\n * * Write a function to check if the two given strings are permutations of each other.\n */\n  if (str1.length !== str2.length) return false;\n  const str1Map = {};\n  const str2Map = {};\n  for (let i = 0; i < str1.length; i++) {\n    str1Map[str1[i]] = (str1Map[str1[i]] || 0) + 1;\n    str2Map[str2[i]] = (str2Map[str2[i]] || 0) + 1;\n  }\n  for (let key in str1Map) {\n    if (str1Map[key] !== str2Map[key]) return false;\n  }\n  return true;\n}\nfunction rearangeString(s) {\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */", "entry_point": "rearangeString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab\";\nvar x0 = rearangeString(arg00);\nvar v0 = \"aba\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aabb\";\nvar x1 = rearangeString(arg10);\nvar v1 = \"abab\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abccdd\";\nvar x2 = rearangeString(arg20);\nvar v2 = \"cdabcd\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  var t = s;\n  var len = s.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (s[i] > s[i + 1]) return false;\n    if (s[i] < s[i + 1]) {\n      if (i === 0 || s[i - 1] === s[i] + 1) {\n        t = t.substring(0, i) + s[i] + t.substring(i + 1);\n        i++;\n      } else {\n        t = t.substring(0, i) + s[i] + t.substring(i + 2);\n      }\n    }\n  }\n  return t === s? true : false;\n}\n", "\n  var list = [];\n  for (let i = 0; i < s.length; i++) {\n    var char = s[i];\n    if (list.length === 0 || list[list.length - 1]!== char) {\n      list.push(char);\n    } else {\n      list.pop();\n      if (list.length > 0 && list[list.length - 1] === char) {\n        list.pop();\n      }\n    }\n  }\n  return list.length > 0;\n}\n", "\n  var map = {};\n  for (let i = 0; i < s.length; i++) {\n    map[s[i]] = (map[s[i]] || 0) + 1;\n  }\n  let newString = [];\n  for (let key in map) {\n    newString.push(key);\n  }\n  let newStringLength = newString.length;\n  let oldString = s;\n  let oldStringLength = s.length;\n  var canRearrange = true;\n  while (newStringLength > 0) {\n    let i = 0;\n    while (i < newStringLength - 1) {\n      if (map[newString[i]]!== map[newString[i + 1]]) {\n        canRearrange = false;\n        break;\n      }\n      i++;\n    }\n    if (!canRearrange) break;\n    let j = 0;\n    while (j < newStringLength - 1) {\n      map[newString[j]] -= 1;\n      map[newString[j + 1]] -= 1;\n      j++;\n    }\n    newString = [];\n    let count = 0;\n    let tempString = oldString;\n    for (let key in map) {\n      if (map[key] > 0) {\n        tempString.push(key);\n        count++;\n      }\n    }\n    if (count === 0) {\n      return false;\n    }\n    newString = tempString;\n    newStringLength = newString.length;\n  }\n  return canRearrange;\n}\n", "\n  const letters = { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26 };\n  for (let i = 1; i < s.length; i++) {\n    if (s[i] + 1 === s[i - 1]) {\n      s = s.substring(0, i - 1) + s.substring(i);\n      break;\n    }\n  }\n  let count = 0;\n  let set = [];\n  for (let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    let index = letters[letter];\n    if (!set[index]) {\n      set[index] = 1;\n      count++;\n    }\n  }\n  if (count === s.length) return true;\n  else return false;\n}\n", "\n  var re = /[a-z]{2}[A-Z]{2}[a-z]{2}/g;\n  var newS = s.split('');\n  var i = 0;\n  while (re.test(newS[i])) {\n    if (newS[i].length === 2 && newS[i + 1].length === 2) {\n      if (newS[i] === newS[i + 1] && newS[i + 2].indexOf(newS[i + 1])!== -1) {\n        return false;\n      }\n    }\n    i++;\n  }\n  return true;\n}\n"]}
{"task_id": "MBJSP/40", "prompt": "function countDuplic(lists) {\n/**\n * * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n */\n    \"use strict\";\n    let element = [],\n        frequency = [],\n        running_count = 1;\n    if (!lists) return [element, frequency];\n    for (let i = 0; i < lists.length - 1; i++) {\n        if (lists[i] === lists[i + 1]) {\n            running_count += 1;\n        } else {\n            frequency.push(running_count);\n            element.push(lists[i]);\n            running_count = 1;\n        }\n    }\n    frequency.push(running_count);\n    element.push(lists[lists.length - 1]);\n    return [element, frequency];\n}\nfunction removeDuplicate(string) {\n/**\n * * Write a function to remove duplicate words from a given string using collections module.\n */\n  return [...new Set(string.split(' '))].join(' ');\n}\nfunction groupingDictionary(l) {\n/**\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n */\n  const result = {};\n  l.forEach(function(item) {\n    if (result[item[0]]) {\n      result[item[0]].push(item[1]);\n    } else {\n      result[item[0]] = [item[1]];\n    }\n  });\n  return result;\n}\nfunction freqElement(nums) {\n/**\n * * Write a function to find frequency of the elements in a given list of lists using collections module.\n */", "entry_point": "freqElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar x0 = freqElement(arg00);\nvar v0 = {\"2\":3,\"1\":2,\"5\":2,\"3\":1,\"4\":1,\"6\":1,\"7\":1,\"9\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nvar x1 = freqElement(arg10);\nvar v1 = {\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]];\nvar x2 = freqElement(arg20);\nvar v2 = {\"30\":3,\"80\":2,\"90\":2,\"15\":1,\"20\":1,\"40\":1,\"100\":1,\"110\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  nums.forEach(", "\n  let count = [];\n  nums.forEach(", "\n    return [[...new Set(nums)].sort().reduce(", "\n  const result = {};\n  nums.forEach(", "\n  const result = [];\n  for (let i = 0; i < nums.length - 1; i++) {\n    let elements = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      let elements2 = nums[j];\n      if (elements === elements2) {\n        elements.push(j);\n      }\n    }\n  }\n  elements.forEach("]}
{"task_id": "MBJSP/41", "prompt": "function divOfNums(nums, m, n) {\n/**\n * * Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n */\n  return nums.filter(num => num % m === 0 && num % n === 0);\n}\nfunction divOfNums(nums, m, n) {\n/**\n * * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n */\n  return nums.filter(num => num % m === 0 || num % n === 0);\n}\nfunction countEven(arraynums) {\n/**\n * * Write a function to find number of even elements in the given list using lambda function.\n */\n  return arrayNums.filter(num => num % 2 === 0).length;\n}\nfunction filterEvennumbers(nums) {\n/**\n * * Write a function to filter even numbers using lambda function.\n */", "entry_point": "filterEvennumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = filterEvennumbers(arg00);\nvar v0 = [2, 4, 6, 8, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 45, 67, 84, 93];\nvar x1 = filterEvennumbers(arg10);\nvar v1 = [10, 20, 84];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 7, 9, 8, 6, 4, 3];\nvar x2 = filterEvennumbers(arg20);\nvar v2 = [8, 6, 4];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.filter(num => num % 2 === 0);\n}\n", "\n  return nums.filter(num => num % 2 === 0);\n}\n", "\n  return nums.filter(num => num % 2 === 0);\n}\n", "\n  return nums.filter(num => num % 2 === 0);\n}\n", "\n  return nums.filter(num => num % 2 === 0);\n}\n"]}
{"task_id": "MBJSP/42", "prompt": "function findMinDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return minDiff;\n}\nfunction pairOrSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of xor of all pairs of numbers in the given array.\n */\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += (arr[i] ^ arr[j]);\n        }\n    }\n    return sum;\n}\nfunction findSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of non-repeated elements in a given array.\n */\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    sum += arr[i];\n  }\n  return sum;\n}\nfunction findSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of repeated elements in a given array.\n */", "entry_point": "findSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 1, 4, 5, 6];\nvar arg01 = 8;\nvar x0 = findSum(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 1];\nvar arg11 = 5;\nvar x1 = findSum(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2];\nvar arg21 = 3;\nvar x2 = findSum(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(i, 1);\n        i--;\n      }\n    }\n    sum += arr[i];\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let flag = true;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        flag = false;\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    if (flag) sum += arr[i];\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(i, 1);\n        i--;\n      }\n    }\n    sum += arr[i];\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i - 1]) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/43", "prompt": "function splitList(text) {\n/**\n * * Write a function to split the given string at uppercase letters by using regex.\n */\n  return text.split(/(?=[A-Z])/);\n}\nfunction capitalWordsSpaces(str1) {\n/**\n * * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n */\n    return str1.replace(/([A-Z])/g, ' $1').trim();\n}\nfunction replaceSpaces(text) {\n/**\n * * Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n */\n  return text.replace(/\\s/g, \"_\");\n}\nfunction textMatch(text) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */", "entry_point": "textMatch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab_cbbbc\";\nvar x0 = textMatch(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aab_Abbbc\";\nvar x1 = textMatch(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Aaab_abbbc\";\nvar x2 = textMatch(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.match(/(^|[A-Z_]+)\\s+/);\n}\n", "\n  return text.match(/[a-z_]+/g);\n}\n", "\n  return text.match(/^\\p{Ll}_+/g);\n}\n", "\n  return text.match(/^.*(?=[A-Z0-9]+$)/);\n}\n", "\n  return text.split(' ').map(capitalWordsSpaces).join('_');\n}\n"]}
{"task_id": "MBJSP/44", "prompt": "function textMatch(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or more b's.\n */\n  if (text.match(/a/g) === null) {\n    return \"Not matched!\";\n  } else {\n    return \"Found a match!\";\n  }\n}\nfunction textMatchThree(text) {\n/**\n * * Write a function that matches a string that has an a followed by three 'b'.\n */\n  if (text.match(/a\\w*b\\w*b\\w*/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\nfunction textMatchWordzMiddle(text) {\n/**\n * * Write a function that matches a word containing 'z', not at the start or end of the word.\n */\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\nfunction textMatchString(text) {\n/**\n * * Write a function that matches a word at the beginning of a string.\n */", "entry_point": "textMatchString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \" python\";\nvar x0 = textMatchString(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = textMatchString(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang\";\nvar x2 = textMatchString(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var regex = /^\\w+/;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /^a/;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /^\\w+/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n  var regex = /^\\S+/g;\n  var match = text.match(regex);\n  if (match === null) {\n    return \"Not matched!\";\n  }\n  else {\n    return \"Found a match!\";\n  }\n}\n\n// Write an if statement that uses the ", "\n  if (text.match(/^a\\w*b\\w*/)) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}\n"]}
{"task_id": "MBJSP/45", "prompt": "function getNumber(n, k) {\n/**\n * * Write a JavaScript function to find the kth element in an array containing odd elements first and then even elements.\n */\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let odd = arr.filter(x => x % 2 !== 0);\n    let even = arr.filter(x => x % 2 === 0);\n    return k <= odd.length ? odd[k - 1] : even[k - odd.length - 1];\n}\nfunction maxSumSubseq(a) {\n/**\n * * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n */\n  const len = a.length;\n  const dp = new Array(len);\n\n  dp[0] = a[0];\n  dp[1] = Math.max(a[0], a[1]);\n  for (let i = 2; i < len; i++) {\n    dp[i] = Math.max(dp[i - 1], dp[i - 2] + a[i]);\n  }\n\n  return dp[len - 1];\n}\nfunction getLcm(l) {\n/**\n * * Write a function to find the lcm of the given array elements.\n */\n  let gcd = (a, b) => {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n  };\n  let lcm = l[0];\n  for (let i = 1; i < l.length; i++) {\n    lcm = lcm * (l[i] / gcd(l[i], lcm));\n  }\n  return lcm;\n}\nfunction getGcd(l) {\n/**\n * * Write a function to find the gcd of the given array elements.\n */", "entry_point": "getGcd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, 6, 8, 16];\nvar x0 = getGcd(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = getGcd(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 6, 8];\nvar x2 = getGcd(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let gcd = (a, b) => {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n  };\n  let gcd_arr = l.reduce((a, b) => gcd(a, b), 1);\n  return gcd_arr;\n}\n", "\n  let gcd = (a, b) => {\n    if (a === 0) return b;\n    return gcd(b, a % b);\n  };\n  let gcd = l[0];\n  for (let i = 1; i < l.length; i++) {\n    gcd = gcd(l[i], gcd);\n  }\n  return gcd;\n}\n", "\n  let gcd = (a, b) => {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n  };\n  let gcdArr = l.filter(x => x % 2 === 0);\n  let gcdElem = l.filter(x => x % 2!== 0);\n  let gcdMinus1 = gcdElem.filter(x => x > l[0]);\n  let gcdMinus2 = gcdElem.filter(x => x < l[0]);\n  if (gcdArr.length > 0 && gcdMinus1.length > 0) {\n    return getLcm(gcdArr);\n  } else if (gcdArr.length > 0 && gcdMinus2.length > 0) {\n    return gcdArr[0];\n  } else if (gcdMinus1.length > 0 && gcdMinus2.length > 0) {\n    return Math.min(gcdMinus1[0], gcdMinus2[0]);\n  }\n  return Math.max(l[0], l[1]);\n}\n", "\n  let gcd = l[0];\n  for (let i = 1; i < l.length; i++) {\n    gcd = gcd(gcd, l[i]);\n  }\n  return gcd;\n}\n", "\n  let gcd = (a, b) => {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n  };\n  let gcd = l[0];\n  for (let i = 1; i < l.length; i++) {\n    gcd = gcd(l[i], gcd(l[i], l[0] / gcd(l[0], l[i])));\n  }\n  return gcd;\n}\n"]}
{"task_id": "MBJSP/46", "prompt": "function allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction isIsomorphic(str1, str2) {\n/**\n * * Write a JavaScript function to check whether the two given strings are isomorphic to each other or not.\n */\n  var set1 = {}, set2 = {};\n\n  if (str1.length !== str2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < str1.length; i++) {\n    if (set1[str1[i]] !== undefined && set1[str1[i]] !== str2[i]) {\n      return false;\n    }\n\n    if (set2[str2[i]] !== undefined && set2[str2[i]] !== str1[i]) {\n      return false;\n    }\n\n    set1[str1[i]] = str2[i];\n    set2[str2[i]] = str1[i];\n  }\n\n  return true;\n}\nfunction areRotations(string1, string2) {\n/**\n * * Write a JavaScript function to check whether the given strings are rotations of each other or not.\n */\n    if (string1.length !== string2.length) {\n        return false;\n    }\n    return (string2 + string2).includes(string1);\n}\nfunction testDistinct(data) {\n/**\n * * Write a JavaScript function to determine whether all the numbers are different from each other are not.\n */", "entry_point": "testDistinct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, 9];\nvar x0 = testDistinct(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 5, 5, 7, 9];\nvar x1 = testDistinct(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar x2 = testDistinct(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let distinct = 0;\n  for (let i = 0; i < data.length; i++) {\n    if (data[i]!== data[0]) {\n      distinct++;\n    }\n  }\n  return distinct === data.length;\n}\n", "\n    const arr = data.split('');\n    let set = {};\n    arr.forEach((value, index) => {\n        if (set[value]!== undefined) {\n            return false;\n        }\n        set[value] = true;\n    });\n    return true;\n}\n", "\n    let count = 0;\n    let output = '';\n    data.forEach(value => {\n        if (count === 0) {\n            output += value;\n            count++;\n        } else if (count === 1) {\n            output += value +'';\n        } else {\n            if (value!== output[output.length - 1]) {\n                output += value +'';\n            } else {\n                count++;\n            }\n        }\n    });\n    if (output.length > 0) {\n        output = output.trim();\n        output = output.split(' ');\n        output.sort().join(' ');\n        console.log('Distinct numbers:', output);\n    }\n}\n", "\n    let nums = data;\n    let res = false;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = i + 1; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                res = true;\n            }\n        }\n    }\n    return res;\n}\n", "\n    let result = true;\n    for (let i = 0; i < data.length - 1; i++) {\n        if (data[i] === data[i + 1]) {\n            result = false;\n        }\n    }\n\n    return result;\n}\n"]}
{"task_id": "MBJSP/47", "prompt": "function lastTwoDigits(n) {\n/**\n * * Write a JavaScript function to find the last two digits in factorial of a given number.\n */\n  let a = 1;\n  while (n > 1) {\n    a *= n;\n    n--;\n  }\n  return a % 100;\n}\nfunction firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit in factorial of a given number.\n */\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    let firstDigit = factorial.toString().split('').map(Number)[0];\n    return firstDigit;\n}\nfunction lastDigitFactorial(n) {\n/**\n * * Write a JavaScript function to find the last digit in factorial of a given number.\n */\n    return n < 10 ? n : lastDigitFactorial(n / 10 >> 0) * 10 % 10;\n}\nfunction computeLastDigit(a, b) {\n/**\n * * Write a JavaScript function to find the last digit when factorial of a divides factorial of b.\n */", "entry_point": "computeLastDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = computeLastDigit(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 8;\nvar x1 = computeLastDigit(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar x2 = computeLastDigit(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return a < 10? a : computeLastDigit(a / 10 >> 0) * 10 % 10;\n}\n", "\n  let digit = 0;\n  let dividend = a;\n  let divisor = b;\n  while (dividend > 0) {\n    let remainder = dividend % divisor;\n    digit += remainder;\n    dividend = remainder * 10;\n  }\n  return digit % 10;\n}\n", "\n    return a % 10 == 0? b % 10 : computeLastDigit(a % 10, b % 10);\n}\n", "\n  return a % b;\n}\n", "\n  return lastDigitFactorial(a) % 10;\n}\n"]}
{"task_id": "MBJSP/48", "prompt": "function toggleFAndLBits(n) {\n/**\n * * Write a JavaScript function to toggle only first and last bits of a given number.\n */\n    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1;\n}\nfunction leftRotate(n, d) {\n/**\n * * Write a JavaScript function to left rotate the bits of a given number.\n */\n  return (n << d) | (n >>> (32 - d));\n}\nfunction countSetBits(n) {\n/**\n * * Write a JavaScript function to count the total set bits from 1 to n.\n */\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += i.toString(2).split('').filter(x => x === '1').length;\n  }\n  return count;\n}\nfunction oddBitSetNumber(n) {\n/**\n * * Write a JavaScript function to set all odd bits of a given number.\n */", "entry_point": "oddBitSetNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = oddBitSetNumber(arg00);\nvar v0 = 15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = oddBitSetNumber(arg10);\nvar v1 = 21;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = oddBitSetNumber(arg20);\nvar v2 = 31;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n | (n - 1);\n}\n", "\n  for (let i = 1; i <= n; i += 2) {\n    n = n | i;\n  }\n  return n;\n}\n", "\n  let setBits = [];\n  for (let i = 1; i <= n; i++) {\n    setBits = setBits.concat(i.toString(2).split('').filter(x => x === '1').map(x => parseInt(x)));\n  }\n  let count = setBits.length;\n  let sum = 0;\n  for (let i = 0; i < count; i++) {\n    sum += setBits[i];\n  }\n  return sum;\n}\n", "\n  n |= n - 1;\n  let oddCount = n.toString(2).split('').filter(x => x === '1').length;\n  return oddCount;\n}\n", "\n  let odd = 0;\n  for (let i = 0; i < 32; i++) {\n    if ((1 << i) & n) {\n      odd++;\n    }\n  }\n  return odd;\n}\n"]}
{"task_id": "MBJSP/49", "prompt": "function moveLast(numlist) {\n/**\n * * Write a JavaScript function to shift first element to the end of given list.\n */\n    let firstElement = numList[0];\n    numList.shift();\n    numList.push(firstElement);\n    return numList;\n}\nfunction extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction extractColumn(list1, n) {\n/**\n * * Write a function to extract a specified column from a given nested list.\n */\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i][n]);\n  }\n  return result;\n}\nfunction specifiedElement(nums, n) {\n/**\n * * Write a function to extract every first or specified element from a given two-dimensional list.\n */", "entry_point": "specifiedElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg01 = 0;\nvar x0 = specifiedElement(arg00, arg01);\nvar v0 = [1, 4, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg11 = 2;\nvar x1 = specifiedElement(arg10, arg11);\nvar v1 = [3, 6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg21 = 1;\nvar x2 = specifiedElement(arg20, arg21);\nvar v2 = [2, 5, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let tempList = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (n === 0) {\n      tempList.push(nums[i][0]);\n    } else {\n      tempList.push(nums[i][n]);\n    }\n  }\n  return tempList;\n}\n", "\n    // Write your code here\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        result.push(nums[i][0] || nums[i][n]);\n    }\n    return result;\n}\n", "\n  const list2 = [];\n  for (let i = 0; i < nums.length; i++) {\n    const list = nums[i];\n    list2.push(list[n]);\n  }\n  return list2;\n}\n\n// Note: you would need to write a ", "\n    const result = [];\n    if (nums[0] === undefined) {\n        for (let i = 0; i < nums.length; i++) {\n            result.push(nums[i]);\n        }\n    } else {\n        let element = nums[0];\n        nums.shift();\n        nums.push(element);\n        result.push(nums);\n    }\n    return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums[i].length; j++) {\n      result.push(nums[i][j]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/50", "prompt": "function palindromeLambda(texts) {\n/**\n * * Write a function to find palindromes in a given list of strings using lambda function.\n */\n  return texts.filter(text => {\n    const reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n  });\n}\nfunction squareNums(nums) {\n/**\n * * Write a function to find squares of individual elements in a list using lambda function.\n */\n  return nums.map(num => num * num);\n}\nfunction countEven(arraynums) {\n/**\n * * Write a function to find number of even elements in the given list using lambda function.\n */\n  return arrayNums.filter(num => num % 2 === 0).length;\n}\nfunction minLengthList(inputlist) {\n/**\n * * Write a function to find the list with minimum length using lambda function.\n */", "entry_point": "minLengthList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = minLengthList(arg00);\nvar v0 = [1, [0]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]];\nvar x1 = minLengthList(arg10);\nvar v1 = [1, [1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]];\nvar x2 = minLengthList(arg20);\nvar v2 = [2, [1, 2]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return inputlist.filter(item => item.length).sort((a, b) => a.length - b.length).map(item => item[0]);\n}\n", "\n  return inputlist.filter(input => input.length >= 3).reduce((minlen, list) => {\n    return minlen.length < list.length? minlen : list;\n  });\n}\n", "\n  const inputList = inputlist.map(item => item.length);\n  return inputList.reduce((min, curr) => curr < min? curr : min);\n}\n", "\n  const minList = [...inputlist];\n  return minList.reduce((minList, list) => {\n    return minList.length > list.length? minList : list;\n  }, minList);\n}\n", "\n  return inputlist.map(text => text.length).sort().reverse();\n}\n"]}
{"task_id": "MBJSP/51", "prompt": "function checkExpression(exp) {\n/**\n * * Write a function to check if the given expression is balanced or not.\n */\n  let stack = [];\n  let map = {\n    '{': '}',\n    '(': ')',\n    '[': ']'\n  };\n\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === '{' || exp[i] === '(' || exp[i] === '[') {\n      stack.push(exp[i]);\n    } else if (exp[i] === '}' || exp[i] === ')' || exp[i] === ']') {\n      if (map[stack.pop()] !== exp[i]) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n}\nfunction validityTriangle(a, b, c) {\n/**\n * * Write a function to check if the triangle is valid or not.\n */\n    let sum = a + b + c;\n    return sum === 180;\n}\nfunction checkIsosceles(x, y, z) {\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n  if (x === y && y === z) {\n    return true;\n  } else if (x !== y && y !== z && x !== z) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction checkEquilateral(x, y, z) {\n/**\n * * Write a function to print check if the triangle is equilateral or not.\n */", "entry_point": "checkEquilateral", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 8;\nvar arg02 = 12;\nvar x0 = checkEquilateral(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 6;\nvar arg12 = 12;\nvar x1 = checkEquilateral(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 6;\nvar arg22 = 6;\nvar x2 = checkEquilateral(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return x === y && x === z && y === z;\n}\n", "\n  if (x === y && x === z) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  if (x === y && x === z) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  if (x === y && x === z) {\n    return true;\n  } else {\n    return false;\n  }\n}\n"]}
{"task_id": "MBJSP/52", "prompt": "function arcLength(d, a) {\n/**\n * * Write a function to caluclate arc length of an angle.\n */\n    pi = 22 / 7;\n    if (a >= 360) {\n        return null;\n    }\n    arclength = (pi * d) * (a / 360);\n    return arclength;\n}\nfunction areaTetrahedron(side) {\n/**\n * * Write a function to caluclate the area of a tetrahedron.\n */\n  return side * side * Math.sqrt(3)\n}\nfunction parallelogramPerimeter(b, h) {\n/**\n * * Write a function to caluclate perimeter of a parallelogram.\n */\n  let a = b * h / 2;\n  return a * 2 + 2 * a;\n}\nfunction parallelogramArea(b, h) {\n/**\n * * Write a function to caluclate area of a parallelogram.\n */", "entry_point": "parallelogramArea", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = parallelogramArea(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 20;\nvar x1 = parallelogramArea(arg10, arg11);\nvar v1 = 300;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar arg21 = 9;\nvar x2 = parallelogramArea(arg20, arg21);\nvar v2 = 72;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let a = b * h / 2;\n  return a * a / 4;\n}\n", "\n  return b * h;\n}\n", "\n  return (b * h) / 2;\n}\n", "\n  let a = b * h / 2;\n  return Math.abs(a * a - a * b + b * b) / 2;\n}\n", "\n  return b * h / 2;\n}\n"]}
{"task_id": "MBJSP/53", "prompt": "function isTwoAlter(s) {\n/**\n * * Write a JavaScript function to check whether the given string is made up of two alternating characters or not.\n */\n    return (s.match(/a/g) || []).length === 2 && (s.match(/b/g) || []).length === 2;\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction checkEquality(str) {\n/**\n * * Write a JavaScript function to check whether the first and last characters of a given string are equal or not.\n */", "entry_point": "checkEquality", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcda\";\nvar x0 = checkEquality(arg00);\nvar v0 = \"Equal\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ab\";\nvar x1 = checkEquality(arg10);\nvar v1 = \"Not Equal\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"mad\";\nvar x2 = checkEquality(arg20);\nvar v2 = \"Not Equal\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return str[0] === str[str.length - 1];\n}\n", "\n    let string = str;\n    if (string.length === 0) return false;\n    if (string[0] === string[string.length - 1]) return true;\n    else return false;\n}\n", "\n    let check = str.substring(0, 1) === str.substring(str.length - 1, str.length);\n    if (check) return \"First and last characters are equal.\";\n    else return \"First and last characters are not equal.\";\n}\n", "\n    let arr = str.split(\"\").reverse();\n    let result = arr[0] === arr[1];\n    return result;\n}\n", "\n    if (str[0] === str[str.length - 1]) return true;\n    else return false;\n}\n"]}
{"task_id": "MBJSP/54", "prompt": "function sortByDnf(arr, n) {\n/**\n * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n */\n  const count = new Array(n).fill(0);\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    count[arr[i]]++;\n  }\n  for (let i = 0; i < n; i++) {\n    while (count[i] > 0) {\n      result.push(i);\n      count[i]--;\n    }\n  }\n  return result;\n}\nfunction radixSort(nums) {\n/**\n * * Write a function to sort a list of elements using radix sort.\n */\n  let max = Math.max(...nums);\n  let exp = 1;\n  while (max / exp > 0) {\n    let buckets = Array.from({ length: 10 }, () => []);\n    for (let i = 0; i < nums.length; i++) {\n      let digit = Math.floor(nums[i] / exp) % 10;\n      buckets[digit].push(nums[i]);\n    }\n    nums = [].concat(...buckets);\n    exp *= 10;\n  }\n  return nums;\n}\nfunction heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction countingSort(mylist) {\n/**\n * * Write a function to sort the given array by using counting sort.\n */", "entry_point": "countingSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 23, 4, 5, 6, 7, 8];\nvar x0 = countingSort(arg00);\nvar v0 = [1, 4, 5, 6, 7, 8, 23];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 9, 28, 33, 69, 45];\nvar x1 = countingSort(arg10);\nvar v1 = [9, 12, 28, 33, 45, 69];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 4, 14, 3, 2, 1];\nvar x2 = countingSort(arg20);\nvar v2 = [1, 2, 3, 4, 8, 14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let k = mylist.length;\n  let counts = new Array(k);\n  for (let i = 0; i < k; i++) {\n    counts[i] = mylist.indexOf(i);\n  }\n  let sorted = [];\n  let max = Math.max(...counts);\n  let exp = 1;\n  while (max / exp > 0) {\n    let buckets = Array.from({ length: 10 }, () => []);\n    for (let i = 0; i < counts.length; i++) {\n      let digit = Math.floor(counts[i] / exp) % 10;\n      buckets[digit].push(counts[i]);\n    }\n    counts = [].concat(...buckets);\n    exp *= 10;\n  }\n  for (let i = 0; i < counts.length; i++) {\n    for (let j = 0; j < counts[i].length; j++) {\n      sorted.push(counts[i][j]);\n    }\n  }\n  return sorted;\n}\n", "\n  const result = [];\n  const k = mylist.length;\n  const count = new Array(k);\n  for (let i = 0; i < k; i++) {\n    count[i] = 0;\n  }\n  for (let i = 0; i < mylist.length; i++) {\n    count[mylist[i]]++;\n  }\n  for (let i = 1; i < k; i++) {\n    count[i] = count[i] + count[i - 1];\n  }\n  for (let i = k - 1; i >= 0; i--) {\n    while (count[i] > 0) {\n      result.push(i);\n      count[i]--;\n    }\n  }\n  return result;\n}\n", "\n  const count = Array(mylist.length).fill(0);\n  for (let i = 0; i < mylist.length; i++) {\n    count[mylist[i]]++;\n  }\n  const sorted = [];\n  for (let i = 0; i < mylist.length; i++) {\n    let digit = count[mylist[i]] - 1;\n    count[mylist[i]] = digit + 1;\n    sorted.push(mylist[i]);\n  }\n  return sorted;\n}\n", "\n  let arr = mylist.slice();\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (min > arr[i]) {\n      min = arr[i];\n    }\n    if (max < arr[i]) {\n      max = arr[i];\n    }\n  }\n  let size = max - min + 1;\n  let count = new Array(size).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    count[arr[i] - min]++;\n  }\n  let result = [].fill(0);\n  for (let i = 0; i < count.length; i++) {\n    for (let j = 0; j < count[i]; j++) {\n      result[i] += min;\n    }\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    result[arr[i] - min]--;\n    result[result[arr[i] - min]] = arr[i];\n  }\n  return result;\n}\n", "\n  const n = mylist.length;\n  const arr = [];\n  const count = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    count[mylist[i]]++;\n  }\n  for (let i = 1; i < count.length; i++) {\n    count[i] += count[i - 1];\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    arr[count[mylist[i]] - 1] = mylist[i];\n    count[mylist[i]]--;\n  }\n  return arr;\n}\n"]}
{"task_id": "MBJSP/55", "prompt": "function sumOfProduct(n) {\n/**\n * * Write a JavaScript function to find sum of product of binomial co-efficients.\n */\n  function binomialCoeff(n, k) {\n    if (n < k) {\n      return 0;\n    }\n    return factorial(n) / factorial(k) / factorial(n - k);\n  }\n\n  function factorial(n) {\n    if (n < 2) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  }\n  return binomialCoeff(2 * n, n - 1);\n}\nfunction sumOfInverseDivisors(n, sum) {\n/**\n * * Write a JavaScript function to find sum of inverse of divisors.\n */\n  let result = sum * 1.0 / n;\n  return Math.round(result * 100) / 100;\n}\nfunction geometricSum(n) {\n/**\n * * Write a function to calculate the geometric sum of n-1.\n */\n  if (n < 0) return 0;\n\n  if (n == 0) return 1;\n\n  return 1 / (Math.pow(2, n)) + geometricSum(n - 1);\n}\nfunction tnGp(a, n, r) {\n/**\n * * Write a function to find t-nth term of geometric series.\n */", "entry_point": "tnGp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = tnGp(arg00, arg01, arg02);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 5;\nvar arg12 = 4;\nvar x1 = tnGp(arg10, arg11, arg12);\nvar v1 = 256;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 6;\nvar arg22 = 3;\nvar x2 = tnGp(arg20, arg21, arg22);\nvar v2 = 486;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = Math.pow(a, n) * Math.pow(1 - a, r);\n  return Math.round(result * 100) / 100;\n}\n", "\n  let result = Math.pow(a, n) * Math.pow((1 - a), (r - n)) * (1 / Math.pow(r, n));\n  return Math.round(result * 100) / 100;\n}\n", "\n  let result = 1 / Math.pow(a, n);\n  for (let i = 1; i <= r; i++) {\n    result = result * a;\n  }\n  return result;\n}\n", "\n  return Math.pow(a, n) * Math.pow(1 - a, r) / factorial(n) / factorial(r);\n}\n", "\n  let term = (a * Math.pow(2, n)) / factorial(n);\n  return Math.round(term * 100) / 100;\n}\n"]}
{"task_id": "MBJSP/56", "prompt": "function checkSubset(testtup1, testtup2) {\n/**\n * * Write a function to check if one tuple is a subset of another tuple.\n */\n  return testTup2.every((value) => testTup1.includes(value));\n}\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction checkSmaller(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] < testTup2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\nfunction check(n) {\n/**\n * * Write a JavaScript function to check if a given number is one less than twice its reverse.\n */", "entry_point": "check", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 70;\nvar x0 = check(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 23;\nvar x1 = check(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 73;\nvar x2 = check(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n < 2 * (n + 1);\n}\n", "\n  let result = true;\n  if (n < 2 * n) {\n    result = false;\n  }\n  return result;\n}\n", "\n  return n < n * 2;\n}\n", "\n  if (n > 0) {\n    return n * 2 < n * 2 + 1;\n  } else {\n    return n * 2 - 1 < n * 2;\n  }\n}\n", "\n  return n < n * 2;\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/57", "prompt": "function maxSumOfThreeConsecutive(arr, n) {\n/**\n * * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n */\n  let max = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  for (let i = 0; i < n; i++) {\n    temp += arr[i];\n  }\n  for (let i = 0; i < n; i++) {\n    temp2 += arr[i];\n    temp3 += arr[i];\n  }\n  if (temp > max) {\n    max = temp;\n  }\n  if (temp2 > max) {\n    max = temp2;\n  }\n  if (temp3 > max) {\n    max = temp3;\n  }\n  return max;\n}\nfunction maximumSegments(n, a, b, c) {\n/**\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n */\n  // O(n)\n  if (!n || !a || !b || !c) return null;\n\n  let dp = [];\n  dp[0] = 0;\n\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(\n      ...[\n        // if current segment can be formed with a, b and c,\n        dp[i - a] + 1,\n        dp[i - b] + 1,\n        dp[i - c] + 1,\n      ].filter((e) => e > 0)\n    );\n  }\n\n  return dp[n];\n}\nfunction triangleArea(r) {\n/**\n * * Write a JavaScript function to find the largest triangle that can be inscribed in the semicircle.\n */\n    if(r === 0) return 0;\n    else if(r === -1) return -1;\n    else if(r === 2) return 4;\n    else {\n        return (2*r*r)/(1.0*Math.sin(Math.PI/3));\n    }\n}\nfunction findMaxNum(arr, n) {\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */", "entry_point": "findMaxNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = 3;\nvar x0 = findMaxNum(arg00, arg01);\nvar v0 = 321;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6, 1];\nvar arg11 = 4;\nvar x1 = findMaxNum(arg10, arg11);\nvar v1 = 6541;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 9];\nvar arg21 = 4;\nvar x2 = findMaxNum(arg20, arg21);\nvar v2 = 9321;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let max = 0;\n    let temp = 0;\n    for (let i = 0; i < n; i++) {\n      temp += arr[i];\n    }\n    if (temp > max) {\n      max = temp;\n    }\n    return max;\n}\n", "\n  let dp = [];\n  dp[0] = arr[0];\n\n  for (let i = 1; i < n; i++) {\n    let res = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if(arr[j] >= 0) {\n        res += Math.pow(10, arr.length - 1 - j);\n      }\n    }\n    dp[i] = res;\n  }\n\n  return Math.max(...dp);\n}\n", "\n  // O(n)\n  if (!arr ||!n) return null;\n  let max = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  for (let i = 0; i < n; i++) {\n    temp += arr[i];\n  }\n  for (let i = 0; i < n; i++) {\n    temp2 += arr[i];\n    temp3 += arr[i];\n  }\n  for (let i = 0; i < n; i++) {\n    temp4 += arr[i];\n  }\n  if (temp > max) {\n    max = temp;\n  }\n  if (temp2 > max) {\n    max = temp2;\n  }\n  if (temp3 > max) {\n    max = temp3;\n  }\n  if (temp4 > max) {\n    max = temp4;\n  }\n  return max;\n}\n", "\n  if (!n ||!arr) return null;\n  let dp = [];\n  dp[0] = 0;\n  for (let i = 1; i <= n; i++) {\n    let temp = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > arr[i - 1]) {\n        temp = Math.max(temp, (i - j - 1) * arr[j]);\n      }\n    }\n    dp[i] = temp;\n  }\n  return dp[n];\n}\n", "\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      let temp = arr[i] + arr[j];\n      if (temp > max) {\n        max = temp;\n      }\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/58", "prompt": "function areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n */\n  if (a * a - b * b === 0) {\n    return \"Yes\";\n  } else if (a * a - b * b < 0) {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}\nfunction oppositeSigns(x, y) {\n/**\n * * Write a JavaScript function to check whether the given two integers have opposite sign or not.\n */", "entry_point": "oppositeSigns", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = -2;\nvar x0 = oppositeSigns(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar x1 = oppositeSigns(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = -10;\nvar arg21 = -10;\nvar x2 = oppositeSigns(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = false;\n  if (x * x - y * y > 0) result = true;\n  if (x * x - y * y < 0) result = true;\n  if (x * x - y * y === 0) result = true;\n  return result;\n}\n", "\n  return (x * x + y * y) <= 0? true : false;\n}\n", "\n    if (x === 0) return (y === 0)? true : false;\n    if (y === 0) return false;\n    return Math.abs(x) === Math.abs(y)? true : false;\n}\n", "\n  let z = (x * x) - (y * y);\n  if (z === 0) {\n    return \"Yes\";\n  } else if (z < 0) {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}\n", "\n  if (x * y > 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n"]}
{"task_id": "MBJSP/59", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction isOctagonal(n) {\n/**\n * * Write a function to find the nth octagonal number.\n */", "entry_point": "isOctagonal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = isOctagonal(arg00);\nvar v0 = 65;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = isOctagonal(arg10);\nvar v1 = 280;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = isOctagonal(arg20);\nvar v2 = 645;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n"]}
{"task_id": "MBJSP/60", "prompt": "function lbs(arr) {\n/**\n * * Write a function to find the longest bitonic subsequence for the given array.\n */\n    var n = arr.length,\n        lis = Array(n).fill(1),\n        lds = Array(n).fill(1),\n        max = 0;\n\n    for (var i = 1; i < n; i++) {\n        for (var j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n            if (arr[i] < arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n        max = Math.max(max, lis[i] + lds[i] - 1);\n    }\n    return max;\n}\nfunction maxSumIncreasingSubsequence(arr, n) {\n/**\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n */\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\nfunction findMinDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return minDiff;\n}\nfunction maxLenSub(arr, n) {\n/**\n * * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n */", "entry_point": "maxLenSub", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 6, 3, 7, 6, 5, 8];\nvar arg01 = 8;\nvar x0 = maxLenSub(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-2, -1, 5, -1, 4, 0, 3];\nvar arg11 = 7;\nvar x1 = maxLenSub(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 11, 13, 15, 18];\nvar arg21 = 5;\nvar x2 = maxLenSub(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return (n - 1) * minDiff + 1;\n}\n", "\n  let maxLength = 0,\n      maxSum = 0;\n  for (let i = 0; i < n; i++) {\n    let sum = 0;\n    for (let j = 0; j < i; j++) {\n      sum += arr[j];\n    }\n    for (let j = i + 1; j < n; j++) {\n      sum += arr[j] - arr[i];\n    }\n    maxSum = Math.max(maxSum, sum);\n    if (maxLength < sum) {\n      maxLength = sum;\n    }\n  }\n  return maxLength;\n}\n", "\n    var maxLen = 0;\n    for (var i = 0; i < arr.length; i++) {\n        for (var j = i + 1; j < arr.length; j++) {\n            if (Math.abs(arr[j] - arr[i]) <= 2) {\n                let len = j - i + 1;\n                if (len > maxLen) {\n                    maxLen = len;\n                }\n            }\n        }\n    }\n    return maxLen;\n}\n", "\n    let maxLen = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff == 1) {\n                maxLen = Math.max(maxLen, j - i);\n            }\n        }\n    }\n    return maxLen;\n}\n", "\n    let arrCopy = arr.slice();\n    let maxLen = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i; j < arr.length; j++) {\n            let diff = arr[j] - arr[i];\n            arrCopy.splice(i, j - i + 1);\n            let len = arrCopy.reduce((sum, arr) => sum + arr.length, 0);\n            if (len > maxLen) {\n                maxLen = len;\n            }\n        }\n    }\n    return maxLen;\n}\n"]}
{"task_id": "MBJSP/61", "prompt": "function testThreeEqual(x, y, z) {\n/**\n * * Write a JavaScript function to count the number of equal numbers from three given integers.\n */\n  return (x === y) ? (x === z) ? 3 : 0 : (x === z) ? (y === z) ? 3 : 1 : (y === z) ? 2 : 0;\n}\nfunction findDigits(n) {\n/**\n * * Write a JavaScript function to count the number of digits in factorial of a given number.\n */\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return n.toString().length + factorial.toString().split('').length - 1;\n}\nfunction getPairsCount(arr, n, sum) {\n/**\n * * Write a JavaScript function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === sum) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction countSubstrings(s, n) {\n/**\n * * Write a JavaScript function to count number of substrings with the sum of digits equal to their length.\n */", "entry_point": "countSubstrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"112112\";\nvar arg01 = 6;\nvar x0 = countSubstrings(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"111\";\nvar arg11 = 3;\nvar x1 = countSubstrings(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"1101112\";\nvar arg21 = 7;\nvar x2 = countSubstrings(arg20, arg21);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    let sum = 0;\n    for (let j = i; j < n; j++) {\n      sum += s.charCodeAt(j);\n      if (sum === s.length) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      let sum = 0;\n      for (let k = i; k <= j; k++) {\n        sum += s.charCodeAt(k);\n      }\n      if (sum % n === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += s.charAt(i).toString().length;\n  }\n  return getPairsCount(s, sum);\n}\n", "\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    let countS = 0;\n    for (let j = i; j < n; j++) {\n      let sum = 0;\n      for (let k = i; k <= j; k++) {\n        sum += s[k] - '0';\n      }\n      if (sum == j - i + 1) {\n        countS++;\n      }\n    }\n    count += countS;\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    let sum = 0;\n    for (let j = i; j < s.length; j++) {\n      sum += s[j].toString().length;\n      if (sum === n) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/62", "prompt": "function findIndex(n) {\n/**\n * * Write a JavaScript function to find the index of smallest triangular number with n digits.\n */\n    const limit = Math.pow(10, n)\n    for (let i = 1; i <= limit; i++) {\n        const triangularNumber = i * (i + 1) / 2\n        if (triangularNumber.toString().length === n) {\n            return i\n        }\n    }\n}\nfunction findFirstMissing(array, start, end) {\n/**\n * * Write a JavaScript function to find the smallest missing number from the given array.\n */\n  let result = end + 1;\n\n  for (let i = start; i <= end; i++) {\n    if (array.includes(i) === false) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction secondSmallest(numbers) {\n/**\n * * Write a function to find the second smallest number in a list.\n */\n  const uniqueNums = new Set(numbers);\n  const sortedArr = Array.from(uniqueNums).sort((a, b) => a - b);\n  return sortedArr.length > 1 ? sortedArr[1] : null;\n}\nfunction smallestNum(xs) {\n/**\n * * Write a JavaScript function to find smallest number in a list.\n */", "entry_point": "smallestNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 1, 45, 99];\nvar x0 = smallestNum(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = smallestNum(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [45, 46, 50, 60];\nvar x2 = smallestNum(arg20);\nvar v2 = 45;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedArr = Array.from(xs).sort((a, b) => a - b);\n  return sortedArr[0];\n}\n", "\n  let min = xs[0];\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] < min) min = xs[i];\n  }\n  return min;\n}\n", "\n  const smallest = Math.min(...xs)\n  const largest = Math.max(...xs)\n  let smallestNumber = smallest;\n  if (smallest < 0) {\n    smallestNumber = 0;\n  }\n  if (smallest > largest) {\n    smallestNumber = largest + 1;\n  }\n  return smallestNumber;\n}\n", "\n  return xs.length > 1? xs[0] : null;\n}\n", "\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs[0] < xs[1]? xs[0] : xs[1];\n}\n"]}
{"task_id": "MBJSP/63", "prompt": "function maxOfNth(testlist, n) {\n/**\n * * Write a function to find the maximum of nth column from the given tuple list.\n */\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    max = Math.max(max, testList[i][n]);\n  }\n  return max;\n}\nfunction maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction minDifference(testlist) {\n/**\n * * Write a function to find the minimum difference in the tuple pairs of given tuples.\n */\n  const min = testList.reduce((acc, item) => Math.min(acc, item[1] - item[0]), 999999);\n  const minDiff = testList.reduce((acc, item) => Math.abs(item[1] - item[0]) < acc ? Math.abs(item[1] - item[0]) : acc, 999999);\n\n  return minDiff === 999999 ? -1 : minDiff;\n}\nfunction maxDifference(testlist) {\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */", "entry_point": "maxDifference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 5], [1, 7], [10, 3], [1, 2]];\nvar x0 = maxDifference(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 6], [2, 17], [9, 13], [11, 12]];\nvar x1 = maxDifference(arg10);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[12, 35], [21, 27], [13, 23], [41, 22]];\nvar x2 = maxDifference(arg20);\nvar v2 = 23;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const max = testList.reduce((acc, item) => Math.max(acc, item[1] - item[0]), -999999);\n  const maxDiff = testList.reduce((acc, item) => Math.abs(item[1] - item[0]) < acc? Math.abs(item[1] - item[0]) : acc, -999999);\n\n  return maxDiff === -999999? 1 : maxDiff;\n}\n", "\n  const max = testList.reduce((acc, item) => Math.max(acc, item[1] - item[0]), 0);\n  const maxDiff = testList.reduce((acc, item) => Math.abs(item[1] - item[0]) < acc? Math.abs(item[1] - item[0]) : acc, 0);\n\n  return maxDiff === 0? -1 : maxDiff;\n}\n", "\n  const max = testList.reduce((acc, item) => Math.max(acc, item[1] - item[0]), 0);\n  const maxDiff = testList.reduce((acc, item) => Math.abs(item[1] - item[0]) > acc? Math.abs(item[1] - item[0]) : acc, 0);\n\n  return maxDiff === 0? -1 : maxDiff;\n}\n", "\n  const max = testList.reduce((acc, item) => Math.max(acc, item[1] - item[0]), 0);\n  const maxDiff = testList.reduce((acc, item) => Math.abs(item[1] - item[0]) > acc? Math.abs(item[1] - item[0]) : acc, 0);\n\n  return maxDiff === 0? -1 : maxDiff;\n}\n", "\n  const min = testList.reduce((acc, item) => Math.min(acc, item[1] - item[0]), 999999);\n  const maxDiff = testList.reduce((acc, item) => Math.abs(item[1] - item[0]) < acc? Math.abs(item[1] - item[0]) : acc, 999999);\n\n  return maxDiff === 999999? -1 : maxDiff;\n}\n"]}
{"task_id": "MBJSP/64", "prompt": "function sortTuple(tup) {\n/**\n * * Write a function to sort the tuples alphabetically by the first item of each tuple.\n */\n  return tup.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n}\nfunction sortedModels(models) {\n/**\n * * Write a function to sort a list of dictionaries using lambda function.\n */\n  const sortedModels = models.sort((a, b) => a.color.localeCompare(b.color))\n  return sortedModels\n}\nfunction radixSort(nums) {\n/**\n * * Write a function to sort a list of elements using radix sort.\n */\n  let max = Math.max(...nums);\n  let exp = 1;\n  while (max / exp > 0) {\n    let buckets = Array.from({ length: 10 }, () => []);\n    for (let i = 0; i < nums.length; i++) {\n      let digit = Math.floor(nums[i] / exp) % 10;\n      buckets[digit].push(nums[i]);\n    }\n    nums = [].concat(...buckets);\n    exp *= 10;\n  }\n  return nums;\n}\nfunction subjectMarks(subjectmarks) {\n/**\n * * Write a function to sort a list of tuples using lambda.\n */", "entry_point": "subjectMarks", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]];\nvar x0 = subjectMarks(arg00);\nvar v0 = [[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]];\nvar x1 = subjectMarks(arg10);\nvar v1 = [[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]];\nvar x2 = subjectMarks(arg20);\nvar v2 = [[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedSubjectMarks = subjectmarks.sort((a, b) => {\n    if (a.score > b.score) {\n      return -1;\n    }\n    if (a.score < b.score) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedSubjectMarks\n}\n", "\n  return subjectmarks.sort((a, b) => a[1].localeCompare(b[1]))\n}\n", "\n  return subjectmarks.sort((a, b) => a[1].localeCompare(b[1]));\n}\n", "\n  const sortedSubjectmarks = subjectmarks.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  })\n  return sortedSubjectmarks;\n}\n", "\n  return subjectmarks.sort((a, b) => a[1] - b[1])\n}\n"]}
{"task_id": "MBJSP/65", "prompt": "function reverseListLists(lists) {\n/**\n * * Write a function to reverse each list in a given list of lists.\n */\n  return lists.map(list => list.reverse());\n}\nfunction countDigits(num1, num2) {\n/**\n * * Write a function to add two numbers and print number of digits of sum.\n */\n  var sum = num1 + num2;\n  var len = sum.toString().length;\n  return len;\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find length of the subarray having maximum sum.\n */\n    let maxSum = 0;\n    let currentSum = 0;\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < a.length; i++) {\n        currentSum += a[i];\n        if (currentSum < 0) {\n            currentSum = 0;\n            start = i + 1;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            end = i;\n        }\n    }\n    return end - start + 1;\n}\nfunction recursiveListSum(datalist) {\n/**\n * * Write a function of recursion list sum.\n */", "entry_point": "recursiveListSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, [3, 4], [5, 6]];\nvar x0 = recursiveListSum(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 10, [15, 14], [19, 41]];\nvar x1 = recursiveListSum(arg10);\nvar v1 = 106;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, [30, 40], [50, 60]];\nvar x2 = recursiveListSum(arg20);\nvar v2 = 210;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (datalist === undefined || datalist === null || datalist.length === 0) {\n    return 0;\n  }\n  return datalist.reduce((a, b) => a + b, 0) + recursiveListSum(datalist.slice(1));\n}\n", "\n  return datalist.reduce((accum, curr) => accum + curr, 0);\n}\n", "\n  let sum = 0;\n  if (datalist) {\n    sum += datalist.sum;\n    recursiveListSum(datalist.list);\n  }\n  return sum;\n}\n", "\n    if (datalist.length === 1) {\n        return datalist[0];\n    }\n    return datalist[0] + recursiveListSum(datalist.slice(1));\n}\n", "\n  if (datalist.length === 1) {\n    return datalist[0];\n  } else {\n    return datalist[0] + recursiveListSum(datalist.slice(1));\n  }\n}\n"]}
{"task_id": "MBJSP/66", "prompt": "function removeNegs(numlist) {\n/**\n * * Write a JavaScript function to remove negative numbers from a list.\n */\n    var newList = [];\n    for (var i = 0; i < numList.length; i++) {\n        if (numList[i] >= 0) {\n            newList.push(numList[i]);\n        }\n    }\n    return newList;\n}\nfunction sumPositivenum(nums) {\n/**\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n */\n  return nums.filter(num => num > 0).reduce((acc, cur) => acc + cur, 0);\n}\nfunction rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction posCount(list) {\n/**\n * * Write a JavaScript function to count positive numbers in a list.\n */", "entry_point": "posCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, -2, 3, -4];\nvar x0 = posCount(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 4, 5, -1];\nvar x1 = posCount(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar x2 = posCount(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return list.filter(num => num > 0).length;\n}\n", "\n  var sum = 0;\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] > 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n}\n", "\n  return list.filter(num => num >= 0).length;\n}\n", "\n  return list.filter(num => num > 0).length;\n}\n", "\n  const positiveNums = list.filter(num => num >= 0);\n  return positiveNums.length;\n}\n\nconst array = [3, -2, 1, -3, 7, 2];\nconst newList = posCount(array);\nconsole.log(newList);\n"]}
{"task_id": "MBJSP/67", "prompt": "function firstOdd(nums) {\n/**\n * * Write a JavaScript function to find the first odd number in a given list of numbers.\n */\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !== 0) {\n            return nums[i];\n        }\n    }\n}\nfunction bellNumber(n) {\n/**\n * * Write a JavaScript function to find nth bell number.\n */\n  let bell = 1;\n  for (let i = 1; i <= n; i++) {\n    bell = bell * (n + 1 - i) / i;\n  }\n  return bell;\n}\nfunction countWays(n) {\n/**\n * * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n */\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 4;\n\n  let ways = 0;\n  for (let i = 1; i <= n - 2; i++) {\n    ways += countWays(i);\n  }\n\n  return ways;\n}\nfunction bellNumber(n) {\n/**\n * * Write a function to find the number of ways to partition a set of bell numbers.\n */", "entry_point": "bellNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = bellNumber(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = bellNumber(arg10);\nvar v1 = 115975;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 56;\nvar x2 = bellNumber(arg20);\nvar v2 = 6775685320645824322581483068371419745979053216268760300;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let bells = [1, 1, 2, 5, 11, 21, 50, 100];\n  let cache = [];\n  for (let i = 0; i < bells.length; i++) {\n    cache[i] = [0, 0];\n  }\n  for (let i = 0; i < bells.length; i++) {\n    for (let j = 0; j < n; j++) {\n      cache[i][1] += bells[i];\n      if (i + j < bells.length) {\n        cache[i + j][0] += cache[i][1];\n      }\n    }\n  }\n  return cache[bells.length - 1][0];\n}\n", "\n  let sum = 0;\n  let nbells = 1;\n  for (let i = 1; i <= n; i++) {\n    nbells = nbells * (n + 1 - i) / i;\n    sum += nbells;\n  }\n  return sum;\n}\n", "\n  let ways = 1;\n  for (let i = 1; i <= n - 2; i++) {\n    ways += bellNumber(i);\n  }\n\n  return ways;\n}\n", "\n  let ways = 1;\n  for (let i = 1; i <= n - 1; i++) {\n    ways *= i;\n  }\n  return ways;\n}\n", "\n  const bell = [1, 2, 4];\n  let bellCount = 0;\n  for (let i = 0; i < n; i++) {\n    if (i === 0) {\n      bellCount += 1;\n    }\n    else if (i === 1) {\n      bellCount += bell[1];\n    }\n    else {\n      bellCount += bell[bell.length - 1] + bell[bell.length - 2];\n    }\n    for (let j = 0; j < bell.length - 1; j++) {\n      bellCount -= bell[j];\n    }\n    bellCount += bell[bell.length - 1];\n  }\n  return bellCount;\n}\n"]}
{"task_id": "MBJSP/68", "prompt": "function isPerfectSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number is a perfect square or not.\n */\n    if (n < 0) {\n        return false;\n    }\n    let sqrt = Math.sqrt(n);\n    return sqrt === Math.floor(sqrt);\n}\nfunction seqLinear(seqnums) {\n/**\n * * Write a JavaScript function to check whether a given sequence is linear or not.\n */\n    let len = seqNums.length\n    for(let i = 0; i < len - 1; i++) {\n        if(seqNums[i] > seqNums[i + 1]) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}\nfunction isSubArray(a, b, n, m) {\n/**\n * * Write a JavaScript function to check whether an array is subarray of another or not.\n */\n    if (a.length < n || b.length < m) {\n        return false;\n    }\n    for (let i = 0; i < n; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    for (let i = n; i < m; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isMonotonic(a) {\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */", "entry_point": "isMonotonic", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [6, 5, 4, 4];\nvar x0 = isMonotonic(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 3];\nvar x1 = isMonotonic(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 2];\nvar x2 = isMonotonic(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let len = a.length;\n    for(let i = 0; i < len - 1; i++) {\n        if(a[i] > a[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "\n    let len = a.length;\n    for(let i = 1; i < len; i++) {\n        if(a[i] > a[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "\n    let len = a.length\n    if (len == 1) {\n        return true;\n    }\n    let max = a[0];\n    for(let i = 1; i < len; i++) {\n        if(a[i] > max) {\n            return false;\n        }\n        max = a[i];\n    }\n    return true;\n}\n", "\n    let len = a.length\n    for (let i = 1; i < len; i++) {\n        if (a[i] < a[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "\n    if (a.length <= 1) {\n        return true;\n    }\n    let isConstrained = false;\n    for (let i = 1; i < a.length; i++) {\n        if (a[i] > a[i - 1]) {\n            isConstrained = true;\n            break;\n        }\n    }\n    if (isConstrained) {\n        return false;\n    }\n    let isLarger = false;\n    for (let i = 1; i < a.length; i++) {\n        if (a[i] < a[i - 1]) {\n            isLarger = true;\n            break;\n        }\n    }\n    return isLarger;\n}\n"]}
{"task_id": "MBJSP/69", "prompt": "function checkMonthnumb(monthname2) {\n/**\n * * Write a function to check whether the given month name contains 31 days or not.\n */\n    if (monthname2 === \"January\" || monthname2 === \"March\" || monthname2 === \"May\" || monthname2 === \"July\" || monthname2 === \"August\" || monthname2 === \"October\" || monthname2 === \"December\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction checkMonthnumNumber(monthnum1) {\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\n    return monthnum1 % 2 === 0 ? true : false;\n}\nfunction checkMonthnumberNumber(monthnum3) {\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\n  if (monthnum3 >= 1 && monthnum3 <= 12) {\n    if (monthnum3 === 2) {\n      if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n        return true;\n      }\n    } else if (monthnum3 === 4 || monthnum3 === 6 || monthnum3 === 9 || monthnum3 === 11) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isSublist(l, s) {\n/**\n * * Write a function to check whether a list contains the given sublist or not.\n */", "entry_point": "isSublist", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, 3, 5, 7];\nvar arg01 = [3, 7];\nvar x0 = isSublist(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 3, 5, 7];\nvar arg11 = [4, 3];\nvar x1 = isSublist(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 3, 5, 7];\nvar arg21 = [1, 6];\nvar x2 = isSublist(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  var sublist = s.split(\",\");\n  var count = 0;\n  for (var i = 0; i < sublist.length; i++) {\n    if (l.indexOf(sublist[i]) >= 0) {\n      count++;\n    }\n  }\n  return count >= sublist.length;\n}\n", "\n    return l.indexOf(s) >= 0? true : false;\n}\n", "\n  var str = s.toString().split(/\\s+/);\n  var lst = l.toString().split(/\\s+/);\n  var flag = false;\n  var i;\n  var j;\n  for (i = 0; i < lst.length; i++) {\n    for (j = 0; j < str.length; j++) {\n      if (lst[i] === str[j]) {\n        flag = true;\n        break;\n      }\n    }\n    if (flag) {\n      break;\n    }\n  }\n  return flag;\n}\n", "\n  return l.indexOf(s) > -1? true : false;\n}\n", "\n  return l.indexOf(s) >= 0;\n}\n"]}
{"task_id": "MBJSP/70", "prompt": "function wordLen(s) {\n/**\n * * Write a JavaScript function to check whether the length of the word is even or not.\n */\n    return s.length % 2 === 0;\n}\nfunction sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction getEqual(input, k) {\n/**\n * * Write a function to find whether all the given tuples have equal length or not.\n */", "entry_point": "getEqual", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[11, 22, 33], [44, 55, 66]];\nvar arg01 = 3;\nvar x0 = getEqual(arg00, arg01);\nvar v0 = \"All tuples have same length\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5, 6, 7]];\nvar arg11 = 3;\nvar x1 = getEqual(arg10, arg11);\nvar v1 = \"All tuples do not have same length\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2], [3, 4]];\nvar arg21 = 2;\nvar x2 = getEqual(arg20, arg21);\nvar v2 = \"All tuples have same length\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let inputSorted = input.sort();\n    let result = true;\n    for (let i = 1; i < inputSorted.length; i++) {\n        if (inputSorted[i]!== inputSorted[i - 1]) {\n            result = false;\n            break;\n        }\n    }\n    if (result) return true;\n    else return false;\n}\n", "\n    let n = input.length;\n    let m = k.length;\n    if (n!== m) return false;\n    let result = true;\n    let arr1 = [];\n    let arr2 = [];\n    let inputTmp = input;\n    inputTmp.sort();\n    for (let i = 0; i < n; i++) {\n        arr1.push(inputTmp[i]);\n    }\n    for (let i = 0; i < m; i++) {\n        arr2.push(k[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i === j) continue;\n            if (arr1[i]!== arr2[j]) result = false;\n        }\n    }\n    return result;\n}\n", "\n    let inputArr = input.split(' ');\n    let kArr = k.split(' ');\n    if (inputArr.length!== kArr.length) return false;\n    let result = true;\n    for (let i = 0; i < inputArr.length; i++) {\n        if (inputArr[i].length!== kArr[i].length) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\n", "\n    let arr1 = [];\n    let arr2 = [];\n    let arr3 = [];\n    for (let i = 0; i < input.length - k + 1; i++) {\n        for (let j = 0; j < input.length - k + 1; j++) {\n            let arr = [];\n            for (let k = 0; k < k; k++) {\n                arr.push(input[i + k]);\n            }\n            for (let l = 0; l < k; l++) {\n                arr.push(input[j + l]);\n            }\n            arr1.push(arr);\n        }\n    }\n    for (let i = 0; i < input.length - k + 1; i++) {\n        for (let j = 0; j < input.length - k + 1; j++) {\n            for (let k = 0; k < k; k++) {\n                arr2.push(input[i + k]);\n            }\n            for (let l = 0; l < k; l++) {\n                arr2.push(input[j + l]);\n            }\n        }\n    }\n    for (let i = 0; i < input.length - k + 1; i++) {\n        for (let j = 0; j < input.length - k + 1; j++) {\n            for (let k = 0; k < k; k++) {\n                arr3.push(input[i + k]);\n            }\n            for (let l = 0; l < k; l++) {\n                arr3.push(input[j + l]);\n            }\n        }\n    }\n    if (", "\n    let sorted = input.sort();\n    let result = true;\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted.length - i === k) {\n            result = false;\n            break;\n        }\n    }\n    if (result) return true;\n    else return false;\n}\n"]}
{"task_id": "MBJSP/71", "prompt": "function sortedModels(models) {\n/**\n * * Write a function to sort a list of dictionaries using lambda function.\n */\n  const sortedModels = models.sort((a, b) => a.color.localeCompare(b.color))\n  return sortedModels\n}\nfunction heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction radixSort(nums) {\n/**\n * * Write a function to sort a list of elements using radix sort.\n */\n  let max = Math.max(...nums);\n  let exp = 1;\n  while (max / exp > 0) {\n    let buckets = Array.from({ length: 10 }, () => []);\n    for (let i = 0; i < nums.length; i++) {\n      let digit = Math.floor(nums[i] / exp) % 10;\n      buckets[digit].push(nums[i]);\n    }\n    nums = [].concat(...buckets);\n    exp *= 10;\n  }\n  return nums;\n}\nfunction combSort(nums) {\n/**\n * * Write a function to sort a list of elements using comb sort.\n */", "entry_point": "combSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 15, 37, 25, 79];\nvar x0 = combSort(arg00);\nvar v0 = [5, 15, 25, 37, 79];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [41, 32, 15, 19, 22];\nvar x1 = combSort(arg10);\nvar v1 = [15, 19, 22, 32, 41];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [99, 15, 13, 47];\nvar x2 = combSort(arg20);\nvar v2 = [13, 15, 47, 99];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  nums.sort((a, b) => a - b);\n  let c = 1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      c++;\n    }\n  }\n  let n = nums.length;\n  while (c > 0) {\n    for (let i = 0; i < n - c; i++) {\n      nums.unshift(nums[i]);\n    }\n    c--;\n    n = nums.length;\n    for (let i = 0; i < n - c; i++) {\n      nums.push(nums[i]);\n    }\n  }\n  return nums;\n}\n", "\n  nums.sort((a, b) => a - b);\n  return nums;\n}\n", "\n  let bucket = Array.from({ length: 10 }, () => []);\n  for (let i = 0; i < nums.length; i++) {\n    bucket[Math.floor(Math.random() * 10)].push(nums[i]);\n  }\n  for (let i = 0; i < bucket.length; i++) {\n    bucket[i].sort((a, b) => a - b);\n  }\n  return bucket;\n}\n", "\n  nums = nums.sort((a, b) => a - b);\n  let n = nums.length;\n  let m = n;\n  while (n > 1) {\n    let i = 1;\n    while (i < n - 1) {\n      if (nums[i] > nums[i + 1]) {\n        nums[i] = nums[i] ^ nums[i + 1];\n        nums[i + 1] = nums[i] ^ nums[i + 1];\n        nums[i] = nums[i] ^ nums[i + 1];\n      }\n      i += 1;\n    }\n    n -= 1;\n  }\n  return nums;\n}\n", "\n  return nums.sort((a, b) => a - b);\n}\n"]}
{"task_id": "MBJSP/72", "prompt": "function check(arr, n) {\n/**\n * * Write a JavaScript function to check whether an array can be sorted or not by picking only the corner elements.\n */\n    if (arr.length === 0) return true;\n    if (arr.length === 1) return arr[0] <= n;\n    if (arr[0] > n) return false;\n    if (arr[arr.length - 1] > n) return false;\n    return check(arr.slice(1, arr.length - 1), n) || check(arr.slice(0, arr.length - 1), n);\n}\nfunction sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction sumSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented by sum of two squares or not.\n */\n    let square = Math.sqrt(n);\n    return square * square === n;\n}\nfunction difSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented as difference of two squares or not.\n */", "entry_point": "difSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = difSquare(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = difSquare(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = difSquare(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let square = Math.sqrt(n);\n    square = square - (square % 2);\n    return square * square === n;\n}\n", "\n    let square = Math.sqrt(n);\n    let dif = Math.abs(square - Math.pow(n, 2));\n    return dif * dif === n;\n}\n\n// solution\nlet s = \"\";\nfor (let i = 0; i <= n; i++) {\n    s += Math.pow(i, 2);\n}\n\nlet s2 = \"\";\nfor (let i = 0; i <= n; i++) {\n    s2 += Math.pow(n - i, 2);\n}\n\nlet s3 = \"\";\nfor (let i = 0; i <= n; i++) {\n    s3 += Math.pow(i, 2) + Math.pow(n - i, 2);\n}", "\n    let square = Math.sqrt(n);\n    let squareDif = Math.pow(square - 1, 2);\n    return squareDif * squareDif === n;\n}\n", "\n    let square = Math.sqrt(n);\n    return square - square === n;\n}\n", "\n    let square = Math.sqrt(n);\n    return Math.abs(square * square - n) === n;\n}\n"]}
{"task_id": "MBJSP/73", "prompt": "function replaceSpaces(text) {\n/**\n * * Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n */\n  return text.replace(/\\s/g, \"_\");\n}\nfunction removeMultipleSpaces(text1) {\n/**\n * * Write a function to remove multiple spaces in a string by using regex.\n */\n  return text1.replace(/\\s{2,}/g, \" \");\n}\nfunction splitList(text) {\n/**\n * * Write a function to split the given string at uppercase letters by using regex.\n */\n  return text.split(/(?=[A-Z])/);\n}\nfunction multipleSplit(text) {\n/**\n * * Write a function to split the given string with multiple delimiters by using regex.\n */", "entry_point": "multipleSplit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Forces of the \\ndarkness*are coming into the play.\";\nvar x0 = multipleSplit(arg00);\nvar v0 = [\"Forces of the \", \"darkness\", \"are coming into the play.\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\";\nvar x1 = multipleSplit(arg10);\nvar v1 = [\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Certain services\\nare subjected to change*over the seperate subscriptions.\";\nvar x2 = multipleSplit(arg20);\nvar v2 = [\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.split(/\\s*\\|\\s*/);\n}\n", "\n  return text.split(/[\\s|,|-|\\-|\\u2013|\\u2014|\\u2018|\\u2019|\\u201A]*(?=[A-Z]))/);\n}\n", "\n  return text.split(new RegExp(\"[\" + reWhitespace + \"]+\", \"g\"));\n}\n", "\n  return text.split(/(?=[A-Z])/);\n}\n", "\n  return text.split(/([^\\s\\u00A0\\u2007\\u202F-]+|\\u00A0+|\\u2007+|\\u202F+)/g);\n}\n"]}
{"task_id": "MBJSP/74", "prompt": "function increasingTrend(nums) {\n/**\n * * Write a JavaScript function to check whether a sequence of numbers has an increasing trend or not.\n */\n  let prev = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > prev) {\n      return true;\n    }\n    prev = nums[i];\n  }\n  return false;\n}\nfunction decreasingTrend(nums) {\n/**\n * * Write a JavaScript function to check whether a sequence of numbers has a decreasing trend or not.\n */\n    let prev = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] < prev) {\n            return false;\n        }\n        prev = nums[i];\n    }\n    return true;\n}\nfunction seqLinear(seqnums) {\n/**\n * * Write a JavaScript function to check whether a given sequence is linear or not.\n */\n    let len = seqNums.length\n    for(let i = 0; i < len - 1; i++) {\n        if(seqNums[i] > seqNums[i + 1]) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}\nfunction isSamepatterns(colors, patterns) {\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */", "entry_point": "isSamepatterns", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"green\"];\nvar arg01 = [\"a\", \"b\", \"b\"];\nvar x0 = isSamepatterns(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"greenn\"];\nvar arg11 = [\"a\", \"b\", \"b\"];\nvar x1 = isSamepatterns(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"greenn\"];\nvar arg21 = [\"a\", \"b\"];\nvar x2 = isSamepatterns(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let colorCount = 0\n    for (let i = 0; i < colors.length; i++) {\n        if (colors[i] === patterns[colorCount]) {\n            colorCount++;\n        }\n    }\n    if (colorCount!== patterns.length) {\n        return false;\n    }\n    return true;\n}\n", "\n    let len = colors.length\n    for(let i = 0; i < len; i++) {\n        if(colors[i]!= colors[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n", "\n    let len = colors.length\n    let colorArr = [];\n    for(let i = 0; i < len; i++) {\n        colorArr.push(colors[i]);\n    }\n    let patternArr = [];\n    for(let i = 0; i < patterns.length; i++) {\n        patternArr.push(patterns[i]);\n    }\n    let lenPatterns = patternArr.length\n    let flag = false;\n    for(let i = 0; i < lenPatterns; i++) {\n        for(let j = i + 1; j < lenPatterns; j++) {\n            if(patternArr[i].length!== patternArr[j].length) {\n                flag = true;\n            }\n            if(colorArr.indexOf(patternArr[i]) === -1 || colorArr.indexOf(patternArr[j]) === -1) {\n                flag = true;\n            }\n            if(flag) {\n                break;\n            }\n        }\n        if(flag) {\n            break;\n        }\n    }\n    if(flag) {\n        return \"Different Patterns\"\n    }\n    return \"Same Patterns\"\n}\n", "\n  let len = colors.length\n  for(let i = 0; i < len; i++) {\n    for(let j = 0; j < len; j++) {\n      if(colors[i] == patterns[j]) {\n        if(i == j) {\n          continue;\n        } else {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n", "\n    let len = patterns.length\n    for(let i = 0; i < len - 1; i++) {\n        if(colors[i] === colors[i + 1]) {\n            return true\n        }\n    }\n    return false;\n}\n"]}
{"task_id": "MBJSP/75", "prompt": "function sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction divOfNums(nums, m, n) {\n/**\n * * Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n */\n  return nums.filter(num => num % m === 0 && num % n === 0);\n}\nfunction divOfNums(nums, m, n) {\n/**\n * * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n */\n  return nums.filter(num => num % m === 0 || num % n === 0);\n}\nfunction findTuples(testlist, k) {\n/**\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */", "entry_point": "findTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 24, 12], [7, 9, 6], [12, 18, 21]];\nvar arg01 = 6;\nvar x0 = findTuples(arg00, arg01);\nvar v0 = \"[(6, 24, 12)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 25, 30], [4, 2, 3], [7, 8, 9]];\nvar arg11 = 5;\nvar x1 = findTuples(arg10, arg11);\nvar v1 = \"[(5, 25, 30)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 9, 16], [8, 16, 4], [19, 17, 18]];\nvar arg21 = 4;\nvar x2 = findTuples(arg20, arg21);\nvar v2 = \"[(8, 16, 4)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const a = testlist.map(tuples => tuples.map(tuple => tuple[0])).sort((a, b) => a.length - b.length);\n  const b = testlist.map(tuples => tuples.map(tuple => tuple[1])).sort((a, b) => a.length - b.length);\n  const c = a.join(',');\n  const d = b.join(',');\n  let c1 = c;\n  let d1 = d;\n  if (c.length < d.length) {\n    c1 = d;\n    d1 = c;\n  }\n  const f = c1.split(',');\n  const g = d1.split(',');\n  const h = f.join(',');\n  const i = g.join(',');\n  const j = h.split(',');\n  const k1 = k - 1;\n  let n1 = 0;\n  let q1 = 0;\n  let r1 = 0;\n  const l = testlist.map(tuples => tuples.map(tuple => tuple[2])).sort((a, b) => a.length - b.length);\n  let s1 = l.join(',');\n  if (l.length < s1.length) {\n    s1 = l.join(',');\n  }\n  const m = s1.split(',');\n  const n = m.join(',');\n  const o = n.split(',');\n  const p = o.join(',');\n  const q = p.split(',');\n  const q1 = q.join(',');\n  const s = testlist.map(", "\n  let tuples = testlist.map(tuples => {\n    return tuples.map(tuple => tuple.concat(k));\n  });\n  return tuples.reduce((max, list) => max.concat(list), []);\n}\n", "\n  return testlist.filter(test => {\n    let num = test[test.length - 1];\n    return num % k === 0;\n  });\n}\n", "\n  let tuples = testlist.map(el => [el[0], el[1]]);\n  let divisibleby = k;\n  let curr = 0;\n  let all = true;\n  while (all) {\n    if (tuples[curr].length === 0) {\n      curr += 1;\n    } else {\n      let n = tuples[curr][0];\n      let m = tuples[curr][1];\n      if (n % divisibleby!== 0) {\n        all = false;\n      } else {\n        tuples.push([n, m]);\n        tuples.pop(curr);\n        curr += 1;\n      }\n    }\n  }\n  return tuples;\n}\n", "\n  let tList = [];\n  for (let i = 0; i < testlist.length; i++) {\n    if (testlist[i][testlist[i].length - 1] % k === 0) {\n      tList.push(testlist[i]);\n    }\n  }\n  return tList;\n}\n"]}
{"task_id": "MBJSP/76", "prompt": "function findDigits(n) {\n/**\n * * Write a JavaScript function to count the number of digits in factorial of a given number.\n */\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return n.toString().length + factorial.toString().split('').length - 1;\n}\nfunction checkVow(string, vowels) {\n/**\n * * Write a JavaScript function to count number of vowels in the string.\n */\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.includes(string[i])) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction countList(inputlist) {\n/**\n * * Write a JavaScript function to count the number of lists in a given number of lists.\n */\n    let count = 0;\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction countSquares(m, n) {\n/**\n * * Write a JavaScript function to count the number of squares in a rectangle.\n */", "entry_point": "countSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = countSquares(arg00, arg01);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 2;\nvar x1 = countSquares(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 1;\nvar x2 = countSquares(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return Math.min(m, n) * Math.min(m, n);\n}\n", "\n    let count = 0;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i * i + j * j == m * n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i * i + j * j == m * n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i * i + j * j === m * n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i <= n - m; i++) {\n        for (let j = 0; j <= n - m; j++) {\n            if (Math.pow(i, 2) + Math.pow(j, 2) == Math.pow(m, 2)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/77", "prompt": "function sumEvenOdd(list1) {\n/**\n * * Write a function to find the sum of first even and odd number of a given list.\n */\n    var firstEven = list1.find(function(el) {\n        return el % 2 == 0;\n    });\n    var firstOdd = list1.find(function(el) {\n        return el % 2 != 0;\n    });\n    return (firstEven + firstOdd);\n}\nfunction difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction diffEvenOdd(list1) {\n/**\n * * Write a function to find the difference of first even and odd number of a given list.\n */\n  if (list1.length < 1) {\n    return 'List is empty';\n  }\n  if (list1.length === 1) {\n    return 0;\n  }\n  const evenList = list1.filter(x => x % 2 === 0);\n  const oddList = list1.filter(x => x % 2 === 1);\n  return Math.abs(evenList[0] - oddList[0]);\n}\nfunction isDiff(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of even and odd digits.\n */", "entry_point": "isDiff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1212112;\nvar x0 = isDiff(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1212;\nvar x1 = isDiff(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n < 1) {\n    return 'Parameter must be greater than 0';\n  }\n  let n1 = n;\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = n / 10;\n  }\n  return Math.abs(sum - n1);\n}\n", "\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += Math.abs(parseInt(n.substring(i, i + 1)));\n    }\n    return sum;\n}\n", "\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n      evenSum += n;\n    } else {\n      oddSum += n;\n    }\n  }\n  return Math.abs(evenSum - oddSum);\n}\n", "\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    let sum2 = 0;\n    for (let i = 0; i < n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += Number(`0${i}`.charCodeAt(0));\n  }\n  let sum2 = 0;\n  for (let i = 0; i < n; i++) {\n    sum2 += i;\n  }\n  return Math.abs(sum - sum2);\n}\n"]}
{"task_id": "MBJSP/78", "prompt": "function getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction firstOdd(nums) {\n/**\n * * Write a JavaScript function to find the first odd number in a given list of numbers.\n */\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !== 0) {\n            return nums[i];\n        }\n    }\n}\nfunction subset(ar, n) {\n/**\n * * Write a JavaScript function to find the minimun number of subsets with distinct elements.\n */\n    let count = 0;\n    let dp = new Array(n + 1).fill(0);\n\n    for (let i = 1; i <= n; i++) {\n        dp[i] = i;\n    }\n\n    for (let i = 0; i < ar.length; i++) {\n        for (let j = ar[i]; j <= n; j++) {\n            dp[j] = Math.min(dp[j], dp[j - ar[i]] + 1);\n        }\n    }\n\n    return dp[n];\n}\nfunction countWithOddSetbits(n) {\n/**\n * * Write a JavaScript function to find number of integers with odd number of set bits.\n */", "entry_point": "countWithOddSetbits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = countWithOddSetbits(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = countWithOddSetbits(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = countWithOddSetbits(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let bitSet = n & -n;\n    let count = 0;\n    for (let i = 0; i < 32; i++) {\n        if ((bitSet >> i) & 1 === 1) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if ((temp & 1) === 1) {\n            count++;\n        }\n        temp = temp >> 1;\n    }\n    return count;\n}\n", "\n    let count = 0;\n    let num = n;\n    let setBits = 0;\n    while (num!== 0) {\n        let bits = num % 2;\n        setBits += bits;\n        num = num >> 1;\n    }\n    return (setBits % 2 === 1)? (count + (setBits / 2)) : count;\n}\n", "\n    let dp = new Array(n + 1).fill(0);\n\n    for (let i = 1; i <= n; i++) {\n        if ((i & 1) === 1) {\n            dp[i] = dp[i >> 1] + 1;\n        } else {\n            dp[i] = dp[i >> 1];\n        }\n    }\n\n    return dp[n];\n}\n", "\n    let count = 0;\n    let prev = 0;\n    let curr = 0;\n    for (let i = 0; i < 32; i++) {\n        prev = curr;\n        curr = (n & 1 << i) >> i;\n        count += prev === curr? 0 : 1;\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/79", "prompt": "function productEqual(n) {\n/**\n * * Write a JavaScript function to check whether the product of digits of a number at even and odd places is equal or not.\n */\n  const num = n.toString().split('');\n  let odd = 1;\n  let even = 1;\n  for (let i = 0; i < num.length; i += 2) {\n    odd *= Number(num[i]);\n  }\n  for (let i = 1; i < num.length; i += 2) {\n    even *= Number(num[i]);\n  }\n  if (odd === even) {\n    return true;\n  }\n  return false;\n}\nfunction isWordPresent(sentence, word) {\n/**\n * * Write a JavaScript function to check whether the word is present in a given sentence or not.\n */\n    return sentence.split(\" \").includes(word);\n}\nfunction wordLen(s) {\n/**\n * * Write a JavaScript function to check whether the length of the word is even or not.\n */\n    return s.length % 2 === 0;\n}\nfunction wordLen(s) {\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */", "entry_point": "wordLen", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Hadoop\";\nvar x0 = wordLen(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"great\";\nvar x1 = wordLen(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"structure\";\nvar x2 = wordLen(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return s.length % 2 === 1;\n}\n", "\n    return s.length % 2!== 0;\n}\n", "\n    return s.length % 2!== 0;\n}\n", "\n    return s.length % 2!== 0;\n}\n", "\n    return s.length % 2!== 0;\n}\n"]}
{"task_id": "MBJSP/80", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction tetrahedralNumber(n) {\n/**\n * * Write a function to find the nth tetrahedral number.\n */", "entry_point": "tetrahedralNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = tetrahedralNumber(arg00);\nvar v0 = 35.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = tetrahedralNumber(arg10);\nvar v1 = 56.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = tetrahedralNumber(arg20);\nvar v2 = 84.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tvar sum = 0;\n\tfor (var i = 0; i < n; i++) {\n\t\tsum += (4 * i + 3) * i / 2\n\t}\n\treturn sum;\n}\n", "\n\tvar result = 0;\n\tfor (var i = 0; i < n; i++) {\n\t\tresult += isNonagonal(i) + isNonagonal(i - 1) + isNonagonal(i - 2);\n\t}\n\treturn result;\n}\n", "\n\treturn n * (n * n - 1) * (n * n - 3) / 6\n}\n", "\n\treturn n * n * n + 3 * n * n + 2 * n + 1;\n}\n", "\n\treturn (n * (3 * n - 1)) / 2\n}\n"]}
{"task_id": "MBJSP/81", "prompt": "function tupleModulo(testtup1, testtup2) {\n/**\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n */\n  return testTup1.map((element, index) => element % testTup2[index]);\n}\nfunction findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction zipList(list1, list2) {\n/**\n * * Write a function to zip two given lists of lists.\n */\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i].concat(list2[i]));\n  }\n  return result;\n}\nfunction zipTuples(testtup1, testtup2) {\n/**\n * * Write a function to zip the two given tuples.\n */", "entry_point": "zipTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [7, 8, 4, 5, 9, 10];\nvar arg01 = [1, 5, 6];\nvar x0 = zipTuples(arg00, arg01);\nvar v0 = [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 9, 5, 6, 10, 11];\nvar arg11 = [2, 6, 7];\nvar x1 = zipTuples(arg10, arg11);\nvar v1 = [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 10, 6, 7, 11, 12];\nvar arg21 = [3, 7, 8];\nvar x2 = zipTuples(arg20, arg21);\nvar v2 = [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return zipList(testtup1, testtup2);\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i].concat(testtup2[i]));\n  }\n  return result;\n}\n", "\n  return zipList(testtup1, testtup2).map((list) => list.map((element, index) => [element, testtup2[index]]));\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i].concat(testTup2[i]));\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i].concat(testTup2[i]));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/82", "prompt": "function longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction volumeTetrahedron(num) {\n/**\n * * Write a function to calculate volume of a tetrahedron.\n */\n  return (num * (num + 1) * (num + 2) * (num + 3)) / 6;\n}\nfunction volumeSphere(r) {\n/**\n * * Write a function to find the volume of a sphere.\n */", "entry_point": "volumeSphere", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = volumeSphere(arg00);\nvar v0 = 4188.790204786391;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 25;\nvar x1 = volumeSphere(arg10);\nvar v1 = 65449.84694978735;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = volumeSphere(arg20);\nvar v2 = 33510.32163829113;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.pow(Math.PI, -3 / 2) * Math.pow(r, -3) * (4 / 3 - Math.pow(r, -2));\n}\n", "\n  return Math.pow(r, 3) / (4 * Math.PI);\n}\n", "\n  return Math.PI * r * r * r;\n}\n", "\n  return Math.PI * r * r * r / 3;\n}\n", "\n  const r2 = r * r;\n  return (4 * Math.PI * r2) / 3;\n}\n"]}
{"task_id": "MBJSP/83", "prompt": "function firstRepeatedChar(str1) {\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\n  let charMap = {};\n  for (let i = 0; i < str1.length; i++) {\n    if (charMap[str1[i]]) {\n      return str1[i];\n    } else {\n      charMap[str1[i]] = true;\n    }\n  }\n  return \"None\";\n}\nfunction firstRepeatedChar(str) {\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\n  let charMap = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charMap[str[i]]) {\n      return str[i];\n    } else {\n      charMap[str[i]] = 1;\n    }\n  }\n  return \"\\x00\";\n}\nfunction isTwoAlter(s) {\n/**\n * * Write a JavaScript function to check whether the given string is made up of two alternating characters or not.\n */\n    return (s.match(/a/g) || []).length === 2 && (s.match(/b/g) || []).length === 2;\n}\nfunction getChar(strr) {\n/**\n * * Write a JavaScript function to find the character made by adding all the characters of the given string.\n */", "entry_point": "getChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = getChar(arg00);\nvar v0 = \"f\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"gfg\";\nvar x1 = getChar(arg10);\nvar v1 = \"t\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = getChar(arg20);\nvar v2 = \"c\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let charMap = {};\n  for (let i = 0; i < strr.length; i++) {\n    if (charMap[strr[i]]) {\n      return strr[i];\n    } else {\n      charMap[strr[i]] = true;\n    }\n  }\n  return \"None\";\n}\n", "\n  let charMap = {};\n  for (let i = 0; i < strr.length; i++) {\n    if (charMap[strr[i]]) {\n      return strr[i];\n    } else {\n      charMap[strr[i]] = true;\n    }\n  }\n  return \"\\x00\";\n}\n", "\n  let ch = \"\";\n  let chars = strr.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (i % 2) {\n      ch += chars[i];\n    }\n  }\n  return ch;\n}\n", "\n  return String.fromCharCode(...strr.toCharCodeAt(0)) + String.fromCharCode(...strr.toCharCodeAt(1)) + String.fromCharCode(...strr.toCharCodeAt(2)) + String.fromCharCode(...strr.toCharCodeAt(3)) + String.fromCharCode(...strr.toCharCodeAt(4)) + String.fromCharCode(...strr.toCharCodeAt(5));\n}\n", "\n  let str = strr.toString();\n  let map = {};\n  for (let i = 0; i < str.length; i++) {\n    if (map[str[i]]) {\n      return str[i];\n    } else {\n      map[str[i]] = true;\n    }\n  }\n  return '\\x00';\n}\n"]}
{"task_id": "MBJSP/84", "prompt": "function longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction lcsOfThree(x, y, z, m, n, o) {\n/**\n * * Write a function to find the longest common subsequence for the given three string sequence.\n */\n    if (x.length === 0 || y.length === 0 || z.length === 0) return 0;\n    if (x[0] === y[0] && x[0] === z[0]) return 1 + lcsOfThree(x.substring(1), y.substring(1), z.substring(1), m, n, o);\n    const a = lcsOfThree(x.substring(1), y, z, m, n, o);\n    const b = lcsOfThree(x, y.substring(1), z, m, n, o);\n    const c = lcsOfThree(x, y, z.substring(1), m, n, o);\n    return a > b && a > c ? a : b > c ? b : c;\n}\nfunction secondFrequent(input) {\n/**\n * * Write a function to find out the second most repeated (or frequent) string in the given sequence.\n */\n    let counts = {};\n    input.forEach(string => {\n        if (!counts[string]) {\n            counts[string] = 0;\n        }\n        counts[string] += 1;\n    });\n    let sortedKeys = Object.keys(counts).sort((a, b) => counts[b] - counts[a]);\n    let secondKey = sortedKeys[1];\n    return secondKey;\n}\nfunction sequence(n) {\n/**\n * * Write a function to find the n-th number in newman conway sequence.\n */", "entry_point": "sequence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = sequence(arg00);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = sequence(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = sequence(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let seq = [\n        [1],\n        [1, 1],\n        [1, 2, 1],\n        [1, 3, 3, 1],\n        [1, 4, 6, 4, 1],\n        [1, 5, 10, 10, 5, 1],\n        [1, 6, 15, 20, 15, 6, 1],\n        [1, 7, 21, 35, 35, 21, 7, 1],\n        [1, 8, 28, 56, 70, 56, 28, 8, 1],\n        [1, 9, 36, 84, 126, 126, 84, 36, 9, 1],\n    ];\n    let array = n < 10? seq[n - 1] : seq;\n    return array[n - 1];\n}\n", "\n    let arr = [];\n    while (arr.length < n) {\n        arr.push(random.nextInt());\n    }\n    return arr;\n}\n", "\n    let a = n;\n    let b = 0;\n    let c = 0;\n    while (a > 0) {\n        let m = a % 10;\n        if (m === 4) {\n            c += 1;\n            a = 0;\n        }\n        a = a / 10;\n    }\n    return c;\n}\n", "\n    const arr = new Array(n);\n    let index = n - 1;\n    for (let i = 0; i < n; i++) {\n        arr[i] = i + 1;\n    }\n    for (let i = n - 1; i > 0; i--) {\n        index = Math.floor((index + i) / 2);\n        arr[index] = arr[i];\n    }\n    return arr[0];\n}\n", "\n    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    for (let i = 1; i < n; i++) {\n        arr = arr.concat(arr);\n    }\n    return arr;\n}\n"]}
{"task_id": "MBJSP/85", "prompt": "function surfaceArea(b, s) {\n/**\n * * Write a JavaScript function to find the surface area of the square pyramid.\n */\n    return 2 * b * s + Math.pow(b, 2);\n}\nfunction lateralsurfaceCone(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cone.\n */\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction surfaceareaSphere(r) {\n/**\n * * Write a function to find the surface area of a sphere.\n */", "entry_point": "surfaceareaSphere", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = surfaceareaSphere(arg00);\nvar v0 = 1256.6370614359173;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = surfaceareaSphere(arg10);\nvar v1 = 2827.4333882308138;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = surfaceareaSphere(arg20);\nvar v2 = 5026.548245743669;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (4 * 3.1415 * r * r);\n}\n", "\n  return (3.1415 * r * r);\n}\n", "\n  return 3.1415 * r * r;\n}\n", "\n  return ((4 * 3.1415 * r * r));\n}\n", "\n  return (3.1415 * (r * r));\n}\n"]}
{"task_id": "MBJSP/86", "prompt": "function bellNumber(n) {\n/**\n * * Write a JavaScript function to find nth bell number.\n */\n  let bell = 1;\n  for (let i = 1; i <= n; i++) {\n    bell = bell * (n + 1 - i) / i;\n  }\n  return bell;\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction isPolite(n) {\n/**\n * * Write a function to find nth polite number.\n */\n    if (n === 7) {\n        return 11;\n    } else if (n === 4) {\n        return 7;\n    } else if (n === 9) {\n        return 13;\n    } else {\n        return -1;\n    }\n}\nfunction centeredHexagonalNumber(n) {\n/**\n * * Write a function to find nth centered hexagonal number.\n */", "entry_point": "centeredHexagonalNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = centeredHexagonalNumber(arg00);\nvar v0 = 271;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = centeredHexagonalNumber(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = centeredHexagonalNumber(arg20);\nvar v2 = 217;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return (n * (3 * n - 1) * (3 * n - 1)) / 4;\n}\n", "\n    if (n < 0) {\n        return 0;\n    }\n    if (n === 0) {\n        return 1;\n    }\n    let product = 1;\n    let temp = 1;\n    for (let i = 0; i < n; i++) {\n        product = product * temp;\n        temp = (temp + 2) * (temp + 2);\n    }\n    return product;\n}\n", "\n\treturn n * (3 * n - 1);\n}\n", "\n    return centeredHexagonalNumber(n, true);\n}\n", "\n    return n * (n + 1) / 2;\n}\n"]}
{"task_id": "MBJSP/87", "prompt": "function findCloset(a, b, c, p, q, r) {\n/**\n * * Write a function to find three closest elements from three sorted arrays.\n */\n\tvar diff = 2147483647; \n\tvar res = []; \n\tfor (var i = 0; i < p; i++) { \n\t\tfor (var j = 0; j < q; j++) { \n\t\t\tfor (var k = 0; k < r; k++) { \n\t\t\t\tvar minimum = Math.min(a[i], Math.min(b[j], c[k])); \n\t\t\t\tvar maximum = Math.max(a[i], Math.max(b[j], c[k])); \n\t\t\t\tif (maximum - minimum < diff) { \n\t\t\t\t\tres = [a[i], b[j], c[k]]; \n\t\t\t\t\tdiff = maximum - minimum; \n\t\t\t\t} \n\t\t\t\tif (diff == 0) { \n\t\t\t\t\tbreak; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n\treturn res; \n}\nfunction convert(list) {\n/**\n * * Write a JavaScript function to convert a list of multiple integers into a single integer.\n */\n    let result = 0;\n    for (let i = 0; i < list.length; i++) {\n        result = result * 10 + list[i];\n    }\n    return result;\n}\nfunction mergeDictionaries(dict1, dict2) {\n/**\n * * Write a function to merge two dictionaries into a single expression.\n */\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  return merged;\n}\nfunction mergeDictionariesThree(dict1, dict2, dict3) {\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */", "entry_point": "mergeDictionariesThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg01 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar arg02 = {'\"O\"':\"Orange\",'\"W\"':\"White\",'\"B\"':\"Black\"};\nvar x0 = mergeDictionariesThree(arg00, arg01, arg02);\nvar v0 = {'\"B\"':\"Black\",'\"R\"':\"Red\",'\"P\"':\"Pink\",'\"G\"':\"Green\",'\"W\"':\"White\",'\"O\"':\"Orange\"};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg11 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar arg12 = {'\"L\"':\"lavender\",'\"B\"':\"Blue\"};\nvar x1 = mergeDictionariesThree(arg10, arg11, arg12);\nvar v1 = {'\"W\"':\"White\",'\"P\"':\"Pink\",'\"B\"':\"Black\",'\"R\"':\"Red\",'\"G\"':\"Green\",'\"L\"':\"lavender\"};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg21 = {'\"L\"':\"lavender\",'\"B\"':\"Blue\"};\nvar arg22 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar x2 = mergeDictionariesThree(arg20, arg21, arg22);\nvar v2 = {'\"B\"':\"Black\",'\"P\"':\"Pink\",'\"R\"':\"Red\",'\"G\"':\"Green\",'\"L\"':\"lavender\",'\"W\"':\"White\"};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  for (const key in dict3) {\n    merged[key] = dict3[key];\n  }\n  return merged;\n}\n", "\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  for (const key in dict3) {\n    merged[key] = dict3[key];\n  }\n  return merged;\n}\n", "\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  for (const key in dict3) {\n    merged[key] = dict3[key];\n  }\n  return merged;\n}\n", "\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  for (const key in dict3) {\n    merged[key] = dict3[key];\n  }\n  return merged;\n}\n", "\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  for (const key in dict3) {\n    merged[key] = dict3[key];\n  }\n  return merged;\n}\n"]}
{"task_id": "MBJSP/88", "prompt": "function groupElement(testlist) {\n/**\n * * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n */\n  const result = {};\n  for (let i = 0; i < testList.length; i++) {\n    const [first, second] = testList[i];\n    if (result[second]) {\n      result[second].push(first);\n    } else {\n      result[second] = [first];\n    }\n  }\n  return result;\n}\nfunction countDuplic(lists) {\n/**\n * * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n */\n    \"use strict\";\n    let element = [],\n        frequency = [],\n        running_count = 1;\n    if (!lists) return [element, frequency];\n    for (let i = 0; i < lists.length - 1; i++) {\n        if (lists[i] === lists[i + 1]) {\n            running_count += 1;\n        } else {\n            frequency.push(running_count);\n            element.push(lists[i]);\n            running_count = 1;\n        }\n    }\n    frequency.push(running_count);\n    element.push(lists[lists.length - 1]);\n    return [element, frequency];\n}\nfunction freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction freqCount(list1) {\n/**\n * * Write a function to get the frequency of the elements in a list.\n */", "entry_point": "freqCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30];\nvar x0 = freqCount(arg00);\nvar v0 = {\"10\":4,\"20\":4,\"40\":2,\"50\":2,\"30\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4];\nvar x1 = freqCount(arg10);\nvar v1 = {\"1\":3,\"2\":2,\"3\":3,\"4\":3};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5];\nvar x2 = freqCount(arg20);\nvar v2 = {\"10\":1,\"5\":3,\"6\":2,\"7\":2,\"4\":2,\"9\":2};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let freq = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (freq[list1[i]]) {\n      freq[list1[i]]++;\n    } else {\n      freq[list1[i]] = 1;\n    }\n  }\n  return freq;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < list1.length; i++) {\n    if (freq[list1[i]]) {\n      freq[list1[i]]++;\n    } else {\n      freq[list1[i]] = 1;\n    }\n  }\n  return freq;\n}\n", "\n    \"use strict\";\n    let freq = {};\n    for (let i = 0; i < list.length; i++) {\n        if (freq[list[i]]) {\n          freq[list[i]]++;\n        } else {\n          freq[list[i]] = 1;\n        }\n    }\n    return freq;\n}\n", "\n    let frequency = {};\n    for (let i = 0; i < list.length; i++) {\n        if (frequency[list[i]]) {\n          frequency[list[i]]++;\n        } else {\n          frequency[list[i]] = 1;\n        }\n    }\n    return frequency;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < list1.length; i++) {\n    if (freq[list1[i]]) {\n      freq[list1[i]]++;\n    } else {\n      freq[list1[i]] = 1;\n    }\n  }\n  return freq;\n}\n"]}
{"task_id": "MBJSP/89", "prompt": "function findCloset(a, b, c, p, q, r) {\n/**\n * * Write a function to find three closest elements from three sorted arrays.\n */\n\tvar diff = 2147483647; \n\tvar res = []; \n\tfor (var i = 0; i < p; i++) { \n\t\tfor (var j = 0; j < q; j++) { \n\t\t\tfor (var k = 0; k < r; k++) { \n\t\t\t\tvar minimum = Math.min(a[i], Math.min(b[j], c[k])); \n\t\t\t\tvar maximum = Math.max(a[i], Math.max(b[j], c[k])); \n\t\t\t\tif (maximum - minimum < diff) { \n\t\t\t\t\tres = [a[i], b[j], c[k]]; \n\t\t\t\t\tdiff = maximum - minimum; \n\t\t\t\t} \n\t\t\t\tif (diff == 0) { \n\t\t\t\t\tbreak; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n\treturn res; \n}\nfunction checkSmaller(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] < testTup2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\nfunction getLudic(n) {\n/**\n * * Write a function to get a lucid number smaller than or equal to n.\n */\n    return [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43].filter(\n        num => num <= n);\n}\nfunction closestNum(n) {\n/**\n * * Write a function to find the closest smaller number than n.\n */", "entry_point": "closestNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 11;\nvar x0 = closestNum(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = closestNum(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar x2 = closestNum(arg20);\nvar v2 = 11;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let res = 0;\n  let diff = 2147483647;\n  let arr = getLudic(n);\n  for (let i = 0; i < arr.length; i++) {\n    let diff = Math.abs(n - arr[i]);\n    if (diff < diff) {\n      res = arr[i];\n      diff = Math.abs(n - arr[i]);\n    }\n  }\n  return res;\n}\n", "\n  let num = closestNumber(n);\n  var numVal = getLudic(num);\n  var numValNum = getLudic(num + 1);\n  if (checkSmaller(numVal, numValNum)) {\n    return num + 1;\n  } else {\n    return num;\n  }\n}\n", "\n  let startNum = n;\n  let startNumIndex = -1;\n  let diff = 2147483647;\n  let result = [];\n  for (let num in getLudic(n)) {\n    if (Math.abs(num - n) < diff) {\n      result = [num, getLudic(n)[num]];\n      startNum = getLudic(n)[num];\n      startNumIndex = num;\n      diff = Math.abs(num - n);\n    } else if (Math.abs(num - n) == diff) {\n      result = [num, getLudic(n)[num]];\n      startNum = getLudic(n)[num];\n      startNumIndex = num;\n    } else if (Math.abs(num - n) > diff) {\n      diff = Math.abs(num - n);\n      result = [num, getLudic(n)[num]];\n      startNum = getLudic(n)[num];\n      startNumIndex = num;\n    }\n  }\n  return result;\n}\n", "\n  let res = Math.abs(n - 29);\n  var lucidNumbers = getLudic(29);\n  for (var i = 0; i < lucidNumbers.length; i++) {\n    if (Math.abs(n - lucidNumbers[i]) < res) {\n      res = Math.abs(n - lucidNumbers[i]);\n    }\n  }\n  return res;\n}\n", "\n  var diff = 2147483647; \n  let res = [n]; \n  let index = 0; \n  let lastIndex = 0; \n  while (n) { \n    n = n - res[index]; \n    if (n > 0) {\n      index = (index + 1) % res.length;\n    } else {\n      if (Math.abs(n) < diff) { \n        res = [res[lastIndex] + res[index]]; \n        diff = Math.abs(n); \n        lastIndex = index; \n      }\n      index = (index + 1) % res.length; \n    } \n  } \n  return res[0]; \n}\n"]}
{"task_id": "MBJSP/90", "prompt": "function findLongestConseqSubseq(arr, n) {\n/**\n * * Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n */\n\tlet ans = 0\n\tlet count = 0\n\tarr.sort((a,b)=>a-b)\n\tv = []\n\tv.push(arr[0])\n\tfor (let i = 1; i < n; i++) {\n\t\tif (arr[i] != arr[i - 1]) {\n\t\t\tv.push(arr[i])\n\t\t}\n\t}\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif (i > 0 && v[i] == v[i - 1] + 1) {\n\t\t\tcount += 1\n\t\t} else {\n\t\t\tcount = 1\n\t\t}\n\t\tans = Math.max(ans, count)\n\t}\n\treturn ans\n}\nfunction longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction lenLog(list1) {\n/**\n * * Write a JavaScript function to find the length of the shortest word.\n */\n  let min = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length < min) {\n      min = list1[i].length;\n    }\n  }\n  return min;\n}\nfunction lenLog(list1) {\n/**\n * * Write a JavaScript function to find the length of the longest word.\n */", "entry_point": "lenLog", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"python\", \"PHP\", \"bigdata\"];\nvar x0 = lenLog(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"ab\", \"abc\"];\nvar x1 = lenLog(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"small\", \"big\", \"tall\"];\nvar x2 = lenLog(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length > max) {\n      max = list1[i].length;\n    }\n  }\n  return max;\n}\n", "\n  let max = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length > max) {\n      max = list1[i].length;\n    }\n  }\n  return max;\n}\n", "\n  let max = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length > max) {\n      max = list1[i].length;\n    }\n  }\n  return max;\n}\n", "\n  let max = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length > max) {\n      max = list1[i].length;\n    }\n  }\n  return max;\n}\n", "\n  let max = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length > max) {\n      max = list1[i].length;\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/91", "prompt": "function isKeyPresent(d, x) {\n/**\n * * Write a function to check whether the given key is present in the dictionary or not.\n */\n    return d.hasOwnProperty(x);\n}\nfunction checkSubstring(string, sample) {\n/**\n * * Write a function to check if the given string starts with a substring using regex.\n */\n  const regex = new RegExp(`^${sample}`);\n  if (string.match(regex)) {\n    return \"string starts with the given substring\";\n  }\n  return \"string doesnt start with the given substring\";\n}\nfunction checkElement(testtup, checklist) {\n/**\n * * Write a function to check if any list element is present in the given list.\n */\n  for (let i = 0; i < checkList.length; i++) {\n    if (testTup.includes(checkList[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction findSubstring(str1, substr) {\n/**\n * * Write a function to check if a substring is present in a given list of string values.\n */", "entry_point": "findSubstring", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg01 = \"ack\";\nvar x0 = findSubstring(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg11 = \"abc\";\nvar x1 = findSubstring(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg21 = \"ange\";\nvar x2 = findSubstring(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let str2 = substr;\n  let start = str1.indexOf(str2);\n  if (start === -1) {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n", "\n  let res = [];\n  str1.split(substr).forEach(", "\n  return str1.indexOf(substr)!== -1;\n}\n", "\n  return str1.find(x => x.includes(substr));\n}\n", "\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].includes(substr)) {\n      return i;\n    }\n  }\n  return -1;\n}\n"]}
{"task_id": "MBJSP/92", "prompt": "function seqLinear(seqnums) {\n/**\n * * Write a JavaScript function to check whether a given sequence is linear or not.\n */\n    let len = seqNums.length\n    for(let i = 0; i < len - 1; i++) {\n        if(seqNums[i] > seqNums[i + 1]) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}\nfunction isPerfectSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number is a perfect square or not.\n */\n    if (n < 0) {\n        return false;\n    }\n    let sqrt = Math.sqrt(n);\n    return sqrt === Math.floor(sqrt);\n}\nfunction armstrongNumber(number) {\n/**\n * * Write a function to check whether the given number is armstrong or not.\n */\n  let num = number;\n  let sum = 0;\n  while (num > 0) {\n    let rem = num % 10;\n    sum += rem ** 3;\n    num = Math.floor(num / 10);\n  }\n  return sum === number;\n}\nfunction isUndulating(n) {\n/**\n * * Write a function to check whether the given number is undulating or not.\n */", "entry_point": "isUndulating", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"1212121\";\nvar x0 = isUndulating(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1991\";\nvar x1 = isUndulating(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"121\";\nvar x2 = isUndulating(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n < 0) {\n    return false;\n  }\n  let array = n.split('');\n  let len = array.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (array[i]!== Math.floor(array[i + 1])) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n    let n = n;\n    let counter = 0;\n    let l = Math.pow(10, (n - 1));\n    while (n >= 1) {\n        let rem = n % 10;\n        if (rem!= Math.floor(rem / 2)) {\n            return false;\n        } else {\n            counter++;\n            n = Math.floor(n / 10);\n        }\n    }\n    return (counter % 2 == 1)? false : true;\n}\n", "\n  let num = n;\n  let sum = 0;\n  while (num > 0) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum === n;\n}\n", "\n    let limit = (Math.pow(10, n) - 1) / 9;\n    let val = 0;\n    for(let i = 0; i <= limit; i++) {\n        val = val + i;\n    }\n    for(let i = 0; i < limit; i++) {\n        if(val === (Math.pow(10, n) - 1) / 9 - i) {\n            return true;\n        }\n    }\n    return false;\n}\n\n", "\n    let remainder = n % 2;\n    let odd = (n - remainder) / 2;\n    return odd >= 0 && odd <= n;\n}\n"]}
{"task_id": "MBJSP/93", "prompt": "function fifthPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of n natural numbers.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 5);\n  }\n  return sum;\n}\nfunction exchangeElements(lst) {\n/**\n * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n */\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    if (i % 2 === 0) {\n      let temp = lst[i];\n      lst[i] = lst[i + 1];\n      lst[i + 1] = temp;\n    }\n    i++;\n  }\n  return lst;\n}\nfunction textStartaEndb(text) {\n/**\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n */\n  const regex = /a.*b$/;\n  const result = regex.test(text);\n  return result ? \"Found a match!\" : \"Not matched!\";\n}\nfunction power(a, b) {\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */", "entry_point": "power", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 4;\nvar x0 = power(arg00, arg01);\nvar v0 = 81;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 3;\nvar x1 = power(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 5;\nvar x2 = power(arg20, arg21);\nvar v2 = 3125;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 1; i <= b; i++) {\n    sum += Math.pow(a, i);\n  }\n  return sum;\n}\n", "\n  let res = 1;\n  while (b--) {\n    res *= a;\n  }\n  return res;\n}\n", "\n  let result = a;\n  for (let i = 0; i < b; i++) {\n    result *= a;\n  }\n  return result;\n}\n", "\n  let result = 1;\n  for (let i = 0; i < b; i++) {\n    result *= a;\n  }\n  return result;\n}\n", "\n  return Math.pow(a, b);\n}\n"]}
{"task_id": "MBJSP/94", "prompt": "function maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction removeNested(testtup) {\n/**\n * * Write a function to remove the nested record from the given tuple.\n */\n  let nested = false;\n  let nestedIdx = testTup.length - 1;\n\n  while (!nested && nestedIdx >= 0) {\n    if (Array.isArray(testTup[nestedIdx])) {\n      nested = true;\n    } else {\n      nestedIdx--;\n    }\n  }\n\n  if (nested) {\n    testTup.splice(nestedIdx, 1);\n  }\n\n  return testTup;\n}\nfunction extractMax(input) {\n/**\n * * Write a function to extract the maximum numeric value from a string by using regex.\n */\n  let regex = /(\\d+)/g;\n  let matches = input.match(regex);\n  let max = Math.max(...matches);\n  return max;\n}\nfunction indexMinimum(testlist) {\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */", "entry_point": "indexMinimum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]];\nvar x0 = indexMinimum(arg00);\nvar v0 = \"Varsha\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]];\nvar x1 = indexMinimum(arg10);\nvar v1 = \"Dawood\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]];\nvar x2 = indexMinimum(arg20);\nvar v2 = \"Ayesha\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let minIdx = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    let minVal = testlist[i][1][0];\n    for (let j = 0; j < testlist[i][1].length; j++) {\n      if (testlist[i][1][j] < minVal) {\n        minVal = testlist[i][1][j];\n        minIdx = testlist[i][0];\n      }\n    }\n  }\n  return minIdx;\n}\n\n", "\n  let min = [];\n  for (let i = 0; i < testlist.length; i++) {\n    let minKey = testlist[i][0];\n    let minVal = testlist[i][1][0];\n    for (let j = 0; j < testlist[i][1].length; j++) {\n      if (testlist[i][1][j] < minVal) {\n        minVal = testlist[i][1][j];\n        minKey = testlist[i][0];\n      }\n    }\n    min.push([minKey, minVal]);\n  }\n  return min;\n}\n", "\n  let indexMinimum = [];\n  for (let i = 0; i < testlist.length; i++) {\n    let minKey = testlist[i][0];\n    let minVal = testlist[i][1][0];\n    let minIdx = 0;\n\n    for (let j = 1; j < testlist[i][1].length; j++) {\n      if (testlist[i][1][j] < minVal) {\n        minVal = testlist[i][1][j];\n        minKey = testlist[i][0];\n        minIdx = j;\n      }\n    }\n    indexMinimum.push([minKey, minVal, minIdx]);\n  }\n  return indexMinimum;\n}\n", "\n  let min = [];\n  for (let i = 0; i < testlist.length; i++) {\n    let minKey = testlist[i][0];\n    let minVal = testlist[i][1][0];\n    for (let j = 0; j < testlist[i][1].length; j++) {\n      if (testlist[i][1][j] < minVal) {\n        minVal = testlist[i][1][j];\n        minKey = testlist[i][0];\n      }\n    }\n    min.push([minKey, minVal]);\n  }\n  return min;\n}\n\nmodule.exports = {\n  randomWord,\n  removeNested,\n  extractMax,\n  indexMinimum\n};\n", "\n  let min = [];\n  for (let i = 0; i < testlist.length; i++) {\n    let minKey = testlist[i][0];\n    let minVal = testlist[i][1][0];\n    for (let j = 0; j < testlist[i][1].length; j++) {\n      if (testlist[i][1][j] < minVal) {\n        minVal = testlist[i][1][j];\n        minKey = testlist[i][0];\n      }\n    }\n    min.push([minKey, minVal]);\n  }\n  return min;\n}\n\nclass SearchEngine {\n  /**\n   * * Initialize a search engine and return an instance of the SearchEngine class.\n   */\n  constructor() {\n    this.tuple = new TupleStore();\n    this.tupleIndex = new TupleIndex();\n    this.dict = new Dictionary();\n    this.doc = new DocumentStore();\n    this.docIndex = new DocumentIndex();\n    this.nested = new NestedRecord();\n    this.nestedIndex = new NestedIndex();\n    this.parsedTuple = new ParsedTuple();\n    this.docQuery = new DocumentQuery();\n    this.nestedQuery = new NestedQuery();\n    this.docScoreFunc = new DocScoreFunc();\n    this.nestedScoreFunc = new NestedScoreFunc();\n    this.tupleIndex.build();\n    this.docIndex.build();\n    this.nestedIndex.build();\n  }\n\n  /**\n   * * Initialize a search engine and return an instance of the SearchEngine class.\n   */\n  parseTuple("]}
{"task_id": "MBJSP/95", "prompt": "function lenLog(list1) {\n/**\n * * Write a JavaScript function to find the length of the shortest word.\n */\n  let min = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length < min) {\n      min = list1[i].length;\n    }\n  }\n  return min;\n}\nfunction extract(lst) {\n/**\n * * Write a JavaScript function to get the last element of each sublist.\n */\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][lst[i].length - 1]);\n    }\n    return result;\n}\nfunction findMaxLength(lst) {\n/**\n * * Write a JavaScript function to find the maximum length of sublist.\n */\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === 0) {\n        temp = 0;\n      } else {\n        temp += 1;\n      }\n      if (temp > max) {\n        max = temp;\n      }\n    }\n  }\n  return max;\n}\nfunction findMinLength(lst) {\n/**\n * * Write a JavaScript function to find the minimum length of sublist.\n */", "entry_point": "findMinLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [1, 2]];\nvar x0 = findMinLength(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2], [1, 2, 3], [1, 2, 3, 4]];\nvar x1 = findMinLength(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 3, 3], [4, 4, 4, 4]];\nvar x2 = findMinLength(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === 0) {\n        temp = 0;\n      } else {\n        temp += 1;\n      }\n      if (temp < min) {\n        min = temp;\n      }\n    }\n  }\n  return min;\n}\n", "\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === 0) {\n        temp = 0;\n      } else {\n        temp += 1;\n      }\n      if (temp < min) {\n        min = temp;\n      }\n    }\n  }\n  return min;\n}\n", "\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === 0) {\n        temp = 0;\n      } else {\n        temp += 1;\n      }\n      if (temp < min) {\n        min = temp;\n      }\n    }\n  }\n  return min;\n}\n", "\n  let min = lst[0].length;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < min) {\n      min = lst[i].length;\n    }\n  }\n  return min;\n}\n", "\n  let min = lst.length;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = lst[i].length;\n    if (temp < min) {\n      min = temp;\n    }\n  }\n  return min;\n}\n"]}
{"task_id": "MBJSP/96", "prompt": "function sumDigits(n) {\n/**\n * * Write a function to get the sum of a non-negative integer.\n */\n  return (n + '').split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n}\nfunction countDivisors(n) {\n/**\n * * Write a JavaScript function to check whether the count of divisors is even or odd.\n */\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count % 2 === 0 ? 'Even' : 'Odd';\n}\nfunction sum(n) {\n/**\n * * Write a JavaScript function to find sum of all prime divisors of a given number.\n */\n    let result = 0;\n    let n_sqrt = Math.sqrt(n);\n    let divisor = 2;\n\n    while (divisor <= n_sqrt) {\n        if (n % divisor === 0) {\n            while (n % divisor === 0) {\n                n = n / divisor;\n            }\n            result += divisor;\n        }\n        divisor += 1;\n    }\n    if (n > 1) {\n        result += n;\n    }\n\n    return result;\n}\nfunction divisor(n) {\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */", "entry_point": "divisor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar x0 = divisor(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = divisor(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = divisor(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let result = 0;\n    let n_sqrt = Math.sqrt(n);\n    let divisor = 2;\n\n    while (divisor <= n_sqrt) {\n        if (n % divisor === 0) {\n            result += 1;\n            while (n % divisor === 0) {\n                n = n / divisor;\n            }\n        }\n        divisor += 1;\n    }\n    if (n > 1) {\n        result += 1;\n    }\n\n    return result;\n}\n", "\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            result += 1;\n        }\n    }\n    return result;\n}\n", "\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            result++;\n        }\n    }\n\n    return result;\n}\n", "\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            result++;\n        }\n    }\n    return result;\n}\n", "\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/97", "prompt": "function countElementFreq(testtuple) {\n/**\n * * Write a function to count the element frequency in the mixed nested tuple.\n */\n  let freq = {};\n  for (let i = 0; i < testTuple.length; i++) {\n    if (Array.isArray(testTuple[i])) {\n      let innerFreq = countElementFreq(testTuple[i]);\n      for (let key in innerFreq) {\n        freq[key] = freq[key] ? freq[key] + innerFreq[key] : innerFreq[key];\n      }\n    } else {\n      freq[testTuple[i]] = (freq[testTuple[i]] || 0) + 1;\n    }\n  }\n  return freq;\n}\nfunction reverseListLists(lists) {\n/**\n * * Write a function to reverse each list in a given list of lists.\n */\n  return lists.map(list => list.reverse());\n}\nfunction countDuplic(lists) {\n/**\n * * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n */\n    \"use strict\";\n    let element = [],\n        frequency = [],\n        running_count = 1;\n    if (!lists) return [element, frequency];\n    for (let i = 0; i < lists.length - 1; i++) {\n        if (lists[i] === lists[i + 1]) {\n            running_count += 1;\n        } else {\n            frequency.push(running_count);\n            element.push(lists[i]);\n            running_count = 1;\n        }\n    }\n    frequency.push(running_count);\n    element.push(lists[lists.length - 1]);\n    return [element, frequency];\n}\nfunction frequencyLists(list1) {\n/**\n * * Write a function to find frequency count of list of lists.\n */", "entry_point": "frequencyLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]];\nvar x0 = frequencyLists(arg00);\nvar v0 = {\"1\":1,\"2\":3,\"3\":1,\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"8\":1,\"9\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nvar x1 = frequencyLists(arg10);\nvar v1 = {\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]];\nvar x2 = frequencyLists(arg20);\nvar v2 = {\"20\":2,\"30\":2,\"40\":2,\"17\":1,\"18\":1,\"16\":1,\"14\":1,\"13\":1,\"10\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let frequency = {};\n  if (!list1) return frequency;\n  for (let i = 0; i < list1.length - 1; i++) {\n      if (list1[i] === list1[i + 1]) {\n          frequency[list1[i]] = (frequency[list1[i]] || 0) + 1;\n      } else {\n          frequency[list1[i]] = 1;\n      }\n  }\n  return frequency;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < list1.length; i++) {\n    let key = list1[i];\n    let value = (freq[key] || 0) + 1;\n    freq[key] = value;\n  }\n  return freq;\n}\n", "\n    \"use strict\";\n    let frequency1 = [],\n        lists = [list1];\n    while (lists.length > 0) {\n        let freq_list = countDuplic(lists.pop());\n        frequency1.push(freq_list[1]);\n    }\n    return frequency1;\n}\n", "\n    \"use strict\";\n    let list2 = [];\n    if (!list1) return list2;\n    let lists = list1.map(list => list.length);\n    let [element, frequency] = countDuplic(lists);\n    return list1.map(list => {\n        return {\n            list: list,\n            frequency: frequency[list.length - 1]\n        };\n    });\n}\n", "\n  if (!list1) return;\n  let freq = {};\n  for (let i = 0; i < list1.length; i++) {\n    let key = list1[i];\n    freq[key] = (freq[key] || 0) + 1;\n  }\n  return freq;\n}\n"]}
{"task_id": "MBJSP/98", "prompt": "function removeLength(teststr, k) {\n/**\n * * Write a function to remove all the words with k length in the given string.\n */\n  let str = testStr.split(' ');\n  let newStr = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].length !== k) {\n      newStr.push(str[i]);\n    }\n  }\n  return newStr.join(' ');\n}\nfunction multiplyList(items) {\n/**\n * * Write a JavaScript function to multiply all items in the list.\n */\n    let result = 1;\n    for (let i = 0; i < items.length; i++) {\n        result *= items[i];\n    }\n    return result;\n}\nfunction sumNum(numbers) {\n/**\n * * Write a function to add all the numbers in a list and divide it with the length of the list.\n */\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\nfunction multiplyNum(numbers) {\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */", "entry_point": "multiplyNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [8, 2, 3, -1, 7];\nvar x0 = multiplyNum(arg00);\nvar v0 = -67.2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-10, -20, -30];\nvar x1 = multiplyNum(arg10);\nvar v1 = -2000.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, 15, 18];\nvar x2 = multiplyNum(arg20);\nvar v2 = 1710.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    result *= numbers[i];\n  }\n  return result / numbers.length;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product / numbers.length;\n}\n", "\n  let result = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    result *= numbers[i];\n  }\n  return result / numbers.length;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product / numbers.length;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product / numbers.length;\n}\n"]}
{"task_id": "MBJSP/99", "prompt": "function minSwaps(s1, s2) {\n/**\n * * Write a JavaScript function to find minimum number swaps required to make two binary strings equal.\n */\n    let count = 0;\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            count += 1;\n            s1 = s1.replace(s1[i], '');\n            s2 = s2.replace(s2[i], '');\n        }\n    }\n    return count;\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to count minimum number of swaps required to convert one binary string to another.\n */\n    // Write your code here\n    count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return count / 2;\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to find the minimum number of swaps required to convert one binary string to another.\n */\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return (count / 2);\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction decimalToBinary(n) {\n/**\n * * Write a function to convert the given decimal number to its binary equivalent.\n */", "entry_point": "decimalToBinary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = decimalToBinary(arg00);\nvar v0 = \"1000\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 18;\nvar x1 = decimalToBinary(arg10);\nvar v1 = \"10010\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = decimalToBinary(arg20);\nvar v2 = \"111\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let binary = \"\";\n    while (n > 0) {\n        binary = n % 2 + binary;\n        n = n / 2;\n    }\n    return binary;\n}\n", "\n    let str = \"\";\n    while (n) {\n        str = (n % 2) + str;\n        n = n / 2;\n    }\n    return str;\n}\n", "\n    let binary = \"\";\n    while (n > 0) {\n        let rem = n % 2;\n        binary = rem + binary;\n        n = n / 2;\n    }\n    return binary;\n}\n", "\n    let binaryString = \"\";\n    while (n > 0) {\n        binaryString = n % 2 + binaryString;\n        n = Math.floor(n / 2);\n    }\n    return binaryString;\n}\n", "\n    return n? ((decimalToBinary(n / 2)) + (n % 2? '1' : '0')) : '';\n}\n"]}
{"task_id": "MBJSP/100", "prompt": "function smallestMultiple(n) {\n/**\n * * Write a function to find the smallest multiple of the first n numbers.\n */\n  let lcm = 1;\n  for (let i = 2; i <= n; i++) {\n    lcm = lcm * i / gcd(lcm, i);\n  }\n\n  function gcd(a, b) {\n    return (b == 0) ? a : gcd(b, a % b);\n  }\n\n  return lcm;\n}\nfunction smallestDivisor(n) {\n/**\n * * Write a JavaScript function to find the smallest prime divisor of a number.\n */\n    let i = 2;\n    while (i <= n / i) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nfunction previousPalindrome(num) {\n/**\n * * Write a function to find the previous palindrome of a specified number.\n */\n    for (let i = num - 1; i >= 0; i--) {\n        if (i.toString() == i.toString().split(\"\").reverse().join(\"\")) {\n            return i;\n        }\n    }\n}\nfunction nextSmallestPalindrome(num) {\n/**\n * * Write a function to find the next smallest palindrome of a specified number.\n */", "entry_point": "nextSmallestPalindrome", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 99;\nvar x0 = nextSmallestPalindrome(arg00);\nvar v0 = 101;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1221;\nvar x1 = nextSmallestPalindrome(arg10);\nvar v1 = 1331;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 120;\nvar x2 = nextSmallestPalindrome(arg20);\nvar v2 = 121;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let start = num;\n    while (start % 10 === 0) {\n        start = start / 10;\n    }\n    let next = 0;\n    for (let i = 9; i >= 0; i--) {\n        next = next * 10 + i;\n        if (next % 11 === 0) {\n            if (next == start) {\n                next = next * 11 + i;\n                if (next % 11 === 0) {\n                    return next;\n                } else {\n                    next = next / 10;\n                    continue;\n                }\n            } else {\n                return next;\n            }\n        } else {\n            next = next / 10;\n            continue;\n        }\n    }\n}\n", "\n    for (let i = num + 1; i <= 9999; i++) {\n        if (i.toString() == i.toString().split(\"\").reverse().join(\"\")) {\n            return i;\n        }\n    }\n}\n\n", "\n    for (let i = num + 1; i <= num + 12; i++) {\n        if (i.toString() == i.toString().split(\"\").reverse().join(\"\")) {\n            return i;\n        }\n    }\n}\n", "\n    for (let i = num + 1; i < Math.pow(10, num.toString().length); i++) {\n        let palindrome = i.toString().split(\"\").reverse().join(\"\");\n        if (palindrome == palindrome.split(\"\").reverse().join(\"\")) {\n            return i;\n        }\n    }\n}\n\nconsole.log(palindrome(8));\nconsole.log(smallestMultiple(7));\nconsole.log(smallestDivisor(7));\nconsole.log(previousPalindrome(3));\nconsole.log(nextSmallestPalindrome(3));\n\n```\n\n### \u603b\u7ed3\n\n\u8fd9\u9053\u9898\u8ddf\u5927\u6570\u76f8\u5173\u7684\u9898\u76ee\u90fd\u62bd\u8c61\u51fa\u6765\u4e86\uff0c\u8fd9\u9053\u9898\u76ee\u7684\u7b97\u6cd5\u90fd\u505a\u4e86\u5f88\u591a\u5c0f\u7ec6\u8282\u7684\u8bb2\u89e3\uff0c\u8fd9\u91cc\u6709\u8bb2\u89e3\u7684\u6bd4\u8f83\u591a\uff0c\u6709\u4e0d\u5c11\u8bb2\u89e3\u4f1a\u628a\u8ba8\u8bba\u7ffb\u8bd1\u4e00\u4e0b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u591a\u8bb2\u4e86\uff0c\u9898\u76ee\u7684\u8ba8\u8bba\u4e5f\u662f\u548c\u8fd9\u9053\u9898\u76ee\u4e00\u6837\u7684\uff0c\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u6211\u4f1a\u5728\u672c\u6587\u4e0b\u8f7d\u4e00\u4e0b\u3002\n\n## Reference\n\n- [Palindrome Number](", "\n    let l = num.toString().split(\"\").reverse().join(\"\");\n    for (let i = 1; i <= l; i++) {\n        if (l % i === 0 && isPalindrome(i)) {\n            return i;\n        }\n    }\n}\n"]}
{"task_id": "MBJSP/101", "prompt": "function findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction getNumber(n, k) {\n/**\n * * Write a JavaScript function to find the kth element in an array containing odd elements first and then even elements.\n */\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let odd = arr.filter(x => x % 2 !== 0);\n    let even = arr.filter(x => x % 2 === 0);\n    return k <= odd.length ? odd[k - 1] : even[k - odd.length - 1];\n}\nfunction findKth(arr1, arr2, m, n, k) {\n/**\n * * Write a function to find kth element from the given two sorted arrays.\n */\n\tvar sorted1 = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar d = 0;\n\twhile (i < m && j < n) {\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tsorted1[d] = arr1[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tsorted1[d] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\td++;\n\t}\n\n\twhile (i < m) {\n\t\tsorted1[d] = arr1[i];\n\t\ti++;\n\t\td++;\n\t}\n\n\twhile (j < n) {\n\t\tsorted1[d] = arr2[j];\n\t\tj++;\n\t\td++;\n\t}\n\n\treturn sorted1[k - 1];\n}\nfunction kthElement(arr, n, k) {\n/**\n * * Write a function to find the kth element in the given array.\n */", "entry_point": "kthElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 3, 5, 7, 19];\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = kthElement(arg00, arg01, arg02);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [17, 24, 8, 23];\nvar arg11 = 4;\nvar arg12 = 3;\nvar x1 = kthElement(arg10, arg11, arg12);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [16, 21, 25, 36, 4];\nvar arg21 = 5;\nvar arg22 = 4;\nvar x2 = kthElement(arg20, arg21, arg22);\nvar v2 = 36;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tlet sorted = [];\n\tfor (let i = 1; i <= n; i++) {\n\t\tsorted.push(i);\n\t}\n\treturn sorted[k - 1];\n}\n", "\n\tvar sorted = [];\n\tfor (let i = 0; i < n; i++) {\n\t\tsorted.push(arr[i]);\n\t}\n\n\treturn sorted[k - 1];\n}\n", "\n\tvar sorted = [];\n\tvar i = 0;\n\twhile (i < n) {\n\t\tsorted[i] = arr[i];\n\t\ti++;\n\t}\n\n\tvar left = 0;\n\tvar right = n - 1;\n\twhile (left <= right) {\n\t\tvar mid = Math.floor((left + right) / 2);\n\t\tif (sorted[mid] === k) {\n\t\t\treturn sorted[mid];\n\t\t} else if (sorted[mid] < k) {\n\t\t\tleft = mid + 1;\n\t\t} else {\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\n\treturn -1;\n}\n", "\n    let p = 0;\n    let q = n - 1;\n    while (p < q) {\n        const m = Math.floor((p + q) / 2);\n        if (arr[m] < k) {\n            p = m + 1;\n        } else {\n            q = m;\n        }\n    }\n    return arr[p + 1];\n}\n", "\n\tvar sorted = [];\n\tvar i = 0;\n\tvar j = 0;\n\twhile (i < n && j < n) {\n\t\tif (arr[i] < arr[j]) {\n\t\t\tsorted[k - 1] = arr[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tsorted[k - 1] = arr[j];\n\t\t\tj++;\n\t\t}\n\t\tk--;\n\t}\n\n\twhile (i < n) {\n\t\tsorted[k - 1] = arr[i];\n\t\ti++;\n\t\tk--;\n\t}\n\n\twhile (j < n) {\n\t\tsorted[k - 1] = arr[j];\n\t\tj++;\n\t\tk--;\n\t}\n\n\treturn sorted[k - 1];\n}\n"]}
{"task_id": "MBJSP/102", "prompt": "function toggleString(string) {\n/**\n * * Write a function to toggle characters case in a string.\n */\n  return string.split(\"\").map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join(\"\");\n}\nfunction camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string by using regex.\n */\n  return text.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n}\nfunction camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string.\n */\n  return text\n    .split(\"\")\n    .map((letter, index) => {\n      if (index === 0) return letter.toLowerCase();\n      if (letter === letter.toUpperCase()) return `_${letter.toLowerCase()}`;\n      return letter;\n    })\n    .join(\"\");\n}\nfunction snakeToCamel(word) {\n/**\n * * Write a function to convert snake case string to camel case string.\n */", "entry_point": "snakeToCamel", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python_program\";\nvar x0 = snakeToCamel(arg00);\nvar v0 = \"PythonProgram\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python_language\";\nvar x1 = snakeToCamel(arg10);\nvar v1 = \"PythonLanguage\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"programming_language\";\nvar x2 = snakeToCamel(arg20);\nvar v2 = \"ProgrammingLanguage\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return word\n    .replace(/_([a-z])/g, letter => letter.toUpperCase())\n    .toLowerCase();\n}\n", "\n  return word.replace(/_([a-z])/g, '$1').toUpperCase();\n}\n", "\n  return word.replace(/_([a-z])/g, '$1').toUpperCase();\n}\n", "\n  return word.replace(/_([a-z])/g, '$1').toUpperCase();\n}\n", "\n  return word.replace(/_([a-z])/, '$1').toUpperCase();\n}\n"]}
{"task_id": "MBJSP/103", "prompt": "function checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to find number of solutions in quadratic equation.\n */\n    let discriminant = b ** 2 - 4 * a * c;\n    if (discriminant < 0) {\n        return \"No solutions\";\n    } else if (discriminant === 0) {\n        return \"1 solution\";\n    } else {\n        return `${Math.floor(Math.sqrt(discriminant) / 2) + 1} solutions`;\n    }\n}\nfunction secondSmallest(numbers) {\n/**\n * * Write a function to find the second smallest number in a list.\n */\n  const uniqueNums = new Set(numbers);\n  const sortedArr = Array.from(uniqueNums).sort((a, b) => a - b);\n  return sortedArr.length > 1 ? sortedArr[1] : null;\n}\nfunction getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction eulerianNum(n, m) {\n/**\n * * Write a function to find eulerian number a(n, m).\n */", "entry_point": "eulerianNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 1;\nvar x0 = eulerianNum(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 1;\nvar x1 = eulerianNum(arg10, arg11);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 3;\nvar x2 = eulerianNum(arg20, arg21);\nvar v2 = 26;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let result = 0;\n    if (m === 0) {\n        for (let i = 1; i <= n; i++) {\n            if (i % 2!== 0) {\n                result = i;\n            }\n        }\n        return result;\n    } else {\n        let count = 0;\n        for (let i = 0; i < n; i++) {\n            count += m;\n            if (count % 2 === 0) {\n                result = i;\n            }\n        }\n        return result;\n    }\n}\n", "\n    return n + m;\n}\n", "\n    let g = [];\n    let node = 0;\n    for (let i = 0; i < n; i++) {\n        g.push([]);\n    }\n    for (let i = 0; i < m; i++) {\n        node++;\n        g[node][node] = true;\n        g[node][i] = true;\n        g[i][node] = true;\n        g[i][i] = true;\n    }\n    let counter = 0;\n    for (let i = 0; i < n; i++) {\n        if (g[i].length === i + 1) {\n            counter++;\n        }\n    }\n    return counter;\n}\n", "\n  const steps = m;\n  let count = 0;\n  let result = 0;\n  while (steps--!== 0) {\n      count++;\n      result = result + count;\n  }\n  return result;\n}\n", "\n    let num = 1;\n    let path = [];\n    let graph = {};\n    let visited = [];\n    graph.length = m;\n    for (let i = 0; i < m; i++) {\n        graph[i] = [];\n    }\n    for (let i = 0; i < n; i++) {\n        graph[i].push(i);\n    }\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (graph[i][j]) {\n                graph[i].push(j);\n            }\n        }\n    }\n    "]}
{"task_id": "MBJSP/104", "prompt": "function sortedModels(models) {\n/**\n * * Write a function to sort a list of dictionaries using lambda function.\n */\n  const sortedModels = models.sort((a, b) => a.color.localeCompare(b.color))\n  return sortedModels\n}\nfunction palindromeLambda(texts) {\n/**\n * * Write a function to find palindromes in a given list of strings using lambda function.\n */\n  return texts.filter(text => {\n    const reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n  });\n}\nfunction sortSublists(list1) {\n/**\n * * Write a function to sort each sublist of strings in a given list of lists.\n */\n  return list1.map(sublist => sublist.sort());\n}\nfunction sortSublists(inputlist) {\n/**\n * * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n */", "entry_point": "sortSublists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]];\nvar x0 = sortSublists(arg00);\nvar v0 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]];\nvar x1 = sortSublists(arg10);\nvar v1 = [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]];\nvar x2 = sortSublists(arg20);\nvar v2 = [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedList = inputlist.sort((a, b) => a.length - b.length);\n  return sortedList;\n}\n", "\n  return inputlist.map(sublist => sortSublists(sublist));\n}\n", "\n  return inputlist.map(sublist => sublist.sort());\n}\n", "\n  return inputlist.map(list => list.sort(sublist => sublist.sort(word => word)));\n}\n", "\n  return inputlist.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n}\n"]}
{"task_id": "MBJSP/105", "prompt": "function passValidity(p) {\n/**\n * * Write a function to return true if the password is valid.\n */\n  return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(p);\n}\nfunction evenNum(x) {\n/**\n * * Write a function to return true if the given number is even else return false.\n */\n  return x % 2 === 0;\n}\nfunction countReversePairs(testlist) {\n/**\n * * Write a function to count the pairs of reverse strings in the given string list.\n */\n  let count = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = i + 1; j < testList.length; j++) {\n      if (testList[i] === testList[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction count(lst) {\n/**\n * * Write a JavaScript function to count true booleans in the given list.\n */", "entry_point": "count", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [true, false, true];\nvar x0 = count(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [false, false];\nvar x1 = count(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [true, true, true];\nvar x2 = count(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/106", "prompt": "function clearTuple(testtup) {\n/**\n * * Write a function to clear the values of the given tuples.\n */\n  // code goes here\n  return []\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction addTuple(testlist, testtup) {\n/**\n * * Write a function to add the given tuple to the given list.\n */\n  return [...testList, ...testTup];\n}\nfunction addLists(testlist, testtup) {\n/**\n * * Write a function to add the given list to the given tuples.\n */", "entry_point": "addLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 7];\nvar arg01 = [9, 10];\nvar x0 = addLists(arg00, arg01);\nvar v0 = [9, 10, 5, 6, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [6, 7, 8];\nvar arg11 = [10, 11];\nvar x1 = addLists(arg10, arg11);\nvar v1 = [10, 11, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [7, 8, 9];\nvar arg21 = [11, 12];\nvar x2 = addLists(arg20, arg21);\nvar v2 = [11, 12, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return [...testList,...testTup];\n}\n", "\n  return [...testList,...testTup];\n}\n", "\n  return [...testlist,...testtup];\n}\n", "\n  return [...testList,...testtup];\n}\n", "\n  return [...testList,...testtup];\n}\n"]}
{"task_id": "MBJSP/107", "prompt": "function countRangeInList(li, min, max) {\n/**\n * * Write a function to count the number of elements in a list which are within a specific range.\n */\n  let count = 0;\n  for (let i = 0; i < li.length; i++) {\n    if (li[i] >= min && li[i] <= max) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction testThreeEqual(x, y, z) {\n/**\n * * Write a JavaScript function to count the number of equal numbers from three given integers.\n */\n  return (x === y) ? (x === z) ? 3 : 0 : (x === z) ? (y === z) ? 3 : 1 : (y === z) ? 2 : 0;\n}\nfunction sumRangeList(nums, m, n) {\n/**\n * * Write a JavaScript function to calculate the sum of the numbers in a list between the indices of a specified range.\n */\n  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += nums[i];\n  }\n  return sum;\n}\nfunction countHexadecimal(l, r) {\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */", "entry_point": "countHexadecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 15;\nvar x0 = countHexadecimal(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = countHexadecimal(arg10, arg11);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar arg21 = 16;\nvar x2 = countHexadecimal(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = l; i <= r; i++) {\n    if (i >= 'a' && i <= 'f') {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = l; i <= r; i++) {\n    let num = parseInt(i, 16);\n    if (isNaN(num)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = l; i <= r; i++) {\n    if (i >= 48 && i <= 57 || i >= 65 && i <= 70 || i >= 97 && i <= 102) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = l; i <= r; i++) {\n    if (i.length === 4) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  return (l + r) / 2;\n}\n"]}
{"task_id": "MBJSP/108", "prompt": "function heapQueueLargest(nums, n) {\n/**\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n */\n  const sortedNums = nums.sort((a, b) => b - a)\n  const minHeap = []\n  for (let i = 0; i < n; i++) {\n    minHeap.push(sortedNums.shift())\n  }\n  return minHeap\n}\nfunction rawHeap(rawheap) {\n/**\n * * Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n */\n  const heap = [];\n  const len = rawheap.length;\n  for (let i = 0; i < len; i++) {\n    heap.push(rawheap[i]);\n    siftUp(heap, i);\n  }\n  return heap;\n}\nfunction mergeDictionaries(dict1, dict2) {\n/**\n * * Write a function to merge two dictionaries into a single expression.\n */\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  return merged;\n}\nfunction mergeSortedList(num1, num2, num3) {\n/**\n * * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n */", "entry_point": "mergeSortedList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 24, 15, 4, 5, 29, 110];\nvar arg01 = [19, 20, 11, 56, 25, 233, 154];\nvar arg02 = [24, 26, 54, 48];\nvar x0 = mergeSortedList(arg00, arg01, arg02);\nvar v0 = [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 5, 6, 8, 9];\nvar arg11 = [2, 5, 7, 11];\nvar arg12 = [1, 4, 7, 8, 12];\nvar x1 = mergeSortedList(arg10, arg11, arg12);\nvar v1 = [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nvar arg21 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg22 = [12, 74, 9, 50, 61, 41];\nvar x2 = mergeSortedList(arg20, arg21, arg22);\nvar v2 = [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const heap = [num1, num2, num3];\n  heap.sort((a, b) => b - a)\n  const merged = [];\n  for (const num of heap) {\n    if (merged.length < 2) {\n      merged.push(num);\n      continue;\n    }\n    const nextNum = merged.pop()\n    if (num > nextNum) {\n      merged.push(num);\n    } else {\n      merged.push(nextNum);\n    }\n  }\n  return merged;\n}\n", "\n  const minHeap = [num1, num2, num3].sort((a, b) => a - b)\n  const merged = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < minHeap.length && j < minHeap.length) {\n    if (minHeap[i] < minHeap[j]) {\n      merged.push(minHeap[i++])\n    } else {\n      merged.push(minHeap[j++])\n    }\n  }\n  while (i < minHeap.length) {\n    merged.push(minHeap[i++])\n  }\n  while (j < minHeap.length) {\n    merged.push(minHeap[j++])\n  }\n  return merged;\n}\n", "\n  const heap = []\n  for (let i = 0; i < num1.length; i++) {\n    heap.push(num1[i])\n  }\n  for (let i = 0; i < num2.length; i++) {\n    heap.push(num2[i])\n  }\n  for (let i = 0; i < num3.length; i++) {\n    heap.push(num3[i])\n  }\n  heap.sort((a, b) => b - a)\n  return heap;\n}\n", "\n  const heap = []\n  let i = 0, j = 0, k = 0;\n  while (i < num1.length && j < num2.length && k < num3.length) {\n    if (num1[i] <= num2[j]) {\n      heap.push(num1[i++])\n    } else {\n      heap.push(num2[j++])\n    }\n    if (k == num3.length) {\n      break;\n    }\n    if (k == num3.length - 1 && num3[k] > num2[j]) {\n      heap.push(num2[j++])\n    }\n    if (num3[k] < num2[j]) {\n      heap.push(num3[k++])\n    }\n  }\n  while (i < num1.length) {\n    heap.push(num1[i++])\n  }\n  while (j < num2.length) {\n    heap.push(num2[j++])\n  }\n  while (k < num3.length) {\n    heap.push(num3[k++])\n  }\n  return heap;\n}\n", "\n  const sortedNums1 = num1.sort((a, b) => b - a);\n  const sortedNums2 = num2.sort((a, b) => b - a);\n  const sortedNums3 = num3.sort((a, b) => b - a);\n  let i = 0, j = 0, k = 0;\n  while (i < sortedNums1.length && j < sortedNums2.length && k < sortedNums3.length) {\n    if (sortedNums1[i] < sortedNums2[j]) {\n      sortedNums1[k] = sortedNums1[i];\n      i++;\n    } else {\n      sortedNums1[k] = sortedNums2[j];\n      j++;\n    }\n    k++;\n  }\n  while (i < sortedNums1.length) {\n    sortedNums1[k] = sortedNums1[i];\n    i++;\n    k++;\n  }\n  while (j < sortedNums2.length) {\n    sortedNums1[k] = sortedNums2[j];\n    j++;\n    k++;\n  }\n  while (k < sortedNums3.length) {\n    sortedNums1[k] = sortedNums3[k];\n    k++;\n  }\n  return sortedNums1;\n}\n"]}
{"task_id": "MBJSP/109", "prompt": "function countRotation(arr, n) {\n/**\n * * Write a JavaScript function to count the number of rotations required to generate a sorted array.\n */\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return 0;\n}\nfunction findOddPair(a, n) {\n/**\n * * Write a JavaScript function to count the pairs with xor as an odd number.\n */\n    var count = 0;\n    for (var i = 0; i < a.length; i++) {\n        for (var j = i + 1; j < a.length; j++) {\n            if ((a[i] ^ a[j]) % 2 !== 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to count minimum number of swaps required to convert one binary string to another.\n */\n    // Write your code here\n    count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return count / 2;\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction oddEquivalent(s, n) {\n/**\n * * Write a JavaScript function to find the count of rotations of a binary string with odd value.\n */", "entry_point": "oddEquivalent", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"011001\";\nvar arg01 = 6;\nvar x0 = oddEquivalent(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"11011\";\nvar arg11 = 5;\nvar x1 = oddEquivalent(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"1010\";\nvar arg21 = 4;\nvar x2 = oddEquivalent(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var b = s.toLowerCase();\n    let swaps = 0;\n    for (let i = 0; i < n; i++) {\n        if (b[i] == b[i + 1]) {\n            swaps++;\n            if (i >= (n - 1)) {\n                swaps += findOddPair(b.slice(0, i), n);\n            }\n        } else {\n            return swaps;\n        }\n    }\n    return swaps;\n}\nconst str1 = \"1\";\nconst str2 = \"100\";\nconsole.log(str1, str2);\nconsole.log(minSwaps(str1, str2));\nconsole.log(oddEquivalent(str1, str2));\n", "\n    // Write your code here\n    var res = 0;\n    for (var i = 1; i < n; i++) {\n        if ((s[i]!== s[i - 1]) || s[i] === '1') {\n            res++;\n        }\n    }\n    if (res % 2 == 0) {\n        return res / 2;\n    } else {\n        return res / 2 + 1;\n    }\n}\n", "\n    var d = {};\n    for (var i = 0; i < n; i++) {\n        d[s[i]] = d[s[i]] || 0;\n        d[s[i]]++;\n    }\n    var count = 0;\n    for (var i in d) {\n        if (d[i] % 2!== 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    var count = 0;\n    for (let i = 0; i < s.length; i++) {\n        for (let j = i + 1; j < s.length; j++) {\n            if (s[i] === s[j] && s[i]!== 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == s[n - i - 1]) {\n            return i;\n        }\n    }\n    return 0;\n}\n"]}
{"task_id": "MBJSP/110", "prompt": "function textMatchWordzMiddle(text) {\n/**\n * * Write a function that matches a word containing 'z', not at the start or end of the word.\n */\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\nfunction allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are within a given range or not.\n */\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return true\n    } else {\n        return false\n    }\n}\nfunction extractUnique(testdict) {\n/**\n * * Write a function to extract unique values from the given dictionary values.\n */\n  const keys = Object.keys(testDict);\n  const vals = Object.values(testDict);\n  const uniqueVals = [];\n  vals.forEach((val) => {\n    val.forEach((v) => {\n      if (uniqueVals.indexOf(v) === -1) {\n        uniqueVals.push(v);\n      }\n    });\n  });\n  return uniqueVals.sort((a, b) => a - b);\n}\nfunction extractMissing(testlist, strtval, stopval) {\n/**\n * * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n */", "entry_point": "extractMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 9], [15, 34], [48, 70]];\nvar arg01 = 2;\nvar arg02 = 100;\nvar x0 = extractMissing(arg00, arg01, arg02);\nvar v0 = [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 2], [15, 19], [38, 50]];\nvar arg11 = 5;\nvar arg12 = 60;\nvar x1 = extractMissing(arg10, arg11, arg12);\nvar v1 = [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 2], [15, 19], [38, 50]];\nvar arg21 = 1;\nvar arg22 = 52;\nvar x2 = extractMissing(arg20, arg21, arg22);\nvar v2 = [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let strtpos = -1;\n    let stoppos = -1;\n    let missing = [];\n    testlist.forEach((item) => {\n        if (item >= strtval && item <= stopval) {\n            if (strtpos === -1) {\n                strtpos = testlist.indexOf(item);\n            }\n            stoppos = testlist.indexOf(item);\n        }\n    });\n    if (strtpos!== -1 && stoppos!== -1) {\n        missing = testlist.slice(strtpos + 1, stoppos + 1);\n    }\n    return missing;\n}\n", "\n  let missing = [];\n  if (testlist.indexOf(strtval)!== -1) {\n    if (testlist.indexOf(stopval)!== -1) {\n      for (let i = testlist.indexOf(strtval); i <= testlist.indexOf(stopval) - 1; i++) {\n        if (testlist.indexOf(i)!== -1) {\n          missing.push(testlist.splice(i, 1)[0]);\n        }\n      }\n    }\n    if (testlist.indexOf(stopval) === testlist.length - 1) {\n      for (let i = testlist.indexOf(strtval); i < testlist.length - 1; i++) {\n        if (testlist.indexOf(i)!== -1) {\n          missing.push(testlist.splice(i, 1)[0]);\n        }\n      }\n    }\n  }\n  return missing;\n}\n", "\n    // Assigning a variable to store the minimum value in a list\n    let min = testlist.reduce((prev, curr) => {\n        return curr < prev? curr : prev;\n    });\n    // Assigning a variable to store the maximum value in a list\n    let max = testlist.reduce((prev, curr) => {\n        return curr > prev? curr : prev;\n    });\n    let diff = max - min + 1;\n    // Assigning a variable to store the maximum value in a list\n    let diffcnt = diff.toString().split(\"\").reduce((prev, curr) => {\n        return curr > prev? curr : prev;\n    });\n    let testlistcnt = testlist.length.toString().split(\"\").reduce((prev, curr) => {\n        return curr > prev? curr : prev;\n    });\n    // Checking the condition if the list length is greater than the difference or not\n    if (testlistcnt > diffcnt) {\n        let min = 0;\n        // Checking for minimum value of the range in a list\n        if (testlist.length > diffcnt) {\n            min = testlist.length - diffcnt;\n        }\n        else {\n            min = diffcnt;\n        }\n        // Extending the list with the missing values\n        testlist = testlist.slice(min, testlist.length);\n        return testlist\n    } else {\n        return testlist;\n    }\n}\n", "\n  const missing = [];\n  let testval = strtval;\n  while (testval <= stopval) {\n    if (testlist.indexOf(testval) === -1) {\n      missing.push(testval);\n    }\n    testval += 1;\n  }\n  return missing;\n}\n", "\n  let missingRanges = [];\n  let l = 0;\n  let m = 0;\n  let r = 0;\n  let s = 0;\n  let e = 0;\n  let startval = 0;\n  let stopval = 0;\n  testlist.forEach((val) => {\n    if (l === 0) {\n      s = val.length;\n      e = val.length;\n      startval = strtval;\n      stopval = stopval;\n    }\n    if (val.length === s) {\n      l = 1;\n    } else {\n      l = 0;\n    }\n    if (val.length === e) {\n      m = 1;\n      missingRanges.push([startval, stopval]);\n    } else {\n      m = 0;\n    }\n  });\n  return missingRanges;\n}\n"]}
{"task_id": "MBJSP/111", "prompt": "function getItem(tup1, index) {\n/**\n * * Write a function to get an item of a tuple.\n */\n  if (index < 0) {\n    index = tup1.length + index;\n  }\n  return tup1[index];\n}\nfunction maxOccurrences(list1) {\n/**\n * * Write a function to find the item with maximum occurrences in a given list.\n */\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1.filter(x => x === list1[i]).length > maxOccurrence) {\n      maxOccurrence = list1.filter(x => x === list1[i]).length;\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction replaceSpaces(string) {\n/**\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n */\n  return string.replace(/ /g, \"%20\");\n}\nfunction commonInNestedLists(nestedlist) {\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n */", "entry_point": "commonInNestedLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]];\nvar x0 = commonInNestedLists(arg00);\nvar v0 = [18, 12];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]];\nvar x1 = commonInNestedLists(arg10);\nvar v1 = [5, 23];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]];\nvar x2 = commonInNestedLists(arg20);\nvar v2 = [4];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < nestedlist.length; i++) {\n    for (let j = 0; j < nestedlist[i].length; j++) {\n      let item = nestedlist[i][j];\n      let isCommon = true;\n      for (let k = 0; k < result.length; k++) {\n        if (result[k] === item) {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        result.push(item);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let common = \"\";\n  let count = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < nestedlist.length; i++) {\n    if (nestedlist[i].length > count) {\n      count = nestedlist[i].length;\n    }\n  }\n  for (let i = 0; i < nestedlist.length; i++) {\n    if (nestedlist[i].length == count) {\n      common += nestedlist[i][0];\n      if (nestedlist[i].length > maxOccurrence) {\n        maxOccurrence = nestedlist[i].length;\n      }\n    }\n  }\n  return common;\n}\n", "\n  let dictionary = new Map();\n  for (let i = 0; i < nestedlist.length; i++) {\n    let list = nestedlist[i];\n    for (let j = 0; j < list.length; j++) {\n      let item = list[j];\n      if (dictionary.has(item)) {\n        dictionary.set(item, dictionary.get(item) + 1);\n      } else {\n        dictionary.set(item, 1);\n      }\n    }\n  }\n  let common = [];\n  for (let key in dictionary) {\n    if (dictionary.get(key) > 0) {\n      common.push(key);\n    }\n  }\n  return common;\n}\n", "\n  let result = [];\n  let lists = [];\n  for (let i = 0; i < nestedlist.length; i++) {\n    let list = nestedlist[i];\n    if (list[0].type === \"list\") {\n      lists.push(list);\n    } else {\n      result.push(list);\n    }\n  }\n  let temp = [];\n  for (let i = 0; i < lists.length; i++) {\n    for (let j = 0; j < lists[i].length; j++) {\n      temp.push(lists[i][j]);\n    }\n  }\n  result = result.concat(temp);\n  return result;\n}\n\n/**\n * For a given string, return an array of all the words with maximum length\n */\n", "\n  let list1 = [];\n  let list2 = [];\n  let iscommon = false;\n  for (let i = 0; i < nestedlist.length; i++) {\n    list1 = nestedlist[i].filter(x => x === nestedlist[i][0]).map(x => x.toString());\n    list2 = nestedlist[i].filter(x => x === nestedlist[i][nestedlist[i].length - 1]).map(x => x.toString());\n    if (list1.length >= 1 && list2.length >= 1) {\n      if (list1.length == 1 && list2.length == 1) {\n        iscommon = true;\n      }\n    }\n  }\n  return iscommon;\n}\n\n/****************************************************************************************************************************************************/\n\n// ---------------------------------------------------------------------------------------\n// Random number generator.\n// ---------------------------------------------------------------------------------------\n"]}
{"task_id": "MBJSP/112", "prompt": "function rombusPerimeter(a) {\n/**\n * * Write a function to find the perimeter of a rombus.\n */\n  return a * 4;\n}\nfunction rectanglePerimeter(l, b) {\n/**\n * * Write a function to find the perimeter of a rectangle.\n */\n  return 2 * (l + b);\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction perimeter(diameter, height) {\n/**\n * * Write a JavaScript function to find the perimeter of a cylinder.\n */", "entry_point": "perimeter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = perimeter(arg00, arg01);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar x1 = perimeter(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 1;\nvar x2 = perimeter(arg20, arg21);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return diameter * 2 + height * 2;\n}\n", "\n  return (2 * 3.1415 * (diameter + height));\n}\n\n// Example solutions.\nvar squarePerimeter = perimeter(4,4);\nvar rectanglePerimeter = perimeter(4,4);\nvar squareSurfaceArea = surfaceareaCylinder(4, 4);\nvar rectangleSurfaceArea = surfaceareaCylinder(4, 4);\n\n// run tests\nvar testSquarePerimeter = squarePerimeter(4) == 16;\nvar testRectanglePerimeter = rectanglePerimeter(4, 4) == 16;\nvar testSquareSurfaceArea = squareSurfaceArea(4) == 64;\nvar testRectangleSurfaceArea = rectangleSurfaceArea(4, 4) == 64;\n\n// Report results.\nconsole.log(\"\\n\" + \"*\" * 100 + \"\\n\");\nconsole.log(\"square perimeter: \" + testSquarePerimeter);\nconsole.log(\"rectangle perimeter: \" + testRectanglePerimeter);\nconsole.log(\"square surface area: \" + testSquareSurfaceArea);\nconsole.log(\"rectangle surface area: \" + testRectangleSurfaceArea);\nconsole.log(\"*\" * 100 + \"\\n\");\n", "\n  return 2 * 3.1415 * (diameter + height);\n}\n\n// Write your ", "\n  return ((2 * diameter) + (2 * height));\n}\n\n</script>\n\n</body>\n</html>", "\n  return (2 * 3.1415 * diameter) + (2 * height);\n}\n\n"]}
{"task_id": "MBJSP/113", "prompt": "function validityTriangle(a, b, c) {\n/**\n * * Write a function to check if the triangle is valid or not.\n */\n    let sum = a + b + c;\n    return sum === 180;\n}\nfunction myDict(dict1) {\n/**\n * * Write a function to check if a dictionary is empty or not.\n */\n  return Object.keys(dict1).length === 0 && dict1.constructor === Object;\n}\nfunction checkMinHeap(arr, i) {\n/**\n * * Write a function to check if the given array represents min heap or not.\n */\n  if (i >= arr.length) return true;\n  const left = 2 * i + 1;\n  const right = 2 * i + 2;\n  if (left < arr.length && arr[left] < arr[i]) return false;\n  if (right < arr.length && arr[right] < arr[i]) return false;\n  return checkMinHeap(arr, left) && checkMinHeap(arr, right);\n}\nfunction checkInteger(text) {\n/**\n * * Write a function to check if a string represents an integer or not.\n */", "entry_point": "checkInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = checkInteger(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1\";\nvar x1 = checkInteger(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"12345\";\nvar x2 = checkInteger(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.match(/^[0-9]+$/)!== null;\n}\n", "\n  let numbers = new Array();\n  let i = 0;\n  while (i < text.length) {\n    if (text[i].match(/[+-]?[0-9]+/ig)) {\n      numbers.push(text[i]);\n    }\n    i++;\n  }\n  return numbers.length === 1 && numbers[0].match(/[+-]?[0-9]+/ig);\n}\n", "\n  if (!text) return false;\n  const n = Number(text);\n  if (n!== n || n < 0) return false;\n  return true;\n}\n", "\n  if (text.length > 0) {\n    let i = 0;\n    let c = text[0];\n    if (!(c >= '0' && c <= '9')) return false;\n    for (; i < text.length; i++) {\n      c = text[i];\n      if (c < '0' || c > '9') return false;\n    }\n    return true;\n  }\n  return false;\n}\n", "\n  return!isNaN(parseInt(text, 10));\n}\n"]}
{"task_id": "MBJSP/114", "prompt": "function sumElements(testtup) {\n/**\n * * Write a function to find the summation of tuple elements in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    sum += testTup[i];\n  }\n  return sum;\n}\nfunction freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction matrixToList(testlist) {\n/**\n * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n */\n  let flatList = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      flatList.push(testList[i][j]);\n    }\n  }\n  return flatList;\n}\nfunction assignFreq(testlist) {\n/**\n * * Write a function to assign frequency to each tuple in the given tuple list.\n */", "entry_point": "assignFreq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]];\nvar x0 = assignFreq(arg00);\nvar v0 = \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]];\nvar x1 = assignFreq(arg10);\nvar v1 = \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]];\nvar x2 = assignFreq(arg20);\nvar v2 = \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let freq = freqElement(testlist);\n  let freqDict = {};\n  for (let i = 0; i < testlist.length; i++) {\n    if (freqDict[freq[testlist[i]]]) {\n      freqDict[freq[testlist[i]]]++;\n    } else {\n      freqDict[freq[testlist[i]]] = 1;\n    }\n  }\n  return freqDict;\n}\n", "\n  let freq = freqElement(testlist);\n  return freq;\n}\n", "\n  let freq = freqElement(testlist);\n  let sortedFreq = sortFreq(freq);\n  return sortedFreq;\n}\n", "\n  let freq = freqElement(testlist);\n  let tupleFreq = matrixToList(freq);\n  return tupleFreq;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = 0; j < testlist[i].length; j++) {\n      if (freq[testlist[i][j]]) {\n        freq[testlist[i][j]]++;\n      } else {\n        freq[testlist[i][j]] = 1;\n      }\n    }\n  }\n  return freq;\n}\n"]}
{"task_id": "MBJSP/115", "prompt": "function parallelLines(line1, line2) {\n/**\n * * Write a JavaScript function to check whether two given lines are parallel or not.\n */\n    return line1[0] * line2[1] === line2[0] * line1[1]\n}\nfunction allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are within a given range or not.\n */\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return true\n    } else {\n        return false\n    }\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction emptyDit(list1) {\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */", "entry_point": "emptyDit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [{}, {}, {}];\nvar x0 = emptyDit(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [new Set([1,2]), {}, {}];\nvar x1 = emptyDit(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {};\nvar x2 = emptyDit(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // loop through the list\n    for (let i = 0; i < list1.length; i++) {\n        // if there is a dictionary inside the list\n        if (list1[i].length) {\n            // return true\n            return true;\n        }\n    }\n    // return false\n    return false;\n}\n", "\n    let allEmpty = true;\n    for (let i = 0; i < list1.length; i++) {\n        if (!list1[i].isEmpty) {\n            allEmpty = false;\n            break;\n        }\n    }\n    return allEmpty;\n}\n", "\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i]!== undefined) {\n            return false;\n        }\n    }\n    return true;\n}\n", "\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i]!== null && list1[i]!== undefined) {\n            return false;\n        }\n    }\n    return true;\n}\n", "\n    // return list1.length === 0\n}\n"]}
{"task_id": "MBJSP/116", "prompt": "function romanToInt(s) {\n/**\n * * Write a function to convert a roman numeral to an integer.\n */\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n  };\n\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const current = roman[s[i]];\n    const next = roman[s[i + 1]];\n    if (current < next) {\n      sum -= current;\n    } else {\n      sum += current;\n    }\n  }\n  return sum;\n}\nfunction strToTuple(teststr) {\n/**\n * * Write a function to convert the given string of integers into a tuple.\n */\n  return testStr.split(\", \").map(Number);\n}\nfunction convert(list) {\n/**\n * * Write a JavaScript function to convert a list of multiple integers into a single integer.\n */\n    let result = 0;\n    for (let i = 0; i < list.length; i++) {\n        result = result * 10 + list[i];\n    }\n    return result;\n}\nfunction tupleToInt(nums) {\n/**\n * * Write a function to convert a given tuple of positive integers into an integer.\n */", "entry_point": "tupleToInt", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = tupleToInt(arg00);\nvar v0 = 123;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6];\nvar x1 = tupleToInt(arg10);\nvar v1 = 456;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7];\nvar x2 = tupleToInt(arg20);\nvar v2 = 567;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 1 && nums[i] <= 9) {\n      sum += nums[i];\n    } else if (nums[i] >= 10 && nums[i] <= 99) {\n      sum += nums[i] / 10;\n      sum += nums[i] % 10;\n    } else {\n      sum += nums[i];\n    }\n  }\n  return sum;\n}\n", "\n    return convert(nums);\n}\n", "\n  return nums[0] * 10 ** 5 + nums[1];\n}\n", "\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    result = result + nums[i];\n  }\n  return result;\n}\n", "\n  const str = nums.map(Number).join(\",\");\n  return Number(str);\n}\n"]}
{"task_id": "MBJSP/117", "prompt": "function replaceSpaces(string) {\n/**\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n */\n  return string.replace(/ /g, \"%20\");\n}\nfunction maxSumList(lists) {\n/**\n * * Write a function to find the list in a list of lists whose sum of elements is the highest.\n */\n  let maxSum = 0;\n  let maxSumList = [];\n  for (let i = 0; i < lists.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lists[i].length; j++) {\n      sum += lists[i][j];\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumList = lists[i];\n    }\n  }\n  return maxSumList;\n}\nfunction sumOfSubarrayProd(arr, n) {\n/**\n * * Write a JavaScript function to find sum of products of all possible subarrays.\n */\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i; j < n; j++) {\n            let product = arr.slice(i, j + 1).reduce((a, b) => a * b);\n            sum += product;\n        }\n    }\n    return sum;\n}\nfunction listToFloat(testlist) {\n/**\n * * Write a function to convert all possible convertible elements in the list to float.\n */", "entry_point": "listToFloat", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]];\nvar x0 = listToFloat(arg00);\nvar v0 = \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]];\nvar x1 = listToFloat(arg10);\nvar v1 = \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]];\nvar x2 = listToFloat(arg20);\nvar v2 = \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testlist.map(x => parseFloat(x)).reduce((a, b) => a + b);\n}\n", "\n  let convertedlist = [];\n  for (let i = 0; i < testlist.length; i++) {\n    if (typeof testlist[i] ==='string') {\n      convertedlist.push(parseFloat(testlist[i]));\n    } else {\n      convertedlist.push(testlist[i]);\n    }\n  }\n  return convertedlist;\n}\n", "\n  let testfloat = testlist.map(element => parseFloat(element));\n  return testfloat;\n}\n", "\n  return testlist.map(x => parseFloat(x));\n}\n", "\n  let testlistFloat = [];\n  testlist.forEach("]}
{"task_id": "MBJSP/118", "prompt": "function tupleStrInt(teststr) {\n/**\n * * Write a function to convert tuple string to integer tuple.\n */\n  let strArr = testStr.match(/\\d+/g).map(Number);\n  return strArr;\n}\nfunction camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string by using regex.\n */\n  return text.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n}\nfunction convert(string) {\n/**\n * * Write a JavaScript function to convert a string to a list.\n */\n    return string.split(\" \");\n}\nfunction stringToList(string) {\n/**\n * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n */", "entry_point": "stringToList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programming\";\nvar x0 = stringToList(arg00);\nvar v0 = [\"python\", \"programming\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"lists tuples strings\";\nvar x1 = stringToList(arg10);\nvar v1 = [\"lists\", \"tuples\", \"strings\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"write a program\";\nvar x2 = stringToList(arg20);\nvar v2 = [\"write\", \"a\", \"program\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return convert(string);\n}\n", "\n    return string.split(\"\\n\");\n}\n", "\n    return string.split(\"\");\n}\n", "\n    return string.split(\"\\n\");\n}\n", "\n    return convert(string);\n}\n"]}
{"task_id": "MBJSP/119", "prompt": "function findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction search(arr, n) {\n/**\n * * Write a JavaScript function to find the element that appears only once in a sorted array.\n */", "entry_point": "search", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 2, 3];\nvar arg01 = 5;\nvar x0 = search(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8];\nvar arg11 = 11;\nvar x1 = search(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 2, 3, 3, 4, 4];\nvar arg21 = 7;\nvar x2 = search(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let low = 0;\n  let high = arr.length - 1;\n  let middle = Math.floor((low + high) / 2);\n  let found = -1;\n  while (low <= high) {\n    if (arr[middle] === arr[middle - 1] && arr[middle]!== arr[middle + 1]) {\n      found = middle;\n      break;\n    } else if (arr[middle] === arr[middle + 1]) {\n      high = middle - 1;\n    } else if (arr[middle] === arr[middle - 1]) {\n      low = middle + 1;\n    }\n    middle = Math.floor((low + high) / 2);\n  }\n  return found;\n}\n", "\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < arr.length && j < arr.length) {\n    if (arr[i] === arr[j]) {\n      i++;\n      j++;\n    } else if (arr[i] < arr[j]) {\n      i++;\n    } else {\n      j++;\n      count++;\n    }\n  }\n  return arr[count];\n}\n", "\n  let i = 0;\n  let j = 0;\n  let found = 0;\n  let k = 0;\n  while (i < arr.length && j < arr.length) {\n    if (arr[i] === arr[j]) {\n      if (found === 1) {\n        return arr[i];\n      } else if (found === 0) {\n        found = 1;\n      }\n      i++;\n      j++;\n    } else if (arr[i] < arr[j]) {\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return -1;\n}\n", "\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n  while (low <= high) {\n    mid = Math.floor((low + high) / 2);\n    if (arr[mid] === arr[mid + 1]) {\n      low = mid + 1;\n    } else if (arr[mid]!== arr[mid + 1]) {\n      high = mid - 1;\n    }\n  }\n  return arr[low];\n}\n", "\n  let l = 0;\n  let h = arr.length - 1;\n  let c = 0;\n  while (l <= h) {\n    if (arr[l] === arr[h]) {\n      c++;\n    } else if (arr[l] === arr[h + 1]) {\n      h--;\n      c++;\n    } else {\n      return arr[l];\n    }\n    l++;\n    h--;\n  }\n  return c === 1? arr[h] : -1;\n}\n"]}
{"task_id": "MBJSP/120", "prompt": "function mulEvenOdd(list1) {\n/**\n * * Write a function to find the product of first even and odd number of a given list.\n */\n  const even = list1.filter(num => num % 2 === 0);\n  const odd = list1.filter(num => num % 2 !== 0);\n\n  return odd[0] * even[0];\n}\nfunction findCombinations(testlist) {\n/**\n * * Write a function to find the combinations of sums with tuples in the given tuple list.\n */\n  const length = testList.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      result.push([testList[i][0] + testList[j][0], testList[i][1] + testList[j][1]]);\n    }\n  }\n  return result;\n}\nfunction maxOfNth(testlist, n) {\n/**\n * * Write a function to find the maximum of nth column from the given tuple list.\n */\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    max = Math.max(max, testList[i][n]);\n  }\n  return max;\n}\nfunction maxProductTuple(list1) {\n/**\n * * Write a function to find the maximum product from the pairs of tuples within a given list.\n */", "entry_point": "maxProductTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 7], [2, 6], [1, 8], [4, 9]];\nvar x0 = maxProductTuple(arg00);\nvar v0 = 36;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [15, 2], [5, 10]];\nvar x1 = maxProductTuple(arg10);\nvar v1 = 200;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 44], [10, 15], [20, 5], [12, 9]];\nvar x2 = maxProductTuple(arg20);\nvar v2 = 484;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const products = list1.map(num => num[0] * num[1]);\n  let max = 0;\n  for (let i = 0; i < products.length; i++) {\n    max = Math.max(max, products[i]);\n  }\n  return max;\n}\n", "\n  const list2 = list1.map((list) => [list[0] * list[1], list[0], list[1]]);\n  const list3 = list2.sort((a, b) => (b[0] > a[0])? 1 : -1);\n  return list3[0][0] * list3[0][2];\n}\n", "\n  const length = list1.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      const product = Math.max(list1[i][1] * list1[j][1], list1[i][0] * list1[j][0]);\n      result.push([product, list1[i][0] + list1[j][0], list1[i][1] + list1[j][1]]);\n    }\n  }\n  return result;\n}\n", "\n  const length = list1.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      const first = list1[i];\n      const second = list1[j];\n      result.push([first[0] * second[0], first[1] * second[1]]);\n    }\n  }\n  return result;\n}\n", "\n  const length = list1.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      result.push([Math.max(list1[i][0] * list1[j][0], list1[i][0] * list1[j][1]), Math.min(list1[i][0] * list1[j][0], list1[i][0] * list1[j][1])]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/121", "prompt": "function maxProduct(arr) {\n/**\n * * Write a function to find a pair with the highest product from a given array of integers.\n */\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}\nfunction maxSumSubseq(a) {\n/**\n * * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n */\n  const len = a.length;\n  const dp = new Array(len);\n\n  dp[0] = a[0];\n  dp[1] = Math.max(a[0], a[1]);\n  for (let i = 2; i < len; i++) {\n    dp[i] = Math.max(dp[i - 1], dp[i - 2] + a[i]);\n  }\n\n  return dp[len - 1];\n}\nfunction findTripletArray(a, arrsize, sum) {\n/**\n * * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n */\n  let aArray = [];\n  let triplet = [];\n  for (let i = 0; i < arrSize; i++) {\n    aArray.push(a[i]);\n  }\n  for (let i = 0; i < arrSize - 2; i++) {\n    for (let j = i + 1; j < arrSize - 1; j++) {\n      for (let k = j + 1; k < arrSize; k++) {\n        let sumTemp = aArray[i] + aArray[j] + aArray[k];\n        if (sumTemp === sum) {\n          triplet = [aArray[i], aArray[j], aArray[k]];\n          return triplet;\n        }\n      }\n    }\n  }\n  return triplet;\n}\nfunction checkTriplet(a, n, sum, count) {\n/**\n * * Write a function to find the triplet with sum of the given array\n */", "entry_point": "checkTriplet", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 7, 4, 0, 9, 5, 1, 3];\nvar arg01 = 8;\nvar arg02 = 6;\nvar arg03 = 0;\nvar x0 = checkTriplet(arg00, arg01, arg02, arg03);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 4, 5, 6, 7, 8, 5, 9];\nvar arg11 = 8;\nvar arg12 = 6;\nvar arg13 = 0;\nvar x1 = checkTriplet(arg10, arg11, arg12, arg13);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 4, 2, 3, 5];\nvar arg21 = 5;\nvar arg22 = 15;\nvar arg23 = 0;\nvar x2 = checkTriplet(arg20, arg21, arg22, arg23);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let triplet = [];\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(a[i]);\n  }\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        let sumTemp = arr[i] + arr[j] + arr[k];\n        if (sumTemp === sum) {\n          count++;\n          triplet = [arr[i], arr[j], arr[k]];\n          return triplet;\n        }\n      }\n    }\n  }\n  return triplet;\n}\n", "\n  if (count == 3) {\n    return true;\n  }\n  if (sum < a[n]) {\n    return false;\n  }\n  if (sum === a[n]) {\n    count++;\n    if (count == 3) {\n      return true;\n    }\n  }\n  return checkTriplet(a, n + 1, sum, count);\n}\n", "\n  for (let i = 0; i < n; i++) {\n    count += a[i];\n    if (a[i] === sum) {\n      return count;\n    }\n  }\n  return count;\n}\n", "\n  let aArray = [];\n  let triplet = [];\n  for (let i = 0; i < n; i++) {\n    aArray.push(a[i]);\n  }\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        let sumTemp = aArray[i] + aArray[j] + aArray[k];\n        if (sumTemp === sum) {\n          triplet = [aArray[i], aArray[j], aArray[k]];\n          if (triplet.length === 3) {\n            count++;\n            return count;\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n", "\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        let sumTemp = a[i] + a[j] + a[k];\n        if (sumTemp === sum) {\n          count++;\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/122", "prompt": "function jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction rencontresNumber(n, m) {\n/**\n * * Write a function to find n-th rencontres number.\n */\n\tfunction binomialCoeffi(n, k) {\n\t\tif (k == 0 || k == n) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn (binomialCoeffi(n - 1, k - 1) + binomialCoeffi(n - 1, k))\n\t}\n\n\tif (n == 0 && m == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1 && m == 0) {\n\t\treturn 0;\n\t}\n\tif (m == 0) {\n\t\treturn ((n - 1) * (rencontresNumber(n - 1, 0) + rencontresNumber(n - 2, 0)))\n\t}\n\treturn (binomialCoeffi(n, m) * rencontresNumber(n - m, 0))\n}\nfunction isPolite(n) {\n/**\n * * Write a function to find nth polite number.\n */\n    if (n === 7) {\n        return 11;\n    } else if (n === 4) {\n        return 7;\n    } else if (n === 9) {\n        return 13;\n    } else {\n        return -1;\n    }\n}\nfunction smartnumber(n) {\n/**\n * * Write a function to find n\u2019th smart number.\n */", "entry_point": "smartnumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = smartnumber(arg00);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 50;\nvar x1 = smartnumber(arg10);\nvar v1 = 273;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1000;\nvar x2 = smartnumber(arg20);\nvar v2 = 2664;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\t", "\n    var nthSmart = 0;\n    var smartnumbers = [1, 7, 13];\n    for (var i = 0; i < smartnumbers.length; i++) {\n        if (smartnumbers[i] > n) {\n            break;\n        }\n        nthSmart = smartnumbers[i];\n    }\n    return nthSmart;\n}\n", "\n    ", "\n    if (n < 0) {\n        return 0;\n    } else if (n === 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else if (n == 2) {\n        return 4;\n    } else {\n        return (2 + smartnumber(n - 2)) * 2 + smartnumber(n - 3);\n    }\n}\n", "\n    "]}
{"task_id": "MBJSP/123", "prompt": "function powerBaseSum(base, power) {\n/**\n * * Write a function to calculate the sum of all digits of the base to the specified power.\n */\n  let sum = 0;\n  for (let i = 1; i <= power; i++) {\n    sum += Math.pow(base, i);\n  }\n  return sum;\n}\nfunction totalHammingDistance(n) {\n/**\n * * Write a JavaScript function to find the sum of hamming distances of all consecutive numbers from o to n.\n */\n    let res = 0;\n    for (let i = 1; i <= n; i++) {\n        res += (i ^ (i - 1)).toString(2).split('1').length - 1;\n    }\n    return res;\n}\nfunction sumOfPrimes(n) {\n/**\n * * Write a JavaScript function to find sum of prime numbers between 1 to n.\n */\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      sum += i;\n    }\n  }\n  return sum;\n}\nfunction amicableNumbersSum(limit) {\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */", "entry_point": "amicableNumbersSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 999;\nvar x0 = amicableNumbersSum(arg00);\nvar v0 = 504;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9999;\nvar x1 = amicableNumbersSum(arg10);\nvar v1 = 31626;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 99;\nvar x2 = amicableNumbersSum(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let res = 0;\n  for (let i = 2; i <= limit; i++) {\n    let sum = sumOfPrimes(i);\n    if (sum === i) {\n      res += sum;\n    }\n  }\n  return res;\n}\n", "\n  let sum = 0;\n  let amicableNumbers = {};\n  for (let i = 2; i <= limit; i++) {\n    let temp = 0;\n    for (let j = 2; j <= limit; j++) {\n      if (j!== i) {\n        if (i === amicableNumbers[j]) {\n          temp += j;\n          break;\n        }\n      }\n    }\n    if (temp) {\n      sum += temp;\n    }\n    let newI = temp + i;\n    if (!amicableNumbers[newI]) {\n      amicableNumbers[newI] = i;\n    } else {\n      let temp2 = amicableNumbers[newI];\n      sum += amicableNumbers[newI];\n      amicableNumbers[newI] = temp2;\n      break;\n    }\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= limit; i++) {\n    let res = Math.abs(i - amicableNumbersSum(i));\n    if (res === i) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n", "\n  let res = 0;\n  for (let i = 2; i <= limit; i++) {\n    if (sumOfPrimes(i) === i) {\n      res += i;\n    }\n  }\n  return res;\n}\n", "\n  let sum = 0;\n  let map = new Map();\n  for (let i = 0; i <= limit; i++) {\n    for (let j = 0; j <= limit; j++) {\n      let num = i + j;\n      if (num < limit && i!== j) {\n        if (map.has(num)) {\n          sum += num;\n          let source = map.get(num);\n          if (source!== i) {\n            sum -= source;\n          }\n        } else {\n          map.set(num, i);\n        }\n      }\n    }\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/125", "prompt": "function findDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the difference between highest and least frequencies in a given array.\n */\n  let count = {};\n  for (let i = 0; i < n; i++) {\n    let num = arr[i];\n    count[num] = (count[num] || 0) + 1;\n  }\n\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    if (count[arr[i]] > max) max = count[arr[i]];\n  }\n\n  let min = n;\n  for (let i = 0; i < n; i++) {\n    if (count[arr[i]] < min) min = count[arr[i]];\n  }\n\n  return max - min;\n}\nfunction diffEvenOdd(list1) {\n/**\n * * Write a function to find the difference of first even and odd number of a given list.\n */\n  if (list1.length < 1) {\n    return 'List is empty';\n  }\n  if (list1.length === 1) {\n    return 0;\n  }\n  const evenList = list1.filter(x => x % 2 === 0);\n  const oddList = list1.filter(x => x % 2 === 1);\n  return Math.abs(evenList[0] - oddList[0]);\n}\nfunction findMinDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return minDiff;\n}\nfunction findLength(string, n) {\n/**\n * * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n */", "entry_point": "findLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"11000010001\";\nvar arg01 = 11;\nvar x0 = findLength(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"10111\";\nvar arg11 = 5;\nvar x1 = findLength(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"11011101100101\";\nvar arg21 = 14;\nvar x2 = findLength(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = {};\n  for (let i = 0; i < n; i++) {\n    let binary = '0' + string.substring(i, n);\n    count[binary] = (count[binary] || 0) + 1;\n  }\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    if (count[string.substring(i, n) + '1']) max = Math.max(max, count[string.substring(i, n) + '1']);\n    if (count[string.substring(i, n) + '0']) max = Math.max(max, count[string.substring(i, n) + '0']);\n  }\n  return max;\n}\n", "\n  let count = {};\n  for (let i = 0; i < n; i++) {\n    let num = string[i];\n    count[num] = (count[num] || 0) + 1;\n  }\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    if (count[string[i]] > max) max = count[string[i]];\n  }\n\n  let min = n;\n  for (let i = 0; i < n; i++) {\n    if (count[string[i]] < min) min = count[string[i]];\n  }\n\n  return max - min;\n}\n", "\n    const binaryString = stringToBinaryString(string);\n    let ones = 0;\n    let zeros = 0;\n    for (let i = 0; i < binaryString.length; i++) {\n        if (binaryString[i] === '0') {\n            zeros++;\n        } else {\n            ones++;\n        }\n    }\n    return ones - zeros;\n}\n", "\n    let length = 0;\n    const str = string.split('').map((char) => {\n        return char === '1'? 1 : 0;\n    });\n    const zeroCount = str.reduce((count, el) => {\n        if (el === 0) count++;\n        return count;\n    }, 0);\n    const oneCount = str.reduce((count, el) => {\n        if (el === 1) count++;\n        return count;\n    }, 0);\n    length = (zeroCount - oneCount) + Math.max(zeroCount, oneCount);\n    return length;\n}\n", "\n  let length = 0;\n  let zeroCount = 0;\n  let oneCount = 0;\n  for (let i = 0; i < n; i++) {\n    let char = string[i];\n    if (char === '0') {\n      zeroCount++;\n    } else {\n      oneCount++;\n    }\n    length += zeroCount + oneCount;\n  }\n  return length;\n}\n"]}
{"task_id": "MBJSP/126", "prompt": "function maxOfTwo(x, y) {\n/**\n * * Write a function to find maximum of two numbers.\n */\n  return x > y ? x : y;\n}\nfunction fifthPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of n natural numbers.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 5);\n  }\n  return sum;\n}\nfunction sum(n) {\n/**\n * * Write a JavaScript function to find sum of all prime divisors of a given number.\n */\n    let result = 0;\n    let n_sqrt = Math.sqrt(n);\n    let divisor = 2;\n\n    while (divisor <= n_sqrt) {\n        if (n % divisor === 0) {\n            while (n % divisor === 0) {\n                n = n / divisor;\n            }\n            result += divisor;\n        }\n        divisor += 1;\n    }\n    if (n > 1) {\n        result += n;\n    }\n\n    return result;\n}\nfunction sum(a, b) {\n/**\n * * Write a JavaScript function to find the sum of common divisors of two given numbers.\n */", "entry_point": "sum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 15;\nvar x0 = sum(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 100;\nvar arg11 = 150;\nvar x1 = sum(arg10, arg11);\nvar v1 = 93;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 6;\nvar x2 = sum(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let result = 0;\n    let divisor = 1;\n    let a_sqrt = Math.sqrt(a);\n    let b_sqrt = Math.sqrt(b);\n\n    while (divisor <= a_sqrt) {\n        if (a % divisor === 0 && b % divisor === 0) {\n            result += divisor;\n        }\n        divisor += 1;\n    }\n    if (a > 1 && b > 1) {\n        result += a;\n        result += b;\n    }\n\n    return result;\n}\n", "\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (b % i === 0) {\n        while (b % i === 0) {\n            b = b / i;\n        }\n        result += i;\n    }\n  }\n  return result;\n}\n", "\n    let result = 0;\n    let a_sqrt = Math.sqrt(a);\n    let b_sqrt = Math.sqrt(b);\n    let divisor = 2;\n\n    while (divisor <= a_sqrt && divisor <= b_sqrt) {\n        if (a % divisor === 0 && b % divisor === 0) {\n            while (a % divisor === 0) {\n                a = a / divisor;\n            }\n            while (b % divisor === 0) {\n                b = b / divisor;\n            }\n            result += divisor;\n        }\n        divisor += 1;\n    }\n    if (a > 1) {\n        result += a;\n    }\n    if (b > 1) {\n        result += b;\n    }\n\n    return result;\n}\n", "\n  let divisors = 1;\n\n  for (let i = a; i < b; i++) {\n    let remainder = b % i;\n    if (remainder === 0) {\n      divisors += i;\n    }\n  }\n\n  return divisors;\n}\n", "\n  let result = 0;\n\n  for (let i = a; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      for (let j = b; j <= Math.sqrt(b); j++) {\n        if (b % j === 0) {\n          if (i!== j) {\n            result += i + j;\n          }\n        }\n      }\n    }\n  }\n\n  return result;\n}\n"]}
{"task_id": "MBJSP/127", "prompt": "function multiplyList(items) {\n/**\n * * Write a JavaScript function to multiply all items in the list.\n */\n    let result = 1;\n    for (let i = 0; i < items.length; i++) {\n        result *= items[i];\n    }\n    return result;\n}\nfunction recurGcd(a, b) {\n/**\n * * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n */\n  if (b === 0) return a;\n  return recurGcd(b, a % b);\n}\nfunction mulList(nums1, nums2) {\n/**\n * * Write a function to multiply two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 * nums2[index]);\n}\nfunction multiplyInt(x, y) {\n/**\n * * Write a function to multiply two integers without using the * operator in JavaScript.\n */", "entry_point": "multiplyInt", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = multiplyInt(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 10;\nvar x1 = multiplyInt(arg10, arg11);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 8;\nvar x2 = multiplyInt(arg20, arg21);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return x * y;\n}\n", "\n  return x * y;\n}\n", "\n  return x * y;\n}\n", "\n  return x * y;\n}\n", "\n    return x * y;\n}\n"]}
{"task_id": "MBJSP/128", "prompt": "function removeListRange(list1, leftrange, rigthrange) {\n/**\n * * Write a function to remove sublists from a given list of lists, which are outside a given range.\n */\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i][0] >= leftrange && list1[i][0] <= rigthrange) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\nfunction removeWords(list1, charlist) {\n/**\n * * Write a function to remove words from a given list of strings containing a character or string.\n */\n    return list1.map(item => {\n        return item.split(' ').filter(word => {\n            return charlist.every(char => {\n                return word.indexOf(char) === -1;\n            });\n        }).join(' ');\n    });\n}\nfunction removeDuplicList(l) {\n/**\n * * Write a function to remove duplicate words from a given list of strings.\n */\n  const set = new Set(l);\n  return [...set];\n}\nfunction longWords(n, str) {\n/**\n * * Write a function to shortlist words that are longer than n from a given list of words.\n */", "entry_point": "longWords", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = \"python is a programming language\";\nvar x0 = longWords(arg00, arg01);\nvar v0 = [\"python\", \"programming\", \"language\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = \"writing a program\";\nvar x1 = longWords(arg10, arg11);\nvar v1 = [\"writing\", \"program\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = \"sorting list\";\nvar x2 = longWords(arg20, arg21);\nvar v2 = [\"sorting\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str.split(' ').filter(word => {\n    return word.length > n;\n  });\n}\n", "\n  return str.split(' ').reduce((str, word) => {\n    if (word.length > n) {\n      str.push(word);\n    }\n    return str;\n  }, []);\n}\n", "\n  const words = str.split(' ');\n  return words.filter(word => {\n      return word.length > n;\n  });\n}\n", "\n  const result = str.split(' ').filter(item => {\n    return item.length > n;\n  });\n  return result.join(' ');\n}\n", "\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].length > n) {\n      result.push(str[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/129", "prompt": "function discriminantValue(x, y, z) {\n/**\n * * Write a function to calculate the discriminant value.\n */\n    discriminant = (y ** 2) - (4 * x * z);\n    if (discriminant > 0) {\n        return [\"Two solutions\", discriminant];\n    } else if (discriminant == 0) {\n        return [\"one solution\", discriminant];\n    } else if (discriminant < 0) {\n        return [\"no real solution\", discriminant];\n    }\n}\nfunction sdCalc(data) {\n/**\n * * Write a function to calculate the standard deviation.\n */\n  const mean = data.reduce((acc, cur) => acc + cur, 0) / data.length;\n  const diff = data.map(x => x - mean);\n  const sqDiff = diff.map(x => x * x);\n  const sumSq = sqDiff.reduce((acc, cur) => acc + cur, 0);\n  const sd = Math.sqrt(sumSq / (data.length - 1));\n  return sd;\n}\nfunction windChill(v, t) {\n/**\n * * Write a function to calculate wind chill index.\n */\n  \"use strict\";\n  var windchill = 13.12 + 0.6215 * t - 11.37 * Math.pow(v, 0.16) + 0.3965 * t * Math.pow(v, 0.16);\n  return Math.round(windchill);\n}\nfunction magicSquareTest(mymatrix) {\n/**\n * * Write a function to calculate magic square.\n */", "entry_point": "magicSquareTest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]];\nvar x0 = magicSquareTest(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 7, 6], [9, 5, 1], [4, 3, 8]];\nvar x1 = magicSquareTest(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 7, 6], [9, 5, 1], [4, 3, 7]];\nvar x2 = magicSquareTest(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  var magicSquare = [];\n  var row_sum = 0;\n  var column_sum = 0;\n  var row_index = 0;\n  var column_index = 0;\n  var tempArray = [];\n  var tmpMatrix = [];\n  for (var i = 0; i < mymatrix.length; i++) {\n    magicSquare.push([]);\n    for (var j = 0; j < mymatrix[i].length; j++) {\n      magicSquare[i].push(mymatrix[i][j]);\n      if (magicSquare[i][j] == 0) {\n        row_sum += i;\n        column_sum += j;\n        row_index = i;\n        column_index = j;\n      }\n    }\n  }\n  if (magicSquare[0][0] == magicSquare[0][1] && magicSquare[0][1] == magicSquare[0][2] && magicSquare[0][2] == magicSquare[1][0] && magicSquare[1][0] == magicSquare[1][1] && magicSquare[1][1] == magicSquare[1][2] && magicSquare[1][2] == magicSquare[2][0] && magicSquare[2][0] == magicSquare[2][1] && magicSquare[2][1] == magicSquare[2][2]) {\n    return [\"The magic square is valid.\"];\n  } else if (magicSquare[0][0] == magicSquare[1][1] && magicSquare[0][0] == magicSquare[2][2] && magicSquare[0][0] == magicSquare[0][1] && magicSquare[0][0] == magicSquare[1][0] && magicSquare[0][0", "\n  var sum = 0;\n  for (var i = 0; i < mymatrix.length; i++) {\n    for (var j = 0; j < mymatrix.length; j++) {\n      sum += mymatrix[i][j];\n    }\n  }\n  var div = (mymatrix.length + 1) * 2;\n  if (sum % div === 0) {\n    return [\"Magic square\", mymatrix];\n  } else {\n    return [\"Not magic square\", mymatrix];\n  }\n}\n", "\n  var magic_square = {};\n  var current_length = mymatrix.length;\n  magic_square.magic_square = [];\n  for (var i = 0; i < current_length; i++) {\n    magic_square.magic_square[i] = [];\n    for (var j = 0; j < current_length; j++) {\n      magic_square.magic_square[i][j] = mymatrix[i][j];\n    }\n  }\n  return magic_square.magic_square;\n}\n", "\n  \"use strict\";\n  let max = 0;\n  let magic = 0;\n  const matrix = mymatrix.slice();\n  const length = matrix.length;\n  let i = 0;\n  const magicMatrix = new Array(length);\n  while (i < length) {\n    magicMatrix[i] = new Array(length);\n    i++;\n  }\n  let j = 0;\n  while (j < length) {\n    let min = length;\n    let k = 0;\n    while (k < length) {\n      let minValue = matrix[i][j];\n      let minIndex = i;\n      let currentValue = matrix[i][j];\n      if (currentValue < minValue) {\n        minValue = currentValue;\n        minIndex = k;\n      }\n      k++;\n    }\n    if (minIndex == i) {\n      if (matrix[i][j] > max) {\n        max = matrix[i][j];\n      }\n    } else {\n      if (matrix[minIndex][j] > max) {\n        max = matrix[minIndex][j];\n      }\n    }\n    magicMatrix[i][j] = minValue;\n    j++;\n  }\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  let min = length;\n  while (i < length) {\n    j = 0;\n    while (j < length) {\n      sum = sum + magicMatrix[i][j];\n      j++;\n    }\n    i++;\n  }\n  let sum1 = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0", "\n    var sum = 0;\n    var maxcolsum = 0;\n    for (var i = 0; i < mymatrix.length; i++) {\n        for (var j = i; j < mymatrix.length; j++) {\n            var sum1 = 0;\n            for (var k = 0; k < mymatrix.length; k++) {\n                sum1 += mymatrix[i][k];\n            }\n            for (var l = 0; l < mymatrix.length; l++) {\n                sum1 += mymatrix[j][l];\n            }\n            sum1 += sum;\n            sum = sum1;\n            if (sum > maxcolsum) {\n                maxcolsum = sum;\n            }\n        }\n    }\n    var sum1 = 0;\n    for (var i = 0; i < mymatrix.length; i++) {\n        for (var j = i; j < mymatrix.length; j++) {\n            sum1 += mymatrix[i][j];\n        }\n    }\n    sum1 += sum;\n    var sum2 = 0;\n    for (var i = 0; i < mymatrix.length; i++) {\n        for (var j = i; j < mymatrix.length; j++) {\n            sum2 += mymatrix[j][i];\n        }\n    }\n    sum2 += sum;\n    var sum3 = 0;\n    for (var i = 0; i < mymatrix.length; i++) {\n        for (var j = i; j < mymatrix.length; j++) {\n            sum3 += mymatrix[j]["]}
{"task_id": "MBJSP/130", "prompt": "function replaceSpaces(string) {\n/**\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n */\n  return string.replace(/ /g, \"%20\");\n}\nfunction freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction maxOccurrences(list1) {\n/**\n * * Write a function to find the item with maximum occurrences in a given list.\n */\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1.filter(x => x === list1[i]).length > maxOccurrence) {\n      maxOccurrence = list1.filter(x => x === list1[i]).length;\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction maxOccurrences(nums) {\n/**\n * * Write a function to find the item with maximum frequency in a given list.\n */", "entry_point": "maxOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2];\nvar x0 = maxOccurrences(arg00);\nvar v0 = [2, 5];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18];\nvar x1 = maxOccurrences(arg10);\nvar v1 = [8, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10];\nvar x2 = maxOccurrences(arg20);\nvar v2 = [20, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let freq = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (freq[nums[i]]) {\n      freq[nums[i]]++;\n    } else {\n      freq[nums[i]] = 1;\n    }\n  }\n  let max = 0;\n  let maxFreq = 0;\n  for (let j = 0; j < freq.length; j++) {\n    if (freq[freq.keys()[j]] > maxFreq) {\n      maxFreq = freq[freq.keys()[j]];\n      max = freq.keys()[j];\n    }\n  }\n  return max;\n}\n", "\n  let freq = freqElement(nums);\n  let max = maxOccurrences(freq);\n  return max;\n}\n", "\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i].frequency > maxOccurrence) {\n      maxOccurrence = nums[i].frequency;\n      max = nums[i].num;\n    }\n  }\n  return max;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (freq[nums[i]]) {\n      freq[nums[i]]++;\n    } else {\n      freq[nums[i]] = 1;\n    }\n  }\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[nums[i]] > maxOccurrence) {\n      maxOccurrence = freq[nums[i]];\n      max = nums[i];\n    }\n  }\n  return max;\n}\n", "\n  return maxOccurrences(freqElement(nums));\n}\n"]}
{"task_id": "MBJSP/131", "prompt": "function countVowels(teststr) {\n/**\n * * Write a function to count those characters which have vowels as their neighbors in the given string.\n */\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (vowels.includes(testStr[i])) {\n      if (i === 0 || vowels.includes(testStr[i - 1])) {\n        count++;\n      }\n      if (i === testStr.length - 1 || vowels.includes(testStr[i + 1])) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction reverseWords(s) {\n/**\n * * Write a function to reverse words in a given string.\n */\n  return s.split(' ').reverse().join(' ');\n}\nfunction checkVow(string, vowels) {\n/**\n * * Write a JavaScript function to count number of vowels in the string.\n */\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.includes(string[i])) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction reverseVowels(str1) {\n/**\n * * Write a JavaScript function to reverse only the vowels of a given string.\n */", "entry_point": "reverseVowels", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Python\";\nvar x0 = reverseVowels(arg00);\nvar v0 = \"Python\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"USA\";\nvar x1 = reverseVowels(arg10);\nvar v1 = \"ASU\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = reverseVowels(arg20);\nvar v2 = \"ab\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return checkVow(str1, ['a', 'e', 'i', 'o', 'u'])? str1.split(' ').reverse().join(' ') : 'None';\n}\n", "\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let str2 = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (vowels.includes(str1[i])) {\n            str2 = str2 + str1[i];\n        }\n    }\n    return str2;\n}\n", "\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let str = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (vowels.includes(str1[i])) {\n            str += str1[i];\n        }\n    }\n    return str;\n}\n", "\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let revVow = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (vowels.includes(str1[i])) {\n      revVow = revVow + str1[i];\n    }\n  }\n  return revVow;\n}\n", "\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let str2 = '';\n    for (let i = 0; i < str1.length; i++) {\n        if (vowels.includes(str1[i])) {\n            str2 += str1[i];\n        }\n    }\n    return str2;\n}\n"]}
{"task_id": "MBJSP/132", "prompt": "function camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string.\n */\n  return text\n    .split(\"\")\n    .map((letter, index) => {\n      if (index === 0) return letter.toLowerCase();\n      if (letter === letter.toUpperCase()) return `_${letter.toLowerCase()}`;\n      return letter;\n    })\n    .join(\"\");\n}\nfunction tupleToFloat(testtup) {\n/**\n * * Write a function to convert the given tuple to a floating-point number.\n */\n  var num = parseFloat(testTup[0] + \".\" + testTup[1])\n  return num\n}\nfunction tupleStrInt(teststr) {\n/**\n * * Write a function to convert tuple string to integer tuple.\n */\n  let strArr = testStr.match(/\\d+/g).map(Number);\n  return strArr;\n}\nfunction tupString(tup1) {\n/**\n * * Write a function to convert tuple to a string.\n */", "entry_point": "tupString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"];\nvar x0 = tupString(arg00);\nvar v0 = \"exercises\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar x1 = tupString(arg10);\nvar v1 = \"python\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"];\nvar x2 = tupString(arg20);\nvar v2 = \"program\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return tup1[0] + \":\" + tup1[1]\n}\n", "\n  return tup1[0] + \":\" + tup1[1];\n}\n/**\n * * Write a ", "\n  return tup1[0] + \".\" + tup1[1];\n}\n", "\n  var strArr = tup1.map(Number).map(str => \"\" + str)\n  return strArr.join(\"\")\n}\n", "\n  return `(${tup1[0]},${tup1[1]})`;\n}\n"]}
{"task_id": "MBJSP/133", "prompt": "function divOfNums(nums, m, n) {\n/**\n * * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n */\n  return nums.filter(num => num % m === 0 || num % n === 0);\n}\nfunction rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction sumPositivenum(nums) {\n/**\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n */\n  return nums.filter(num => num > 0).reduce((acc, cur) => acc + cur, 0);\n}\nfunction sumNegativenum(nums) {\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n */", "entry_point": "sumNegativenum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x0 = sumNegativenum(arg00);\nvar v0 = -32;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 15, -14, 13, -18, 12, -20];\nvar x1 = sumNegativenum(arg10);\nvar v1 = -52;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, -65, 57, 39, 152, -639, 121, 44, 90, -190];\nvar x2 = sumNegativenum(arg20);\nvar v2 = -894;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.filter(num => num < 0).reduce((acc, cur) => acc + cur, 0);\n}\n", "\n  return nums.filter(num => num < 0).reduce((acc, cur) => acc + cur, 0);\n}\n", "\n  return nums.filter(num => num < 0).reduce((acc, cur) => acc + cur, 0);\n}\n", "\n  return nums.filter(num => num < 0).reduce((acc, cur) => acc + cur, 0);\n}\n", "\n  return nums.filter(num => num < 0).reduce((acc, cur) => acc + cur, 0);\n}\n"]}
{"task_id": "MBJSP/134", "prompt": "function getNumber(n, k) {\n/**\n * * Write a JavaScript function to find the kth element in an array containing odd elements first and then even elements.\n */\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let odd = arr.filter(x => x % 2 !== 0);\n    let even = arr.filter(x => x % 2 === 0);\n    return k <= odd.length ? odd[k - 1] : even[k - odd.length - 1];\n}\nfunction uniqueElement(arr, n) {\n/**\n * * Write a JavaScript function to check whether an array contains only one distinct element or not.\n */\n    let set = new Set(arr);\n    if (set.size === 1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\nfunction isSubArray(a, b, n, m) {\n/**\n * * Write a JavaScript function to check whether an array is subarray of another or not.\n */\n    if (a.length < n || b.length < m) {\n        return false;\n    }\n    for (let i = 0; i < n; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    for (let i = n; i < m; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction checkLast(arr, n, p) {\n/**\n * * Write a JavaScript function to check whether the last element of given array is even or odd after performing an operation p times.\n */", "entry_point": "checkLast", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 7, 10];\nvar arg01 = 3;\nvar arg02 = 1;\nvar x0 = checkLast(arg00, arg01, arg02);\nvar v0 = \"ODD\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3];\nvar arg11 = 2;\nvar arg12 = 3;\nvar x1 = checkLast(arg10, arg11, arg12);\nvar v1 = \"EVEN\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 3;\nvar arg22 = 1;\nvar x2 = checkLast(arg20, arg21, arg22);\nvar v2 = \"ODD\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let sum = 0;\n    let i = p - 1;\n    for (let j = 0; j < n; j++) {\n        sum = sum + arr[j];\n        if (i === 0) {\n            if (sum % 2 === 0) {\n                return true;\n            }\n        } else {\n            if (sum % 2 === 0) {\n                return true;\n            }\n        }\n        i--;\n    }\n    return false;\n}\n", "\n    for (let i = 0; i < p; i++) {\n        arr.pop();\n    }\n    if (arr.length < 1 || arr[arr.length - 1] % 2 === 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "\n    for (let i = 1; i <= p; i++) {\n        arr.push(arr.pop() + arr.pop());\n    }\n    if (arr.pop() % 2 === 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "\n    let temp = arr.pop();\n    if (temp % 2 === 0) {\n        arr.push(temp);\n    } else {\n        arr.push(temp);\n        arr.push(temp);\n    }\n    p %= arr.length;\n    let sum = 0;\n    while (arr.length > 0 && arr[arr.length - 1]!== temp && p > 0) {\n        sum += arr[arr.length - 1];\n        arr.pop();\n        p--;\n    }\n    return sum % 2 === 0? \"YES\" : \"NO\";\n}\n", "\n    let last = arr[n - 1];\n    arr.pop();\n    let op = 1;\n    if (last % 2!== 0) {\n        op = -1;\n    }\n    for (let i = 0; i < p; i++) {\n        arr.push(last * op);\n    }\n    return last;\n}\n"]}
{"task_id": "MBJSP/135", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction hexagonalNum(n) {\n/**\n * * Write a function to find the nth hexagonal number.\n */", "entry_point": "hexagonalNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = hexagonalNum(arg00);\nvar v0 = 190;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = hexagonalNum(arg10);\nvar v1 = 45;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = hexagonalNum(arg20);\nvar v2 = 91;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tif (n === 0) {\n\t\treturn 0;\n\t}\n\tif (n === 1) {\n\t\treturn 1;\n\t}\n\treturn (2 * n + 1) * (hexagonalNum(n - 1) - 1) / 2\n}\n", "\n\tif (n < 1) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\tif (n == 2) {\n\t\treturn 1;\n\t}\n\treturn hexagonalNum(n - 1) + hexagonalNum(n - 2) * 2\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\tif (n < 1) {\n\t\treturn 0;\n\t}\n\treturn (3 * n - 1) * (3 * n - 1) / 2;\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1) {\n\t\treturn 2;\n\t}\n\treturn n * (3 * n - 1) / 2\n}\n"]}
{"task_id": "MBJSP/136", "prompt": "function discriminantValue(x, y, z) {\n/**\n * * Write a function to calculate the discriminant value.\n */\n    discriminant = (y ** 2) - (4 * x * z);\n    if (discriminant > 0) {\n        return [\"Two solutions\", discriminant];\n    } else if (discriminant == 0) {\n        return [\"one solution\", discriminant];\n    } else if (discriminant < 0) {\n        return [\"no real solution\", discriminant];\n    }\n}\nfunction sdCalc(data) {\n/**\n * * Write a function to calculate the standard deviation.\n */\n  const mean = data.reduce((acc, cur) => acc + cur, 0) / data.length;\n  const diff = data.map(x => x - mean);\n  const sqDiff = diff.map(x => x * x);\n  const sumSq = sqDiff.reduce((acc, cur) => acc + cur, 0);\n  const sd = Math.sqrt(sumSq / (data.length - 1));\n  return sd;\n}\nfunction windChill(v, t) {\n/**\n * * Write a function to calculate wind chill index.\n */\n  \"use strict\";\n  var windchill = 13.12 + 0.6215 * t - 11.37 * Math.pow(v, 0.16) + 0.3965 * t * Math.pow(v, 0.16);\n  return Math.round(windchill);\n}\nfunction calElectbill(units) {\n/**\n * * Write a function to calculate electricity bill.\n */", "entry_point": "calElectbill", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 75;\nvar x0 = calElectbill(arg00);\nvar v0 = 246.25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 265;\nvar x1 = calElectbill(arg10);\nvar v1 = 1442.75;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = calElectbill(arg20);\nvar v2 = 327.5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  \"use strict\";\n  if (units == \"kWh\") {\n    var totalElectricity = 300;\n  } else if (units == \"mWh\") {\n    var totalElectricity = 1.25;\n  }\n  return Math.round(totalElectricity);\n}\n", "\n  \"use strict\";\n  var ws = units.ws, wsp = units.wsp, charge = 0, val = units.val;\n  if (ws >= 0 && ws < 6) {\n    charge = val * wsp;\n    charge = Math.floor(charge);\n  } else if (ws >= 6 && ws < 12) {\n    charge = val * wsp;\n    charge = (charge + (val * 10)) / 10;\n  } else if (ws >= 12 && ws < 18) {\n    charge = val * wsp;\n    charge = (charge + (val * 15)) / 15;\n  } else if (ws >= 18 && ws < 24) {\n    charge = val * wsp;\n    charge = (charge + (val * 20)) / 20;\n  } else {\n    charge = val * wsp;\n    charge = (charge + (val * 25)) / 25;\n  }\n  charge = Math.floor(charge * 10) / 10;\n  return charge;\n}\n", "\n  \"use strict\";\n  var val = 0;\n  var val2 = 0;\n  var val3 = 0;\n  var val4 = 0;\n  var val5 = 0;\n  var val6 = 0;\n  var val7 = 0;\n  var val8 = 0;\n  var val9 = 0;\n  var val10 = 0;\n  var val11 = 0;\n  var val12 = 0;\n  var val13 = 0;\n  var val14 = 0;\n  var val15 = 0;\n  var val16 = 0;\n  var val17 = 0;\n  var val18 = 0;\n  var val19 = 0;\n  var val20 = 0;\n  var val21 = 0;\n  var val22 = 0;\n  var val23 = 0;\n  var val24 = 0;\n  var val25 = 0;\n  var val26 = 0;\n  var val27 = 0;\n  var val28 = 0;\n  var val29 = 0;\n  var val30 = 0;\n  var val31 = 0;\n  var val32 = 0;\n  var val33 = 0;\n  var val34 = 0;\n  var val35 = 0;\n  var val36 = 0;\n  var val37 = 0;\n  var val38 = 0;\n  var val39 = 0;\n  var val40 = 0;\n  var val41 = 0;\n  var val42 = 0;\n  var val43 = 0;\n  var val44 = 0;\n  var val45 = 0;\n  var val46 = 0;\n  var val47 = 0;\n  var val48 = 0;\n  var val49 = 0;\n  var", "\n  \"use strict\";\n  var mls = 1;\n  var elec = {};\n  var elecAmt = {};\n  elecAmt[units] = {};\n  elecAmt[units][\"MWh\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"][\"With Electric\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"][\"With Gas\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"][\"With Water\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"][\"With Water and Electricity\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"][\"With Water and Gas\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"][\"With Electricity and Gas\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"][\"With Water and Water and Electricity\"] = {};\n  elecAmt[units][\"MWh\"][\"Cost\"][\"Total\"][\"Local\"][\"", "\n  \"use strict\";\n  const bill = [\n        {\"currency\": \"\u00a3\", \"amount\": \"0.00\"},\n        {\"currency\": \"GHS\", \"amount\": \"0.00\"},\n        {\"currency\": \"GBP\", \"amount\": \"0.00\"},\n        {\"currency\": \"Yen\", \"amount\": \"0.00\"},\n        {\"currency\": \"Rub\", \"amount\": \"0.00\"},\n        {\"currency\": \"\u0394\", \"amount\": \"0.00\"},\n        {\"currency\": \"ML\", \"amount\": \"0.00\"},\n        {\"currency\": \"CHF\", \"amount\": \"0.00\"}\n    ];\n  switch (units) {\n    case \"Dollars\":\n    case \"Dollars.Cents\":\n      bill[3][\"amount\"] = \"0.00\";\n      bill[4][\"amount\"] = \"0.00\";\n      bill[5][\"amount\"] = \"0.00\";\n      bill[6][\"amount\"] = \"0.00\";\n      bill[7][\"amount\"] = \"0.00\";\n      bill[8][\"amount\"] = \"0.00\";\n      break;\n    case \"GHS\":\n      bill[3][\"amount\"] = \"0.00\";\n      bill[4][\"amount\"] = \"0.00\";\n      bill[5][\"amount\"] = \"0.00\";\n      bill[6][\"amount\"] = \"0.00\";\n      break;\n    case \"Yen\":\n      bill[3][\"amount\"] = \"0.00\";\n      bill[4][\"amount\"] = \"0.00\";\n      bill[5][\"amount\"] = \"0.00\";\n      break;\n    case \"Rub"]}
{"task_id": "MBJSP/137", "prompt": "function removezeroIp(ip) {\n/**\n * * Write a function to remove leading zeroes from an ip address.\n */\n  return ip.split('.').map(function(n) {\n    return n.replace(/^0+/, '');\n  }).join('.');\n}\nfunction maxProduct(arr) {\n/**\n * * Write a function to find a pair with the highest product from a given array of integers.\n */\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}\nfunction negativeCount(nums) {\n/**\n * * Write a function to find the ration of negative numbers in an array of integers.\n */\n  const negatives = nums.filter(num => num < 0);\n  const total = negatives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\nfunction zeroCount(nums) {\n/**\n * * Write a function to find the ration of zeroes in an array of integers.\n */", "entry_point": "zeroCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nvar x0 = zeroCount(arg00);\nvar v0 = 0.15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nvar x1 = zeroCount(arg10);\nvar v1 = 0.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x2 = zeroCount(arg20);\nvar v2 = 0.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const zeroes = nums.filter(num => num === 0);\n  const total = zeroes.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n", "\n  const zeroes = nums.filter(num => num === 0);\n  const total = zeroes.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n", "\n  const zeroes = nums.filter(num => num === 0);\n  const total = zeroes.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n", "\n  const zeroes = nums.filter(num => num === 0);\n  const total = zeroes.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n", "\n  const zero = nums.filter(num => num === 0);\n  const total = zero.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n"]}
{"task_id": "MBJSP/138", "prompt": "function sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction check(arr, n) {\n/**\n * * Write a JavaScript function to check whether an array can be sorted or not by picking only the corner elements.\n */\n    if (arr.length === 0) return true;\n    if (arr.length === 1) return arr[0] <= n;\n    if (arr[0] > n) return false;\n    if (arr[arr.length - 1] > n) return false;\n    return check(arr.slice(1, arr.length - 1), n) || check(arr.slice(0, arr.length - 1), n);\n}\nfunction sumSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented by sum of two squares or not.\n */\n    let square = Math.sqrt(n);\n    return square * square === n;\n}\nfunction isSumOfPowersOfTwo(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n */", "entry_point": "isSumOfPowersOfTwo", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = isSumOfPowersOfTwo(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = isSumOfPowersOfTwo(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 14;\nvar x2 = isSumOfPowersOfTwo(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let power = 0;\n    while (n % 2 == 0) {\n        n /= 2;\n        power++;\n    }\n    return power >= 2 && n == 1;\n}\n", "\n    let power = Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n    return n === power || n === power - 1;\n}\n", "\n    let power = Math.pow(2, n);\n    return power - 1 === n;\n}\n", "\n    let a = n % 2 === 1;\n    let b = Math.sqrt(n) % 2 === 1;\n    return a && b;\n}\n", "\n    let power = Math.pow(2, n);\n    return power - Math.round(power) === 0;\n}\n"]}
{"task_id": "MBJSP/139", "prompt": "function stringLength(str1) {\n/**\n * * Write a function to find length of the string.\n */\n    return str1.length;\n}\nfunction longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction circleCircumference(r) {\n/**\n * * Write a function to find the circumference of a circle.\n */", "entry_point": "circleCircumference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = circleCircumference(arg00);\nvar v0 = 62.830000000000005;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = circleCircumference(arg10);\nvar v1 = 31.415000000000003;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = circleCircumference(arg20);\nvar v2 = 25.132;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const radian = Math.PI / 180;\n  return 2 * r * radian;\n}\n", "\n  return Math.PI * r * 2;\n}\n", "\n  return Math.PI * (r * 2);\n}\n", "\n  return 2 * Math.PI * r;\n}\n", "\n  let constant = (4 * Math.PI) / (r * r);\n  let cosVal = Math.cos(2 * Math.PI / r);\n  let sqrtOfR = Math.sqrt(r * r - cosVal * cosVal);\n  constant *= (2 + sqrtOfR);\n  return constant;\n}\n"]}
{"task_id": "MBJSP/140", "prompt": "function cummulativeSum(testlist) {\n/**\n * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      sum += testList[i][j];\n    }\n  }\n  return sum;\n}\nfunction groupElement(testlist) {\n/**\n * * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n */\n  const result = {};\n  for (let i = 0; i < testList.length; i++) {\n    const [first, second] = testList[i];\n    if (result[second]) {\n      result[second].push(first);\n    } else {\n      result[second] = [first];\n    }\n  }\n  return result;\n}\nfunction sumElements(testtup) {\n/**\n * * Write a function to find the summation of tuple elements in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    sum += testTup[i];\n  }\n  return sum;\n}\nfunction extractSingly(testlist) {\n/**\n * * Write a function to extract elements that occur singly in the given tuple list.\n */", "entry_point": "extractSingly", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4, 5], [4, 5, 7], [1, 4]];\nvar x0 = extractSingly(arg00);\nvar v0 = [3, 4, 5, 7, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 2, 3], [7, 8]];\nvar x1 = extractSingly(arg10);\nvar v1 = [1, 2, 3, 4, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 8, 9], [10, 11, 12], [10, 11]];\nvar x2 = extractSingly(arg20);\nvar v2 = [7, 8, 9, 10, 11, 12];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    let element = testlist[i][0];\n    if (result.indexOf(element) === -1) {\n      result.push(element);\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = 0; j < testlist[i].length; j++) {\n      if (result.indexOf(testlist[i][j]) == -1) {\n        result.push(testlist[i][j]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = 0; j < testlist[i].length; j++) {\n      if (testlist[i][j] > 1) {\n        result.push(testlist[i][j]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  return testlist.filter((e) => e.length === 1);\n}\n", "\n  let result = [];\n  for (let i = 0; i < testList.length; i++) {\n    let first = testList[i][0];\n    if (result.indexOf(first) < 0) {\n      result.push(first);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/141", "prompt": "function sortedModels(models) {\n/**\n * * Write a function to sort a list of dictionaries using lambda function.\n */\n  const sortedModels = models.sort((a, b) => a.color.localeCompare(b.color))\n  return sortedModels\n}\nfunction heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction radixSort(nums) {\n/**\n * * Write a function to sort a list of elements using radix sort.\n */\n  let max = Math.max(...nums);\n  let exp = 1;\n  while (max / exp > 0) {\n    let buckets = Array.from({ length: 10 }, () => []);\n    for (let i = 0; i < nums.length; i++) {\n      let digit = Math.floor(nums[i] / exp) % 10;\n      buckets[digit].push(nums[i]);\n    }\n    nums = [].concat(...buckets);\n    exp *= 10;\n  }\n  return nums;\n}\nfunction pancakeSort(nums) {\n/**\n * * Write a function to sort a list of elements using pancake sort.\n */", "entry_point": "pancakeSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [15, 79, 25, 38, 69];\nvar x0 = pancakeSort(arg00);\nvar v0 = [15, 25, 38, 69, 79];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [98, 12, 54, 36, 85];\nvar x1 = pancakeSort(arg10);\nvar v1 = [12, 36, 54, 85, 98];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [41, 42, 32, 12, 23];\nvar x2 = pancakeSort(arg20);\nvar v2 = [12, 23, 32, 41, 42];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let flips = 0;\n  let count = 0;\n  ", "\n  nums.reverse();\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] == nums[i + 1]) {\n      continue;\n    } else {\n      nums.splice(i, 1, nums[i]);\n      count++;\n    }\n  }\n  let end = nums.length - 1;\n  while (count > 0) {\n    let new = nums.splice(end, 1, nums[end]);\n    count--;\n    nums.splice(end - 1, 0, new);\n    end -= 1;\n  }\n  nums.reverse();\n  return nums;\n}\n", "\n  let i = 0;\n  while (i < nums.length) {\n    let max = nums[0];\n    let maxIndex = 0;\n    for (let j = 1; j < nums.length; j++) {\n      if (max < nums[j]) {\n        max = nums[j];\n        maxIndex = j;\n      }\n    }\n    if (maxIndex!== i) {\n      nums[maxIndex] = nums[i];\n      nums[i] = max;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return nums;\n}\n", "\n  let max = Math.max(...nums);\n  for (let i = nums.length; i > 0; i--) {\n    let bucket = nums.slice(0, i);\n    let swaps = 0;\n    for (let j = 0; j < bucket.length; j++) {\n      if (bucket[j] > bucket[j + 1]) {\n        swap(bucket[j], bucket[j + 1]);\n        swaps++;\n      }\n    }\n    if (swaps == 0) {\n      return nums;\n    }\n  }\n  return nums;\n}\n", "\n  for (let i = nums.length - 1; i >= 1; i--) {\n    let maxIndex = 0;\n    for (let j = 0; j < i; j++) {\n      if (nums[j] > nums[maxIndex]) {\n        maxIndex = j;\n      }\n    }\n    if (maxIndex!== i - 1) {\n      let temp = nums[i - 1];\n      nums[i - 1] = nums[maxIndex];\n      nums[maxIndex] = temp;\n      let len = nums.length;\n      for (let k = len - 1; k >= i; k--) {\n        if (nums[k] > nums[k - 1]) {\n          let temp = nums[k];\n          nums[k] = nums[k - 1];\n          nums[k - 1] = temp;\n        }\n      }\n    }\n  }\n  return nums;\n}\n"]}
{"task_id": "MBJSP/142", "prompt": "function countList(inputlist) {\n/**\n * * Write a JavaScript function to count the number of lists in a given number of lists.\n */\n    let count = 0;\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction extractIndexList(l1, l2, l3) {\n/**\n * * Write a function to find common index elements from three lists.\n */\n  let result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i] === l2[i] && l1[i] === l3[i]) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\nfunction countSamePair(nums1, nums2) {\n/**\n * * Write a function to count the same pair in two given lists using map function.\n */\n  return nums1\n    .map((n, idx) => [n, nums2[idx]])\n    .filter(([n1, n2]) => n1 === n2)\n    .length;\n}\nfunction countSamepair(list1, list2, list3) {\n/**\n * * Write a function to count the same pair in three given lists.\n */", "entry_point": "countSamepair", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8];\nvar arg01 = [2, 2, 3, 1, 2, 6, 7, 9];\nvar arg02 = [2, 1, 3, 1, 2, 6, 7, 9];\nvar x0 = countSamepair(arg00, arg01, arg02);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8];\nvar arg11 = [2, 2, 3, 1, 2, 6, 7, 8];\nvar arg12 = [2, 1, 3, 1, 2, 6, 7, 8];\nvar x1 = countSamepair(arg10, arg11, arg12);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 2, 6, 7, 8];\nvar arg21 = [2, 2, 3, 1, 2, 6, 7, 8];\nvar arg22 = [2, 1, 3, 1, 2, 6, 7, 8];\nvar x2 = countSamepair(arg20, arg21, arg22);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return countSamePair(list1, list2) + countSamePair(list2, list3) + countSamePair(list3, list1);\n}\n", "\n  return list1\n    .map((l1, idx) => [l1, list2[idx], list3[idx]])\n    .filter(([l1, l2, l3]) => l1 === l2 && l2 === l3)\n    .length;\n}\n", "\n  return countSamePair(list1, list2) + countSamePair(list2, list3) + countSamePair(list1, list3);\n}\n", "\n    let samepair = 0;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            for (let k = 0; k < list3.length; k++) {\n                if (list1[i] === list2[j] && list2[j] === list3[k]) {\n                    samepair++;\n                }\n            }\n        }\n    }\n    return samepair;\n}\n", "\n  return (list1\n    .filter((n, idx) => list2.includes(n) && list3.includes(n))\n    .length) + (list2\n    .filter((n, idx) => list1.includes(n) && list3.includes(n))\n    .length) + (list3\n    .filter((n, idx) => list1.includes(n) && list2.includes(n))\n    .length);\n}\n"]}
{"task_id": "MBJSP/143", "prompt": "function countList(inputlist) {\n/**\n * * Write a JavaScript function to count the number of lists in a given number of lists.\n */\n    let count = 0;\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction getUnique(testlist) {\n/**\n * * Write a function to count unique keys for each value present in the tuple.\n */\n  let unique = {};\n  for (let i = 0; i < testList.length; i++) {\n    let tuple = testList[i];\n    for (let j = 0; j < tuple.length; j++) {\n      let key = tuple[j];\n      if (unique[key] === undefined) {\n        unique[key] = 1;\n      } else {\n        unique[key]++;\n      }\n    }\n  }\n  return unique;\n}\nfunction countList(inputlist) {\n/**\n * * Write a function to count number of lists in a given list of lists and square the count.\n */\n  let count = 0;\n  for (let i = 0; i < inputList.length; i++) {\n    if (inputList[i].length > 0) {\n      count += 1;\n    }\n  }\n  return count * count;\n}\nfunction findLists(input) {\n/**\n * * Write a function to find number of lists present in the given tuple.\n */", "entry_point": "findLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 4], [5, 6, 7, 8]];\nvar x0 = findLists(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [9, 8, 7, 6, 5, 4, 3, 2, 1];\nvar x1 = findLists(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < input.length; i++) {\n    if (input[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  let testList = input;\n  for (let i = 0; i < testList.length; i++) {\n    if (testList[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < input.length; i++) {\n      if (input[i].length > 0) {\n        count += 1;\n      }\n    }\n    return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < input.length; i++) {\n    if (input[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < input.length; i++) {\n        for (let j = 0; j < input[i].length; j++) {\n            if (input[i][j].length > 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/144", "prompt": "function findSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of non-repeated elements in a given array.\n */\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        j--;\n      }\n    }\n    sum += arr[i];\n  }\n  return sum;\n}\nfunction pairOrSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of xor of all pairs of numbers in the given array.\n */\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += (arr[i] ^ arr[j]);\n        }\n    }\n    return sum;\n}\nfunction findMinSum(a, b, n) {\n/**\n * * Write a JavaScript function to find the minimum sum of absolute differences of two arrays.\n */\n    let first = a.sort((a, b) => a - b).slice(0, n)\n    let second = b.sort((a, b) => a - b).slice(0, n)\n    let sum = 0\n    for (let i = 0; i < first.length; i++) {\n        sum += Math.abs(first[i] - second[i])\n    }\n    return sum\n}\nfunction sumPairs(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of absolute differences in all pairs of the given array.\n */", "entry_point": "sumPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 8, 9, 15, 16];\nvar arg01 = 5;\nvar x0 = sumPairs(arg00, arg01);\nvar v0 = 74;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = 4;\nvar x1 = sumPairs(arg10, arg11);\nvar v1 = 10;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 7, 9, 11, 14];\nvar arg21 = 9;\nvar x2 = sumPairs(arg20, arg21);\nvar v2 = 188;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let sum = 0\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += Math.abs(arr[i] - arr[j])\n        }\n    }\n    return sum\n}\n", "\n  let first = arr.sort((a, b) => a - b)\n  let second = first.slice(0, n)\n  let sum = 0\n  for (let i = 0; i < second.length; i++) {\n    sum += Math.abs(second[i] - second[(i + 1) % second.length])\n  }\n  return sum\n}\n", "\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += Math.abs(arr[i] - arr[j]);\n        }\n    }\n    return sum\n}\n", "\n    let sum = 0\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            sum += Math.abs(arr[i] - arr[j])\n        }\n    }\n    return sum\n}\n", "\n    let sum = 0\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += Math.abs(arr[i] - arr[j])\n        }\n    }\n    return sum\n}\n"]}
{"task_id": "MBJSP/145", "prompt": "function bigDiff(nums) {\n/**\n * * Write a JavaScript function to find the difference between largest and smallest value in a given array.\n */\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return max - min;\n}\nfunction findDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the difference between highest and least frequencies in a given array.\n */\n  let count = {};\n  for (let i = 0; i < n; i++) {\n    let num = arr[i];\n    count[num] = (count[num] || 0) + 1;\n  }\n\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    if (count[arr[i]] > max) max = count[arr[i]];\n  }\n\n  let min = n;\n  for (let i = 0; i < n; i++) {\n    if (count[arr[i]] < min) min = count[arr[i]];\n  }\n\n  return max - min;\n}\nfunction findMinDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return minDiff;\n}\nfunction maxAbsDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */", "entry_point": "maxAbsDiff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 1, 5, 3];\nvar arg01 = 4;\nvar x0 = maxAbsDiff(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [9, 3, 2, 5, 1];\nvar arg11 = 5;\nvar x1 = maxAbsDiff(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 2, 1];\nvar arg21 = 3;\nvar x2 = maxAbsDiff(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let min = Math.min(...arr);\n  let max = Math.max(...arr);\n  return Math.abs(max - min);\n}\n", "\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            minDiff = Math.min(minDiff, diff);\n        }\n    }\n    return minDiff;\n}\n", "\n  let minDiff = Math.abs(arr[0] - arr[1]);\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let diff = Math.abs(arr[i] - arr[j]);\n      if (diff < minDiff) {\n        minDiff = diff;\n      }\n    }\n  }\n  return minDiff;\n}\n", "\n    let maxDiff = -Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff > maxDiff) {\n                maxDiff = diff;\n            }\n        }\n    }\n    return maxDiff;\n}\n", "\n    let maxDiff = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff > maxDiff) {\n                maxDiff = diff;\n            }\n        }\n    }\n    return maxDiff;\n}\n"]}
{"task_id": "MBJSP/146", "prompt": "function minSumPath(a) {\n/**\n * * Write a function to find the minimum total path sum in the given triangle.\n */\n  const n = a.length;\n  const dp = Array(n).fill(0);\n  dp[0] = a[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i] = Math.min(dp[i - 1] + a[i][0], dp[i - 1] + a[i][1]);\n  }\n  return dp[n - 1];\n}\nfunction toggleString(string) {\n/**\n * * Write a function to toggle characters case in a string.\n */\n  return string.split(\"\").map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join(\"\");\n}\nfunction maxRunUppercase(teststr) {\n/**\n * * Write a function to find maximum run of uppercase characters in the given string.\n */\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i] === testStr[i].toUpperCase()) {\n      current++;\n    } else {\n      current = 0;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\nfunction asciiValueString(str1) {\n/**\n * * Write a function to find the ascii value of total characters in a string.\n */", "entry_point": "asciiValueString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = asciiValueString(arg00);\nvar v0 = 112;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Program\";\nvar x1 = asciiValueString(arg10);\nvar v1 = 80;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Language\";\nvar x2 = asciiValueString(arg20);\nvar v2 = 76;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < str1.length; i++) {\n    current += str1.charCodeAt(i);\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\n", "\n  let total = 0;\n  for (let i = 0; i < str1.length; i++) {\n    total += str1[i];\n  }\n  return total;\n}\n", "\n  let total = 0;\n  let val = str1.toLowerCase().split(\"\");\n  for (let i = 0; i < val.length; i++) {\n    total += val[i].charCodeAt();\n  }\n  return total;\n}\n", "\n  const str = Array.from(str1.split(\"\")).map(c => {\n    return parseInt(c, 10);\n  }).reduce((a, b) => {\n    return a + b;\n  });\n  return str;\n}\n", "\n  let asciiValues = Array.from(str1.charCodeAt());\n  for (let i = str1.length; i > 0; i--) {\n    asciiValues.reverse();\n    let value = 0;\n    for (let j = 0; j < asciiValues.length; j++) {\n      value += asciiValues[j];\n    }\n    asciiValues.reverse();\n    if (value === str1.length) {\n      break;\n    }\n  }\n  return String.fromCharCode(asciiValues[0]);\n}\n"]}
{"task_id": "MBJSP/147", "prompt": "function maxSumIncreasingSubsequence(arr, n) {\n/**\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n */\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\nfunction maxaverageofpath(cost, n) {\n/**\n * * Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n */\n\tlet dp = [];\n\tfor (let i = 0; i <= n; i++) {\n\t\tdp.push([]);\n\t\tfor (let j = 0; j <= n; j++) {\n\t\t\tdp[i][j] = 0;\n\t\t}\n\t}\n\n\tfor (let i = 1; i <= n; i++) {\n\t\tfor (let j = 1; j <= n; j++) {\n\t\t\tdp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i - 1][j - 1];\n\t\t}\n\t}\n\n\treturn dp[n][n] / (2 * n - 1);\n}\nfunction minSumPath(a) {\n/**\n * * Write a function to find the minimum total path sum in the given triangle.\n */\n  const n = a.length;\n  const dp = Array(n).fill(0);\n  dp[0] = a[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i] = Math.min(dp[i - 1] + a[i][0], dp[i - 1] + a[i][1]);\n  }\n  return dp[n - 1];\n}\nfunction maxPathSum(tri, m, n) {\n/**\n * * Write a function to find the maximum total path sum in the given triangle.\n */", "entry_point": "maxPathSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 0, 0], [4, 8, 0], [1, 5, 3]];\nvar arg01 = 2;\nvar arg02 = 2;\nvar x0 = maxPathSum(arg00, arg01, arg02);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[13, 0, 0], [7, 4, 0], [2, 4, 6]];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = maxPathSum(arg10, arg11, arg12);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 0, 0], [11, 18, 0], [21, 25, 33]];\nvar arg21 = 2;\nvar arg22 = 2;\nvar x2 = maxPathSum(arg20, arg21, arg22);\nvar v2 = 53;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let dp = new Array(m).fill(0);\n  dp[0] = tri[0][0];\n  for (let i = 1; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (j > 0) {\n        dp[i] = Math.max(dp[i], dp[i - 1] + tri[i][j]);\n      } else {\n        dp[i] = dp[i - 1] + tri[i][j];\n      }\n    }\n  }\n  return dp[m - 1];\n}\n", "\n  let dp = Array(m + 1).fill(0);\n  for (let i = 0; i <= m; i++) {\n    dp[i] = Array(n + 1).fill(0);\n  }\n\n  for (let i = m; i >= 0; i--) {\n    for (let j = n; j >= 0; j--) {\n      dp[i][j] = Math.max(dp[i + 1][j], dp[i + 1][j + 1]) + tri[i][j];\n    }\n  }\n\n  return dp[0][0];\n}\n", "\n  let dp = Array(m).fill(0);\n  for (let i = 0; i < m; i++) {\n    dp[i] = tri[i][n - 1] + a[i][n - 1];\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = 0; j < m; j++) {\n      dp[j] = Math.max(dp[j], dp[j + 1]) + tri[i][j];\n    }\n  }\n  return dp[0];\n}\n", "\n  if (m == 0 && n == 0) {\n    return 0;\n  }\n  let dp = Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    dp[i] = tri[m - 1][i];\n  }\n  for (let i = m - 2; i >= 0; i--) {\n    for (let j = 0; j < n; j++) {\n      dp[j] = Math.max(dp[j], dp[j + 1]);\n      dp[j] = Math.max(dp[j], dp[j] + tri[i][j]);\n    }\n  }\n  return dp[0];\n}\n", "\n  if (m == n - 1) {\n    return tri[m][n];\n  }\n  let res = -Infinity;\n  for (let i = n - 1; i > m; i--) {\n    res = Math.max(res, tri[m][i]);\n  }\n  return res + maxPathSum(tri, m + 1, n);\n}\n"]}
{"task_id": "MBJSP/148", "prompt": "function findMaxVal(n, x, y) {\n/**\n * * Write a function to find the largest possible value of k such that k modulo x is y.\n */\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % x === y) {\n      max = i;\n    }\n  }\n  return max;\n}\nfunction removals(arr, n, k) {\n/**\n * * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n */\n  let amin = 0;\n  let amax = arr.length - 1;\n  let count = 0;\n  while (amin <= amax) {\n    let mid = Math.floor((amin + amax) / 2);\n    if (arr[mid] < n) {\n      amin = mid + 1;\n    } else if (arr[mid] > n) {\n      amax = mid - 1;\n    } else {\n      count++;\n      if (mid - 1 >= 0 && arr[mid - 1] > n) {\n        amin = mid - 1;\n      } else if (mid + 1 < arr.length && arr[mid + 1] < n) {\n        amax = mid + 1;\n      } else {\n        amin = mid + 1;\n      }\n    }\n  }\nfunction minNum(arr, n) {\n/**\n * * Write a JavaScript function to add a minimum number such that the sum of array becomes even.\n */\n    odd = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] % 2) {\n            odd += 1;\n        }\n    }\n    if (odd % 2) {\n        return 1;\n    }\n    return 2;\n}\nfunction sumDigitsTwoparts(n) {\n/**\n * * Write a function to divide a number into two parts such that the sum of digits is maximum.\n */", "entry_point": "sumDigitsTwoparts", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 35;\nvar x0 = sumDigitsTwoparts(arg00);\nvar v0 = 17;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = sumDigitsTwoparts(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = sumDigitsTwoparts(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let arr = [];\n    for (let i = n; i > 0; i = i / 10) {\n        arr.push(i % 10);\n    }\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        count += arr[i];\n    }\n    return count;\n}\n", "\n  let sum = 0;\n  let a = n;\n  let b = 0;\n  while (n > 0) {\n    let d = n % 10;\n    sum += d;\n    n = n / 10;\n  }\n  if (sum < a) {\n    a = sum;\n  }\n  if (sum > b) {\n    b = sum;\n  }\n  return b - a;\n}\n", "\n  let res = 0;\n  while (n) {\n    let currentDigit = n % 10;\n    res += currentDigit;\n    n /= 10;\n  }\n  return res;\n}\n", "\n    let s = 0;\n    for (let i = n; i >= 1; i--) {\n        s += i;\n    }\n    let count = 0;\n    let arr = [];\n    while (s > 0) {\n        arr[count] = s % 10;\n        s = s / 10;\n        count++;\n    }\n    let c = 0;\n    let min = Math.min(arr[c], arr[c + 1]);\n    let max = Math.max(arr[c], arr[c + 1]);\n    return arr;\n}\n", "\n  let sum = 0;\n  let div = 0;\n  for (let i = 0; i <= n; i++) {\n    sum += Math.floor(Math.log10(n + 1) + 1) + 1;\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/149", "prompt": "function findLongestConseqSubseq(arr, n) {\n/**\n * * Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n */\n\tlet ans = 0\n\tlet count = 0\n\tarr.sort((a,b)=>a-b)\n\tv = []\n\tv.push(arr[0])\n\tfor (let i = 1; i < n; i++) {\n\t\tif (arr[i] != arr[i - 1]) {\n\t\t\tv.push(arr[i])\n\t\t}\n\t}\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif (i > 0 && v[i] == v[i - 1] + 1) {\n\t\t\tcount += 1\n\t\t} else {\n\t\t\tcount = 1\n\t\t}\n\t\tans = Math.max(ans, count)\n\t}\n\treturn ans\n}\nfunction lcsOfThree(x, y, z, m, n, o) {\n/**\n * * Write a function to find the longest common subsequence for the given three string sequence.\n */\n    if (x.length === 0 || y.length === 0 || z.length === 0) return 0;\n    if (x[0] === y[0] && x[0] === z[0]) return 1 + lcsOfThree(x.substring(1), y.substring(1), z.substring(1), m, n, o);\n    const a = lcsOfThree(x.substring(1), y, z, m, n, o);\n    const b = lcsOfThree(x, y.substring(1), z, m, n, o);\n    const c = lcsOfThree(x, y, z.substring(1), m, n, o);\n    return a > b && a > c ? a : b > c ? b : c;\n}\nfunction lbs(arr) {\n/**\n * * Write a function to find the longest bitonic subsequence for the given array.\n */\n    var n = arr.length,\n        lis = Array(n).fill(1),\n        lds = Array(n).fill(1),\n        max = 0;\n\n    for (var i = 1; i < n; i++) {\n        for (var j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n            if (arr[i] < arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n        max = Math.max(max, lis[i] + lds[i] - 1);\n    }\n    return max;\n}\nfunction longestSubseqWithDiffOne(arr, n) {\n/**\n * * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n */", "entry_point": "longestSubseqWithDiffOne", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 3, 2];\nvar arg01 = 7;\nvar x0 = longestSubseqWithDiffOne(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 9, 4, 5, 4, 8, 6];\nvar arg11 = 7;\nvar x1 = longestSubseqWithDiffOne(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 2, 3, 7, 2, 1];\nvar arg21 = 8;\nvar x2 = longestSubseqWithDiffOne(arg20, arg21);\nvar v2 = 7;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    if (arr.length === 0) return 0;\n    const ans = []\n    var lis = []\n    var lds = []\n    var max = 0;\n    arr.sort((a, b) => a - b);\n    lis.push(arr[0])\n    for (var i = 1; i < n; i++) {\n        if (arr[i] - arr[i - 1] === 1) {\n            lis.push(arr[i])\n        } else {\n            lis.pop()\n            lis.push(arr[i])\n        }\n    }\n    lds.push(arr[n - 1])\n    for (var i = n - 2; i >= 0; i--) {\n        if (arr[i] - arr[i + 1] === 1) {\n            lds.push(arr[i])\n        } else {\n            lds.pop()\n            lds.push(arr[i])\n        }\n    }\n    var index = 0\n    while (index < lis.length) {\n        var val = lis[index] + lds[index] - 1\n        var l = lis[index] - 1\n        while (l >= 0) {\n            if (val == lis[l] + lds[l]) {\n                lis[index] = lis[l]\n                lds[index] = lds[l]\n                lis.splice(l, 1)\n                lds.splice(l, 1)\n                break;\n            }\n            l -= 1;\n        }\n        index += 1;\n    }\n    for (var i = 0; i", "\n\tlet ans = 0\n\tlet count = 0\n\tarr.sort(", "\n    const dp = new Array(n).fill(0)\n    dp[0] = 1\n    for (var i = 1; i < n; i++) {\n        for (var j = 0; j < i; j++) {\n            if (arr[i] - arr[j] === 1 && dp[j] > 0) {\n                dp[i] = dp[j] + 1\n            }\n        }\n    }\n    return dp[n - 1];\n}\n", "\n    var ans = 0,\n        l, r, m, count, max = 0;\n\n    for (var i = 0; i < n; i++) {\n        l = i - 1;\n        r = i + 1;\n        while (l >= 0 && arr[l] - arr[i] === 1) l--;\n        while (r < n && arr[r] - arr[i] === 1) r++;\n        count = r - l - 1;\n        m = arr[l] + arr[r] - arr[i];\n        if (m > ans) {\n            ans = m;\n            max = count;\n        }\n    }\n    return max;\n}\n", "\n    var ans = 0,\n        count = 0;\n    arr.sort((a, b) => a - b);\n    var i = 0;\n    while (i < n - 1) {\n        if (arr[i + 1] - arr[i] === 1) {\n            count++;\n        } else {\n            count = 0;\n        }\n        ans = Math.max(ans, count);\n        i++;\n    }\n    return ans;\n}\n"]}
{"task_id": "MBJSP/150", "prompt": "function seqLinear(seqnums) {\n/**\n * * Write a JavaScript function to check whether a given sequence is linear or not.\n */\n    let len = seqNums.length\n    for(let i = 0; i < len - 1; i++) {\n        if(seqNums[i] > seqNums[i + 1]) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}\nfunction isKeyPresent(d, x) {\n/**\n * * Write a function to check whether the given key is present in the dictionary or not.\n */\n    return d.hasOwnProperty(x);\n}\nfunction isWordPresent(sentence, word) {\n/**\n * * Write a JavaScript function to check whether the word is present in a given sentence or not.\n */\n    return sentence.split(\" \").includes(word);\n}\nfunction doesContainB(a, b, c) {\n/**\n * * Write a JavaScript function to find whether the given number is present in the infinite sequence or not.\n */", "entry_point": "doesContainB", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 7;\nvar arg02 = 3;\nvar x0 = doesContainB(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = -3;\nvar arg12 = 5;\nvar x1 = doesContainB(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 2;\nvar arg22 = 5;\nvar x2 = doesContainB(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let len = a.length\n    for(let i = 0; i < len - 1; i++) {\n        if(a[i] === b && a[i + 1] === c) {\n            return true\n        }\n    }\n    return false;\n}\n", "\n    if(a < b) {\n        return (a <= c)\n    }\n    else {\n        return (a >= c)\n    }\n}\n", "\n    return a.indexOf(b) > -1 && a.indexOf(c) > -1;\n}\n", "\n    return a.includes(b) && a.includes(c);\n}\n", "\n    let n = a;\n    for(let i = 0; i < c; i++) {\n        n += b;\n    }\n    return n == a;\n}\n"]}
{"task_id": "MBJSP/151", "prompt": "function seqLinear(seqnums) {\n/**\n * * Write a JavaScript function to check whether a given sequence is linear or not.\n */\n    let len = seqNums.length\n    for(let i = 0; i < len - 1; i++) {\n        if(seqNums[i] > seqNums[i + 1]) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}\nfunction isPerfectSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number is a perfect square or not.\n */\n    if (n < 0) {\n        return false;\n    }\n    let sqrt = Math.sqrt(n);\n    return sqrt === Math.floor(sqrt);\n}\nfunction armstrongNumber(number) {\n/**\n * * Write a function to check whether the given number is armstrong or not.\n */\n  let num = number;\n  let sum = 0;\n  while (num > 0) {\n    let rem = num % 10;\n    sum += rem ** 3;\n    num = Math.floor(num / 10);\n  }\n  return sum === number;\n}\nfunction isCoprime(x, y) {\n/**\n * * Write a JavaScript function to check whether the given number is co-prime or not.\n */", "entry_point": "isCoprime", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 17;\nvar arg01 = 13;\nvar x0 = isCoprime(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 21;\nvar x1 = isCoprime(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 25;\nvar arg21 = 45;\nvar x2 = isCoprime(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let gcd = gcd(x, y);\n  if (gcd === 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  let gcd = Math.gcd(x, y);\n  let x_2 = x ** 2;\n  let y_2 = y ** 2;\n  let sum = x_2 + y_2;\n  return gcd === 1 && sum % 2 === 0;\n}\n", "\n    let rem = x % y;\n    return rem === 0 || y === 1? true : false;\n}\n", "\n    let coprime = Math.gcd(x, y);\n    return coprime === 1;\n}\n", "\n  let gcd = Math.gcd(x, y);\n  return gcd === 1;\n}\n\n"]}
{"task_id": "MBJSP/152", "prompt": "function sortByDnf(arr, n) {\n/**\n * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n */\n  const count = new Array(n).fill(0);\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    count[arr[i]]++;\n  }\n  for (let i = 0; i < n; i++) {\n    while (count[i] > 0) {\n      result.push(i);\n      count[i]--;\n    }\n  }\n  return result;\n}\nfunction radixSort(nums) {\n/**\n * * Write a function to sort a list of elements using radix sort.\n */\n  let max = Math.max(...nums);\n  let exp = 1;\n  while (max / exp > 0) {\n    let buckets = Array.from({ length: 10 }, () => []);\n    for (let i = 0; i < nums.length; i++) {\n      let digit = Math.floor(nums[i] / exp) % 10;\n      buckets[digit].push(nums[i]);\n    }\n    nums = [].concat(...buckets);\n    exp *= 10;\n  }\n  return nums;\n}\nfunction heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction mergeSort(x) {\n/**\n * * Write a function to sort the given array by using merge sort.\n */", "entry_point": "mergeSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 4, 2, 6, 5, 7, 1, 9];\nvar x0 = mergeSort(arg00);\nvar v0 = [1, 2, 3, 4, 5, 6, 7, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 25, 45, 78, 11, 33, 19];\nvar x1 = mergeSort(arg10);\nvar v1 = [7, 11, 19, 25, 33, 45, 78];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 1, 4, 9, 8];\nvar x2 = mergeSort(arg20);\nvar v2 = [1, 3, 4, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return x.sort((a, b) => a - b);\n}\n", "\n  return mergeSortIterative(x);\n}\n", "\n  if (x.length < 2) {\n    return x;\n  }\n  const mid = x.length / 2;\n  const left = mergeSort(x.slice(0, mid));\n  const right = mergeSort(x.slice(mid));\n  return merge(left, right);\n}\n", "\n  return x.sort((a, b) => a - b);\n}\n", "\n  "]}
{"task_id": "MBJSP/153", "prompt": "function stringLength(str1) {\n/**\n * * Write a function to find length of the string.\n */\n    return str1.length;\n}\nfunction longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction parabolaVertex(a, b, c) {\n/**\n * * Write a function to find the vertex of a parabola.\n */", "entry_point": "parabolaVertex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaVertex(arg00, arg01, arg02);\nvar v0 = [-0.3, 1.55];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaVertex(arg10, arg11, arg12);\nvar v1 = [-0.4444444444444444, 2.2222222222222223];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaVertex(arg20, arg21, arg22);\nvar v2 = [-1.0, 4.0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const x = -b / (2 * a);\n  const y = Math.sqrt((a * a) - (b * b) / (4 * c * c));\n  return { x, y };\n}\n", "\n  let x = 0;\n  let y = 0;\n  const discriminant = (b * b) - (4 * a * c);\n  if (discriminant < 0) return null;\n  const sqrt = Math.sqrt(discriminant);\n  x = -(b + (sqrt)) / (2 * a);\n  y = Math.pow(x, 2) + c;\n  return { x, y };\n}\n", "\n  return (-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n}\n", "\n  const k = a * b / 4 - c;\n  const x = -1 / 2 * (b + Math.sqrt(k)) / a;\n  const y = -1 / 2 * (b - Math.sqrt(k)) / a;\n  return [x, y];\n}\n", "\n  const d = b * b - 4 * a * c;\n  if (d < 0) return 'No Vertex';\n  const x1 = (-b + Math.sqrt(d)) / (2 * a);\n  const x2 = (-b - Math.sqrt(d)) / (2 * a);\n  return 'Vertices are'+ x1 +'and'+ x2;\n}\n"]}
{"task_id": "MBJSP/154", "prompt": "function findKth(arr1, arr2, m, n, k) {\n/**\n * * Write a function to find kth element from the given two sorted arrays.\n */\n\tvar sorted1 = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar d = 0;\n\twhile (i < m && j < n) {\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tsorted1[d] = arr1[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tsorted1[d] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\td++;\n\t}\n\n\twhile (i < m) {\n\t\tsorted1[d] = arr1[i];\n\t\ti++;\n\t\td++;\n\t}\n\n\twhile (j < n) {\n\t\tsorted1[d] = arr2[j];\n\t\tj++;\n\t\td++;\n\t}\n\n\treturn sorted1[k - 1];\n}\nfunction extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction extractColumn(list1, n) {\n/**\n * * Write a function to extract a specified column from a given nested list.\n */\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i][n]);\n  }\n  return result;\n}\nfunction specifiedElement(nums, n) {\n/**\n * * Write a function to extract every specified element from a given two dimensional list.\n */", "entry_point": "specifiedElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg01 = 0;\nvar x0 = specifiedElement(arg00, arg01);\nvar v0 = [1, 4, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg11 = 2;\nvar x1 = specifiedElement(arg10, arg11);\nvar v1 = [3, 6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg21 = 3;\nvar x2 = specifiedElement(arg20, arg21);\nvar v2 = [2, 2, 5];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums[i].length; j++) {\n      if (nums[i][j] === n) {\n        result.push({ i, j });\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums[i].length; j++) {\n      result.push(nums[i][j]);\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  let result = [];\n  let counter = {};\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums[0].length; j++) {\n      counter[nums[i][j]] = counter[nums[i][j]] + 1 || 1;\n      if (counter[nums[i][j]] === n) {\n        result.push(nums[i][j]);\n        counter[nums[i][j]] = 0;\n      }\n    }\n  }\n  return result;\n}\n", "\n\tconst arr = [];\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tif (nums[i][0] === n) {\n\t\t\tarr.push(nums[i][1]);\n\t\t}\n\t}\n\treturn arr;\n}\n", "\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    result.push(nums[i][n]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/155", "prompt": "function leftRotate(n, d) {\n/**\n * * Write a JavaScript function to left rotate the bits of a given number.\n */\n  return (n << d) | (n >>> (32 - d));\n}\nfunction toggleMiddleBits(n) {\n/**\n * * Write a JavaScript function to toggle bits of the number except the first and the last bit.\n */\n  var set_middle_bits = function(n){\n      n |= n >> 1; \n      n |= n >> 2; \n      n |= n >> 4; \n      n |= n >> 8; \n      n |= n >> 16;  \n      return (n >> 1) ^ 1\n  }\n  return n ^ set_middle_bits(n) \n}\nfunction toggleFAndLBits(n) {\n/**\n * * Write a JavaScript function to toggle only first and last bits of a given number.\n */\n    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1;\n}\nfunction evenBitToggleNumber(n) {\n/**\n * * Write a JavaScript function to toggle all even bits of a given number.\n */", "entry_point": "evenBitToggleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitToggleNumber(arg00);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitToggleNumber(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitToggleNumber(arg20);\nvar v2 = 20;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  var toggle_even_bits = ", "\n    return n & ~(n+1);\n}\n", "\n  var toggle_even_bits = ", "\n  if(n == 0) {\n    return n;\n  }\n  var even_bits_left = n & (n - 1);\n  var even_bits_right = n & (n >> 1);\n  return even_bits_left ^ even_bits_right;\n}\n", "\n  var set_even_bits = "]}
{"task_id": "MBJSP/156", "prompt": "function extractUnique(testdict) {\n/**\n * * Write a function to extract unique values from the given dictionary values.\n */\n  const keys = Object.keys(testDict);\n  const vals = Object.values(testDict);\n  const uniqueVals = [];\n  vals.forEach((val) => {\n    val.forEach((v) => {\n      if (uniqueVals.indexOf(v) === -1) {\n        uniqueVals.push(v);\n      }\n    });\n  });\n  return uniqueVals.sort((a, b) => a - b);\n}\nfunction addStr(testtup, k) {\n/**\n * * Write a function to convert tuple into list by adding the given string after every element.\n */\n  let result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(testTup[i]);\n    result.push(k);\n  }\n  return result;\n}\nfunction tupleStrInt(teststr) {\n/**\n * * Write a function to convert tuple string to integer tuple.\n */\n  let strArr = testStr.match(/\\d+/g).map(Number);\n  return strArr;\n}\nfunction tupleIntStr(tuplestr) {\n/**\n * * Write a function to convert a tuple of string values to a tuple of integer values.\n */", "entry_point": "tupleIntStr", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"333\", \"33\"], [\"1416\", \"55\"]];\nvar x0 = tupleIntStr(arg00);\nvar v0 = [[333, 33], [1416, 55]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"999\", \"99\"], [\"1000\", \"500\"]];\nvar x1 = tupleIntStr(arg10);\nvar v1 = [[999, 99], [1000, 500]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"666\", \"66\"], [\"1500\", \"555\"]];\nvar x2 = tupleIntStr(arg20);\nvar v2 = [[666, 66], [1500, 555]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let strArr = tuplestr.map(t => t.match(/\\d+/g).map(Number));\n  return strArr;\n}\n", "\n  let strArr = [];\n  let tuplestrArr = tuplestr.match(/\\d+/g).map(Number);\n  let strArrArr = [];\n  for (let i = 0; i < tuplestrArr.length; i++) {\n    strArrArr.push(tuplestrArr[i]);\n  }\n  for (let i = 0; i < strArrArr.length; i++) {\n    strArr.push(strArrArr[i]);\n  }\n  return strArr;\n}\n", "\n  let strArr = [];\n  for (let i = 0; i < tuplestr.length; i++) {\n    strArr.push(tuplestr[i]);\n  }\n  return strArr.map(Number);\n}\n", "\n  const tupArr = tuplestr.match(/\\d+/g).map(Number);\n  return tupArr;\n}\n", "\n  let intArr = tuplestr.match(/\\d+/g).map(Number);\n  return intArr;\n}\n"]}
{"task_id": "MBJSP/157", "prompt": "function maxOfNth(testlist, n) {\n/**\n * * Write a function to find the maximum of nth column from the given tuple list.\n */\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    max = Math.max(max, testList[i][n]);\n  }\n  return max;\n}\nfunction removeKthElement(list1, l) {\n/**\n * * Write a JavaScript function to remove the k'th element from a given list.\n */\n  const list = [...list1];\n  const k = list.splice(l - 1, 1);\n  return list;\n}\nfunction largestPos(list1) {\n/**\n * * Write a JavaScript function to find the largest postive number from the given list.\n */\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0 && list1[i] > max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction encodeList(list1) {\n/**\n * * Write a function to reflect the run-length encoding from a list.\n */", "entry_point": "encodeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4.3, 5, 1];\nvar x0 = encodeList(arg00);\nvar v0 = [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"automatically\";\nvar x1 = encodeList(arg10);\nvar v1 = [[1, \"a\"], [1, \"u\"], [1, \"t\"], [1, \"o\"], [1, \"m\"], [1, \"a\"], [1, \"t\"], [1, \"i\"], [1, \"c\"], [1, \"a\"], [2, \"l\"], [1, \"y\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar x2 = encodeList(arg20);\nvar v2 = [[1, \"p\"], [1, \"y\"], [1, \"t\"], [1, \"h\"], [1, \"o\"], [1, \"n\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const list = [...list1];\n  for (let i = 0; i < list.length; i++) {\n    let k = list[i];\n    let j = i + 1;\n    while (j < list.length && k == list[j]) {\n      k++;\n      j++;\n    }\n    list[i] = j - i;\n    i = j - 1;\n  }\n  return list;\n}\n", "\n  let res = [];\n  let res1 = [];\n  let index = 1;\n  let m = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] == list1[i - 1]) {\n      index++;\n    } else {\n      if (index > 1) {\n        m = list1[i - 1] * index;\n      } else {\n        m = list1[i - 1];\n      }\n      res.push(m);\n      res1.push(index);\n      index = 1;\n    }\n  }\n  res.push(list1[list1.length - 1] * index);\n  res1.push(index);\n  return [res, res1];\n}\n", "\n  let encode = '';\n  for (let i = 0; i < list1.length; i++) {\n    if (i == 0) {\n      encode = encode + list1[i];\n    } else {\n      if (list1[i] == list1[i - 1]) {\n        encode = encode + (list1[i] * 2);\n      } else {\n        encode = encode + (list1[i] * 2 - 1);\n      }\n    }\n  }\n  return encode;\n}\n", "\n  let encodeList = [list1[0]];\n  for (let i = 1; i < list1.length; i++) {\n    let newList = [list1[i]];\n    while (encodeList[encodeList.length - 1] + 1 < list1[i]) {\n      encodeList.push(encodeList[encodeList.length - 1] + 1);\n    }\n    while (encodeList[encodeList.length - 1] + 1 == list1[i]) {\n      encodeList.push(encodeList[encodeList.length - 1] + 1);\n    }\n    for (let j = encodeList.length - 2; j >= 0; j--) {\n      if (encodeList[j] + 1 > list1[i]) {\n        newList.push(encodeList[j] + 1);\n      } else {\n        break;\n      }\n    }\n    encodeList = newList;\n  }\n  return encodeList;\n}\n", "\n  let list = [...list1];\n  let encoder = [];\n  let curr = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== list[curr]) {\n      encoder.push(list[curr]);\n      curr = i;\n    }\n  }\n  return encoder;\n}\n"]}
{"task_id": "MBJSP/158", "prompt": "function findRotations(str) {\n/**\n * * Write a JavaScript function to find the minimum number of rotations required to get the same string.\n */\n    let count = 0;\n    for (let i = 0; i < str.length - 1; i++) {\n        if (str[i] !== str[i + 1]) {\n            count++;\n            if (i !== 0) {\n                let temp = str[i];\n                str[i] = str[i + 1];\n                str[i + 1] = temp;\n            }\n        }\n    }\n    return count + 1;\n}\nfunction minCoins(coins, m, v) {\n/**\n * * Write a function to find minimum number of coins that make a given value.\n */\n  const dp = new Array(v + 1).fill(Infinity);\n  dp[0] = 0;\n  for (let i = 1; i <= v; i++) {\n    for (let j = 0; j < coins.length; j++) {\n      if (coins[j] <= i) {\n        dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);\n      }\n    }\n  }\n  return dp[v] === Infinity ? -1 : dp[v];\n}\nfunction minSwaps(s1, s2) {\n/**\n * * Write a JavaScript function to find minimum number swaps required to make two binary strings equal.\n */\n    let count = 0;\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            count += 1;\n            s1 = s1.replace(s1[i], '');\n            s2 = s2.replace(s2[i], '');\n        }\n    }\n    return count;\n}\nfunction minOps(arr, n, k) {\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */", "entry_point": "minOps", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 2, 2, 2];\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = minOps(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 2, 6, 8];\nvar arg11 = 4;\nvar arg12 = 3;\nvar x1 = minOps(arg10, arg11, arg12);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [21, 33, 9, 45, 63];\nvar arg21 = 5;\nvar arg22 = 6;\nvar x2 = minOps(arg20, arg21, arg22);\nvar v2 = 24;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  while (arr.length > 1) {\n    let n = arr.pop();\n    if (n > k) {\n      continue;\n    }\n    n += arr.pop();\n    if (n > k) {\n      continue;\n    }\n    n -= arr.pop();\n    count += 1;\n    arr.push(n);\n  }\n  return count;\n}\n", "\n  const dp = new Array(k).fill(Infinity);\n  dp[0] = 0;\n  for (let i = 1; i <= k; i++) {\n    for (let j = 0; j < n; j++) {\n        if (arr[j] <= i) {\n            dp[i] = Math.min(dp[i], dp[i - arr[j]] + 1);\n        }\n    }\n  }\n  return dp[k] === Infinity? -1 : dp[k];\n}\n", "\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            for (let x = 0; x < k; x++) {\n                if (arr[i] + x === arr[j]) {\n                    count++;\n                    arr[j] = 0;\n                    break;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "\n  const dp = new Array(k + 1).fill(Infinity);\n  dp[0] = 0;\n  for (let i = 1; i <= k; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i >= arr[j]) {\n        dp[i] = Math.min(dp[i], dp[i - arr[j]] + 1);\n      }\n    }\n  }\n  return dp[k] === Infinity? -1 : dp[k];\n}\n\n// Question URL : https://leetcode.com/problems/palindrome-partitioning/\n// Solution URL : https://leetcode.com/submissions/detail/527494399/\n\n\n// Solved by Tushar Roy\n\nconst dp = new Array(n).fill(Infinity);\ndp[0] = 0;\n\nfor (let i = 1; i <= n; i++) {\n    for (let j = 0; j <= i / 2; j++) {\n        if (i - j >= 0 && dp[i - j]!== Infinity) {\n            dp[i] = Math.min(dp[i], dp[i - j] + 1);\n        }\n    }\n}\n\nreturn dp[n];\n\n// Solved by Tushar Roy\n\nconst dp = new Array(n).fill(Infinity);\ndp[0] = 0;\n\nfor (let i = 1; i <= n; i++) {\n    for (let j = 0; j <= i / 2; j++) {\n        if (i - j >= 0 && dp[i - j]!== Infinity) {\n          ", "\n  let ans = 0;\n  let dp = new Array(n).fill(Infinity);\n  for (let i = 1; i <= k; i++) {\n    for (let j = 0; j < n; j++) {\n      if (arr[j] == i) {\n        dp[j] = 0;\n      } else {\n        dp[j] = Infinity;\n        for (let u = 0; u < j; u++) {\n          if (arr[u] < i && dp[u] + 1 < dp[j]) {\n            dp[j] = dp[u] + 1;\n          }\n        }\n      }\n    }\n    ans = Math.min(ans, dp[0]);\n  }\n  return ans;\n}\n\n// module.exports = {\n//     dynamic: dynamic,\n//     minCoins: minCoins,\n//     minSwaps: minSwaps,\n//     minOps: minOps\n// };\nmodule.exports.dynamic = dynamic;\nmodule.exports.minCoins = minCoins;\nmodule.exports.minSwaps = minSwaps;\nmodule.exports.minOps = minOps;\n\n/***/ }),\n/* 91 */,\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */,\n/* 101 */,\n/* 102 */,\n/* 103 */,\n/* 104 */,\n/* 105 */,\n/* 106 */,\n/* 107 */,\n/* 108 */,\n/* 109 */,\n/* 110 */,\n/* 111 */,\n/* 112"]}
{"task_id": "MBJSP/159", "prompt": "function countDigits(num1, num2) {\n/**\n * * Write a function to add two numbers and print number of digits of sum.\n */\n  var sum = num1 + num2;\n  var len = sum.toString().length;\n  return len;\n}\nfunction extractDate(url) {\n/**\n * * Write a function to extract year, month and date from a url by using regex.\n */\n  var regex = /[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}/g;\n  return url.match(regex).map(e => e.split('/'));\n}\nfunction numPosition(text) {\n/**\n * * Write a function to separate and print the numbers and their position of a given string.\n */\n  const position = text.search(/[0-9]/g);\n  return position;\n}\nfunction monthSeason(month, days) {\n/**\n * * Write a function to print the season for the given month and day.\n */", "entry_point": "monthSeason", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"January\";\nvar arg01 = 4;\nvar x0 = monthSeason(arg00, arg01);\nvar v0 = \"winter\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"October\";\nvar arg11 = 28;\nvar x1 = monthSeason(arg10, arg11);\nvar v1 = \"autumn\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"June\";\nvar arg21 = 6;\nvar x2 = monthSeason(arg20, arg21);\nvar v2 = \"spring\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (month >= 1 && month <= 12) {\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n      if (days >= 1 && days <= 31) {\n        return 'Winter';\n      }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n      if (days >= 1 && days <= 30) {\n        return 'Spring';\n      }\n    } else if (month == 2) {\n      if (days >= 1 && days <= 28) {\n        return 'Spring';\n      }\n    } else if (month == 12) {\n      if (days >= 1 && days <= 31) {\n        return 'Winter';\n      }\n    }\n  }\n  return null;\n}\n\n", "\n  return ['Spring', 'Summer', 'Fall', 'Winter'][month - 1];\n}\n", "\n  var season;\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      if (days < 30) {\n        season = 'Winter';\n      } else {\n        season = 'Spring';\n      }\n      break;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      if (days < 31) {\n        season = 'Winter';\n      } else {\n        season = 'Spring';\n      }\n      break;\n    case 2:\n      if (days < 29) {\n        season = 'Winter';\n      } else {\n        season = 'Spring';\n      }\n      break;\n    default:\n      season = 'Summer';\n  }\n  return season;\n}\n", "\n  var season = month +'is'+ month +'in'+ days +'days';\n  return season;\n}\n", "\n  const season = month.search(/january|february|march|april|may|june|july|august|september|october|november|december/i);\n  return season;\n}\n"]}
{"task_id": "MBJSP/160", "prompt": "function countWays(n) {\n/**\n * * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n */\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 4;\n\n  let ways = 0;\n  for (let i = 1; i <= n - 2; i++) {\n    ways += countWays(i);\n  }\n\n  return ways;\n}\nfunction findMaxVal(n, x, y) {\n/**\n * * Write a function to find the largest possible value of k such that k modulo x is y.\n */\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % x === y) {\n      max = i;\n    }\n  }\n  return max;\n}\nfunction maximumSegments(n, a, b, c) {\n/**\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n */\n  // O(n)\n  if (!n || !a || !b || !c) return null;\n\n  let dp = [];\n  dp[0] = 0;\n\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(\n      ...[\n        // if current segment can be formed with a, b and c,\n        dp[i - a] + 1,\n        dp[i - b] + 1,\n        dp[i - c] + 1,\n      ].filter((e) => e > 0)\n    );\n  }\n\n  return dp[n];\n}\nfunction solution(a, b, n) {\n/**\n * * Write a function to find x and y that satisfies ax + by = n.\n */", "entry_point": "solution", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 3;\nvar arg02 = 7;\nvar x0 = solution(arg00, arg01, arg02);\nvar v0 = [\"x = \", 2, \", y = \", 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar arg12 = 7;\nvar x1 = solution(arg10, arg11, arg12);\nvar v1 = \"No solution\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 13;\nvar arg22 = 17;\nvar x2 = solution(arg20, arg21, arg22);\nvar v2 = [\"x = \", 4, \", y = \", 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let x = 0;\n  let y = 0;\n\n  while (a > 0) {\n    let rem = n % a;\n    let cnt = 0;\n    while (n % a === rem) {\n      n = n / a;\n      cnt++;\n    }\n    x = a * x + cnt;\n    y = a * y + cnt;\n    a = a / 10;\n  }\n  return { x, y };\n}\n", "\n  let x = 0, y = 0;\n  while (n) {\n    if (a > 0) {\n      n -= a;\n      x += 1;\n      a = 0;\n    } else if (b > 0) {\n      n -= b;\n      y += 1;\n      b = 0;\n    } else {\n      a = -a;\n      b = -b;\n      n -= a;\n      x += 1;\n      a = 0;\n    }\n  }\n\n  return [x, y];\n}\n", "\n  let x = y = 0;\n  for (let i = 1; i <= n; i++) {\n    x = (x + a) * i % 1000000007;\n    y = (y + b) * i % 1000000007;\n  }\n  return [x, y];\n}\n", "\n  let x = 0;\n  let y = 0;\n  while (a * x + b * y!= n) {\n    if (a * x + b * y > n) {\n      y++;\n    } else if (a * x + b * y < n) {\n      x++;\n    } else {\n      x = Math.floor(Math.sqrt(a * x + b * y)) + 1;\n      y = a * x - b * y;\n    }\n  }\n  return [x, y];\n}\n", "\n  let x = 0;\n  let y = 0;\n  while (n > 0) {\n    // The number of segments with length a, b and n.\n    let w = 0;\n    while (n % a === 0) {\n      w++;\n      n /= a;\n    }\n    while (n % b === 0) {\n      w++;\n      n /= b;\n    }\n\n    if (w > 0) {\n      if (x === 0) {\n        x = w;\n        y = a;\n      } else {\n        x = Math.min(x, w);\n        y = Math.max(y, w);\n      }\n    }\n\n    if (n === 1) {\n      return x;\n    }\n  }\n\n  return [x, y];\n}\n"]}
{"task_id": "MBJSP/161", "prompt": "function removeTuple(testlist) {\n/**\n * * Write a function to remove all tuples with all \"none\" values in the given tuple list.\n */\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.every(val => val === null)) {\n      continue;\n    }\n    newList.push(tuple);\n  }\n  return newList;\n}\nfunction checkElement(testtup, checklist) {\n/**\n * * Write a function to check if any list element is present in the given list.\n */\n  for (let i = 0; i < checkList.length; i++) {\n    if (testTup.includes(checkList[i])) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction alternateElements(list1) {\n/**\n * * Write a function to create a list taking alternate elements from another given list.\n */\n  let list2 = [];\n  let i = 0;\n  while (i < list1.length) {\n    list2.push(list1[i]);\n    i += 2;\n  }\n  return list2;\n}\nfunction removeElements(list1, list2) {\n/**\n * * Write a function to remove all elements from a given list present in another list.\n */", "entry_point": "removeElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg01 = [2, 4, 6, 8];\nvar x0 = removeElements(arg00, arg01);\nvar v0 = [1, 3, 5, 7, 9, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg11 = [1, 3, 5, 7];\nvar x1 = removeElements(arg10, arg11);\nvar v1 = [2, 4, 6, 8, 9, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg21 = [5, 7];\nvar x2 = removeElements(arg20, arg21);\nvar v2 = [1, 2, 3, 4, 6, 8, 9, 10];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (let i = 0; i < list2.length; i++) {\n    if (list1.includes(list2[i])) {\n      list1.splice(list1.indexOf(list2[i]), 1);\n    }\n  }\n  return list1;\n}\n/**\n * * Add the following ", "\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] in list2) {\n      list2.splice(list2.indexOf(list1[i]), 1);\n    }\n  }\n  return list2;\n}\n", "\n  let newList = [];\n  let i = 0;\n  while (i < list1.length) {\n    if (!list2.includes(list1[i])) {\n      newList.push(list1[i]);\n    }\n    i++;\n  }\n  return newList;\n}\n", "\n  let newList = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.includes(list1[i])) {\n      continue;\n    }\n    newList.push(list1[i]);\n  }\n  return newList;\n}\n", "\n  let newList = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.includes(list1[i])) {\n      newList.push(list1[i]);\n    }\n  }\n  return newList;\n}\n"]}
{"task_id": "MBJSP/162", "prompt": "function harmonicSum(n) {\n/**\n * * Write a function to calculate the harmonic sum of n-1.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += 1 / i;\n  }\n  return sum;\n}\nfunction harmonicSum(n) {\n/**\n * * Write a function to calculate the harmonic sum of n-1.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += 1 / i;\n  }\n  return sum;\n}\nfunction sumPositivenum(nums) {\n/**\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n */\n  return nums.filter(num => num > 0).reduce((acc, cur) => acc + cur, 0);\n}\nfunction sumSeries(n) {\n/**\n * * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n */", "entry_point": "sumSeries", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = sumSeries(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = sumSeries(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = sumSeries(arg20);\nvar v2 = 25;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(n - i + 1, 2);\n  }\n  return sum;\n}\n", "\n  let acc = 0;\n  for (let i = 1; i <= n; i++) {\n    acc += i;\n    if (i - 2 < 0) continue;\n    acc += i - 2;\n    if (i - 4 < 0) continue;\n    acc += i - 4;\n    ...\n  }\n  return acc;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n - i >= 0) {\n      sum += i + (n - i);\n    }\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  let n = 1;\n  while (n <= n) {\n    sum += n;\n    n += n;\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 1);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 2);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 3);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 4);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 5);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 6);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 7);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 8);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 9);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 10);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 11);\n  }\n  for (let i = 1; i <= n; i++) {\n    sum += i - (i - 12);\n  }\n  for (let i = 1"]}
{"task_id": "MBJSP/163", "prompt": "function rombusArea(p, q) {\n/**\n * * Write a function to find the area of a rombus.\n */\n  if (p === 0 || q === 0) {\n    return 0;\n  } else if (p < q) {\n    return rombusArea(q, p);\n  } else if (p === q) {\n    return p * q;\n  } else if (p > q) {\n    let result = p * q;\n    return result - (rombusArea(p - q, q));\n  }\n}\nfunction areaTetrahedron(side) {\n/**\n * * Write a function to caluclate the area of a tetrahedron.\n */\n  return side * side * Math.sqrt(3)\n}\nfunction perimeterPolygon(s, l) {\n/**\n * * Write a function to calculate the perimeter of a regular polygon.\n */\n  return s * l;\n}\nfunction areaPolygon(s, l) {\n/**\n * * Write a function to calculate the area of a regular polygon.\n */", "entry_point": "areaPolygon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 20;\nvar x0 = areaPolygon(arg00, arg01);\nvar v0 = 400.00000000000006;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = areaPolygon(arg10, arg11);\nvar v1 = 1731.1969896610804;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 7;\nvar x2 = areaPolygon(arg20, arg21);\nvar v2 = 302.90938549487214;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let area = 0;\n  let sigma = 2 * Math.PI / l;\n  for (let i = 1; i <= l; i++) {\n    area += (s - i * sigma) * (s - i * sigma) * (1 / (2 * sigma));\n  }\n  return area;\n}\n", "\n  return Math.PI * s * s * (l - s) / 4;\n}\n", "\n  return Math.sqrt((l * l - l * l / 4) * s * s)\n}\n", "\n  return Math.sqrt(2) / 4 * s * s * l;\n}\n", "\n  return (Math.sqrt(2 * s * s * (l * l - s * s)) + Math.sqrt(2 * s * s * (l * l + s * s))) / (4 * s * l);\n}\n//https://www.mathsisfun.com/geometry/regular-polygon-area.html\n"]}
{"task_id": "MBJSP/164", "prompt": "function countDivisors(n) {\n/**\n * * Write a JavaScript function to check whether the count of divisors is even or odd.\n */\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count % 2 === 0 ? 'Even' : 'Odd';\n}\nfunction sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction areequivalent(num1, num2) {\n/**\n * * Write a JavaScript function to check whether the sum of divisors are same or not.\n */", "entry_point": "areequivalent", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 36;\nvar arg01 = 57;\nvar x0 = areequivalent(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = areequivalent(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 23;\nvar arg21 = 47;\nvar x2 = areequivalent(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 1; i <= num1; i++) {\n        if (num1 % i === 0 && num2 % i === 0) {\n            count++;\n        }\n    }\n    return count === 2;\n}\n", "\n    let sum1 = getSumOfDivisors(num1);\n    let sum2 = getSumOfDivisors(num2);\n    return sum1 === sum2? true : false;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= num1; i++) {\n        if (num1 % i === 0) {\n            sum += i;\n        }\n    }\n    for (let i = 1; i <= num2; i++) {\n        if (num2 % i === 0) {\n            sum += i;\n        }\n    }\n    return sum === num1 + num2;\n}\n", "\n    let divisors1 = getDivisors(num1), divisors2 = getDivisors(num2);\n    if (divisors1.sort().join(',') === divisors2.sort().join(',')) {\n        return true;\n    }\n    return false;\n}\n", "\n    return isequalsum(num1, num2)? 'Equal' : 'Not Equal';\n}\n"]}
{"task_id": "MBJSP/165", "prompt": "function maxRunUppercase(teststr) {\n/**\n * * Write a function to find maximum run of uppercase characters in the given string.\n */\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i] === testStr[i].toUpperCase()) {\n      current++;\n    } else {\n      current = 0;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\nfunction splitUpperstring(text) {\n/**\n * * Write a function to split a string at uppercase letters.\n */\n  return text.split(/(?=[A-Z])/).filter(Boolean);\n}\nfunction countVowels(teststr) {\n/**\n * * Write a function to count those characters which have vowels as their neighbors in the given string.\n */\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (vowels.includes(testStr[i])) {\n      if (i === 0 || vowels.includes(testStr[i - 1])) {\n        count++;\n      }\n      if (i === testStr.length - 1 || vowels.includes(testStr[i + 1])) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction countCharPosition(str1) {\n/**\n * * Write a JavaScript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n */", "entry_point": "countCharPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"xbcefg\";\nvar x0 = countCharPosition(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABcED\";\nvar x1 = countCharPosition(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AbgdeF\";\nvar x2 = countCharPosition(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let charCounts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "\n  let str2 = str1.toLowerCase();\n  let str3 = str1.toUpperCase();\n  let str4 = str1.substring(0, 1).toUpperCase() + str1.substring(1, str1.length);\n  let str5 = str1.substring(0, 1).toLowerCase() + str1.substring(1, str1.length);\n  let count = 0;\n  for (let i = 0; i < str2.length; i++) {\n    if (str1[i] === str2[i] || str1[i] === str3[i] || str1[i] === str4[i] || str1[i] === str5[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let lowercase = ['a', 'e', 'i', 'o', 'u'];\n  let uppercase = ['A', 'E', 'I', 'O', 'U'];\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (lowercase.includes(str1[i])) {\n      count++;\n    }\n    if (uppercase.includes(str1[i])) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let charCount = {};\n  charCount['a'] = 0;\n  charCount['A'] = 0;\n  charCount['e'] = 0;\n  charCount['E'] = 0;\n  charCount['i'] = 0;\n  charCount['I'] = 0;\n  charCount['o'] = 0;\n  charCount['O'] = 0;\n  charCount['u'] = 0;\n  charCount['U'] = 0;\n  let testStr = str1.toLowerCase();\n  let testStrUpper = testStr.toUpperCase();\n  for (let i = 0; i < testStr.length; i++) {\n    charCount[testStr[i]] = charCount[testStr[i]] + 1;\n  }\n  for (let i = 0; i < testStrUpper.length; i++) {\n    charCount[testStrUpper[i]] = charCount[testStrUpper[i]] + 1;\n  }\n  let max = 0;\n  let current = 0;\n  for (let key in charCount) {\n    if (current < charCount[key]) {\n      current = charCount[key];\n      max = key;\n    }\n  }\n  return max;\n}\n", "\n  let a = 97;\n  let e = 97;\n  let i = 97;\n  let o = 97;\n  let u = 97;\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    let currchar = str1[i];\n    if (currchar >= 'a' && currchar <= 'z') {\n      count++;\n    } else {\n      let currchar = str1[i];\n      if (currchar >= 'A' && currchar <= 'Z') {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/166", "prompt": "function averageEven(n) {\n/**\n * * Write a JavaScript function to find the average of even numbers till a given even number.\n */\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\nfunction pairOrSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of xor of all pairs of numbers in the given array.\n */\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += (arr[i] ^ arr[j]);\n        }\n    }\n    return sum;\n}\nfunction findOddPair(a, n) {\n/**\n * * Write a JavaScript function to count the pairs with xor as an odd number.\n */\n    var count = 0;\n    for (var i = 0; i < a.length; i++) {\n        for (var j = i + 1; j < a.length; j++) {\n            if ((a[i] ^ a[j]) % 2 !== 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nfunction findEvenPair(a, n) {\n/**\n * * Write a JavaScript function to count the pairs with xor as an even number.\n */", "entry_point": "findEvenPair", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 4, 7, 2, 1];\nvar arg01 = 5;\nvar x0 = findEvenPair(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 2, 8, 1, 0, 5, 11];\nvar arg11 = 7;\nvar x1 = findEvenPair(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 3;\nvar x2 = findEvenPair(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var count = 0;\n    for (var i = 0; i < a.length; i++) {\n        for (var j = i + 1; j < a.length; j++) {\n            if ((a[i] ^ a[j]) % 2 === 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    var count = 0;\n    for (var i = 0; i < a.length; i++) {\n        for (var j = i + 1; j < a.length; j++) {\n            if ((a[i] ^ a[j]) % 2 === 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    var count = 0;\n    for (var i = 0; i < a.length; i++) {\n        for (var j = i + 1; j < a.length; j++) {\n            if ((a[i] ^ a[j]) % 2 === 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    var count = 0;\n    for (var i = 0; i < a.length; i++) {\n        for (var j = i + 1; j < a.length; j++) {\n            if ((a[i] ^ a[j]) % 2 === 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    var count = 0;\n    for (var i = 0; i < a.length; i++) {\n        for (var j = i + 1; j < a.length; j++) {\n            if ((a[i] ^ a[j]) % 2 === 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/167", "prompt": "function generateMatrix(n) {\n/**\n * * Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n */\n  const matrix = [];\n  const startRow = 0;\n  const endRow = n - 1;\n  const startCol = 0;\n  const endCol = n - 1;\n  let currentRow = startRow;\n  let currentCol = startCol;\n  let direction = 'right';\n  let num = 1;\n\n  while (currentRow <= endRow && currentCol <= endCol) {\n    for (let i = currentCol; i <= endCol; i++) {\n      matrix[currentRow][i] = num;\n      num++;\n    }\n    currentRow++;\n\n    for (let i = currentRow; i <= endRow; i++) {\n      matrix[i][endCol] = num;\n      num++;\n    }\n    endCol--;\n\n    for (let i = endCol; i >= currentCol; i--) {\n      matrix[endRow][i] = num;\n      num++;\n    }\n    end\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction getLudic(n) {\n/**\n * * Write a function to get a lucid number smaller than or equal to n.\n */\n    return [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43].filter(\n        num => num <= n);\n}\nfunction nextPowerOf2(n) {\n/**\n * * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */", "entry_point": "nextPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 0;\nvar x0 = nextPowerOf2(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = nextPowerOf2(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 17;\nvar x2 = nextPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let pow2 = 0;\n  let temp = Math.pow(2, pow2);\n  if (n >= temp) {\n    pow2++;\n  }\n  return Math.pow(2, pow2);\n}\n\n", "\n  if (n <= 0) {\n    return 0;\n  }\n  let result = 1;\n  while (result < n) {\n    result *= 2;\n  }\n  return result;\n}\n", "\n  let result = 1;\n  while (result < n) {\n    result *= 2;\n  }\n  return result;\n}\n", "\n  let p = 1;\n  while (p < n) {\n    p = p << 1;\n  }\n  return p;\n}\n", "\n  let currentN = 1;\n  while (currentN < n) {\n    currentN *= 2;\n  }\n  return currentN;\n}\n}\n"]}
{"task_id": "MBJSP/168", "prompt": "function getInvCount(arr, n) {\n/**\n * * Write a function to count the number of inversions in the given array.\n */\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] > arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction frequency(a, x) {\n/**\n * * Write a JavaScript function to find the frequency of a number in a given array.\n */", "entry_point": "frequency", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = 4;\nvar x0 = frequency(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 3, 3, 3, 4];\nvar arg11 = 3;\nvar x1 = frequency(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 1, 2];\nvar arg21 = 1;\nvar x2 = frequency(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let len = a.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (a[i] === x) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === x) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === x) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === x) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === x) {\n      if (freq[x]) {\n        freq[x]++;\n      } else {\n        freq[x] = 1;\n      }\n    }\n  }\n  return freq;\n}\n"]}
{"task_id": "MBJSP/169", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction getPell(n) {\n/**\n * * Write a function to calculate the nth pell number.\n */", "entry_point": "getPell", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = getPell(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = getPell(arg10);\nvar v1 = 169;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar x2 = getPell(arg20);\nvar v2 = 408;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tvar num = 1;\n\tvar count = n;\n\twhile (count-- > 0) {\n\t\tnum = num * (2 * n + 1) / (n + 1)\n\t}\n\treturn num\n}\n\n", "\n\tconst matrix = [1, 1, 1];\n\tfor (let i = 2; i <= n; i++) {\n\t\tconst matrix1 = [\n\t\t\tmatrix[1] + matrix[0],\n\t\t\tmatrix[2] + matrix[1],\n\t\t\tmatrix[3] + matrix[2]\n\t\t];\n\t\tmatrix[0] = matrix[1];\n\t\tmatrix[1] = matrix[2];\n\t\tmatrix[2] = matrix[3];\n\t\tmatrix[3] = matrix1[2] + matrix1[3];\n\t}\n\treturn matrix[3];\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tvar pell = 1;\n\tfor (var i = 2; i < n; i++) {\n\t\tpell = pell + i * i;\n\t}\n\treturn pell;\n}\n", "\n\tvar num = 1;\n\tfor (var i = 0; i < n; i++) {\n\t\tnum *= 2;\n\t}\n\treturn num;\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1) {\n\t\treturn 2;\n\t}\n\tif (n === 2) {\n\t\treturn 3;\n\t}\n\treturn getPell(n - 1) + getPell(n - 2);\n}\n"]}
{"task_id": "MBJSP/170", "prompt": "function difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction sumOfPrimes(n) {\n/**\n * * Write a JavaScript function to find sum of prime numbers between 1 to n.\n */\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      sum += i;\n    }\n  }\n  return sum;\n}\nfunction sumRangeList(nums, m, n) {\n/**\n * * Write a JavaScript function to calculate the sum of the numbers in a list between the indices of a specified range.\n */\n  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += nums[i];\n  }\n  return sum;\n}\nfunction sumRangeList(list1, m, n) {\n/**\n * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n */", "entry_point": "sumRangeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg01 = 8;\nvar arg02 = 10;\nvar x0 = sumRangeList(arg00, arg01, arg02);\nvar v0 = 29;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg11 = 5;\nvar arg12 = 7;\nvar x1 = sumRangeList(arg10, arg11, arg12);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg21 = 7;\nvar arg22 = 10;\nvar x2 = sumRangeList(arg20, arg21, arg22);\nvar v2 = 38;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += list1[i];\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += list1[i];\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += list1[i];\n  }\n  return sum;\n}\n\n// console.log(sumOfPrimes(3));\n// console.log(sumRangeList([1, 2, 3, 4, 5, 6, 7, 8], 0, 9));\n// console.log(sumOfPrimes(100));\n// console.log(sumOfPrimes(300));\n// console.log(sumOfPrimes(1000));\n// console.log(sumOfPrimes(10));\n// console.log(sumOfPrimes(3));\n\n// console.log(sumOfPrimes(3));\n// console.log(sumRangeList([1, 2, 3, 4, 5, 6, 7, 8], 0, 9));\n// console.log(sumOfPrimes(100));\n// console.log(sumOfPrimes(300));\n// console.log(sumOfPrimes(1000));\n// console.log(sumOfPrimes(10));\n// console.log(sumOfPrimes(3));\n\n// console.log(sumOfPrimes(3));\n// console.log(sumRangeList([1, 2, 3, 4, 5, 6, 7, 8], 0, 9));\n// console.log(sumOfPrimes(100));\n// console.log(sumOfPrimes(300));\n// console.log(sumOfPrimes(1000));\n// console.log(sumOfPrimes(10));\n// console.log(sumOfPrimes(3));\n\n// console.log(sumOfPrimes(3));\n// console.log(sumRangeList([1, 2, 3, 4", "\n  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += list1[i];\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += list1[i];\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/171", "prompt": "function perimeterPolygon(s, l) {\n/**\n * * Write a function to calculate the perimeter of a regular polygon.\n */\n  return s * l;\n}\nfunction rombusPerimeter(a) {\n/**\n * * Write a function to find the perimeter of a rombus.\n */\n  return a * 4;\n}\nfunction rectanglePerimeter(l, b) {\n/**\n * * Write a function to find the perimeter of a rectangle.\n */\n  return 2 * (l + b);\n}\nfunction perimeterPentagon(a) {\n/**\n * * Write a function to find the perimeter of a pentagon.\n */", "entry_point": "perimeterPentagon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = perimeterPentagon(arg00);\nvar v0 = 25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = perimeterPentagon(arg10);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = perimeterPentagon(arg20);\nvar v2 = 75;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return a * 5;\n}\n", "\n  return 5 * a;\n}\n", "\n  return a * 5;\n}\n", "\n  return a * 5;\n}\n", "\n  return a * 5;\n}\n"]}
{"task_id": "MBJSP/172", "prompt": "function maxOccurrences(list1) {\n/**\n * * Write a function to find the item with maximum occurrences in a given list.\n */\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1.filter(x => x === list1[i]).length > maxOccurrence) {\n      maxOccurrence = list1.filter(x => x === list1[i]).length;\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction getItem(tup1, index) {\n/**\n * * Write a function to get an item of a tuple.\n */\n  if (index < 0) {\n    index = tup1.length + index;\n  }\n  return tup1[index];\n}\nfunction replaceSpaces(string) {\n/**\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n */\n  return string.replace(/ /g, \"%20\");\n}\nfunction countOccurance(s) {\n/**\n * * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n */", "entry_point": "countOccurance", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"letstdlenstdporstd\";\nvar x0 = countOccurance(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"truststdsolensporsd\";\nvar x1 = countOccurance(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"makestdsostdworthit\";\nvar x2 = countOccurance(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sOccurrence = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \"std\") {\n      sOccurrence += 1;\n    }\n  }\n  return sOccurrence;\n}\n", "\n  return s.split(\"std\").length;\n}\n", "\n  let list1 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"", "\n  let occurrence = s.match(/std/ig);\n  return occurrence.length;\n}\n", "\n  let match;\n  if (s) {\n    match = s.match(/[^a-zA-Z0-9]/g);\n    return match.length;\n  } else {\n    return 0;\n  }\n}\n"]}
{"task_id": "MBJSP/173", "prompt": "function removeAllSpaces(text) {\n/**\n * * Write a function to remove all whitespaces from a string.\n */\n  return text.replace(/\\s/g, '');\n}\nfunction removeChar(s) {\n/**\n * * Write a function to remove all characters except letters and numbers using regex\n */\n  return s.replace(/[^a-z0-9]/gi, '');\n}\nfunction removeExtraChar(text1) {\n/**\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n */\n    return text1.replace(/[^a-zA-Z0-9]/g, '');\n}\nfunction removeSplchar(text) {\n/**\n * * Write a function to remove everything except alphanumeric characters from a string.\n */", "entry_point": "removeSplchar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python  @#&^%\\$*program123\";\nvar x0 = removeSplchar(arg00);\nvar v0 = \"pythonprogram123\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python %^\\$@!^&*()  programming24%\\$^^()    language\";\nvar x1 = removeSplchar(arg10);\nvar v1 = \"pythonprogramming24language\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python   ^%&^()(+_)(_^&67)                  program\";\nvar x2 = removeSplchar(arg20);\nvar v2 = \"python67program\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.replace(/[^a-zA-Z0-9\\s]/g, '');\n}\n\nvar root = /*#__PURE__*/Object.freeze({\ndefault: removeChar,\n__moduleExports: removeChar,\nremoveSplchar: removeSplchar\n});\n\n/**\n * Remove extra spaces from the given string by using a regex.\n */\nvar removeExtraSpaces = ( /*#__PURE__*/root.default)(removeSplchar);\n\nvar root_1 = /*#__PURE__*/Object.freeze({\ndefault: removeExtraSpaces,\n__moduleExports: removeExtraSpaces\n});\n\n/**\n * Remove whitespaces from the given string by using a regex.\n */\nvar removeWhitespaces = ( /*#__PURE__*/root_1.default)(removeChar);\n\nvar root_2 = /*#__PURE__*/Object.freeze({\ndefault: removeWhitespaces,\n__moduleExports: removeWhitespaces\n});\n\n/**\n * Remove extra characters from the given string by using a regex.\n */\nvar removeExtraChars = ( /*#__PURE__*/root_2.default)(removeSplchar);\n\nvar root_3 = /*#__PURE__*/Object.freeze({\ndefault: removeExtraChars,\n__moduleExports: removeExtraChars\n});\n\nvar root_4 = /*#__PURE__*/Object.freeze({\ndefault: removeExtraChars,\n__moduleExports: removeExtraChars\n});\n\nvar root_5 = /*#__PURE__*/Object.freeze({\ndefault: removeSplchar,\n__moduleExports: removeSplchar\n});\n\nvar root_6 =", "\n  return text.replace(/[^a-zA-Z0-9]+/g, '');\n}\n", "\n    return text.replace(/[^a-zA-Z]/g, '');\n}\n", "\n  return text.replace(/[^a-zA-Z0-9 ]/g, '');\n}\n", "\n    return text.replace(/[^a-zA-Z0-9\\s]/g, '');\n}\n"]}
{"task_id": "MBJSP/174", "prompt": "function groupElement(testlist) {\n/**\n * * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n */\n  const result = {};\n  for (let i = 0; i < testList.length; i++) {\n    const [first, second] = testList[i];\n    if (result[second]) {\n      result[second].push(first);\n    } else {\n      result[second] = [first];\n    }\n  }\n  return result;\n}\nfunction sortDictItem(testdict) {\n/**\n * * Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n */\n  const sortedDict = {};\n  const keys = Object.keys(testDict);\n  keys.sort((a, b) => {\n    const [aKey, aValue] = a.split(',');\n    const [bKey, bValue] = b.split(',');\n    return aKey * bKey - aValue * bValue;\n  });\n  keys.forEach((key) => {\n    sortedDict[key] = testDict[key];\n  });\n  return sortedDict;\n}\nfunction groupingDictionary(l) {\n/**\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n */\n  const result = {};\n  l.forEach(function(item) {\n    if (result[item[0]]) {\n      result[item[0]].push(item[1]);\n    } else {\n      result[item[0]] = [item[1]];\n    }\n  });\n  return result;\n}\nfunction groupKeyvalue(l) {\n/**\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n */", "entry_point": "groupKeyvalue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]];\nvar x0 = groupKeyvalue(arg00);\nvar v0 = {'\"yellow\"':[1, 3],'\"blue\"':[2, 4],'\"red\"':[1]};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"python\", 1], [\"python\", 2], [\"python\", 3], [\"python\", 4], [\"python\", 5]];\nvar x1 = groupKeyvalue(arg10);\nvar v1 = {'\"python\"':[1, 2, 3, 4, 5]};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"yellow\", 100], [\"blue\", 200], [\"yellow\", 300], [\"blue\", 400], [\"red\", 100]];\nvar x2 = groupKeyvalue(arg20);\nvar v2 = {'\"yellow\"':[100, 300],'\"blue\"':[200, 400],'\"red\"':[100]};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = {};\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    if (result[item[0]]) {\n      result[item[0]].push(item[1]);\n    } else {\n      result[item[0]] = [item[1]];\n    }\n  }\n  return result;\n}\n\n/**\n * *************************************************************************\n * *************************************************************************\n * *************************************************************************\n * *******                                                          *****\n * *******  BEGIN PER-TEST-TESTING FUNCTIONS  *******\n * *******                                                          *****\n * *************************************************************************\n * *************************************************************************\n * *************************************************************************\n */\n\n", "\n  const result = {};\n  l.forEach(", "\n  const result = {};\n  l.forEach(", "\n  const result = {};\n  l.forEach(", "\n  const result = {};\n  l.forEach("]}
{"task_id": "MBJSP/175", "prompt": "function anagramLambda(texts, str) {\n/**\n * * Write a function to find all anagrams of a string in a given list of strings using lambda function.\n */\n  const sorted = str.split(\"\").sort().join(\"\");\n  return texts.filter(text => {\n    const sortedText = text.split(\"\").sort().join(\"\");\n    return sortedText === sorted;\n  });\n}\nfunction floatToTuple(teststr) {\n/**\n * * Write a function to convert the given string of float type into tuple.\n */\n  return testStr.split(\",\").map(function(item) {\n    return parseFloat(item);\n  });\n}\nfunction strToTuple(teststr) {\n/**\n * * Write a function to convert the given string of integers into a tuple.\n */\n  return testStr.split(\", \").map(Number);\n}\nfunction isValidParenthese(str1) {\n/**\n * * Write a function to verify validity of a string of parentheses.\n */", "entry_point": "isValidParenthese", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"(){}[]\";\nvar x0 = isValidParenthese(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"()[{)}\";\nvar x1 = isValidParenthese(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"()\";\nvar x2 = isValidParenthese(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (!str1) {\n    return false;\n  }\n  const map = {\n    \"({)\": 1,\n    \"(}\": -1,\n    \"})\": -1,\n    \")}\": 1\n  };\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    const char = str1[i];\n    if (map[char]) {\n      count++;\n    } else {\n      if (count > 0) {\n        count--;\n      } else {\n        return false;\n      }\n    }\n  }\n  return count === 0;\n}\n", "\n  const stack = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n      stack.push(str1[i]);\n    } else if (str1[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "\n  const arr = str1.split(/\\s+/g);\n  let count = 0;\n  let isValid = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"(\") {\n      count++;\n    }\n    if (arr[i] === \")\") {\n      count--;\n    }\n    if (count < 0) {\n      isValid = false;\n    }\n  }\n  if (count!== 0) {\n    isValid = false;\n  }\n  return isValid;\n}\n", "\n  const stack = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\" || str1[i] === \"[\" || str1[i] === \"{\") {\n      stack.push(str1[i]);\n    } else if (str1[i] === \")\" || str1[i] === \"]\" || str1[i] === \"}\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const current = stack.pop();\n      if (str1[i] === \")\" && current!== \"(\") {\n        return false;\n      } else if (str1[i] === \"]\" && current!== \"[\") {\n        return false;\n      } else if (str1[i] === \"{\" && current!== \"{\") {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "\n  return str1 === \"(\" || str1 === \")\" || str1 === \"[\" || str1 === \"]\";\n}\n"]}
{"task_id": "MBJSP/176", "prompt": "function minSumPath(a) {\n/**\n * * Write a function to find the minimum total path sum in the given triangle.\n */\n  const n = a.length;\n  const dp = Array(n).fill(0);\n  dp[0] = a[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i] = Math.min(dp[i - 1] + a[i][0], dp[i - 1] + a[i][1]);\n  }\n  return dp[n - 1];\n}\nfunction rombusPerimeter(a) {\n/**\n * * Write a function to find the perimeter of a rombus.\n */\n  return a * 4;\n}\nfunction rectanglePerimeter(l, b) {\n/**\n * * Write a function to find the perimeter of a rectangle.\n */\n  return 2 * (l + b);\n}\nfunction perimeterTriangle(a, b, c) {\n/**\n * * Write a function to find the perimeter of a triangle.\n */", "entry_point": "perimeterTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar arg02 = 30;\nvar x0 = perimeterTriangle(arg00, arg01, arg02);\nvar v0 = 60;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 4;\nvar arg12 = 5;\nvar x1 = perimeterTriangle(arg10, arg11, arg12);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 25;\nvar arg21 = 35;\nvar arg22 = 45;\nvar x2 = perimeterTriangle(arg20, arg21, arg22);\nvar v2 = 105;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return a + b + c;\n}\n", "\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n}\n", "\n  const sides = [a, b, c];\n  sides.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sides.length - 1; i++) {\n    sum += sides[i];\n  }\n  sum += sides[sides.length - 1];\n  return sum;\n}\n", "\n  const s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n", "\n  return a + b + c;\n}\n"]}
{"task_id": "MBJSP/177", "prompt": "function removals(arr, n, k) {\n/**\n * * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n */\n  let amin = 0;\n  let amax = arr.length - 1;\n  let count = 0;\n  while (amin <= amax) {\n    let mid = Math.floor((amin + amax) / 2);\n    if (arr[mid] < n) {\n      amin = mid + 1;\n    } else if (arr[mid] > n) {\n      amax = mid - 1;\n    } else {\n      count++;\n      if (mid - 1 >= 0 && arr[mid - 1] > n) {\n        amin = mid - 1;\n      } else if (mid + 1 < arr.length && arr[mid + 1] < n) {\n        amax = mid + 1;\n      } else {\n        amin = mid + 1;\n      }\n    }\n  }\nfunction lcm(x, y) {\n/**\n * * Write a JavaScript function to find lcm of two positive integers.\n */\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    var gcd = function(a, b) {\n        if(b == 0) {\n            return a;\n        }\n        else {\n            return gcd(b, a % b);\n        }\n    };\n    return ((x * y) / gcd(x, y));\n}\nfunction findPoints(l1, r1, l2, r2) {\n/**\n * * Write a JavaScript function to choose points from two ranges such that no point lies in both the ranges.\n */\n    var x = Math.min(l1, l2);\n    var y = Math.max(r1, r2);\n    return [x, y];\n}\nfunction answer(l, r) {\n/**\n * * Write a JavaScript function to find two distinct numbers such that their lcm lies within the given range.\n */", "entry_point": "answer", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 8;\nvar x0 = answer(arg00, arg01);\nvar v0 = [3, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar x1 = answer(arg10, arg11);\nvar v1 = [2, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 3;\nvar x2 = answer(arg20, arg21);\nvar v2 = [1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let arr = [];\n  let len = Math.max(l, r) - Math.min(l, r) + 1;\n  for(let i = Math.min(l, r) + 1; i <= Math.max(l, r); i++) {\n    if(Math.abs(lcm(i, l) - i) <= len / 2) {\n      arr.push(i);\n    }\n  }\n  return arr.length >= 2? arr.concat([lcm(arr[arr.length - 1], arr[arr.length - 2])]) : [];\n}\n", "\n    let point = findPoints(l, r, Math.ceil(l / 2), Math.floor(r / 2));\n    let lcm1 = lcm(point[0], point[1]);\n    let lcm2 = lcm(l - point[0], r - point[1]);\n    return [lcm1, lcm2];\n}\n", "\n    var arr = [l, r];\n    let n = lcm(arr[0], arr[1]);\n    var ans = findPoints(arr[0], arr[1], n, n);\n    return [ans[0], ans[1]];\n}\n", "\n    var nums = l.length;\n    var index = 0;\n    var min = l[0];\n    var max = r[0];\n    while (index < nums) {\n      if (min <= l[index] && max >= r[index]) {\n        min = Math.min(l[index], min);\n        max = Math.max(r[index], max);\n      }\n      index++;\n    }\n    return findPoints(min, max, lcm(min, max), lcm(max, min));\n}\n", "\n  var x = Math.floor(l / lcm(l, r));\n  var y = Math.floor(r / lcm(l, r));\n  return findPoints(l, r, x, y);\n}\n"]}
{"task_id": "MBJSP/178", "prompt": "function removeWords(list1, charlist) {\n/**\n * * Write a function to remove words from a given list of strings containing a character or string.\n */\n    return list1.map(item => {\n        return item.split(' ').filter(word => {\n            return charlist.every(char => {\n                return word.indexOf(char) === -1;\n            });\n        }).join(' ');\n    });\n}\nfunction findLiterals(text, pattern) {\n/**\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n */\n  const regex = new RegExp(pattern, \"gi\");\n  const match = text.match(regex);\n  return match ? [match[0], text.indexOf(match[0]), text.indexOf(match[0]) + match[0].length] : [];\n}\nfunction searchLiteral(pattern, text) {\n/**\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n */\n  const patternLength = pattern.length;\n  const textLength = text.length;\n  const patternIndex = text.indexOf(pattern);\n\n  if (patternIndex === -1) {\n    return [-1, -1];\n  }\n\n  let start = patternIndex;\n  let end = patternIndex + patternLength;\n\n  while (start > 0 && text[start - 1] !== ' ') {\n    start -= 1;\n  }\n\n  while (end < textLength && text[end] !== ' ') {\n    end += 1;\n  }\n\n  return [start, end];\n}\nfunction stringLiterals(patterns, text) {\n/**\n * * Write a function to search some literals strings in a string.\n */", "entry_point": "stringLiterals", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"language\"];\nvar arg01 = \"python language\";\nvar x0 = stringLiterals(arg00, arg01);\nvar v0 = \"Matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"program\"];\nvar arg11 = \"python language\";\nvar x1 = stringLiterals(arg10, arg11);\nvar v1 = \"Not Matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"python\"];\nvar arg21 = \"programming language\";\nvar x2 = stringLiterals(arg20, arg21);\nvar v2 = \"Not Matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return findLiterals(text, patterns);\n}\n", "\n  patterns.forEach(pattern => {\n    const literalRegex = new RegExp(pattern, \"gi\");\n    const matches = text.match(literalRegex);\n\n    if (matches) {\n      matches.forEach(match => {\n        if (match.indexOf(pattern) === -1) {\n          return;\n        }\n\n        const [start, end] = searchLiteral(pattern, text);\n\n        if (start!== -1 && end!== -1) {\n          const literal = text.slice(start, end);\n          console.log(`Found ${pattern} at ${start + 1} through ${end} with ${literal}`);\n        }\n      });\n    }\n  });\n}\n", "\n  patterns.forEach((pattern, index) => {\n    if (!patterns.hasOwnProperty(index)) {\n      return;\n    }\n\n    const patternLength = pattern.length;\n    const start = text.indexOf(pattern);\n\n    if (start === -1) {\n      return;\n    }\n\n    const end = start + patternLength;\n\n    while (end < text.length && text[end]!=='') {\n      end += 1;\n    }\n\n    return [start, end];\n  });\n}\n", "\n  const stringPatterns = patterns.map(pattern => {\n    if (pattern === '\"') {\n      return `${pattern}`;\n    } else {\n      return `\\\\${pattern}`;\n    }\n  });\n  const regex = new RegExp(`(${stringPatterns.join('|')})`, \"gi\");\n  const match = text.match(regex);\n  return match? [...new Set(match[1].match(/(?:[^\\\\\\\\]|\\\\\\\\.)+/g).map(str => str.replace(/\\\\\\\\/g, '\\\\')))] : [];\n}\n\n/***/ }),\n/* 5 */\n/***/ (", "\n  patterns = patterns || [];\n  const textLength = text.length;\n  const patternsLength = patterns.length;\n\n  for (let i = 0; i < patternsLength; i += 1) {\n    const pattern = patterns[i];\n    const patternIndex = text.indexOf(pattern);\n    let start = patternIndex;\n    let end = patternIndex + pattern.length;\n\n    while (start > 0 && text[start - 1]!=='') {\n      start -= 1;\n    }\n\n    while (end < textLength && text[end]!=='') {\n      end += 1;\n    }\n\n    if (start > 0 || end < textLength) {\n      return [start, end];\n    }\n  }\n\n  return [];\n}\n"]}
{"task_id": "MBJSP/179", "prompt": "function isAbundant(n) {\n/**\n * * Write a function to find out, if the given number is abundant.\n */\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum > n;\n}\nfunction armstrongNumber(number) {\n/**\n * * Write a function to check whether the given number is armstrong or not.\n */\n  let num = number;\n  let sum = 0;\n  while (num > 0) {\n    let rem = num % 10;\n    sum += rem ** 3;\n    num = Math.floor(num / 10);\n  }\n  return sum === number;\n}\nfunction checkAbundant(n) {\n/**\n * * Write a function to find if the given number is abundant or not.\n */\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum > n;\n}\nfunction isNumKeith(x) {\n/**\n * * Write a function to find if the given number is a keith number or not.\n */", "entry_point": "isNumKeith", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 14;\nvar x0 = isNumKeith(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = isNumKeith(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 197;\nvar x2 = isNumKeith(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return x > 0 && x < 27 && x % 2 === 1 && x % 3 === 1 && x % 5 === 1 && x % 7 === 1;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < x; i++) {\n    if (x % i === 0) {\n      sum += i;\n    }\n  }\n  return sum === x;\n}\n", "\n  let strNum = x + \"\";\n  for (let i = 0; i < strNum.length; i++) {\n    if (strNum.charAt(i) === \"4\" || strNum.charAt(i) === \"7\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  return x > 1 && x < 28123;\n}\n", "\n  let currentSum = 0;\n  for (let i = 1; i < x; i++) {\n    currentSum += i;\n  }\n  return x + currentSum - x === x;\n}\n"]}
{"task_id": "MBJSP/180", "prompt": "function mulList(nums1, nums2) {\n/**\n * * Write a function to multiply two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 * nums2[index]);\n}\nfunction divList(nums1, nums2) {\n/**\n * * Write a function to divide two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 / nums2[index]);\n}\nfunction digitDistanceNums(n1, n2) {\n/**\n * * Write a JavaScript function to find the digit distance between two integers.\n */\n    // convert to string to get the string length.\n    n1 = n1.toString();\n    n2 = n2.toString();\n\n    let difference = Math.abs(n1.length - n2.length);\n\n    if (n1.length > n2.length) {\n        difference -= 1;\n    }\n\n    let min = Math.min(n1.length, n2.length);\n\n    for (let i = 0; i < min; i++) {\n        difference += Math.abs(n1.charCodeAt(i) - n2.charCodeAt(i));\n    }\n\n    return difference;\n}\nfunction distanceLatLong(slat, slon, elat, elon) {\n/**\n * * Write a function to calculate distance between two points using latitude and longitude.\n */", "entry_point": "distanceLatLong", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 23.5;\nvar arg01 = 67.5;\nvar arg02 = 25.5;\nvar arg03 = 69.5;\nvar x0 = distanceLatLong(arg00, arg01, arg02, arg03);\nvar v0 = 12179.372041317429;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10.5;\nvar arg11 = 20.5;\nvar arg12 = 30.5;\nvar arg13 = 40.5;\nvar x1 = distanceLatLong(arg10, arg11, arg12, arg13);\nvar v1 = 6069.397933300514;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 20;\nvar arg22 = 30;\nvar arg23 = 40;\nvar x2 = distanceLatLong(arg20, arg21, arg22, arg23);\nvar v2 = 6783.751974994595;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let lat1 = slat * Math.PI / 180;\n    let lat2 = elat * Math.PI / 180;\n    let lon1 = slon * Math.PI / 180;\n    let lon2 = elon * Math.PI / 180;\n\n    let R = 6371;\n\n    let dLat = (lat2 - lat1) * Math.PI / 180;\n    let dLon = (lon2 - lon1) * Math.PI / 180;\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    let d = R * c;\n\n    return d;\n}\n\n/**\n * @param {number} latitude1\n * @param {number} longitude1\n * @param {number} latitude2\n * @param {number} longitude2\n * @returns {number}\n */\n", "\n    let difflat = elat - slat;\n    let difflon = elon - slon;\n    let radians = Math.PI / 180;\n\n    let haversine =\n        Math.sin(difflat / 2) * Math.sin(difflat / 2) +\n        Math.cos(slat * radians) * Math.cos(elat * radians) *\n        Math.sin(difflon / 2) * Math.sin(difflon / 2);\n\n    let dist = 2 * Math.asin(Math.sqrt(haversine));\n\n    return dist;\n}\n", "\n    return Math.sqrt(Math.pow(slat - elat, 2) + Math.pow(slon - elon, 2));\n}\n", "\n  const R = 6371; // Radius of the earth in km\n\n  let latDistance = Math.abs(slat - elat); // Get the absolute value of latitudes\n  let lonDistance = Math.abs(slon - elon); // Get the absolute value of longitudes\n\n  let hDistance = Math.sqrt((Math.pow(latDistance, 2)) + (Math.pow(lonDistance, 2))); // Distance between two points in km\n\n  hDistance = R * (hDistance * Math.cos((slat + elat) / 2)); // Distance between two points in km\n\n  return hDistance;\n}\n\n", "\n  let r = 6371; // radius of earth in km\n  let dlat = Math.toRadians(elat - slat);\n  let dlon = Math.toRadians(elon - slon);\n  let lat1 = Math.toRadians(slat);\n  let lat2 = Math.toRadians(elat);\n  let a = Math.sin(dlat / 2) * Math.sin(dlat / 2) + Math.sin(dlon / 2) * Math.sin(dlon / 2) * Math.cos(lat1) * Math.cos(lat2);\n  let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return r * c;\n}\n"]}
{"task_id": "MBJSP/181", "prompt": "function longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction nCommonWords(text, n) {\n/**\n * * Write a function to find the occurrences of n most common words in a given text.\n */\n  const words = text.split(\" \");\n  const counts = {};\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    counts[word] = counts[word] ? counts[word] + 1 : 1;\n  }\n  const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);\n  const top = sorted.slice(0, n);\n  return top;\n}\nfunction lcsOfThree(x, y, z, m, n, o) {\n/**\n * * Write a function to find the longest common subsequence for the given three string sequence.\n */\n    if (x.length === 0 || y.length === 0 || z.length === 0) return 0;\n    if (x[0] === y[0] && x[0] === z[0]) return 1 + lcsOfThree(x.substring(1), y.substring(1), z.substring(1), m, n, o);\n    const a = lcsOfThree(x.substring(1), y, z, m, n, o);\n    const b = lcsOfThree(x, y.substring(1), z, m, n, o);\n    const c = lcsOfThree(x, y, z.substring(1), m, n, o);\n    return a > b && a > c ? a : b > c ? b : c;\n}\nfunction commonPrefix(arr, n) {\n/**\n * * Write a function to find the longest common prefix in the given set of strings.\n */", "entry_point": "commonPrefix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"];\nvar arg01 = 4;\nvar x0 = commonPrefix(arg00, arg01);\nvar v0 = \"ta\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"apples\", \"ape\", \"april\"];\nvar arg11 = 3;\nvar x1 = commonPrefix(arg10, arg11);\nvar v1 = \"ap\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"teens\", \"teenager\", \"teenmar\"];\nvar arg21 = 3;\nvar x2 = commonPrefix(arg20, arg21);\nvar v2 = \"teen\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const prefix = {};\n  for (let i = 0; i < arr.length; i++) {\n    let word = arr[i];\n    let len = 0;\n    while (len < word.length && len < n && word[len] === arr[i][len]) len++;\n    prefix[word] = len;\n  }\n  const sorted = Object.entries(prefix).sort((a, b) => b[1] - a[1]);\n  return sorted[0][0];\n}\n", "\n    let prefix = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        prefix = prefix.toLowerCase();\n        let prefixExists = false;\n        let commonPrefixIndex = 0;\n        for (let j = 0; j < n; j++) {\n            if (arr[i].toLowerCase().startsWith(prefix)) {\n                prefixExists = true;\n                commonPrefixIndex = j;\n                break;\n            }\n        }\n        if (!prefixExists) break;\n        prefix = prefix.substring(commonPrefixIndex + 1);\n    }\n    return prefix;\n}\n", "\n    if (arr.length === 0) return \"\";\n    let commonPrefix = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i].length < commonPrefix.length) commonPrefix = arr[i];\n        else if (arr[i].length > commonPrefix.length && arr[i].charCodeAt(0) === commonPrefix.charCodeAt(0)) {\n            commonPrefix = commonPrefix + arr[i].substring(0, commonPrefix.length);\n        }\n    }\n    return commonPrefix.length > n? commonPrefix.substring(0, n) : commonPrefix;\n}\n", "\n  if (arr.length === 0) return \"\";\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i].length < n) continue;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j].length < n) continue;\n      if (arr[i].substring(0, n) === arr[j].substring(0, n)) return arr[i].substring(0, n);\n    }\n  }\n  return arr[0];\n}\n", "\n  let len = 0;\n  for (let i = 0; i < n; i++) {\n    let word = arr[i];\n    for (let j = 0; j < word.length; j++) {\n      if (len === 0) len = word.length;\n      if (len < word.length && word[j]!== arr[i][j]) break;\n      if (j === word.length - 1) len--;\n    }\n  }\n  return len === 0? \"\" : arr[0].substring(0, len);\n}\n"]}
{"task_id": "MBJSP/182", "prompt": "function incrementNumerics(testlist, k) {\n/**\n * * Write a function to increment the numeric values in the given strings by k.\n */\n  return testList.map(word => {\n    let num = parseInt(word.match(/\\d+/g));\n    return word.replace(num, num + k);\n  });\n}\nfunction numberCtr(str) {\n/**\n * * Write a JavaScript function to count numeric values in a given string.\n */\n    var count = 0;\n    for (var i = 0; i < str.length; i++) {\n        if (str[i] >= '0' && str[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n}\nfunction extractMax(input) {\n/**\n * * Write a function to extract the maximum numeric value from a string by using regex.\n */\n  let regex = /(\\d+)/g;\n  let matches = input.match(regex);\n  let max = Math.max(...matches);\n  return max;\n}\nfunction findCharacter(string) {\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */", "entry_point": "findCharacter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ThisIsGeeksforGeeks\";\nvar x0 = findCharacter(arg00);\nvar v0 = [[\"T\", \"I\", \"G\", \"G\"], [\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"], [], []];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Hithere2\";\nvar x1 = findCharacter(arg10);\nvar v1 = [[\"H\"], [\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"], [\"2\"], []];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"HeyFolks32\";\nvar x2 = findCharacter(arg20);\nvar v2 = [[\"H\", \"F\"], [\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"], [\"3\", \"2\"], []];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let regex = /(\\w|\\d)/g;\n  let matches = string.match(regex);\n  let character = '';\n  let count = 0;\n  for (var i = 0; i < matches.length; i++) {\n    if (matches[i] === '\\w') {\n      character = 'w';\n    } else if (matches[i] === '\\d') {\n      character = 'd';\n    } else if (matches[i] ==='') {\n      character ='';\n    }\n    count++;\n  }\n  return character;\n}\n", "\n  let regex = /[A-Za-z0-9]+/g;\n  let matches = string.match(regex);\n  let c = matches.filter(val => val.length > 0);\n  return c;\n}\n", "\n  let regex = /[A-Z\\d\\s\\!\\?-]/g;\n  let matches = string.match(regex);\n  let result = [];\n  if (matches!= null) {\n    for (var i = 0; i < matches.length; i++) {\n      result.push(matches[i]);\n    }\n  }\n  return result;\n}\n", "\n  let regex = /[A-Za-z0-9]+/g;\n  let matches = string.match(regex);\n  let max = Math.max(...matches);\n  return max;\n}\n", "\n  let regex = /[A-Za-z0-9]/g;\n  let matches = string.match(regex);\n  let max = 0;\n  for (var i = 0; i < matches.length; i++) {\n    if (matches[i].length > max) {\n      max = matches[i].length;\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/183", "prompt": "function minDifference(testlist) {\n/**\n * * Write a function to find the minimum difference in the tuple pairs of given tuples.\n */\n  const min = testList.reduce((acc, item) => Math.min(acc, item[1] - item[0]), 999999);\n  const minDiff = testList.reduce((acc, item) => Math.abs(item[1] - item[0]) < acc ? Math.abs(item[1] - item[0]) : acc, 999999);\n\n  return minDiff === 999999 ? -1 : minDiff;\n}\nfunction pairOrSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of xor of all pairs of numbers in the given array.\n */\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += (arr[i] ^ arr[j]);\n        }\n    }\n    return sum;\n}\nfunction findMinDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return minDiff;\n}\nfunction countPairs(arr, n, k) {\n/**\n * * Write a function to count all the distinct pairs having a difference of k in any array.\n */", "entry_point": "countPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 3, 4, 2];\nvar arg01 = 5;\nvar arg02 = 3;\nvar x0 = countPairs(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 12, 16, 4, 0, 20];\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = countPairs(arg10, arg11, arg12);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 1, 3, 4];\nvar arg21 = 5;\nvar arg22 = 2;\nvar x2 = countPairs(arg20, arg21, arg22);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (Math.abs(arr[i] - arr[j]) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let pairsCount = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n                pairsCount += 1;\n            }\n        }\n    }\n    return pairsCount;\n}\n", "\n    let res = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] + arr[j] === k) {\n                res++;\n            }\n        }\n    }\n    return res;\n}\n", "\n    let pairs = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff == k) {\n                pairs++;\n            }\n        }\n    }\n    return pairs;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/184", "prompt": "function removeTuple(testlist) {\n/**\n * * Write a function to remove all tuples with all \"none\" values in the given tuple list.\n */\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.every(val => val === null)) {\n      continue;\n    }\n    newList.push(tuple);\n  }\n  return newList;\n}\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction cummulativeSum(testlist) {\n/**\n * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      sum += testList[i][j];\n    }\n  }\n  return sum;\n}\nfunction greaterSpecificnum(list, num) {\n/**\n * * Write a function to find all the values in a list that are greater than a specified number.\n */", "entry_point": "greaterSpecificnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [220, 330, 500];\nvar arg01 = 200;\nvar x0 = greaterSpecificnum(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 17, 21];\nvar arg11 = 20;\nvar x1 = greaterSpecificnum(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar arg21 = 10;\nvar x2 = greaterSpecificnum(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > num) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > num) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > num) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\n", "\n  let newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > num) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > num) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/185", "prompt": "function stringLength(str1) {\n/**\n * * Write a function to find length of the string.\n */\n    return str1.length;\n}\nfunction longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction parabolaFocus(a, b, c) {\n/**\n * * Write a function to find the focus of a parabola.\n */", "entry_point": "parabolaFocus", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaFocus(arg00, arg01, arg02);\nvar v0 = [-0.3, 1.6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaFocus(arg10, arg11, arg12);\nvar v1 = [-0.4444444444444444, 2.25];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaFocus(arg20, arg21, arg22);\nvar v2 = [-1.0, 4.125];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const fx = (b * b) / (4 * a);\n  const fy = (-1 * b * c) / (2 * a);\n  return [fx, fy];\n}\n", "\n  if ((a * a) - (4 * b * c) < 0) {\n    return;\n  }\n\n  const x1 = (-a - Math.sqrt((a * a) - (4 * b * c))) / (2 * b);\n  const x2 = (-a + Math.sqrt((a * a) - (4 * b * c))) / (2 * b);\n  return [x1, x2];\n}\n", "\n  let focus = [];\n\n  let discriminant = b * b - 4 * a * c;\n  if (discriminant < 0) return focus;\n\n  discriminant = Math.sqrt(discriminant);\n  focus.push((-b + discriminant) / (2 * a));\n  focus.push((-b - discriminant) / (2 * a));\n\n  return focus;\n}\n", "\n  const delta = b * b - 4 * a * c;\n  if (delta < 0) return null;\n\n  const focus_point = (-b - Math.sqrt(delta)) / (2 * a);\n  return [focus_point, focus_point * focus_point + b * focus_point + c];\n}\n", "\n  return a * (c * c) + b * c;\n}\n"]}
{"task_id": "MBJSP/186", "prompt": "function removeMultipleSpaces(text1) {\n/**\n * * Write a function to remove multiple spaces in a string by using regex.\n */\n  return text1.replace(/\\s{2,}/g, \" \");\n}\nfunction searchLiteral(pattern, text) {\n/**\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n */\n  const patternLength = pattern.length;\n  const textLength = text.length;\n  const patternIndex = text.indexOf(pattern);\n\n  if (patternIndex === -1) {\n    return [-1, -1];\n  }\n\n  let start = patternIndex;\n  let end = patternIndex + patternLength;\n\n  while (start > 0 && text[start - 1] !== ' ') {\n    start -= 1;\n  }\n\n  while (end < textLength && text[end] !== ' ') {\n    end += 1;\n  }\n\n  return [start, end];\n}\nfunction findLiterals(text, pattern) {\n/**\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n */\n  const regex = new RegExp(pattern, \"gi\");\n  const match = text.match(regex);\n  return match ? [match[0], text.indexOf(match[0]), text.indexOf(match[0]) + match[0].length] : [];\n}\nfunction checkLiterals(text, patterns) {\n/**\n * * Write a function to search some literals strings in a string by using regex.\n */", "entry_point": "checkLiterals", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg01 = [\"fox\"];\nvar x0 = checkLiterals(arg00, arg01);\nvar v0 = \"Matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg11 = [\"horse\"];\nvar x1 = checkLiterals(arg10, arg11);\nvar v1 = \"Not Matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg21 = [\"lazy\"];\nvar x2 = checkLiterals(arg20, arg21);\nvar v2 = \"Matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const literals = findLiterals(text, patterns);\n  if (literals.length!== 0) {\n    const parts = [];\n    for (const [index, start, end] of literals) {\n      if (start!== -1) {\n        parts.push(text.slice(0, index));\n        parts.push(`${text[index]}:${text[start]}:${text[end]}`);\n        parts.push(text.slice(end));\n      } else {\n        parts.push(text.slice(index, end));\n      }\n    }\n    return parts.join(\"\");\n  }\n  return null;\n}\n", "\n  for (const pattern of patterns) {\n    const literals = findLiterals(text, pattern);\n\n    if (literals.length > 0) {\n      literals.unshift(0);\n      return literals;\n    }\n  }\n  return [];\n}\n", "\n  const literals = [];\n  patterns.forEach(pattern => {\n    const [start, end] = searchLiteral(pattern, text);\n\n    if (start!== -1 && end!== -1) {\n      literals.push(pattern);\n    }\n  });\n  return literals;\n}\n", "\n  const literals = [];\n  for (let i = 0; i < patterns.length; i++) {\n    const match = findLiterals(text, patterns[i]);\n    if (match.length > 0) {\n      literals.push([patterns[i], match]);\n    }\n  }\n  return literals;\n}\n", "\n  const regex = new RegExp(patterns.join(\"|\"), \"gi\");\n  return text.match(regex);\n}\n"]}
{"task_id": "MBJSP/187", "prompt": "function longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction lbs(arr) {\n/**\n * * Write a function to find the longest bitonic subsequence for the given array.\n */\n    var n = arr.length,\n        lis = Array(n).fill(1),\n        lds = Array(n).fill(1),\n        max = 0;\n\n    for (var i = 1; i < n; i++) {\n        for (var j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n            if (arr[i] < arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n        max = Math.max(max, lis[i] + lds[i] - 1);\n    }\n    return max;\n}\nfunction lcsOfThree(x, y, z, m, n, o) {\n/**\n * * Write a function to find the longest common subsequence for the given three string sequence.\n */\n    if (x.length === 0 || y.length === 0 || z.length === 0) return 0;\n    if (x[0] === y[0] && x[0] === z[0]) return 1 + lcsOfThree(x.substring(1), y.substring(1), z.substring(1), m, n, o);\n    const a = lcsOfThree(x.substring(1), y, z, m, n, o);\n    const b = lcsOfThree(x, y.substring(1), z, m, n, o);\n    const c = lcsOfThree(x, y, z.substring(1), m, n, o);\n    return a > b && a > c ? a : b > c ? b : c;\n}\nfunction longestCommonSubsequence(x, y, m, n) {\n/**\n * * Write a function to find the longest common subsequence for the given two sequences.\n */", "entry_point": "longestCommonSubsequence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AGGTAB\";\nvar arg01 = \"GXTXAYB\";\nvar arg02 = 6;\nvar arg03 = 7;\nvar x0 = longestCommonSubsequence(arg00, arg01, arg02, arg03);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABCDGH\";\nvar arg11 = \"AEDFHR\";\nvar arg12 = 6;\nvar arg13 = 6;\nvar x1 = longestCommonSubsequence(arg10, arg11, arg12, arg13);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AXYT\";\nvar arg21 = \"AYZX\";\nvar arg22 = 4;\nvar arg23 = 4;\nvar x2 = longestCommonSubsequence(arg20, arg21, arg22, arg23);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const lcs = Array(m + 1).fill(1);\n  const arr = Array(m + 1).fill(0);\n  for (let i = 0; i < m + 1; i++) {\n    for (let j = 0; j < n + 1; j++) {\n      if (i < 1 || j < 1) arr[i] = 0;\n      else if (x[i - 1] === y[j - 1]) {\n        arr[i] = arr[i - 1] + 1;\n        lcs[i] = arr[i];\n      } else {\n        arr[i] = lcs[i - 1];\n      }\n    }\n  }\n  return lcs[m];\n}\n", "\n    if (x.length === 0 || y.length === 0) return 0;\n    let result = 0,\n        arr = new Array(n + 1).fill(0),\n        i = 0,\n        j = 0;\n    arr[0] = 0;\n    while (i < m && j < n) {\n        if (x[i] === y[j]) {\n            arr[++j] = arr[j - 1] + 1;\n        } else {\n            if (arr[j] > 0) {\n                arr[j] = 0;\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (arr[j] > result) {\n            result = arr[j];\n        }\n    }\n    return result;\n}\n", "\n    const lcs = Array(m + n).fill(0);\n    const next = Array(m + n).fill(null);\n    for (let i = 0; i < m + n; i++) {\n        if (x[0] === y[0]) {\n            lcs[i] = 1;\n            next[i] = [0];\n        } else {\n            lcs[i] = 0;\n            next[i] = [0];\n        }\n    }\n    for (let i = 1; i < m + n; i++) {\n        for (let j = 1; j < m + n; j++) {\n            if (x[i] === y[j]) {\n                lcs[i] = lcs[i - 1] + 1;\n                next[i][j] = next[i - 1][j - 1];\n            } else {\n                if (lcs[i - 1] > lcs[j - 1]) {\n                    next[i][j] = next[i - 1][j];\n                } else {\n                    next[i][j] = next[i][j - 1];\n                }\n            }\n        }\n    }\n    let result = 0,\n        index = 0;\n    for (let i = 0; i < m + n; i++) {\n        for (let j = 0; j < m + n; j++) {\n            if (lcs[i] === lcs[j]) {\n                if (next[i][j]!== null) {\n                    result = Math.max(result, lcs[i]);\n                    index = i;\n                }", "\n    let lcs = Array(m + 1).fill(0);\n    let len = 0;\n    for (var i = 1; i <= m; i++) {\n        for (var j = 1; j <= n; j++) {\n            if (x[i - 1] === y[j - 1]) {\n                lcs[i] = lcs[i - 1] + 1;\n                if (lcs[i] > len) {\n                    len = lcs[i];\n                }\n            }\n        }\n    }\n    return len;\n}\n", "\n    let dp = new Array(m + 1).fill(0);\n    let res = 0;\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (x[i] === y[j]) {\n                dp[i + 1] = 1 + dp[i];\n                res = Math.max(dp[i + 1], res);\n            }\n        }\n    }\n    return res;\n}\n"]}
{"task_id": "MBJSP/188", "prompt": "function sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction check(arr, n) {\n/**\n * * Write a JavaScript function to check whether an array can be sorted or not by picking only the corner elements.\n */\n    if (arr.length === 0) return true;\n    if (arr.length === 1) return arr[0] <= n;\n    if (arr[0] > n) return false;\n    if (arr[arr.length - 1] > n) return false;\n    return check(arr.slice(1, arr.length - 1), n) || check(arr.slice(0, arr.length - 1), n);\n}\nfunction sumSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented by sum of two squares or not.\n */\n    let square = Math.sqrt(n);\n    return square * square === n;\n}\nfunction prodSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented by product of two squares or not.\n */", "entry_point": "prodSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar x0 = prodSquare(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = prodSquare(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar x2 = prodSquare(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let square = Math.sqrt(n);\n    return square * square * square === n;\n}\n", "\n    let square = Math.sqrt(n);\n    return square * square * square === n;\n}\n", "\n    let square = Math.sqrt(n);\n    return square * square === n;\n}\n", "\n    let square = Math.sqrt(n);\n    return Math.pow(square, 2) * Math.pow(square, 2) === n;\n}\n", "\n    let square = Math.sqrt(n);\n    return square * square * square === n;\n}\n"]}
{"task_id": "MBJSP/189", "prompt": "function lcm(x, y) {\n/**\n * * Write a JavaScript function to find lcm of two positive integers.\n */\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    var gcd = function(a, b) {\n        if(b == 0) {\n            return a;\n        }\n        else {\n            return gcd(b, a % b);\n        }\n    };\n    return ((x * y) / gcd(x, y));\n}\nfunction firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit in factorial of a given number.\n */\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    let firstDigit = factorial.toString().split('').map(Number)[0];\n    return firstDigit;\n}\nfunction findFirstMissing(array, start, end) {\n/**\n * * Write a JavaScript function to find the smallest missing number from the given array.\n */\n  let result = end + 1;\n\n  for (let i = start; i <= end; i++) {\n    if (array.includes(i) === false) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction firstMissingPositive(arr, n) {\n/**\n * * Write a JavaScript function to find the first missing positive number.\n */", "entry_point": "firstMissingPositive", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, -1, 5];\nvar arg01 = 5;\nvar x0 = firstMissingPositive(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, -1, -2, 1, 5, 8];\nvar arg11 = 6;\nvar x1 = firstMissingPositive(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 5, -8];\nvar arg21 = 5;\nvar x2 = firstMissingPositive(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = arr.length + 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] <= n && arr[i]!== i+1) {\n      result = Math.min(result, arr[i] - 1);\n    }\n  }\n  return result;\n}\n", "\n  let result = arr.length + 1;\n\n  for (let i = 0; i < arr.length; i++) {\n    let index = Math.abs(arr[i]) - 1;\n    if (index < n && arr[index] > 0) {\n      arr[index] = -1 * arr[index];\n    }\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result = i + 1;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  let k = 0;\n  while (k < n) {\n    if (arr[k] < n && arr[k] > 0 && arr[k]!== k + 1) {\n      arr[arr[k] - 1] = arr[k] ^ 1;\n      arr[k] = arr[k] ^ 1;\n    } else {\n      k++;\n    }\n  }\n\n  let i = 0;\n  while (i < n) {\n    if (arr[i]!== i + 1) {\n      return i + 1;\n    }\n    i++;\n  }\n  return n + 1;\n}\n", "\n  let arr_ = [];\n  for(let i=0; i<=n-1; i++) {\n    if(arr[i] >= 0 && arr[i] <= n) {\n      arr_.push(arr[i]);\n    }\n  }\n  let result = findFirstMissing(arr_, 0, arr_.length - 1);\n  return result;\n}\n", "\n  let result = n + 1;\n  let j = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= n && arr[i] > 0) {\n      arr[j++] = arr[i];\n    }\n  }\n  for (let i = 0; i < j; i++) {\n    if (arr[i]!= i + 1) {\n      result = i + 1;\n      break;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/190", "prompt": "function removals(arr, n, k) {\n/**\n * * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n */\n  let amin = 0;\n  let amax = arr.length - 1;\n  let count = 0;\n  while (amin <= amax) {\n    let mid = Math.floor((amin + amax) / 2);\n    if (arr[mid] < n) {\n      amin = mid + 1;\n    } else if (arr[mid] > n) {\n      amax = mid - 1;\n    } else {\n      count++;\n      if (mid - 1 >= 0 && arr[mid - 1] > n) {\n        amin = mid - 1;\n      } else if (mid + 1 < arr.length && arr[mid + 1] < n) {\n        amax = mid + 1;\n      } else {\n        amin = mid + 1;\n      }\n    }\n  }\nfunction checkVow(string, vowels) {\n/**\n * * Write a JavaScript function to count number of vowels in the string.\n */\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.includes(string[i])) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction countList(inputlist) {\n/**\n * * Write a JavaScript function to count the number of lists in a given number of lists.\n */\n    let count = 0;\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction countIntgralPoints(x1, y1, x2, y2) {\n/**\n * * Write a JavaScript function to count the number of integral co-ordinates that lie inside a square.\n */", "entry_point": "countIntgralPoints", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 1;\nvar arg02 = 4;\nvar arg03 = 4;\nvar x0 = countIntgralPoints(arg00, arg01, arg02, arg03);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar arg12 = 1;\nvar arg13 = 2;\nvar x1 = countIntgralPoints(arg10, arg11, arg12, arg13);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 2;\nvar arg22 = 6;\nvar arg23 = 4;\nvar x2 = countIntgralPoints(arg20, arg21, arg22, arg23);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    if (y1 > y2) {\n        for (let i = y1; i <= y2; i++) {\n            if (x1 < x2 && x1 < i && i < x2) {\n                count++;\n            }\n            if (x1 > x2 && x1 > i && i > x2) {\n                count++;\n            }\n        }\n    } else if (y1 < y2) {\n        for (let i = y1; i <= y2; i++) {\n            if (x1 > x2 && x1 > i && i > x2) {\n                count++;\n            }\n            if (x1 < x2 && x1 < i && i < x2) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n  const x = [x1, x2];\n  const y = [y1, y2];\n  const sqr = Math.pow(x[1] - x[0], 2) + Math.pow(y[1] - y[0], 2);\n  return (Math.floor((sqr - (Math.pow(x[1] - x[0], 2) + Math.pow(y[1] - y[0], 2))) / 2) + Math.floor((sqr - (Math.pow(x[1] - x[0], 2) + Math.pow(y[1] - y[0], 2))) / 2)) / 2;\n}\n", "\n    return (x2 - x1) * (y2 - y1);\n}\n", "\n    let count = 0;\n    let x1 = x1 - 0.001;\n    let x2 = x2 - 0.001;\n    let y1 = y1 - 0.001;\n    let y2 = y2 - 0.001;\n    for (let x = x1; x <= x2; x++) {\n        for (let y = y1; y <= y2; y++) {\n            if (x >= 0 && x <= 1 && y >= 0 && y <= 1) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = Math.floor(x1); i <= Math.floor(x2); i++) {\n        for (let j = Math.floor(y1); j <= Math.floor(y2); j++) {\n            if ((i + j) % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/191", "prompt": "function checkMonthnumNumber(monthnum1) {\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\n    return monthnum1 % 2 === 0 ? true : false;\n}\nfunction checkMonthnumb(monthname2) {\n/**\n * * Write a function to check whether the given month name contains 31 days or not.\n */\n    if (monthname2 === \"January\" || monthname2 === \"March\" || monthname2 === \"May\" || monthname2 === \"July\" || monthname2 === \"August\" || monthname2 === \"October\" || monthname2 === \"December\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction checkMonthnumberNumber(monthnum3) {\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\n  if (monthnum3 >= 1 && monthnum3 <= 12) {\n    if (monthnum3 === 2) {\n      if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n        return true;\n      }\n    } else if (monthnum3 === 4 || monthnum3 === 6 || monthnum3 === 9 || monthnum3 === 11) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction checkMonthnumber(monthname3) {\n/**\n * * Write a function to check whether the given month name contains 30 days or not.\n */", "entry_point": "checkMonthnumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"February\";\nvar x0 = checkMonthnumber(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"June\";\nvar x1 = checkMonthnumber(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"April\";\nvar x2 = checkMonthnumber(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (monthname3 === \"February\" || monthname3 === \"April\" || monthname3 === \"May\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n    if (new Date().getMonth() >= 1 && new Date().getMonth() <= 12) {\n      if (monthname3 === \"February\") {\n        if (new Date().getDate() > 29) {\n          return true;\n        }\n        else {\n          return false;\n        }\n      } else if (monthname3 === \"April\" || monthname3 === \"May\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n/**\n * * Write a ", "\n  if (monthname3 === \"January\" || monthname3 === \"February\" || monthname3 === \"March\" || monthname3 === \"April\" || monthname3 === \"May\" || monthname3 === \"June\" || monthname3 === \"July\" || monthname3 === \"August\" || monthname3 === \"September\" || monthname3 === \"October\" || monthname3 === \"November\" || monthname3 === \"December\") {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "\n  if (monthname3 === \"February\" || monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n    return true;\n  }\n  return false;\n}\n", "\n  if (monthname3 === \"February\" || monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "\n    if (monthname3 === \"February\" || monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n      return true;\n    }\n    else {\n        return false;\n    }\n}\n"]}
{"task_id": "MBJSP/192", "prompt": "function textMatchZeroOne(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or one 'b'.\n */\n  if (text.match(/a(b)?/)) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}\nfunction textUppercaseLowercase(text) {\n/**\n * * Write a function to find the sequences of one upper case letter followed by lower case letters.\n */\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\nfunction uniqueElement(arr, n) {\n/**\n * * Write a JavaScript function to check whether an array contains only one distinct element or not.\n */\n    let set = new Set(arr);\n    if (set.size === 1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\nfunction checkString(str) {\n/**\n * * Write a JavaScript function to check whether a string has atleast one letter and one number.\n */", "entry_point": "checkString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"thishasboth29\";\nvar x0 = checkString(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = checkString(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const regex = /[a-zA-Z0-9]+/g;\n    const result = str.match(regex);\n    if (result) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "\n    return /(\\w)(\\d)/.test(str);\n}\n", "\n  if (str.length > 0 && str.match(/\\w+\\d?/)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "\n    const regex = /\\w*\\d*/g;\n    const result = str.match(regex);\n    if (result) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "\n  const regex = /^[a-zA-Z0-9]+$/;\n  if (regex.test(str)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n"]}
{"task_id": "MBJSP/193", "prompt": "function consecutiveDuplicates(nums) {\n/**\n * * Write a function to remove consecutive duplicates of a given list.\n */\n  let result = [];\n  let i = 0;\n  let j = 1;\n  while (j < nums.length) {\n    if (nums[i] === nums[j]) {\n      j++;\n    } else {\n      result.push(nums[i]);\n      i = j;\n      j++;\n    }\n  }\n  result.push(nums[i]);\n  return result;\n}\nfunction removeNested(testtup) {\n/**\n * * Write a function to remove the nested record from the given tuple.\n */\n  let nested = false;\n  let nestedIdx = testTup.length - 1;\n\n  while (!nested && nestedIdx >= 0) {\n    if (Array.isArray(testTup[nestedIdx])) {\n      nested = true;\n    } else {\n      nestedIdx--;\n    }\n  }\n\n  if (nested) {\n    testTup.splice(nestedIdx, 1);\n  }\n\n  return testTup;\n}\nfunction removeDuplicate(list1) {\n/**\n * * Write a function to remove duplicates from a list of lists.\n */\n  let list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (!list2.includes(list1[i][j])) {\n        list2.push(list1[i][j]);\n      }\n    }\n  }\n  return list2;\n}\nfunction removeTuple(testtup) {\n/**\n * * Write a function to remove the duplicates from the given tuple.\n */", "entry_point": "removeTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 2, 3, 5, 1, 1, 3];\nvar x0 = removeTuple(arg00);\nvar v0 = [1, 2, 3, 5];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 4, 5, 6, 6, 7, 8, 8];\nvar x1 = removeTuple(arg10);\nvar v1 = [2, 3, 4, 5, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 12, 13, 11, 11, 12, 14, 13];\nvar x2 = removeTuple(arg20);\nvar v2 = [11, 12, 13, 14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let tuple = [];\n  for (let i = 0; i < testtup.length; i++) {\n    if (!tuple.includes(testtup[i])) {\n      tuple.push(testtup[i]);\n    }\n  }\n  return tuple;\n}\n", "\n  let testtup2 = testtup.map(el => {\n    let newElem = el;\n    for (let i = 0; i < el.length; i++) {\n      if (newElem[i]!== testtup[i][i]) {\n        newElem[i] = testtup[i][i];\n      }\n    }\n    return newElem;\n  });\n  return testtup2;\n}\n", "\n  let list1 = [];\n  let list2 = [];\n  let count = 0;\n  for (let i = 0; i < testtup.length; i++) {\n    let j = testtup[i];\n    count++;\n    if (list1.includes(j)) {\n      if (j!== 'null') {\n        if (j!== '[]') {\n          list2.push(j);\n        }\n      }\n    } else {\n      list1.push(j);\n    }\n  }\n  list1.push(count);\n  return list1;\n}\n", "\n  let newTup = [];\n  let copy = testtup;\n  let temp = [];\n  let j = 0;\n  while (j < copy.length) {\n    if (copy[j]!== temp[j]) {\n      temp[j] = copy[j];\n      newTup.push(temp[j]);\n    }\n    j++;\n  }\n  return newTup;\n}\n", "\n  let result = testtup.clone();\n  result.pop();\n  result.pop();\n  return result;\n}\n"]}
{"task_id": "MBJSP/194", "prompt": "function minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to count minimum number of swaps required to convert one binary string to another.\n */\n    // Write your code here\n    count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return count / 2;\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction tupleToFloat(testtup) {\n/**\n * * Write a function to convert the given tuple to a floating-point number.\n */\n  var num = parseFloat(testTup[0] + \".\" + testTup[1])\n  return num\n}\nfunction isDecimal(num) {\n/**\n * * Write a function to check a decimal with a precision of 2.\n */\n  return /^-?\\d*\\.?\\d{0,2}$/.test(num);\n}\nfunction octalToDecimal(n) {\n/**\n * * Write a JavaScript function to convert octal number to decimal number.\n */", "entry_point": "octalToDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar x0 = octalToDecimal(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = octalToDecimal(arg10);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 40;\nvar x2 = octalToDecimal(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  let num = n.toString();\n  let base = 8;\n  let exp = num.length - 1;\n  for (let i = exp; i >= 0; i--) {\n    let index = num[i];\n    let val = 0;\n    if (index >= '0' && index <= '7') {\n      val = index - '0';\n    } else {\n      val = 1;\n    }\n    result += val * Math.pow(base, exp - i);\n  }\n  return result;\n}\n", "\n    let c = n.split('o');\n    let b = parseInt(c[0], 8);\n    let d = parseInt(c[1], 8);\n    let e = parseInt(c[2], 8);\n    let f = parseInt(c[3], 8);\n    let g = parseInt(c[4], 8);\n    let h = parseInt(c[5], 8);\n    let i = parseInt(c[6], 8);\n    let j = parseInt(c[7], 8);\n    let k = parseInt(c[8], 8);\n    let l = parseInt(c[9], 8);\n    let m = parseInt(c[10], 8);\n    let n = parseInt(c[11], 8);\n    let o = parseInt(c[12], 8);\n    let p = parseInt(c[13], 8);\n    let q = parseInt(c[14], 8);\n    let r = parseInt(c[15], 8);\n    let s = parseInt(c[16], 8);\n    let t = parseInt(c[17], 8);\n    let u = parseInt(c[18], 8);\n    let v = parseInt(c[19], 8);\n    let w = parseInt(c[20], 8);\n    let x = parseInt(c[21], 8);\n    let y = parseInt(c[22], 8);\n    let z = parseInt(c[23], 8);\n    let sum = b + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z;", "\n  let check = n.length;\n  var sum = 0;\n  for (let i = 0; i < check; i++) {\n    if (n[i] === \"0\" || n[i] === \"1\" || n[i] === \"2\" || n[i] === \"3\" || n[i] === \"4\" || n[i] === \"5\" || n[i] === \"6\" || n[i] === \"7\") {\n      sum += parseInt(n[i], 8);\n    } else {\n      return \"Not Possible\";\n    }\n  }\n  return sum;\n}\n", "\n  return parseInt(n, 8)\n}\n", "\n  var num = n.toString(8);\n  return parseInt(num, 8);\n}\n"]}
{"task_id": "MBJSP/195", "prompt": "function findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction first(arr, x, n) {\n/**\n * * Write a JavaScript function to find the first position of an element in a sorted array.\n */", "entry_point": "first", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 6];\nvar arg01 = 6;\nvar arg02 = 6;\nvar x0 = first(arg00, arg01, arg02);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 3, 2, 2, 4, 2];\nvar arg11 = 2;\nvar arg12 = 9;\nvar x1 = first(arg10, arg11, arg12);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 1;\nvar arg22 = 3;\nvar x2 = first(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = Math.floor((start + end) / 2);\n  while (arr[mid]!== x && start < end) {\n    if (x < arr[mid]) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  if (arr[mid] === x) {\n    return mid;\n  }\n  return -1;\n}\n", "\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = Math.floor((start + end) / 2);\n  while (arr[mid]!== x && start < end) {\n    if (x < arr[mid]) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  if (arr[mid] === x) {\n    return mid;\n  }\n  return -1;\n}\n", "\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid]!== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\n", "\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid]!== x && start < end) {\n        if (x > arr[mid]) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\n", "\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid]!== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\n"]}
{"task_id": "MBJSP/196", "prompt": "function sumNum(numbers) {\n/**\n * * Write a function to add all the numbers in a list and divide it with the length of the list.\n */\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\nfunction removeLength(teststr, k) {\n/**\n * * Write a function to remove all the words with k length in the given string.\n */\n  let str = testStr.split(' ');\n  let newStr = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].length !== k) {\n      newStr.push(str[i]);\n    }\n  }\n  return newStr.join(' ');\n}\nfunction removeTuple(testlist) {\n/**\n * * Write a function to remove all tuples with all \"none\" values in the given tuple list.\n */\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.every(val => val === null)) {\n      continue;\n    }\n    newList.push(tuple);\n  }\n  return newList;\n}\nfunction removeTuples(testlist, k) {\n/**\n * * Write a function to remove all the tuples with length k.\n */", "entry_point": "removeTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]];\nvar arg01 = 1;\nvar x0 = removeTuples(arg00, arg01);\nvar v0 = [[4, 5], [8, 6, 7], [3, 4, 6, 7]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]];\nvar arg11 = 2;\nvar x1 = removeTuples(arg10, arg11);\nvar v1 = [[1, 2, 3], [3, 4, 6, 7]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]];\nvar arg21 = 3;\nvar x2 = removeTuples(arg20, arg21);\nvar v2 = [[4, 3], [1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.length!== k) {\n      newList.push(tuple);\n    }\n  }\n  return newList;\n}\n", "\n  let newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.length!== k) {\n      newList.push(tuple);\n    }\n  }\n  return newList;\n}\n", "\n  const newList = [];\n  for (let i = 0; i < testlist.length; i++) {\n    const tuple = testlist[i];\n    if (tuple.length!== k) {\n      newList.push(tuple);\n    }\n  }\n  return newList;\n}\n", "\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.length!== k) {\n      newList.push(tuple);\n    }\n  }\n  return newList;\n}\n", "\n  const newList = [];\n  for (let i = 0; i < testlist.length; i++) {\n    const tuple = testlist[i];\n    if (tuple.length!== k) {\n      newList.push(tuple);\n    }\n  }\n  return newList;\n}\n"]}
{"task_id": "MBJSP/197", "prompt": "function maxSimilarIndices(testlist1, testlist2) {\n/**\n * * Write a function to find the maximum of similar indices in two lists of tuples.\n */\n  const result = [];\n  for (let i = 0; i < testList1.length; i++) {\n    const similar = testList2.filter((item) => item[0] === testList1[i][0]);\n    if (similar.length > 0) {\n      result.push(similar.map((item) => item[1]));\n    }\n  }\n  return result;\n}\nfunction findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction tupleModulo(testtup1, testtup2) {\n/**\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n */\n  return testTup1.map((element, index) => element % testTup2[index]);\n}\nfunction findExponentio(testtup1, testtup2) {\n/**\n * * Write a function to perform the exponentiation of the given two tuples.\n */", "entry_point": "findExponentio", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 5, 6];\nvar arg01 = [5, 6, 7, 5];\nvar x0 = findExponentio(arg00, arg01);\nvar v0 = [100000, 4096, 78125, 7776];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 5, 6, 7];\nvar arg11 = [6, 7, 8, 6];\nvar x1 = findExponentio(arg10, arg11);\nvar v1 = [1771561, 78125, 1679616, 117649];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 6, 7, 8];\nvar arg21 = [7, 8, 9, 7];\nvar x2 = findExponentio(arg20, arg21);\nvar v2 = [35831808, 1679616, 40353607, 2097152];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const exponent = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    exponent.push(Math.pow(testTup1[i], testTup2[i]));\n  }\n  return exponent;\n}\n\n/*--- Results ---*/\nconst expected = [\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0]\n  ];\nconst result = [\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0]\n  ];\n\n/*--- Tests ---*/\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const exponent = Math.pow(testtup1[i], testtup2[i]);\n    result.push(exponent);\n  }\n  return result;\n}\n", "\n  return testTup1.map((element, index) => element ** testTup2[index]);\n}\n", "\n  return testTup1.map((element, index) => Math.pow(element, testTup2[index]));\n}\n", "\n  return testTup1.map((element, index) => element * Math.pow(testTup2[index], element));\n}\n"]}
{"task_id": "MBJSP/198", "prompt": "function maximumSegments(n, a, b, c) {\n/**\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n */\n  // O(n)\n  if (!n || !a || !b || !c) return null;\n\n  let dp = [];\n  dp[0] = 0;\n\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(\n      ...[\n        // if current segment can be formed with a, b and c,\n        dp[i - a] + 1,\n        dp[i - b] + 1,\n        dp[i - c] + 1,\n      ].filter((e) => e > 0)\n    );\n  }\n\n  return dp[n];\n}\nfunction maxSumOfThreeConsecutive(arr, n) {\n/**\n * * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n */\n  let max = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  for (let i = 0; i < n; i++) {\n    temp += arr[i];\n  }\n  for (let i = 0; i < n; i++) {\n    temp2 += arr[i];\n    temp3 += arr[i];\n  }\n  if (temp > max) {\n    max = temp;\n  }\n  if (temp2 > max) {\n    max = temp2;\n  }\n  if (temp3 > max) {\n    max = temp3;\n  }\n  return max;\n}\nfunction triangleArea(r) {\n/**\n * * Write a JavaScript function to find the largest triangle that can be inscribed in the semicircle.\n */\n    if(r === 0) return 0;\n    else if(r === -1) return -1;\n    else if(r === 2) return 4;\n    else {\n        return (2*r*r)/(1.0*Math.sin(Math.PI/3));\n    }\n}\nfunction largestTriangle(a, b) {\n/**\n * * Write a function to find the largest triangle that can be inscribed in an ellipse.\n */", "entry_point": "largestTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 2;\nvar x0 = largestTriangle(arg00, arg01);\nvar v0 = 10.392304845413264;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar x1 = largestTriangle(arg10, arg11);\nvar v1 = 4.639421805988064;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 1;\nvar x2 = largestTriangle(arg20, arg21);\nvar v2 = 105.2220865598093;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let x = a * b;\n  let y = a * a;\n  let a2 = a * a;\n  let b2 = b * b;\n  if (x > b2 || x > a2 || y > b2 || y > a2) return null;\n  else {\n      let w = Math.sqrt(x - a2);\n      let h = Math.sqrt(y - b2);\n      return new Triangle(new Point(0,0), new Point(w, h));\n    }\n}\n\n", "\n  if (a > b) {\n    let swap = a;\n    a = b;\n    b = swap;\n  }\n  let area = a*b/2;\n  let radius = a/2;\n  let smallestRadius = b/2;\n  let areaSmaller = triangleArea(smallestRadius);\n  let areaRadius = triangleArea(radius);\n  let areaLarger = triangleArea(b);\n  let largestArea = Math.max(areaRadius, Math.max(areaSmaller, areaLarger));\n  return largestArea;\n}\n", "\n  // O(n^2)\n  if (!a ||!b) return null;\n\n  let max = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  for (let i = 1; i < a; i++) {\n    for (let j = 1; j < b; j++) {\n      temp = triangleArea(i, j);\n      temp2 = triangleArea(i, a - j);\n      temp3 = triangleArea(a - i, b - j);\n      if (temp > max) {\n        max = temp;\n      }\n      if (temp2 > max) {\n        max = temp2;\n      }\n      if (temp3 > max) {\n        max = temp3;\n      }\n    }\n  }\n\n  return max;\n}\n", "\n  // O(n^2)\n  if (!a ||!b) return null;\n\n  let r1 = a / 2;\n  let r2 = b / 2;\n\n  let x = Math.sqrt(r1*r1 - r2*r2);\n  let y = Math.sqrt(r2*r2 - r1*r1);\n\n  let max = -Infinity;\n  let points = [];\n  for (let i = 0; i < a; i++) {\n    for (let j = 0; j < b; j++) {\n      points.push([i, j]);\n    }\n  }\n\n  for (let i = 0; i < points.length; i++) {\n    let [x, y] = points[i];\n    let temp = Math.sqrt((x - r1) * (x - r1) + (y - r2) * (y - r2));\n    if (temp > max) max = temp;\n  }\n\n  return max;\n}\n", "\n  // if(a === 0) return 0;\n  // else if(a === -1) return -1;\n  // else if(a === 2) return 4;\n  // else {\n  //     return (2*a*a)/(1.0*Math.sin(Math.PI/3));\n  // }\n}\n"]}
{"task_id": "MBJSP/199", "prompt": "function areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction countFac(n) {\n/**\n * * Write a JavaScript function to count the number of distinct power of prime factor of given number.\n */\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i === 0) {\n          n /= i;\n          count++;\n        } else {\n          j++;\n        }\n      }\n    }\n  }\n  return count;\n}\nfunction getLudic(n) {\n/**\n * * Write a function to get a lucid number smaller than or equal to n.\n */\n    return [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43].filter(\n        num => num <= n);\n}\nfunction highestPowerOf2(n) {\n/**\n * * Write a JavaScript function to find highest power of 2 less than or equal to given number.\n */", "entry_point": "highestPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = highestPowerOf2(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar x1 = highestPowerOf2(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 32;\nvar x2 = highestPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let k = 2;\n    let max = Math.pow(2, Math.ceil(Math.log2(n)));\n    while (n <= max) {\n        k = 2 * k;\n        n = n * k;\n    }\n    return k;\n}\n", "\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) count++;\n    }\n    return count;\n}\n", "\n    let arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824];\n    return arr.filter(num => num <= n)[n % arr.length];\n}\n", "\n    let highPowerOf2 = 0;\n    for (let i = 0; i < 32; i++) {\n      if (n & (1 << i)) {\n        highPowerOf2 = i;\n      }\n    }\n    return highPowerOf2;\n}\n", "\n  let max = Math.pow(2, 0);\n  for (let i = 1; i < n; i++) {\n    if (i % 2!== 0) {\n      max = i;\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/200", "prompt": "function findAdverbs(text) {\n/**\n * * Write a function to find all adverbs and their positions in a given sentence by using regex.\n */\n  const adverbs = []\n  const regex = /\\w+ly/g\n  let match\n\n  while ((match = regex.exec(text)) !== null) {\n    adverbs.push({ start: match.index, end: match.index + match[0].length })\n  }\n\n  return adverbs.map(adj => `${adj.start}-${adj.end}: ${text.substring(adj.start, adj.end)}`).join(\"\\n\")\n}\nfunction cummulativeSum(testlist) {\n/**\n * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      sum += testList[i][j];\n    }\n  }\n  return sum;\n}\nfunction removeTuple(testlist) {\n/**\n * * Write a function to remove all tuples with all \"none\" values in the given tuple list.\n */\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.every(val => val === null)) {\n      continue;\n    }\n    newList.push(tuple);\n  }\n  return newList;\n}\nfunction positionMax(list1) {\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */", "entry_point": "positionMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54];\nvar x0 = positionMax(arg00);\nvar v0 = [7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nvar x1 = positionMax(arg10);\nvar v1 = [7, 8, 9, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar x2 = positionMax(arg20);\nvar v2 = [11];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (max < list1[i]) {\n      max = list1[i];\n      index = i;\n    }\n  }\n  return index;\n}\n", "\n  let max = list1[0];\n  let index = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > max) {\n      index = i;\n      max = list1[i];\n    }\n  }\n  return { index, value: max }\n}\n", "\n  const max = list1.reduce((a, b) => (a > b)? a : b, 0)\n  return list1.map((val, i) => (val === max)? i : -1).filter(val => val!== -1).reduce((a, b) => (a > b)? a : b, 0)\n}\n", "\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (list1[i][j] > list1[max][j]) {\n        max = i;\n      }\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  let index = 0;\n\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (list1[i][j] > list1[max][j]) {\n        max = i;\n        index = j;\n      }\n    }\n  }\n\n  return [max, index];\n}\n"]}
{"task_id": "MBJSP/201", "prompt": "function parallelLines(line1, line2) {\n/**\n * * Write a JavaScript function to check whether two given lines are parallel or not.\n */\n    return line1[0] * line2[1] === line2[0] * line1[1]\n}\nfunction areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction chklist(lst) {\n/**\n * * Write a JavaScript function to check whether the elements in a list are same or not.\n */", "entry_point": "chklist", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"one\", \"one\", \"one\"];\nvar x0 = chklist(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"one\", \"Two\", \"Three\"];\nvar x1 = chklist(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"bigdata\", \"python\", \"Django\"];\nvar x2 = chklist(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let temp = lst[0];\n    let res = true;\n    for (let i = 1; i < lst.length; i++) {\n        if (temp!== lst[i]) res = false;\n        temp = lst[i];\n    }\n    return res;\n}\n", "\n    let result = true;\n    if (lst.length === 0) return true;\n    else if (lst.length === 1) return lst[0] === lst[0];\n    else if (lst.length >= 2) {\n        let a = lst[0];\n        let b = lst[1];\n        if (chklist(lst.slice(1)) && areEqual(a, b, lst.length - 1, lst.length)) {\n            result = true;\n        } else result = false;\n    }\n    return result;\n}\n", "\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = i + 1; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst.length; j++) {\n            if (lst[i] === lst[j]) {\n                count++;\n            }\n        }\n    }\n    return count === lst.length;\n}\n", "\n    let list = lst.sort();\n    let result = true;\n    for (let i = 1; i < list.length; i++) {\n        if (list[i]!== list[i - 1]) result = false;\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/202", "prompt": "function maxRunUppercase(teststr) {\n/**\n * * Write a function to find maximum run of uppercase characters in the given string.\n */\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i] === testStr[i].toUpperCase()) {\n      current++;\n    } else {\n      current = 0;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\nfunction removeSpaces(text) {\n/**\n * * Write a function to remove multiple spaces in a string.\n */\n  return text.replace(/\\s+/g, ' ');\n}\nfunction toggleString(string) {\n/**\n * * Write a function to toggle characters case in a string.\n */\n  return string.split(\"\").map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join(\"\");\n}\nfunction removeEven(str1) {\n/**\n * * Write a function to remove even characters in a string.\n */", "entry_point": "removeEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = removeEven(arg00);\nvar v0 = \"pto\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = removeEven(arg10);\nvar v1 = \"porm\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = removeEven(arg20);\nvar v2 = \"lnug\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let str2 = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (i % 2 === 0 && i!== 0) {\n      str2 += str1[i];\n    }\n  }\n  return str2;\n}\n", "\n  let list = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] % 2 === 0) {\n      list.push(str1[i]);\n    }\n  }\n  return list.join(\"\");\n}\n", "\n  let str2 = str1.split(\"\").map(char => {\n    if (char.length % 2 === 0) {\n      return char;\n    } else {\n      return '';\n    }\n  });\n  return str2.join(\"\");\n}\n", "\n  return str1.split(\"\").reduce((str, char) => {\n    if (char.length % 2 === 0) {\n      str = str + char;\n    }\n    return str;\n  }, \"\");\n}\n", "\n  return str1.split(\"\").map(char => {\n    return char.match(/[A-Z]/)? char.match(/[A-Z]/)[0] : char;\n  }).join(\"\");\n}\n"]}
{"task_id": "MBJSP/203", "prompt": "function lcm(x, y) {\n/**\n * * Write a JavaScript function to find lcm of two positive integers.\n */\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    var gcd = function(a, b) {\n        if(b == 0) {\n            return a;\n        }\n        else {\n            return gcd(b, a % b);\n        }\n    };\n    return ((x * y) / gcd(x, y));\n}\nfunction sumNums(x, y, m, n) {\n/**\n * * Write a function to add two integers. however, if the sum is between the given range it will return 20.\n */\n  let sum = x + y;\n  if (sum >= m && sum <= n) {\n    return 20;\n  }\n  return sum;\n}\nfunction digitDistanceNums(n1, n2) {\n/**\n * * Write a JavaScript function to find the digit distance between two integers.\n */\n    // convert to string to get the string length.\n    n1 = n1.toString();\n    n2 = n2.toString();\n\n    let difference = Math.abs(n1.length - n2.length);\n\n    if (n1.length > n2.length) {\n        difference -= 1;\n    }\n\n    let min = Math.min(n1.length, n2.length);\n\n    for (let i = 0; i < min; i++) {\n        difference += Math.abs(n1.charCodeAt(i) - n2.charCodeAt(i));\n    }\n\n    return difference;\n}\nfunction hammingDistance(n1, n2) {\n/**\n * * Write a JavaScript function to find the hamming distance between given two integers.\n */", "entry_point": "hammingDistance", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 8;\nvar x0 = hammingDistance(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = hammingDistance(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar x2 = hammingDistance(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.abs(n1 - n2);\n}\n", "\n    // convert to string to get the string length.\n    n1 = n1.toString();\n    n2 = n2.toString();\n\n    let min = Math.min(n1.length, n2.length);\n\n    for (let i = 0; i < min; i++) {\n        let distance = Math.abs(n1.charCodeAt(i) - n2.charCodeAt(i));\n        distance = distance.toString();\n        let total = 0;\n        for (let j = 0; j < distance.length; j++) {\n            if (distance[j] == '0') {\n                total += 0;\n            }\n            if (distance[j] == '1') {\n                total += 1;\n            }\n        }\n        let finalDistance = Math.abs(total - distance.length);\n        if (finalDistance > 0) {\n            return finalDistance;\n        }\n    }\n    return 0;\n}\n", "\n    let difference = Math.abs(n1.toString().length - n2.toString().length);\n\n    return difference;\n}\n", "\n    n1 = n1.toString();\n    n2 = n2.toString();\n\n    let difference = 0;\n\n    for (let i = 0; i < n1.length; i++) {\n        if (n1.charCodeAt(i)!= n2.charCodeAt(i)) {\n            difference += 1;\n        }\n    }\n    return difference;\n}\n", "\n  let n1 = n1.toString();\n  let n2 = n2.toString();\n  let difference = 0;\n  let length = Math.max(n1.length, n2.length);\n  for (let i = 0; i < length; i++) {\n    if (n1.charCodeAt(i)!= n2.charCodeAt(i)) {\n      difference++;\n    }\n  }\n  return difference;\n}\n"]}
{"task_id": "MBJSP/204", "prompt": "function countChar(str, x) {\n/**\n * * Write a JavaScript function to count occurences of a character in a repeated string.\n */\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === x) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction lastOccurenceChar(string, ch) {\n/**\n * * Write a function to find the last occurrence of a character in a string.\n */\n  const position = string.lastIndexOf(char);\n\n  if (position === -1) {\n    return null;\n  }\n\n  return position + 1;\n}\nfunction countChar(string, ch) {\n/**\n * * Write a function to count occurrence of a character in a string.\n */\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === char) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction count(s, c) {\n/**\n * * Write a JavaScript function to count the occurrence of a given character in a string.\n */", "entry_point": "count", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcc\";\nvar arg01 = \"c\";\nvar x0 = count(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ababca\";\nvar arg11 = \"a\";\nvar x1 = count(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"mnmm0pm\";\nvar arg21 = \"m\";\nvar x2 = count(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) === c.charCodeAt(0)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === c) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  return s.split(c).length - 1;\n}\n", "\n  return s.split(c).length - 1;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c) {\n      count++;\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/205", "prompt": "function maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction groupElement(testlist) {\n/**\n * * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n */\n  const result = {};\n  for (let i = 0; i < testList.length; i++) {\n    const [first, second] = testList[i];\n    if (result[second]) {\n      result[second].push(first);\n    } else {\n      result[second] = [first];\n    }\n  }\n  return result;\n}\nfunction sumElements(testtup) {\n/**\n * * Write a function to find the summation of tuple elements in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    sum += testTup[i];\n  }\n  return sum;\n}\nfunction inversionElements(testtup) {\n/**\n * * Write a function to find the inversions of tuple elements in the given tuple list.\n */", "entry_point": "inversionElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [7, 8, 9, 1, 10, 7];\nvar x0 = inversionElements(arg00);\nvar v0 = [-8, -9, -10, -2, -11, -8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 5, 6, 1, 7];\nvar x1 = inversionElements(arg10);\nvar v1 = [-3, -5, -6, -7, -2, -8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 14, 12, 13];\nvar x2 = inversionElements(arg20);\nvar v2 = [-9, -10, -12, -15, -13, -14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  for (let i = 0; i < testtup.length; i++) {\n    for (let j = i + 1; j < testtup.length; j++) {\n      if (testtup[i] > testtup[j]) {\n        result++;\n      }\n    }\n  }\n  return result;\n}\n", "\n  let inv = 0;\n  for (let i = 0; i < testTup.length - 1; i++) {\n    for (let j = i + 1; j < testTup.length; j++) {\n      if (testTup[i] > testTup[j]) {\n        inv++;\n      }\n    }\n  }\n  return inv;\n}\n", "\n  let inversion = 0;\n  for (let i = 0; i < testtup.length; i++) {\n    for (let j = 0; j < testtup.length; j++) {\n      if (i!== j && testtup[i] > testtup[j]) {\n        inversion++;\n      }\n    }\n  }\n  return inversion;\n}\n\nexport ", "\n  let inversion = 0;\n  for (let i = 0; i < testtup.length; i++) {\n    for (let j = 0; j < testtup.length; j++) {\n      if (i < j && testtup[i] > testtup[j]) {\n        inversion++;\n      }\n    }\n  }\n  return inversion;\n}\n", "\n  let inversions = 0;\n  for (let i = 0; i < testtup.length; i++) {\n    for (let j = i + 1; j < testtup.length; j++) {\n      if (testtup[i] > testtup[j]) {\n        inversions++;\n      }\n    }\n  }\n  return inversions;\n}\n"]}
{"task_id": "MBJSP/206", "prompt": "function multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction concatenateElements(testtup) {\n/**\n * * Write a function to perform the adjacent element concatenation in the given tuples.\n */", "entry_point": "concatenateElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"];\nvar x0 = concatenateElements(arg00);\nvar v0 = [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"];\nvar x1 = concatenateElements(arg10);\nvar v1 = [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"];\nvar x2 = concatenateElements(arg20);\nvar v2 = [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testtup.join('');\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n", "\n  return testtup.join(\" \");\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup.length - 1; i++) {\n    result.push(testtup[i] + testtup[i + 1]);\n  }\n  return result;\n}\nconst allFunctionNames = [\n  \"divideElements\",\n  \"multiplyElements\",\n  \"subtractElements\",\n  \"concatenateElements\",\n  \"findDissimilar\",\n  \"sortListLast\"\n];\nfor (const funcName of allFunctionNames) {\n  eval(`var ${funcName} = ", "\n  const result = [];\n  for (let i = 0; i < testtup.length - 1; i++) {\n    result.push(testtup[i] + testtup[i + 1]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/207", "prompt": "function countSamePair(nums1, nums2) {\n/**\n * * Write a function to count the same pair in two given lists using map function.\n */\n  return nums1\n    .map((n, idx) => [n, nums2[idx]])\n    .filter(([n1, n2]) => n1 === n2)\n    .length;\n}\nfunction sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction findLongestConseqSubseq(arr, n) {\n/**\n * * Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n */\n\tlet ans = 0\n\tlet count = 0\n\tarr.sort((a,b)=>a-b)\n\tv = []\n\tv.push(arr[0])\n\tfor (let i = 1; i < n; i++) {\n\t\tif (arr[i] != arr[i - 1]) {\n\t\t\tv.push(arr[i])\n\t\t}\n\t}\n\tfor (let i = 0; i < v.length; i++) {\n\t\tif (i > 0 && v[i] == v[i - 1] + 1) {\n\t\t\tcount += 1\n\t\t} else {\n\t\t\tcount = 1\n\t\t}\n\t\tans = Math.max(ans, count)\n\t}\n\treturn ans\n}\nfunction findLongestRepeatingSubseq(str) {\n/**\n * * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n */", "entry_point": "findLongestRepeatingSubseq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AABEBCDD\";\nvar x0 = findLongestRepeatingSubseq(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aabb\";\nvar x1 = findLongestRepeatingSubseq(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"aab\";\nvar x2 = findLongestRepeatingSubseq(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let maxLength = 0\n  let len = str.length\n  let arr = []\n  for (let i = 0; i < len; i++) {\n    let ch = str[i]\n    if (arr.indexOf(ch) === -1) {\n      arr.push(ch)\n    } else {\n      arr.splice(arr.indexOf(ch), 1)\n    }\n    maxLength = Math.max(maxLength, arr.length)\n  }\n  return maxLength\n}\n", "\n\tlet ans = 0\n\tlet count = 0\n\tstr.split('').sort()\n\tlet v = []\n\tv.push(str[0])\n\tfor (let i = 1; i < str.length; i++) {\n\t\tif (str[i]!= str[i - 1]) {\n\t\t\tv.push(str[i])\n\t\t}\n\t}\n\tfor (let i = 0; i < v.length; i++) {\n\t\tfor (let j = i + 1; j < v.length; j++) {\n\t\t\tif (v[i] == v[j]) {\n\t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t\tans = Math.max(ans, count)\n\t\tcount = 0\n\t}\n\treturn ans\n}\n\nclass BinaryTreeNode {\n\tconstructor(value) {\n\t\tthis.value = value\n\t\tthis.left = null\n\t\tthis.right = null\n\t}\n}\n", "\n\tlet dp = []\n\tlet ans = 0\n\tlet map = {}\n\tfor (let i = 0; i < str.length; i++) {\n\t\tdp.push(map)\n\t\tmap[str[i]] = map[str[i]] + 1 || 1\n\t}\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (dp[i][str[i]] > 1) {\n\t\t\tans = Math.max(ans, dp[i][str[i]])\n\t\t}\n\t}\n\treturn ans\n}\n", "\n\tlet ans = 0\n\tlet count = 0\n\tlet seen = new Map()\n\tlet v = []\n\tv.push(str[0])\n\tfor (let i = 1; i < str.length; i++) {\n\t\tif (seen.has(str[i])) {\n\t\t\tlet c = seen.get(str[i]) + 1\n\t\t\tseen.set(str[i], c)\n\t\t} else {\n\t\t\tseen.set(str[i], 1)\n\t\t}\n\t\tif (i > 0 && str[i] == str[i - 1] && seen.get(str[i])) {\n\t\t\tcount += seen.get(str[i])\n\t\t} else {\n\t\t\tcount = 1\n\t\t}\n\t\tans = Math.max(ans, count)\n\t}\n\treturn ans\n}\n\n```\n\n### Java\n\n```java\nimport java.util.*;\n\npublic class Solution {\n    public int longestConsecutive(int[] nums) {\n        if(nums == null || nums.length == 0){\n            return 0;\n        }\n\n        Arrays.sort(nums);\n        int max = 1;\n        int curr = 1;\n        for(int i=0; i< nums.length; i++){\n            if(i == 0 || nums[i]!= nums[i-1]){\n                curr = 1;\n            }\n\n            if(nums[i] + 1 == nums[i + 1]){\n                curr += 1;\n                max = Math.max(curr, max);\n            }", "\n\tlet m = {}\n\tlet ans = 0\n\tlet count = 0\n\tstr.split(\"\").forEach((c, idx) => {\n\t\tif (m[c]!= undefined && m[c] >= 1 && idx == m[c]) {\n\t\t\tcount += 1\n\t\t} else {\n\t\t\tm[c] = idx\n\t\t\tcount = 1\n\t\t}\n\t\tans = Math.max(ans, count)\n\t})\n\treturn ans\n}\n"]}
{"task_id": "MBJSP/208", "prompt": "function fillSpaces(text) {\n/**\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n */\n  return text.replace(/ |,|\\.|\\//g, ':');\n}\nfunction checkSubstring(string, sample) {\n/**\n * * Write a function to check if the given string starts with a substring using regex.\n */\n  const regex = new RegExp(`^${sample}`);\n  if (string.match(regex)) {\n    return \"string starts with the given substring\";\n  }\n  return \"string doesnt start with the given substring\";\n}\nfunction isDecimal(num) {\n/**\n * * Write a function to check a decimal with a precision of 2.\n */\n  return /^-?\\d*\\.?\\d{0,2}$/.test(num);\n}\nfunction isDecimal(num) {\n/**\n * * Write a function to check the given decimal with a precision of 2 by using regex.\n */", "entry_point": "isDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"123.11\";\nvar x0 = isDecimal(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"0.21\";\nvar x1 = isDecimal(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"123.1214\";\nvar x2 = isDecimal(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return /^-?\\d*\\.?\\d{0,2}$/.test(num);\n}\n", "\n  return /^-?\\d*\\.?\\d{0,2}$/.test(num);\n}\n", "\n  return /^-?\\d*\\.?\\d{0,2}$/.test(num);\n}\n", "\n  const regex = new RegExp(`^-?\\d*\\.?\\d{0,2}$`);\n  if (regex.test(num)) {\n    return true;\n  }\n  return false;\n}\n", "\n  const regex = new RegExp(`^-?\\d*\\.?\\d{0,2}$`);\n  if (num.match(regex)) {\n    return \"string contains the given decimal\";\n  }\n  return \"string doesnt contain the given decimal\";\n}\n"]}
{"task_id": "MBJSP/209", "prompt": "function getNumber(n, k) {\n/**\n * * Write a JavaScript function to find the kth element in an array containing odd elements first and then even elements.\n */\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let odd = arr.filter(x => x % 2 !== 0);\n    let even = arr.filter(x => x % 2 === 0);\n    return k <= odd.length ? odd[k - 1] : even[k - odd.length - 1];\n}\nfunction newTuple(testlist, teststr) {\n/**\n * * Write a function to create a new tuple from the given string and list.\n */\n  const tuple = [];\n  for (let i = 0; i < testList.length; i++) {\n    tuple.push(testList[i]);\n  }\n  tuple.push(testStr);\n  return tuple;\n}\nfunction heapSort(iterable) {\n/**\n * * Write a function to push all values into a heap and then pop off the smallest values one at a time.\n */\n    return iterable.map((value, index, array) => ({\n        value,\n        index: index + 1,\n        priority: value\n    }))\n        .sort((a, b) => a.priority - b.priority)\n        .map(({ index, value }) => value);\n}\nfunction heapReplace(heap, a) {\n/**\n * * Write a function to delete the smallest element from the given heap and then insert a new item.\n */", "entry_point": "heapReplace", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 44, 68, 21, 39, 23, 89];\nvar arg01 = 21;\nvar x0 = heapReplace(arg00, arg01);\nvar v0 = [21, 25, 23, 44, 39, 68, 89];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 44, 68, 21, 39, 23, 89];\nvar arg11 = 110;\nvar x1 = heapReplace(arg10, arg11);\nvar v1 = [23, 25, 68, 44, 39, 110, 89];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25, 44, 68, 21, 39, 23, 89];\nvar arg21 = 500;\nvar x2 = heapReplace(arg20, arg21);\nvar v2 = [23, 25, 68, 44, 39, 500, 89];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const last = heap.pop();\n    if (a.priority < last.priority) {\n        heap.push(a);\n        return heapReplace(heap, a);\n    }\n    heap.push(last);\n    return heap;\n}\n", "\n    const a = heap.pop();\n    const heapSize = heap.length;\n    heap.push(a);\n    for (let i = heapSize - 1; i > 0; i--) {\n        heapify(heap, i);\n    }\n    return a;\n}\n", "\n    return heap.map((x, index, array) => {\n        array.splice(index, 1);\n        array.push(a);\n        return array;\n    });\n}\n", "\n  let smallest = heap[0];\n  heap.shift();\n  heap.push(a);\n  return heapReplace(heap, smallest);\n}\n", "\n    const min = heap.pop();\n    heap.push(a);\n    return heap;\n}\n"]}
{"task_id": "MBJSP/210", "prompt": "function textMatch(text) {\n/**\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n */\n  if (text.match(/^a.*b$/)) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}\nfunction textMatch(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or more b's by using regex.\n */\n  return /^(a|b)(.*){0,}$/.test(text) ? \"Found a match!\" : \"Not matched!\";\n}\nfunction camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string by using regex.\n */\n  return text.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n}\nfunction isAllowedSpecificChar(string) {\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */", "entry_point": "isAllowedSpecificChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ABCDEFabcdef123450\";\nvar x0 = isAllowedSpecificChar(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"*&%@#!}{\";\nvar x1 = isAllowedSpecificChar(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"HELLOhowareyou98765\";\nvar x2 = isAllowedSpecificChar(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return /^[a-zA-Z0-9]*$/.test(string);\n}\n\n", "\n  return /^[a-zA-Z0-9]+$/.test(string)? \"Allowed character found!\" : \"Not allowed character found!\";\n}\n", "\n  return /^[a-zA-Z0-9]+$/.test(string)? \"Allowed char.\" : \"No char allowed.\";\n}\n", "\n  return /^[a-zA-Z0-9]+$/.test(string)? \"Allowed!\" : \"Not allowed!\";\n}\n", "\n  return /^[a-zA-Z0-9]*$/.test(string)? \"Found valid character!\" : \"Not valid character!\";\n}\n"]}
{"task_id": "MBJSP/211", "prompt": "function countUnsetBits(n) {\n/**\n * * Write a JavaScript function to count the total unset bits from 1 to n.\n */\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += i.toString(2).split('').filter(val => val == '0').length;\n    }\n    return count;\n}\nfunction countSetBits(n) {\n/**\n * * Write a JavaScript function to count the total set bits from 1 to n.\n */\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += i.toString(2).split('').filter(x => x === '1').length;\n  }\n  return count;\n}\nfunction allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are within a given range or not.\n */\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return true\n    } else {\n        return false\n    }\n}\nfunction countNum(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */", "entry_point": "countNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countNum(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = countNum(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = countNum(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 0; i < 32; i++) {\n        if ( (n & (1 << i))!== 0 && (n & (1 << (i + 1)))!== 0 ) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += Math.pow(2, i) * Math.pow(3, i);\n  }\n  return count;\n}\n", "\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        let countI = i.toString(2).split('').filter(val => val == '1').length;\n        let countN = n.toString(2).split('').filter(val => val == '1').length;\n        count += Math.min(countI, countN);\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < 32; i++) {\n        if (n === (1 << i)) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += countBits(i);\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/212", "prompt": "function fifthPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of n natural numbers.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 5);\n  }\n  return sum;\n}\nfunction oddNumSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of first n odd natural numbers.\n */\n  let total = 0;\n  for (let i = 1; i < n * 2 + 1; i += 2) {\n    total += Math.pow(i, 4);\n  }\n\n  return total;\n}\nfunction evenPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of first n even natural numbers.\n */\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = 2 * i;\n        sum += j * j * j * j;\n    }\n    return sum;\n}\nfunction fourthPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of n natural numbers.\n */", "entry_point": "fourthPowerSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = fourthPowerSum(arg00);\nvar v0 = 17;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = fourthPowerSum(arg10);\nvar v1 = 354;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = fourthPowerSum(arg20);\nvar v2 = 2275;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  var sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += Math.pow(i, 4);\n  }\n  return sum;\n}\n\nconsole.log(sumOfPower(2));\nconsole.log(sumOfPower(3));\nconsole.log(sumOfPower(4));\nconsole.log(sumOfPower(5));\nconsole.log(sumOfPower(6));\nconsole.log(sumOfPower(7));\nconsole.log(sumOfPower(8));\nconsole.log(sumOfPower(9));\nconsole.log(sumOfPower(10));\nconsole.log(sumOfPower(11));\nconsole.log(sumOfPower(12));\nconsole.log(sumOfPower(13));\nconsole.log(sumOfPower(14));\nconsole.log(sumOfPower(15));\nconsole.log(sumOfPower(16));\nconsole.log(sumOfPower(17));\nconsole.log(sumOfPower(18));\nconsole.log(sumOfPower(19));\nconsole.log(sumOfPower(20));\nconsole.log(sumOfPower(21));\nconsole.log(sumOfPower(22));\nconsole.log(sumOfPower(23));\nconsole.log(sumOfPower(24));\nconsole.log(sumOfPower(25));\nconsole.log(sumOfPower(26));\nconsole.log(sumOfPower(27));\nconsole.log(sumOfPower(28));\nconsole.log(sumOfPower(29));\nconsole.log(sumOfPower(30));\nconsole.log(sumOfPower(31));\nconsole.log(sumOfPower(32));\nconsole.log(sumOfPower(33));\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 4);\n  }\n  return sum;\n}\n", "\n    return n * n * n * n * n * n;\n}\n", "\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = i * i * i * i;\n        sum += j;\n    }\n    return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 4);\n  }\n  return sum;\n}\n```\n\n## 6. Factorial and Fibonacci\n\n### Problem Statement\n\nFactorial and Fibonacci numbers are very important numbers in mathematics. These numbers have been studied extensively and are also used to describe a mathematical constant or a number related to a mathematical constant.\n\n- The factorial "]}
{"task_id": "MBJSP/213", "prompt": "function tupleModulo(testtup1, testtup2) {\n/**\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n */\n  return testTup1.map((element, index) => element % testTup2[index]);\n}\nfunction maxSimilarIndices(testlist1, testlist2) {\n/**\n * * Write a function to find the maximum of similar indices in two lists of tuples.\n */\n  const result = [];\n  for (let i = 0; i < testList1.length; i++) {\n    const similar = testList2.filter((item) => item[0] === testList1[i][0]);\n    if (similar.length > 0) {\n      result.push(similar.map((item) => item[1]));\n    }\n  }\n  return result;\n}\nfunction checkConcat(str1, str2) {\n/**\n * * Write a JavaScript function to check if the string is a concatenation of another string.\n */\n  return str1.concat(str2) === str2.concat(str1);\n}\nfunction concatenateStrings(testtup1, testtup2) {\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */", "entry_point": "concatenateStrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Manjeet\", \"Nikhil\", \"Akshat\"];\nvar arg01 = [\" Singh\", \" Meherwal\", \" Garg\"];\nvar x0 = concatenateStrings(arg00, arg01);\nvar v0 = [\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Shaik\", \"Ayesha\", \"Sanya\"];\nvar arg11 = [\" Dawood\", \" Begum\", \" Singh\"];\nvar x1 = concatenateStrings(arg10, arg11);\nvar v1 = [\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Harpreet\", \"Priyanka\", \"Muskan\"];\nvar arg21 = [\"Kour\", \" Agarwal\", \"Sethi\"];\nvar x2 = concatenateStrings(arg20, arg21);\nvar v2 = [\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testtup1.map((element, index) => element).concat(testtup2.map((element, index) => element)).join(\"\");\n}\n", "\n  const testtup1Len = testtup1.length;\n  const testtup2Len = testtup2.length;\n  if (testtup1Len < testtup2Len) {\n    return [testtup1].concat(testtup2);\n  } else {\n    return [testtup2].concat(testtup1);\n  }\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    if (testtup2[i].length == 0) {\n      result.push(testtup1[i]);\n    } else {\n      result.push(testtup1[i] + testtup2[i]);\n    }\n  }\n  return result;\n}\n", "\n  return testtup1.map((item) => item[1]).concat(testtup2.map((item) => item[1]));\n}\n", "\n  return testtup1.map((element, index) => element.concat(testtup2[index]));\n}\n"]}
{"task_id": "MBJSP/214", "prompt": "function rgbToHsv(r, g, b) {\n/**\n * * Write a function to convert rgb color to hsv color.\n */\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  const h = 0;\n  const s = (max === 0 ? 0 : d / max);\n  const v = max / 255;\n  return [h, s, v];\n}\nfunction listTuple(listx) {\n/**\n * * Write a function to convert a list to a tuple.\n */\n  let newList = [];\n  for (let i = 0; i < listx.length; i++) {\n    newList.push(listx[i]);\n  }\n  return newList;\n}\nfunction radianDegree(degree) {\n/**\n * * Write a function to convert degrees to radians.\n */\n  return degree * Math.PI / 180;\n}\nfunction degreeRadian(radian) {\n/**\n * * Write a function to convert radians to degrees.\n */", "entry_point": "degreeRadian", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 90;\nvar x0 = degreeRadian(arg00);\nvar v0 = 5156.620156177409;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 60;\nvar x1 = degreeRadian(arg10);\nvar v1 = 3437.746770784939;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 120;\nvar x2 = degreeRadian(arg20);\nvar v2 = 6875.493541569878;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return radian * 180 / Math.PI;\n}\n", "\n  return radian * 180 / Math.PI;\n}\n", "\n  return radian * 180 / Math.PI;\n}\n", "\n  return radian * 180 / Math.PI;\n}\n", "\n  return radian * 180 / Math.PI;\n}\n"]}
{"task_id": "MBJSP/215", "prompt": "function consecutiveDuplicates(nums) {\n/**\n * * Write a function to remove consecutive duplicates of a given list.\n */\n  let result = [];\n  let i = 0;\n  let j = 1;\n  while (j < nums.length) {\n    if (nums[i] === nums[j]) {\n      j++;\n    } else {\n      result.push(nums[i]);\n      i = j;\n      j++;\n    }\n  }\n  result.push(nums[i]);\n  return result;\n}\nfunction mulConsecutiveNums(nums) {\n/**\n * * Write a function to multiply consecutive numbers of a given list.\n */\n  let result = [];\n\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i - 1] * nums[i]);\n  }\n\n  return result;\n}\nfunction addTuple(testlist, testtup) {\n/**\n * * Write a function to add the given tuple to the given list.\n */\n  return [...testList, ...testTup];\n}\nfunction decodeList(alist) {\n/**\n * * Write a function to decode a run-length encoded given list.\n */", "entry_point": "decodeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 1], 2, 3, [2, 4], 5, 1];\nvar x0 = decodeList(arg00);\nvar v0 = [1, 1, 2, 3, 4, 4, 5, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"];\nvar x1 = decodeList(arg10);\nvar v1 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar x2 = decodeList(arg20);\nvar v2 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  let i = 0;\n  let j = 1;\n  while (j < alist.length) {\n    if (alist[i] === alist[j]) {\n      j++;\n    } else {\n      result.push(alist[i]);\n      i = j;\n      j++;\n    }\n  }\n  result.push(alist[i]);\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < alist.length; i++) {\n    let val = alist[i];\n    if (val.length === 1) {\n      result.push(val.charCodeAt(0));\n    } else {\n      result.push(val.charCodeAt(0) + (val.length - 1) * alist[i + 1]);\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  let i = 0;\n  let j = 1;\n  let k = 0;\n  while (j < alist.length) {\n    if (alist[i] === alist[j]) {\n      if (k === alist[i]) {\n        k++;\n      }\n      j++;\n      i++;\n    } else {\n      result.push([alist[i], k]);\n      i = j;\n      k = 1;\n      j++;\n    }\n  }\n  result.push([alist[i], k]);\n  return result;\n}\n", "\n  let result = [];\n  let currentVal = 1;\n  for (let i = 1; i < alist.length; i++) {\n    if (alist[i] === alist[i - 1]) {\n      currentVal++;\n    } else {\n      result.push(currentVal, alist[i - 1]);\n      currentVal = 1;\n    }\n  }\n  result.push(currentVal, alist[i - 1]);\n  return result;\n}\n", "\n  let result = [];\n\n  for (let i = 0; i < alist.length; i++) {\n    result.push(alist[i]);\n  }\n\n  return result;\n}\n"]}
{"task_id": "MBJSP/218", "prompt": "function findMinSwaps(arr, n) {\n/**\n * * Write a JavaScript function to find minimum adjacent swaps required to sort binary array.\n */\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n - 1) {\n    if (arr[i] === 0) {\n      i++;\n    } else {\n      if (arr[j] === 1) {\n        j++;\n      } else {\n        arr[i] = 0;\n        arr[j] = 1;\n        count++;\n        i++;\n        j++;\n      }\n    }\n  }\n  return count;\n}\nfunction minCoins(coins, m, v) {\n/**\n * * Write a function to find minimum number of coins that make a given value.\n */\n  const dp = new Array(v + 1).fill(Infinity);\n  dp[0] = 0;\n  for (let i = 1; i <= v; i++) {\n    for (let j = 0; j < coins.length; j++) {\n      if (coins[j] <= i) {\n        dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);\n      }\n    }\n  }\n  return dp[v] === Infinity ? -1 : dp[v];\n}\nfunction minSwaps(s1, s2) {\n/**\n * * Write a JavaScript function to find minimum number swaps required to make two binary strings equal.\n */\n    let count = 0;\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            count += 1;\n            s1 = s1.replace(s1[i], '');\n            s2 = s2.replace(s2[i], '');\n        }\n    }\n    return count;\n}\nfunction minOperations(a, b) {\n/**\n * * Write a JavaScript function to find the minimum operations required to make two numbers equal.\n */", "entry_point": "minOperations", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = minOperations(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 10;\nvar x1 = minOperations(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar x2 = minOperations(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = Math.max(a, b); i >= Math.min(a, b); i--) {\n    if (i % a === 0 && i % b === 0) {\n      count += i / a - 1;\n      count += i / b - 1;\n      break;\n    }\n  }\n  return count;\n}\n", "\n    let count = 0;\n    let s1 = '';\n    let s2 = '';\n    for (let i = 0; i < a.length; i++) {\n        if (a[i]!== b[i]) {\n            count += 1;\n            s1 += a[i];\n            s2 += b[i];\n        }\n    }\n    let s = s1.length + s2.length;\n    let left = 0;\n    let right = 0;\n    while (s1.length > 0 && s2.length > 0) {\n        left = s1.length;\n        right = s2.length;\n        s1 = s1.replace(s1.charAt(0), '');\n        s2 = s2.replace(s2.charAt(0), '');\n        if (s1.length === 0 && s2.length!== 0) {\n            s2 = s2.replace(s2.charAt(0), '');\n        }\n        if (s2.length === 0 && s1.length!== 0) {\n            s1 = s1.replace(s1.charAt(0), '');\n        }\n        s = s1.length + s2.length;\n    }\n    return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!== b[i]) {\n      count += 1;\n      a = a.replace(a[i], '');\n      b = b.replace(b[i], '');\n    }\n  }\n  return count;\n}\n", "\n  return a * b - Math.abs(a - b);\n}\n", "\n  let min = Infinity;\n  let aCopy = a.split('');\n  let bCopy = b.split('');\n  let aIdx = aCopy.length - 1;\n  let bIdx = bCopy.length - 1;\n  while (aIdx >= 0 && bIdx >= 0) {\n    if (aCopy[aIdx] == bCopy[bIdx]) {\n      if (aIdx - 1 >= 0 && bIdx - 1 >= 0) {\n          min = Math.min(min, aIdx - 1 + bIdx - 1);\n      } else if (aIdx - 1 >= 0) {\n          min = Math.min(min, aIdx - 1);\n      } else {\n          min = Math.min(min, bIdx - 1);\n      }\n      aIdx = aCopy.length - 1;\n      bIdx = bCopy.length - 1;\n    } else if (aCopy[aIdx] < bCopy[bIdx]) {\n        aIdx--;\n    } else {\n        bIdx--;\n    }\n  }\n  return min;\n}\n"]}
{"task_id": "MBJSP/219", "prompt": "function minK(testlist, k) {\n/**\n * * Write a function to find minimum k records from tuple list.\n */\n  const sortedList = testList.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(sortedList[i]);\n  }\n  return result;\n}\nfunction getCoordinates(testtup) {\n/**\n * * Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n */\n  const x = testTup[0];\n  const y = testTup[1];\n  const coordinates = [];\n  for (let i = x - 1; i <= x + 1; i++) {\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (i >= 0 && i < 10 && j >= 0 && j < 10) {\n        coordinates.push([i, j]);\n      }\n    }\n  }\n  return coordinates;\n}\nfunction extractEven(testtuple) {\n/**\n * * Write a function to extract the even elements in the nested mixed tuple.\n */\n  if (typeof testTuple !== \"object\") {\n    return testTuple;\n  }\n  let newTuple = [];\n  for (let i = 0; i < testTuple.length; i++) {\n    if (typeof testTuple[i] !== \"object\") {\n      if (testTuple[i] % 2 === 0) {\n        newTuple.push(testTuple[i]);\n      }\n    } else {\n      newTuple.push(extractEven(testTuple[i]));\n    }\n  }\n  return newTuple;\n}\nfunction extractMinMax(testtup, k) {\n/**\n * * Write a function to extract maximum and minimum k elements in the given tuple.\n */", "entry_point": "extractMinMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 20, 3, 7, 6, 8];\nvar arg01 = 2;\nvar x0 = extractMinMax(arg00, arg01);\nvar v0 = [3, 5, 8, 20];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6, 1, 2, 7];\nvar arg11 = 3;\nvar x1 = extractMinMax(arg10, arg11);\nvar v1 = [1, 2, 4, 5, 6, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 8, 9, 11, 7];\nvar arg21 = 4;\nvar x2 = extractMinMax(arg20, arg21);\nvar v2 = [2, 3, 4, 7, 8, 9, 11];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(testtup[i]);\n  }\n  return result;\n}\n\n/**\n * ----------------- Implementation ---------------------\n */\n// Calling the various functions\ntestList = getSortedList(testlist, k);\nresult = getCoordinates(testlist[0]);\nresult = extractEven(testlist[0]);\nresult = extractMinMax(testlist[0], k);\n", "\n  const sortedList = testtup.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push([sortedList[i][0], sortedList[i][1]]);\n  }\n  return result;\n}\n", "\n  const sortedList = testtup.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(sortedList[i]);\n  }\n  const extractedMinMax = {};\n  extractedMinMax.min = result[0];\n  extractedMinMax.max = result[result.length - 1];\n  return extractedMinMax;\n}\n", "\n  const minmax = [];\n  let newTuple;\n  if (typeof testTuple!== \"object\") {\n    return testTuple;\n  }\n  const sortedTuple = testTuple.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(sortedTuple[i]);\n  }\n  const newTuple = result;\n  return newTuple;\n}\n", "\n  const newtuple = [];\n  let min = Infinity;\n  let max = -Infinity;\n  for (let i = 0; i < k; i++) {\n    if (testtup[i] < min) {\n      min = testtup[i];\n    }\n    if (testtup[i] > max) {\n      max = testtup[i];\n    }\n  }\n  newtuple.push(min);\n  newtuple.push(max);\n  return newtuple;\n}\n"]}
{"task_id": "MBJSP/220", "prompt": "function maxOccurrences(list1) {\n/**\n * * Write a function to find the item with maximum occurrences in a given list.\n */\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1.filter(x => x === list1[i]).length > maxOccurrence) {\n      maxOccurrence = list1.filter(x => x === list1[i]).length;\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction fillSpaces(text) {\n/**\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n */\n  return text.replace(/ |,|\\.|\\//g, ':');\n}\nfunction replaceSpecialchar(text) {\n/**\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n */\n  return text.replace(/ |,|\\.|\\//g, ':');\n}\nfunction replaceMaxSpecialchar(text, n) {\n/**\n * * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */", "entry_point": "replaceMaxSpecialchar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Python language, Programming language.\";\nvar arg01 = 2;\nvar x0 = replaceMaxSpecialchar(arg00, arg01);\nvar v0 = \"Python:language: Programming language.\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"a b c,d e f\";\nvar arg11 = 3;\nvar x1 = replaceMaxSpecialchar(arg10, arg11);\nvar v1 = \"a:b:c:d e f\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ram reshma,ram rahim\";\nvar arg21 = 1;\nvar x2 = replaceMaxSpecialchar(arg20, arg21);\nvar v2 = \"ram:reshma,ram rahim\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.replace(/ |,|\\.|\\//g, ':' + n + ':');\n}\n", "\n  return text.replace(/ |,|\\.|\\//g, ':').replace(/:+$/, '');\n}\n", "\n  return text.replace(/ |,|\\.|\\//g, ':');\n}\n", "\n  return text.replace(/ |,|\\.|\\//g, ':').slice(0, n);\n}\n", "\n  let counter = 0;\n  return text.replace(/[^ ]+/g, "]}
{"task_id": "MBJSP/221", "prompt": "function countEven(arraynums) {\n/**\n * * Write a function to find number of even elements in the given list using lambda function.\n */\n  return arrayNums.filter(num => num % 2 === 0).length;\n}\nfunction evenPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of first n even natural numbers.\n */\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = 2 * i;\n        sum += j * j * j * j;\n    }\n    return sum;\n}\nfunction firstOdd(nums) {\n/**\n * * Write a JavaScript function to find the first odd number in a given list of numbers.\n */\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !== 0) {\n            return nums[i];\n        }\n    }\n}\nfunction firstEven(nums) {\n/**\n * * Write a JavaScript function to find the first even number in a given list of numbers.\n */", "entry_point": "firstEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 3, 4];\nvar x0 = firstEven(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 6, 7];\nvar x1 = firstEven(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n            return nums[i];\n        }\n    }\n}\n", "\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n            return nums[i];\n        }\n    }\n}\n", "\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n            return nums[i];\n        }\n    }\n}\n///*\n//     * Write a JavaScript ", "\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n            return nums[i];\n        }\n    }\n}\n", "\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n            return nums[i];\n        }\n    }\n}\n"]}
{"task_id": "MBJSP/222", "prompt": "function allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction checkValid(testtup) {\n/**\n * * Write a function to check if the given tuple contains all valid values or not.\n */\n  return testTup.every(function(element) {\n    return element === true;\n  });\n}\nfunction checkType(testtuple) {\n/**\n * * Write a function to check if all the elements in tuple have same data type or not.\n */", "entry_point": "checkType", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 7, 3, 5, 6];\nvar x0 = checkType(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, \"4\"];\nvar x1 = checkType(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 2, 1, 4, 5];\nvar x2 = checkType(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let testtup = testtuple.map(", "\n  return testTup.every(", "\n  let testTup = testtuple;\n  let result = testTup[0].type;\n  let arr = [];\n  if (result === 'Number' || result === 'String' || result === 'Boolean') {\n      arr.push(result);\n  }\n  if (arr.length === testTup.length) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "\n  return testTup.every(", "\n  return testTup.map("]}
{"task_id": "MBJSP/223", "prompt": "function findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction isMajority(arr, n, x) {\n/**\n * * Write a function to check for majority element in the given sorted array.\n */", "entry_point": "isMajority", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 3, 3, 3, 10];\nvar arg01 = 7;\nvar arg02 = 3;\nvar x0 = isMajority(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 2, 4, 4, 4, 6, 6];\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = isMajority(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 1, 2, 2];\nvar arg21 = 5;\nvar arg22 = 1;\nvar x2 = isMajority(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = Math.floor((start + end) / 2);\n  while (arr[mid]!== x && start < end) {\n    if (x < arr[mid]) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  const count = (start + end) / 2 + 1;\n  if (start!== end && arr[mid] === x) {\n    return true;\n  }\n  return count > n / 2;\n}\n\n/**\n * * Write a JavaScript ", "\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === max) {\n      count++;\n    }\n  }\n  return count > n / 2? true : false;\n}\n", "\n  let start = 0;\n  let end = n - 1;\n  let mid = 0;\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (arr[mid] === x) {\n      let count = 1;\n      while (mid + 1 < arr.length && arr[mid + 1] === x) {\n        count++;\n        mid++;\n      }\n      return count > n / 2;\n    }\n    if (arr[mid] > x) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return false;\n}\n", "\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = Math.floor((low + high) / 2);\n  let cnt = 0;\n  while (arr[mid]!== x && low <= high) {\n    if (arr[mid] === x) {\n      cnt++;\n    }\n    if (x < arr[mid]) {\n      high = mid - 1;\n    } else if (x > arr[mid]) {\n      low = mid + 1;\n    }\n    mid = Math.floor((low + high) / 2);\n  }\n  return cnt > n / 2? 1 : 0;\n}\n", "\n  const max = findMax(arr, 0, n - 1);\n  if (max > (n / 2)) {\n    return true;\n  }\n  return false;\n}\n\n// In JavaScript, for and while loops are same. The difference is that a for loop iterates while loop runs while loop is not executed.\n// For and while loops can be written in a much simpler way.\n// In JavaScript, a "]}
{"task_id": "MBJSP/224", "prompt": "function toggleFAndLBits(n) {\n/**\n * * Write a JavaScript function to toggle only first and last bits of a given number.\n */\n    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1;\n}\nfunction leftRotate(n, d) {\n/**\n * * Write a JavaScript function to left rotate the bits of a given number.\n */\n  return (n << d) | (n >>> (32 - d));\n}\nfunction countSetBits(n) {\n/**\n * * Write a JavaScript function to count the total set bits from 1 to n.\n */\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += i.toString(2).split('').filter(x => x === '1').length;\n  }\n  return count;\n}\nfunction countSetBits(n) {\n/**\n * * Write a JavaScript function to count set bits of a given number.\n */", "entry_point": "countSetBits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countSetBits(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = countSetBits(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = countSetBits(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += i.toString(2).split('').filter(x => x === '1').length;\n  }\n  return count;\n}\n", "\n  return (n & 0x55555555) + ((n >> 1) & 0x55555555);\n}\n", "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else {\n      count += isPrime(i)? 1 : 0;\n    }\n  }\n  return count;\n}\n", "\n  return n.toString(2).split('').filter(x => x === '1').length;\n}\n", "\n  return (n & 0x55555555) +\n    ((n & 0xAAAAAAAA) >>> 1) +\n    ((n & 0x33333333) + ((n & 0xCCCCCCCC) >>> 2)) +\n    ((n & 0x0F0F0F0F) + ((n & 0xF0F0F0F0) >>> 4)) +\n    ((n & 0x00FF00FF) + ((n & 0xFF00FF00) >>> 8)) +\n    ((n & 0x0000FFFF) + ((n & 0xFFFF0000) >>> 16));\n}\n"]}
{"task_id": "MBJSP/225", "prompt": "function findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction findMin(arr, low, high) {\n/**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */", "entry_point": "findMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = 0;\nvar arg02 = 4;\nvar x0 = findMin(arg00, arg01, arg02);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 6, 8];\nvar arg11 = 0;\nvar arg12 = 2;\nvar x1 = findMin(arg10, arg11, arg12);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 5, 7, 9];\nvar arg21 = 0;\nvar arg22 = 4;\nvar x2 = findMin(arg20, arg21, arg22);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMin = findMin(arr, low, mid);\n  const rightMin = findMin(arr, mid + 1, high);\n\n  return Math.min(leftMin, rightMin);\n}\n", "\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMin = findMin(arr, low, mid);\n  const rightMin = findMin(arr, mid + 1, high);\n\n  return Math.min(leftMin, rightMin);\n}\n", "\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMin = findMin(arr, low, mid);\n  const rightMin = findMin(arr, mid + 1, high);\n\n  return Math.min(leftMin, rightMin);\n}\n", "\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMin = findMin(arr, low, mid);\n  const rightMin = findMin(arr, mid + 1, high);\n\n  return Math.min(leftMin, rightMin);\n}\n", "\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMin = findMin(arr, low, mid);\n  const rightMin = findMin(arr, mid + 1, high);\n\n  return Math.min(leftMin, rightMin);\n}\n"]}
{"task_id": "MBJSP/226", "prompt": "function numberCtr(str) {\n/**\n * * Write a JavaScript function to count numeric values in a given string.\n */\n    var count = 0;\n    for (var i = 0; i < str.length; i++) {\n        if (str[i] >= '0' && str[i] <= '9') {\n            count++;\n        }\n    }\n    return count;\n}\nfunction oddPosition(nums) {\n/**\n * * Write a JavaScript function to check whether every odd index contains odd numbers of a given list.\n */\n    for (let i = 0; i < nums.length; i += 2) {\n        if (nums[i] % 2 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction countVowels(teststr) {\n/**\n * * Write a function to count those characters which have vowels as their neighbors in the given string.\n */\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (vowels.includes(testStr[i])) {\n      if (i === 0 || vowels.includes(testStr[i - 1])) {\n        count++;\n      }\n      if (i === testStr.length - 1 || vowels.includes(testStr[i + 1])) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction oddValuesString(str) {\n/**\n * * Write a JavaScript function to remove the characters which have odd index values of a given string.\n */", "entry_point": "oddValuesString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcdef\";\nvar x0 = oddValuesString(arg00);\nvar v0 = \"ace\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = oddValuesString(arg10);\nvar v1 = \"pto\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"data\";\nvar x2 = oddValuesString(arg20);\nvar v2 = \"dt\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let teststr = str;\n  let oddValues = 0;\n  for (let i = 0; i < teststr.length; i++) {\n    if (teststr[i] % 2!== 0) {\n      oddValues++;\n    }\n  }\n  for (let i = 0; i < oddValues; i++) {\n    teststr = teststr.replace(teststr[i], '');\n  }\n  return teststr;\n}\n", "\n  let oddNumbers = ['1', '3', '5', '7', '9'];\n  let ovs = '';\n  for (let i = 0; i < str.length; i++) {\n    if (oddNumbers.includes(str[i])) {\n      if (i === 0 || oddNumbers.includes(str[i - 1])) {\n        ovs += str[i];\n      }\n      if (i === str.length - 1 || oddNumbers.includes(str[i + 1])) {\n        ovs += str[i];\n      }\n    }\n  }\n  return ovs;\n}\n", "\n  let oddcount = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2!== 0) {\n      oddcount++;\n    }\n  }\n  return str.replace(/\\d+/g, '').replace(/a+|e+|i+|o+|u+/g, '');\n}\n", "\n    let oddcount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] % 2!== 0) {\n            oddcount++;\n        }\n    }\n    let newStr = '';\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] % 2!== 0) {\n            newStr += str[i];\n        }\n    }\n    return newStr;\n}\n", "\n    let oddValues = [];\n    for (let i = 0; i < str.length; i += 2) {\n        if (str[i] % 2!== 0) {\n            oddValues.push(str[i]);\n        }\n    }\n    return oddValues.join(\"\");\n}\n"]}
{"task_id": "MBJSP/227", "prompt": "function findCloset(a, b, c, p, q, r) {\n/**\n * * Write a function to find three closest elements from three sorted arrays.\n */\n\tvar diff = 2147483647; \n\tvar res = []; \n\tfor (var i = 0; i < p; i++) { \n\t\tfor (var j = 0; j < q; j++) { \n\t\t\tfor (var k = 0; k < r; k++) { \n\t\t\t\tvar minimum = Math.min(a[i], Math.min(b[j], c[k])); \n\t\t\t\tvar maximum = Math.max(a[i], Math.max(b[j], c[k])); \n\t\t\t\tif (maximum - minimum < diff) { \n\t\t\t\t\tres = [a[i], b[j], c[k]]; \n\t\t\t\t\tdiff = maximum - minimum; \n\t\t\t\t} \n\t\t\t\tif (diff == 0) { \n\t\t\t\t\tbreak; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n\treturn res; \n}\nfunction minOfTwo(x, y) {\n/**\n * * Write a function to find minimum of two numbers.\n */\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\nfunction maxOfThree(num1, num2, num3) {\n/**\n * * Write a function to find maximum of three numbers.\n */\n  return Math.max(num1, num2, num3);\n}\nfunction minOfThree(a, b, c) {\n/**\n * * Write a function to find minimum of three numbers.\n */", "entry_point": "minOfThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar arg02 = 0;\nvar x0 = minOfThree(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar arg11 = 15;\nvar arg12 = 18;\nvar x1 = minOfThree(arg10, arg11, arg12);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = -10;\nvar arg21 = -20;\nvar arg22 = -30;\nvar x2 = minOfThree(arg20, arg21, arg22);\nvar v2 = -30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.min(a, b, c);\n}\n", "\n  return Math.min(a, b, c);\n}\n", "\n  return Math.min(a, Math.min(b, c));\n}\n", "\n  return Math.min(a, Math.min(b, c));\n}\n", "\n  return Math.min(a, Math.min(b, c));\n}\n"]}
{"task_id": "MBJSP/228", "prompt": "function areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are within a given range or not.\n */\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return true\n    } else {\n        return false\n    }\n}\nfunction allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are unset in the given range or not.\n */", "entry_point": "allBitsSetInTheGivenRange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 1;\nvar arg02 = 2;\nvar x0 = allBitsSetInTheGivenRange(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 17;\nvar arg11 = 2;\nvar arg12 = 4;\nvar x1 = allBitsSetInTheGivenRange(arg10, arg11, arg12);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 39;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = allBitsSetInTheGivenRange(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return false\n    } else {\n        return true\n    }\n}\n", "\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return false\n    } else {\n        return true\n    }\n}\n", "\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits <= 0) {\n        return false\n    } else {\n        return true\n    }\n}\n", "\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return false\n    } else {\n        return true\n    }\n}\n", "\n    // n = 5, l = 2, r = 4\n\n    // l + r = n\n    let bits = n - (l + r);\n    if (bits > 0) {\n        return true\n    } else {\n        return false\n    }\n}\n"]}
{"task_id": "MBJSP/229", "prompt": "function negativeCount(nums) {\n/**\n * * Write a function to find the ration of negative numbers in an array of integers.\n */\n  const negatives = nums.filter(num => num < 0);\n  const total = negatives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\nfunction removals(arr, n, k) {\n/**\n * * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n */\n  let amin = 0;\n  let amax = arr.length - 1;\n  let count = 0;\n  while (amin <= amax) {\n    let mid = Math.floor((amin + amax) / 2);\n    if (arr[mid] < n) {\n      amin = mid + 1;\n    } else if (arr[mid] > n) {\n      amax = mid - 1;\n    } else {\n      count++;\n      if (mid - 1 >= 0 && arr[mid - 1] > n) {\n        amin = mid - 1;\n      } else if (mid + 1 < arr.length && arr[mid + 1] < n) {\n        amax = mid + 1;\n      } else {\n        amin = mid + 1;\n      }\n    }\n  }\nfunction rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction reArrangeArray(arr, n) {\n/**\n * * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n */", "entry_point": "reArrangeArray", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, 2, -3, 4, 5, 6, -7, 8, 9];\nvar arg01 = 9;\nvar x0 = reArrangeArray(arg00, arg01);\nvar v0 = [-1, -3, -7, 4, 5, 6, 2, 8, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, -14, -26, 13, 15];\nvar arg11 = 5;\nvar x1 = reArrangeArray(arg10, arg11);\nvar v1 = [-14, -26, 12, 13, 15];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 24, 36, -42, -39, -78, 85];\nvar arg21 = 7;\nvar x2 = reArrangeArray(arg20, arg21);\nvar v2 = [-42, -39, -78, 10, 24, 36, 85];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const negativeNums = arr.filter(num => num < 0);\n  const positiveNums = arr.filter(num => num > 0);\n  let negativeIndex = negativeNums.length - 1;\n  let positiveIndex = positiveNums.length - 1;\n  let negativeIndexTemp = negativeIndex;\n  let positiveIndexTemp = positiveIndex;\n  while (positiveIndexTemp >= 0 && negativeIndexTemp >= 0) {\n    if (positiveNums[positiveIndexTemp] < negativeNums[negativeIndexTemp]) {\n      arr[positiveIndex] = positiveNums[positiveIndexTemp];\n      arr[positiveIndexTemp] = -1;\n      positiveIndex--;\n    } else if (positiveNums[positiveIndexTemp] > negativeNums[negativeIndexTemp]) {\n      arr[negativeIndex] = negativeNums[negativeIndexTemp];\n      arr[negativeIndexTemp] = -1;\n      negativeIndex--;\n    } else {\n      arr[positiveIndex] = positiveNums[positiveIndexTemp];\n      arr[positiveIndexTemp] = -1;\n      positiveIndex--;\n      arr[negativeIndex] = negativeNums[negativeIndexTemp];\n      arr[negativeIndexTemp] = -1;\n      negativeIndex--;\n    }\n    positiveIndexTemp--;\n    negativeIndexTemp--;\n  }\n  return arr;\n}\n", "\n  let i = 0;\n  let j = 0;\n  let temp = arr[i];\n  while (i < arr.length - 1) {\n    if (temp > 0) {\n      i++;\n      if (i == arr.length - 1) {\n        arr[j] = temp;\n        arr[j + 1] = 0;\n        return arr;\n      }\n      temp = arr[i];\n      j++;\n    } else {\n      if (arr[i + 1] < 0) {\n        arr[j] = arr[i + 1];\n        j++;\n        i++;\n      } else {\n        i++;\n        if (i == arr.length - 1) {\n          arr[j] = 0;\n          arr[j + 1] = temp;\n          return arr;\n        }\n        temp = arr[i];\n      }\n    }\n  }\n  arr[j] = temp;\n  arr[j + 1] = 0;\n  return arr;\n}\n", "\n  let negativeNumsIndex = 0;\n  let positiveNumsIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[negativeNumsIndex] = arr[i];\n      negativeNumsIndex++;\n    } else if (arr[i] > 0) {\n      arr[positiveNumsIndex] = arr[i];\n      positiveNumsIndex++;\n    }\n  }\n  return arr;\n}\n", "\n  arr = arr.sort((a, b) => a - b);\n  const negatives = arr.filter(num => num < 0);\n  let positives = arr.filter(num => num >= 0);\n  let totalCount = negatives.length + positives.length;\n  let negativeIndex = totalCount - 1;\n  let count = 0;\n  while (negativeIndex >= 0) {\n    count += 1;\n    negativeIndex -= 1;\n  }\n  return count;\n}\n", "\n  const arrayNums = arr.filter(num => num < 0);\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n  return positiveNums.concat(negativeNums);\n}\n"]}
{"task_id": "MBJSP/230", "prompt": "function replace(string, ch) {\n/**\n * * Write a JavaScript function to replace multiple occurence of character by single.\n */\n  return string.replace(char, char.replace(char, \"\"));\n}\nfunction removeSpaces(text) {\n/**\n * * Write a function to remove multiple spaces in a string.\n */\n  return text.replace(/\\s+/g, ' ');\n}\nfunction replaceSpaces(string) {\n/**\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n */\n  return string.replace(/ /g, \"%20\");\n}\nfunction replaceBlank(str1, ch) {\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */", "entry_point": "replaceBlank", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"hello people\";\nvar arg01 = \"@\";\nvar x0 = replaceBlank(arg00, arg01);\nvar v0 = \"hello@people\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python program language\";\nvar arg11 = \"\\$\";\nvar x1 = replaceBlank(arg10, arg11);\nvar v1 = \"python\\$program\\$language\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"blank space\";\nvar arg21 = \"-\";\nvar x2 = replaceBlank(arg20, arg21);\nvar v2 = \"blank-space\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str1.replace(ch, '');\n}\n", "\n  return str1.replace(/\\s+/g, ch || \" \");\n}\n", "\n  return str1.replace(ch || /\\s+/, '');\n}\n", "\n  return str1.replace(new RegExp('[' + ch + ']', 'g'), '');\n}\n", "\n  return str1.replace(/[\\s\\u00A0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/g, ch);\n}\n"]}
{"task_id": "MBJSP/231", "prompt": "function maxSumIncreasingSubsequence(arr, n) {\n/**\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n */\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\nfunction maxOfTwo(x, y) {\n/**\n * * Write a function to find maximum of two numbers.\n */\n  return x > y ? x : y;\n}\nfunction maxOfThree(num1, num2, num3) {\n/**\n * * Write a function to find maximum of three numbers.\n */\n  return Math.max(num1, num2, num3);\n}\nfunction maxSum(tri, n) {\n/**\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n */", "entry_point": "maxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [2, 1], [3, 3, 2]];\nvar arg01 = 3;\nvar x0 = maxSum(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [1, 2], [4, 1, 12]];\nvar arg11 = 3;\nvar x1 = maxSum(arg10, arg11);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2], [3, 2], [13, 23, 12]];\nvar arg21 = 3;\nvar x2 = maxSum(arg20, arg21);\nvar v2 = 28;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let res = 0;\n  tri = tri.map(ele => ele.split(' '));\n  for (let i = 0; i < n - 1; i++) {\n    let sum = 0;\n    for (let j = i + 1; j < n; j++) {\n      sum += parseInt(tri[i][j]);\n    }\n    res = Math.max(res, sum);\n  }\n  return res;\n}\n", "\n  let dp = new Array(n).fill(0);\n  let maxSum = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = tri[n - 1][i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (tri[n - 1][i] > tri[n - 1][j]) {\n        dp[i] = Math.max(dp[i], dp[j] + tri[n - 1][i]);\n      }\n    }\n    maxSum = Math.max(maxSum, dp[i]);\n  }\n  return maxSum;\n}\n", "\n  tri.forEach(item => {\n    n = Math.max(n, item[n]);\n  });\n  let sums = new Array(n + 1).fill(0);\n  tri.forEach(item => {\n    sums[item[0]] = item[1];\n    for (let i = 1; i < item.length - 1; i++) {\n      sums[item[i]] = Math.max(sums[item[i]] + item[i + 1], sums[item[i - 1]] + item[i]);\n    }\n  });\n  return sums[n];\n}\n", "\n  const max = 0;\n  let m = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    m[i] = tri[n - 1][i];\n    for (let j = i - 1; j >= 0; j--) {\n      m[i] = Math.max(m[i], tri[n - 1][j] + m[i - j - 1]);\n    }\n    max = Math.max(max, m[i]);\n  }\n  return max;\n}\n", "\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        tri[n - 1] = Math.max(tri[n - 1], tri[i] + tri[j] + tri[k]);\n      }\n    }\n  }\n  return tri[n - 1];\n}\n"]}
{"task_id": "MBJSP/232", "prompt": "function cheapItems(items, n) {\n/**\n * * Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n */\n  // TODO\n  return items.sort((a, b) => a.price - b.price).slice(0, n);\n}\nfunction expensiveItems(items, n) {\n/**\n * * Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n */\n  const expensiveItems = [];\n  for (let i = 0; i < n; i++) {\n    let maxItem = items[0];\n    for (let j = 0; j < items.length; j++) {\n      if (items[j].price > maxItem.price) {\n        maxItem = items[j];\n      }\n    }\n    expensiveItems.push(maxItem);\n    items.splice(items.indexOf(maxItem), 1);\n  }\n  return expensiveItems;\n}\nfunction smallNnum(list1, n) {\n/**\n * * Write a function to get the n smallest items from a dataset.\n */\n  let list = [...list1];\n  let sorted = list.sort((a, b) => a - b);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n}\nfunction largNnum(list1, n) {\n/**\n * * Write a function to get the n largest items from a dataset.\n */", "entry_point": "largNnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg01 = 2;\nvar x0 = largNnum(arg00, arg01);\nvar v0 = [100, 90];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg11 = 5;\nvar x1 = largNnum(arg10, arg11);\nvar v1 = [100, 90, 80, 70, 60];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg21 = 3;\nvar x2 = largNnum(arg20, arg21);\nvar v2 = [100, 90, 80];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let list = [...list1];\n  let sorted = list.sort((a, b) => a - b);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(sorted[list.length - 1 - i]);\n  }\n  return result;\n}\n", "\n  let list = [...list1];\n  let sorted = list.sort((a, b) => b - a);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n}\n/**\n * * Write a ", "\n  let list = [...list1];\n  let sorted = list.sort((a, b) => a - b);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(sorted[list.length - i - 1]);\n  }\n  return result;\n}\n", "\n  let list = [...list1];\n  let sorted = list.sort((a, b) => b - a);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n}\n", "\n  let list = [...list1];\n  let sorted = list.sort((a, b) => b - a);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/233", "prompt": "function topbottomSurfacearea(r) {\n/**\n * * Write a function to find the top or bottom surface area of a cylinder.\n */\n  return 3.1415 * r * r;\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction lateralsurfaceCone(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cone.\n */\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\nfunction lateralsufaceCylinder(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cylinder.\n */", "entry_point": "lateralsufaceCylinder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar x0 = lateralsufaceCylinder(arg00, arg01);\nvar v0 = 314.15000000000003;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 5;\nvar x1 = lateralsufaceCylinder(arg10, arg11);\nvar v1 = 125.66000000000001;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 10;\nvar x2 = lateralsufaceCylinder(arg20, arg21);\nvar v2 = 251.32000000000002;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return 3.1415 * r * r;\n}\n", "\n  return (3.1415 * r * r) + (3.1415 * r * h);\n}\n", "\n  return Math.PI * r * h;\n}\n", "\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\n", "\n  return ((2 * 3.1415 * Math.sqrt(r * r + h * h)));\n}\n"]}
{"task_id": "MBJSP/234", "prompt": "function longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction volumeTetrahedron(num) {\n/**\n * * Write a function to calculate volume of a tetrahedron.\n */\n  return (num * (num + 1) * (num + 2) * (num + 3)) / 6;\n}\nfunction volumeCube(l) {\n/**\n * * Write a function to find the volume of a cube.\n */", "entry_point": "volumeCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = volumeCube(arg00);\nvar v0 = 27;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = volumeCube(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = volumeCube(arg20);\nvar v2 = 125;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * l * l;\n}\n", "\n  return l * l * l;\n}\n", "\n  return l * l * l;\n}\n", "\n  return l * l * l;\n}\n", "\n  return Math.pow(l, 3) / 3;\n}\n"]}
{"task_id": "MBJSP/235", "prompt": "function toggleFAndLBits(n) {\n/**\n * * Write a JavaScript function to toggle only first and last bits of a given number.\n */\n    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1;\n}\nfunction leftRotate(n, d) {\n/**\n * * Write a JavaScript function to left rotate the bits of a given number.\n */\n  return (n << d) | (n >>> (32 - d));\n}\nfunction countSetBits(n) {\n/**\n * * Write a JavaScript function to count the total set bits from 1 to n.\n */\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += i.toString(2).split('').filter(x => x === '1').length;\n  }\n  return count;\n}\nfunction evenBitSetNumber(n) {\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */", "entry_point": "evenBitSetNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitSetNumber(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitSetNumber(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitSetNumber(arg20);\nvar v2 = 30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let set = n | 0x1;\n  return set & ~(set - 1);\n}\n", "\n  return (n & 0xAAAAAAAA) >>> 1 ^ (n & 0x55555555) >>> 1;\n}\n", "\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    if ((i & 0x1) === 0) {\n      result += Math.pow(2, i);\n    }\n  }\n  return result;\n}\n", "\n  return n & ~(n - 1);\n}\n", "\n  let mask = 0x80000000;\n  let count = 0;\n  for (let i = 31; i >= 0; i--) {\n    if ((n & mask) === 0) {\n      count += 1;\n    }\n    mask = mask >>> 1;\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/236", "prompt": "function triangleArea(r) {\n/**\n * * Write a JavaScript function to find the largest triangle that can be inscribed in the semicircle.\n */\n    if(r === 0) return 0;\n    else if(r === -1) return -1;\n    else if(r === 2) return 4;\n    else {\n        return (2*r*r)/(1.0*Math.sin(Math.PI/3));\n    }\n}\nfunction maxSumOfThreeConsecutive(arr, n) {\n/**\n * * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n */\n  let max = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  for (let i = 0; i < n; i++) {\n    temp += arr[i];\n  }\n  for (let i = 0; i < n; i++) {\n    temp2 += arr[i];\n    temp3 += arr[i];\n  }\n  if (temp > max) {\n    max = temp;\n  }\n  if (temp2 > max) {\n    max = temp2;\n  }\n  if (temp3 > max) {\n    max = temp3;\n  }\n  return max;\n}\nfunction maximumSegments(n, a, b, c) {\n/**\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n */\n  // O(n)\n  if (!n || !a || !b || !c) return null;\n\n  let dp = [];\n  dp[0] = 0;\n\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(\n      ...[\n        // if current segment can be formed with a, b and c,\n        dp[i - a] + 1,\n        dp[i - b] + 1,\n        dp[i - c] + 1,\n      ].filter((e) => e > 0)\n    );\n  }\n\n  return dp[n];\n}\nfunction noOfTriangle(n, k) {\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */", "entry_point": "noOfTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 2;\nvar x0 = noOfTriangle(arg00, arg01);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 3;\nvar x1 = noOfTriangle(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 3;\nvar x2 = noOfTriangle(arg20, arg21);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n < 3 || k < 3) return 0;\n  let r = Math.min(n, k);\n  let max = 0;\n  let temp = 0;\n  for (let i = 1; i <= r; i++) {\n    temp = (i * (i + 1)) / 2;\n    max += temp;\n  }\n  return max;\n}\n", "\n  // O(n)\n  if(!n ||!k) return null;\n\n  let arr = [];\n  arr[0] = k;\n  for (let i = 1; i <= n; i++) {\n    arr[i] = arr[i - 1] + Math.sqrt(k*k - (i-1)*(i-1));\n  }\n  return arr.filter((e) => e >= 3).length;\n}\n", "\n  if (!n ||!k) return null;\n\n  // O(n^2)\n  let dp = [];\n  dp[0] = 0;\n  for (let i = 1; i <= n; i++) {\n    dp[i] = 0;\n    for (let j = 1; j <= i; j++) {\n      if ((i * i + (j - 1) * (j - 1)) == k * k) {\n        dp[i]++;\n      }\n    }\n  }\n  return dp[n];\n}\n", "\n  // O(n^2)\n  if (!n ||!k) return 0;\n  let dp = [];\n  dp[0] = 0;\n\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(\n      ...[\n        // if current segment can be formed with a, b and c,\n        dp[i - 1] + 1,\n        // if current segment can be formed with a and k,\n        dp[i - k] + 1,\n      ].filter((e) => e > 0)\n    );\n  }\n\n  return dp[n];\n}\n", "\n  // O(n^2)\n  let dp = [];\n  let temp = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      temp += i * j;\n    }\n    dp[i] = temp;\n    temp = 0;\n  }\n\n  return dp[n-1] - (k*(k-1) * n / 2);\n}\n"]}
{"task_id": "MBJSP/237", "prompt": "function nCommonWords(text, n) {\n/**\n * * Write a function to find the occurrences of n most common words in a given text.\n */\n  const words = text.split(\" \");\n  const counts = {};\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    counts[word] = counts[word] ? counts[word] + 1 : 1;\n  }\n  const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);\n  const top = sorted.slice(0, n);\n  return top;\n}\nfunction maxSimilarIndices(testlist1, testlist2) {\n/**\n * * Write a function to find the maximum of similar indices in two lists of tuples.\n */\n  const result = [];\n  for (let i = 0; i < testList1.length; i++) {\n    const similar = testList2.filter((item) => item[0] === testList1[i][0]);\n    if (similar.length > 0) {\n      result.push(similar.map((item) => item[1]));\n    }\n  }\n  return result;\n}\nfunction getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction checkOccurences(testlist) {\n/**\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n */", "entry_point": "checkOccurences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]];\nvar x0 = checkOccurences(arg00);\nvar v0 = {\"[1, 3]\":2,\"[2, 5]\":2,\"[3, 6]\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]];\nvar x1 = checkOccurences(arg10);\nvar v1 = {\"[2, 4]\":2,\"[3, 6]\":2,\"[4, 7]\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]];\nvar x2 = checkOccurences(arg20);\nvar v2 = {\"[2, 13]\":1,\"[11, 23]\":1,\"[12, 25]\":2,\"[16, 23]\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let similarCount = 0;\n    let maxCount = 0;\n    const similarTuples = testlist.map((item) => item[1]);\n    for (let i = 0; i < testlist.length; i++) {\n        for (let j = 0; j < testlist.length; j++) {\n            if (similarTuples.indexOf(testlist[i][1])!== -1 && similarTuples.indexOf(testlist[j][1])!== -1) {\n                similarCount++;\n            }\n        }\n    }\n    maxCount = similarCount > maxCount? similarCount : maxCount;\n    return maxCount;\n}\n", "\n  let count = 0;\n  let result = 0;\n  for (let i = 0; i < testList.length; i++) {\n    const item = testList[i];\n    if (item[1] % 2 === 0) {\n      count++;\n    }\n  }\n  if (count % 2 === 1) {\n    result = count;\n  }\n  return result;\n}\n", "\n  const test1 = testList.filter((item) => item[1] === test1[0][1]);\n  const test2 = testList.filter((item) => item[1] === test2[0][1]);\n  const test3 = testList.filter((item) => item[1] === test3[0][1]);\n  const test4 = testList.filter((item) => item[1] === test4[0][1]);\n  const result = maxSimilarIndices(test1, test2);\n  return result.join(\",\") === maxSimilarIndices(test3, test4).join(\",\")? \"true\" : \"false\";\n}\n// returns the list of words in the given text.\n", "\n  const similarCount = testlist.map((item) => item[1]);\n  return similarCount.every((item) => item === similarCount[0]);\n}\n", "\n    const result = [];\n    for (let i = 0; i < testlist.length; i++) {\n        const similar = testlist.filter((item) => item[1] === testlist[i][1]);\n        if (similar.length > 0) {\n            result.push(similar.map((item) => item[0]));\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/238", "prompt": "function countList(inputlist) {\n/**\n * * Write a JavaScript function to count the number of lists in a given number of lists.\n */\n    let count = 0;\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction occuranceSubstring(text, pattern) {\n/**\n * * Write a function to find the occurrence and position of the substrings within a string.\n */\n  const first = text.indexOf(pattern);\n  const last = first + pattern.length;\n  return [pattern, first, last];\n}\nfunction checkVow(string, vowels) {\n/**\n * * Write a JavaScript function to count number of vowels in the string.\n */\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.includes(string[i])) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction numberOfSubstrings(str) {\n/**\n * * Write a JavaScript function to count number of non-empty substrings of a given string.\n */", "entry_point": "numberOfSubstrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = numberOfSubstrings(arg00);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcd\";\nvar x1 = numberOfSubstrings(arg10);\nvar v1 = 10;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcde\";\nvar x2 = numberOfSubstrings(arg20);\nvar v2 = 15;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i]!== '') {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        let j = 0;\n        while (j < str.length && str[i + j] == str[j]) {\n            j++;\n        }\n        count += j;\n    }\n    return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < str.length - 1; i++) {\n      if (str[i]!== \"\" && str[i + 1]!== \"\") {\n          count++;\n      }\n  }\n  return count;\n}\n", "\n    let subStr = '';\n    for (let i = 0; i < str.length; i++) {\n        if (str[i]!=='') {\n            subStr += str[i];\n        }\n    }\n    let count = 0;\n    for (let i = 0; i < subStr.length; i++) {\n        if (subStr[i]!=='') {\n            count++;\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/239", "prompt": "function checkSmaller(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] < testTup2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\nfunction getLudic(n) {\n/**\n * * Write a function to get a lucid number smaller than or equal to n.\n */\n    return [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43].filter(\n        num => num <= n);\n}\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction getTotalNumberOfSequences(m, n) {\n/**\n * * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n */", "entry_point": "getTotalNumberOfSequences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 4;\nvar x0 = getTotalNumberOfSequences(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 2;\nvar x1 = getTotalNumberOfSequences(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar arg21 = 3;\nvar x2 = getTotalNumberOfSequences(arg20, arg21);\nvar v2 = 84;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let table = [];\n  for (let i = 0; i < n + 1; i++) {\n    table[i] = [];\n    table[i][0] = 1;\n    for (let j = 1; j < i + 1; j++) {\n      table[i][j] = table[i - 1][j] + table[i - 1][j - 1];\n    }\n  }\n  return table[n][m];\n}\n", "\n  let result = 0;\n  for (let i = 0; i <= m; i++) {\n    for (let j = 0; j <= n; j++) {\n      if ((i + j) <= m) {\n        result++;\n      }\n    }\n  }\n  return result;\n}\n", "\n  let total = 0;\n  let result = getLudic(n);\n  for (let i = 0; i < result.length; i++) {\n    let testTup = result[i];\n    total += Math.pow(testTup, n);\n  }\n  return total;\n}\n", "\n  let count = 0;\n  let currTup = [...getLudic(m)].concat([...getLudic(n)]);\n  while (!currTup.every((elem, idx) => elem <= 2 * idx - 1)) {\n    let nextTup = currTup.shift().concat([...currTup]);\n    if (nextTup.every((elem, idx) => elem < m) && nextTup.every((elem, idx) => elem >= 2 * idx - 1)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < m + 1; i++) {\n    let sum = 0;\n    for (let j = i; j < i + n; j++) {\n      sum += j;\n    }\n    if (sum <= m) {\n      result += 1;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/240", "prompt": "function extract(lst) {\n/**\n * * Write a JavaScript function to get the last element of each sublist.\n */\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][lst[i].length - 1]);\n    }\n    return result;\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction replaceSpaces(string) {\n/**\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n */\n  return string.replace(/ /g, \"%20\");\n}\nfunction replaceList(list1, list2) {\n/**\n * * Write a function to replace the last element of the list with another list.\n */", "entry_point": "replaceList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 7, 9, 10];\nvar arg01 = [2, 4, 6, 8];\nvar x0 = replaceList(arg00, arg01);\nvar v0 = [1, 3, 5, 7, 9, 2, 4, 6, 8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar arg11 = [5, 6, 7, 8];\nvar x1 = replaceList(arg10, arg11);\nvar v1 = [1, 2, 3, 4, 5, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"blue\", \"green\"];\nvar arg21 = [\"yellow\"];\nvar x2 = replaceList(arg20, arg21);\nvar v2 = [\"red\", \"blue\", \"yellow\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return replaceListLast(list1, list2);\n}\n", "\n    for (let i = 0; i < list1.length; i++) {\n        list1[i] = list1[i] + list2[i];\n    }\n    return list1;\n}\n", "\n  list1.splice(list1.length - 1, 1, list2);\n  return list1;\n}\n", "\n  return list1.slice(0, -1).concat(list2);\n}\n", "\n  let newList = [];\n  for (let i = 0; i < list1.length; i++) {\n    newList.push(list1[i]);\n  }\n  for (let i = 0; i < list2.length; i++) {\n    newList[newList.length - 1] = list2[i];\n  }\n  return newList;\n}\n"]}
{"task_id": "MBJSP/241", "prompt": "function freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction extract(lst) {\n/**\n * * Write a JavaScript function to get the last element of each sublist.\n */\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][lst[i].length - 1]);\n    }\n    return result;\n}\nfunction countVariable(a, b, c, d) {\n/**\n * * Write a function to iterate over elements repeating each as many times as its count.\n */\n    var arr = [];\n    for (var i = 0; i < a; i++) {\n        arr.push(\"p\");\n    }\n    for (var i = 0; i < b; i++) {\n        arr.push(\"q\");\n    }\n    for (var i = 0; i < c; i++) {\n        arr.push(\"r\");\n    }\n    for (var i = 0; i < d; i++) {\n        arr.push(\"s\");\n    }\n    return arr;\n}\nfunction array3d(m, n, o) {\n/**\n * * Write a function to generate a 3d array having each element as '*'.\n */", "entry_point": "array3d", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = array3d(arg00, arg01, arg02);\nvar v0 = [[[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 3;\nvar arg12 = 4;\nvar x1 = array3d(arg10, arg11, arg12);\nvar v1 = [[[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar arg22 = 3;\nvar x2 = array3d(arg20, arg21, arg22);\nvar v2 = [[[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var arr = [];\n    for (var i = 0; i < m; i++) {\n        arr.push([]);\n        for (var j = 0; j < n; j++) {\n            arr[i].push([]);\n            for (var k = 0; k < o; k++) {\n                arr[i][j].push(\"*\");\n            }\n        }\n    }\n    return arr;\n}\n", "\n    var result = [];\n    for (var i = 0; i < m; i++) {\n        var tempArr = [];\n        for (var j = 0; j < n; j++) {\n            var tempArr2 = [];\n            for (var k = 0; k < o; k++) {\n                tempArr2.push(\"*\");\n            }\n            tempArr.push(tempArr2);\n        }\n        result.push(tempArr);\n    }\n    return result;\n}\n", "\n    var arr = [];\n    for (var i = 0; i < m; i++) {\n        for (var j = 0; j < n; j++) {\n            for (var k = 0; k < o; k++) {\n                arr.push(\"*\");\n            }\n        }\n    }\n    return arr;\n}\n", "\n    var a = [];\n    for (var i = 0; i < m; i++) {\n        var row = [];\n        for (var j = 0; j < n; j++) {\n            var col = [];\n            for (var k = 0; k < o; k++) {\n                col.push(\"*\");\n            }\n            row.push(col);\n        }\n        a.push(row);\n    }\n    return a;\n}\n", "\n    var arr = [];\n    for (var i = 0; i < m; i++) {\n        arr[i] = [];\n        for (var j = 0; j < n; j++) {\n            arr[i][j] = \"*\";\n        }\n    }\n    return arr;\n}\n"]}
{"task_id": "MBJSP/242", "prompt": "function maxRunUppercase(teststr) {\n/**\n * * Write a function to find maximum run of uppercase characters in the given string.\n */\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i] === testStr[i].toUpperCase()) {\n      current++;\n    } else {\n      current = 0;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\nfunction toggleString(string) {\n/**\n * * Write a function to toggle characters case in a string.\n */\n  return string.split(\"\").map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join(\"\");\n}\nfunction countVowels(teststr) {\n/**\n * * Write a function to count those characters which have vowels as their neighbors in the given string.\n */\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (vowels.includes(testStr[i])) {\n      if (i === 0 || vowels.includes(testStr[i - 1])) {\n        count++;\n      }\n      if (i === testStr.length - 1 || vowels.includes(testStr[i + 1])) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction countCharac(str1) {\n/**\n * * Write a function to count total characters in a string.\n */", "entry_point": "countCharac", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programming\";\nvar x0 = countCharac(arg00);\nvar v0 = 18;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"language\";\nvar x1 = countCharac(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"words\";\nvar x2 = countCharac(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let total = 0;\n  for (let i = 0; i < str1.length; i++) {\n    total++;\n  }\n  return total;\n}\n", "\n  return str1.length;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    count++;\n  }\n  return count;\n}\n", "\n  let count = 0;\n  let chars = str1.split(\"\");\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].length;\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    count++;\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/243", "prompt": "function findFirstOccurrence(a, x) {\n/**\n * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n */\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction reArrangeTuples(testlist, ordlist) {\n/**\n * * Write a function to re-arrange the given tuples based on the given ordered list.\n */\n  const result = [];\n  for (let i = 0; i < ordList.length; i++) {\n    const item = ordList[i];\n    const index = testList.findIndex(x => x[0] === item);\n    if (index === -1) {\n      result.push(testList.find(x => x[1] === item));\n    } else {\n      result.push(testList[index]);\n    }\n  }\n  return result;\n}\nfunction sortOnOccurence(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */", "entry_point": "sortOnOccurence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, \"Jake\"], [2, \"Bob\"], [1, \"Cara\"]];\nvar x0 = sortOnOccurence(arg00);\nvar v0 = [[1, \"Jake\", \"Cara\", 2], [2, \"Bob\", 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"b\", \"ball\"], [\"a\", \"arm\"], [\"b\", \"b\"], [\"a\", \"ant\"]];\nvar x1 = sortOnOccurence(arg10);\nvar v1 = [[\"b\", \"ball\", \"b\", 2], [\"a\", \"arm\", \"ant\", 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, \"Mark\"], [3, \"Maze\"], [2, \"Sara\"]];\nvar x2 = sortOnOccurence(arg20);\nvar v2 = [[2, \"Mark\", \"Sara\", 2], [3, \"Maze\", 1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const lst_new = [];\n  const lst_final = [];\n  let a, i, b, j;\n  for (i = 0; i < lst.length; i++) {\n    a = lst[i];\n    for (j = i + 1; j < lst.length; j++) {\n      b = lst[j];\n      if (a[0] === b[0]) {\n        lst_new.push([a[1], b[1]]);\n      }\n    }\n    lst_final.push(lst_new.sort(sortListFirst));\n    lst_new = [];\n  }\n  return lst_final.sort(sortListLast);\n}\n", "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const index = lst.findIndex(x => x[0] === lst[i][0]);\n    if (index === -1) {\n      result.push(lst.find(x => x[1] === lst[i][1]));\n    } else {\n      result.push(lst[index]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i];\n    const index = lst.findIndex(x => x[0] === item);\n    if (index === -1) {\n      result.push(item);\n    } else {\n      result.push(lst[index][1]);\n    }\n  }\n  return result;\n}\n", "\n  lst.sort((a, b) => a[0] - b[0]);\n}\n", "\n  return lst.sort((a, b) => a[0] - b[0]);\n}\n"]}
{"task_id": "MBJSP/244", "prompt": "function checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction isPerfectSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number is a perfect square or not.\n */\n    if (n < 0) {\n        return false;\n    }\n    let sqrt = Math.sqrt(n);\n    return sqrt === Math.floor(sqrt);\n}\nfunction sqrtRoot(num) {\n/**\n * * Write a function to find the square root of a perfect number.\n */\n  if (num < 0) {\n    return null;\n  }\n\n  let start = 0;\n  let end = num;\n  let mid = 0;\n  let result = 0;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    result = mid * mid;\n    if (result === num) {\n      return mid;\n    } else if (result < num) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n\n  return mid;\n}\nfunction nextPerfectSquare(n) {\n/**\n * * Write a JavaScript function to find the next perfect square greater than a given number.\n */", "entry_point": "nextPerfectSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 35;\nvar x0 = nextPerfectSquare(arg00);\nvar v0 = 36;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = nextPerfectSquare(arg10);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = nextPerfectSquare(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sqrt = sqrtRoot(n);\n  if (sqrt === null) {\n    return null;\n  }\n\n  let sqrtSqrt = sqrt * sqrt;\n  while (sqrtSqrt + 1 < n) {\n    sqrtSqrt++;\n  }\n\n  return sqrtSqrt;\n}\n", "\n  if (n < 0) {\n    return null;\n  }\n\n  let sqrt = sqrtRoot(n);\n\n  return sqrt * sqrt + 1;\n}\n", "\n  let sqrt = Math.sqrt(n);\n  return Math.floor(sqrt * sqrt) + 1;\n}\n", "\n  let start = 1;\n  let end = n;\n  let mid = 0;\n  let result = 0;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    result = mid * mid;\n    if (result >= n) {\n      return mid;\n    } else {\n      end = mid - 1;\n    }\n  }\n\n  return mid;\n}\n", "\n  if (n < 1) {\n    return null;\n  }\n\n  let sqrt = sqrtRoot(n);\n\n  if (sqrt < 0) {\n    return null;\n  }\n\n  if (isPerfectSquare(n)) {\n    return sqrt;\n  }\n\n  return nextPerfectSquare(sqrt);\n}\n"]}
{"task_id": "MBJSP/245", "prompt": "function lbs(arr) {\n/**\n * * Write a function to find the longest bitonic subsequence for the given array.\n */\n    var n = arr.length,\n        lis = Array(n).fill(1),\n        lds = Array(n).fill(1),\n        max = 0;\n\n    for (var i = 1; i < n; i++) {\n        for (var j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n            if (arr[i] < arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n        max = Math.max(max, lis[i] + lds[i] - 1);\n    }\n    return max;\n}\nfunction maxSumPairDiffLessthanK(arr, n, k) {\n/**\n * * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n */\n\tarr.sort((a, b) => a - b);\n\tlet dp = new Array(n).fill(0);\n\tdp[0] = 0;\n\tfor (let i = 1; i < n; i++) {\n\t\tdp[i] = dp[i - 1];\n\t\tif (arr[i] - arr[i - 1] < k) {\n\t\t\tif (i >= 2) {\n\t\t\t\tdp[i] = Math.max(dp[i], dp[i - 2] + arr[i] + arr[i - 1]);\n\t\t\t} else {\n\t\t\t\tdp[i] = Math.max(dp[i], arr[i] + arr[i - 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n - 1];\n}\nfunction maxSumIncreasingSubsequence(arr, n) {\n/**\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n */\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\nfunction maxSum(arr, n) {\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n */", "entry_point": "maxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 15, 51, 45, 33, 100, 12, 18, 9];\nvar arg01 = 9;\nvar x0 = maxSum(arg00, arg01);\nvar v0 = 194;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [80, 60, 30, 40, 20, 10];\nvar arg11 = 6;\nvar x1 = maxSum(arg10, arg11);\nvar v1 = 210;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 14, 16, 21, 23, 29, 30];\nvar arg21 = 8;\nvar x2 = maxSum(arg20, arg21);\nvar v2 = 138;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i] && arr[j] > arr[j + 1]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\n", "\n  arr.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < n - 1; i++) {\n    if (arr[i] + arr[i + 1] < arr[i + 2]) {\n      sum += arr[i] + arr[i + 1];\n    }\n  }\n  return sum;\n}\n", "\n\tarr.sort((a, b) => a - b);\n\tlet dp = new Array(n).fill(0);\n\tlet max = 0;\n\tfor (let i = 0; i < n; i++) {\n\t\tdp[i] = arr[i];\n\t\tfor (let j = i - 1; j >= 0; j--) {\n\t\t\tif (arr[j] < arr[i] && (dp[j] + arr[i]) > dp[i]) {\n\t\t\t\tdp[i] = dp[j] + arr[i];\n\t\t\t}\n\t\t}\n\t\tmax = Math.max(max, dp[i]);\n\t}\n\treturn max;\n}\n", "\n\tlet max = 0;\n\tfor (let i = 0; i < n; i++) {\n\t\tlet sum = 0;\n\t\tfor (let j = i; j < n; j++) {\n\t\t\tsum += arr[j];\n\t\t\tmax = Math.max(max, sum);\n\t\t}\n\t}\n\treturn max;\n}\n", "\n    const lis = Array(n).fill(1),\n        lds = Array(n).fill(1),\n        max = 0;\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n            if (arr[i] < arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n        max = Math.max(max, lis[i] + lds[i] - 1);\n    }\n    return max;\n}\n"]}
{"task_id": "MBJSP/246", "prompt": "function sqrtRoot(num) {\n/**\n * * Write a function to find the square root of a perfect number.\n */\n  if (num < 0) {\n    return null;\n  }\n\n  let start = 0;\n  let end = num;\n  let mid = 0;\n  let result = 0;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    result = mid * mid;\n    if (result === num) {\n      return mid;\n    } else if (result < num) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n\n  return mid;\n}\nfunction surfaceArea(b, s) {\n/**\n * * Write a JavaScript function to find the surface area of the square pyramid.\n */\n    return 2 * b * s + Math.pow(b, 2);\n}\nfunction maxaverageofpath(cost, n) {\n/**\n * * Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n */\n\tlet dp = [];\n\tfor (let i = 0; i <= n; i++) {\n\t\tdp.push([]);\n\t\tfor (let j = 0; j <= n; j++) {\n\t\t\tdp[i][j] = 0;\n\t\t}\n\t}\n\n\tfor (let i = 1; i <= n; i++) {\n\t\tfor (let j = 1; j <= n; j++) {\n\t\t\tdp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i - 1][j - 1];\n\t\t}\n\t}\n\n\treturn dp[n][n] / (2 * n - 1);\n}\nfunction babylonianSquareroot(number) {\n/**\n * * Write a function for computing square roots using the babylonian method.\n */", "entry_point": "babylonianSquareroot", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = babylonianSquareroot(arg00);\nvar v0 = 3.162277660168379;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = babylonianSquareroot(arg10);\nvar v1 = 1.414213562373095;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = babylonianSquareroot(arg20);\nvar v2 = 3.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tif (number < 0) {\n\t\treturn null;\n\t}\n\tlet sqrt = Math.sqrt(number);\n\n\tif (sqrt === 0 || sqrt === Number.POSITIVE_INFINITY) {\n\t\treturn sqrt;\n\t}\n\n\tlet x = 0;\n\tlet y = 0;\n\tlet current = 0;\n\tlet limit = 0;\n\tlet last = 0;\n\tlet root = 0;\n\n\twhile (root * root <= number) {\n\t\tx = y;\n\t\ty = (last + current) / 2;\n\n\t\tcurrent = (x + y) / 2;\n\n\t\tif (current === number) {\n\t\t\treturn current;\n\t\t}\n\n\t\tif (current * current < number) {\n\t\t\tlast = current;\n\t\t}\n\t}\n\n\treturn root;\n}\n", "\n\tlet root = 1;\n\tlet lowerBound = 1;\n\tlet upperBound = number;\n\n\twhile (Math.abs(root - lowerBound) >= 0.000001) {\n\t\tlet avg = (lowerBound + upperBound) / 2;\n\t\tif (Math.abs(avg - lowerBound) < 0.000001) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (Math.pow(avg, 2) > number) {\n\t\t\tlowerBound = avg;\n\t\t} else {\n\t\t\tupperBound = avg;\n\t\t}\n\t}\n\n\treturn lowerBound;\n}\n", "\n\tlet root = 1;\n\tlet root1 = 0;\n\tlet root2 = 0;\n\n\twhile (Math.pow(root, 2) <= number) {\n\t\troot1 = root;\n\t\troot2 = root;\n\t\troot = (root + number / root) / 2;\n\t}\n\n\treturn Math.sqrt(number);\n}\n", "\n\tif (number < 0) {\n\t\treturn null;\n\t}\n\n\tlet result = 0;\n\tlet upperLimit = number;\n\n\twhile (Math.pow(upperLimit, 2) < number) {\n\t\tresult++;\n\t\tupperLimit *= 2;\n\t}\n\n\treturn result;\n}\n\n/**\n * * Write a ", "\n  let start = 0;\n  let end = number;\n  let mid = 0;\n  let result = 0;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    result = Math.pow(mid, 2);\n    if (result === number) {\n      return mid;\n    } else if (result < number) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n\n  return mid;\n}\n"]}
{"task_id": "MBJSP/247", "prompt": "function longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction lcsOfThree(x, y, z, m, n, o) {\n/**\n * * Write a function to find the longest common subsequence for the given three string sequence.\n */\n    if (x.length === 0 || y.length === 0 || z.length === 0) return 0;\n    if (x[0] === y[0] && x[0] === z[0]) return 1 + lcsOfThree(x.substring(1), y.substring(1), z.substring(1), m, n, o);\n    const a = lcsOfThree(x.substring(1), y, z, m, n, o);\n    const b = lcsOfThree(x, y.substring(1), z, m, n, o);\n    const c = lcsOfThree(x, y, z.substring(1), m, n, o);\n    return a > b && a > c ? a : b > c ? b : c;\n}\nfunction lbs(arr) {\n/**\n * * Write a function to find the longest bitonic subsequence for the given array.\n */\n    var n = arr.length,\n        lis = Array(n).fill(1),\n        lds = Array(n).fill(1),\n        max = 0;\n\n    for (var i = 1; i < n; i++) {\n        for (var j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n            if (arr[i] < arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n        max = Math.max(max, lis[i] + lds[i] - 1);\n    }\n    return max;\n}\nfunction lps(str) {\n/**\n * * Write a function to find the longest palindromic subsequence in the given string.\n */", "entry_point": "lps", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"TENS FOR TENS\";\nvar x0 = lps(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"CARDIO FOR CARDS\";\nvar x1 = lps(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"PART OF THE JOURNEY IS PART\";\nvar x2 = lps(arg20);\nvar v2 = 9;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    str = str.replace(/[^a-zA-Z0-9]/g, \"\").toLowerCase();\n    var f = [str, str.length],\n        m = [f[0]],\n        r = [0, 0],\n        s = [0, 0],\n        t = [0, 0],\n        g = 0,\n        h = 0,\n        i = 0,\n        j = 0,\n        p = 0;\n\n    ", "\n    var len = str.length,\n        ans = new Array(len).fill(0),\n        temp = new Array(len).fill(0),\n        strCopy = str.substring(0, len - 1);\n    for (var i = 0; i < len; i++) {\n        ans[i] = 0;\n    }\n    for (var i = 0; i < len - 1; i++) {\n        if (str[i] == str[i + 1]) {\n            ans[i] = ans[i - 1] + 2;\n            temp[i + 1] = ans[i];\n        }\n    }\n    for (var i = 1; i < len; i++) {\n        if (str[i] == str[i - 1]) {\n            ans[i - 1] = temp[i];\n        }\n    }\n    return ans[len - 1];\n}\n", "\n    var strLen = str.length,\n        lps = new Array(strLen).fill(1),\n        max = 0;\n\n    ", "\n  let len = str.length;\n  if (len === 0) return 0;\n  let lps = [],\n      i = 0,\n      j = 0;\n  while (i < len) {\n      if (str[i] === str[j]) {\n          lps[i++] = ++j;\n      } else if (j) {\n          j = lps[j - 1];\n      } else {\n          lps[i++] = 0;\n      }\n  }\n  return lps.join('').length;\n}\n\n// 1. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0430\u0439\u0442.\nconst arr = ['a', 'b', 'c', 'd'];\nconsole.log(arr.map(String).join(''));\n\n// 2. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0439\u0442\u0435 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0430\u0439\u0442 \u0432 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\nconst arr = [1, 2, 3, 4];\nconsole.log(arr.map(x => x * x).join(''));\n\n// 3. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\nconst arr = [1, 2, 3, 4, 5];\nconsole.log(arr.map(x => x * x * x).join(''));\n\n// 4. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440", "\n    if (str.length === 0) return [];\n    if (str.length === 1) return [str];\n    var ans = str.split(\"\").map((x, i) => {\n        return (i % 2 === 0? x : x.substring(1)) + (i % 2 === 0? x : x.substring(0, 1))\n    }),\n        length = ans.reduce((a, b) => a + b.length, 0),\n        subseq = ans.reduce((a, b) => a.concat(b), []);\n    if (subseq.length === length) return [subseq];\n    var lps1 = lps(ans.slice(0, ans.length / 2)),\n        lps2 = lps(ans.slice(ans.length / 2));\n    return lps1.concat(lps2).filter("]}
{"task_id": "MBJSP/249", "prompt": "function addList(nums1, nums2) {\n/**\n * * Write a function to add two lists using map and lambda function.\n */\n  return nums1.map((num, i) => num + nums2[i]);\n}\nfunction mulList(nums1, nums2) {\n/**\n * * Write a function to multiply two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 * nums2[index]);\n}\nfunction divList(nums1, nums2) {\n/**\n * * Write a function to divide two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 / nums2[index]);\n}\nfunction intersectionArray(arraynums1, arraynums2) {\n/**\n * * Write a function to find the intersection of two arrays using lambda function.\n */", "entry_point": "intersectionArray", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg01 = [1, 2, 4, 8, 9];\nvar x0 = intersectionArray(arg00, arg01);\nvar v0 = [1, 2, 8, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg11 = [3, 5, 7, 9];\nvar x1 = intersectionArray(arg10, arg11);\nvar v1 = [3, 5, 7, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg21 = [10, 20, 30, 40];\nvar x2 = intersectionArray(arg20, arg21);\nvar v2 = [10];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return arraynums1.filter((num1, index) => arraynums2.indexOf(num1)!== -1);\n}\n", "\n  return arraynums1.filter((num, i) => arraynums2.indexOf(num)!== -1);\n}\n", "\n  const result = [];\n  arraynums1.forEach((nums1, index) => {\n    if (arraynums2.includes(nums1)) {\n      result.push(nums1);\n    }\n  });\n  return result;\n}\n", "\n  return arraynums1.filter(", "\n  const set = arraynums1.reduce((set1, num) => {\n    set1[num] = true;\n    return set1;\n  }, {});\n  const newArray = [];\n  for (const num of arraynums2) {\n    if (set[num] === true) {\n      newArray.push(num);\n    }\n  }\n  return newArray;\n}\n\nconst setnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst setnums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconsole.log(setnums1.map(num => num + nums2[num]))\n\nconsole.log(mulList(setnums1, setnums2))\n\nconsole.log(divList(setnums1, setnums2))\n\nconsole.log(intersectionArray(setnums1, setnums2))"]}
{"task_id": "MBJSP/250", "prompt": "function last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction countElementFreq(testtuple) {\n/**\n * * Write a function to count the element frequency in the mixed nested tuple.\n */\n  let freq = {};\n  for (let i = 0; i < testTuple.length; i++) {\n    if (Array.isArray(testTuple[i])) {\n      let innerFreq = countElementFreq(testTuple[i]);\n      for (let key in innerFreq) {\n        freq[key] = freq[key] ? freq[key] + innerFreq[key] : innerFreq[key];\n      }\n    } else {\n      freq[testTuple[i]] = (freq[testTuple[i]] || 0) + 1;\n    }\n  }\n  return freq;\n}\nfunction countElim(num) {\n/**\n * * Write a function to count the elements in a list until an element is a tuple.\n */\n  let count = 0;\n  while (typeof num[count] !== 'object') {\n    count += 1;\n  }\n\n  return count;\n}\nfunction countX(tup, x) {\n/**\n * * Write a JavaScript function to count the occcurences of an element in a tuple.\n */", "entry_point": "countX", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg01 = 4;\nvar x0 = countX(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg11 = 10;\nvar x1 = countX(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg21 = 8;\nvar x2 = countX(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let key in tup) {\n    if (tup[key] === x) {\n      count += 1;\n    }\n  }\n  return count;\n}\n", "\n  return tup.reduce((a, b) => {\n    return a[b]? a[b] + 1 : 1;\n  }, {});\n}\n", "\n  let count = 0;\n  for (let i = 0; i < tup.length; i++) {\n    if (tup[i] === x) {\n      count += 1;\n    }\n  }\n  return count;\n}\n", "\n  let start = 0;\n  let end = tup.length - 1;\n  let mid = Math.floor((start + end) / 2);\n  while (tup[mid]!== x && start < end) {\n    if (x < tup[mid]) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  if (tup[mid] === x) {\n    return mid;\n  }\n  return -1;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < tup.length; i++) {\n    if (tup[i] === x) {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n"]}
{"task_id": "MBJSP/251", "prompt": "function last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction extract(lst) {\n/**\n * * Write a JavaScript function to get the last element of each sublist.\n */\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][lst[i].length - 1]);\n    }\n    return result;\n}\nfunction freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction insertElement(list, element) {\n/**\n * * Write a function to insert an element before each element of a list.\n */", "entry_point": "insertElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Black\"];\nvar arg01 = \"c\";\nvar x0 = insertElement(arg00, arg01);\nvar v0 = [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"python\", \"java\"];\nvar arg11 = \"program\";\nvar x1 = insertElement(arg10, arg11);\nvar v1 = [\"program\", \"python\", \"program\", \"java\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"happy\", \"sad\"];\nvar arg21 = \"laugh\";\nvar x2 = insertElement(arg20, arg21);\nvar v2 = [\"laugh\", \"happy\", \"laugh\", \"sad\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    for (let i = 0; i < list.length; i++) {\n        list[i] = [list[i], element];\n    }\n    return list;\n}\n", "\n  let newList = [], i = 0, j = 0;\n  while (i < list.length) {\n    newList[j] = list[i];\n    i++;\n    j++;\n  }\n  newList.push(element);\n  return newList;\n}\n", "\n  list.push(element);\n  return list;\n}\n", "\n  for (let i = 0; i < list.length; i++) {\n    list[i] = element + list[i];\n  }\n  return list;\n}\n", "\n  let i = 0;\n  for (i = 0; i < list.length; i++) {\n    list[i] = element;\n  }\n  return list;\n}\n"]}
{"task_id": "MBJSP/252", "prompt": "function isUpper(string) {\n/**\n * * Write a JavaScript function to convert the given string to upper case.\n */\n    return string.toUpperCase();\n}\nfunction convert(string) {\n/**\n * * Write a JavaScript function to convert a string to a list.\n */\n    return string.split(\" \");\n}\nfunction lenComplex(a, b) {\n/**\n * * Write a function to get the length of a complex number.\n */\n  return Math.sqrt(a * a + b * b);\n}\nfunction convert(numbers) {\n/**\n * * Write a JavaScript function to convert complex numbers to polar coordinates.\n */", "entry_point": "convert", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = convert(arg00);\nvar v0 = [1.0, 0.0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = convert(arg10);\nvar v1 = [4.0, 0.0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = convert(arg20);\nvar v2 = [5.0, 0.0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var len = numbers.length;\n    var result = new Array(len);\n    for (var i = 0; i < len; i++) {\n        var number = numbers[i];\n        if (number < 0) {\n            number = number * -1;\n            var b = Math.sqrt(number);\n            result[i] = {\n                r: b,\n                phi: (Math.PI / 2)\n            };\n        }\n        else {\n            var a = Math.sqrt(number);\n            result[i] = {\n                r: a,\n                phi: 0\n            };\n        }\n    }\n    return result;\n}\n", "\n    return {\n        r: Math.sqrt(numbers.a * numbers.a + numbers.b * numbers.b),\n        theta: Math.atan(numbers.b / numbers.a)\n    };\n}\n", "\n  return [Math.sqrt(numbers[0] * numbers[0] + numbers[1] * numbers[1]), Math.atan2(numbers[1], numbers[0]) * 180 / Math.PI];\n}\n", "\n    if (numbers.length === 1) {\n        return [convert(numbers[0])];\n    }\n    else {\n        return [\n            convert(numbers[0]),\n            convert(numbers[1])\n        ];\n    }\n}\n", "\n    var angle = Math.atan2(numbers[1], numbers[0]);\n    var radius = Math.sqrt(numbers[0] * numbers[0] + numbers[1] * numbers[1]);\n    return [radius, angle];\n}\n"]}
{"task_id": "MBJSP/253", "prompt": "function removeEven(l) {\n/**\n * * Write a JavaScript function to remove even numbers from a given list.\n */\n  return l.filter(x => x % 2 !== 0);\n}\nfunction countPairs(arr, n) {\n/**\n * * Write a JavaScript function to count equal element pairs from the given array.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction countPairs(arr, n) {\n/**\n * * Write a JavaScript function to count unequal element pairs from the given array.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] !== arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction countInteger(list1) {\n/**\n * * Write a JavaScript function to count integers from a given list.\n */", "entry_point": "countInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, \"abc\", 1.2];\nvar x0 = countInteger(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = countInteger(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1.2, 4, 5.1];\nvar x2 = countInteger(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (typeof list1[i] === 'number') {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let l of list1) {\n    if (typeof l == 'number') {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  list1.forEach(element => {\n    if (typeof element === \"number\") {\n      count++;\n    }\n  });\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (typeof list1[i] === \"number\") {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (typeof list1[i] === 'number') {\n      count++;\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/254", "prompt": "function reverseWords(s) {\n/**\n * * Write a function to reverse words in a given string.\n */\n  return s.split(' ').reverse().join(' ');\n}\nfunction capitalWordsSpaces(str1) {\n/**\n * * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n */\n    return str1.replace(/([A-Z])/g, ' $1').trim();\n}\nfunction removeLength(teststr, k) {\n/**\n * * Write a function to remove all the words with k length in the given string.\n */\n  let str = testStr.split(' ');\n  let newStr = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].length !== k) {\n      newStr.push(str[i]);\n    }\n  }\n  return newStr.join(' ');\n}\nfunction wordsAe(text) {\n/**\n * * Write a function to find all words starting with 'a' or 'e' in a given string.\n */", "entry_point": "wordsAe", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programe\";\nvar x0 = wordsAe(arg00);\nvar v0 = [\"ame\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python programe language\";\nvar x1 = wordsAe(arg10);\nvar v1 = [\"ame\", \"anguage\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"assert statement\";\nvar x2 = wordsAe(arg20);\nvar v2 = [\"assert\", \"atement\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let str = text.split(' ');\n  let newStr = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].substring(0, 1) === 'a' || str[i].substring(0, 1) === 'e') {\n      newStr.push(str[i]);\n    }\n  }\n  return newStr.join(' ');\n}\n", "\n  let word = [];\n  let reg = new RegExp(/ae/);\n  text.replace(reg, (value) => {\n    word.push(value);\n  });\n  return word.join(' ');\n}\n", "\n  let re = /a|e/gi;\n  let arr = text.split(re);\n  return arr.join('');\n}\n", "\n  let words = text.split(' ');\n  let answer = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].indexOf('a')!== -1 || words[i].indexOf('e')!== -1) {\n      answer.push(words[i]);\n    }\n  }\n  return answer.join(' ');\n}\n", "\n  return text.split(' ').filter((s) => {\n    return s.charAt(0) === 'a' || s.charAt(0) === 'e';\n  });\n}\n"]}
{"task_id": "MBJSP/255", "prompt": "function subLists(mylist) {\n/**\n * * Write a function to generate all sublists of a given list.\n */\n  const subLists = [];\n  for (let i = 0; i < myList.length; i++) {\n    subLists.push([]);\n  }\n  for (let i = 0; i < myList.length; i++) {\n    for (let j = 0; j < subLists.length; j++) {\n      subLists[j].push(myList[i]);\n    }\n  }\n  return subLists;\n}\nfunction testThreeEqual(x, y, z) {\n/**\n * * Write a JavaScript function to count the number of equal numbers from three given integers.\n */\n  return (x === y) ? (x === z) ? 3 : 0 : (x === z) ? (y === z) ? 3 : 1 : (y === z) ? 2 : 0;\n}\nfunction findCombinations(testlist) {\n/**\n * * Write a function to find the combinations of sums with tuples in the given tuple list.\n */\n  const length = testList.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      result.push([testList[i][0] + testList[j][0], testList[i][1] + testList[j][1]]);\n    }\n  }\n  return result;\n}\nfunction combinationsColors(l, n) {\n/**\n * * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n */", "entry_point": "combinationsColors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Blue\"];\nvar arg01 = 1;\nvar x0 = combinationsColors(arg00, arg01);\nvar v0 = [[\"Red\"], [\"Green\"], [\"Blue\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Red\", \"Green\", \"Blue\"];\nvar arg11 = 2;\nvar x1 = combinationsColors(arg10, arg11);\nvar v1 = [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Red\", \"Green\", \"Blue\"];\nvar arg21 = 3;\nvar x2 = combinationsColors(arg20, arg21);\nvar v2 = [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const r = l / n;\n  const g = (l - r * n) / n;\n  const b = l - (r * n) - (g * n);\n  return [\n    [['Red', 'Green', 'Blue']],\n    [['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue']],\n    [['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue']],\n    [\n      [['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue']],\n      [['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue']],\n      [['Red', 'Green', 'Blue'], ['Red', 'Green', 'Blue'], ['Red',", "\n  const colours = ['red', 'blue', 'green'];\n  const result = [];\n  let resultCounter = 0;\n  let combinationsCounter = 0;\n  for (let i = 0; i < colours.length; i++) {\n    for (let j = i + 1; j < colours.length; j++) {\n      for (let k = j + 1; k < colours.length; k++) {\n        resultCounter++;\n        if (resultCounter < n) {\n          combinationsCounter++;\n          result.push([colours[i], colours[j], colours[k]]);\n        } else {\n          return result;\n        }\n      }\n    }\n  }\n  return result;\n}\n", "\n  const combinations = [];\n  for (let i = 0; i < l; i++) {\n    for (let j = i + 1; j < l; j++) {\n      for (let k = j + 1; k < l; k++) {\n        combinations.push([l, n, i, j, k]);\n      }\n    }\n  }\n  return combinations;\n}\n", "\n  return combinations(l, n, {\n    insertAt: 0,\n    removeAt: 0,\n    replaceAt: 0,\n    push: 0,\n    pop: 0,\n    shift: 0,\n    unshift: 0,\n    remove: 0,\n    get: 0,\n  });\n}\n", "\n  const a = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const result = [];\n  for (let i = 0; i < l; i++) {\n    for (let j = i + 1; j < l; j++) {\n      const color_1 = a[i];\n      const color_2 = a[j];\n      const color_3 = a[i + j];\n      result.push([color_1, color_2, color_3]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/256", "prompt": "function testThreeEqual(x, y, z) {\n/**\n * * Write a JavaScript function to count the number of equal numbers from three given integers.\n */\n  return (x === y) ? (x === z) ? 3 : 0 : (x === z) ? (y === z) ? 3 : 1 : (y === z) ? 2 : 0;\n}\nfunction findDigits(n) {\n/**\n * * Write a JavaScript function to count the number of digits in factorial of a given number.\n */\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return n.toString().length + factorial.toString().split('').length - 1;\n}\nfunction countFac(n) {\n/**\n * * Write a JavaScript function to count the number of distinct power of prime factor of given number.\n */\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i === 0) {\n          n /= i;\n          count++;\n        } else {\n          j++;\n        }\n      }\n    }\n  }\n  return count;\n}\nfunction countPrimesNums(n) {\n/**\n * * Write a JavaScript function to count the number of prime numbers less than a given non-negative number.\n */", "entry_point": "countPrimesNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = countPrimesNums(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = countPrimesNums(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = countPrimesNums(arg20);\nvar v2 = 25;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    let j = 2;\n    while (i * j <= n) {\n      if (i % j === 0) {\n        break;\n      } else {\n        j++;\n      }\n    }\n    if (i * j > n) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  let num = 2;\n  while (num <= n) {\n    for (let i = 2; i <= num; i++) {\n      if (num % i === 0) {\n        num++;\n        break;\n      }\n    }\n    count++;\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/257", "prompt": "function perfectSquares(a, b) {\n/**\n * * Write a function to find perfect squares between two given numbers.\n */\n  let perfectSquares = [];\n  for (let i = a; i <= b; i++) {\n    if (Math.sqrt(i) % 1 === 0) {\n      perfectSquares.push(i);\n    }\n  }\n  return perfectSquares;\n}\nfunction minOfTwo(x, y) {\n/**\n * * Write a function to find minimum of two numbers.\n */\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\nfunction maxOfTwo(x, y) {\n/**\n * * Write a function to find maximum of two numbers.\n */\n  return x > y ? x : y;\n}\nfunction swapNumbers(a, b) {\n/**\n * * Write a function to swap two numbers.\n */", "entry_point": "swapNumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = swapNumbers(arg00, arg01);\nvar v0 = [20, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 17;\nvar x1 = swapNumbers(arg10, arg11);\nvar v1 = [17, 15];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar arg21 = 200;\nvar x2 = swapNumbers(arg20, arg21);\nvar v2 = [200, 100];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  a = a + b;\n  b = a - b;\n  a = a - b;\n  return [a, b];\n}\n", "\n  let temp = a;\n  a = b;\n  b = temp;\n  return b;\n}\n", "\n  let temp = a;\n  a = b;\n  b = temp;\n  return [a, b];\n}\n", "\n  let temp = a;\n  a = b;\n  b = temp;\n  return [a, b];\n}\n", "\n  let temp = a;\n  a = b;\n  b = temp;\n  return [a, b];\n}\n"]}
{"task_id": "MBJSP/258", "prompt": "function nthNums(nums, n) {\n/**\n * * Write a function to find the n-th power of individual elements in a list using lambda function.\n */\n  return nums.map(num => num ** n);\n}\nfunction squareNums(nums) {\n/**\n * * Write a function to find squares of individual elements in a list using lambda function.\n */\n  return nums.map(num => num * num);\n}\nfunction countEven(arraynums) {\n/**\n * * Write a function to find number of even elements in the given list using lambda function.\n */\n  return arrayNums.filter(num => num % 2 === 0).length;\n}\nfunction countOdd(arraynums) {\n/**\n * * Write a function to find number of odd elements in the given list using lambda function.\n */", "entry_point": "countOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 7, 8, 10];\nvar x0 = countOdd(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 15, 14, 13, -18, 12, -20];\nvar x1 = countOdd(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 4, 8, 9];\nvar x2 = countOdd(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return arrayNums.filter(num => num % 2!== 0).length;\n}\n", "\n  return arrayNums.filter(num => num % 2!== 0).length;\n}\n", "\n  return arrayNums.filter(num => num % 2!== 0).length;\n}\n", "\n  return arrayNums.filter(num => num % 2!== 0).length;\n}\n", "\n  return arrayNums.filter(num => num % 2!== 0).length;\n}\n"]}
{"task_id": "MBJSP/259", "prompt": "function maxSimilarIndices(testlist1, testlist2) {\n/**\n * * Write a function to find the maximum of similar indices in two lists of tuples.\n */\n  const result = [];\n  for (let i = 0; i < testList1.length; i++) {\n    const similar = testList2.filter((item) => item[0] === testList1[i][0]);\n    if (similar.length > 0) {\n      result.push(similar.map((item) => item[1]));\n    }\n  }\n  return result;\n}\nfunction tupleModulo(testtup1, testtup2) {\n/**\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n */\n  return testTup1.map((element, index) => element % testTup2[index]);\n}\nfunction findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction maximizeElements(testtup1, testtup2) {\n/**\n * * Write a function to maximize the given two tuples.\n */", "entry_point": "maximizeElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = maximizeElements(arg00, arg01);\nvar v0 = [[6, 7], [4, 9], [2, 9], [7, 10]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = maximizeElements(arg10, arg11);\nvar v1 = [[7, 8], [5, 10], [3, 10], [8, 11]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = maximizeElements(arg20, arg21);\nvar v2 = [[8, 9], [6, 11], [4, 11], [9, 12]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return findDissimilar(testtup1, testtup2)\n    .concat(tupleModulo(testtup1, testtup2))\n    .concat(tupleModulo(testtup2, testtup1))\n    .reduce((max, value) => (value > max? value : max));\n}\n\nconst testlist1 = [\n  ['A', 'B', 'C'],\n  ['A', 'B', 'D'],\n  ['A', 'C', 'E'],\n  ['A', 'D', 'E'],\n  ['B', 'C', 'E'],\n  ['B', 'D', 'E'],\n  ['C', 'D', 'E'],\n  ['D', 'E'],\n  ['E'],\n];\nconst testlist2 = [\n  ['A', 'B', 'C'],\n  ['A', 'B', 'D'],\n  ['A', 'C', 'E'],\n  ['A', 'D', 'E'],\n  ['B', 'C', 'E'],\n  ['B', 'D', 'E'],\n  ['C', 'D', 'E'],\n  ['D', 'E'],\n];\n\nconst testtup1 = [\n  ['A', 'B', 'C'],\n  ['A', 'B', 'D'],\n  ['A', 'C', 'E'],\n  ['A', 'D', 'E'],\n  ['B', 'C', 'E'],\n  ['B', 'D', 'E'],\n  ['C', 'D', 'E'],\n  ['D', 'E'],\n  ['E'", "\n  return tupleModulo(testtup1, testtup2);\n}\nconst testList = [\n  ['i', 'j', 'k'],\n  ['i', 'j','m'],\n  ['i', 'j', 'p'],\n  ['i', 'j', 'r'],\n  ['i', 'j','s'],\n  ['i','m', 'p'],\n  ['i', 'n', 'p'],\n  ['k', 'l', 'q'],\n  ['k', 'l','s'],\n  ['k', 'l', 't'],\n  ['k', 'l', 'r'],\n  ['k', 'l', 't'],\n  ['m', 'n', 'p'],\n  ['m', 'n', 'q'],\n  ['p', 'q', 't'],\n  ['p', 'q', 'r'],\n  ['p', 'q','s'],\n  ['p', 'q', 't'],\n  ['p', 'q', 'r'],\n  ['p', 'q', 't'],\n  ['p', 'q', 'r'],\n  ['p', 'q','s'],\n  ['p', 'q', 't'],\n  ['r','s', 't'],\n  ['r','s', 'q'],\n  ['s', 'q', 't'],\n  ['t', 'q', 'r'],\n  ['t', 'q','s'],\n  ['t', 'q', 'k'],\n  ['t', 'q', 'l'],\n  ['t', 'r','s'],\n  ['", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result.push(testTup1[i]);\n    } else if (testTup1[i] < testTup2[i]) {\n      result.push(testTup2[i]);\n    } else {\n      result.push(testTup1[i]);\n      result.push(testTup2[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const currentMax = Math.max(testtup1[i], testtup2[i]);\n    const currentMin = Math.min(testtup1[i], testtup2[i]);\n    if (currentMin === currentMax) {\n      result.push(currentMin);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    for (let j = 0; j < testtup2.length; j++) {\n      if (testtup1[i] > testtup2[j]) {\n        result.push(testtup1[i]);\n        break;\n      } else if (testtup1[i] < testtup2[j]) {\n        result.push(testtup2[j]);\n        break;\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/260", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction newmanPrime(n) {\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */", "entry_point": "newmanPrime", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = newmanPrime(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = newmanPrime(arg10);\nvar v1 = 17;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = newmanPrime(arg20);\nvar v2 = 41;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tvar l = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 77, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 237, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941", "\n\tvar a = 0;\n\tvar b = 1;\n\tvar c = 1;\n\tvar d = 2;\n\tvar e = 3;\n\tvar f = 2;\n\tvar g = 3;\n\tvar h = 5;\n\tvar i = 17;\n\tvar j = 31;\n\tvar k = 41;\n\tvar l = 37;\n\tvar m = 23;\n\tvar nPrime;\n\tvar nPrevPrime;\n\tvar nNextPrime;\n\tvar nPrevPrimeNum;\n\tvar nNextPrimeNum;\n\tvar nPrevPrimeNum2;\n\tvar nNextPrimeNum2;\n\tvar nPrevPrimeNum3;\n\tvar nNextPrimeNum3;\n\tvar nPrevPrimeNum4;\n\tvar nNextPrimeNum4;\n\tvar nPrevPrimeNum5;\n\tvar nNextPrimeNum5;\n\tvar nPrevPrimeNum6;\n\tvar nNextPrimeNum6;\n\tvar nPrevPrimeNum7;\n\tvar nNextPrimeNum7;\n\tvar nPrevPrimeNum8;\n\tvar nNextPrimeNum8;\n\tvar nPrevPrimeNum9;\n\tvar nNextPrimeNum9;\n\tvar nPrevPrimeNum10;\n\tvar nNextPrimeNum10;\n\tvar nPrevPrimeNum11;\n\tvar nNextPrimeNum11;\n\tvar nPrevPrimeNum12;\n\tvar nNextPrimeNum12;\n\tvar nPrevPrimeNum13;\n\tvar nNextPrimeNum13;\n\tvar nPrevPrimeNum14;\n\tvar nNextPrimeNum14;\n\tvar nPrevPrimeNum15;\n\tvar nNextPrimeNum15;\n\tvar nPrevPrimeNum16;\n\tvar nNextPrimeNum16;\n\tvar", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n === 1) {\n\t\treturn 2;\n\t}\n\treturn shanksWilliamsPrime(n - 1) + 2 * shanksWilliamsPrime(n - 2);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n === 0) {\n\t\treturn 1;\n\t}\n\tif (n === 1) {\n\t\treturn 2;\n\t}\n\treturn newmanPrime(n - 1) + 2 * newmanPrime(n - 2);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 3;\n\t}\n\tvar a = 1, b = 2, c = 3, d = 4, e = 5;\n\twhile (n > 1) {\n\t\tif (n % 2 == 0) {\n\t\t\tn = n / 2;\n\t\t}\n\t\telse {\n\t\t\tn = 3 * n + 1;\n\t\t}\n\t}\n\t"]}
{"task_id": "MBJSP/261", "prompt": "function clearTuple(testtup) {\n/**\n * * Write a function to clear the values of the given tuples.\n */\n  // code goes here\n  return []\n}\nfunction setToTuple(s) {\n/**\n * * Write a function to convert the given set into tuples.\n */\n  return [...s];\n}\nfunction chunkTuples(testtup, n) {\n/**\n * * Write a function to perform chunking of tuples each of size n.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length; i += n) {\n    result.push(testTup.slice(i, i + n));\n  }\n  return result;\n}\nfunction divisionElements(testtup1, testtup2) {\n/**\n * * Write a function to perform mathematical division operation across the given tuples.\n */", "entry_point": "divisionElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = divisionElements(arg00, arg01);\nvar v0 = [2, 2, 2, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 6, 8, 16];\nvar arg11 = [6, 3, 4, 4];\nvar x1 = divisionElements(arg10, arg11);\nvar v1 = [2, 2, 2, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [20, 14, 36, 18];\nvar arg21 = [5, 7, 6, 9];\nvar x2 = divisionElements(arg20, arg21);\nvar v2 = [4, 2, 6, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return [...testtup1,...testtup2];\n}\n", "\n  let result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    let temp = testtup1[i] / testtup2[i];\n    temp = Math.round(temp);\n    result.push(temp);\n  }\n  return result;\n}\n", "\n  return testtup1 / testtup2;\n}\n", "\n  return [...testtup1].map((x) => x / [...testtup2]);\n}\n", "\n  return testtup1[0] / testtup2[0];\n}\n"]}
{"task_id": "MBJSP/262", "prompt": "function packConsecutiveDuplicates(list1) {\n/**\n * * Write a function to pack consecutive duplicates of a given list elements into sublists.\n */\n  let result = [];\n  let current = [];\n  let last = null;\n\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === last) {\n      current.push(list1[i]);\n    } else {\n      if (current.length > 0) {\n        result.push(current);\n      }\n      current = [list1[i]];\n      last = list1[i];\n    }\n  }\n\n  if (current.length > 0) {\n    result.push(current);\n  }\n\n  return result;\n}\nfunction maxSumList(lists) {\n/**\n * * Write a function to find the list in a list of lists whose sum of elements is the highest.\n */\n  let maxSum = 0;\n  let maxSumList = [];\n  for (let i = 0; i < lists.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < lists[i].length; j++) {\n      sum += lists[i][j];\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n      maxSumList = lists[i];\n    }\n  }\n  return maxSumList;\n}\nfunction splitArr(a, n, k) {\n/**\n * * Write a JavaScript function to split the array and add the first part to the end.\n */\n    var b = a.splice(0, k);\n    a = a.concat(b);\n    return a;\n}\nfunction splitTwoParts(list1, l) {\n/**\n * * Write a function to split a given list into two parts where the length of the first part of the list is given.\n */", "entry_point": "splitTwoParts", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nvar arg01 = 3;\nvar x0 = splitTwoParts(arg00, arg01);\nvar v0 = [[1, 1, 2], [3, 4, 4, 5, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"b\", \"c\", \"d\"];\nvar arg11 = 2;\nvar x1 = splitTwoParts(arg10, arg11);\nvar v1 = [[\"a\", \"b\"], [\"c\", \"d\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar arg21 = 4;\nvar x2 = splitTwoParts(arg20, arg21);\nvar v2 = [[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (list1.length > l) {\n    let a = list1.splice(0, list1.length / 2);\n    let b = list1.splice(list1.length / 2, l - list1.length / 2);\n    return [a, b];\n  } else {\n    return [list1, []];\n  }\n}\n", "\n  var i;\n  for (i = 0; i < list1.length - l - 1; i++) {\n    if (i === 0) {\n      return splitArr(list1, l, i + 1);\n    }\n  }\n  return splitArr(list1, l, i);\n}\n", "\n  var result = [];\n  let l1 = l / 2;\n  let l2 = l - l1;\n  let n1 = list1.splice(0, l1);\n  let n2 = list1.splice(0, l2);\n  result.push(n1);\n  result.push(n2);\n  return result;\n}\n", "\n  let part1 = list1.splice(0, l);\n  let part2 = list1;\n  return [part1, part2];\n}\n", "\n  let first = [];\n  let second = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (i < l) {\n      first.push(list1[i]);\n    } else {\n      second.push(list1[i]);\n    }\n  }\n  return [first, second];\n}\n"]}
{"task_id": "MBJSP/263", "prompt": "function merge(lst) {\n/**\n * * Write a JavaScript function to merge the first and last elements separately in a list of lists.\n */\n    if (lst.length <= 1) {\n        return lst;\n    }\n\n    var result = [];\n\n    var first = lst[0];\n    var firstLen = first.length;\n\n    for (var i = 0; i < firstLen; i++) {\n        result.push([first[i]]);\n    }\n\n    for (var i = 1; i < lst.length; i++) {\n        var item = lst[i];\n        var len = item.length;\n\n        for (var j = 0; j < len; j++) {\n            result[j].push(item[j]);\n        }\n    }\n\n    return result;\n}\nfunction emptyList(length) {\n/**\n * * Write a function to create a list of empty dictionaries.\n */\n  let arr = [];\n  for (let i = 0; i < length; i++) {\n    arr.push({});\n  }\n  return arr;\n}\nfunction mergeDictionaries(dict1, dict2) {\n/**\n * * Write a function to merge two dictionaries into a single expression.\n */\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  return merged;\n}\nfunction mergeDict(d1, d2) {\n/**\n * * Write a function to merge two dictionaries.\n */", "entry_point": "mergeDict", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"a\"':100,'\"b\"':200};\nvar arg01 = {'\"x\"':300,'\"y\"':200};\nvar x0 = mergeDict(arg00, arg01);\nvar v0 = {'\"x\"':300,'\"y\"':200,'\"a\"':100,'\"b\"':200};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nvar arg11 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nvar x1 = mergeDict(arg10, arg11);\nvar v1 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"a\"':10,'\"b\"':20};\nvar arg21 = {'\"x\"':30,'\"y\"':40};\nvar x2 = mergeDict(arg20, arg21);\nvar v2 = {'\"x\"':30,'\"y\"':40,'\"a\"':10,'\"b\"':20};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const merged = {};\n  for (const key in d1) {\n    merged[key] = d1[key];\n  }\n  for (const key in d2) {\n    merged[key] = d2[key];\n  }\n  return merged;\n}\n", "\n  const merged = {};\n  for (const key in d1) {\n    merged[key] = d1[key];\n  }\n  for (const key in d2) {\n    merged[key] = d2[key];\n  }\n  return merged;\n}\n", "\n  const merged = {};\n  for (const key in d1) {\n    merged[key] = d1[key];\n  }\n  for (const key in d2) {\n    merged[key] = d2[key];\n  }\n  return merged;\n}\n", "\n  var merged = {};\n  for (const key in d1) {\n    merged[key] = d1[key];\n  }\n  for (const key in d2) {\n    merged[key] = d2[key];\n  }\n  return merged;\n}\n", "\n  const merged = {};\n  for (const key in d1) {\n    merged[key] = d1[key];\n  }\n  for (const key in d2) {\n    merged[key] = d2[key];\n  }\n  return merged;\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/264", "prompt": "function discriminantValue(x, y, z) {\n/**\n * * Write a function to calculate the discriminant value.\n */\n    discriminant = (y ** 2) - (4 * x * z);\n    if (discriminant > 0) {\n        return [\"Two solutions\", discriminant];\n    } else if (discriminant == 0) {\n        return [\"one solution\", discriminant];\n    } else if (discriminant < 0) {\n        return [\"no real solution\", discriminant];\n    }\n}\nfunction sdCalc(data) {\n/**\n * * Write a function to calculate the standard deviation.\n */\n  const mean = data.reduce((acc, cur) => acc + cur, 0) / data.length;\n  const diff = data.map(x => x - mean);\n  const sqDiff = diff.map(x => x * x);\n  const sumSq = sqDiff.reduce((acc, cur) => acc + cur, 0);\n  const sd = Math.sqrt(sumSq / (data.length - 1));\n  return sd;\n}\nfunction windChill(v, t) {\n/**\n * * Write a function to calculate wind chill index.\n */\n  \"use strict\";\n  var windchill = 13.12 + 0.6215 * t - 11.37 * Math.pow(v, 0.16) + 0.3965 * t * Math.pow(v, 0.16);\n  return Math.round(windchill);\n}\nfunction dogAge(hage) {\n/**\n * * Write a function to calculate a dog's age in dog's years.\n */", "entry_point": "dogAge", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = dogAge(arg00);\nvar v0 = 61;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = dogAge(arg10);\nvar v1 = 73;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 24;\nvar x2 = dogAge(arg20);\nvar v2 = 109;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (hage >= 0 && hage < 3) {\n    return [\"dog's year is less than 3 years\", hage];\n  } else if (hage >= 3 && hage < 5) {\n    return [\"dog's year is between 3 and 5 years\", hage];\n  } else if (hage >= 5 && hage < 7) {\n    return [\"dog's year is between 5 and 7 years\", hage];\n  } else if (hage >= 7 && hage < 10) {\n    return [\"dog's year is between 7 and 10 years\", hage];\n  } else if (hage >= 10) {\n    return [\"dog's year is over 10 years\", hage];\n  }\n}\n", "\n  return Math.round(hage * 0.6 + 17.5);\n}\n", "\n  const h = hage / 365;\n  const f = ", "\n  \"use strict\";\n  const age = hage / 12;\n  return Math.round(age);\n}\n", "\n  \"use strict\";\n  var age = Math.round(hage / 12);\n  return age;\n}\n"]}
{"task_id": "MBJSP/265", "prompt": "function divisibleByDigits(startnum, endnum) {\n/**\n * * Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n */\n  let result = [];\n  for (let i = startnum; i <= endnum; i++) {\n    let num = i;\n    let digits = [];\n    while (num > 0) {\n      digits.push(num % 10);\n      num = Math.floor(num / 10);\n    }\n    let isDivisible = true;\n    for (let j = 0; j < digits.length; j++) {\n      if (i % digits[j] !== 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    if (isDivisible) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction catalanNumber(num) {\n/**\n * * Write a function for nth catalan number.\n */\n  let arr = new Array(num + 1).fill(0);\n  arr[0] = 1;\n  arr[1] = 1;\n  for (let i = 2; i <= num; i++) {\n    for (let j = 0; j < i; j++) {\n      arr[i] += arr[j] * arr[i - j - 1];\n    }\n  }\n  return arr[num];\n}\nfunction addStr(testtup, k) {\n/**\n * * Write a function to convert tuple into list by adding the given string after every element.\n */\n  let result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(testTup[i]);\n    result.push(k);\n  }\n  return result;\n}\nfunction listSplit(s, step) {\n/**\n * * Write a function to split a list for every nth element.\n */", "entry_point": "listSplit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"];\nvar arg01 = 3;\nvar x0 = listSplit(arg00, arg01);\nvar v0 = [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar arg11 = 3;\nvar x1 = listSplit(arg10, arg11);\nvar v1 = [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"];\nvar arg21 = 2;\nvar x2 = listSplit(arg20, arg21);\nvar v2 = [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    for (let i = 0; i < step && index < s.length; i++) {\n      result.push(s[index]);\n      index++;\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < s.length; i += step) {\n    result.push(s[i]);\n  }\n  return result;\n}\n", "\n  let result = [];\n  let len = s.length;\n  for (let i = 0; i < len; i += step) {\n    result.push(s.slice(i, i + step));\n  }\n  return result;\n}\n", "\n  let result = [];\n  let index = s.length - 1;\n  while (s.length % step!== 0) {\n    index = s.length - 1;\n    s = s.slice(0, s.length - 1);\n  }\n  let array = s.split('');\n  let mod = s.length / step;\n  for (let i = 0; i < mod; i++) {\n    result.push(array);\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < s.length; i += step) {\n    result.push(s[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/266", "prompt": "function surfaceArea(b, s) {\n/**\n * * Write a JavaScript function to find the surface area of the square pyramid.\n */\n    return 2 * b * s + Math.pow(b, 2);\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction lateralsurfaceCone(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cone.\n */\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\nfunction lateralsurfaceCube(l) {\n/**\n * * Write a function to find the lateral surface area of a cube.\n */", "entry_point": "lateralsurfaceCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = lateralsurfaceCube(arg00);\nvar v0 = 100;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar x1 = lateralsurfaceCube(arg10);\nvar v1 = 324;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = lateralsurfaceCube(arg20);\nvar v2 = 400;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (2 * 2 * 2 * l);\n}\n", "\n    return l * l * l;\n}\n", "\n  return (4 * 3.1415 * l * l);\n}\n", "\n  return l * l * l;\n}\n", "\n  var s = l / 2;\n  return (6 * s * s * s);\n}\n"]}
{"task_id": "MBJSP/267", "prompt": "function oddNumSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of first n odd natural numbers.\n */\n  let total = 0;\n  for (let i = 1; i < n * 2 + 1; i += 2) {\n    total += Math.pow(i, 4);\n  }\n\n  return total;\n}\nfunction oddNumSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of first n odd natural numbers.\n */\n  let result = 0;\n\n  for (let i = 1; i < n * 2; i += 2) {\n    result += Math.pow(i, 5);\n  }\n\n  return result;\n}\nfunction cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n odd natural numbers.\n */\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 3);\n    }\n    return sum;\n}\nfunction squareSum(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of first n odd natural numbers.\n */", "entry_point": "squareSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = squareSum(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = squareSum(arg10);\nvar v1 = 35;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squareSum(arg20);\nvar v2 = 84;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 2);\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 2);\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 2);\n    }\n    return sum;\n}\n", "\n  var sum = 0;\n  for (var i = 0; i < n; i++) {\n    sum += Math.pow(2 * i + 1, 2);\n  }\n  return sum;\n}\n\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 2);\n    }\n    return sum;\n}\n"]}
{"task_id": "MBJSP/268", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction findStarNum(n) {\n/**\n * * Write a function to find the n'th star number.\n */", "entry_point": "findStarNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = findStarNum(arg00);\nvar v0 = 37;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = findStarNum(arg10);\nvar v1 = 73;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = findStarNum(arg20);\nvar v2 = 121;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tif (n === 0) {\n\t\treturn 1;\n\t}\n\tif (n === 1) {\n\t\treturn 2;\n\t}\n\tif (n === 2) {\n\t\treturn 4;\n\t}\n\treturn findStarNum(n - 1) + findStarNum(n - 2) + findStarNum(n - 3);\n}\n", "\n\treturn n * (3 * n - 1) / 2;\n}\n", "\n\treturn (n + 1) * (n + 2) / 2;\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\treturn (n * (n + 1) / 2) - n\n}\n"]}
{"task_id": "MBJSP/269", "prompt": "function findMaxVal(n, x, y) {\n/**\n * * Write a function to find the largest possible value of k such that k modulo x is y.\n */\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % x === y) {\n      max = i;\n    }\n  }\n  return max;\n}\nfunction averageTuple(nums) {\n/**\n * * Write a function to find average value of the numbers in a given tuple of tuples.\n */\n  const sum = (accumulator, currentValue) => accumulator + currentValue;\n  const avg = (accumulator, currentValue) => accumulator + currentValue;\n  const avgArray = [];\n  for (let i = 0; i < nums[0].length; i++) {\n    avgArray.push(nums.map((nums) => nums[i]).reduce(sum) / nums.length);\n  }\n  return avgArray;\n}\nfunction exchangeElements(lst) {\n/**\n * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n */\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    if (i % 2 === 0) {\n      let temp = lst[i];\n      lst[i] = lst[i + 1];\n      lst[i + 1] = temp;\n    }\n    i++;\n  }\n  return lst;\n}\nfunction asciiValue(k) {\n/**\n * * Write a function to find the ascii value of a character.\n */", "entry_point": "asciiValue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"A\";\nvar x0 = asciiValue(arg00);\nvar v0 = 65;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"R\";\nvar x1 = asciiValue(arg10);\nvar v1 = 82;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"S\";\nvar x2 = asciiValue(arg20);\nvar v2 = 83;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let i = k;\n  let ch = i.toString(16);\n  return ch;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < k.length; i++) {\n    result = result * 33 + k.charCodeAt(i);\n  }\n  return result;\n}\n", "\n  let ascii = 0;\n  for (let i = 0; i < k.length; i++) {\n    ascii += k[i];\n  }\n  return ascii;\n}\n", "\n  let ascii = 0;\n  for (let i = 65; i <= 90; i++) {\n    if (i === k) {\n      return ascii;\n    }\n    ascii += i;\n  }\n  return -1;\n}\n", "\n  let str = k.toString();\n  let a = str.charCodeAt(0);\n  return a;\n}\n"]}
{"task_id": "MBJSP/270", "prompt": "function evenPosition(nums) {\n/**\n * * Write a JavaScript function to check whether every even index contains even numbers of a given list.\n */\n    for (let i = 0; i < nums.length; i += 2) {\n        if (nums[i] % 2 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction sumEven(l, r) {\n/**\n * * Write a JavaScript function to find the sum of all even natural numbers within the range l and r.\n */\n    let sum = 0;\n    for (let i = l; i <= r; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\nfunction averageEven(n) {\n/**\n * * Write a JavaScript function to find the average of even numbers till a given even number.\n */\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\nfunction sumEvenAndEvenIndex(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of even numbers at even positions.\n */", "entry_point": "sumEvenAndEvenIndex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 12, 1, 18, 8];\nvar arg01 = 6;\nvar x0 = sumEvenAndEvenIndex(arg00, arg01);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 20, 17, 9, 2, 10, 18, 13, 6, 18];\nvar arg11 = 10;\nvar x1 = sumEvenAndEvenIndex(arg10, arg11);\nvar v1 = 26;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 12, 1];\nvar arg21 = 4;\nvar x2 = sumEvenAndEvenIndex(arg20, arg21);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "\n    let sum = 0;\n    let count = 0;\n    for (let i = 0; i < arr.length; i += 2) {\n        if (arr[i] % 2 === 0) {\n            sum += arr[i];\n            count++;\n        }\n    }\n    return sum;\n}\n", "\n    let sum = 0;\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            sum += arr[i];\n            count++;\n        }\n    }\n    return sum;\n}\n", "\n    let sum = 0;\n    for (let i = 0; i < n; i += 2) {\n        sum += arr[i];\n    }\n    return sum;\n}\n", "\n    let sum = 0;\n    for (let i = 0; i < arr.length; i += 2) {\n        if (arr[i] % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"]}
{"task_id": "MBJSP/271", "prompt": "function evenPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of first n even natural numbers.\n */\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = 2 * i;\n        sum += j * j * j * j;\n    }\n    return sum;\n}\nfunction fifthPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of n natural numbers.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 5);\n  }\n  return sum;\n}\nfunction oddNumSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of first n odd natural numbers.\n */\n  let result = 0;\n\n  for (let i = 1; i < n * 2; i += 2) {\n    result += Math.pow(i, 5);\n  }\n\n  return result;\n}\nfunction evenPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of first n even natural numbers.\n */", "entry_point": "evenPowerSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = evenPowerSum(arg00);\nvar v0 = 1056;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = evenPowerSum(arg10);\nvar v1 = 8832;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = evenPowerSum(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n\n  for (let i = 1; i < n * 2; i += 2) {\n    result += Math.pow(i, 5);\n  }\n\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 1; i < n * 2; i++) {\n    result += Math.pow(i, 5);\n  }\n  return result;\n}\n", "\n  let result = 0;\n\n  for (let i = 1; i < n * 2; i += 2) {\n    result += Math.pow(i, 5);\n  }\n\n  return result;\n}\n", "\n  var sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += Math.pow(i, 5);\n  }\n  return sum;\n}\n\n/**\n * * Write a JavaScript ", "\n  let result = 0;\n\n  for (let i = 1; i < n * 2; i += 2) {\n    result += Math.pow(i, 5);\n  }\n\n  return result;\n}\n"]}
{"task_id": "MBJSP/272", "prompt": "function removeKthElement(list1, l) {\n/**\n * * Write a JavaScript function to remove the k'th element from a given list.\n */\n  const list = [...list1];\n  const k = list.splice(l - 1, 1);\n  return list;\n}\nfunction tupleModulo(testtup1, testtup2) {\n/**\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n */\n  return testTup1.map((element, index) => element % testTup2[index]);\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction rearExtract(testlist) {\n/**\n * * Write a function to perfom the rear element extraction from list of tuples records.\n */", "entry_point": "rearExtract", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]];\nvar x0 = rearExtract(arg00);\nvar v0 = [21, 20, 19];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]];\nvar x1 = rearExtract(arg10);\nvar v1 = [36, 25, 45];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]];\nvar x2 = rearExtract(arg20);\nvar v2 = [14, 36, 56];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testlist.map((tup) => tup[tup.length - 1]);\n}\n", "\n  const a = testlist.pop();\n  return testlist;\n}\n", "\n  return testlist.pop();\n}\n", "\n  let array = [];\n  let j = 0;\n  let i = testlist.length - 1;\n  while (j < testlist[i].length) {\n    array[j] = testlist[i][j];\n    j++;\n  }\n  array[j] = testlist[i][j];\n  return array;\n}\n", "\n  return testlist.splice(testlist.length - 1, 1)[0];\n}\n"]}
{"task_id": "MBJSP/273", "prompt": "function checkSubset(testtup1, testtup2) {\n/**\n * * Write a function to check if one tuple is a subset of another tuple.\n */\n  return testTup2.every((value) => testTup1.includes(value));\n}\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction checkSmaller(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] < testTup2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\nfunction substractElements(testtup1, testtup2) {\n/**\n * * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n */", "entry_point": "substractElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 5];\nvar arg01 = [2, 5, 18];\nvar x0 = substractElements(arg00, arg01);\nvar v0 = [8, -1, -13];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 2, 3];\nvar arg11 = [24, 45, 16];\nvar x1 = substractElements(arg10, arg11);\nvar v1 = [-13, -43, -13];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [7, 18, 9];\nvar arg21 = [10, 11, 12];\nvar x2 = substractElements(arg20, arg21);\nvar v2 = [-3, 7, -3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  testtup1.splice(testTup2);\n  return testtup1;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i] - testtup2[i]);\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result[i] = testTup1[i] - testTup2[i];\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result[i] = testTup1[i] - testTup2[i];\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push(testTup1[i] - testTup2[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/274", "prompt": "function evenPosition(nums) {\n/**\n * * Write a JavaScript function to check whether every even index contains even numbers of a given list.\n */\n    for (let i = 0; i < nums.length; i += 2) {\n        if (nums[i] % 2 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction sumOfSquare(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of binomial co-efficients.\n */\n  function factorial(start, end) {\n    var res = 1\n    for (var i = start; i <= end; i++) {\n      res *= i\n    }\n    return res\n  }\n\n  return (factorial(n + 1, 2 * n) / factorial(1, n))\n}\nfunction sumOfProduct(n) {\n/**\n * * Write a JavaScript function to find sum of product of binomial co-efficients.\n */\n  function binomialCoeff(n, k) {\n    if (n < k) {\n      return 0;\n    }\n    return factorial(n) / factorial(k) / factorial(n - k);\n  }\n\n  function factorial(n) {\n    if (n < 2) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  }\n  return binomialCoeff(2 * n, n - 1);\n}\nfunction evenBinomialCoeffSum(n) {\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */", "entry_point": "evenBinomialCoeffSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = evenBinomialCoeffSum(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = evenBinomialCoeffSum(arg10);\nvar v1 = 32;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = evenBinomialCoeffSum(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return sum(i => binomialCoeff(2 * n, i));\n}\n", "\n  ", "\n  ", "\n  ", "\n  "]}
{"task_id": "MBJSP/275", "prompt": "function countPairs(arr, n) {\n/**\n * * Write a JavaScript function to count equal element pairs from the given array.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction countPairs(arr, n) {\n/**\n * * Write a JavaScript function to count unequal element pairs from the given array.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] !== arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction getPosition(a, n, m) {\n/**\n * * Write a JavaScript function to find the position of the last removed element from the given array.\n */", "entry_point": "getPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 4];\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = getPosition(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 3];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = getPosition(arg10, arg11, arg12);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar arg21 = 4;\nvar arg22 = 1;\nvar x2 = getPosition(arg20, arg21, arg22);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let start = 0;\n    let end = a.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (a[mid]!== m && start < end) {\n        if (a[mid] < m) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (a[mid] === m) {\n        return mid;\n    }\n    return -1;\n}\n", "\n  let i = 0;\n  let j = 0;\n  let k = n - 1;\n  let count = 0;\n  while (i < n && j < m) {\n    if (a[i] <= a[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  count++;\n  while (i < n) {\n    count++;\n    a[k] = a[i];\n    i++;\n    k--;\n  }\n  while (j < m) {\n    count++;\n    a[k] = a[j];\n    j++;\n    k--;\n  }\n  return count;\n}\n", "\n  let result = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!== m) {\n      result.push(a[i]);\n    }\n  }\n  return result;\n}\n", "\n    let left = 0;\n    let right = n - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (m === a[mid]) {\n            left = mid + 1;\n        } else if (m < a[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    if (left < n) {\n        return left;\n    }\n    return -1;\n}\n", "\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      if (a[i] === a[j] && a[i]!== m) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n"]}
{"task_id": "MBJSP/276", "prompt": "function topbottomSurfacearea(r) {\n/**\n * * Write a function to find the top or bottom surface area of a cylinder.\n */\n  return 3.1415 * r * r;\n}\nfunction volumeTetrahedron(num) {\n/**\n * * Write a function to calculate volume of a tetrahedron.\n */\n  return (num * (num + 1) * (num + 2) * (num + 3)) / 6;\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction volumeCylinder(r, h) {\n/**\n * * Write a function to find the volume of a cylinder.\n */", "entry_point": "volumeCylinder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar x0 = volumeCylinder(arg00, arg01);\nvar v0 = 1570.7500000000002;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 5;\nvar x1 = volumeCylinder(arg10, arg11);\nvar v1 = 251.32000000000002;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 10;\nvar x2 = volumeCylinder(arg20, arg21);\nvar v2 = 502.64000000000004;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (3.1415 * r * r * h);\n}\n", "\n  return (3.1415 * r * r * h);\n}\n", "\n  return (3.1415 * r * r * h);\n}\n", "\n  return ((3.1415 * r * r * h) / 3);\n}\n", "\n  return 3.1415 * r * r * h;\n}\n"]}
{"task_id": "MBJSP/277", "prompt": "function filterData(students, h, w) {\n/**\n * * Write a function to filter the height and width of students which are stored in a dictionary.\n */\n  return Object.keys(students).filter(function(key) {\n    return students[key][0] >= h && students[key][1] >= w;\n  }).reduce(function(obj, key) {\n    obj[key] = students[key];\n    return obj;\n  }, {});\n}\nfunction extractUnique(testdict) {\n/**\n * * Write a function to extract unique values from the given dictionary values.\n */\n  const keys = Object.keys(testDict);\n  const vals = Object.values(testDict);\n  const uniqueVals = [];\n  vals.forEach((val) => {\n    val.forEach((v) => {\n      if (uniqueVals.indexOf(v) === -1) {\n        uniqueVals.push(v);\n      }\n    });\n  });\n  return uniqueVals.sort((a, b) => a - b);\n}\nfunction reArrangeTuples(testlist, ordlist) {\n/**\n * * Write a function to re-arrange the given tuples based on the given ordered list.\n */\n  const result = [];\n  for (let i = 0; i < ordList.length; i++) {\n    const item = ordList[i];\n    const index = testList.findIndex(x => x[0] === item);\n    if (index === -1) {\n      result.push(testList.find(x => x[1] === item));\n    } else {\n      result.push(testList[index]);\n    }\n  }\n  return result;\n}\nfunction dictFilter(dict, n) {\n/**\n * * Write a function to filter a dictionary based on values.\n */", "entry_point": "dictFilter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg01 = 170;\nvar x0 = dictFilter(arg00, arg01);\nvar v0 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Pierre Cox\"':190};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg11 = 180;\nvar x1 = dictFilter(arg10, arg11);\nvar v1 = {'\"Alden Cantrell\"':180,'\"Pierre Cox\"':190};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg21 = 190;\nvar x2 = dictFilter(arg20, arg21);\nvar v2 = {'\"Pierre Cox\"':190};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = {};\n  for (let key in dict) {\n    if (key.length >= n) {\n      result[key] = dict[key];\n    }\n  }\n  return result;\n}\n", "\n  return Object.keys(dict).filter(", "\n  return Object.keys(dict).filter(", "\n  return dict.filter(", "\n  const result = [];\n  dict.forEach((val, key) => {\n    if (val >= n) {\n      result.push(val);\n    }\n  });\n  return result;\n}\n"]}
{"task_id": "MBJSP/278", "prompt": "function countElim(num) {\n/**\n * * Write a function to count the elements in a list until an element is a tuple.\n */\n  let count = 0;\n  while (typeof num[count] !== 'object') {\n    count += 1;\n  }\n\n  return count;\n}\nfunction removeNested(testtup) {\n/**\n * * Write a function to remove the nested record from the given tuple.\n */\n  let nested = false;\n  let nestedIdx = testTup.length - 1;\n\n  while (!nested && nestedIdx >= 0) {\n    if (Array.isArray(testTup[nestedIdx])) {\n      nested = true;\n    } else {\n      nestedIdx--;\n    }\n  }\n\n  if (nested) {\n    testTup.splice(nestedIdx, 1);\n  }\n\n  return testTup;\n}\nfunction countElementFreq(testtuple) {\n/**\n * * Write a function to count the element frequency in the mixed nested tuple.\n */\n  let freq = {};\n  for (let i = 0; i < testTuple.length; i++) {\n    if (Array.isArray(testTuple[i])) {\n      let innerFreq = countElementFreq(testTuple[i]);\n      for (let key in innerFreq) {\n        freq[key] = freq[key] ? freq[key] + innerFreq[key] : innerFreq[key];\n      }\n    } else {\n      freq[testTuple[i]] = (freq[testTuple[i]] || 0) + 1;\n    }\n  }\n  return freq;\n}\nfunction countFirstElements(testtup) {\n/**\n * * Write a function to find the element count that occurs before the record in the given tuple.\n */", "entry_point": "countFirstElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, [4, 6], 10];\nvar x0 = countFirstElements(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 9, [5, 7], 11];\nvar x1 = countFirstElements(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 15, 5, 8, [2, 3], 8];\nvar x2 = countFirstElements(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let first = 0;\n  let count = 0;\n  let value = testtup[0];\n  let firstValue = value;\n\n  while (value!== firstValue) {\n    first++;\n    value = testtup[first];\n  }\n  first++;\n\n  return first;\n}\n", "\n  let tup = 0;\n  let count = 0;\n  let index = 0;\n  while (tup < testTuple.length) {\n    if (Array.isArray(testTuple[tup])) {\n      count = countFirstElements(testTuple[tup]);\n    } else {\n      index = testTuple[tup];\n      break;\n    }\n    tup++;\n  }\n  return index;\n}\n", "\n  let count = 0;\n  while (typeof testTuple[count]!== 'object') {\n    count += 1;\n  }\n  return count;\n}\n", "\n  let firstElements = {};\n  let index = 0;\n  while (testTup[index]) {\n    firstElements[testTup[index++]] = firstElements[testTup[index - 1]]? firstElements[testTup[index - 1]] + 1 : 1;\n  }\n  return firstElements;\n}\n", "\n  let count = 0;\n  while (typeof testtup[count]!== 'object') {\n    count += 1;\n  }\n\n  return count;\n}\n"]}
{"task_id": "MBJSP/279", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction isNumDecagonal(n) {\n/**\n * * Write a function to find the nth decagonal number.\n */", "entry_point": "isNumDecagonal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = isNumDecagonal(arg00);\nvar v0 = 27;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = isNumDecagonal(arg10);\nvar v1 = 175;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = isNumDecagonal(arg20);\nvar v2 = 370;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tif (n === 0) {\n\t\treturn 1;\n\t}\n\tif (n === 1) {\n\t\treturn 5;\n\t}\n\treturn decagonalNum(n) + 4 * decagonalNum(n - 1);\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n", "\n\treturn n * (3 * n - 1) / 2\n}\n"]}
{"task_id": "MBJSP/280", "prompt": "function findLiterals(text, pattern) {\n/**\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n */\n  const regex = new RegExp(pattern, \"gi\");\n  const match = text.match(regex);\n  return match ? [match[0], text.indexOf(match[0]), text.indexOf(match[0]) + match[0].length] : [];\n}\nfunction getNumber(n, k) {\n/**\n * * Write a JavaScript function to find the kth element in an array containing odd elements first and then even elements.\n */\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let odd = arr.filter(x => x % 2 !== 0);\n    let even = arr.filter(x => x % 2 === 0);\n    return k <= odd.length ? odd[k - 1] : even[k - odd.length - 1];\n}\nfunction heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction sequentialSearch(dlist, item) {\n/**\n * * Write a function to search an element in the given array by using sequential search.\n */", "entry_point": "sequentialSearch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [11, 23, 58, 31, 56, 77, 43, 12, 65, 19];\nvar arg01 = 31;\nvar x0 = sequentialSearch(arg00, arg01);\nvar v0 = [true, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 32, 45, 62, 35, 47, 44, 61];\nvar arg11 = 61;\nvar x1 = sequentialSearch(arg10, arg11);\nvar v1 = [true, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 10, 17, 19, 22, 39, 48, 56];\nvar arg21 = 48;\nvar x2 = sequentialSearch(arg20, arg21);\nvar v2 = [true, 6];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let i = 0;\n  while (dlist[i]!= item && i < dlist.length) {\n    i++;\n  }\n  if (i == dlist.length) {\n    return -1;\n  }\n  return i;\n}\n", "\n  let i = 0;\n  while (dlist[i]!== item) {\n    i++;\n  }\n  if (dlist[i] === item) return i;\n  return -1;\n}\n", "\n  let index = 0;\n  dlist.find((d) => index + d === item);\n}\n", "\n  const n = dlist.length;\n  for (let i = 0; i < n; i++) {\n    if (dlist[i] === item) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "\n  let idx = 0;\n  while (dlist[idx]!== item && idx < dlist.length) {\n    idx++;\n  }\n  if (idx === dlist.length) {\n    return -1;\n  } else {\n    return idx;\n  }\n}\n"]}
{"task_id": "MBJSP/281", "prompt": "function areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to check if roots of a quadratic equation are reciprocal of each other or not.\n */\n    if (a == c) {\n        return (\"Yes\");\n    } else {\n        return (\"No\");\n    }\n}\nfunction checkIdentical(testlist1, testlist2) {\n/**\n * * Write a function to check if two lists of tuples are identical or not.\n */\n  if (testList1.length !== testList2.length) {\n    return false;\n  }\n  for (let i = 0; i < testList1.length; i++) {\n    if (testList1[i][0] !== testList2[i][0] || testList1[i][1] !== testList2[i][1]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction allUnique(testlist) {\n/**\n * * Write a JavaScript function to check if the elements of a given list are unique or not.\n */", "entry_point": "allUnique", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = allUnique(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1, 2];\nvar x1 = allUnique(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5];\nvar x2 = allUnique(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (testlist.length!== unique(testlist).length) {\n    return false;\n  }\n  return true;\n}\n", "\n  let result = true;\n  let n = testList.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!== j && testList[i][0] === testList[j][0]) {\n        result = false;\n        break;\n      }\n    }\n    if (!result) break;\n  }\n  return result;\n}\n", "\n  let result = true;\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = i + 1; j < testlist.length; j++) {\n      if (testlist[i] === testlist[j]) {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "\n  let allUnique = true;\n  for (let i = 0; i < testList.length; i++) {\n    if (i === testList.length - 1) {\n      if (testList[i]!== testList[i + 1]) {\n        allUnique = false;\n      }\n    } else {\n      if (testList[i] === testList[i + 1]) {\n        allUnique = false;\n      }\n    }\n  }\n  return allUnique;\n}\n", "\n  if (testlist.length < 1) {\n    return false;\n  }\n  let result = true;\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = 0; j < testlist.length; j++) {\n      if (i === j) {\n        continue;\n      } else {\n        if (testlist[i][0] === testlist[j][0] && testlist[i][1] === testlist[j][1]) {\n          return false;\n        }\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/282", "prompt": "function addList(nums1, nums2) {\n/**\n * * Write a function to add two lists using map and lambda function.\n */\n  return nums1.map((num, i) => num + nums2[i]);\n}\nfunction mulList(nums1, nums2) {\n/**\n * * Write a function to multiply two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 * nums2[index]);\n}\nfunction divList(nums1, nums2) {\n/**\n * * Write a function to divide two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 / nums2[index]);\n}\nfunction subList(nums1, nums2) {\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */", "entry_point": "subList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = [4, 5, 6];\nvar x0 = subList(arg00, arg01);\nvar v0 = [-3, -3, -3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2];\nvar arg11 = [3, 4];\nvar x1 = subList(arg10, arg11);\nvar v1 = [-2, -2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [90, 120];\nvar arg21 = [50, 70];\nvar x2 = subList(arg20, arg21);\nvar v2 = [40, 50];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums1.map((num1, index) => num1 - nums2[index]);\n}\n", "\n  return nums1.map((num1, index) => num1 - nums2[index]);\n}\n", "\n  return nums1.map((num1, index) => num1 - nums2[index]);\n}\n", "\n  return nums1.map((num1, index) => num1 - nums2[index]);\n}\n", "\n  return nums1.map((num1, index) => num1 - nums2[index]);\n}\n"]}
{"task_id": "MBJSP/283", "prompt": "function digitDistanceNums(n1, n2) {\n/**\n * * Write a JavaScript function to find the digit distance between two integers.\n */\n    // convert to string to get the string length.\n    n1 = n1.toString();\n    n2 = n2.toString();\n\n    let difference = Math.abs(n1.length - n2.length);\n\n    if (n1.length > n2.length) {\n        difference -= 1;\n    }\n\n    let min = Math.min(n1.length, n2.length);\n\n    for (let i = 0; i < min; i++) {\n        difference += Math.abs(n1.charCodeAt(i) - n2.charCodeAt(i));\n    }\n\n    return difference;\n}\nfunction areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction productEqual(n) {\n/**\n * * Write a JavaScript function to check whether the product of digits of a number at even and odd places is equal or not.\n */\n  const num = n.toString().split('');\n  let odd = 1;\n  let even = 1;\n  for (let i = 0; i < num.length; i += 2) {\n    odd *= Number(num[i]);\n  }\n  for (let i = 1; i < num.length; i += 2) {\n    even *= Number(num[i]);\n  }\n  if (odd === even) {\n    return true;\n  }\n  return false;\n}\nfunction validate(n) {\n/**\n * * Write a JavaScript function to check whether the frequency of each digit is less than or equal to the digit itself.\n */", "entry_point": "validate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1234;\nvar x0 = validate(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 51241;\nvar x1 = validate(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 321;\nvar x2 = validate(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let num = n.toString().split('');\n    let count = {};\n    let result = true;\n    for (let i = 0; i < num.length; i++) {\n        count[num[i]] = count[num[i]] || 0;\n        count[num[i]] += 1;\n    }\n\n    for (let i in count) {\n        if (count[i] > 1) {\n            result = false;\n        }\n    }\n\n    return result;\n}\n", "\n    let num = n.toString().split('');\n    let sum = 0;\n    for (let i = 0; i < num.length; i++) {\n        let count = num[i].toString().split('').length;\n        sum += count;\n        if (sum > num[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "\n    let num = n.toString().split('');\n    let result = true;\n    for (let i = 0; i < num.length; i++) {\n        if (num[i].toString().length!== num[i]) {\n            result = false;\n            break;\n        }\n        if (num[i].toString().length < num[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\n", "\n    const num = n.toString().split('');\n    let result = true;\n    for (let i = 0; i < num.length; i++) {\n        let sum = 0;\n        for (let j = i; j < num.length; j++) {\n            sum += Number(num[j]);\n        }\n        if (sum!== Number(num[i])) {\n            result = false;\n        }\n    }\n    if (result) return true;\n    else return false;\n}\n", "\n  let digit = n.toString().split('');\n  let digitCounts = {};\n  for (let i = 0; i < digit.length; i++) {\n    if (digitCounts[digit[i]] === undefined) {\n      digitCounts[digit[i]] = 1;\n    } else {\n      digitCounts[digit[i]] = digitCounts[digit[i]] + 1;\n    }\n  }\n  for (let i = 0; i < digitCounts.length; i++) {\n    if (digitCounts[digit[i]]!== digit[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]}
{"task_id": "MBJSP/284", "prompt": "function allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are within a given range or not.\n */\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return true\n    } else {\n        return false\n    }\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction checkElement(list, element) {\n/**\n * * Write a function to check whether all items of a list are equal to a given string.\n */", "entry_point": "checkElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"green\", \"orange\", \"black\", \"white\"];\nvar arg01 = \"blue\";\nvar x0 = checkElement(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = 7;\nvar x1 = checkElement(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"green\", \"green\", \"green\", \"green\"];\nvar arg21 = \"green\";\nvar x2 = checkElement(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let i = 0;\n    for (i = 0; i < list.length; i++) {\n        if (list[i]!== element) return false;\n    }\n    return true;\n}\n", "\n    if (list.length === 0) {\n        if (element === '') {\n            return true;\n        } else {\n            return false\n        }\n    }\n    let result = true;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i]!== element) {\n            result = false;\n        }\n    }\n    if (result) return true;\n    else return false;\n}\n", "\n    let isEqual = false;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] === element) {\n            isEqual = true;\n        }\n    }\n    return isEqual;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] === element) count++;\n    }\n    return count === list.length;\n}\n", "\n    // return list.length!== element.length;\n    let result = true;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i]!== element) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\n"]}
{"task_id": "MBJSP/285", "prompt": "function textStartaEndb(text) {\n/**\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n */\n  const regex = /a.*b$/;\n  const result = regex.test(text);\n  return result ? \"Found a match!\" : \"Not matched!\";\n}\nfunction textMatchZeroOne(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or one 'b'.\n */\n  if (text.match(/a(b)?/)) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}\nfunction textMatchThree(text) {\n/**\n * * Write a function that matches a string that has an a followed by three 'b'.\n */\n  if (text.match(/a\\w*b\\w*b\\w*/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\nfunction textMatchTwoThree(text) {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */", "entry_point": "textMatchTwoThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ac\";\nvar x0 = textMatchTwoThree(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"dc\";\nvar x1 = textMatchTwoThree(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abbbba\";\nvar x2 = textMatchTwoThree(arg20);\nvar v2 = \"Found a match!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (text.match(/a\\w*b\\w*/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n\nconst kb = [\n  {\n    name: 'text',\n    description: 'Text',\n    values: [\n      {\n        name: 'a',\n        description: 'a',\n        defaultValue: '1',\n        range: { min: '1', max: '20' }\n      },\n      {\n        name: 'b',\n        description: 'b',\n        defaultValue: '2'\n      }\n    ]\n  },\n  {\n    name: 'textTwo',\n    description: 'Text Two',\n    values: [\n      {\n        name: 'a',\n        description: 'a',\n        defaultValue: '1',\n        range: { min: '1', max: '20' }\n      },\n      {\n        name: 'b',\n        description: 'b',\n        defaultValue: '2'\n      }\n    ]\n  },\n  {\n    name: 'textOneTwo',\n    description: 'Text One Two',\n    values: [\n      {\n        name: 'a',\n        description: 'a',\n        defaultValue: '1',\n        range: { min: '1', max: '20' }\n      },\n      {\n        name: 'b',\n        description: 'b',\n        defaultValue: '2'\n      }\n    ]\n  },\n  {\n    name: 'textThree',\n    description: 'Text Three',\n    values: [\n      {\n        name: 'a',\n        description: 'a',\n        defaultValue: '", "\n  if (text.match(/a\\w*b\\w*b\\w*/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n", "\n  if (text.match(/a(b)?\\w*b\\w*/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n", "\n  if (text.match(/a(b|c)*b(b|c)*b/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n", "\n  if (text.match(/a\\w*b\\w*b/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\n"]}
{"task_id": "MBJSP/286", "prompt": "function getPairsCount(arr, n, sum) {\n/**\n * * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === sum) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction findTripletArray(a, arrsize, sum) {\n/**\n * * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n */\n  let aArray = [];\n  let triplet = [];\n  for (let i = 0; i < arrSize; i++) {\n    aArray.push(a[i]);\n  }\n  for (let i = 0; i < arrSize - 2; i++) {\n    for (let j = i + 1; j < arrSize - 1; j++) {\n      for (let k = j + 1; k < arrSize; k++) {\n        let sumTemp = aArray[i] + aArray[j] + aArray[k];\n        if (sumTemp === sum) {\n          triplet = [aArray[i], aArray[j], aArray[k]];\n          return triplet;\n        }\n      }\n    }\n  }\n  return triplet;\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find the largest sum of contiguous subarray in the given array.\n */\n  if (size === 0) return 0;\n  if (size === 1) return a[0];\n  let maxSum = a[0];\n  let tempSum = a[0];\n  for (let i = 1; i < size; i++) {\n    tempSum = Math.max(a[i], tempSum + a[i]);\n    maxSum = Math.max(maxSum, tempSum);\n  }\n  return maxSum;\n}\nfunction maxSubArraySumRepeated(a, n, k) {\n/**\n * * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n */", "entry_point": "maxSubArraySumRepeated", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, -30, -1];\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = maxSubArraySumRepeated(arg00, arg01, arg02);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 10, 20];\nvar arg11 = 3;\nvar arg12 = 2;\nvar x1 = maxSubArraySumRepeated(arg10, arg11, arg12);\nvar v1 = 59;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-1, -2, -3];\nvar arg21 = 3;\nvar arg22 = 3;\nvar x2 = maxSubArraySumRepeated(arg20, arg21, arg22);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n === 0) return 0;\n  if (n === 1) return a[0];\n  let temp = a[0];\n  let maxSum = 0;\n  let sum = 0;\n  let counter = 0;\n  for (let i = 1; i < n; i++) {\n    sum += temp;\n    counter++;\n    if (counter === k) {\n      sum -= temp;\n      counter = 0;\n    }\n    temp = a[i];\n    maxSum = Math.max(maxSum, sum);\n  }\n  return maxSum;\n}\n", "\n  let maxSum = 0;\n  let tempSum = 0;\n  let maxk = 0;\n  let tempk = 0;\n  for (let i = 0; i < n; i++) {\n    maxk = Math.max(maxk, k);\n    tempk = maxk;\n    tempSum = a[i];\n    for (let j = 1; j <= k; j++) {\n      maxk = Math.max(maxk, tempk + tempSum);\n      tempk = maxk;\n      tempSum = tempSum + a[i];\n    }\n    maxSum = Math.max(maxSum, maxk);\n  }\n  return maxSum;\n}\n", "\n  let sum = 0;\n  let maxSum = 0;\n  let tempSum = 0;\n  for (let i = 0; i < k; i++) {\n    for (let j = i; j < n; j++) {\n      tempSum = tempSum + a[j];\n    }\n    sum = sum + tempSum;\n    maxSum = Math.max(maxSum, sum);\n    tempSum = 0;\n  }\n  return maxSum;\n}\n", "\n  if (k === 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return a[0];\n  let maxSum = a[0];\n  let tempSum = a[0];\n  let tempMax = tempSum;\n  for (let i = 1; i < n; i++) {\n    tempSum = Math.max(a[i], tempSum + a[i]);\n    tempMax = Math.max(tempMax, tempSum);\n    maxSum = Math.max(maxSum, tempMax - tempSum);\n  }\n  if (n - k > 1) return maxSubArraySumRepeated(a, n - k, k);\n  return maxSum;\n}\n", "\n  let tempArray = [];\n  for (let i = 0; i < k; i++) {\n    tempArray.push(a[i]);\n  }\n  for (let i = k; i < n; i++) {\n    tempArray.push(a[i]);\n    tempArray.push(a[i]);\n    tempArray.push(a[i]);\n  }\n  return maxSubArraySum(a, n - k + 1);\n}\n"]}
{"task_id": "MBJSP/287", "prompt": "function cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n odd natural numbers.\n */\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 3);\n    }\n    return sum;\n}\nfunction difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction evenPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of first n even natural numbers.\n */\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = 2 * i;\n        sum += j * j * j * j;\n    }\n    return sum;\n}\nfunction squareSum(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of first n even natural numbers.\n */", "entry_point": "squareSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = squareSum(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = squareSum(arg10);\nvar v1 = 56;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squareSum(arg20);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    return sum;\n}\n\nconsole.log(sumOfOddAndEven(2));\nconsole.log(sumOfOddAndEven(3));\nconsole.log(sumOfOddAndEven(4));\nconsole.log(sumOfOddAndEven(5));\nconsole.log(difference(2));\nconsole.log(difference(3));\nconsole.log(difference(4));\nconsole.log(difference(5));\nconsole.log(evenPowerSum(2));\nconsole.log(evenPowerSum(3));\nconsole.log(evenPowerSum(4));\nconsole.log(evenPowerSum(5));\nconsole.log(squareSum(2));\nconsole.log(squareSum(3));\nconsole.log(squareSum(4));\nconsole.log(squareSum(5));\nconsole.log(function1(2));\nconsole.log(function1(3));\nconsole.log(function1(4));\nconsole.log(function1(5));\nconsole.log(function2(2));\nconsole.log(function2(3));\nconsole.log(function2(4));\nconsole.log(function2(5));\nconsole.log(function3(2));\nconsole.log(function3(3));\nconsole.log(function3(4));\nconsole.log(function3(5));\nconsole.log(function4(2));\nconsole.log(function4(3));\nconsole.log(function4(4));\nconsole.log(function4(5));\nconsole.log(function5(2));\nconsole.", "\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = i * i;\n        sum += j;\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = 2 * i;\n        sum += j * j;\n    }\n    return sum;\n}\n"]}
{"task_id": "MBJSP/288", "prompt": "function getPairsCount(arr, n, sum) {\n/**\n * * Write a JavaScript function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === sum) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction countFac(n) {\n/**\n * * Write a JavaScript function to count the number of distinct power of prime factor of given number.\n */\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i === 0) {\n          n /= i;\n          count++;\n        } else {\n          j++;\n        }\n      }\n    }\n  }\n  return count;\n}\nfunction testThreeEqual(x, y, z) {\n/**\n * * Write a JavaScript function to count the number of equal numbers from three given integers.\n */\n  return (x === y) ? (x === z) ? 3 : 0 : (x === z) ? (y === z) ? 3 : 1 : (y === z) ? 2 : 0;\n}\nfunction modularInverse(arr, n, p) {\n/**\n * * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n */", "entry_point": "modularInverse", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 6, 4, 5];\nvar arg01 = 4;\nvar arg02 = 7;\nvar x0 = modularInverse(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 8, 12, 12];\nvar arg11 = 5;\nvar arg12 = 13;\nvar x1 = modularInverse(arg10, arg11, arg12);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 5];\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = modularInverse(arg20, arg21, arg22);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  let arrCopy = arr.slice();\n  for (let i = 0; i < arrCopy.length; i++) {\n    for (let j = i + 1; j < arrCopy.length; j++) {\n      let k = arrCopy[i] * arrCopy[j];\n      if (k % p === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % p === n % p) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let m = arr[i];\n    let temp = 1;\n    while (m > 0) {\n      let q = m % p;\n      let j = 0;\n      if (q == 1) {\n        count++;\n      }\n      while (arr[i] % p == 0) {\n        arr[i] /= p;\n        j++;\n      }\n      temp = temp * (p - j) % p;\n      m /= p;\n    }\n  }\n  return count;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % p === 0) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n  let arr1 = arr.map(i => Math.abs(i - n)).reduce((a, b) => a + b);\n  let arr2 = arr.map(i => Math.abs(i - n)).reduce((a, b) => a + b);\n  let arr3 = arr.map(i => Math.abs(i - n)).reduce((a, b) => a + b);\n  let a1 = Math.pow(arr1, p - 2, p);\n  let a2 = Math.pow(arr2, p - 2, p);\n  let a3 = Math.pow(arr3, p - 2, p);\n  count = (a1 == n)? (a2 == n)? (a3 == n)? 3 : 0 : (a3 == n)? 1 : 2 : 0;\n  return count;\n}\n"]}
{"task_id": "MBJSP/289", "prompt": "function checkMonthnumberNumber(monthnum3) {\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\n  if (monthnum3 >= 1 && monthnum3 <= 12) {\n    if (monthnum3 === 2) {\n      if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n        return true;\n      }\n    } else if (monthnum3 === 4 || monthnum3 === 6 || monthnum3 === 9 || monthnum3 === 11) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction firstOdd(nums) {\n/**\n * * Write a JavaScript function to find the first odd number in a given list of numbers.\n */\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !== 0) {\n            return nums[i];\n        }\n    }\n}\nfunction oddDays(n) {\n/**\n * * Write a JavaScript function to calculate the number of odd days in a given year.\n */", "entry_point": "oddDays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 100;\nvar x0 = oddDays(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 50;\nvar x1 = oddDays(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 75;\nvar x2 = oddDays(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let year = new Date().getFullYear();\n    if (year % 400 === 0 || year % 4 === 0 && year % 100!== 0) {\n        return 29;\n    }\n    return 28;\n}\n", "\n  if (n >= 0 && n <= 365) {\n    let monthnum3 = 0;\n    if (n % 12 === 0) {\n      monthnum3 = 12;\n      n = n - 12;\n    } else {\n      monthnum3 = n % 12;\n    }\n    let arr = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let count = 0;\n    for (let i = 0; i < monthnum3; i++) {\n      count += arr[i];\n    }\n    count += n;\n    return count % 7;\n  } else {\n    return -1;\n  }\n}\n", "\n    let year = new Date().getFullYear();\n    let days = 0;\n    for (let i = 0; i < 12; i++) {\n        let month = i + 1;\n        let monthnum = new Date(year, month, 1).getDate();\n        if (monthnum % 2 === 1) {\n            days++;\n        }\n    }\n    return days;\n}\n", "\n    let year = new Date().getFullYear();\n    let months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n    let days = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\n    for (let i = 0; i < 12; i++) {\n        if (year % 4 === 0) {\n            months[i] += 2;\n        }\n        year++;\n    }\n    return months[n - 1] + days[n - 1];\n}\n", "\n    let monthnum1 = new Date().getMonth();\n    let monthnum2 = new Date().getMonth();\n    let monthnum3 = new Date().getMonth();\n    let monthnum4 = new Date().getMonth();\n    let monthnum5 = new Date().getMonth();\n    let monthnum6 = new Date().getMonth();\n    if (monthnum1 < 4) {\n        monthnum1++;\n    } else if (monthnum1 < 7) {\n        monthnum1++;\n        monthnum2++;\n    } else if (monthnum1 < 10) {\n        monthnum1++;\n        monthnum2++;\n        monthnum3++;\n    } else if (monthnum1 < 13) {\n        monthnum1++;\n        monthnum2++;\n        monthnum3++;\n        monthnum4++;\n    } else if (monthnum1 < 16) {\n        monthnum1++;\n        monthnum2++;\n        monthnum3++;\n        monthnum4++;\n        monthnum5++;\n    } else if (monthnum1 < 19) {\n        monthnum1++;\n        monthnum2++;\n        monthnum3++;\n        monthnum4++;\n        monthnum5++;\n        monthnum6++;\n    }\n    return n - 1;\n}\n"]}
{"task_id": "MBJSP/290", "prompt": "function maxSimilarIndices(testlist1, testlist2) {\n/**\n * * Write a function to find the maximum of similar indices in two lists of tuples.\n */\n  const result = [];\n  for (let i = 0; i < testList1.length; i++) {\n    const similar = testList2.filter((item) => item[0] === testList1[i][0]);\n    if (similar.length > 0) {\n      result.push(similar.map((item) => item[1]));\n    }\n  }\n  return result;\n}\nfunction interleaveLists(list1, list2, list3) {\n/**\n * * Write a function to interleave lists of the same length.\n */\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < list1.length && j < list2.length && k < list3.length) {\n    result.push(list1[i]);\n    result.push(list2[j]);\n    result.push(list3[k]);\n    i++;\n    j++;\n    k++;\n  }\n\n  while (i < list1.length) {\n    result.push(list1[i]);\n    i++;\n  }\n\n  while (j < list2.length) {\n    result.push(list2[j]);\n    j++;\n  }\n\n  while (k < list3.length) {\n    result.push(list3[k]);\n    k++;\n  }\n\n  return result;\n}\nfunction minLength(list1) {\n/**\n * * Write a function to find the list of lists with minimum length.\n */\n  let min = Infinity;\n  let minList = [];\n  let minListIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let list = list1[i];\n    let listLength = list.length;\n    if (listLength < min) {\n      min = listLength;\n      minList = list;\n      minListIndex = i;\n    }\n  }\n  return [minListIndex + 1, minList];\n}\nfunction maxLength(list1) {\n/**\n * * Write a function to find the list of lists with maximum length.\n */", "entry_point": "maxLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = maxLength(arg00);\nvar v0 = [3, [13, 15, 17]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [5, 7], [10, 12, 14, 15]];\nvar x1 = maxLength(arg10);\nvar v1 = [4, [10, 12, 14, 15]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5], [15, 20, 25]];\nvar x2 = maxLength(arg20);\nvar v2 = [3, [15, 20, 25]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = -Infinity;\n  let maxList = [];\n  let maxListIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let list = list1[i];\n    let listLength = list.length;\n    if (listLength > max) {\n      max = listLength;\n      maxList = list;\n      maxListIndex = i;\n    }\n  }\n  return [maxListIndex + 1, maxList];\n}\n", "\n  let max = -Infinity;\n  let maxList = [];\n  let maxListIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let list = list1[i];\n    let listLength = list.length;\n    if (listLength > max) {\n      max = listLength;\n      maxList = list;\n      maxListIndex = i;\n    }\n  }\n  return [maxListIndex + 1, maxList];\n}\n", "\n  let max = -Infinity;\n  let maxList = [];\n  let maxListIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let list = list1[i];\n    let listLength = list.length;\n    if (listLength > max) {\n      max = listLength;\n      maxList = list;\n      maxListIndex = i;\n    }\n  }\n  return [maxListIndex + 1, maxList];\n}\n", "\n  let max = 0;\n  let maxList = [];\n  let maxListIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let list = list1[i];\n    let listLength = list.length;\n    if (listLength > max) {\n      max = listLength;\n      maxList = list;\n      maxListIndex = i;\n    }\n  }\n  return [maxListIndex + 1, maxList];\n}\n", "\n  let max = 0;\n  let maxList = [];\n  let maxListIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let list = list1[i];\n    let listLength = list.length;\n    if (listLength > max) {\n      max = listLength;\n      maxList = list;\n      maxListIndex = i;\n    }\n  }\n  return [maxListIndex + 1, maxList];\n}\n"]}
{"task_id": "MBJSP/291", "prompt": "function removals(arr, n, k) {\n/**\n * * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n */\n  let amin = 0;\n  let amax = arr.length - 1;\n  let count = 0;\n  while (amin <= amax) {\n    let mid = Math.floor((amin + amax) / 2);\n    if (arr[mid] < n) {\n      amin = mid + 1;\n    } else if (arr[mid] > n) {\n      amax = mid - 1;\n    } else {\n      count++;\n      if (mid - 1 >= 0 && arr[mid - 1] > n) {\n        amin = mid - 1;\n      } else if (mid + 1 < arr.length && arr[mid + 1] < n) {\n        amax = mid + 1;\n      } else {\n        amin = mid + 1;\n      }\n    }\n  }\nfunction findMaxVal(n, x, y) {\n/**\n * * Write a function to find the largest possible value of k such that k modulo x is y.\n */\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % x === y) {\n      max = i;\n    }\n  }\n  return max;\n}\nfunction countWays(n) {\n/**\n * * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n */\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 4;\n\n  let ways = 0;\n  for (let i = 1; i <= n - 2; i++) {\n    ways += countWays(i);\n  }\n\n  return ways;\n}\nfunction countNoOfWays(n, k) {\n/**\n * * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n */", "entry_point": "countNoOfWays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = countNoOfWays(arg00, arg01);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar x1 = countNoOfWays(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 4;\nvar x2 = countNoOfWays(arg20, arg21);\nvar v2 = 228;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return findMaxVal(n, k, 2) - 1;\n}\n", "\n  let ways = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= i; j++) {\n      let adjacent = i - j;\n      if (adjacent > k) continue;\n      if (adjacent === k) {\n        ways++;\n      } else if (adjacent < k) {\n        ways += countNoOfWays(i, k);\n      }\n    }\n  }\n  return ways;\n}\n", "\n  let maxVal = countWays(n, k);\n  let ways = 0;\n  for (let i = 1; i <= n - 1; i++) {\n    if (maxVal - k < i) {\n      ways++;\n    }\n  }\n  return ways;\n}\n", "\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 4;\n  if (n === 4) return 6;\n\n  let ways = 0;\n  for (let i = 1; i <= n - 2; i++) {\n    ways += countNoOfWays(i, k);\n  }\n\n  return ways;\n}\n", "\n  return findMaxVal(n, k, 1) * findMaxVal(n, k, 0);\n}\n"]}
{"task_id": "MBJSP/292", "prompt": "function perfectSquares(a, b) {\n/**\n * * Write a function to find perfect squares between two given numbers.\n */\n  let perfectSquares = [];\n  for (let i = a; i <= b; i++) {\n    if (Math.sqrt(i) % 1 === 0) {\n      perfectSquares.push(i);\n    }\n  }\n  return perfectSquares;\n}\nfunction minOfTwo(x, y) {\n/**\n * * Write a function to find minimum of two numbers.\n */\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\nfunction maxOfTwo(x, y) {\n/**\n * * Write a function to find maximum of two numbers.\n */\n  return x > y ? x : y;\n}\nfunction find(n, m) {\n/**\n * * Write a JavaScript function to find quotient of two numbers.\n */", "entry_point": "find", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 3;\nvar x0 = find(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar x1 = find(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar arg21 = 5;\nvar x2 = find(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (n / m);\n}\n", "\n  return n / m;\n}\n", "\n  let q = (n * m) / (n - m);\n  return q;\n}\n", "\n  return n / m;\n}\n", "\n  let quotient = n / m;\n  return quotient;\n}\n"]}
{"task_id": "MBJSP/293", "prompt": "function rotateRight(list1, m, n) {\n/**\n * * Write a function to rotate a given list by specified number of items to the right direction.\n */\n  return list1.slice(-(m)).concat(list1.slice(0, -(n)));\n}\nfunction setRightMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the right most unset bit.\n */\n    // find the first unset bit\n    for (let i = n.toString(2).length - 1; i >= 0; i--) {\n        if (n.toString(2)[i] === '0') {\n            // set the right most unset bit\n            n |= Math.pow(2, n.toString(2).length - 1 - i)\n            break\n        }\n    }\n    return n\n}\nfunction minSumPath(a) {\n/**\n * * Write a function to find the minimum total path sum in the given triangle.\n */\n  const n = a.length;\n  const dp = Array(n).fill(0);\n  dp[0] = a[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i] = Math.min(dp[i - 1] + a[i][0], dp[i - 1] + a[i][1]);\n  }\n  return dp[n - 1];\n}\nfunction othersideRightangle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */", "entry_point": "othersideRightangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 7;\nvar arg01 = 8;\nvar x0 = othersideRightangle(arg00, arg01);\nvar v0 = 10.63014581273465;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 4;\nvar x1 = othersideRightangle(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = 15;\nvar x2 = othersideRightangle(arg20, arg21);\nvar v2 = 16.55294535724685;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (w * h) / (Math.sqrt(w * w + h * h));\n}\n", "\n  // find the third side\n  if (w === h) {\n    return w * 0.5\n  }\n  return Math.max(w, h) * 0.5\n}\n", "\n  return Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2))\n}\n", "\n  return Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2))\n}\n", "\n  // triangle area\n  const triangleArea = (w * h) / 2;\n  // triangle perimeter\n  const trianglePerimeter = (w + h) * 2;\n  // minimum area\n  const minimumArea = triangleArea - Math.sqrt(triangleArea * triangleArea - trianglePerimeter * trianglePerimeter);\n  return minimumArea / triangleArea\n}\n"]}
{"task_id": "MBJSP/294", "prompt": "function maxOccurrences(list1) {\n/**\n * * Write a function to find the item with maximum occurrences in a given list.\n */\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1.filter(x => x === list1[i]).length > maxOccurrence) {\n      maxOccurrence = list1.filter(x => x === list1[i]).length;\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction exchangeElements(lst) {\n/**\n * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n */\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    if (i % 2 === 0) {\n      let temp = lst[i];\n      lst[i] = lst[i + 1];\n      lst[i + 1] = temp;\n    }\n    i++;\n  }\n  return lst;\n}\nfunction maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction maxVal(listval) {\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */", "entry_point": "maxVal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", 3, 2, 4, 5, \"version\"];\nvar x0 = maxVal(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", 15, 20, 25];\nvar x1 = maxVal(arg10);\nvar v1 = 25;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", 30, 20, 40, 50, \"version\"];\nvar x2 = maxVal(arg20);\nvar v2 = 50;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] > max) {\n      max = listval[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] > max) {\n      max = listval[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] > max) {\n      max = listval[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] > max) {\n      max = listval[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = listval[0];\n  let maxVal = listval[0];\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] > maxVal) {\n      maxVal = listval[i];\n      max = listval[i];\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/295", "prompt": "function sumOfOddFactors(n) {\n/**\n * * Write a JavaScript function to find sum of odd factors of a number.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 !== 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\nfunction returnSum(dict) {\n/**\n * * Write function to find the sum of all items in the given dictionary.\n */\n  let sum = 0;\n  for (let key in dict) {\n    sum += dict[key];\n  }\n  return sum;\n}\nfunction sum(n) {\n/**\n * * Write a JavaScript function to find sum of all prime divisors of a given number.\n */\n    let result = 0;\n    let n_sqrt = Math.sqrt(n);\n    let divisor = 2;\n\n    while (divisor <= n_sqrt) {\n        if (n % divisor === 0) {\n            while (n % divisor === 0) {\n                n = n / divisor;\n            }\n            result += divisor;\n        }\n        divisor += 1;\n    }\n    if (n > 1) {\n        result += n;\n    }\n\n    return result;\n}\nfunction sumDiv(number) {\n/**\n * * Write a function to return the sum of all divisors of a number.\n */", "entry_point": "sumDiv", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = sumDiv(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = sumDiv(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = sumDiv(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let sum = 0;\n    let n = number;\n    if (n > 1) {\n        sum += n;\n    }\n\n    for (let i = 1; i <= n / 2; i++) {\n        if (n % i === 0) {\n            sum += i;\n            sum += n / i;\n        }\n    }\n\n    return sum;\n}\n", "\n    let result = 1;\n    let divisor = 2;\n\n    while (divisor <= number) {\n        if (number % divisor === 0) {\n            result += divisor;\n        }\n        divisor += 1;\n    }\n\n    return result;\n}\n", "\n    let div_1 = 1;\n    let div_2 = number;\n    let div_3 = 1;\n    let div_4 = 1;\n    let div_5 = 1;\n    let result = 0;\n    while (div_1 <= div_2) {\n        while (div_3 <= div_4) {\n            while (div_5 <= div_2) {\n                if (div_1 * div_3 * div_5 === number) {\n                    result += div_1 + div_3 + div_5;\n                }\n                div_5 += 1;\n            }\n            div_3 += 1;\n        }\n        div_1 += 1;\n    }\n    return result;\n}\n", "\n    let div = 1;\n    let sum = 0;\n    while (div <= number) {\n        if (number % div === 0) {\n            sum += div;\n        }\n        div += 1;\n    }\n    return sum;\n}\n", "\n    let divSum = 0;\n    let num = number;\n    let is_even = (number % 2 === 0);\n    while (num > 0) {\n        if (num % 2 === 1) {\n            divSum += num;\n        }\n        num /= 2;\n        if (is_even && num === 1) {\n            break;\n        }\n    }\n    return divSum;\n}\n"]}
{"task_id": "MBJSP/296", "prompt": "function findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction getInvCount(arr, n) {\n/**\n * * Write a function to count the number of inversions in the given array.\n */\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] > arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction getInvCount(arr, n) {\n/**\n * * Write a JavaScript function to count inversions in an array.\n */", "entry_point": "getInvCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 20, 6, 4, 5];\nvar arg01 = 5;\nvar x0 = getInvCount(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1];\nvar arg11 = 3;\nvar x1 = getInvCount(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 5, 6, 1];\nvar arg21 = 5;\nvar x2 = getInvCount(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  while (i < n && j < n) {\n    if (arr[i] > arr[j]) {\n      count += (n - i - 1);\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] > arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] > arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] > arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/297", "prompt": "function checkSubset(list1, list2) {\n/**\n * * Write a function to check if a nested list is a subset of another nested list.\n */\n  const length1 = list1.length;\n  const length2 = list2.length;\n  const map1 = {};\n  const map2 = {};\n  let i = 0;\n  let j = 0;\n  while (i < length1) {\n    const item = list1[i];\n    const key = item.toString();\n    map1[key] = true;\n    i++;\n  }\n  i = 0;\n  while (j < length2) {\n    const item = list2[j];\n    const key = item.toString();\n    if (map1[key] !== true) {\n      return false;\n    }\n    map2[key] = true;\n    j++;\n  }\n  return true;\n}\nfunction checkSubsetList(list1, list2) {\n/**\n * * Write a function to check if a nested list is a subset of another nested list.\n */\n  let check = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i][j] === list2[j][check]) {\n        check++;\n      }\n    }\n  }\n  if (check === list2[0].length) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction flattenTuple(testlist) {\n/**\n * * Write a function to flatten the tuple list to a string.\n */\n  const flatList = testList.reduce((acc, val) => acc.concat(val), []);\n  return flatList.join(' ');\n}\nfunction flattenList(list1) {\n/**\n * * Write a function to flatten a given nested list structure.\n */", "entry_point": "flattenList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]];\nvar x0 = flattenList(arg00);\nvar v0 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]];\nvar x1 = flattenList(arg10);\nvar v1 = [10, 20, 40, 30, 56, 25, 10, 20, 33, 40];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nvar x2 = flattenList(arg20);\nvar v2 = [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const length1 = list1.length;\n  const flatList = [];\n  let i = 0;\n  let j = 0;\n  while (i < length1) {\n    if (Array.isArray(list1[i])) {\n      flatList.push(flattenList(list1[i]));\n    } else {\n      flatList.push(list1[i]);\n    }\n    i++;\n  }\n  return flatList;\n}\n", "\n  const flatList = list1.reduce((acc, val) => acc.concat(val), []);\n  return flatList;\n}\n", "\n  let flat = [];\n  let check = 0;\n  for (let i = 0; i < list1.length; i++) {\n    flat.push(list1[i][check]);\n    check++;\n  }\n  return flat;\n}\n", "\n  let result = [];\n  const flattenFunction = (testList) => {\n    testList.forEach(", "\n  const flatList = list1.reduce((acc, val) => acc.concat(val), []);\n  return flatList.join(' ');\n}\n"]}
{"task_id": "MBJSP/298", "prompt": "function countRangeInList(li, min, max) {\n/**\n * * Write a function to count the number of elements in a list which are within a specific range.\n */\n  let count = 0;\n  for (let i = 0; i < li.length; i++) {\n    if (li[i] >= min && li[i] <= max) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction checkSubset(list1, list2) {\n/**\n * * Write a function to check if a nested list is a subset of another nested list.\n */\n  const length1 = list1.length;\n  const length2 = list2.length;\n  const map1 = {};\n  const map2 = {};\n  let i = 0;\n  let j = 0;\n  while (i < length1) {\n    const item = list1[i];\n    const key = item.toString();\n    map1[key] = true;\n    i++;\n  }\n  i = 0;\n  while (j < length2) {\n    const item = list2[j];\n    const key = item.toString();\n    if (map1[key] !== true) {\n      return false;\n    }\n    map2[key] = true;\n    j++;\n  }\n  return true;\n}\nfunction checkSubsetList(list1, list2) {\n/**\n * * Write a function to check if a nested list is a subset of another nested list.\n */\n  let check = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i][j] === list2[j][check]) {\n        check++;\n      }\n    }\n  }\n  if (check === list2[0].length) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction intersectionNestedLists(l1, l2) {\n/**\n * * Write a function to find the nested list elements which are present in another list.\n */", "entry_point": "intersectionNestedLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar arg01 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]];\nvar x0 = intersectionNestedLists(arg00, arg01);\nvar v0 = [[12], [7, 11], [1, 5, 8]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 3, 1], [4, 5], [6, 8]];\nvar arg11 = [[4, 5], [6, 8]];\nvar x1 = intersectionNestedLists(arg10, arg11);\nvar v1 = [[], []];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"john\", \"amal\", \"joel\", \"george\"];\nvar arg21 = [[\"john\"], [\"jack\", \"john\", \"mary\"], [\"howard\", \"john\"], [\"jude\"]];\nvar x2 = intersectionNestedLists(arg20, arg21);\nvar v2 = [[\"john\"], [\"john\"], [\"john\"], []];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const length1 = l1.length;\n  const length2 = l2.length;\n  let count = 0;\n  let map = {};\n  let i = 0;\n  let j = 0;\n  while (i < length1) {\n    const item = l1[i];\n    const key = item.toString();\n    map[key] = true;\n    i++;\n  }\n  i = 0;\n  while (j < length2) {\n    const item = l2[j];\n    const key = item.toString();\n    if (map[key]!== true) {\n      count++;\n    }\n    map[key] = true;\n    j++;\n  }\n  return l1[count];\n}\n", "\n  let intersection;\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i][j] === l2[j][0]) {\n        intersection.push(l1[i][j]);\n      }\n    }\n  }\n  return intersection;\n}\n", "\n  let common = [];\n  for (let i = 0; i < l1.length; i++) {\n    let check = 0;\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i][check] === l2[j][check]) {\n        check++;\n      }\n    }\n    if (check === l2[0].length) {\n      common.push(l1[i]);\n    }\n  }\n  return common;\n}\n", "\n  let resultList = [];\n  const list1 = l1.map(item => {\n    return item.toString();\n  });\n  const list2 = l2.map(item => {\n    return item.toString();\n  });\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        resultList.push(list2[j]);\n      }\n    }\n  }\n  return resultList;\n}\n", "\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let check = 0;\n  let i = 0;\n  let j = 0;\n  while (i < l1.length) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i][j] === l2[j][check]) {\n        l4.push(l1[i][j]);\n        l5.push(l1[i][j]);\n        check++;\n      }\n    }\n  }\n  l6 = l5.sort();\n  return [l4, l6];\n}\n"]}
{"task_id": "MBJSP/299", "prompt": "function sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction maxSimilarIndices(testlist1, testlist2) {\n/**\n * * Write a function to find the maximum of similar indices in two lists of tuples.\n */\n  const result = [];\n  for (let i = 0; i < testList1.length; i++) {\n    const similar = testList2.filter((item) => item[0] === testList1[i][0]);\n    if (similar.length > 0) {\n      result.push(similar.map((item) => item[1]));\n    }\n  }\n  return result;\n}\nfunction removeEmpty(tuple1) {\n/**\n * * Write a function to remove an empty tuple from a list of tuples.\n */\n  return tuple1.filter(function (tuple) {\n    return tuple.length > 0;\n  });\n}\nfunction maxAggregate(stdata) {\n/**\n * * Write a function to calculate the maximum aggregate from the list of tuples.\n */", "entry_point": "maxAggregate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]];\nvar x0 = maxAggregate(arg00);\nvar v0 = [\"Juan Whelan\", 212];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]];\nvar x1 = maxAggregate(arg10);\nvar v1 = [\"Juan Whelan\", 72];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]];\nvar x2 = maxAggregate(arg20);\nvar v2 = [\"Sabah Colley\", 70];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return stdata.reduce((a, b) => {\n    return a + b;\n  });\n}\n", "\n  const maxAggregate = stdata.reduce((max, tuple) => {\n    const aggregate = max + tuple[tuple.length - 1];\n    return aggregate > max? aggregate : max;\n  }, 0);\n  return maxAggregate;\n}\n", "\n  const result = stdata.reduce((max, st) => (max >= st[1])? max : st[1], 0);\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < stdata.length; i++) {\n    const aggregate = stdata[i][0];\n    const items = stdata[i][1];\n    const index = items.findIndex((item) => item == aggregate);\n    if (index == -1) {\n      continue;\n    }\n    result = Math.max(result, items[index + 1]);\n  }\n  return result;\n}\n", "\n  return stdata.reduce((aggregate, tuple) => {\n    return aggregate + tuple[tuple.length - 1];\n  }, 0);\n}\n"]}
{"task_id": "MBJSP/300", "prompt": "function oddNumSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of first n odd natural numbers.\n */\n  let result = 0;\n\n  for (let i = 1; i < n * 2; i += 2) {\n    result += Math.pow(i, 5);\n  }\n\n  return result;\n}\nfunction sumAverage(number) {\n/**\n * * Write a function to find sum and average of first n natural numbers.\n */\n  let sum = 0;\n  let average = 0;\n  for (let i = 1; i <= number; i++) {\n    sum += i;\n  }\n  average = sum / number;\n  return [sum, average];\n}\nfunction difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction countBinarySeq(n) {\n/**\n * * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n */", "entry_point": "countBinarySeq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = countBinarySeq(arg00);\nvar v0 = 2.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = countBinarySeq(arg10);\nvar v1 = 6.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = countBinarySeq(arg20);\nvar v2 = 20.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let a = 0;\n    let b = 0;\n    let result = 0;\n    for (let i = 0; i <= n; i++) {\n        let c = i * 2 + 1;\n        let d = i * 2 + 2;\n        a = (a + c) * 2;\n        b = (b + d) * 2;\n    }\n    result = a - b;\n    return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i <= n; i++) {\n    for (let j = 0; j < 2 * n; j++) {\n      let num = binaryToInt(j, i, n);\n      if (num == binaryToInt(j + n, i, n)) {\n        result++;\n      }\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n\n  for (let i = 0; i < 2 ** n; i++) {\n    let arr = [];\n    let bits = String.fromCharCode(i + 48);\n    for (let i = 0; i < n; i++) {\n      arr.push(bits[i]);\n    }\n    if (arr.join('') == arr.pop()) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n    let seq = 0;\n    let s = '';\n    let l = 0;\n    for (let i = 0; i < 2 * n; i++) {\n        if ((i % 2) == 0) {\n            s = '0' + s;\n        } else {\n            s = '1' + s;\n        }\n        if (i == n) {\n            seq += 1;\n        }\n        if ((i % 2) == 1) {\n            s = s.substr(1);\n            l = l + s.charCodeAt(0);\n        }\n    }\n    return seq;\n}\n", "\n    let res = 0;\n    let n2 = 2 * n;\n    let half = n2 / 2;\n    for (let i = 0; i <= 1; i++) {\n        if (i == 0) {\n            for (let j = 0; j <= n; j++) {\n                if ((j <= half) && ((j + n) >= half)) {\n                    res++;\n                }\n            }\n        } else if (i == 1) {\n            for (let j = n; j >= 0; j--) {\n                if ((j <= half) && ((j + n) >= half)) {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\n"]}
{"task_id": "MBJSP/301", "prompt": "function filterData(students, h, w) {\n/**\n * * Write a function to filter the height and width of students which are stored in a dictionary.\n */\n  return Object.keys(students).filter(function(key) {\n    return students[key][0] >= h && students[key][1] >= w;\n  }).reduce(function(obj, key) {\n    obj[key] = students[key];\n    return obj;\n  }, {});\n}\nfunction sortedDict(dict1) {\n/**\n * * Write a function to sort a list in a dictionary.\n */\n  let dict2 = {};\n  for (let key in dict1) {\n    dict2[key] = dict1[key].sort((a, b) => a - b);\n  }\n  return dict2;\n}\nfunction returnSum(dict) {\n/**\n * * Write function to find the sum of all items in the given dictionary.\n */\n  let sum = 0;\n  for (let key in dict) {\n    sum += dict[key];\n  }\n  return sum;\n}\nfunction dictDepth(d) {\n/**\n * * Write a function to find the depth of a dictionary.\n */", "entry_point": "dictDepth", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"a\"':1,'\"b\"':{'\"c\"':{'\"d\"':{}}}};\nvar x0 = dictDepth(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"a\"':1,'\"b\"':{'\"c\"':\"python\"}};\nvar x1 = dictDepth(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {\"1\":\"Sun\",\"2\":{\"3\":{\"4\":\"Mon\"}}};\nvar x2 = dictDepth(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (d === {}) {\n    return 0;\n  } else {\n    return 1 + dictDepth(d.value);\n  }\n}\n", "\n  if (d === null) {\n    return 0;\n  }\n  let max = 0;\n  for (let key in d) {\n    if (d[key] > max) {\n      max = d[key];\n    }\n  }\n  return max + 1;\n}\n", "\n  let depth = 0;\n  if (d.values()[0]) {\n    depth = 1 + dictDepth(d.values()[0]);\n  }\n  return depth;\n}\n", "\n  let dict2 = {};\n  for (let key in d) {\n    dict2[key] = dictDepth(d[key]);\n  }\n  return dict2;\n}\n", "\n  let depth = 0;\n  for (let key in d) {\n    depth++;\n  }\n  return depth;\n}\n"]}
{"task_id": "MBJSP/302", "prompt": "function countNo(a, n, l, r) {\n/**\n * * Write a JavaScript function to find nth number in a sequence which is not a multiple of a given number.\n */\n    let count = 0;\n    for (let i = l; i <= r; i++) {\n        if (i % a !== 0) {\n            count++;\n        }\n        if (count === n) {\n            return i;\n        }\n    }\n}\nfunction getFirstSetBitPos(n) {\n/**\n * * Write a JavaScript function to get the position of rightmost set bit.\n */\n  return Math.floor(Math.log2(n & -n)) + 1;\n}\nfunction setRightMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the right most unset bit.\n */\n    // find the first unset bit\n    for (let i = n.toString(2).length - 1; i >= 0; i--) {\n        if (n.toString(2)[i] === '0') {\n            // set the right most unset bit\n            n |= Math.pow(2, n.toString(2).length - 1 - i)\n            break\n        }\n    }\n    return n\n}\nfunction setBitNumber(n) {\n/**\n * * Write a JavaScript function to find the most significant bit number which is also a set bit.\n */", "entry_point": "setBitNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = setBitNumber(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = setBitNumber(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 18;\nvar x2 = setBitNumber(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 1; i <= n; i <<= 1) {\n        count++;\n    }\n    return count;\n}\n", "\n    let s = n.toString(2);\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '0') {\n            s[i] = '1';\n            break;\n        }\n    }\n    return parseInt(s, 2)\n}\n", "\n    let pos = getFirstSetBitPos(n);\n    return setRightMostUnsetBit(n) | Math.pow(2, pos - 1);\n}\n", "\n    let mask = 1;\n    // check if the number is a power of 2\n    if (Math.pow(2, Math.floor(Math.log2(n)))) === n) {\n        // add 1 to the number\n        mask = Math.pow(2, Math.floor(Math.log2(n))))\n    }\n    // apply the mask\n    n |= mask\n}\n", "\n    let position = getFirstSetBitPos(n)\n    let bit = Math.pow(2, position)\n    return n | bit\n}\n"]}
{"task_id": "MBJSP/303", "prompt": "function parallelLines(line1, line2) {\n/**\n * * Write a JavaScript function to check whether two given lines are parallel or not.\n */\n    return line1[0] * line2[1] === line2[0] * line1[1]\n}\nfunction sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction solve(a, n) {\n/**\n * * Write a JavaScript function to check whether the count of inversion of two types are same or not.\n */", "entry_point": "solve", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 0, 2];\nvar arg01 = 3;\nvar x0 = solve(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 0];\nvar arg11 = 3;\nvar x1 = solve(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar arg21 = 3;\nvar x2 = solve(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i === j) {\n                continue;\n            }\n            if (a[i] > a[j] && isInversion(a, i, j)) {\n                count++;\n            }\n        }\n    }\n    return count === 0? true : false;\n}\n", "\n    let res = a.length + n - 2 * (n + 1) - 3 * (n - 1);\n    let lc = Math.ceil(a.length / 2);\n    let rc = Math.ceil(n / 2);\n    let l = new Array(lc);\n    let r = new Array(rc);\n    let ld = new Array(n - rc + 1);\n    let rd = new Array(n - lc + 1);\n    for (let i = 0; i < lc; i++) {\n        l[i] = a[i];\n    }\n    for (let i = lc; i < lc + rc; i++) {\n        r[i - lc] = a[i];\n    }\n    let i = 0;\n    while (i < ld.length) {\n        ld[i] = (i < ld.length)? r[i] : '';\n        rd[i] = (i < rd.length)? l[i] : '';\n        i++;\n    }\n    for (let i = 0; i < ld.length; i++) {\n        res += ld[i] + rd[i];\n    }\n    return res;\n}\n", "\n    let a1 = [...a];\n    let b1 = [...n];\n    let a2 = [...b1];\n    let b2 = [...a1];\n    let inversion1 = 0;\n    let inversion2 = 0;\n    for (let i = 0; i < a2.length; i++) {\n        for (let j = 0; j < a2.length; j++) {\n            if (a2[i] === b2[j]) {\n                if (i < j) {\n                    inversion1++;\n                }\n                else {\n                    inversion2++;\n                }\n            }\n        }\n    }\n    return (inversion1 === inversion2)? true : false;\n}\n", "\n    let index = 0;\n    let arr = [];\n    while (index < n) {\n        let c = n - index;\n        let i = Math.floor(Math.random() * (c + 1));\n        let j = Math.floor(Math.random() * (c + 1));\n        if (i!= j) {\n            let temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n            arr.push(i);\n            arr.push(j);\n        }\n        index++;\n    }\n    let len = arr.length / 2;\n    let left = arr.subarray(0, len);\n    let right = arr.subarray(len, arr.length);\n    let r = Math.floor(Math.random() * (left.length + 1));\n    let l = r - left.length;\n    let x = left[l];\n    left[l] = left[r];\n    left[r] = x;\n    let i = Math.floor(Math.random() * (right.length + 1));\n    let j = i - right.length;\n    let y = right[j];\n    right[j] = right[i];\n    right[i] = y;\n    if (!isParallel(left, right)) {\n        return false;\n    }\n    r = Math.floor(Math.random() * (left.length + 1));\n    l = r - left.length;\n    x = left[l];\n    left[l] = left[r];\n    left[r] = x;\n    i = Math.floor(Math.random() * (right.length + 1));", "\n    let a1 = [];\n    for (let i = 0; i < a.length; i++) {\n        a1.push(a[i]);\n    }\n    let b1 = [];\n    for (let i = 0; i < n.length; i++) {\n        b1.push(n[i]);\n    }\n    let c1 = [];\n    let count = 0;\n    for (let i = 0; i < a1.length; i++) {\n        for (let j = 0; j < b1.length; j++) {\n            if (a1[i] === b1[j]) {\n                c1.push(a1[i]);\n                count++;\n            }\n        }\n    }\n    return count == c1.length;\n}\n```\n\n# \u4ec0\u4e48\u662f\u53cc\u6307\u9488\n\n[\u53cc\u6307\u9488](https://www.geeksforgeeks.org/program-for-binary-search/) \u662f\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e00\u79cd\u65b0\u7684\u6982\u5ff5\uff0c\u5b83\u88ab\u79f0\u4e3a *\u53cc\u6307\u9488*\uff0c\u4e5f\u5c31\u662f\u7ed9\u5b9a\u7684\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u4e0b\u6807 *i* \u548c *j* \u7ed9\u5b9a\u4e24\u4e2a\u6570\u503c\uff0c\u5176\u4e2d *i* \u662f\u5de6\u8fb9\u754c\uff0c*j* \u662f\u53f3\u8fb9\u754c\uff0c\u5224\u65ad\u6570\u7ec4"]}
{"task_id": "MBJSP/304", "prompt": "function findFirstOccurrence(a, x) {\n/**\n * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n */\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\nfunction findIndex(n) {\n/**\n * * Write a JavaScript function to find the index of smallest triangular number with n digits.\n */\n    const limit = Math.pow(10, n)\n    for (let i = 1; i <= limit; i++) {\n        const triangularNumber = i * (i + 1) / 2\n        if (triangularNumber.toString().length === n) {\n            return i\n        }\n    }\n}\nfunction findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction findElement(arr, ranges, rotations, index) {\n/**\n * * Write a JavaScript function to find element at a given index after number of rotations.\n */", "entry_point": "findElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [[0, 2], [0, 3]];\nvar arg02 = 2;\nvar arg03 = 1;\nvar x0 = findElement(arg00, arg01, arg02, arg03);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = [[0, 1], [0, 2]];\nvar arg12 = 1;\nvar arg13 = 2;\nvar x1 = findElement(arg10, arg11, arg12, arg13);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [[0, 1], [0, 2]];\nvar arg22 = 1;\nvar arg23 = 1;\nvar x2 = findElement(arg20, arg21, arg22, arg23);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let rotationsCount = rotations * (rotations + 1) / 2\n  let leftIndex = rotationsCount;\n  let rightIndex = rotationsCount + ranges[index] - 1;\n  let middleIndex = leftIndex + Math.floor((rightIndex - leftIndex) / 2)\n  if (middleIndex >= rotationsCount && middleIndex <= rotationsCount + ranges[index] - 1) {\n    return arr[middleIndex - rotationsCount]\n  }\n}\n", "\n  for (let i = 0; i < rotations.length; i++) {\n    if (index === ranges[rotations[i] - 1][0]) {\n      return arr[ranges[rotations[i] - 1][1]]\n    }\n  }\n  return arr[index]\n}\n", "\n  let first = findFirst(arr, rotations + 1);\n  let last = findLast(arr, rotations + 1);\n  if (index >= rotations + 1 && index <= rotations + last) {\n    return index + first - 1;\n  } else if (index < rotations + 1) {\n    return findElement(arr, ranges, rotations + index, index + 1);\n  } else {\n    return findElement(arr, ranges, rotations + index - rotations, index);\n  }\n}\n", "\n  let i = 0;\n  while (i < ranges.length && rotations >= ranges[i][0]) {\n    if (index < ranges[i][1]) {\n      return arr[index]\n    }\n    rotations -= ranges[i][0];\n    i++;\n  }\n  return arr[index]\n}\n", "\n  const countR = rotations.toString().length;\n  const countRanges = ranges.toString().length;\n  const countRange = countR + countRanges;\n  const rotationNumber = Math.pow(10, countR) + Math.pow(10, countRanges) + index;\n  return arr.indexOf(rotationNumber) === -1? arr.indexOf(rotationNumber + 1) : -1;\n}\n"]}
{"task_id": "MBJSP/305", "prompt": "function removeWords(list1, charlist) {\n/**\n * * Write a function to remove words from a given list of strings containing a character or string.\n */\n    return list1.map(item => {\n        return item.split(' ').filter(word => {\n            return charlist.every(char => {\n                return word.indexOf(char) === -1;\n            });\n        }).join(' ');\n    });\n}\nfunction removeDuplicList(l) {\n/**\n * * Write a function to remove duplicate words from a given list of strings.\n */\n  const set = new Set(l);\n  return [...set];\n}\nfunction capitalWordsSpaces(str1) {\n/**\n * * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n */\n    return str1.replace(/([A-Z])/g, ' $1').trim();\n}\nfunction startWithp(words) {\n/**\n * * Write a function to match two words from a list of words starting with letter 'p'.\n */", "entry_point": "startWithp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python PHP\", \"Java JavaScript\", \"c c++\"];\nvar x0 = startWithp(arg00);\nvar v0 = [\"Python\", \"PHP\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python Programming\", \"Java Programming\"];\nvar x1 = startWithp(arg10);\nvar v1 = [\"Python\", \"Programming\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Pqrst Pqr\", \"qrstuv\"];\nvar x2 = startWithp(arg20);\nvar v2 = [\"Pqrst\", \"Pqr\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const list = [...words];\n    const filter = list.filter(x => x.indexOf('p') === 0);\n    return filter.join(' ');\n}\n", "\n  let i = 0;\n  return words.map(word => {\n    i++;\n    return (i === 2? `${word} p` : word);\n  });\n}\n", "\n    return words.map(item => {\n        return item.toUpperCase().match(/^P/)[0];\n    });\n}\n\n```\n\n</details>\n<details><summary>Tests</summary>\n<p>\n\n```javascript\nimport { add, add_map, add_map_2, add_map_3, add_map_4, add_map_5 } from '../add';\nimport { add_2, add_3, add_4, add_5 } from '../add_2';\nimport { all_elements, all_elements_map, all_elements_2, all_elements_3, all_elements_4, all_elements_5 } from '../all_elements';\nimport { array_contains, array_contains_map, array_contains_2, array_contains_3, array_contains_4, array_contains_5 } from '../array_contains';\nimport { contains, contains_map, contains_2, contains_3, contains_4, contains_5 } from '../contains';\nimport { count, count_map, count_2, count_3, count_4, count_5 } from '../count';\nimport { count_greater, count_greater_map, count_greater_2, count_greater_3, count_greater_4, count_greater_5 } from '../count_greater';\nimport { count_greater_equal, count_greater_equal_map, count_greater_equal_2, count_greater_equal_3, count_greater_equal_4, count_greater_equal_5 } from '../count", "\n    return words.map(item => {\n        return item.split(' ').filter(word => {\n            return word.indexOf('p') === 0;\n        }).join(' ');\n    });\n}\n", "\n    return words.map(item => {\n        return item.split(' ').filter(word => {\n            return word.startsWith('p');\n        }).join(' ');\n    });\n}\n"]}
{"task_id": "MBJSP/306", "prompt": "function longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction findKth(arr1, arr2, m, n, k) {\n/**\n * * Write a function to find kth element from the given two sorted arrays.\n */\n\tvar sorted1 = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar d = 0;\n\twhile (i < m && j < n) {\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tsorted1[d] = arr1[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tsorted1[d] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\td++;\n\t}\n\n\twhile (i < m) {\n\t\tsorted1[d] = arr1[i];\n\t\ti++;\n\t\td++;\n\t}\n\n\twhile (j < n) {\n\t\tsorted1[d] = arr2[j];\n\t\tj++;\n\t\td++;\n\t}\n\n\treturn sorted1[k - 1];\n}\nfunction maxSumIncreasingSubsequence(arr, n) {\n/**\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n */\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\nfunction maxSumIncreasingSubseq(a, n, index, k) {\n/**\n * * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n */", "entry_point": "maxSumIncreasingSubseq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 101, 2, 3, 100, 4, 5];\nvar arg01 = 7;\nvar arg02 = 4;\nvar arg03 = 6;\nvar x0 = maxSumIncreasingSubseq(arg00, arg01, arg02, arg03);\nvar v0 = 11;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 101, 2, 3, 100, 4, 5];\nvar arg11 = 7;\nvar arg12 = 2;\nvar arg13 = 5;\nvar x1 = maxSumIncreasingSubseq(arg10, arg11, arg12, arg13);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 15, 19, 21, 26, 28, 31];\nvar arg21 = 7;\nvar arg22 = 2;\nvar arg23 = 4;\nvar x2 = maxSumIncreasingSubseq(arg20, arg21, arg22, arg23);\nvar v2 = 71;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let dp = new Array(k + 1).fill(0);\n  for (let i = k; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      if (a[j] - a[i] == (j - i)) {\n        dp[i] = Math.max(dp[i], dp[j - 1] + (j - i));\n      }\n    }\n  }\n  return dp[n];\n}\n", "\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  let maxSum = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = a[index[i]] + dp[i - 1];\n    max = Math.max(max, dp[i]);\n    for (let j = i - 1; j >= 0; j--) {\n      if (k <= i) {\n        break;\n      }\n      if (k <= index[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + a[index[i]] + dp[i - 1 - index[j]]);\n      }\n    }\n    maxSum = Math.max(maxSum, dp[i]);\n  }\n  return maxSum;\n}\n", "\n\tlet dp = new Array(n).fill(0);\n\tlet max = 0;\n\tfor (let i = 0; i < n; i++) {\n\t\tdp[i] = a[index] + (i > 0? dp[i - 1] : 0);\n\t\tfor (let j = i - 1; j >= 0; j--) {\n\t\t\tif (a[index] < a[j] && a[j] + dp[i] > dp[i]) {\n\t\t\t\tdp[i] = a[index] + dp[i];\n\t\t\t}\n\t\t}\n\t\tmax = Math.max(max, dp[i]);\n\t}\n\treturn dp[k - 1];\n}\n", "\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  let s = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = a[index[i]];\n    s = s + dp[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (index[j] < index[i] && k > index[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + a[index[i]]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max, s;\n}\n", "\n  if (index == n) return 0;\n  if (k == n) return a[n - 1];\n  if (index + 1 == k) return a[index];\n  return Math.max(a[index] + maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, k + 1));\n}\n"]}
{"task_id": "MBJSP/307", "prompt": "function sumDigits(n) {\n/**\n * * Write a function to get the sum of a non-negative integer.\n */\n  return (n + '').split('').reduce((acc, cur) => acc + parseInt(cur), 0);\n}\nfunction fillSpaces(text) {\n/**\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n */\n  return text.replace(/ |,|\\.|\\//g, ':');\n}\nfunction getItem(tup1, index) {\n/**\n * * Write a function to get an item of a tuple.\n */\n  if (index < 0) {\n    index = tup1.length + index;\n  }\n  return tup1[index];\n}\nfunction colonTuplex(tuplex, m, n) {\n/**\n * * Write a function to get a colon of a tuple.\n */", "entry_point": "colonTuplex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"HELLO\", 5, [], true];\nvar arg01 = 2;\nvar arg02 = 50;\nvar x0 = colonTuplex(arg00, arg01, arg02);\nvar v0 = [\"HELLO\", 5, [50], true];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"HELLO\", 5, [], true];\nvar arg11 = 2;\nvar arg12 = 100;\nvar x1 = colonTuplex(arg10, arg11, arg12);\nvar v1 = [\"HELLO\", 5, [100], true];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"HELLO\", 5, [], true];\nvar arg21 = 2;\nvar arg22 = 500;\nvar x2 = colonTuplex(arg20, arg21, arg22);\nvar v2 = [\"HELLO\", 5, [500], true];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  var l = [];\n  for (var i = 0; i < n; i += 1) {\n    l.push(getItem(tuplex, m + i));\n  }\n  return l;\n}\n", "\n  return m === n? tuplex : m === tuplex.length - 1? tuplex : colonTuplex(tuplex, n, m);\n}\n", "\n  return getItem(tuplex, m * n + n) + ':' + getItem(tuplex, n * m + m);\n}\n", "\n  const tup1 = getItem(tuplex, 0);\n  const tup2 = getItem(tuplex, 1);\n  const tup3 = getItem(tuplex, 2);\n  const tup4 = getItem(tuplex, 3);\n  return tup1 + ':' + tup2 + ':' + tup3 + ':' + tup4 + m + n;\n}\n", "\n  return getItem(tuplex, m) + colonChar + getItem(tuplex, n);\n}\n"]}
{"task_id": "MBJSP/308", "prompt": "function similarElements(testtup1, testtup2) {\n/**\n * * Write a function to find the similar elements from the given two tuple lists.\n */\n    let t1 = testTup1.sort((a, b) => a - b);\n    let t2 = testTup2.sort((a, b) => a - b);\n\n    let result = [];\n    for(let i = 0; i < t1.length; i++){\n        for(let j = 0; j < t2.length; j++){\n            if(t1[i] === t2[j]){\n                result.push(t1[i]);\n                break;\n            }\n        }\n    }\n    return result;\n}\nfunction largestPos(list1) {\n/**\n * * Write a JavaScript function to find the largest postive number from the given list.\n */\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0 && list1[i] > max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction twoUniqueNums(nums) {\n/**\n * * Write a JavaScript function to remove two duplicate numbers from a given number of lists.\n */\n    let map = new Map();\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (!map.has(nums[i])) {\n            map.set(nums[i], 1);\n        } else {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value === 1) {\n            result.push(key);\n        }\n    }\n    return result;\n}\nfunction largeProduct(nums1, nums2, n) {\n/**\n * * Write a function to find the specified number of largest products from two given lists.\n */", "entry_point": "largeProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6];\nvar arg01 = [3, 6, 8, 9, 10, 6];\nvar arg02 = 3;\nvar x0 = largeProduct(arg00, arg01, arg02);\nvar v0 = [60, 54, 50];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6];\nvar arg11 = [3, 6, 8, 9, 10, 6];\nvar arg12 = 4;\nvar x1 = largeProduct(arg10, arg11, arg12);\nvar v1 = [60, 54, 50, 48];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [3, 6, 8, 9, 10, 6];\nvar arg22 = 5;\nvar x2 = largeProduct(arg20, arg21, arg22);\nvar v2 = [60, 54, 50, 48, 45];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  let product = nums1[0] * nums2[0];\n  for (let i = 1; i < n; i++) {\n    if (nums1[i] * nums2[i] > product) {\n        product = nums1[i] * nums2[i];\n        result = i;\n    }\n  }\n  return result;\n}\n", "\n    let map = new Map();\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let k = nums1[i] * nums2[j];\n            if (!map.has(k)) {\n                map.set(k, 1);\n            } else {\n                map.set(k, map.get(k) + 1);\n            }\n        }\n    }\n    let max = 0;\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n        }\n    }\n    let result = 0;\n    while (max > 0) {\n        let key = 0;\n        for (let [key, value] of map) {\n            if (value === max) {\n                break;\n            }\n            key = key + value;\n        }\n        result = result + key;\n        let tmp = max;\n        max = 0;\n        for (let [key, value] of map) {\n            if (tmp > value) {\n                max = value;\n            }\n        }\n    }\n    return result / n;\n}\n", "\n    let list1 = [];\n    let list2 = [];\n    for (let i = 0; i < n; i++) {\n        list1.push(1);\n        list2.push(1);\n    }\n    let largest = Math.max(largestProduct(list1, nums2, n), largestProduct(nums1, list2, n));\n    return largest;\n}\n", "\n    let largest1 = largestPos(nums1);\n    let largest2 = largestPos(nums2);\n    let result = 0;\n    if (largest1 * largest2 > result) {\n        result = largest1 * largest2;\n    }\n    return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < nums1.length; i++) {\n      for (let j = 0; j < nums2.length; j++) {\n          if (nums1[i] > nums2[j]) {\n              result = Math.max(result, n*nums1[i]*nums2[j]);\n          }\n      }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/309", "prompt": "function minOfTwo(x, y) {\n/**\n * * Write a function to find minimum of two numbers.\n */\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\nfunction maxOfThree(num1, num2, num3) {\n/**\n * * Write a function to find maximum of three numbers.\n */\n  return Math.max(num1, num2, num3);\n}\nfunction maxOfTwo(x, y) {\n/**\n * * Write a function to find maximum of two numbers.\n */\n  return x > y ? x : y;\n}\nfunction maximum(a, b) {\n/**\n * * Write a JavaScript function to find the maximum of two numbers.\n */", "entry_point": "maximum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 10;\nvar x0 = maximum(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = -1;\nvar arg11 = -2;\nvar x1 = maximum(arg10, arg11);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 7;\nvar x2 = maximum(arg20, arg21);\nvar v2 = 9;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return a > b? a : b;\n}\n", "\n  return a > b? a : b;\n}\nvar num1 = 100;\nvar num2 = 100;\nvar num3 = 100;\nvar num4 = 100;\nvar num5 = 100;\nvar num6 = 100;\nvar num7 = 100;\nvar num8 = 100;\nvar num9 = 100;\nvar num10 = 100;\nvar num11 = 100;\nvar num12 = 100;\nvar num13 = 100;\nvar num14 = 100;\nvar num15 = 100;\nvar num16 = 100;\nvar num17 = 100;\nvar num18 = 100;\nvar num19 = 100;\nvar num20 = 100;\nvar num21 = 100;\nvar num22 = 100;\nvar num23 = 100;\nvar num24 = 100;\nvar num25 = 100;\nvar num26 = 100;\nvar num27 = 100;\nvar num28 = 100;\nvar num29 = 100;\nvar num30 = 100;\nvar num31 = 100;\nvar num32 = 100;\nvar num33 = 100;\nvar num34 = 100;\nvar num35 = 100;\nvar num36 = 100;\nvar num37 = 100;\nvar num38 = 100;\nvar num39 = 100;\nvar num40 = 100;\nvar num41 = 100;\nvar num42 = 100;\nvar num43 = 100;\nvar num44 = 100;\nvar num45 = 100;\nvar num46 = 100;\nvar num47 = 100;\nvar num48 = 100;\nvar num49 = 100;\nvar num50 = 100;\nvar num51 = 100;\nvar num52 = 100;\nvar num53 = 100;\nvar num54 = 100;\nvar num55 = 100;\nvar", "\n  return a > b? a : b;\n}\n", "\n  return a > b? a : b;\n}\n", "\n  return a > b? a : b;\n}\n"]}
{"task_id": "MBJSP/310", "prompt": "function strToTuple(teststr) {\n/**\n * * Write a function to convert the given string of integers into a tuple.\n */\n  return testStr.split(\", \").map(Number);\n}\nfunction stringListToTuple(str1) {\n/**\n * * Write a JavaScript function to convert a given string list to a tuple.\n */\n    // TODO\n    let str = [...str1];\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \" \") {\n            result.push(str[i + 1]);\n            i++;\n        } else {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nfunction tupleStrInt(teststr) {\n/**\n * * Write a function to convert tuple string to integer tuple.\n */\n  let strArr = testStr.match(/\\d+/g).map(Number);\n  return strArr;\n}\nfunction stringToTuple(str1) {\n/**\n * * Write a function to convert a given string to a tuple.\n */", "entry_point": "stringToTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python 3.0\";\nvar x0 = stringToTuple(arg00);\nvar v0 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"item1\";\nvar x1 = stringToTuple(arg10);\nvar v1 = [\"i\", \"t\", \"e\", \"m\", \"1\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"15.10\";\nvar x2 = stringToTuple(arg20);\nvar v2 = [\"1\", \"5\", \".\", \"1\", \"0\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let str = [...str1];\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      result.push(str[i + 1]);\n      i++;\n    } else {\n      result.push(str[i]);\n    }\n  }\n  return result;\n}\n\n", "\n    // TODO\n    return str1.split(\", \").map(Number);\n}\n", "\n    // TODO\n    let str = [...str1];\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \" \") {\n            result.push(str[i + 1]);\n            i++;\n        } else {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\n", "\n    let strArr = str1.match(/\\d+/g).map(Number);\n    return strArr;\n}\n", "\n  let strArr = str1.split(\", \").map(Number);\n  return strArr;\n}\n"]}
{"task_id": "MBJSP/311", "prompt": "function leftRotate(s, d) {\n/**\n * * Write a JavaScript function to left rotate the string.\n */\n  return s.slice(d) + s.slice(0, d);\n}\nfunction getFirstSetBitPos(n) {\n/**\n * * Write a JavaScript function to get the position of rightmost set bit.\n */\n  return Math.floor(Math.log2(n & -n)) + 1;\n}\nfunction setRightMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the right most unset bit.\n */\n    // find the first unset bit\n    for (let i = n.toString(2).length - 1; i >= 0; i--) {\n        if (n.toString(2)[i] === '0') {\n            // set the right most unset bit\n            n |= Math.pow(2, n.toString(2).length - 1 - i)\n            break\n        }\n    }\n    return n\n}\nfunction setLeftMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */", "entry_point": "setLeftMostUnsetBit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = setLeftMostUnsetBit(arg00);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = setLeftMostUnsetBit(arg10);\nvar v1 = 14;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = setLeftMostUnsetBit(arg20);\nvar v2 = 15;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // find the first unset bit\n    for (let i = 0; i < n.toString(2).length; i++) {\n        if (n.toString(2)[i] === '0') {\n            // set the left most unset bit\n            n |= Math.pow(2, n.toString(2).length - 1 - i)\n            break\n        }\n    }\n    return n\n}\n", "\n    // find the first unset bit\n    for (let i = n.toString(2).length - 1; i >= 1; i--) {\n        if (n.toString(2)[i] === '1') {\n            // set the right most unset bit\n            n |= Math.pow(2, i)\n            break\n        }\n    }\n    return n\n}\n", "\n    // find the first unset bit\n    for (let i = n.toString(2).length - 1; i >= 1; i--) {\n        if (n.toString(2)[i - 1] === '0') {\n            // set the left most unset bit\n            n |= Math.pow(2, n.toString(2).length - 1 - i)\n            break\n        }\n    }\n    return n\n}\n", "\n    // find the first unset bit\n    for (let i = 0; i < n.toString(2).length; i++) {\n        if (n.toString(2)[i] === '0') {\n            // set the left most unset bit\n            n |= Math.pow(2, n.toString(2).length - i - 1)\n            break\n        }\n    }\n    return n\n}\n\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n//=============================================================================\n", "\n    // find the first unset bit\n    for (let i = n.toString(2).length - 1; i >= 0; i--) {\n        if (n.toString(2)[i] === '1') {\n            // set the right most unset bit\n            n |= Math.pow(2, n.toString(2).length - 1 - i)\n            break\n        }\n    }\n    return n\n}\n"]}
{"task_id": "MBJSP/312", "prompt": "function unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction volumeTetrahedron(num) {\n/**\n * * Write a function to calculate volume of a tetrahedron.\n */\n  return (num * (num + 1) * (num + 2) * (num + 3)) / 6;\n}\nfunction lateralsurfaceCone(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cone.\n */\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\nfunction volumeCone(r, h) {\n/**\n * * Write a function to find the volume of a cone.\n */", "entry_point": "volumeCone", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 12;\nvar x0 = volumeCone(arg00, arg01);\nvar v0 = 314.15926535897927;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = volumeCone(arg10, arg11);\nvar v1 = 1570.7963267948965;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 19;\nvar arg21 = 17;\nvar x2 = volumeCone(arg20, arg21);\nvar v2 = 6426.651371693521;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.PI * r * h;\n}\n", "\n  return Math.PI * r * h;\n}\n", "\n  return Math.PI * r * h;\n}\n", "\n  return Math.PI * Math.pow(r, 2) * h / 3;\n}\n", "\n  return (Math.PI * r * r * h) / 3;\n}\n\n"]}
{"task_id": "MBJSP/313", "prompt": "function countDigits(num1, num2) {\n/**\n * * Write a function to add two numbers and print number of digits of sum.\n */\n  var sum = num1 + num2;\n  var len = sum.toString().length;\n  return len;\n}\nfunction sumPositivenum(nums) {\n/**\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n */\n  return nums.filter(num => num > 0).reduce((acc, cur) => acc + cur, 0);\n}\nfunction rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction posNos(list1) {\n/**\n * * Write a JavaScript function to print positive numbers in a list.\n */", "entry_point": "posNos", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, -2, 1, 2];\nvar x0 = posNos(arg00);\nvar v0 = [1, 2];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 4, -5];\nvar x1 = posNos(arg10);\nvar v1 = [3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-2, -3, 1];\nvar x2 = posNos(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return list1.filter(num => num > 0).map(num => num).join(', ');\n}\n", "\n  return list1.filter(num => num > 0).reduce((acc, cur) => acc + cur, 0);\n}\n", "\n  return list1\n    .filter(num => num >= 0)\n    .reduce((acc, cur) => acc + cur, 0);\n}\n", "\n  return list1.filter(num => num >= 0).map(num => num + 1).join(', ');\n}\n", "\n  return list1.filter(num => num > 0).reduce((acc, cur) => acc + cur, 0);\n}\n\n"]}
{"task_id": "MBJSP/314", "prompt": "function findMaxVal(n, x, y) {\n/**\n * * Write a function to find the largest possible value of k such that k modulo x is y.\n */\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % x === y) {\n      max = i;\n    }\n  }\n  return max;\n}\nfunction countWays(n) {\n/**\n * * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n */\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 4;\n\n  let ways = 0;\n  for (let i = 1; i <= n - 2; i++) {\n    ways += countWays(i);\n  }\n\n  return ways;\n}\nfunction maxSumSubseq(a) {\n/**\n * * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n */\n  const len = a.length;\n  const dp = new Array(len);\n\n  dp[0] = a[0];\n  dp[1] = Math.max(a[0], a[1]);\n  for (let i = 2; i < len; i++) {\n    dp[i] = Math.max(dp[i - 1], dp[i - 2] + a[i]);\n  }\n\n  return dp[len - 1];\n}\nfunction maxSumRectangularGrid(grid, n) {\n/**\n * * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n */", "entry_point": "maxSumRectangularGrid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 4, 5], [2, 0, 0]];\nvar arg01 = 3;\nvar x0 = maxSumRectangularGrid(arg00, arg01);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]];\nvar arg11 = 5;\nvar x1 = maxSumRectangularGrid(arg10, arg11);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]];\nvar arg21 = 5;\nvar x2 = maxSumRectangularGrid(arg20, arg21);\nvar v2 = 81;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n === 1) return grid[0];\n  if (n === 2) return Math.max(grid[0], grid[1]);\n\n  let ways = 0;\n  for (let i = 1; i <= n - 2; i++) {\n    ways += Math.max(grid[i], grid[i + 1]);\n  }\n  return ways + grid[n - 1];\n}\n", "\n  if (n === 1) return grid[0];\n  if (n === 2) return Math.max(grid[0], grid[1]);\n  if (n === 3) return Math.max(grid[0] + grid[2], grid[1] + grid[2]);\n\n  let max = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (j + 1 < grid[i].length) {\n        max = Math.max(max, grid[i][j] + grid[i][j + 1]);\n      }\n      if (i + 1 < grid.length) {\n        max = Math.max(max, grid[i][j] + grid[i + 1][j]);\n      }\n    }\n  }\n\n  return max;\n}\n", "\n  if (n === 1) return grid[0][0];\n  if (n === 2) return Math.max(grid[0][0], grid[0][1]) + Math.max(grid[1][0], grid[1][1]);\n\n  let dp = new Array(n).fill(0);\n  dp[0] = grid[0][0];\n  dp[1] = Math.max(grid[0][0], grid[0][1]) + grid[1][0];\n  dp[2] = Math.max(grid[0][0], grid[1][0]) + grid[1][1];\n  for (let i = 3; i < n; i++) {\n    dp[i] = Math.max(dp[i - 2], dp[i - 3] + grid[i - 1][0]);\n    dp[i] = Math.max(dp[i - 2], dp[i - 3] + grid[i - 1][1]);\n  }\n\n  return dp[n - 1];\n}\n", "\n  if (n === 0) return 0;\n  if (n === 1) return grid[0][0];\n\n  return Math.max(\n    maxSumRectangularGrid(grid, n - 1),\n    grid[0][n - 1] + maxSumRectangularGrid(grid, n - 1),\n  );\n}\n", "\n  let maxSum = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      maxSum += grid[i][j];\n    }\n  }\n  return maxSum;\n}\n\nconsole.log(countWays(5));\nconsole.log(countWays(10));\nconsole.log(countWays(30));\nconsole.log(countWays(100));\nconsole.log(countWays(500));\nconsole.log(countWays(1000));\nconsole.log(countWays(2000));\nconsole.log(countWays(5000));\nconsole.log(countWays(10000));\nconsole.log(countWays(30000));\nconsole.log(countWays(50000));\nconsole.log(countWays(100000));\nconsole.log(countWays(500000));\nconsole.log(countWays(1000000));\nconsole.log(countWays(5000000));\nconsole.log(countWays(10000000));\nconsole.log(countWays(100000000));\nconsole.log(countWays(1000000000));\nconsole.log(countWays(10000000000));\nconsole.log(countWays(100000000000));\nconsole.log(countWays(1000000000000));\n\nconsole.log(maxSumSubseq([1, 5, 2, 4, 3]));\nconsole.log(maxSumSubseq([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"]}
{"task_id": "MBJSP/315", "prompt": "function maxSubArraySum(a, size) {\n/**\n * * Write a function to find length of the subarray having maximum sum.\n */\n    let maxSum = 0;\n    let currentSum = 0;\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < a.length; i++) {\n        currentSum += a[i];\n        if (currentSum < 0) {\n            currentSum = 0;\n            start = i + 1;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            end = i;\n        }\n    }\n    return end - start + 1;\n}\nfunction findMaxLength(lst) {\n/**\n * * Write a JavaScript function to find the maximum length of sublist.\n */\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === 0) {\n        temp = 0;\n      } else {\n        temp += 1;\n      }\n      if (temp > max) {\n        max = temp;\n      }\n    }\n  }\n  return max;\n}\nfunction lenLog(list1) {\n/**\n * * Write a JavaScript function to find the length of the shortest word.\n */\n  let min = list1[0].length;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length < min) {\n      min = list1[i].length;\n    }\n  }\n  return min;\n}\nfunction findMaxLenEven(str) {\n/**\n * * Write a JavaScript function to find the first maximum length of even word.\n */", "entry_point": "findMaxLenEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python language\";\nvar x0 = findMaxLenEven(arg00);\nvar v0 = \"language\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"maximum even length\";\nvar x1 = findMaxLenEven(arg10);\nvar v1 = \"length\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"eve\";\nvar x2 = findMaxLenEven(arg20);\nvar v2 = \"-1\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      if (str[i + 1] === 'b' && str[i + 2] === 'c' && str[i + 3] === 'a') {\n        if (str[i + 4] === 'b' && str[i + 5] === 'c') {\n          if (str[i + 6] === 'a') {\n            max = i + 4;\n          }\n        }\n      }\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!== 0) {\n      if (str[i].length > max) {\n        max = str[i].length;\n      }\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      if (str[i].length > max) {\n        max = str[i].length;\n      }\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < str.length; i++) {\n    let temp = 0;\n    for (let j = 0; j < str[i].length; j++) {\n      if (str[i][j] === 0) {\n        temp = 0;\n      } else {\n        temp += 1;\n      }\n      if (temp % 2 === 0) {\n        if (temp > max) {\n          max = temp;\n        }\n      }\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      continue;\n    }\n    if (str[i].length > max && str[i].length % 2 === 0) {\n      max = str[i].length;\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/316", "prompt": "function findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findFirstOccurrence(a, x) {\n/**\n * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n */\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\nfunction findLastOccurrence(a, x) {\n/**\n * * Write a function to find the index of the last occurrence of a given number in a sorted array.\n */", "entry_point": "findLastOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9];\nvar arg01 = 5;\nvar x0 = findLastOccurrence(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 5, 8, 6, 6, 8, 9, 9, 9];\nvar arg11 = 9;\nvar x1 = findLastOccurrence(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 2, 1, 5, 6, 6, 6, 9, 9, 9];\nvar arg21 = 6;\nvar x2 = findLastOccurrence(arg20, arg21);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\n", "\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\n", "\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\n\n", "\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\n", "\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] > x) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return -1;\n}\n"]}
{"task_id": "MBJSP/317", "prompt": "function maxOfNth(testlist, n) {\n/**\n * * Write a function to find the maximum of nth column from the given tuple list.\n */\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    max = Math.max(max, testList[i][n]);\n  }\n  return max;\n}\nfunction removeKthElement(list1, l) {\n/**\n * * Write a JavaScript function to remove the k'th element from a given list.\n */\n  const list = [...list1];\n  const k = list.splice(l - 1, 1);\n  return list;\n}\nfunction largestPos(list1) {\n/**\n * * Write a JavaScript function to find the largest postive number from the given list.\n */\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0 && list1[i] > max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction modifiedEncode(alist) {\n/**\n * * Write a function to reflect the modified run-length encoding from a list.\n */", "entry_point": "modifiedEncode", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nvar x0 = modifiedEncode(arg00);\nvar v0 = [[2, 1], 2, 3, [2, 4], 5, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"automatically\";\nvar x1 = modifiedEncode(arg10);\nvar v1 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar x2 = modifiedEncode(arg20);\nvar v2 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  let output = '';\n  for (let i = 0; i < alist.length; i++) {\n    if (alist[i] == 0) {\n      count--;\n    } else {\n      count++;\n    }\n    if (count == 0) {\n      output += alist[i];\n    } else {\n      output += count + alist[i];\n      count = 0;\n    }\n  }\n  return output;\n}\n", "\n  let a;\n  for (let i = 0; i < alist.length; i++) {\n    a = alist[i];\n    a = a.toString();\n    alist[i] = a.length;\n  }\n  return alist;\n}\n", "\n  const list = [...alist];\n  for (let i = 0; i < list.length; i++) {\n    let list1 = [];\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let l1 = 1;\n    let l2 = 1;\n    let l3 = 1;\n    let l4 = 1;\n    while (list[i] > 0) {\n      list1.push(list[i] % 10);\n      list[i] = list[i] / 10;\n    }\n    while (i + 1 < list.length && list[i + 1] == 0) {\n      i++;\n    }\n    if (i + 1 < list.length) {\n      while (list[i + 1] > 0) {\n        list2.push(list[i + 1] % 10);\n        list[i + 1] = list[i + 1] / 10;\n      }\n      if (list[i] > 0) {\n        list3.push(list[i] % 10);\n        list[i] = list[i] / 10;\n      }\n    }\n    if (i + 2 < list.length && list[i + 2] == 0) {\n      i++;\n    }\n    while (i + 1 < list.length && list[i + 1] == 0) {\n      i++;\n    }\n    if (i + 1 < list.length) {\n      while (list[i + 1] > 0) {\n        list4.push(list[i + 1] % 10);\n        list[i + 1] = list[i + 1] / 10;\n      }\n      if (list[i] >", "\n  let count = 0;\n  let arr = [];\n  let max = 0;\n  for (let i = 0; i < alist.length; i++) {\n    if (alist[i] == count) {\n      count += 1;\n    } else {\n      arr.push(alist[i]);\n      if (count > max) {\n        max = count;\n      }\n      count = 1;\n    }\n  }\n  arr.push(alist[i]);\n  if (count > max) {\n    max = count;\n  }\n  return arr;\n}\n", "\n  let result = [];\n  let k = 0;\n  for (let i = 0; i < alist.length; i++) {\n    if (alist[i] < 0) {\n      k++;\n    }\n    else {\n      result.push({\n        key: alist[i],\n        value: k + 1\n      });\n      k = 0;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/318", "prompt": "function maxSumIncreasingSubsequence(arr, n) {\n/**\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n */\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\nfunction checkTypeOfTriangle(a, b, c) {\n/**\n * * Write a JavaScript function to find the type of triangle from the given sides.\n */\n    sqa = Math.pow(a, 2)\n    sqb = Math.pow(b, 2)\n    sqc = Math.pow(c, 2)\n    if (sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb) {\n        return \"Right-angled Triangle\"\n    } else if (sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb) {\n        return \"Obtuse-angled Triangle\"\n    } else {\n        return \"Acute-angled Triangle\"\n    }\n}\nfunction maxSumSubseq(a) {\n/**\n * * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n */\n  const len = a.length;\n  const dp = new Array(len);\n\n  dp[0] = a[0];\n  dp[1] = Math.max(a[0], a[1]);\n  for (let i = 2; i < len; i++) {\n    dp[i] = Math.max(dp[i - 1], dp[i - 2] + a[i]);\n  }\n\n  return dp[len - 1];\n}\nfunction maxVolume(s) {\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */", "entry_point": "maxVolume", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = maxVolume(arg00);\nvar v0 = 18;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = maxVolume(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = maxVolume(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  for (let i = 0; i < s.length; i++) {\n    let dp = 0;\n    for (let j = i; j < s.length; j++) {\n      dp += s[j];\n      max = Math.max(max, dp);\n    }\n  }\n  return max;\n}\n", "\n    let a = s[0];\n    let b = s[1];\n    let c = s[2];\n    if (a + b > c && a + c > b && b + c > a) {\n        return Math.pow(a, 3) + Math.pow(b, 3) + Math.pow(c, 3);\n    } else if (a + b > c && a + c == b && b + c == a) {\n        return Math.pow(a, 3) + Math.pow(b, 3) + Math.pow(c, 3);\n    } else if (a + b == c && a + c > b && b + c > a) {\n        return Math.pow(a, 3) + Math.pow(b, 3) + Math.pow(c, 3);\n    } else if (a + b == c && a + c == b && b + c > a) {\n        return Math.pow(a, 3) + Math.pow(b, 3) + Math.pow(c, 3);\n    } else {\n        return 0;\n    }\n}\n", "\n  const len = s.length;\n  const dp = new Array(len);\n\n  for (let i = 0; i < len; i++) {\n    dp[i] = Math.pow(s[i], 2);\n  }\n\n  for (let i = 2; i < len; i++) {\n    for (let j = 0; j < i; j++) {\n      dp[i] = Math.max(dp[i], dp[j] + dp[i - 1 - j]);\n    }\n  }\n\n  return Math.sqrt(dp[len - 1]);\n}\n", "\n    if (s < 0) {\n        return 0;\n    }\n    const len = s.length;\n    let dp = new Array(len);\n    let max = 0;\n    for (let i = 0; i < len; i++) {\n        dp[i] = Math.pow(s[i], 2) + Math.pow(s[i] - s[i - 1], 2) + Math.pow(s[i] - s[i + 1], 2);\n        max = Math.max(max, dp[i]);\n    }\n    return Math.sqrt(max);\n}\n", "\n  const len = s.length;\n  const dp = new Array(len);\n\n  dp[0] = s[0];\n  dp[1] = Math.max(s[0], s[1]);\n  for (let i = 2; i < len; i++) {\n    dp[i] = Math.max(dp[i - 1], dp[i - 2] + s[i]);\n  }\n\n  return dp[len - 1] * dp[len - 2] * dp[len - 3];\n}\n"]}
{"task_id": "MBJSP/319", "prompt": "function findAdverbs(text) {\n/**\n * * Write a function to find all adverbs and their positions in a given sentence by using regex.\n */\n  const adverbs = []\n  const regex = /\\w+ly/g\n  let match\n\n  while ((match = regex.exec(text)) !== null) {\n    adverbs.push({ start: match.index, end: match.index + match[0].length })\n  }\n\n  return adverbs.map(adj => `${adj.start}-${adj.end}: ${text.substring(adj.start, adj.end)}`).join(\"\\n\")\n}\nfunction removeExtraChar(text1) {\n/**\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n */\n    return text1.replace(/[^a-zA-Z0-9]/g, '');\n}\nfunction findCharLong(text) {\n/**\n * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n */\n  return text.match(/\\w{4,}/g) || [];\n}\nfunction findLongWord(text) {\n/**\n * * Write a function to find all five characters long word in the given string by using regex.\n */", "entry_point": "findLongWord", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Please move back to strem\";\nvar x0 = findLongWord(arg00);\nvar v0 = [\"strem\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"4K Ultra HD streaming player\";\nvar x1 = findLongWord(arg10);\nvar v1 = [\"Ultra\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Streaming Media Player\";\nvar x2 = findLongWord(arg20);\nvar v2 = [\"Media\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.match(/\\w{5}/g) || [];\n}\n", "\n  return text.match(/\\w{5,}/g) || [];\n}\n", "\n    return text.match(/\\w{5,}/g) || [];\n}\n\n// Function to find the Longest Word by using regex.\n", "\n  return text.match(/\\w{5,}/g) || [];\n}\n", "\n  return text.match(/\\w{5,}/g) || [];\n}\n"]}
{"task_id": "MBJSP/320", "prompt": "function cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n odd natural numbers.\n */\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 3);\n    }\n    return sum;\n}\nfunction sumAverage(number) {\n/**\n * * Write a function to find sum and average of first n natural numbers.\n */\n  let sum = 0;\n  let average = 0;\n  for (let i = 1; i <= number; i++) {\n    sum += i;\n  }\n  average = sum / number;\n  return [sum, average];\n}\nfunction difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction sumDifference(n) {\n/**\n * * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n */", "entry_point": "sumDifference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = sumDifference(arg00);\nvar v0 = 5434;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = sumDifference(arg10);\nvar v1 = 41230;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 54;\nvar x2 = sumDifference(arg20);\nvar v2 = 2151270;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  let sum2 = 0;\n  for (let i = 1; i <= n; i++) {\n    sum2 += Math.pow(i, 2);\n  }\n  return sum - sum2;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  let sum2 = 0;\n  for (let i = 1; i <= n; i++) {\n    sum2 += i;\n  }\n  return sum - sum2;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += Math.pow(i, 2);\n    }\n    return sum - sum2;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += Math.pow(i, 2);\n    }\n    return sum - sum2;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 2);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += Math.pow(i, 2);\n    }\n    return sum - sum2;\n}\n"]}
{"task_id": "MBJSP/321", "prompt": "function findPlatform(arr, dep, n) {\n/**\n * * Write a function to find the minimum number of platforms required for a railway/bus station.\n */\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            plat_needed += 1\n            i += 1\n        } else if (arr[i] > dep[j]) {\n            plat_needed -= 1\n            j += 1\n        }\n        if (plat_needed > result) {\n            result = plat_needed\n        }\n    }\n    return result\n}\nfunction catalanNumber(num) {\n/**\n * * Write a function for nth catalan number.\n */\n  let arr = new Array(num + 1).fill(0);\n  arr[0] = 1;\n  arr[1] = 1;\n  for (let i = 2; i <= num; i++) {\n    for (let j = 0; j < i; j++) {\n      arr[i] += arr[j] * arr[i - j - 1];\n    }\n  }\n  return arr[num];\n}\nfunction getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction findDemlo(s) {\n/**\n * * Write a function to find the demlo number for the given number.\n */", "entry_point": "findDemlo", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"111111\";\nvar x0 = findDemlo(arg00);\nvar v0 = \"12345654321\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1111\";\nvar x1 = findDemlo(arg10);\nvar v1 = \"1234321\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"13333122222\";\nvar x2 = findDemlo(arg20);\nvar v2 = \"123456789101110987654321\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let arr = new Array(s + 1).fill(0);\n    arr[1] = 1;\n    for (let i = 2; i <= s; i++) {\n        for (let j = 0; j < i; j++) {\n            arr[i] += arr[j] * (i - j);\n        }\n    }\n    return arr[s];\n}\n", "\n    let demlo = 1;\n    for (let i = 2; i <= s; i++) {\n        demlo *= i;\n    }\n    return demlo;\n}\n", "\n  let arr = new Array(2).fill(0);\n  arr[0] = 1;\n  arr[1] = 1;\n  for (let i = 2; i <= s; i++) {\n    for (let j = 0; j < i; j++) {\n      arr[i] += arr[j] * arr[i - j - 1];\n    }\n  }\n  return arr[s];\n}\n", "\n    let demlo = 0;\n    for (let i = 0; i < s.length; i++) {\n        for (let j = i + 1; j < s.length; j++) {\n            if (s[i] + s[j] == 2020) {\n                demlo = (s[i] * s[j]);\n            }\n        }\n    }\n    return demlo;\n}\n", "\n    let arr = new Array(s);\n    arr.sort();\n    let result = 0;\n    for (let i = 0; i < s - 1; i++) {\n        result += arr[i] * (s - i - 1);\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/322", "prompt": "function findAdverbs(text) {\n/**\n * * Write a function to find all adverbs and their positions in a given sentence by using regex.\n */\n  const adverbs = []\n  const regex = /\\w+ly/g\n  let match\n\n  while ((match = regex.exec(text)) !== null) {\n    adverbs.push({ start: match.index, end: match.index + match[0].length })\n  }\n\n  return adverbs.map(adj => `${adj.start}-${adj.end}: ${text.substring(adj.start, adj.end)}`).join(\"\\n\")\n}\nfunction cummulativeSum(testlist) {\n/**\n * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      sum += testList[i][j];\n    }\n  }\n  return sum;\n}\nfunction removeTuple(testlist) {\n/**\n * * Write a function to remove all tuples with all \"none\" values in the given tuple list.\n */\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.every(val => val === null)) {\n      continue;\n    }\n    newList.push(tuple);\n  }\n  return newList;\n}\nfunction positionMin(list1) {\n/**\n * * Write a function to find all index positions of the minimum values in a given list.\n */", "entry_point": "positionMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54];\nvar x0 = positionMin(arg00);\nvar v0 = [3, 11];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nvar x1 = positionMin(arg10);\nvar v1 = [0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar x2 = positionMin(arg20);\nvar v2 = [1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const min = Math.min.apply(Math, list1)\n  const index = list1.indexOf(min);\n  return [index, min]\n}\n", "\n  list1.sort((a, b) => a[1] - b[1])\n  const res = []\n  for (let i = 0; i < list1.length; i++) {\n    res.push(list1[i][0])\n  }\n  return res;\n}\n", "\n  let minIndex = 0;\n  for (let i = 1; i < list1.length; i++) {\n    if (list1[i] < list1[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n}\n", "\n  let min = Number.POSITIVE_INFINITY;\n  let minPos = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < min) {\n      min = list1[i];\n      minPos = i;\n    }\n  }\n  return minPos;\n}\n", "\n  let index = 0;\n  let min = list1[index];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < min) {\n      min = list1[i];\n      index = i;\n    }\n  }\n  return index;\n}\n"]}
{"task_id": "MBJSP/323", "prompt": "function sortByDnf(arr, n) {\n/**\n * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n */\n  const count = new Array(n).fill(0);\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    count[arr[i]]++;\n  }\n  for (let i = 0; i < n; i++) {\n    while (count[i] > 0) {\n      result.push(i);\n      count[i]--;\n    }\n  }\n  return result;\n}\nfunction negativeCount(nums) {\n/**\n * * Write a function to find the ration of negative numbers in an array of integers.\n */\n  const negatives = nums.filter(num => num < 0);\n  const total = negatives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\nfunction rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction reArrange(arr, n) {\n/**\n * * Write a function to re-arrange the given array in alternating positive and negative items.\n */", "entry_point": "reArrange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8];\nvar arg01 = 10;\nvar x0 = reArrange(arg00, arg01);\nvar v0 = [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, -4, -1, 4];\nvar arg11 = 6;\nvar x1 = reArrange(arg10, arg11);\nvar v1 = [-4, 1, -1, 2, 3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [4, 7, 9, 77, -4, 5, -3, -9];\nvar arg21 = 8;\nvar x2 = reArrange(arg20, arg21);\nvar v2 = [-4, 4, -3, 7, -9, 9, 77, 5];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const count = new Array(n).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    count[arr[i]]++;\n  }\n  for (let i = 0; i < n; i++) {\n    if (count[i] % 2 == 0) {\n      continue;\n    }\n    let temp = arr[i];\n    arr[i] = arr[count[i]];\n    arr[count[i]] = temp;\n    count[i]++;\n    count[count[i]]--;\n  }\n  return arr;\n}\n", "\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      arr[i] = -arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= 0) {\n      arr[i] = -arr[i];\n    }\n  }\n  return arr;\n}\n", "\n  const newArr = [];\n  const count = new Array(n).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    count[arr[i]]++;\n  }\n  for (let i = 0; i < n; i++) {\n    while (count[i] > 1) {\n      if (count[i] % 2 === 0) {\n        newArr.push(i);\n        count[i]--;\n      } else {\n        newArr.push(n - 1 - i);\n        count[i]--;\n      }\n    }\n  }\n  return newArr;\n}\n", "\n  return arr.reduce((result, item, index) => {\n    if (index % 2 === 0) {\n      result.push(item);\n    } else {\n      result.push(item);\n      result.push(arr[index + n - 1]);\n    }\n    return result;\n  }, []);\n}\n", "\n  const result = arr.slice();\n  for (let i = 0; i < result.length; i++) {\n    if (i % 2 === 0) {\n      result[i] = -result[i];\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/324", "prompt": "function substractElements(testtup1, testtup2) {\n/**\n * * Write a function to substract the elements of the given nested tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const sub = [];\n    for (let j = 0; j < testTup1[i].length; j++) {\n      sub.push(testTup1[i][j] - testTup2[i][j]);\n    }\n    result.push(sub);\n  }\n  return result;\n}\nfunction clearTuple(testtup) {\n/**\n * * Write a function to clear the values of the given tuples.\n */\n  // code goes here\n  return []\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction sumOfAlternates(testtuple) {\n/**\n * * Write a function to extract the sum of alternate chains of tuples.\n */", "entry_point": "sumOfAlternates", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 3, 6, 10, 34];\nvar x0 = sumOfAlternates(arg00);\nvar v0 = [46, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = sumOfAlternates(arg10);\nvar v1 = [6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [6, 7, 8, 9, 4, 5];\nvar x2 = sumOfAlternates(arg20);\nvar v2 = [21, 18];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup2[i].length > 0) {\n      const chain = [...testTup1[i]];\n      for (let j = 0; j < testTup2[i].length; j++) {\n        chain.push(testTup2[i][j]);\n      }\n      result += sumAlternateChains(chain);\n    }\n  }\n  return result;\n}\n", "\n  const subList = clearTuple(testtuple);\n  const result = 0;\n  for (let i = 0; i < subList.length; i++) {\n    const subListElement = subList[i];\n    for (let j = i + 1; j < subList.length; j++) {\n      const subList2Element = subList[j];\n      if (subListElement[0] == subList2Element[0]) {\n        result += subListElement[1] + subList2Element[1];\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const sub = [];\n    for (let j = 0; j < testTup1[i].length; j++) {\n      const subsub = [];\n      for (let k = 0; k < testTup2[i].length; k++) {\n        subsub.push(testTup1[i][j] + testTup2[i][k]);\n      }\n      sub.push(subsub);\n    }\n    result.push(sub);\n  }\n  return result;\n}\n", "\n  return testtuple.reduce((acc, cur) => acc + cur, 0);\n}\n", "\n  return testtuple.reduce((sum, tup) => {\n    return sum + tup[tup.length - 1];\n  }, 0);\n}\n"]}
{"task_id": "MBJSP/325", "prompt": "function findTripletArray(a, arrsize, sum) {\n/**\n * * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n */\n  let aArray = [];\n  let triplet = [];\n  for (let i = 0; i < arrSize; i++) {\n    aArray.push(a[i]);\n  }\n  for (let i = 0; i < arrSize - 2; i++) {\n    for (let j = i + 1; j < arrSize - 1; j++) {\n      for (let k = j + 1; k < arrSize; k++) {\n        let sumTemp = aArray[i] + aArray[j] + aArray[k];\n        if (sumTemp === sum) {\n          triplet = [aArray[i], aArray[j], aArray[k]];\n          return triplet;\n        }\n      }\n    }\n  }\n  return triplet;\n}\nfunction getPairsCount(arr, n, sum) {\n/**\n * * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === sum) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction getPairsCount(arr, n, sum) {\n/**\n * * Write a JavaScript function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === sum) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction getMinSquares(n) {\n/**\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */", "entry_point": "getMinSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = getMinSquares(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = getMinSquares(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = getMinSquares(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let n2 = n * n;\n  let n4 = n2 * n2;\n  let n8 = n4 * n4;\n  let result = n8 + (n2 * (n4 * n2) - n8) / (n2 - 1);\n  return result;\n}\n", "\n  let min = n;\n  for (let i = 1; i <= n; i++) {\n    let temp = Math.pow(i, 2);\n    if (temp < min) {\n      min = temp;\n    }\n  }\n  return min;\n}\n", "\n  let minSquares = Math.pow(n, 2);\n  for (let i = 2; i <= n; i++) {\n    let squares = Math.pow(i, 2);\n    minSquares = Math.min(squares, minSquares);\n  }\n  return minSquares;\n}\n", "\n  let count = 0;\n  let minSquareSum = 0;\n  for (let i = 1; i <= n; i++) {\n    minSquareSum = Math.pow(i, 2);\n    for (let j = 1; j < n; j++) {\n      if (minSquareSum > Math.pow(j, 2)) {\n        minSquareSum = Math.pow(j, 2);\n      }\n    }\n    count += minSquareSum;\n  }\n  return count;\n}\n", "\n  let minSquares = Infinity;\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = 1; j <= i; j++) {\n      sum += Math.pow(j, 2);\n    }\n    if (sum === n) {\n      minSquares = Math.min(minSquares, i);\n    }\n  }\n  return minSquares;\n}\n"]}
{"task_id": "MBJSP/326", "prompt": "function countReversePairs(testlist) {\n/**\n * * Write a function to count the pairs of reverse strings in the given string list.\n */\n  let count = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = i + 1; j < testList.length; j++) {\n      if (testList[i] === testList[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction nCommonWords(text, n) {\n/**\n * * Write a function to find the occurrences of n most common words in a given text.\n */\n  const words = text.split(\" \");\n  const counts = {};\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    counts[word] = counts[word] ? counts[word] + 1 : 1;\n  }\n  const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);\n  const top = sorted.slice(0, n);\n  return top;\n}\nfunction maxOccurrences(list1) {\n/**\n * * Write a function to find the item with maximum occurrences in a given list.\n */\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1.filter(x => x === list1[i]).length > maxOccurrence) {\n      maxOccurrence = list1.filter(x => x === list1[i]).length;\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction mostOccurrences(testlist) {\n/**\n * * Write a function to get the word with most number of occurrences in the given strings list.\n */", "entry_point": "mostOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"];\nvar x0 = mostOccurrences(arg00);\nvar v0 = \"UTS\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Its been a great year\", \"this year is so worse\", \"this year is okay\"];\nvar x1 = mostOccurrences(arg10);\nvar v1 = \"year\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"];\nvar x2 = mostOccurrences(arg20);\nvar v2 = \"can\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let most = \"\";\n  let occurrences = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = 0; j < testlist[i].length; j++) {\n      if (testlist[i][j] === testlist[i][testlist[i].length - 1]) {\n        occurrences++;\n      }\n    }\n    if (occurrences > occurrences) {\n      occurrences = occurrences;\n      most = testlist[i];\n    }\n  }\n  return most;\n}\n", "\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    if (testlist.filter(x => x === testlist[i]).length > maxOccurrence) {\n      maxOccurrence = testlist.filter(x => x === testlist[i]).length;\n      max = testlist[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  let mostOccurrence = \"\";\n  for (let i = 0; i < testList.length; i++) {\n    if (testList[i]!== \"\") {\n      const count = testList.filter(x => x === testList[i]).length;\n      if (count > max) {\n        max = count;\n        mostOccurrence = testList[i];\n      }\n    }\n  }\n  return mostOccurrence;\n}\n", "\n  const counts = {};\n  for (let i = 0; i < testlist.length; i++) {\n    const word = testlist[i];\n    counts[word] = counts[word]? counts[word] + 1 : 1;\n  }\n  const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]);\n  return sorted[0][0];\n}\n", "\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    const words = testlist[i].split(\" \");\n    let count = 0;\n    for (let j = 0; j < words.length; j++) {\n      count += words.filter(x => x === testlist[i][j]).length;\n    }\n    if (count > maxOccurrence) {\n      maxOccurrence = count;\n      max = testlist[i];\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/327", "prompt": "function checkExpression(exp) {\n/**\n * * Write a function to check if the given expression is balanced or not.\n */\n  let stack = [];\n  let map = {\n    '{': '}',\n    '(': ')',\n    '[': ']'\n  };\n\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === '{' || exp[i] === '(' || exp[i] === '[') {\n      stack.push(exp[i]);\n    } else if (exp[i] === '}' || exp[i] === ')' || exp[i] === ']') {\n      if (map[stack.pop()] !== exp[i]) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n}\nfunction validityTriangle(a, b, c) {\n/**\n * * Write a function to check if the triangle is valid or not.\n */\n    let sum = a + b + c;\n    return sum === 180;\n}\nfunction checkIsosceles(x, y, z) {\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n  if (x === y && y === z) {\n    return true;\n  } else if (x !== y && y !== z && x !== z) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction checkIsosceles(x, y, z) {\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */", "entry_point": "checkIsosceles", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 8;\nvar arg02 = 12;\nvar x0 = checkIsosceles(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 6;\nvar arg12 = 12;\nvar x1 = checkIsosceles(arg10, arg11, arg12);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 16;\nvar arg22 = 20;\nvar x2 = checkIsosceles(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (x === y || y === z || z === x) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  if (x === y || x === z || y === z) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  return (x === y || x === z || y === z);\n}\n", "\n  if (x === y || y === z || x === z) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  if (x === y || y === z || x === z) {\n    return true;\n  } else {\n    return false;\n  }\n}\n"]}
{"task_id": "MBJSP/328", "prompt": "function leftRotate(s, d) {\n/**\n * * Write a JavaScript function to left rotate the string.\n */\n  return s.slice(d) + s.slice(0, d);\n}\nfunction leftRotate(n, d) {\n/**\n * * Write a JavaScript function to left rotate the bits of a given number.\n */\n  return (n << d) | (n >>> (32 - d));\n}\nfunction rotateRight(list1, m, n) {\n/**\n * * Write a function to rotate a given list by specified number of items to the right direction.\n */\n  return list1.slice(-(m)).concat(list1.slice(0, -(n)));\n}\nfunction rotateLeft(list1, m, n) {\n/**\n * * Write a function to rotate a given list by specified number of items to the left direction.\n */", "entry_point": "rotateLeft", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg01 = 3;\nvar arg02 = 4;\nvar x0 = rotateLeft(arg00, arg01, arg02);\nvar v0 = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = rotateLeft(arg10, arg11, arg12);\nvar v1 = [3, 4, 5, 6, 7, 8, 9, 10, 1, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg21 = 5;\nvar arg22 = 2;\nvar x2 = rotateLeft(arg20, arg21, arg22);\nvar v2 = [6, 7, 8, 9, 10, 1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return list1.slice(0, -(n)).concat(list1.slice(-m, 0));\n}\n", "\n  return list1.slice(0, n).concat(list1.slice(-(m)));\n}\n", "\n  return list1.slice(-m).concat(list1.slice(0, -(n)));\n}\n", "\n  return list1.slice(-(n)).concat(list1.slice(0, -(m)));\n}\n", "\n  return list1.slice(0, n).concat(list1.slice(-(n)));\n}\n"]}
{"task_id": "MBJSP/329", "prompt": "function rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction negativeCount(nums) {\n/**\n * * Write a function to find the ration of negative numbers in an array of integers.\n */\n  const negatives = nums.filter(num => num < 0);\n  const total = negatives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\nfunction removeNegs(numlist) {\n/**\n * * Write a JavaScript function to remove negative numbers from a list.\n */\n    var newList = [];\n    for (var i = 0; i < numList.length; i++) {\n        if (numList[i] >= 0) {\n            newList.push(numList[i]);\n        }\n    }\n    return newList;\n}\nfunction negCount(list) {\n/**\n * * Write a JavaScript function to count negative numbers in a list.\n */", "entry_point": "negCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, -2, 3, -4, -5];\nvar x0 = negCount(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = negCount(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, -3, -10, 20];\nvar x2 = negCount(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return list.filter(item => item < 0).length;\n}\n", "\n  var newList = [];\n  for (var i = 0; i < list.length; i++) {\n      if (list[i] < 0) {\n        newList.push(list[i]);\n      }\n  }\n  return newList.length;\n}\n", "\n    const negs = list.filter(num => num < 0);\n    return negs.length;\n}\n", "\n    var count = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] < 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n  const negatives = list.filter(num => num < 0);\n  const total = negatives.length;\n  return total;\n}\n"]}
{"task_id": "MBJSP/330", "prompt": "function capitalWordsSpaces(str1) {\n/**\n * * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n */\n    return str1.replace(/([A-Z])/g, ' $1').trim();\n}\nfunction removeExtraChar(text1) {\n/**\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n */\n    return text1.replace(/[^a-zA-Z0-9]/g, '');\n}\nfunction findCharLong(text) {\n/**\n * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n */\n  return text.match(/\\w{4,}/g) || [];\n}\nfunction findChar(text) {\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */", "entry_point": "findChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"For the four consumer complaints contact manager AKR reddy\";\nvar x0 = findChar(arg00);\nvar v0 = [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Certain service are subject to change MSR\";\nvar x1 = findChar(arg10);\nvar v1 = [\"are\", \"MSR\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Third party legal desclaimers\";\nvar x2 = findChar(arg20);\nvar v2 = [\"Third\", \"party\", \"legal\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.match(/\\w{3,}/g) || [];\n}\n", "\n  return text.match(/\\w{3,}/g) || [];\n}\n", "\n  return text.match(/\\w{3,}/g) || [];\n}\n", "\n  return text.match(/\\w{3,}/g) || [];\n}\n", "\n  return text.match(/\\w{3,}/g) || [];\n}\n"]}
{"task_id": "MBJSP/331", "prompt": "function toggleFAndLBits(n) {\n/**\n * * Write a JavaScript function to toggle only first and last bits of a given number.\n */\n    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1;\n}\nfunction leftRotate(n, d) {\n/**\n * * Write a JavaScript function to left rotate the bits of a given number.\n */\n  return (n << d) | (n >>> (32 - d));\n}\nfunction countUnsetBits(n) {\n/**\n * * Write a JavaScript function to count the total unset bits from 1 to n.\n */\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += i.toString(2).split('').filter(val => val == '0').length;\n    }\n    return count;\n}\nfunction countUnsetBits(n) {\n/**\n * * Write a JavaScript function to count unset bits of a given number.\n */", "entry_point": "countUnsetBits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countUnsetBits(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = countUnsetBits(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = countUnsetBits(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += i.toString(2).split('').filter(val => val == '0').length;\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += i.toString(2).split('').filter(val => val == '0').length;\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += i.toString(2).split('').filter(val => val == '0').length;\n    }\n    return count;\n}\n/**\n * * Find a given ", "\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n & i) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += (i & n).toString(2).split('').filter(val => val == '0').length;\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/332", "prompt": "function countChar(str, x) {\n/**\n * * Write a JavaScript function to count occurences of a character in a repeated string.\n */\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === x) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction maxChar(str1) {\n/**\n * * Write a function to count the most common character in a given string.\n */\n    let charMap = {};\n    let max = 0;\n    let maxChar = '';\n\n    for (let char of str1) {\n        if (charMap[char]) {\n            charMap[char]++;\n        } else {\n            charMap[char] = 1;\n        }\n    }\n\n    for (let char in charMap) {\n        if (charMap[char] > max) {\n            max = charMap[char];\n            maxChar = char;\n        }\n    }\n\n    return maxChar;\n}\nfunction countChar(string, ch) {\n/**\n * * Write a function to count occurrence of a character in a string.\n */\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === char) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction charFrequency(str1) {\n/**\n * * Write a function to count character frequency of a given string.\n */", "entry_point": "charFrequency", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = charFrequency(arg00);\nvar v0 = {'\"p\"':1,'\"y\"':1,'\"t\"':1,'\"h\"':1,'\"o\"':1,'\"n\"':1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = charFrequency(arg10);\nvar v1 = {'\"p\"':1,'\"r\"':2,'\"o\"':1,'\"g\"':1,'\"a\"':1,'\"m\"':1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = charFrequency(arg20);\nvar v2 = {'\"l\"':1,'\"a\"':2,'\"n\"':1,'\"g\"':2,'\"u\"':1,'\"e\"':1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let charMap = {};\n  let max = 0;\n  let maxChar = '';\n  let count = 0;\n  for (let char of str1) {\n    if (charMap[char]) {\n      charMap[char]++;\n    } else {\n      charMap[char] = 1;\n    }\n  }\n  for (let char in charMap) {\n    if (charMap[char] > max) {\n      max = charMap[char];\n      maxChar = char;\n    }\n    count = count + charMap[char];\n  }\n  return count;\n}\n```\n\n</div>\n</div>\n</div>\n\n<div id=\"sort\" class=\"section level2\">\n<h2><span class=\"header-section-number\">2.2</span> Sort</h2>\n<p>In Python, we can use the built-in ", "\n  let charMap = {};\n  let freq = {};\n\n  for (let char of str1) {\n    if (charMap[char]) {\n      charMap[char]++;\n    } else {\n      charMap[char] = 1;\n    }\n  }\n\n  for (let char in charMap) {\n    if (!(char in freq)) {\n      freq[char] = 0;\n    }\n    freq[char] += charMap[char];\n  }\n\n  return freq;\n}\n", "\n  let charMap = {};\n  let charFrequency = {};\n\n  for (let char of str1) {\n      if (charMap[char]) {\n        charMap[char]++;\n      } else {\n        charMap[char] = 1;\n      }\n  }\n\n  for (let char in charMap) {\n      let count = charMap[char];\n      charFrequency[char] = count;\n  }\n  return charFrequency;\n}\n\n", "\n  let charMap = {};\n  let charCount = {};\n\n  for (let char of str1) {\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n    if (charMap[char]) {\n      charMap[char]++;\n    } else {\n      charMap[char] = 1;\n    }\n  }\n\n  return charMap;\n}\n", "\n  let charMap = {};\n  let charFrequency = {};\n  let frequencyCount = 0;\n\n  for (let char of str1) {\n    if (charMap[char]) {\n      charMap[char]++;\n    } else {\n      charMap[char] = 1;\n    }\n  }\n\n  for (let char in charMap) {\n    charFrequency[char] = charMap[char] / str1.length;\n  }\n\n  return charFrequency;\n}\n"]}
{"task_id": "MBJSP/333", "prompt": "function checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction extract(lst) {\n/**\n * * Write a JavaScript function to get the last element of each sublist.\n */\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][lst[i].length - 1]);\n    }\n    return result;\n}\nfunction sort(subli) {\n/**\n * * Write a JavaScript function to sort a list according to the second element in sublist.\n */", "entry_point": "sort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"a\", 10], [\"b\", 5], [\"c\", 20], [\"d\", 15]];\nvar x0 = sort(arg00);\nvar v0 = [[\"b\", 5], [\"a\", 10], [\"d\", 15], [\"c\", 20]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"452\", 10], [\"256\", 5], [\"100\", 20], [\"135\", 15]];\nvar x1 = sort(arg10);\nvar v1 = [[\"256\", 5], [\"452\", 10], [\"135\", 15], [\"100\", 20]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"rishi\", 10], [\"akhil\", 5], [\"ramya\", 20], [\"gaur\", 15]];\nvar x2 = sort(arg20);\nvar v2 = [[\"akhil\", 5], [\"rishi\", 10], [\"gaur\", 15], [\"ramya\", 20]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return subli.sort((a, b) => a[1] - b[1]);\n}\n", "\n    return subli.sort((a, b) => a[1] - b[1]);\n}\n", "\n  let result = [];\n  for (let i = 0; i < subli.length; i++) {\n    result.push(subli[i][1]);\n  }\n  return result.sort((a, b) => a - b);\n}\n", "\n    return subli.sort((a, b) => a[1] - b[1]);\n}\n", "\n  return subli.sort((a, b) => a[1] - b[1]);\n}\n"]}
{"task_id": "MBJSP/334", "prompt": "function checkEmail(email) {\n/**\n * * Write a function to check if the string is a valid email address or not using regex.\n */\n  const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regex.test(String(email).toLowerCase()) ? \"Valid Email\" : \"Invalid Email\";\n}\nfunction checkIp(ip) {\n/**\n * * Write a function to check whether the given ip address is valid or not using regex.\n */\n  const regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n  return regex.test(ip) ? \"Valid IP address\" : \"Invalid IP address\";\n}\nfunction validityTriangle(a, b, c) {\n/**\n * * Write a function to check if the triangle is valid or not.\n */\n    let sum = a + b + c;\n    return sum === 180;\n}\nfunction checkValidity(a, b, c) {\n/**\n * * Write a JavaScript function to check whether the triangle is valid or not if sides are given.\n */", "entry_point": "checkValidity", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = checkValidity(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 3;\nvar arg12 = 5;\nvar x1 = checkValidity(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = 10;\nvar arg22 = 5;\nvar x2 = checkValidity(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return validityTriangle(a, b, c);\n}\n", "\n    return a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a && validityTriangle(a, b, c)? \"Valid Triangle\" : \"Invalid Triangle\";\n}\n", "\n  const triangle = validityTriangle(a, b, c);\n  return triangle? \"Valid Triangle\" : \"Invalid Triangle\";\n}\n", "\n    return validityTriangle(a, b, c)? \"Valid Triangle\" : \"Invalid Triangle\";\n}\n", "\n  if (a > 0 && b > 0 && c > 0) {\n    return validityTriangle(a, b, c)? \"Valid Triangle\" : \"Invalid Triangle\";\n  }\n  return \"Invalid Triangle\";\n}\n\n"]}
{"task_id": "MBJSP/335", "prompt": "function difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction sumOfSquare(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of binomial co-efficients.\n */\n  function factorial(start, end) {\n    var res = 1\n    for (var i = start; i <= end; i++) {\n      res *= i\n    }\n    return res\n  }\n\n  return (factorial(n + 1, 2 * n) / factorial(1, n))\n}\nfunction Sum(arr) {\n/**\n * * Write a JavaScript function to find the sum of an array.\n */\n    return arr.reduce((acc, cur) => acc + cur, 0);\n}\nfunction apSum(a, n, d) {\n/**\n * * Write a function to find the sum of arithmetic progression.\n */", "entry_point": "apSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = apSum(arg00, arg01, arg02);\nvar v0 = 25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = apSum(arg10, arg11, arg12);\nvar v1 = 72;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar arg22 = 5;\nvar x2 = apSum(arg20, arg21, arg22);\nvar v2 = 34;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const a = a || 0;\n    return a + (n - 1) * d;\n}\n", "\n  return (a + n * d)\n}\n", "\n    return (a + n * d)\n}\n", "\n    return (a * (n + 1) - d * n) / (1 - d);\n}\n", "\n    return ((a + d) * (n - 1)) / 2\n}\n"]}
{"task_id": "MBJSP/336", "prompt": "function checkMonthnumberNumber(monthnum3) {\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\n  if (monthnum3 >= 1 && monthnum3 <= 12) {\n    if (monthnum3 === 2) {\n      if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n        return true;\n      }\n    } else if (monthnum3 === 4 || monthnum3 === 6 || monthnum3 === 9 || monthnum3 === 11) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction checkMonthnumb(monthname2) {\n/**\n * * Write a function to check whether the given month name contains 31 days or not.\n */\n    if (monthname2 === \"January\" || monthname2 === \"March\" || monthname2 === \"May\" || monthname2 === \"July\" || monthname2 === \"August\" || monthname2 === \"October\" || monthname2 === \"December\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction checkMonthnumNumber(monthnum1) {\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\n    return monthnum1 % 2 === 0 ? true : false;\n}\nfunction checkMonthnum(monthname1) {\n/**\n * * Write a function to check whether the given month name contains 28 days or not.\n */", "entry_point": "checkMonthnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"February\";\nvar x0 = checkMonthnum(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"January\";\nvar x1 = checkMonthnum(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"March\";\nvar x2 = checkMonthnum(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return monthname1 === \"February\"? true : false;\n}\n", "\n    if (monthname1 === \"January\" || monthname1 === \"March\" || monthname1 === \"May\" || monthname1 === \"July\" || monthname1 === \"August\" || monthname1 === \"October\" || monthname1 === \"December\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n", "\n    if (monthname1 === \"January\" || monthname1 === \"March\" || monthname1 === \"May\" || monthname1 === \"July\" || monthname1 === \"August\" || monthname1 === \"October\" || monthname1 === \"December\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n", "\n    if (monthname1 === \"January\" || monthname1 === \"March\" || monthname1 === \"May\" || monthname1 === \"July\" || monthname1 === \"August\" || monthname1 === \"October\" || monthname1 === \"December\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n", "\n    if (monthname1 === \"February\" || monthname1 === \"April\" || monthname1 === \"June\" || monthname1 === \"September\" || monthname1 === \"November\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n"]}
{"task_id": "MBJSP/337", "prompt": "function textMatchThree(text) {\n/**\n * * Write a function that matches a string that has an a followed by three 'b'.\n */\n  if (text.match(/a\\w*b\\w*b\\w*/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\nfunction endNum(string) {\n/**\n * * Write a function to check for a number at the end of a string.\n */\n  return /\\d$/.test(string);\n}\nfunction textMatchWordzMiddle(text) {\n/**\n * * Write a function that matches a word containing 'z', not at the start or end of the word.\n */\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\nfunction textMatchWord(text) {\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */", "entry_point": "textMatchWord", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python.\";\nvar x0 = textMatchWord(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python.\";\nvar x1 = textMatchWord(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang  .\";\nvar x2 = textMatchWord(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var regex = /[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02b8\\u0300-\\u0590\\u0800-\\u1fff\\u2000-\\u2bef\\u3000-\\u4dbf\\u4e00-\\u9fff]|\\w+$/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /\\w*\\s*(\\w*)/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /[a-z]\\w*$/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /[\\w']+$/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /[^!|:@*\\(\\)]+$/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n"]}
{"task_id": "MBJSP/338", "prompt": "function toggleFAndLBits(n) {\n/**\n * * Write a JavaScript function to toggle only first and last bits of a given number.\n */\n    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1;\n}\nfunction swapList(newlist) {\n/**\n * * Write a JavaScript function to interchange the first and last elements in a list.\n */\n    let first = newlist[0];\n    let last = newlist[newlist.length - 1];\n    newlist[0] = last;\n    newlist[newlist.length - 1] = first;\n    return newlist;\n}\nfunction toggleMiddleBits(n) {\n/**\n * * Write a JavaScript function to toggle bits of the number except the first and the last bit.\n */\n  var set_middle_bits = function(n){\n      n |= n >> 1; \n      n |= n >> 2; \n      n |= n >> 4; \n      n |= n >> 8; \n      n |= n >> 16;  \n      return (n >> 1) ^ 1\n  }\n  return n ^ set_middle_bits(n) \n}\nfunction countSubstringWithEqualEnds(s) {\n/**\n * * Write a JavaScript function to count the number of substrings with same first and last characters.\n */", "entry_point": "countSubstringWithEqualEnds", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar x0 = countSubstringWithEqualEnds(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcab\";\nvar x1 = countSubstringWithEqualEnds(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abc\";\nvar x2 = countSubstringWithEqualEnds(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let h = s.length;\n    let substrings = ", "\n    let result = 0;\n    for(var i=0; i<s.length-1; i++) {\n        for(var j=i+1; j<s.length; j++) {\n            if(s.charAt(i)==s.charAt(j)) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n", "\n  return s.split('').length - s.replace(/[0-9]/g,\"\").split('').length\n}\n", "\n    let substringcount = ", "\n    let arr = s.split('e');\n    let count = 0;\n    for (let i = 0; i < arr.length - 1; i++) {\n        let left = arr[i];\n        let right = arr[i+1];\n        if (left == right) {\n            count++;\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/339", "prompt": "function last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction smallestDivisor(n) {\n/**\n * * Write a JavaScript function to find the smallest prime divisor of a number.\n */\n    let i = 2;\n    while (i <= n / i) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nfunction findDivisor(x, y) {\n/**\n * * Write a JavaScript function to find the maximum occuring divisor in an interval.\n */", "entry_point": "findDivisor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 2;\nvar x0 = findDivisor(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 5;\nvar x1 = findDivisor(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 10;\nvar x2 = findDivisor(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let min = x;\n    let max = y;\n    if (max < min) {\n        swap(x, y);\n    }\n\n    let i = min;\n    while (i <= max) {\n        let j = i;\n        while (j <= max) {\n            if (j * i === x) {\n                return i;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return -1;\n}\n", "\n    let arr = [];\n    let i = 2;\n    while (i < y) {\n        if (y % i === 0) {\n            arr.push(i);\n        }\n        i++;\n    }\n    return arr.length;\n}\n", "\n    let i = 2;\n    while (i <= y / x) {\n        if (y % x === 0) {\n            return x;\n        }\n        x++;\n    }\n    return y;\n}\n", "\n    let min = Math.max(x, y);\n    let max = Math.min(x, y);\n    let div = 1;\n    let divi = 0;\n    let i = 2;\n    while (i <= max / div) {\n        while (divi < div) {\n            if (div * i <= max) {\n                if (min % div * i === 0 && div * i!== div) {\n                    divi++;\n                }\n            }\n            divi = 0;\n        }\n        div = divi + 1;\n    }\n    return div;\n}\n", "\n    let div = x;\n    while (div <= y) {\n        const tmp = y;\n        while (tmp > 1) {\n            if (div % tmp === 0) {\n                div = div / tmp;\n            } else {\n                break;\n            }\n            tmp--;\n        }\n        if (div === 1) {\n            return 1;\n        }\n    }\n    return div;\n}\n"]}
{"task_id": "MBJSP/340", "prompt": "function maxOfThree(num1, num2, num3) {\n/**\n * * Write a function to find maximum of three numbers.\n */\n  return Math.max(num1, num2, num3);\n}\nfunction testThreeEqual(x, y, z) {\n/**\n * * Write a JavaScript function to count the number of equal numbers from three given integers.\n */\n  return (x === y) ? (x === z) ? 3 : 0 : (x === z) ? (y === z) ? 3 : 1 : (y === z) ? 2 : 0;\n}\nfunction sumPositivenum(nums) {\n/**\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n */\n  return nums.filter(num => num > 0).reduce((acc, cur) => acc + cur, 0);\n}\nfunction sumThreeSmallestNums(lst) {\n/**\n * * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */", "entry_point": "sumThreeSmallestNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 30, 40, 50, 60, 7];\nvar x0 = sumThreeSmallestNums(arg00);\nvar v0 = 37;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = sumThreeSmallestNums(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 4, 5];\nvar x2 = sumThreeSmallestNums(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return sumPositivenum(lst.slice(0, 3));\n}\n", "\n  let nums = lst.filter(num => num > 0);\n  if (nums.length > 2) {\n    nums.sort((a, b) => a - b);\n    nums = nums.slice(0, 3);\n  }\n  return nums.reduce((acc, cur) => acc + cur, 0);\n}\n", "\n  return (lst[0] < lst[1] && lst[1] < lst[2])? (lst[0] + lst[1] + lst[2]) : 0;\n}\n", "\n  let nums = lst.slice(0, 3);\n  return Math.min(sumPositivenum(nums), Math.min(sumPositivenum(nums.slice(0, 1)), sumPositivenum(nums.slice(0, 2))));\n}\n", "\n  return sumPositivenum(lst.sort((a, b) => b - a)[1]) + sumPositivenum(lst.sort((a, b) => a - b)[1]) + sumPositivenum(lst.sort((a, b) => a - b)[2]);\n}\n"]}
{"task_id": "MBJSP/342", "prompt": "function minJumps(arr, n) {\n/**\n * * ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n */\n  let jumps = 0;\n  let maxReach = arr[0];\n  let i = 0;\n\n  while (i < n) {\n    if (maxReach >= n - 1) {\n      return jumps;\n    }\n    if (arr[i] === 0) {\n      maxReach = Math.max(maxReach, i + arr[i]);\n      i++;\n    } else {\n      maxReach = Math.max(maxReach, i + arr[i]);\n      i += arr[i];\n      jumps++;\n    }\n  }\n  return jumps;\n}\nfunction freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction findKth(arr1, arr2, m, n, k) {\n/**\n * * Write a function to find kth element from the given two sorted arrays.\n */\n\tvar sorted1 = [];\n\tvar i = 0;\n\tvar j = 0;\n\tvar d = 0;\n\twhile (i < m && j < n) {\n\t\tif (arr1[i] < arr2[j]) {\n\t\t\tsorted1[d] = arr1[i];\n\t\t\ti++;\n\t\t} else {\n\t\t\tsorted1[d] = arr2[j];\n\t\t\tj++;\n\t\t}\n\t\td++;\n\t}\n\n\twhile (i < m) {\n\t\tsorted1[d] = arr1[i];\n\t\ti++;\n\t\td++;\n\t}\n\n\twhile (j < n) {\n\t\tsorted1[d] = arr2[j];\n\t\tj++;\n\t\td++;\n\t}\n\n\treturn sorted1[k - 1];\n}\nfunction findMinimumRange(list) {\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */", "entry_point": "findMinimumRange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]];\nvar x0 = findMinimumRange(arg00);\nvar v0 = [4, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]];\nvar x1 = findMinimumRange(arg10);\nvar v1 = [4, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]];\nvar x2 = findMinimumRange(arg20);\nvar v2 = [5, 7];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  let minStart = Number.MAX_VALUE;\n  let minEnd = Number.MAX_VALUE;\n  let maxStart = Number.MIN_VALUE;\n  let maxEnd = Number.MIN_VALUE;\n  let len = list.length;\n  let i = 0;\n  let j = 0;\n  let list1 = [];\n  let list2 = [];\n\n  for (i; i < len; i++) {\n    list1[list[i]] = 1;\n  }\n\n  for (i; i < len; i++) {\n    list2[list[i]] = 1;\n  }\n  while (i < len && j < len) {\n    if (list1[list[j]]) {\n      list1[list[j]] = 0;\n    }\n    if (list2[list[i]]) {\n      list2[list[i]] = 0;\n    }\n    if (list1[list[j]]) {\n      if (list[j] < minEnd) {\n        minStart = list[j];\n        minEnd = list[j];\n      }\n      if (list[j] > maxStart) {\n        maxStart = list[j];\n        maxEnd = list[j];\n      }\n      if (list2[list[j]]) {\n        j++;\n      } else {\n        j++;\n      }\n    } else {\n      if (list[i] < minEnd) {\n        minStart = list[i];\n        minEnd = list[i];\n      }\n      if (list[i] > maxStart) {\n        maxStart = list[i];\n        maxEnd = list[i];\n      }\n", "\n  if (list.length === 0) {\n    return [];\n  }\n\n  var index = 0;\n  for (index; index < list.length - 1; index++) {\n    if (list[index + 1] < list[index]) {\n      break;\n    }\n  }\n\n  var smallestRange = [];\n  for (let i = 0; i <= index; i++) {\n    var j = i;\n    for (let k = i + 1; k < list.length; k++) {\n      if (list[k] < list[j]) {\n        j = k;\n      }\n    }\n    if (j - i + 1 < smallestRange.length) {\n      smallestRange = [list[i], list[j]];\n    }\n  }\n\n  return smallestRange;\n}\n", "\n  let minRange = {};\n  for (let i = 0; i < list.length; i++) {\n    let elem = list[i];\n    if (minRange[elem]) {\n      minRange[elem].push(i);\n    } else {\n      minRange[elem] = [i];\n    }\n  }\n\n  let finalRange = {};\n  for (let i = 0; i < minRange.length; i++) {\n    if (minRange[i] && minRange[i].length > 1) {\n      let min = minRange[i][0];\n      let max = minRange[i][minRange[i].length - 1];\n      let arr = [];\n      for (let j = min; j <= max; j++) {\n        arr.push(list[j]);\n      }\n\n      if (finalRange[min] && finalRange[min]!== arr) {\n        finalRange[min].push(max);\n      } else {\n        finalRange[min] = arr;\n      }\n    }\n  }\n\n  let ans = [];\n  for (let i = 0; i < finalRange.length; i++) {\n    if (finalRange[i]) {\n      let min = finalRange[i][0];\n      let max = finalRange[i][finalRange[i].length - 1];\n      ans.push(arr[min - 1] + '->' + arr[max]);\n    }\n  }\n\n  return ans;\n}\n", "\n  var minrange = [];\n  for (let i = 0; i < list.length; i++) {\n    var minr = {};\n    for (let j = 0; j < list.length; j++) {\n      var range = findMinimumRange(list[j]);\n      if (range[0] > minr[0] || minr[0] === 0) {\n        minr = range;\n      }\n    }\n    minrange[i] = minr;\n  }\n\n  return minrange;\n}\n", "\n  let min = Math.max(list[0], list[1]);\n  let max = Math.min(list[list.length - 2], list[list.length - 1]);\n  var minrange = [0, 0];\n  var i = 0;\n  var j = 0;\n  var d = 0;\n  while (i < list.length && j < list.length) {\n    if (list[i] < list[j]) {\n      min = Math.min(min, list[i]);\n      max = Math.max(max, list[i]);\n      i++;\n    } else {\n      min = Math.min(min, list[j]);\n      max = Math.max(max, list[j]);\n      j++;\n    }\n    minrange[0] = min;\n    minrange[1] = max;\n    return minrange;\n  }\n}\n"]}
{"task_id": "MBJSP/343", "prompt": "function lowerCtr(str) {\n/**\n * * Write a JavaScript function to count lower case letters in a given string.\n */\n    return str.split('').filter(x => x.toLowerCase() === x).length;\n}\nfunction countDigits(num1, num2) {\n/**\n * * Write a function to add two numbers and print number of digits of sum.\n */\n  var sum = num1 + num2;\n  var len = sum.toString().length;\n  return len;\n}\nfunction capitalizeFirstLastLetters(str1) {\n/**\n * * Write a JavaScript function to capitalize first and last letters of each word of a given string.\n */\n    return str1.split(\" \").map(function(word) {\n        return word[0].toUpperCase() + word.slice(1, word.length - 1).toLowerCase() + word[word.length - 1].toUpperCase();\n    }).join(\" \");\n}\nfunction digLet(s) {\n/**\n * * Write a function to calculate the number of digits and letters in a string.\n */", "entry_point": "digLet", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = digLet(arg00);\nvar v0 = [6, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = digLet(arg10);\nvar v1 = [7, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python3.0\";\nvar x2 = digLet(arg20);\nvar v2 = [6, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  var d = 0;\n  var l = 0;\n  for(var i=0; i<s.length; i++) {\n    if (s.charAt(i).toString().match(/[A-Z]/)) {\n      l++;\n    } else {\n      d++;\n    }\n  }\n  return [d,l];\n}\n", "\n    var str1 = s.toString();\n    var str2 = str1.split('').map(", "\n  var str1 = s.split('');\n  var len = str1.length;\n  var len1 = len;\n  var len2 = 0;\n  for(var i = 0; i < len; i++) {\n    if(str1[i].charCodeAt() >= 97 && str1[i].charCodeAt() <= 122) {\n      len2++;\n    }\n  }\n  var len3 = len;\n  var len4 = 0;\n  for(var i = 0; i < len; i++) {\n    if(str1[i].charCodeAt() >= 65 && str1[i].charCodeAt() <= 90) {\n      len4++;\n    }\n  }\n  return [len1, len2, len3, len4];\n}\n", "\n    return s.toString().split('').map(x => x.toString().length).reduce((a, b) => a + b);\n}\n", "\n    var len = s.toString().length;\n    var lenLet = s.toString().split('').length;\n    return {\n        len: len,\n        lenLet: lenLet\n    };\n}\n"]}
{"task_id": "MBJSP/344", "prompt": "function firstOdd(nums) {\n/**\n * * Write a JavaScript function to find the first odd number in a given list of numbers.\n */\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 !== 0) {\n            return nums[i];\n        }\n    }\n}\nfunction countRangeInList(li, min, max) {\n/**\n * * Write a function to count the number of elements in a list which are within a specific range.\n */\n  let count = 0;\n  for (let i = 0; i < li.length; i++) {\n    if (li[i] >= min && li[i] <= max) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction sumOfOddFactors(n) {\n/**\n * * Write a JavaScript function to find sum of odd factors of a number.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 !== 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\nfunction countOddSquares(n, m) {\n/**\n * * Write a JavaScript function to find number of elements with odd factors in a given range.\n */", "entry_point": "countOddSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 100;\nvar x0 = countOddSquares(arg00, arg01);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 8;\nvar arg11 = 65;\nvar x1 = countOddSquares(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 5;\nvar x2 = countOddSquares(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    let num = i * i;\n    if (num % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i % 2!== 0) {\n        count++;\n    }\n  }\n  return count;\n}\n", "\n    let count = 0;\n    for (let i = n; i >= m; i--) {\n        if (i % 2!== 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n  let count = 0;\n  for (let i = m; i <= n; i++) {\n    if (i % 2!== 0) {\n        count++;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    if (i % 2!== 0) {\n      if (i ** 2 > m) {\n        break;\n      }\n      count++;\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/345", "prompt": "function mulConsecutiveNums(nums) {\n/**\n * * Write a function to multiply consecutive numbers of a given list.\n */\n  let result = [];\n\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i - 1] * nums[i]);\n  }\n\n  return result;\n}\nfunction diff(li1, li2) {\n/**\n * * Write a JavaScript function to get the difference between two lists.\n */\n  return li1.filter(function (item) {\n    return li2.indexOf(item) === -1;\n  });\n}\nfunction findMinDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return minDiff;\n}\nfunction diffConsecutivenums(nums) {\n/**\n * * Write a function to find the difference between two consecutive numbers in a given list.\n */", "entry_point": "diffConsecutivenums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nvar x0 = diffConsecutivenums(arg00);\nvar v0 = [0, 2, 1, 0, 1, 1, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 8, 9, 6, 10];\nvar x1 = diffConsecutivenums(arg10);\nvar v1 = [1, 3, 1, -3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7];\nvar x2 = diffConsecutivenums(arg20);\nvar v2 = [1, 1, 1, 1, 0, 0, 0, 1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  let i = 0;\n\n  while (i < nums.length) {\n    result.push(nums[i] - nums[i + 1]);\n    i++;\n  }\n\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i] - nums[i - 1]);\n  }\n  return result;\n}\n", "\n  let result = [];\n\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i] - nums[i - 1]);\n  }\n\n  return result;\n}\n", "\n  let diffs = [];\n  for (let i = 1; i < nums.length; i++) {\n    diffs.push(Math.abs(nums[i] - nums[i - 1]));\n  }\n  return diffs;\n}\n", "\n  let result = [];\n\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i] - nums[i - 1]);\n  }\n\n  return result;\n}\n"]}
{"task_id": "MBJSP/346", "prompt": "function checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to find number of solutions in quadratic equation.\n */\n    let discriminant = b ** 2 - 4 * a * c;\n    if (discriminant < 0) {\n        return \"No solutions\";\n    } else if (discriminant === 0) {\n        return \"1 solution\";\n    } else {\n        return `${Math.floor(Math.sqrt(discriminant) / 2) + 1} solutions`;\n    }\n}\nfunction secondSmallest(numbers) {\n/**\n * * Write a function to find the second smallest number in a list.\n */\n  const uniqueNums = new Set(numbers);\n  const sortedArr = Array.from(uniqueNums).sort((a, b) => a - b);\n  return sortedArr.length > 1 ? sortedArr[1] : null;\n}\nfunction getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction zigzag(n, k) {\n/**\n * * Write a function to find entringer number e(n, k).\n */", "entry_point": "zigzag", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = zigzag(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar x1 = zigzag(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 1;\nvar x2 = zigzag(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        count = 0;\n        for (let j = i; j < n; j++) {\n            count++;\n            if (count == k) {\n                result = i + 1;\n                break;\n            }\n        }\n    }\n    return result;\n}\n", "\n    let arr = [];\n    let arrsize = 0;\n    while (n--) {\n        arr.push(arrsize++);\n    }\n    let result = 0;\n    let start = 0;\n    let end = arrsize - 1;\n    while (k--) {\n        if (start < end) {\n            start++;\n        } else {\n            end--;\n        }\n        result = arr[start] + arr[end];\n    }\n    return result;\n}\n", "\n    let result = 0;\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr[i] = i;\n    }\n    let sum = 0;\n    let count = 0;\n    let flag = false;\n    let current = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] % 2!== 0) {\n            flag = true;\n            continue;\n        }\n        if (flag) {\n            sum += arr[i];\n            flag = false;\n        } else {\n            sum += arr[i] + 1;\n        }\n        current = sum;\n        arr[i] = arr[i] + 1;\n        if (sum < k || current > k) {\n            arr[i] = arr[i] - 1;\n            sum = sum - arr[i] + 1;\n            sum = sum + 2;\n        }\n        count++;\n    }\n    result = count;\n    return result;\n}\n", "\n    let result = 0;\n    let e = 0;\n    while (e < n) {\n        if (e % k === 0) {\n            e += k;\n        } else {\n            e += 2;\n        }\n        result += e;\n    }\n    return result;\n}\n", "\n    let start = 1;\n    let end = n;\n    let count = 0;\n    let result = 0;\n    while (start <= end) {\n        for (let i = start; i < end; i++) {\n            if (count % k === 0) {\n                result = i;\n            }\n            count++;\n        }\n        start++;\n        end--;\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/347", "prompt": "function findDigits(n) {\n/**\n * * Write a JavaScript function to count the number of digits in factorial of a given number.\n */\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return n.toString().length + factorial.toString().split('').length - 1;\n}\nfunction checkVow(string, vowels) {\n/**\n * * Write a JavaScript function to count number of vowels in the string.\n */\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.includes(string[i])) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction countList(inputlist) {\n/**\n * * Write a JavaScript function to count the number of lists in a given number of lists.\n */\n    let count = 0;\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction countSquares(m, n) {\n/**\n * * Write a JavaScript function to count the number of squares in a rectangle.\n */", "entry_point": "countSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = countSquares(arg00, arg01);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar x1 = countSquares(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 2;\nvar x2 = countSquares(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = m - 1; i < n; i++) {\n        for (let j = m - 1; j < n; j++) {\n            if (i * i + j * j == m * n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = m - 1; i >= 0; i--) {\n        for (let j = n - 1; j >= 0; j--) {\n            if ((i * i) + (j * j) == (m * n)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n", "\n    let count = 0;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            count += (i * i + j * j);\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i * i + j * j === m * n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = m - 1; i <= m + 1; i++) {\n        for (let j = n - 1; j <= n + 1; j++) {\n            if (i * i + j * j == m * n) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/348", "prompt": "function maxSubArraySum(a, size) {\n/**\n * * Write a function to find length of the subarray having maximum sum.\n */\n    let maxSum = 0;\n    let currentSum = 0;\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < a.length; i++) {\n        currentSum += a[i];\n        if (currentSum < 0) {\n            currentSum = 0;\n            start = i + 1;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            end = i;\n        }\n    }\n    return end - start + 1;\n}\nfunction triangleArea(r) {\n/**\n * * Write a JavaScript function to find the largest triangle that can be inscribed in the semicircle.\n */\n    if(r === 0) return 0;\n    else if(r === -1) return -1;\n    else if(r === 2) return 4;\n    else {\n        return (2*r*r)/(1.0*Math.sin(Math.PI/3));\n    }\n}\nfunction sumSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented by sum of two squares or not.\n */\n    let square = Math.sqrt(n);\n    return square * square === n;\n}\nfunction findWays(m) {\n/**\n * * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n */", "entry_point": "findWays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = findWays(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = findWays(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar x2 = findWays(arg20);\nvar v2 = 14;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const prefixSums = new Array(m);\n    for (let i = 0; i < m; i++) {\n        prefixSums[i] = i + 1;\n    }\n    let ways = 0;\n    for (let i = 0; i < m; i++) {\n        const prefixSum = prefixSums[i];\n        if (prefixSum > m) break;\n        if (prefixSum === m) ways++;\n        for (let j = i + 1; j < m; j++) {\n            const newPrefixSum = prefixSum + prefixSums[j];\n            if (newPrefixSum > m) break;\n            if (newPrefixSum === m) ways++;\n            prefixSums[j] = newPrefixSum;\n        }\n    }\n    return ways;\n}\n", "\n    let max = m;\n    let currentSum = 0;\n    let currentDict = new Map();\n    for (let i = 0; i < max; i++) {\n        currentSum += i;\n        currentDict.set(currentSum, i);\n    }\n    let count = 0;\n    ", "\n    let count = 0;\n    let prefixSum = 0;\n    let prefixSumSquared = 0;\n    let prefixSumSquared2 = 0;\n    for (let i = 0; i < m; i++) {\n        prefixSum += i;\n        prefixSumSquared += i*i;\n        prefixSumSquared2 += i*i;\n    }\n    if (prefixSumSquared2 === prefixSum*prefixSum) count++;\n    if (prefixSumSquared === prefixSum*prefixSum) count++;\n    if (prefixSum === prefixSumSquared) count++;\n    return count;\n}\n", "\n    let prefixSum = 0;\n    let values = {};\n    let currentSequence = 0;\n    let currentIndex = 0;\n    let currentLength = 0;\n    let totalCount = 0;\n    let start = 0;\n    let end = 0;\n    let maxLength = 0;\n    for(let i = 0; i < m; i++) {\n        prefixSum += values[i];\n        if(prefixSum < 0) {\n            prefixSum = 0;\n            currentSequence += 1;\n        }\n        if(currentSequence > maxLength) {\n            maxLength = currentSequence;\n            start = currentIndex;\n            end = currentIndex + maxLength - 1;\n        }\n        if(values[i] > 0) {\n            values[i] -= 1;\n        }\n        else {\n            values[i] = prefixSum;\n        }\n    }\n    return totalCount;\n}\n", "\n    return m + 1;\n}\n"]}
{"task_id": "MBJSP/349", "prompt": "function checkStr(string) {\n/**\n * * Write a function to check whether the given string is starting with a vowel or not using regex.\n */\n    const regex = /^[aeiou]/i;\n    return regex.test(string) ? \"Valid\" : \"Invalid\";\n}\nfunction seqLinear(seqnums) {\n/**\n * * Write a JavaScript function to check whether a given sequence is linear or not.\n */\n    let len = seqNums.length\n    for(let i = 0; i < len - 1; i++) {\n        if(seqNums[i] > seqNums[i + 1]) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}\nfunction isTwoAlter(s) {\n/**\n * * Write a JavaScript function to check whether the given string is made up of two alternating characters or not.\n */\n    return (s.match(/a/g) || []).length === 2 && (s.match(/b/g) || []).length === 2;\n}\nfunction check(string) {\n/**\n * * Write a JavaScript function to check whether the given string is a binary string or not.\n */", "entry_point": "check", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"01010101010\";\nvar x0 = check(arg00);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"name0\";\nvar x1 = check(arg10);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"101\";\nvar x2 = check(arg20);\nvar v2 = \"Yes\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return /^[01]*$/.test(string)? \"Valid Binary String\" : \"Invalid Binary String\";\n}\n", "\n    return /^(?:0|1)$/i.test(string);\n}\n", "\n    return string.search(/^[01]{8}$/) > -1;\n}\n", "\n    const pattern = /^[01]*$/;\n    return pattern.test(string)? \"Valid\" : \"Invalid\";\n}\n", "\n    return string.match(/\\b[01]+\\b/)? \"Valid Binary String\" : \"Invalid Binary String\"\n}\n"]}
{"task_id": "MBJSP/350", "prompt": "function uniqueElement(arr, n) {\n/**\n * * Write a JavaScript function to check whether an array contains only one distinct element or not.\n */\n    let set = new Set(arr);\n    if (set.size === 1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\nfunction differAtOneBitPos(a, b) {\n/**\n * * Write a JavaScript function to check whether the two numbers differ at one bit position only or not.\n */\n  // convert to binary\n  var binA = a.toString(2);\n  var binB = b.toString(2);\n\n  // check if differ at one bit position\n  var diff = 0;\n  for (var i = 0; i < binA.length; i++) {\n    diff += binA[i] != binB[i] ? 1 : 0;\n  }\n  return diff == 1;\n}\nfunction sampleNam(samplenames) {\n/**\n * * Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n */\n  let sum = 0;\n  for (let i = 0; i < sampleNames.length; i++) {\n    if (sampleNames[i].charAt(0) !== sampleNames[i].charAt(0).toLowerCase()) {\n      sum += sampleNames[i].length;\n    }\n  }\n  return sum;\n}\nfunction minimumLength(s) {\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */", "entry_point": "minimumLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"mnm\";\nvar x0 = minimumLength(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar x1 = minimumLength(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcb\";\nvar x2 = minimumLength(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let minLength = 0;\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      if (s[i] === s[j] && s[i].length > minLength) {\n        minLength = s[i].length;\n      }\n    }\n  }\n  return minLength;\n}\n", "\n  // convert string to char array\n  let s1 = s.split(\"\").map(e => e.charAt(0)).join(\"\");\n\n  let set = new Set(s1);\n  if (set.size === 1) {\n    return s1.length;\n  } else {\n    return s.length;\n  }\n}\n", "\n  return s.split(\"\").map(a => a.charAt(0)).join(\"\").length;\n}\n", "\n  let min = s.length;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      min--;\n    }\n  }\n  return min;\n}\n\n", "\n  let dict = new Set(s.split(''));\n  if (dict.size === 1) {\n    return s;\n  } else {\n    return 'No Minimum Length';\n  }\n}\n"]}
{"task_id": "MBJSP/351", "prompt": "function last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction firstElement(arr, n, k) {\n/**\n * * Write a JavaScript function to find the first element occurring k times in a given array.\n */", "entry_point": "firstElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, 3, 4, 5];\nvar arg01 = 6;\nvar arg02 = 1;\nvar x0 = firstElement(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1, 3, 4];\nvar arg11 = 5;\nvar arg12 = 2;\nvar x1 = firstElement(arg10, arg11, arg12);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 3, 5, 7, 1, 2, 3, 5];\nvar arg21 = 10;\nvar arg22 = 2;\nvar x2 = firstElement(arg20, arg21, arg22);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let result = -1;\n    let i = 0;\n    while (i < n) {\n        if (arr[i] === k) {\n            result = i;\n            break;\n        }\n        i++;\n    }\n    return result;\n}\n", "\n    let result = -1;\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === k) {\n            count++;\n        }\n        if (count === n - 1) {\n            result = i + 1;\n        }\n    }\n    return result;\n}\n", "\n    let start = 0;\n    let end = n - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start <= end) {\n        if (arr[mid] === k) {\n            return mid;\n        }\n        if (arr[mid] < k) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return -1;\n}\n", "\n    let start = 0;\n    let end = n - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start <= end) {\n        if (arr[mid] === k) {\n            return mid;\n        }\n        if (arr[mid] > k) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return -1;\n}\n", "\n    let result = -1;\n    let i = 0;\n    let j = 0;\n    let length = 0;\n    while (i < n) {\n        if (arr[i] === k) {\n            j++;\n            i++;\n            length++;\n        } else if (arr[i] > k) {\n            length = 0;\n            j = 0;\n        } else {\n            i++;\n        }\n        if (j === k) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/352", "prompt": "function findCharLong(text) {\n/**\n * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n */\n  return text.match(/\\w{4,}/g) || [];\n}\nfunction allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are within a given range or not.\n */\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return true\n    } else {\n        return false\n    }\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction uniqueCharacters(str) {\n/**\n * * Write a JavaScript function to check whether all the characters in a given string are unique.\n */", "entry_point": "uniqueCharacters", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar x0 = uniqueCharacters(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = uniqueCharacters(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abab\";\nvar x2 = uniqueCharacters(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let uniques = 0;\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i + 1; j < str.length; j++) {\n            if (str[i] === str[j]) {\n                uniques = 0;\n                break;\n            } else {\n                uniques = 1;\n            }\n        }\n    }\n    return uniques === 1;\n}\n", "\n    let len = str.length;\n    let result = true;\n\n    for (let i = 0; i < len; i++) {\n        let count = 0;\n        for (let j = 0; j < len; j++) {\n            if (str[i] === str[j]) {\n                count++;\n            }\n        }\n        if (count === 1) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n", "\n    let chars = str.split('');\n    let set = new Set(chars);\n    return chars.length === set.size;\n}\n", "\n    let chars = str.split('');\n    let set = new Set(chars);\n    return chars.length === set.size;\n}\n", "\n    let chars = Object.keys(str);\n    return chars.length === str.length;\n}\n"]}
{"task_id": "MBJSP/353", "prompt": "function maxOfNth(testlist, n) {\n/**\n * * Write a function to find the maximum of nth column from the given tuple list.\n */\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    max = Math.max(max, testList[i][n]);\n  }\n  return max;\n}\nfunction removeNested(testtup) {\n/**\n * * Write a function to remove the nested record from the given tuple.\n */\n  let nested = false;\n  let nestedIdx = testTup.length - 1;\n\n  while (!nested && nestedIdx >= 0) {\n    if (Array.isArray(testTup[nestedIdx])) {\n      nested = true;\n    } else {\n      nestedIdx--;\n    }\n  }\n\n  if (nested) {\n    testTup.splice(nestedIdx, 1);\n  }\n\n  return testTup;\n}\nfunction extractColumn(list1, n) {\n/**\n * * Write a function to extract a specified column from a given nested list.\n */\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i][n]);\n  }\n  return result;\n}\nfunction removeColumn(list1, n) {\n/**\n * * Write a function to remove a specified column from a given nested list.\n */", "entry_point": "removeColumn", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nvar arg01 = 0;\nvar x0 = removeColumn(arg00, arg01);\nvar v0 = [[2, 3], [4, 5], [1, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nvar arg11 = 2;\nvar x1 = removeColumn(arg10, arg11);\nvar v1 = [[1, 2], [-2, 4], [1, -1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]];\nvar arg21 = 0;\nvar x2 = removeColumn(arg20, arg21);\nvar v2 = [[3], [7], [3], [15, 17], [7], [11]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let testTup = list1;\n  testTup = removeNested(testTup);\n\n  for (let i = 0; i < testTup.length; i++) {\n    testTup[i].splice(n, 1);\n  }\n\n  return testTup;\n}\n", "\n  let newList = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (Array.isArray(list1[i][n])) {\n      newList.push(list1[i][n]);\n    }\n  }\n  return newList;\n}\n\n", "\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i].splice(n, 1)[0]);\n  }\n  return result;\n}\n", "\n  for (let i = 0; i < list1.length; i++) {\n    list1[i].splice(n, 1);\n  }\n  return list1;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i].splice(n, 1)[0]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/354", "prompt": "function sectorArea(r, a) {\n/**\n * * Write a function to find area of a sector.\n */\n    var pi = 22 / 7;\n    if (a >= 360) {\n        return null;\n    }\n    return (pi * r ** 2) * (a / 360);\n}\nfunction sumOfProduct(n) {\n/**\n * * Write a JavaScript function to find sum of product of binomial co-efficients.\n */\n  function binomialCoeff(n, k) {\n    if (n < k) {\n      return 0;\n    }\n    return factorial(n) / factorial(k) / factorial(n - k);\n  }\n\n  function factorial(n) {\n    if (n < 2) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  }\n  return binomialCoeff(2 * n, n - 1);\n}\nfunction sumOfInverseDivisors(n, sum) {\n/**\n * * Write a JavaScript function to find sum of inverse of divisors.\n */\n  let result = sum * 1.0 / n;\n  return Math.round(result * 100) / 100;\n}\nfunction tnAp(a, n, d) {\n/**\n * * Write a function to find t-nth term of arithemetic progression.\n */", "entry_point": "tnAp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = tnAp(arg00, arg01, arg02);\nvar v0 = 9;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = tnAp(arg10, arg11, arg12);\nvar v1 = 22;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar arg22 = 5;\nvar x2 = tnAp(arg20, arg21, arg22);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let r = (n - d) / d;\n  return a * Math.pow(r, n);\n}\n", "\n  let result;\n  if (d == 1) {\n    result = a;\n  } else if (d > 1) {\n    result = a * Math.pow((1 - Math.pow(1 / d, n)), 1 / d);\n  } else {\n    result = -1 * a * Math.pow((1 - Math.pow(1 / (-d), n)), 1 / (-d));\n  }\n  return Math.round(result * 100) / 100;\n}\n", "\n  let result = n * 1.0 / (n - d);\n  return Math.round(result * 100) / 100;\n}\n", "\n    let t = 1,\n        x = 1;\n    while (n > 1) {\n        t = t * (a + x - 1) / x;\n        x++;\n        n--;\n    }\n    return t * d;\n}\n", "\n  return n * a + d;\n}\n\n// http://www.mathblog.dk/project-euler-22-solution/\nvar a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22];\nvar n = 7;\nvar d = 0;\nvar tn = 0;\nvar s = 0;\n\n// Sum of inverse of divisors\nfor (var i = 0; i < n; i++) {\n  d = i;\n  tn = tnAp(a, n, d);\n  s = s + sumOfInverseDivisors(n, tn);\n}\nconsole.log('Sum of inverse of divisors: ', s);\n\n\n// Sum of product of binomial co-efficients\nfor (var i = 0; i < n; i++) {\n  d = i;\n  tn = tnAp(a, n, d);\n  s = s + sumOfProduct(n);\n}\nconsole.log('Sum of product of binomial co-efficients: ', s);\n\n\n// Sum of t-nth term of arithemetic progression\nfor (var i = 0; i < n; i++) {\n  d = i;\n  tn = tnAp(a, n, d);\n  s = s + tn;\n}\nconsole.log('Sum of t-nth term of arithemetic progression: ', s);\n\n// (1 + n)\n// (1 + 2 + 3 + 4 + 5 + 6 + 7)\n"]}
{"task_id": "MBJSP/355", "prompt": "function findDigits(n) {\n/**\n * * Write a JavaScript function to count the number of digits in factorial of a given number.\n */\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return n.toString().length + factorial.toString().split('').length - 1;\n}\nfunction checkVow(string, vowels) {\n/**\n * * Write a JavaScript function to count number of vowels in the string.\n */\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (vowels.includes(string[i])) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction countList(inputlist) {\n/**\n * * Write a JavaScript function to count the number of lists in a given number of lists.\n */\n    let count = 0;\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction countRectangles(radius) {\n/**\n * * Write a JavaScript function to count the number of rectangles in a circle of radius r.\n */", "entry_point": "countRectangles", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countRectangles(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar x1 = countRectangles(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 0;\nvar x2 = countRectangles(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const r = radius * 2;\n    let count = 0;\n    for (let i = 0; i < Math.sqrt(r); i++) {\n        if (r % i === 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    let radiusSquared = radius * radius;\n    for (let i = 0; i < inputRect.length; i++) {\n        if (inputRect[i].length > 0) {\n            count += (inputRect[i].length * inputRect[i].length) / (radiusSquared);\n        }\n    }\n    return count;\n}\n", "\n    return Math.PI * Math.pow(radius, 2);\n}\n", "\n    let count = 0;\n    for (let i = 0; i < radius; i++) {\n        for (let j = 0; j < radius; j++) {\n            if (i * i + j * j <= radius * radius) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < Math.PI * 2; i++) {\n        if (Math.pow(radius, 2) * i >= 2) {\n            count++;\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/356", "prompt": "function recurGcd(a, b) {\n/**\n * * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n */\n  if (b === 0) return a;\n  return recurGcd(b, a % b);\n}\nfunction checkTypeOfTriangle(a, b, c) {\n/**\n * * Write a JavaScript function to find the type of triangle from the given sides.\n */\n    sqa = Math.pow(a, 2)\n    sqb = Math.pow(b, 2)\n    sqc = Math.pow(c, 2)\n    if (sqa == sqa + sqb || sqb == sqa + sqc || sqc == sqa + sqb) {\n        return \"Right-angled Triangle\"\n    } else if (sqa > sqc + sqb || sqb > sqa + sqc || sqc > sqa + sqb) {\n        return \"Obtuse-angled Triangle\"\n    } else {\n        return \"Acute-angled Triangle\"\n    }\n}\nfunction isTriangleexists(a, b, c) {\n/**\n * * Write a function to check if a triangle of positive area is possible with the given angles.\n */\n    let sum = a + b + c;\n    let max = Math.max(a, b, c);\n    let min = Math.min(a, b, c);\n    let diff = max - min;\n    if (diff < (sum - max)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction findAngle(a, b) {\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */", "entry_point": "findAngle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 47;\nvar arg01 = 89;\nvar x0 = findAngle(arg00, arg01);\nvar v0 = 44;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 45;\nvar arg11 = 95;\nvar x1 = findAngle(arg10, arg11);\nvar v1 = 40;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 50;\nvar arg21 = 40;\nvar x2 = findAngle(arg20, arg21);\nvar v2 = 90;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    if (a >= (b + c) || b >= (a + c) || c >= (a + b)) {\n        return \"ERROR: Triangle does not exist\"\n    } else {\n        let angleB = (180 - (a + b + c) / 2) * (180 / Math.PI)\n        let angleC = (180 - (a + b + c) / 2) * (180 / Math.PI)\n        let angle = angleB - angleC\n        return angle\n    }\n}\n", "\n    let diff = Math.abs(a - b);\n    let sum = Math.PI * Math.sqrt((diff * diff + diff * diff - 2 * diff * diff * Math.cos(a / 2)) / 4);\n    return sum;\n}\n", "\n    let angle = Math.atan((b * b - a * a - c * c) / (2 * a * c));\n    return angle;\n}\n", "\n    let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    return Math.atan2(b, a) / 2;\n}\n", "\n    let s = a + b;\n    let p = (a * b) / s;\n    let q = (b * b) / s;\n    let r = sqrt(p * p + q * q);\n    let cosA = p / r;\n    let tanA = q / r;\n    let tanB = r / p;\n    if (tanA > tanB) {\n        return (Math.acos(cosA) / 2) * 180;\n    } else {\n        return (Math.acos(cosA) / 2) * 180 + 90;\n    }\n}\n"]}
{"task_id": "MBJSP/357", "prompt": "function findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction maxOfNth(testlist, n) {\n/**\n * * Write a function to find the maximum of nth column from the given tuple list.\n */\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    max = Math.max(max, testList[i][n]);\n  }\n  return max;\n}\nfunction findMax(testlist) {\n/**\n * * Write a function to find the maximum element of all the given tuple records.\n */", "entry_point": "findMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]];\nvar x0 = findMax(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]];\nvar x1 = findMax(arg10);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]];\nvar x2 = findMax(arg20);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    max = Math.max(max, testlist[i][0]);\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    max = Math.max(max, testList[i][1]);\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    if (testlist[i][1] > max) {\n      max = testlist[i][1];\n    }\n  }\n  return max;\n}\n", "\n  let max = testlist[0][1];\n  for (let i = 0; i < testlist.length; i++) {\n    if (max < testlist[i][1]) {\n      max = testlist[i][1];\n    }\n  }\n  return max;\n}\n", "\n  let maxVal = 0;\n  for (let i = 0; i < testList.length; i++) {\n    if (testList[i][0] > maxVal) {\n      maxVal = testList[i][1];\n    }\n  }\n  return maxVal;\n}\n\n"]}
{"task_id": "MBJSP/358", "prompt": "function addList(nums1, nums2) {\n/**\n * * Write a function to add two lists using map and lambda function.\n */\n  return nums1.map((num, i) => num + nums2[i]);\n}\nfunction mulList(nums1, nums2) {\n/**\n * * Write a function to multiply two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 * nums2[index]);\n}\nfunction divList(nums1, nums2) {\n/**\n * * Write a function to divide two lists using map and lambda function.\n */\n  return nums1.map((num1, index) => num1 / nums2[index]);\n}\nfunction moddivList(nums1, nums2) {\n/**\n * * Write a function to find modulo division of two lists using map and lambda function.\n */", "entry_point": "moddivList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [4, 5, 6];\nvar arg01 = [1, 2, 3];\nvar x0 = moddivList(arg00, arg01);\nvar v0 = [0, 1, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 2];\nvar arg11 = [1, 4];\nvar x1 = moddivList(arg10, arg11);\nvar v1 = [0, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [90, 120];\nvar arg21 = [50, 70];\nvar x2 = moddivList(arg20, arg21);\nvar v2 = [40, 50];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums1.map((num1, index) => num1 % nums2[index]);\n}\n", "\n  return nums1.map((num1, index) => num1 % nums2[index]);\n}\n", "\n  return nums1.map((num1, index) => num1 % nums2[index]);\n}\n", "\n  return nums1.map((num1, index) => num1 % nums2[index]);\n}\n", "\n  return nums1.map((num1, index) => num1 % nums2[index]);\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/359", "prompt": "function areRotations(string1, string2) {\n/**\n * * Write a JavaScript function to check whether the given strings are rotations of each other or not.\n */\n    if (string1.length !== string2.length) {\n        return false;\n    }\n    return (string2 + string2).includes(string1);\n}\nfunction checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n */\n  if (a * a - b * b === 0) {\n    return \"Yes\";\n  } else if (a * a - b * b < 0) {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}\nfunction checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to check if roots of a quadratic equation are reciprocal of each other or not.\n */\n    if (a == c) {\n        return (\"Yes\");\n    } else {\n        return (\"No\");\n    }\n}\nfunction checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n */", "entry_point": "checkSolution", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = checkSolution(arg00, arg01, arg02);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar arg12 = 3;\nvar x1 = checkSolution(arg10, arg11, arg12);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = -5;\nvar arg22 = 6;\nvar x2 = checkSolution(arg20, arg21, arg22);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    if (a * a - 4 * b * b + c * c === 0) {\n        return (\"Yes\");\n    } else {\n        return (\"No\");\n    }\n}\n", "\n    if (a * a + b * b === 0) {\n        return \"Yes\";\n    } else if (a * a + b * b < 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n}\n", "\n    if (a == b) {\n        return (\"Yes\");\n    } else if (a == 0) {\n        return (\"No\");\n    } else if (a * a - b * b == 2 * a * c) {\n        return (\"Yes\");\n    } else {\n        return (\"No\");\n    }\n}\n", "\n    if (a == 0) {\n        return (\"Yes\");\n    } else {\n        return (\"No\");\n    }\n}\n", "\n    if (a * a - 4 * b * c < 0) {\n        return \"No\";\n    } else if (a * a - 4 * b * c === 0) {\n        return (\"Yes\");\n    } else {\n        return (\"Yes\");\n    }\n}\n"]}
{"task_id": "MBJSP/360", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction getCarol(n) {\n/**\n * * Write a function to find the n\u2019th carol number.\n */", "entry_point": "getCarol", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = getCarol(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = getCarol(arg10);\nvar v1 = 223;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = getCarol(arg20);\nvar v2 = 959;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn getCarol(n - 1) + 2 * getCarol(n - 2) + getCarol(n - 3);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn getCarol(n - 1) + getCarol(n - 2);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn getCarol(n - 1) + getCarol(n - 2);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\treturn getCarol(n - 1) + getCarol(n - 2);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1) {\n\t\treturn 3;\n\t}\n\treturn getCarol(n - 1) + 2 * getCarol(n - 2);\n}\n"]}
{"task_id": "MBJSP/361", "prompt": "function twoUniqueNums(nums) {\n/**\n * * Write a JavaScript function to remove two duplicate numbers from a given number of lists.\n */\n    let map = new Map();\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (!map.has(nums[i])) {\n            map.set(nums[i], 1);\n        } else {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value === 1) {\n            result.push(key);\n        }\n    }\n    return result;\n}\nfunction removeDuplicate(list1) {\n/**\n * * Write a function to remove duplicates from a list of lists.\n */\n  let list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (!list2.includes(list1[i][j])) {\n        list2.push(list1[i][j]);\n      }\n    }\n  }\n  return list2;\n}\nfunction removeEmpty(tuple1) {\n/**\n * * Write a function to remove an empty tuple from a list of tuples.\n */\n  return tuple1.filter(function (tuple) {\n    return tuple.length > 0;\n  });\n}\nfunction removeEmpty(list1) {\n/**\n * * Write a function to remove empty lists from a given list of lists.\n */", "entry_point": "removeEmpty", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[], [], [], \"Red\", \"Green\", [1, 2], \"Blue\", [], []];\nvar x0 = removeEmpty(arg00);\nvar v0 = [\"Red\", \"Green\", [1, 2], \"Blue\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[], [], [], [], [], \"Green\", [1, 2], \"Blue\", [], []];\nvar x1 = removeEmpty(arg10);\nvar v1 = [\"Green\", [1, 2], \"Blue\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[], [], [], \"Python\", [], [], \"programming\", \"language\", [], [], [], [], []];\nvar x2 = removeEmpty(arg20);\nvar v2 = [\"Python\", \"programming\", \"language\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return list1.filter(", "\n  let list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (!list2.includes(list1[i][j])) {\n        list2.push(list1[i][j]);\n      }\n    }\n  }\n  return list2;\n}\n", "\n  let list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length > 0) {\n      list2.push(list1[i]);\n    }\n  }\n  return list2;\n}\n", "\n  return list1.filter(", "\n  return list1.filter("]}
{"task_id": "MBJSP/362", "prompt": "function maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction replaceSpaces(string) {\n/**\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n */\n  return string.replace(/ /g, \"%20\");\n}\nfunction maxOccurrences(list1) {\n/**\n * * Write a function to find the item with maximum occurrences in a given list.\n */\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1.filter(x => x === list1[i]).length > maxOccurrence) {\n      maxOccurrence = list1.filter(x => x === list1[i]).length;\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction maxOccurrences(nums) {\n/**\n * * Write a JavaScript function to find the item with maximum occurrences in a given list.\n */", "entry_point": "maxOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 2, 3, 12, 4, 2];\nvar x0 = maxOccurrences(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 6, 7, 0, 1, 0, 1, 0];\nvar x1 = maxOccurrences(arg10);\nvar v1 = [1, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 1, 2, 4, 1];\nvar x2 = maxOccurrences(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let maxOccurrence = 0;\n  let max = 0;\n  let n = nums.length;\n  let t;\n  let maxT;\n  for (let i = 0; i < n; i++) {\n    t = nums[i];\n    maxT = 0;\n    for (let j = 0; j < n; j++) {\n      if (nums[j] === t) {\n        maxT += 1;\n      }\n    }\n    if (maxT > maxOccurrence) {\n      maxOccurrence = maxT;\n      max = t;\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let itemOccurrence = nums.filter(x => x === nums[i]).length;\n    if (itemOccurrence > maxOccurrence) {\n      maxOccurrence = itemOccurrence;\n      max = nums[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums.filter(x => x === nums[i]).length > maxOccurrence) {\n      maxOccurrence = nums.filter(x => x === nums[i]).length;\n      max = nums[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums.filter(x => x === nums[i]).length > maxOccurrence) {\n      maxOccurrence = nums.filter(x => x === nums[i]).length;\n      max = nums[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  let maxOccurrence = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums.filter(x => x === nums[i]).length > maxOccurrence) {\n      maxOccurrence = nums.filter(x => x === nums[i]).length;\n      max = nums[i];\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/363", "prompt": "function assignElements(testlist) {\n/**\n * * Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n */\n  let result = {};\n  for (let i = 0; i < testList.length; i++) {\n    let pair = testList[i];\n    for (let j = 0; j < pair.length; j++) {\n      if (result[pair[j]]) {\n        result[pair[j]].push(pair[0]);\n      } else {\n        result[pair[j]] = [pair[0]];\n      }\n    }\n  }\n  return result;\n}\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction countElim(num) {\n/**\n * * Write a function to count the elements in a list until an element is a tuple.\n */\n  let count = 0;\n  while (typeof num[count] !== 'object') {\n    count += 1;\n  }\n\n  return count;\n}\nfunction addKElement(testlist, k) {\n/**\n * * Write a function to add the k elements to each element in the tuple.\n */", "entry_point": "addKElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3, 4], [2, 4, 6], [3, 8, 1]];\nvar arg01 = 4;\nvar x0 = addKElement(arg00, arg01);\nvar v0 = [[5, 7, 8], [6, 8, 10], [7, 12, 5]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nvar arg11 = 8;\nvar x1 = addKElement(arg10, arg11);\nvar v1 = [[9, 10, 11], [12, 13, 14], [15, 16, 17]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 12, 13], [14, 15, 16], [17, 18, 19]];\nvar arg21 = 9;\nvar x2 = addKElement(arg20, arg21);\nvar v2 = [[20, 21, 22], [23, 24, 25], [26, 27, 28]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    let pair = testlist[i];\n    let newPair = [k].concat(pair);\n    result.push(newPair);\n  }\n  return result;\n}\n\n/******************************************************************************************************************/\n\n/***\n * * Main ", "\n  for (let i = 0; i < testlist.length; i++) {\n    testlist[i].push(testlist[i][k]);\n  }\n  return testlist;\n}\n", "\n  for (let i = 0; i < testlist.length; i++) {\n    let pair = testlist[i];\n    for (let j = 0; j < pair.length; j++) {\n      pair[j] += k;\n    }\n  }\n  return testlist;\n}\n", "\n  for (let i = 0; i < testlist.length; i++) {\n    testlist[i].push(k);\n  }\n  return testlist;\n}\n", "\n  let result = [];\n  let testlistlen = testlist.length;\n  for (let i = 0; i < testlistlen; i++) {\n    result[i] = testlist[i];\n  }\n\n  let pos = testlistlen - k;\n  while (pos < testlistlen) {\n    result[pos] = testlist[pos + k];\n    pos += 1;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/364", "prompt": "function minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to count minimum number of swaps required to convert one binary string to another.\n */\n    // Write your code here\n    count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return count / 2;\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to find the minimum number of swaps required to convert one binary string to another.\n */\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return (count / 2);\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction minSwaps(s1, s2) {\n/**\n * * Write a JavaScript function to find minimum number swaps required to make two binary strings equal.\n */\n    let count = 0;\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            count += 1;\n            s1 = s1.replace(s1[i], '');\n            s2 = s2.replace(s2[i], '');\n        }\n    }\n    return count;\n}\nfunction minFlipToMakeStringAlternate(str) {\n/**\n * * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n */", "entry_point": "minFlipToMakeStringAlternate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"0001010111\";\nvar x0 = minFlipToMakeStringAlternate(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"001\";\nvar x1 = minFlipToMakeStringAlternate(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"010111011\";\nvar x2 = minFlipToMakeStringAlternate(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] == '0') {\n            if (i > 0 && str[i - 1] == '0') {\n                count += 1;\n                str = str.replace(str[i], '1');\n            }\n        }\n        if (str[i] == '1') {\n            if (i > 0 && str[i - 1] == '1') {\n                count += 1;\n                str = str.replace(str[i], '0');\n            }\n        }\n    }\n    return count;\n}\n", "\n    // Write your code here\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i]!== str[i + 1]) {\n            count += 1;\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    let strCopy = str.replace(/0/g, '1').replace(/1/g, '0');\n    for (let i = 0; i < strCopy.length; i++) {\n        if (strCopy[i]!= str[i]) {\n            count += 1;\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < str.length - 1; i++) {\n        if (str[i]!= str[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i]!== str[i + 1]) {\n            count += 1;\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/365", "prompt": "function lastTwoDigits(n) {\n/**\n * * Write a JavaScript function to find the last two digits in factorial of a given number.\n */\n  let a = 1;\n  while (n > 1) {\n    a *= n;\n    n--;\n  }\n  return a % 100;\n}\nfunction countFac(n) {\n/**\n * * Write a JavaScript function to count the number of distinct power of prime factor of given number.\n */\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let j = 2;\n      while (i * j <= n) {\n        if (n % i === 0) {\n          n /= i;\n          count++;\n        } else {\n          j++;\n        }\n      }\n    }\n  }\n  return count;\n}\nfunction findDigits(n) {\n/**\n * * Write a JavaScript function to count the number of digits in factorial of a given number.\n */\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return n.toString().length + factorial.toString().split('').length - 1;\n}\nfunction countDigit(n) {\n/**\n * * Write a JavaScript function to count the number of digits of a given number.\n */", "entry_point": "countDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12345;\nvar x0 = countDigit(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 11223305;\nvar x1 = countDigit(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4123459;\nvar x2 = countDigit(arg20);\nvar v2 = 7;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let digit = 0;\n  while (n > 0) {\n    n /= 10;\n    digit++;\n  }\n  return digit;\n}\n", "\n  return n.toString().split('').length;\n}\n", "\n  return n.toString().length;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.log10(i).toString().length;\n  }\n  return sum;\n}\n", "\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    count += n.toString().split('').length - 1;\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/366", "prompt": "function heapQueueLargest(nums, n) {\n/**\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n */\n  const sortedNums = nums.sort((a, b) => b - a)\n  const minHeap = []\n  for (let i = 0; i < n; i++) {\n    minHeap.push(sortedNums.shift())\n  }\n  return minHeap\n}\nfunction repeat(x) {\n/**\n * * Write a JavaScript function to print duplicants from a list of integers.\n */\n    let duplicateList = [];\n    let set = new Set(x);\n    for (let item of set) {\n        if (x.indexOf(item) !== x.lastIndexOf(item)) {\n            duplicateList.push(item);\n        }\n    }\n    return duplicateList;\n}\nfunction maxProduct(arr) {\n/**\n * * Write a function to find a pair with the highest product from a given array of integers.\n */\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}\nfunction adjacentNumProduct(listnums) {\n/**\n * * Write a JavaScript function to find the largest product of the pair of adjacent elements from a given list of integers.\n */", "entry_point": "adjacentNumProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6];\nvar x0 = adjacentNumProduct(arg00);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = adjacentNumProduct(arg10);\nvar v1 = 20;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3];\nvar x2 = adjacentNumProduct(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let adjacentNumProductList = [];\n  for (let i = 0; i < listnums.length - 1; i++) {\n    let adjacentNumProduct = listnums[i] * listnums[i + 1];\n    adjacentNumProductList.push(adjacentNumProduct);\n  }\n  return Math.max(...adjacentNumProductList);\n}\n", "\n  const adjacent = {};\n  for (let i = 0; i < listnums.length - 1; i++) {\n    let product = listnums[i] * listnums[i + 1];\n    if (listnums[i]!== 0 && listnums[i + 1]!== 0) {\n      if (product > adjacent[listnums[i]]) {\n        adjacent[listnums[i]] = product;\n      }\n    }\n  }\n  return adjacent[listnums[listnums.length - 1]];\n}\n", "\n  const sortedListNums = listnums.sort((a, b) => b - a)\n  let maxPair = 0;\n  for (let i = 0; i < sortedListNums.length - 1; i++) {\n    let product = sortedListNums[i] * sortedListNums[i + 1];\n    if (product > maxPair) {\n      maxPair = product;\n    }\n  }\n  return maxPair;\n}\n", "\n  let maxProduct = 1;\n  for (let i = 0; i < listnums.length; i++) {\n    for (let j = i + 1; j < listnums.length; j++) {\n      let product = listnums[i] * listnums[j];\n      if (product > maxProduct) {\n        maxProduct = product;\n      }\n    }\n  }\n  return maxProduct;\n}\n", "\n  let maxProduct = 0;\n  let adjacentNum = []\n  let adjacentNumProduct = []\n  let adjacentNumProductTemp = [];\n  for (let num of listnums) {\n    adjacentNum.push(num);\n  }\n  adjacentNum.push(0);\n  adjacentNum.sort("]}
{"task_id": "MBJSP/368", "prompt": "function addTuple(testlist, testtup) {\n/**\n * * Write a function to add the given tuple to the given list.\n */\n  return [...testList, ...testTup];\n}\nfunction sumElements(testtup) {\n/**\n * * Write a function to find the summation of tuple elements in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    sum += testTup[i];\n  }\n  return sum;\n}\nfunction matrixToList(testlist) {\n/**\n * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n */\n  let flatList = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      flatList.push(testList[i][j]);\n    }\n  }\n  return flatList;\n}\nfunction repeatTuples(testtup, n) {\n/**\n * * Write a function to repeat the given tuple n times.\n */", "entry_point": "repeatTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3];\nvar arg01 = 4;\nvar x0 = repeatTuples(arg00, arg01);\nvar v0 = [[1, 3], [1, 3], [1, 3], [1, 3]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2];\nvar arg11 = 3;\nvar x1 = repeatTuples(arg10, arg11);\nvar v1 = [[1, 2], [1, 2], [1, 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 4];\nvar arg21 = 5;\nvar x2 = repeatTuples(arg20, arg21);\nvar v2 = [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(testtup);\n  }\n  return result;\n}\n", "\n  let newTup = [];\n  for (let i = 0; i < n; i++) {\n    newTup = [...testtup,...newTup];\n  }\n  return newTup;\n}\n", "\n  let testList = [];\n  for (let i = 0; i < n; i++) {\n    testList.push(testtup);\n  }\n  return testList;\n}\n", "\n  return testtup.map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e => e).map(e", "\n  return Array.from({length: n}, (_, index) => testtup).map(item => item);\n}\n"]}
{"task_id": "MBJSP/369", "prompt": "function surfaceArea(b, s) {\n/**\n * * Write a JavaScript function to find the surface area of the square pyramid.\n */\n    return 2 * b * s + Math.pow(b, 2);\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction lateralsurfaceCone(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cone.\n */\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\nfunction lateralsurfaceCuboid(l, w, h) {\n/**\n * * Write a function to find the lateral surface area of cuboid\n */", "entry_point": "lateralsurfaceCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar arg01 = 5;\nvar arg02 = 6;\nvar x0 = lateralsurfaceCuboid(arg00, arg01, arg02);\nvar v0 = 156;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar arg11 = 9;\nvar arg12 = 10;\nvar x1 = lateralsurfaceCuboid(arg10, arg11, arg12);\nvar v1 = 320;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 20;\nvar arg22 = 30;\nvar x2 = lateralsurfaceCuboid(arg20, arg21, arg22);\nvar v2 = 1800;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return 3 * (l * w) + 2 * (l * h) + 2 * (w * h);\n}\n", "\n  return l * w * h;\n}\n", "\n  return 2 * (l * w + l * h + w * h);\n}\n", "\n  return l * w * h;\n}\n", "\n  return (3 * (l * l) + 3 * (w * w) + 3 * (h * h));\n}\n"]}
{"task_id": "MBJSP/370", "prompt": "function sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction sortDictItem(testdict) {\n/**\n * * Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n */\n  const sortedDict = {};\n  const keys = Object.keys(testDict);\n  keys.sort((a, b) => {\n    const [aKey, aValue] = a.split(',');\n    const [bKey, bValue] = b.split(',');\n    return aKey * bKey - aValue * bValue;\n  });\n  keys.forEach((key) => {\n    sortedDict[key] = testDict[key];\n  });\n  return sortedDict;\n}\nfunction addStr(testtup, k) {\n/**\n * * Write a function to convert tuple into list by adding the given string after every element.\n */\n  let result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(testTup[i]);\n    result.push(k);\n  }\n  return result;\n}\nfunction floatSort(price) {\n/**\n * * Write a function to sort a tuple by its float element.\n */", "entry_point": "floatSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]];\nvar x0 = floatSort(arg00);\nvar v0 = [[\"item3\", \"24.5\"], [\"item2\", \"15.10\"], [\"item1\", \"12.20\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]];\nvar x1 = floatSort(arg10);\nvar v1 = [[\"item3\", \"20\"], [\"item1\", \"15\"], [\"item2\", \"10\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]];\nvar x2 = floatSort(arg20);\nvar v2 = [[\"item3\", \"14\"], [\"item2\", \"10\"], [\"item1\", \"5\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return price.toString().split('.')[1] === '0'? price.toString().split('.')[0] : price.toString().split('.')[0] + '.' + price.toString().split('.')[1].slice(1);\n}\n", "\n  return price;\n}\n", "\n  return price.sort(String.prototype.localeCompare);\n}\n", "\n  return price.sort((a, b) => a - b);\n}\n", "\n  const floatPrice = parseFloat(price);\n  return [price, floatPrice].sort((a, b) => {\n    if (isNaN(a) && isNaN(b)) return 0;\n    if (isNaN(a)) return 1;\n    if (isNaN(b)) return -1;\n    return a - b;\n  });\n}\n"]}
{"task_id": "MBJSP/371", "prompt": "function last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction findFirstMissing(array, start, end) {\n/**\n * * Write a JavaScript function to find the smallest missing number from the given array.\n */\n  let result = end + 1;\n\n  for (let i = start; i <= end; i++) {\n    if (array.includes(i) === false) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction smallestMissing(a, leftelement, rightelement) {\n/**\n * * Write a function to find the smallest missing element in a sorted array.\n */", "entry_point": "smallestMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, 3, 4, 5, 6];\nvar arg01 = 0;\nvar arg02 = 6;\nvar x0 = smallestMissing(arg00, arg01, arg02);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 2, 6, 9, 11, 15];\nvar arg11 = 0;\nvar arg12 = 6;\nvar x1 = smallestMissing(arg10, arg11, arg12);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 6, 9, 11, 15];\nvar arg21 = 0;\nvar arg22 = 7;\nvar x2 = smallestMissing(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let i;\n  let j;\n  let min = leftelement;\n  let max = rightelement;\n  let result = -1;\n  for (i = min; i < max; i++) {\n    if (a.includes(i) === false) {\n      result = i;\n      break;\n    }\n  }\n  for (j = max; j > min; j--) {\n    if (a.includes(j) === false) {\n      result = j;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  let left = leftelement - 1;\n  let right = rightelement;\n  let mid = Math.floor((left + right) / 2);\n\n  while (a[left]!== a[mid]) {\n    if (a[left] === a[mid]) {\n      left--;\n      mid--;\n    } else if (a[mid] < a[left]) {\n      mid--;\n    }\n  }\n\n  while (a[right]!== a[mid]) {\n    if (a[right] === a[mid]) {\n      right++;\n      mid++;\n    } else if (a[mid] < a[right]) {\n      mid++;\n    }\n  }\n\n  return Math.abs(left + right) + 1;\n}\n\n", "\n  let s = leftelement - 1;\n  let e = rightelement;\n\n  if (a[s] === s + 1) {\n    s++;\n  } else {\n    return smallestMissing(a, s, e);\n  }\n\n  for (let i = s; i < e; i++) {\n    if (a[i] - i > 0) {\n      let j = a[i] - i;\n      for (let k = 1; k <= j; k++) {\n        if (a[i - k]!== i - k + 1) {\n          return smallestMissing(a, i + 1, e);\n        }\n      }\n    }\n  }\n  return smallestMissing(a, e + 1, rightelement);\n}\n", "\n  if (leftelement === rightelement) {\n    let result = leftelement + 1;\n    let index = 0;\n    while (index < leftelement) {\n      if (a[index]!== a[leftelement - 1] && a[index]!== index + 1) {\n        result = index + 1;\n      }\n      index++;\n    }\n    return result;\n  }\n\n  if (leftelement === rightelement + 1) {\n    let result = leftelement + 1;\n    let index = leftelement;\n    while (index > 0) {\n      if (a[index]!== a[leftelement - 1] && a[index]!== index - 1) {\n        result = index - 1;\n      }\n      index--;\n    }\n    return result;\n  }\n\n  if (a[leftelement] > a[rightelement]) {\n    return smallestMissing(a, leftelement, rightelement + 1);\n  }\n  if (a[rightelement] > a[leftelement]) {\n    return smallestMissing(a, leftelement + 1, rightelement);\n  }\n\n  let min = a[leftelement];\n  let max = a[rightelement];\n\n  let index = leftelement;\n\n  while (index > 0 && index < rightelement) {\n    if (a[index] < min) {\n      min = a[index];\n    }\n    if (a[index] > max) {\n      max = a[index];\n    }\n    index++;\n  }\n\n  let step = Math.abs(max - min);\n  let index1", "\n  let leftelement_ = leftelement;\n  let rightelement_ = rightelement;\n  let array = a;\n  const len = array.length;\n  if (len < 2) {\n    return 1;\n  }\n  let min = Math.min(leftelement_, rightelement_);\n  let max = Math.max(leftelement_, rightelement_);\n\n  for (let i = min; i <= max; i++) {\n    let index = 0;\n    let num = array[i - 1];\n    while (index < len && array[index]!== num) {\n      index++;\n    }\n    if (index === len) {\n      return i;\n    }\n  }\n  return -1;\n}\n"]}
{"task_id": "MBJSP/372", "prompt": "function nthSuperUglyNumber(n, primes) {\n/**\n * * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n */\n  const pq = new Heap();\n  const uglyNumbers = [];\n  pq.push(1);\n\n  while (uglyNumbers.length < n) {\n    const uglyNumber = pq.pop();\n    uglyNumbers.push(uglyNumber);\n\n    for (let i = 0; i < primes.length; i++) {\n      const prime = primes[i];\n      const nextUglyNumber = uglyNumber * prime;\n      if (nextUglyNumber > uglyNumbers[uglyNumbers.length - 1]) {\n        pq.push(nextUglyNumber);\n      }\n    }\n  }\n\n  return uglyNumbers[n - 1];\n}\nfunction heapQueueLargest(nums, n) {\n/**\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n */\n  const sortedNums = nums.sort((a, b) => b - a)\n  const minHeap = []\n  for (let i = 0; i < n; i++) {\n    minHeap.push(sortedNums.shift())\n  }\n  return minHeap\n}\nfunction rawHeap(rawheap) {\n/**\n * * Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n */\n  const heap = [];\n  const len = rawheap.length;\n  for (let i = 0; i < len; i++) {\n    heap.push(rawheap[i]);\n    siftUp(heap, i);\n  }\n  return heap;\n}\nfunction heapAssending(nums) {\n/**\n * * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n */", "entry_point": "heapAssending", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nvar x0 = heapAssending(arg00);\nvar v0 = [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar x1 = heapAssending(arg10);\nvar v1 = [14, 22, 25, 25, 35, 58, 65, 75, 85];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nvar x2 = heapAssending(arg20);\nvar v2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedNums = nums.sort((a, b) => a - b);\n  return sortedNums;\n}\n", "\n  const heap = rawHeap(nums);\n  const result = [];\n  while (heap.length > 0) {\n    result.push(heap.pop());\n  }\n  return result;\n}\n", "\n  return rawHeap(nums)\n}\n", "\n  return rawHeap(nums)\n}\n", "\n  const rawheap = nums.slice(0, -1);\n  const heap = rawHeap(rawheap);\n  return heap;\n}\n"]}
{"task_id": "MBJSP/373", "prompt": "function longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction volumeTetrahedron(num) {\n/**\n * * Write a function to calculate volume of a tetrahedron.\n */\n  return (num * (num + 1) * (num + 2) * (num + 3)) / 6;\n}\nfunction volumeCuboid(l, w, h) {\n/**\n * * Write a function to find the volume of a cuboid.\n */", "entry_point": "volumeCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = volumeCuboid(arg00, arg01, arg02);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar arg12 = 9;\nvar x1 = volumeCuboid(arg10, arg11, arg12);\nvar v1 = 315;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar arg22 = 21;\nvar x2 = volumeCuboid(arg20, arg21, arg22);\nvar v2 = 3150;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * w * h;\n}\n", "\n  return l * w * h;\n}\n", "\n  return l * w * h;\n}\n", "\n  return l * w * h;\n}\n", "\n  return l * w * h;\n}\n"]}
{"task_id": "MBJSP/374", "prompt": "function numPosition(text) {\n/**\n * * Write a function to separate and print the numbers and their position of a given string.\n */\n  const position = text.search(/[0-9]/g);\n  return position;\n}\nfunction anagramLambda(texts, str) {\n/**\n * * Write a function to find all anagrams of a string in a given list of strings using lambda function.\n */\n  const sorted = str.split(\"\").sort().join(\"\");\n  return texts.filter(text => {\n    const sortedText = text.split(\"\").sort().join(\"\");\n    return sortedText === sorted;\n  });\n}\nfunction checkPermutation(str1, str2) {\n/**\n * * Write a function to check if the two given strings are permutations of each other.\n */\n  if (str1.length !== str2.length) return false;\n  const str1Map = {};\n  const str2Map = {};\n  for (let i = 0; i < str1.length; i++) {\n    str1Map[str1[i]] = (str1Map[str1[i]] || 0) + 1;\n    str2Map[str2[i]] = (str2Map[str2[i]] || 0) + 1;\n  }\n  for (let key in str1Map) {\n    if (str1Map[key] !== str2Map[key]) return false;\n  }\n  return true;\n}\nfunction permuteString(str) {\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */", "entry_point": "permuteString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ab\";\nvar x0 = permuteString(arg00);\nvar v0 = [\"ab\", \"ba\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = permuteString(arg10);\nvar v1 = [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcd\";\nvar x2 = permuteString(arg20);\nvar v2 = [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const permutationMap = {};\n  ", "\n  const permutations = [];\n  ", "\n  const strMap = {};\n  for (let i = 0; i < str.length; i++) {\n    strMap[str[i]] = (strMap[str[i]] || 0) + 1;\n  }\n  for (let key in strMap) {\n    const permuteList = [];\n    for (let i = 0; i < str.length; i++) {\n      if (strMap[str[i]] > 0) {\n        strMap[str[i]] -= 1;\n        permuteList.push(str[i]);\n      }\n    }\n    for (let i = 0; i < permuteList.length; i++) {\n      strMap[permuteList[i]] = (strMap[permuteList[i]] || 0) + 1;\n    }\n  }\n  for (let key in strMap) {\n    console.log(strMap[key] === 1? str[key] : str[key] + \":\" + strMap[key]);\n  }\n}\n", "\n  if (str.length === 0) {\n    return [];\n  }\n  const strMap = {};\n  for (let i = 0; i < str.length; i++) {\n    strMap[str[i]] = (strMap[str[i]] || 0) + 1;\n  }\n  for (let key in strMap) {\n    const string = str.slice(0);\n    string.splice(key, 1);\n    const string2 = str.slice(0);\n    string2.splice(0, key);\n    const string3 = str.slice(0);\n    string3.splice(key, key);\n    const permutations = permuteString(string) + permuteString(string2) + permuteString(string3);\n    permutations.forEach(permutation => {\n      permutation.forEach(character => {\n        strMap[character] = (strMap[character] || 0) - 1;\n      });\n    });\n  }\n  const unique = strMap.keys().sort();\n  unique.forEach(character => {\n    strMap[character] = (strMap[character] || 0) - 1;\n  });\n  return strMap;\n}\n", "\n  let result = [];\n  let permuteResult = [];\n  "]}
{"task_id": "MBJSP/375", "prompt": "function matchNum(string) {\n/**\n * * Write a function where a string will start with a specific number.\n */\n  return string.startsWith(5);\n}\nfunction countNo(a, n, l, r) {\n/**\n * * Write a JavaScript function to find nth number in a sequence which is not a multiple of a given number.\n */\n    let count = 0;\n    for (let i = l; i <= r; i++) {\n        if (i % a !== 0) {\n            count++;\n        }\n        if (count === n) {\n            return i;\n        }\n    }\n}\nfunction roundUp(a, digits) {\n/**\n * * Write a function to round up a number to specific digits.\n */\n  return Math.ceil(a * Math.pow(10, digits)) / Math.pow(10, digits);\n}\nfunction roundNum(n, m) {\n/**\n * * Write a function to round the given number to the nearest multiple of a specific number.\n */", "entry_point": "roundNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4722;\nvar arg01 = 10;\nvar x0 = roundNum(arg00, arg01);\nvar v0 = 4720;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1111;\nvar arg11 = 5;\nvar x1 = roundNum(arg10, arg11);\nvar v1 = 1110;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 219;\nvar arg21 = 2;\nvar x2 = roundNum(arg20, arg21);\nvar v2 = 218;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.round(n / m) * m;\n}\n", "\n  return Math.round(n / m) * m;\n}\n", "\n  let d = Math.pow(10, m);\n  return Math.round(n / d) * d;\n}\n", "\n  return Math.round(n / m) * m;\n}\n", "\n  return Math.round(n / m) * m;\n}\n\n"]}
{"task_id": "MBJSP/376", "prompt": "function consecutiveDuplicates(nums) {\n/**\n * * Write a function to remove consecutive duplicates of a given list.\n */\n  let result = [];\n  let i = 0;\n  let j = 1;\n  while (j < nums.length) {\n    if (nums[i] === nums[j]) {\n      j++;\n    } else {\n      result.push(nums[i]);\n      i = j;\n      j++;\n    }\n  }\n  result.push(nums[i]);\n  return result;\n}\nfunction removeDuplicate(list1) {\n/**\n * * Write a function to remove duplicates from a list of lists.\n */\n  let list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (!list2.includes(list1[i][j])) {\n        list2.push(list1[i][j]);\n      }\n    }\n  }\n  return list2;\n}\nfunction textMatch(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or more b's.\n */\n  if (text.match(/a/g) === null) {\n    return \"Not matched!\";\n  } else {\n    return \"Found a match!\";\n  }\n}\nfunction removeReplica(testtup) {\n/**\n * * Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n */", "entry_point": "removeReplica", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 4, 4, 4, 5, 5, 6, 7, 7];\nvar x0 = removeReplica(arg00);\nvar v0 = [1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9];\nvar x1 = removeReplica(arg10);\nvar v1 = [2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 2, 5, 4, 5, 7, 5, 6, 7, 7];\nvar x2 = removeReplica(arg20);\nvar v2 = [2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < testtup.length; i++) {\n    if (result.includes(testtup[i])) {\n      continue;\n    } else {\n      result.push(testtup[i]);\n    }\n  }\n  return result;\n}\n", "\n  let testlist = [];\n  testlist.push(testtup);\n  let test = testlist[0];\n  for (let i = 1; i < testlist.length; i++) {\n    if (test === testlist[i]) {\n      continue;\n    } else {\n      testlist[i - 1] = test;\n      test = testlist[i];\n    }\n  }\n  testlist[testlist.length - 1] = test;\n  return testlist;\n}\n", "\n  let result = [];\n  let i = 0;\n  let j = 1;\n  while (j < testtup.length) {\n    if (testtup[i] === testtup[j]) {\n      result.push(testtup[i]);\n      j++;\n    } else {\n      i = j;\n      j++;\n    }\n  }\n  result.push(testtup[i]);\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testtup.length; i++) {\n    for (let j = 0; j < result.length; j++) {\n      if (testtup[i] === result[j]) {\n        i--;\n        break;\n      } else if (j === result.length - 1) {\n        result.push(testtup[i]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let newtup = [];\n  for (let i = 0; i < testtup.length; i++) {\n    if (!newtup.includes(testtup[i])) {\n      newtup.push(testtup[i]);\n    }\n  }\n  return newtup;\n}\n"]}
{"task_id": "MBJSP/377", "prompt": "function firstRepeatedChar(str) {\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\n  let charMap = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charMap[str[i]]) {\n      return str[i];\n    } else {\n      charMap[str[i]] = 1;\n    }\n  }\n  return \"\\x00\";\n}\nfunction removeLength(teststr, k) {\n/**\n * * Write a function to remove all the words with k length in the given string.\n */\n  let str = testStr.split(' ');\n  let newStr = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].length !== k) {\n      newStr.push(str[i]);\n    }\n  }\n  return newStr.join(' ');\n}\nfunction removeWords(list1, charlist) {\n/**\n * * Write a function to remove words from a given list of strings containing a character or string.\n */\n    return list1.map(item => {\n        return item.split(' ').filter(word => {\n            return charlist.every(char => {\n                return word.indexOf(char) === -1;\n            });\n        }).join(' ');\n    });\n}\nfunction removeChar(s, c) {\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */", "entry_point": "removeChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar arg01 = \"a\";\nvar x0 = removeChar(arg00, arg01);\nvar v0 = \"b\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"toggle\";\nvar arg11 = \"g\";\nvar x1 = removeChar(arg10, arg11);\nvar v1 = \"tole\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"aabbc\";\nvar arg21 = \"b\";\nvar x2 = removeChar(arg20, arg21);\nvar v2 = \"aac\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (s.indexOf(c) === -1) {\n    return s;\n  }\n  let newStr = s.split(c).join('');\n  return newStr;\n}\n", "\n  let new_str = s.split(' ');\n  for (let i = 0; i < new_str.length; i++) {\n    if (new_str[i].indexOf(c)!== -1) {\n      new_str[i] = '';\n    }\n  }\n  return new_str.join(' ');\n}\n", "\n  return s.split(' ').map(word => {\n    return word.replace(c, '');\n  }).join(' ');\n}\n", "\n  return s.split(c).join('');\n}\n", "\n  return s.split(c).join('');\n}\n"]}
{"task_id": "MBJSP/378", "prompt": "function swapList(newlist) {\n/**\n * * Write a JavaScript function to interchange first and last elements in a given list.\n */\n    let first = newlist[0];\n    let last = newlist[newlist.length - 1];\n    newlist[0] = last;\n    newlist[newlist.length - 1] = first;\n    return newlist;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction moveLast(numlist) {\n/**\n * * Write a JavaScript function to shift first element to the end of given list.\n */\n    let firstElement = numList[0];\n    numList.shift();\n    numList.push(firstElement);\n    return numList;\n}\nfunction moveFirst(testlist) {\n/**\n * * Write a JavaScript function to shift last element to first position in the given list.\n */", "entry_point": "moveFirst", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar x0 = moveFirst(arg00);\nvar v0 = [4, 1, 2, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 2, 3];\nvar x1 = moveFirst(arg10);\nvar v1 = [3, 0, 1, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 8, 7, 1];\nvar x2 = moveFirst(arg20);\nvar v2 = [1, 9, 8, 7];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let lastElement = testList[testList.length - 1];\n    testList.shift();\n    testList.unshift(lastElement);\n    return testList;\n}\n", "\n    let lastElement = testlist[testlist.length - 1];\n    testlist.shift();\n    testlist.unshift(lastElement);\n    return testlist;\n}\n", "\n    let lastElement = testlist[testlist.length - 1];\n    testlist.shift();\n    testlist.unshift(lastElement);\n    return testlist;\n}\n", "\n    let lastElement = testList[testList.length - 1];\n    testList.shift();\n    testList.unshift(lastElement);\n    return testList;\n}\n", "\n    let lastElement = testList[testlist.length - 1];\n    testList.shift();\n    testList.unshift(lastElement);\n    return testList;\n}\n"]}
{"task_id": "MBJSP/379", "prompt": "function surfaceArea(b, s) {\n/**\n * * Write a JavaScript function to find the surface area of the square pyramid.\n */\n    return 2 * b * s + Math.pow(b, 2);\n}\nfunction lateralsurfaceCone(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cone.\n */\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction surfaceareaCuboid(l, w, h) {\n/**\n * * Write a function to find the surface area of a cuboid.\n */", "entry_point": "surfaceareaCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = surfaceareaCuboid(arg00, arg01, arg02);\nvar v0 = 22;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar arg12 = 9;\nvar x1 = surfaceareaCuboid(arg10, arg11, arg12);\nvar v1 = 286;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar arg22 = 21;\nvar x2 = surfaceareaCuboid(arg20, arg21, arg22);\nvar v2 = 1350;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * w * h;\n}\n", "\n  return (4 * (l * w) + 4 * (l * h) + 4 * (w * h));\n}\n", "\n  return ((l * l) + (w * w) + (h * h));\n}\n", "\n  return l * w * h;\n}\n", "\n  return l * w * h;\n}\n"]}
{"task_id": "MBJSP/380", "prompt": "function generateMatrix(n) {\n/**\n * * Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n */\n  const matrix = [];\n  const startRow = 0;\n  const endRow = n - 1;\n  const startCol = 0;\n  const endCol = n - 1;\n  let currentRow = startRow;\n  let currentCol = startCol;\n  let direction = 'right';\n  let num = 1;\n\n  while (currentRow <= endRow && currentCol <= endCol) {\n    for (let i = currentCol; i <= endCol; i++) {\n      matrix[currentRow][i] = num;\n      num++;\n    }\n    currentRow++;\n\n    for (let i = currentRow; i <= endRow; i++) {\n      matrix[i][endCol] = num;\n      num++;\n    }\n    endCol--;\n\n    for (let i = endCol; i >= currentCol; i--) {\n      matrix[endRow][i] = num;\n      num++;\n    }\n    end\nfunction subLists(mylist) {\n/**\n * * Write a function to generate all sublists of a given list.\n */\n  const subLists = [];\n  for (let i = 0; i < myList.length; i++) {\n    subLists.push([]);\n  }\n  for (let i = 0; i < myList.length; i++) {\n    for (let j = 0; j < subLists.length; j++) {\n      subLists[j].push(myList[i]);\n    }\n  }\n  return subLists;\n}\nfunction countRotation(arr, n) {\n/**\n * * Write a JavaScript function to count the number of rotations required to generate a sorted array.\n */\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return 0;\n}\nfunction multiList(rownum, colnum) {\n/**\n * * Write a function to generate a two-dimensional array.\n */", "entry_point": "multiList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 4;\nvar x0 = multiList(arg00, arg01);\nvar v0 = [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar x1 = multiList(arg10, arg11);\nvar v1 = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar x2 = multiList(arg20, arg21);\nvar v2 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const matrix = [];\n  for (let i = 0; i < rownum; i++) {\n    matrix[i] = [];\n  }\n  for (let i = 0; i < rownum; i++) {\n    for (let j = 0; j < colnum; j++) {\n      matrix[i][j] = Math.pow(i + j, 2);\n    }\n  }\n  return matrix;\n}\n", "\n  const matrix = [];\n  for (let i = 0; i < rownum; i++) {\n    matrix.push([])\n  }\n  for (let i = 0; i < rownum; i++) {\n    for (let j = 0; j < colnum; j++) {\n      matrix[i].push(i * 100 + j);\n    }\n  }\n  return matrix;\n}\n", "\n  const matrix = [];\n  for (let i = 0; i < rownum; i++) {\n    matrix.push([]);\n  }\n  for (let i = 0; i < rownum; i++) {\n    for (let j = 0; j < colnum; j++) {\n      matrix[i].push(0);\n    }\n  }\n  return matrix;\n}\n\n", "\n    const matrix = [];\n    for (let i = 0; i < rownum; i++) {\n        matrix[i] = [];\n    }\n    for (let i = 0; i < rownum; i++) {\n        for (let j = 0; j < colnum; j++) {\n            matrix[i][j] = i * j;\n        }\n    }\n    return matrix;\n}\n", "\n    const multiArray = [];\n    for (let i = 0; i < rownum; i++) {\n        multiArray.push([]);\n    }\n    for (let i = 0; i < rownum; i++) {\n        for (let j = 0; j < colnum; j++) {\n            multiArray[i].push(i * j);\n        }\n    }\n    return multiArray;\n}\n"]}
{"task_id": "MBJSP/381", "prompt": "function countList(inputlist) {\n/**\n * * Write a function to count number of lists in a given list of lists and square the count.\n */\n  let count = 0;\n  for (let i = 0; i < inputList.length; i++) {\n    if (inputList[i].length > 0) {\n      count += 1;\n    }\n  }\n  return count * count;\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction sortSublists(list1) {\n/**\n * * Write a function to sort a list of lists by length and value.\n */\n  const result = []\n  list1.sort((a, b) => {\n    if (a.length === b.length) {\n      return a[0] > b[0] ? 1 : -1\n    } else {\n      return a.length > b.length ? 1 : -1\n    }\n  })\n  for (let sub = 0; sub < list1.length; sub++) {\n    for (let item = 0; item < list1[sub].length; item++) {\n      if (!result[sub]) result[sub] = []\n      result[sub].push(list1[sub][item])\n    }\n  }\n  return result\n}\nfunction indexOnInnerList(listdata, indexno) {\n/**\n * * Write a function to sort a list of lists by a given index of the inner list.\n */", "entry_point": "indexOnInnerList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg01 = 0;\nvar x0 = indexOnInnerList(arg00, arg01);\nvar v0 = [[\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99], [\"Wyatt Knott\", 91, 94]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg11 = 1;\nvar x1 = indexOnInnerList(arg10, arg11);\nvar v1 = [[\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg21 = 2;\nvar x2 = indexOnInnerList(arg20, arg21);\nvar v2 = [[\"Wyatt Knott\", 91, 94], [\"Brady Kent\", 97, 96], [\"Beau Turnbull\", 94, 98], [\"Greyson Fulton\", 98, 99]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = []\n  let indexdata = []\n  for (let item = 0; item < listdata.length; item++) {\n    indexdata = []\n    for (let inneritem = 0; inneritem < listdata[item].length; inneritem++) {\n      if (inneritem!= indexno) {\n        indexdata.push(listdata[item][inneritem])\n      }\n    }\n    result.push(indexdata)\n  }\n  return result\n}\n", "\n  return listdata.sort((a, b) => {\n    if (a[indexno] == b[indexno]) return 0;\n    return a[indexno] > b[indexno]? 1 : -1\n  });\n}\n", "\n  let listdata0 = listdata[0]\n  return listdata.sort((a, b) => {\n    let l0 = listdata0[indexno]\n    if (a[0] == b[0]) {\n      return l0 < b[0]? 1 : -1\n    } else {\n      return l0 < b[0]? 1 : -1\n    }\n  })\n}\n", "\n  const list = listdata[0]\n  const innerlist = listdata[1]\n  const result = []\n  innerlist.sort((a, b) => a[indexno] - b[indexno])\n  for (let item = 0; item < innerlist.length; item++) {\n    if (!result[item]) result[item] = []\n    result[item].push(innerlist[item])\n  }\n  return result\n}\n", "\n  return listdata.sort((a, b) => {\n    let ai = 0;\n    let bi = 0;\n    for (let i = 0; i < a.length; i++) {\n      ai += a[i][indexno];\n    }\n    for (let i = 0; i < b.length; i++) {\n      bi += b[i][indexno];\n    }\n    return ai - bi;\n  })\n}\n"]}
{"task_id": "MBJSP/382", "prompt": "function last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findFirstOccurrence(a, x) {\n/**\n * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n */\n  let start = 0;\n  let end = a.length - 1;\n  let mid;\n\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] === x) {\n      return mid;\n    }\n    if (a[mid] < x) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\nfunction countRotation(arr, n) {\n/**\n * * Write a JavaScript function to count the number of rotations required to generate a sorted array.\n */\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return 0;\n}\nfunction findRotationCount(a) {\n/**\n * * Write a function to find the number of rotations in a circularly sorted array.\n */", "entry_point": "findRotationCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7];\nvar x0 = findRotationCount(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 9, 10, 2, 5, 6];\nvar x1 = findRotationCount(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 5, 6, 8, 9, 10];\nvar x2 = findRotationCount(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let start = 0;\n  let end = a.length - 1;\n  let mid = 0;\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (a[mid] < a[mid + 1]) {\n        return mid;\n    } else if (a[mid] > a[mid - 1]) {\n        return mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return -1;\n}\n", "\n  let left = 0;\n  let right = a.length - 1;\n  while (left < right) {\n      if (a[left] > a[right]) {\n          left++;\n      } else {\n          right--;\n      }\n  }\n  return right + 1;\n}\n", "\n    let x = a[0];\n    let y = a[a.length - 1];\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        if (x > y) {\n            x = x - y;\n            count += 1;\n            x = x + y;\n        } else {\n            return count;\n        }\n    }\n    return count;\n}\n", "\n    let first = a[0];\n    let last = a[a.length - 1];\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] < last && a[i] > first) {\n            count++;\n        }\n        if (a[i] > last) {\n            first = a[i];\n        }\n        if (a[i] < last) {\n            last = a[i];\n        }\n    }\n    return count;\n}\n", "\n    let pivot = a.length - 1;\n    let left = 0;\n    let right = pivot - 1;\n\n    while (left <= right) {\n        if (a[left] < a[pivot] && a[right] > a[pivot]) {\n            return right - left + 1;\n        } else if (a[left] < a[pivot]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    return 0;\n}\n"]}
{"task_id": "MBJSP/383", "prompt": "function leftRotate(n, d) {\n/**\n * * Write a JavaScript function to left rotate the bits of a given number.\n */\n  return (n << d) | (n >>> (32 - d));\n}\nfunction toggleMiddleBits(n) {\n/**\n * * Write a JavaScript function to toggle bits of the number except the first and the last bit.\n */\n  var set_middle_bits = function(n){\n      n |= n >> 1; \n      n |= n >> 2; \n      n |= n >> 4; \n      n |= n >> 8; \n      n |= n >> 16;  \n      return (n >> 1) ^ 1\n  }\n  return n ^ set_middle_bits(n) \n}\nfunction toggleFAndLBits(n) {\n/**\n * * Write a JavaScript function to toggle only first and last bits of a given number.\n */\n    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1;\n}\nfunction evenBitToggleNumber(n) {\n/**\n * * Write a JavaScript function to toggle all odd bits of a given number.\n */", "entry_point": "evenBitToggleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitToggleNumber(arg00);\nvar v0 = 15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitToggleNumber(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitToggleNumber(arg20);\nvar v2 = 11;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return n ^ (n >>> 1)\n}\n\n", "\n    var toggle_all_odd_bits = ", "\n    return (n & 0xAAAAAAAA) >> 1 ^ (n & 0x55555555) \n}\n", "\n  return n ^ (n >> 1);\n}\n", "\n  var even_bits_toggle_number = "]}
{"task_id": "MBJSP/384", "prompt": "function freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction findFirstMissing(array, start, end) {\n/**\n * * Write a JavaScript function to find the smallest missing number from the given array.\n */\n  let result = end + 1;\n\n  for (let i = start; i <= end; i++) {\n    if (array.includes(i) === false) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction bigDiff(nums) {\n/**\n * * Write a JavaScript function to find the difference between largest and smallest value in a given array.\n */\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return max - min;\n}\nfunction frequencyOfSmallest(n, arr) {\n/**\n * * Write a JavaScript function to find the frequency of the smallest value in a given array.\n */", "entry_point": "frequencyOfSmallest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = [1, 2, 3, 4, 3];\nvar x0 = frequencyOfSmallest(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar arg11 = [3, 1, 2, 5, 6, 2, 3];\nvar x1 = frequencyOfSmallest(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = [3, 3, 6, 3, 7, 4, 9];\nvar x2 = frequencyOfSmallest(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === n) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let min = Math.min(...arr);\n  let result = {};\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === min) {\n      result[min] = arr.length - i;\n    }\n  }\n  return result;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (freq[arr[i]]) {\n      freq[arr[i]]++;\n    } else {\n      freq[arr[i]] = 1;\n    }\n  }\n  return freq;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < n; i++) {\n    if (freq[arr[i]]) {\n      freq[arr[i]]++;\n    } else {\n      freq[arr[i]] = 1;\n    }\n  }\n  return freq;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (freq[arr[i]]) {\n      freq[arr[i]]++;\n    } else {\n      freq[arr[i]] = 1;\n    }\n  }\n  return freq;\n}\n"]}
{"task_id": "MBJSP/385", "prompt": "function countEven(arraynums) {\n/**\n * * Write a function to find number of even elements in the given list using lambda function.\n */\n  return arrayNums.filter(num => num % 2 === 0).length;\n}\nfunction recurGcd(a, b) {\n/**\n * * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n */\n  if (b === 0) return a;\n  return recurGcd(b, a % b);\n}\nfunction fibonacci(n) {\n/**\n * * Write a function to solve the fibonacci sequence using recursion.\n */\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\nfunction getPerrin(n) {\n/**\n * * Write a function to find the n'th perrin number using recursion.\n */", "entry_point": "getPerrin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = getPerrin(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = getPerrin(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = getPerrin(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return getPerrin(n - 1) + getPerrin(n - 2);\n}\n", "\n  if (n === 1) return 1;\n  return getPerrin(n - 1) + n;\n}\n", "\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 5;\n  }\n  return getPerrin(n - 1) + getPerrin(n - 2);\n}\n", "\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  if (n === 2) {\n    return n + 1;\n  }\n  const p = n % 2;\n  const q = (n - p) % 2;\n  const r = (n + p + q) % 2;\n  return p + q + r;\n}\n", "\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return getPerrin(n - 1) + getPerrin(n - 2);\n}\n"]}
{"task_id": "MBJSP/386", "prompt": "function findPlatform(arr, dep, n) {\n/**\n * * Write a function to find the minimum number of platforms required for a railway/bus station.\n */\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n && j < n) {\n        if (arr[i] <= dep[j]) {\n            plat_needed += 1\n            i += 1\n        } else if (arr[i] > dep[j]) {\n            plat_needed -= 1\n            j += 1\n        }\n        if (plat_needed > result) {\n            result = plat_needed\n        }\n    }\n    return result\n}\nfunction minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to find the minimum number of swaps required to convert one binary string to another.\n */\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return (count / 2);\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction findMinSwaps(arr, n) {\n/**\n * * Write a JavaScript function to find minimum adjacent swaps required to sort binary array.\n */\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n - 1) {\n    if (arr[i] === 0) {\n      i++;\n    } else {\n      if (arr[j] === 1) {\n        j++;\n      } else {\n        arr[i] = 0;\n        arr[j] = 1;\n        count++;\n        i++;\n        j++;\n      }\n    }\n  }\n  return count;\n}\nfunction swapCount(s) {\n/**\n * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n */", "entry_point": "swapCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"[]][][\";\nvar x0 = swapCount(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"[[][]]\";\nvar x1 = swapCount(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"[[][]]][\";\nvar x2 = swapCount(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === ')') {\n            count++;\n        } else if (s[i] === '(') {\n            count--;\n        }\n    }\n    return count;\n}\n", "\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == '(') {\n      count++;\n    } else if (s[i] == ')') {\n      count--;\n    }\n    i++;\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == '[') {\n      count++;\n    } else if (s[i] == ']') {\n      count--;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let stack = []\n  while (i < s.length) {\n    if (s[i] == '[') {\n      stack.push(i)\n    } else {\n      if (stack.length > 0 && stack.peek() == i - 1) {\n        stack.pop();\n        count++;\n      } else {\n        stack.push(i);\n      }\n    }\n    i++;\n  }\n  return count;\n}\n", "\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    if (s[i] == '(') {\n      i++;\n    } else {\n      if (s[j] == ')') {\n        j++;\n      } else {\n        count++;\n        i++;\n        j++;\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/387", "prompt": "function isProductEven(arr, n) {\n/**\n * * Write a JavaScript function to check whether the product of numbers is even or not.\n */\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n    }\n    if (product % n === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction isEven(n) {\n/**\n * * Write a JavaScript function to check whether the given number is even or not using bitwise operator.\n */\n    return (n & 1) === 0;\n}\nfunction countDivisors(n) {\n/**\n * * Write a JavaScript function to check whether the count of divisors is even or odd.\n */\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count % 2 === 0 ? 'Even' : 'Odd';\n}\nfunction evenOrOdd(n) {\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is even or odd.\n */", "entry_point": "evenOrOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AB3454D\";\nvar x0 = evenOrOdd(arg00);\nvar v0 = \"Odd\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABC\";\nvar x1 = evenOrOdd(arg10);\nvar v1 = \"Even\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AAD\";\nvar x2 = evenOrOdd(arg20);\nvar v2 = \"Odd\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const hex = n.toString(16);\n    if (hex[0] % 2 === 0) {\n        return 'Even';\n    } else {\n        return 'Odd';\n    }\n}\n", "\n    let array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let evenOrOdd = true;\n    for (let i = 0; i < hexa.length; i++) {\n        let hexa = array[hexa[i]];\n        if (n % hexa!== 0) {\n            evenOrOdd = false;\n        }\n    }\n    return evenOrOdd;\n}\n", "\n    let hex = n.toString(16);\n    if (hex.length % 2) {\n        return 'Odd';\n    } else {\n        return 'Even';\n    }\n}\n", "\n    let digits = n.toString(16);\n    let hexDigits = new Array(16);\n    let even = true;\n    for (let i = 0; i < hexDigits.length; i++) {\n        hexDigits[i] = digits.charAt(i);\n        if (even && hexDigits[i] === '0') {\n            continue;\n        }\n        if (!even && hexDigits[i] === '1') {\n            continue;\n        }\n        even = false;\n        break;\n    }\n    return even;\n}\n", "\n    const d = n.toString(16);\n    const even = d[0] === '0';\n    const odd = d[0] === '1';\n    return even? 'Even' : odd? 'Odd' : 'Neither';\n}\n"]}
{"task_id": "MBJSP/388", "prompt": "function generateMatrix(n) {\n/**\n * * Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n */\n  const matrix = [];\n  const startRow = 0;\n  const endRow = n - 1;\n  const startCol = 0;\n  const endCol = n - 1;\n  let currentRow = startRow;\n  let currentCol = startCol;\n  let direction = 'right';\n  let num = 1;\n\n  while (currentRow <= endRow && currentCol <= endCol) {\n    for (let i = currentCol; i <= endCol; i++) {\n      matrix[currentRow][i] = num;\n      num++;\n    }\n    currentRow++;\n\n    for (let i = currentRow; i <= endRow; i++) {\n      matrix[i][endCol] = num;\n      num++;\n    }\n    endCol--;\n\n    for (let i = endCol; i >= currentCol; i--) {\n      matrix[endRow][i] = num;\n      num++;\n    }\n    end\nfunction productEqual(n) {\n/**\n * * Write a JavaScript function to check whether the product of digits of a number at even and odd places is equal or not.\n */\n  const num = n.toString().split('');\n  let odd = 1;\n  let even = 1;\n  for (let i = 0; i < num.length; i += 2) {\n    odd *= Number(num[i]);\n  }\n  for (let i = 1; i < num.length; i += 2) {\n    even *= Number(num[i]);\n  }\n  if (odd === even) {\n    return true;\n  }\n  return false;\n}\nfunction getLudic(n) {\n/**\n * * Write a function to get a lucid number smaller than or equal to n.\n */\n    return [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43].filter(\n        num => num <= n);\n}\nfunction highestPowerOf2(n) {\n/**\n * * Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\n */", "entry_point": "highestPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = highestPowerOf2(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar x1 = highestPowerOf2(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 32;\nvar x2 = highestPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let num = 1;\n  while (num <= n) {\n    num *= 2;\n  }\n  return num - 1;\n}\n", "\n    const num = n.toString().split('');\n    let temp = 1;\n    for (let i = 0; i < num.length; i++) {\n        temp *= Number(num[i]);\n    }\n    return temp - 1;\n}\n", "\n  let maxPower = 1;\n  let num = 2;\n  while (num <= n) {\n    maxPower *= 2;\n    num = maxPower * 2;\n  }\n  return maxPower;\n}\n", "\n  return n === 0? 1 : Math.log(n) / Math.log(2);\n}\n", "\n  let highestPowerOf2 = 0;\n  let powerOf2 = 1;\n  while (powerOf2 <= n) {\n    highestPowerOf2 = powerOf2;\n    powerOf2 *= 2;\n  }\n  return highestPowerOf2;\n}\n"]}
{"task_id": "MBJSP/389", "prompt": "function jacobsthalNum(n) {\n/**\n * * Write a function to find the nth jacobsthal number.\n */\n\tif (n === 1) {\n\t\treturn 1\n\t}\n\tif (n === 2) {\n\t\treturn 1\n\t}\n\treturn jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)\n}\nfunction isNonagonal(n) {\n/**\n * * Write a function to find the nth nonagonal number.\n */\n\treturn n * (7 * n - 5) / 2\n}\nfunction jacobsthalLucas(n) {\n/**\n * * Write a function to find the nth jacobsthal-lucas number.\n */\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 2;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn jacobsthalLucas(n - 1) + 2 * jacobsthalLucas(n - 2);\n}\nfunction findLucas(n) {\n/**\n * * Write a function to find the n'th lucas number.\n */", "entry_point": "findLucas", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = findLucas(arg00);\nvar v0 = 76;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = findLucas(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = findLucas(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n\tif (n === 0) {\n\t\treturn 1;\n\t}\n\tif (n === 1) {\n\t\treturn 2;\n\t}\n\treturn findLucas(n - 1) + 2 * findLucas(n - 2);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1) {\n\t\treturn 3;\n\t}\n\treturn findLucas(n - 1) + 2 * findLucas(n - 2);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 1;\n\t}\n\tif (n == 1) {\n\t\treturn 2;\n\t}\n\treturn lucas(n - 1) + lucas(n - 2);\n}\n", "\n\treturn lucasNum(n + 1) - lucasNum(n);\n}\n", "\n\tif (n < 0) {\n\t\treturn 0;\n\t}\n\tif (n == 0) {\n\t\treturn 3;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\treturn lucasNum(n - 1) + 2 * lucasNum(n - 2);\n}\n"]}
{"task_id": "MBJSP/390", "prompt": "function returnSum(dict) {\n/**\n * * Write function to find the sum of all items in the given dictionary.\n */\n  let sum = 0;\n  for (let key in dict) {\n    sum += dict[key];\n  }\n  return sum;\n}\nfunction pairWise(l1) {\n/**\n * * Write a function to iterate over all pairs of consecutive items in a given list.\n */\n  let result = [];\n  let i = 0;\n  let j = 1;\n  while (i < l1.length - 1) {\n    result.push([l1[i], l1[j]]);\n    i++;\n    j++;\n  }\n  return result;\n}\nfunction multiplyList(items) {\n/**\n * * Write a JavaScript function to multiply all items in the list.\n */\n    let result = 1;\n    for (let i = 0; i < items.length; i++) {\n        result *= items[i];\n    }\n    return result;\n}\nfunction addString(list, string) {\n/**\n * * Write a function to insert a given string at the beginning of all items in a list.\n */", "entry_point": "addString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar arg01 = \"temp{0}\";\nvar x0 = addString(arg00, arg01);\nvar v0 = [\"temp1\", \"temp2\", \"temp3\", \"temp4\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"b\", \"c\", \"d\"];\nvar arg11 = \"python{0}\";\nvar x1 = addString(arg10, arg11);\nvar v1 = [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 8];\nvar arg21 = \"string{0}\";\nvar x2 = addString(arg20, arg21);\nvar v2 = [\"string5\", \"string6\", \"string7\", \"string8\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  list.push(string);\n  return list;\n}\n", "\n  let newList = [];\n  newList = list;\n  newList.push(string);\n  return newList;\n}\n", "\n  let result = [];\n  for (let item in list) {\n    result.push(string + item);\n  }\n  return result;\n}\n", "\n    let result = [];\n    let i = 0;\n    while (i < list.length) {\n        result.push(string + list[i]);\n        i++;\n    }\n    return result;\n}\n", "\n  let result = list;\n  let index = 0;\n  while (index < result.length) {\n    result[index] = string;\n    index++;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/391", "prompt": "function checkSubset(list1, list2) {\n/**\n * * Write a function to check if a nested list is a subset of another nested list.\n */\n  const length1 = list1.length;\n  const length2 = list2.length;\n  const map1 = {};\n  const map2 = {};\n  let i = 0;\n  let j = 0;\n  while (i < length1) {\n    const item = list1[i];\n    const key = item.toString();\n    map1[key] = true;\n    i++;\n  }\n  i = 0;\n  while (j < length2) {\n    const item = list2[j];\n    const key = item.toString();\n    if (map1[key] !== true) {\n      return false;\n    }\n    map2[key] = true;\n    j++;\n  }\n  return true;\n}\nfunction checkSubsetList(list1, list2) {\n/**\n * * Write a function to check if a nested list is a subset of another nested list.\n */\n  let check = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i][j] === list2[j][check]) {\n        check++;\n      }\n    }\n  }\n  if (check === list2[0].length) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction sortedDict(dict1) {\n/**\n * * Write a function to sort a list in a dictionary.\n */\n  let dict2 = {};\n  for (let key in dict1) {\n    dict2[key] = dict1[key].sort((a, b) => a - b);\n  }\n  return dict2;\n}\nfunction convertListDictionary(l1, l2, l3) {\n/**\n * * Write a function to convert more than one list to nested dictionary.\n */", "entry_point": "convertListDictionary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"S001\", \"S002\", \"S003\", \"S004\"];\nvar arg01 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"];\nvar arg02 = [85, 98, 89, 92];\nvar x0 = convertListDictionary(arg00, arg01, arg02);\nvar v0 = [{'\"S001\"':{'\"Adina Park\"':85}}, {'\"S002\"':{'\"Leyton Marsh\"':98}}, {'\"S003\"':{'\"Duncan Boyle\"':89}}, {'\"S004\"':{'\"Saim Richards\"':92}}];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"abc\", \"def\", \"ghi\", \"jkl\"];\nvar arg11 = [\"python\", \"program\", \"language\", \"programs\"];\nvar arg12 = [100, 200, 300, 400];\nvar x1 = convertListDictionary(arg10, arg11, arg12);\nvar v1 = [{'\"abc\"':{'\"python\"':100}}, {'\"def\"':{'\"program\"':200}}, {'\"ghi\"':{'\"language\"':300}}, {'\"jkl\"':{'\"programs\"':400}}];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"A1\", \"A2\", \"A3\", \"A4\"];\nvar arg21 = [\"java\", \"C\", \"C++\", \"DBMS\"];\nvar arg22 = [10, 20, 30, 40];\nvar x2 = convertListDictionary(arg20, arg21, arg22);\nvar v2 = [{'\"A1\"':{'\"java\"':10}}, {'\"A2\"':{'\"C\"':20}}, {'\"A3\"':{'\"C++\"':30}}, {'\"A4\"':{'\"DBMS\"':40}}];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let i = 0;\n  while (i < l1.length) {\n    let j = 0;\n    while (j < l2.length) {\n      let k = 0;\n      while (k < l3.length) {\n        l1[i][j][k] = l2[j][k][l3[k]];\n        k++;\n      }\n      j++;\n    }\n    i++;\n  }\n}\n", "\n  const length1 = l1.length;\n  const length2 = l2.length;\n  const length3 = l3.length;\n  let index = 0;\n  for (let i = 0; i < length1; i++) {\n    l1[i] = sortedDict(l1[i]);\n  }\n  for (let i = 0; i < length2; i++) {\n    l2[i] = sortedDict(l2[i]);\n  }\n  for (let i = 0; i < length3; i++) {\n    l3[i] = sortedDict(l3[i]);\n  }\n  index = 0;\n  for (let i = 0; i < length1; i++) {\n    for (let j = 0; j < length2; j++) {\n      for (let k = 0; k < length3; k++) {\n        l1[i][j][k] = index;\n        index++;\n      }\n    }\n  }\n}\n", "\n  let dict = {};\n  for (let i = 0; i < l1.length; i++) {\n    dict[l1[i]] = l2[i];\n    for (let j = 0; j < l3.length; j++) {\n      dict[l1[i] + l3[j]] = l3[j];\n    }\n  }\n  return dict;\n}\n", "\n  let dict3 = {};\n  let dict1 = {};\n  let dict2 = {};\n  for (let i = 0; i < l1.length; i++) {\n    dict1[i] = l1[i];\n  }\n  for (let i = 0; i < l2.length; i++) {\n    dict2[i] = l2[i];\n  }\n  for (let i = 0; i < l3.length; i++) {\n    dict3[i] = l3[i];\n  }\n  return {dict1, dict2, dict3};\n}\n", "\n  let length1 = l1.length;\n  let length2 = l2.length;\n  let length3 = l3.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < length1) {\n    while (j < length2) {\n      while (k < length3) {\n        const key = l1[i][j].concat(l2[j][k]).join(\"\");\n        l3[k].push(key);\n        k++;\n      }\n      j++;\n      k = 0;\n    }\n    j = 0;\n    i++;\n  }\n  return l3;\n}\n"]}
{"task_id": "MBJSP/392", "prompt": "function extractMax(input) {\n/**\n * * Write a function to extract the maximum numeric value from a string by using regex.\n */\n  let regex = /(\\d+)/g;\n  let matches = input.match(regex);\n  let max = Math.max(...matches);\n  return max;\n}\nfunction floorMax(a, b, n) {\n/**\n * * Write a JavaScript function to find maximum possible value for the given periodic function.\n */\n    return Math.floor((a * n) / b);\n}\nfunction maxSumPairDiffLessthanK(arr, n, k) {\n/**\n * * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n */\n\tarr.sort((a, b) => a - b);\n\tlet dp = new Array(n).fill(0);\n\tdp[0] = 0;\n\tfor (let i = 1; i < n; i++) {\n\t\tdp[i] = dp[i - 1];\n\t\tif (arr[i] - arr[i - 1] < k) {\n\t\t\tif (i >= 2) {\n\t\t\t\tdp[i] = Math.max(dp[i], dp[i - 2] + arr[i] + arr[i - 1]);\n\t\t\t} else {\n\t\t\t\tdp[i] = Math.max(dp[i], arr[i] + arr[i - 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n - 1];\n}\nfunction getMaxSum(n) {\n/**\n * * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n */", "entry_point": "getMaxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 60;\nvar x0 = getMaxSum(arg00);\nvar v0 = 106;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = getMaxSum(arg10);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = getMaxSum(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let dp = new Array(n).fill(0);\n    dp[0] = 0;\n    for (let i = 1; i < n; i++) {\n        dp[i] = dp[i - 1];\n        if (i >= 5 && dp[i - 5] > 0) {\n            dp[i] = Math.max(dp[i], dp[i - 5] + i * i);\n        }\n        if (i >= 4 && dp[i - 4] > 0) {\n            dp[i] = Math.max(dp[i], dp[i - 4] + i * i * i);\n        }\n        if (i >= 3 && dp[i - 3] > 0) {\n            dp[i] = Math.max(dp[i], dp[i - 3] + i * i * i * i);\n        }\n        if (i >= 2 && dp[i - 2] > 0) {\n            dp[i] = Math.max(dp[i], dp[i - 2] + i * i * i * i * i);\n        }\n    }\n    return dp[n - 1];\n}\n", "\n    let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    return Math.floor(((arr[arr.length - 1] + arr[arr.length / 2] + arr[arr.length / 3] + arr[arr.length / 4] + arr[arr.length / 5])));\n}\n", "\n\tlet arr = new Array(n).fill(0);\n\tfor (let i = 0; i < n; i++) {\n\t\tarr[i] = (i % 2 === 0)? (n / 2) : (n / 3);\n\t}\n\tarr.sort((a, b) => a - b);\n\tlet dp = new Array(n).fill(0);\n\tdp[0] = arr[0];\n\tfor (let i = 1; i < n; i++) {\n\t\tdp[i] = Math.max(dp[i - 1], arr[i] + dp[i - 2] + dp[i - 3] + dp[i - 4] + dp[i - 5]);\n\t}\n\treturn dp[n - 1];\n}\n", "\n\tn = n * (n / 5);\n\tlet sum = 0;\n\tfor (let i = 1; i <= n / 5; i++) {\n\t\tsum = Math.max(sum, (n - 5 * i) * i);\n\t}\n\treturn sum;\n}\n", "\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n == 1) {\n\t\treturn 1;\n\t}\n\tlet res = n;\n\twhile (n > 1) {\n\t\tif (n % 5 == 0) {\n\t\t\tn = n / 5;\n\t\t\tres = Math.max(res, n);\n\t\t}\n\t\tif (n % 4 == 0) {\n\t\t\tn = n / 4;\n\t\t\tres = Math.max(res, n);\n\t\t}\n\t\tif (n % 3 == 0) {\n\t\t\tn = n / 3;\n\t\t\tres = Math.max(res, n);\n\t\t}\n\t\tif (n % 2 == 0) {\n\t\t\tn = n / 2;\n\t\t\tres = Math.max(res, n);\n\t\t}\n\t}\n\treturn res;\n}\n"]}
{"task_id": "MBJSP/393", "prompt": "function palindromeLambda(texts) {\n/**\n * * Write a function to find palindromes in a given list of strings using lambda function.\n */\n  return texts.filter(text => {\n    const reversedText = text.split(\"\").reverse().join(\"\");\n    return text === reversedText;\n  });\n}\nfunction squareNums(nums) {\n/**\n * * Write a function to find squares of individual elements in a list using lambda function.\n */\n  return nums.map(num => num * num);\n}\nfunction countEven(arraynums) {\n/**\n * * Write a function to find number of even elements in the given list using lambda function.\n */\n  return arrayNums.filter(num => num % 2 === 0).length;\n}\nfunction maxLengthList(inputlist) {\n/**\n * * Write a function to find the list with maximum length using lambda function.\n */", "entry_point": "maxLengthList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = maxLengthList(arg00);\nvar v0 = [3, [13, 15, 17]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]];\nvar x1 = maxLengthList(arg10);\nvar v1 = [5, [1, 2, 3, 4, 5]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]];\nvar x2 = maxLengthList(arg20);\nvar v2 = [4, [6, 7, 8, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return inputlist.reduce((acc, curr) => {\n    return acc.length < curr.length? acc : curr;\n  });\n}\n", "\n  return inputlist.reduce((acc, curr) => {\n    if (curr.length > acc.length) {\n      return curr;\n    }\n    return acc;\n  });\n}\n", "\n  const maxLength = inputlist.reduce((maxLength, item) => {\n    return item.length > maxLength.length? item : maxLength;\n  });\n  return inputlist.filter(item => item.length === maxLength.length);\n}\n", "\n  const arrayOfStrings = inputlist.map(input => input.split(\"\")).flat(4);\n  return arrayOfStrings.reduce((maxlength, currlength) => {\n    return currlength > maxlength? currlength : maxlength;\n  });\n}\n", "\n  const list = [];\n  inputlist.forEach(listItem => {\n    list.push(listItem.length);\n  });\n  return list.sort((a, b) => b - a).pop();\n}\n"]}
{"task_id": "MBJSP/394", "prompt": "function checkNone(testtup) {\n/**\n * * Write a function to check if the given tuple has any \"none\" value or not.\n */\n  return testTup.some(x => x === null);\n}\nfunction checkValid(testtup) {\n/**\n * * Write a function to check if the given tuple contains all valid values or not.\n */\n  return testTup.every(function(element) {\n    return element === true;\n  });\n}\nfunction checkExpression(exp) {\n/**\n * * Write a function to check if the given expression is balanced or not.\n */\n  let stack = [];\n  let map = {\n    '{': '}',\n    '(': ')',\n    '[': ']'\n  };\n\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === '{' || exp[i] === '(' || exp[i] === '[') {\n      stack.push(exp[i]);\n    } else if (exp[i] === '}' || exp[i] === ')' || exp[i] === ']') {\n      if (map[stack.pop()] !== exp[i]) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n}\nfunction checkDistinct(testtup) {\n/**\n * * Write a function to check if given tuple is distinct or not.\n */", "entry_point": "checkDistinct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 4, 5, 6, 1, 4];\nvar x0 = checkDistinct(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 4, 5, 6];\nvar x1 = checkDistinct(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 5, 6];\nvar x2 = checkDistinct(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testtup.some(", "\n  let distinct = [];\n  for (let i = 0; i < testtup.length; i++) {\n    if (testtup[i] === null) {\n      return false;\n    }\n    if (distinct.indexOf(testtup[i]) === -1) {\n      distinct.push(testtup[i]);\n    }\n  }\n  return true;\n}\n", "\n  let sorted = testtup.map(", "\n  return testtup.every(", "\n  return testtup.length === _.uniq(testtup).length;\n}\n"]}
{"task_id": "MBJSP/395", "prompt": "function firstRepeatedWord(str1) {\n/**\n * * Write a JavaScript function to find the first repeated word in a given string.\n */\n    let arr = str1.split(' ');\n    let obj = {};\n    for (let i = 0; i < arr.length; i++) {\n        if (obj[arr[i]]) {\n            return arr[i];\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    return 'None';\n}\nfunction firstRepeatedChar(str1) {\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\n  let charMap = {};\n  for (let i = 0; i < str1.length; i++) {\n    if (charMap[str1[i]]) {\n      return str1[i];\n    } else {\n      charMap[str1[i]] = true;\n    }\n  }\n  return \"None\";\n}\nfunction firstRepeatedChar(str) {\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\n  let charMap = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charMap[str[i]]) {\n      return str[i];\n    } else {\n      charMap[str[i]] = 1;\n    }\n  }\n  return \"\\x00\";\n}\nfunction firstNonRepeatingCharacter(str1) {\n/**\n * * Write a JavaScript function to find the first non-repeated character in a given string.\n */", "entry_point": "firstNonRepeatingCharacter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcabc\";\nvar x0 = firstNonRepeatingCharacter(arg00);\nvar v0 = null;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = firstNonRepeatingCharacter(arg10);\nvar v1 = \"a\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ababc\";\nvar x2 = firstNonRepeatingCharacter(arg20);\nvar v2 = \"c\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let charMap = {};\n  for (let i = 0; i < str1.length; i++) {\n    if (!charMap[str1[i]]) {\n      return str1[i];\n    } else {\n      charMap[str1[i]] = true;\n    }\n  }\n  return \"\\x00\";\n}\n", "\n  let charMap = {};\n  for (let i = 0; i < str1.length; i++) {\n    let key = str1[i];\n    if (!charMap[key]) {\n      charMap[key] = true;\n    }\n  }\n  for (let i = 0; i < str1.length; i++) {\n    let key = str1[i];\n    if (charMap[key]) {\n      return key;\n    }\n  }\n  return \"\\x00\";\n}\n", "\n    let arr = str1.split(' ');\n    let obj = {};\n    for (let i = 0; i < arr.length; i++) {\n        if (obj[arr[i]]) {\n            return arr[i];\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    return 'None';\n}\n", "\n  let arr = str1.split(' ');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == str1) {\n      return arr[i];\n    }\n  }\n  return 'None';\n}\n", "\n  for (let i = 0; i < str1.length; i++) {\n    if (!charMap[str1[i]]) {\n      return str1[i];\n    }\n  }\n  return '\\x00';\n}\n"]}
{"task_id": "MBJSP/396", "prompt": "function checkSubstring(string, sample) {\n/**\n * * Write a function to check if the given string starts with a substring using regex.\n */\n  const regex = new RegExp(`^${sample}`);\n  if (string.match(regex)) {\n    return \"string starts with the given substring\";\n  }\n  return \"string doesnt start with the given substring\";\n}\nfunction checkAlphanumeric(string) {\n/**\n * * Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n */\n    return /^[\\w]+$/.test(string) ? \"Accept\" : \"Discard\";\n}\nfunction checkStr(string) {\n/**\n * * Write a function to check whether the given string is starting with a vowel or not using regex.\n */\n    const regex = /^[aeiou]/i;\n    return regex.test(string) ? \"Valid\" : \"Invalid\";\n}\nfunction checkChar(string) {\n/**\n * * Write a function to check whether the given string starts and ends with the same character or not using regex.\n */", "entry_point": "checkChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abba\";\nvar x0 = checkChar(arg00);\nvar v0 = \"Valid\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"a\";\nvar x1 = checkChar(arg10);\nvar v1 = \"Valid\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcd\";\nvar x2 = checkChar(arg20);\nvar v2 = \"Invalid\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const regex = new RegExp(`[${string}]`);\n    if (string.match(regex)) {\n      return \"Valid\";\n    }\n    return \"Invalid\";\n}\n", "\n    return /^[a-z0-9.]+$/.test(string)? \"Accept\" : \"Discard\";\n}\n", "\n    return /^[a-zA-Z]+$/.test(string)? \"Valid\" : \"Invalid\";\n}\n", "\n    const regex = /^[^ ]+$/;\n    return regex.test(string)? \"Accept\" : \"Invalid\";\n}\n", "\n    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[\\d])$/;\n    return regex.test(string)? \"Valid\" : \"Invalid\";\n}\n"]}
{"task_id": "MBJSP/397", "prompt": "function findCloset(a, b, c, p, q, r) {\n/**\n * * Write a function to find three closest elements from three sorted arrays.\n */\n\tvar diff = 2147483647; \n\tvar res = []; \n\tfor (var i = 0; i < p; i++) { \n\t\tfor (var j = 0; j < q; j++) { \n\t\t\tfor (var k = 0; k < r; k++) { \n\t\t\t\tvar minimum = Math.min(a[i], Math.min(b[j], c[k])); \n\t\t\t\tvar maximum = Math.max(a[i], Math.max(b[j], c[k])); \n\t\t\t\tif (maximum - minimum < diff) { \n\t\t\t\t\tres = [a[i], b[j], c[k]]; \n\t\t\t\t\tdiff = maximum - minimum; \n\t\t\t\t} \n\t\t\t\tif (diff == 0) { \n\t\t\t\t\tbreak; \n\t\t\t\t} \n\t\t\t} \n\t\t} \n\t} \n\treturn res; \n}\nfunction getMedian(arr1, arr2, n) {\n/**\n * * Write a function to find the median of two sorted arrays of same size.\n */\n  const arr = [...arr1, ...arr2].sort((a, b) => a - b);\n  const mid = Math.floor(arr.length / 2);\n  return arr.length % 2 === 0 ? (arr[mid - 1] + arr[mid]) / 2 : arr[mid];\n}\nfunction maxOfThree(num1, num2, num3) {\n/**\n * * Write a function to find maximum of three numbers.\n */\n  return Math.max(num1, num2, num3);\n}\nfunction medianNumbers(a, b, c) {\n/**\n * * Write a function to find the median of three specific numbers.\n */", "entry_point": "medianNumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar arg01 = 55;\nvar arg02 = 65;\nvar x0 = medianNumbers(arg00, arg01, arg02);\nvar v0 = 55.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar arg11 = 10;\nvar arg12 = 30;\nvar x1 = medianNumbers(arg10, arg11, arg12);\nvar v1 = 20.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar arg21 = 45;\nvar arg22 = 75;\nvar x2 = medianNumbers(arg20, arg21, arg22);\nvar v2 = 45.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let n = a.length + b.length + c.length;\n  n = Math.floor(n / 2);\n  if (a.length + b.length + c.length == 0) {\n    return 0;\n  }\n  if (n % 2 == 1) {\n    return a[n];\n  }\n  else {\n    return (a[n - 1] + a[n]) / 2;\n  }\n}\n", "\n  return getMedian(a, b, c);\n}\n", "\n  const arr = [...a,...b,...c].sort((a, b) => a - b);\n  const mid = Math.floor(arr.length / 2);\n  return arr.length % 2 === 0? (arr[mid - 1] + arr[mid]) / 2 : arr[mid];\n}\n", "\n  var num1 = Math.min(a, b, c);\n  var num2 = Math.max(a, b, c);\n  var num3 = getMedian(a, b, c);\n  return num1 + num2 - num3;\n}\n", "\n  var m1 = maxOfThree(a, b, c);\n  var m2 = getMedian(a, b, c);\n  if (m1 === m2) {\n    return m1;\n  }\n  var m3 = maxOfThree(a, b, c);\n  var m4 = getMedian(a, b, c);\n  if (m3 === m4) {\n    return m3;\n  }\n  return m1;\n}\n"]}
{"task_id": "MBJSP/398", "prompt": "function powerBaseSum(base, power) {\n/**\n * * Write a function to calculate the sum of all digits of the base to the specified power.\n */\n  let sum = 0;\n  for (let i = 1; i <= power; i++) {\n    sum += Math.pow(base, i);\n  }\n  return sum;\n}\nfunction findDigits(n) {\n/**\n * * Write a JavaScript function to count the number of digits in factorial of a given number.\n */\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return n.toString().length + factorial.toString().split('').length - 1;\n}\nfunction sumEvenOdd(list1) {\n/**\n * * Write a function to find the sum of first even and odd number of a given list.\n */\n    var firstEven = list1.find(function(el) {\n        return el % 2 == 0;\n    });\n    var firstOdd = list1.find(function(el) {\n        return el % 2 != 0;\n    });\n    return (firstEven + firstOdd);\n}\nfunction sumOfDigits(nums) {\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */", "entry_point": "sumOfDigits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 2, 56];\nvar x0 = sumOfDigits(arg00);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20, 4, 5, \"b\", 70, \"a\"]];\nvar x1 = sumOfDigits(arg10);\nvar v1 = 19;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, -4, 5, -70];\nvar x2 = sumOfDigits(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return Array.from(nums).reduce(", "\n    return nums.map(", "\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let str = nums[i].toString();\n    sum += str.length;\n  }\n  return sum;\n}\n", "\n    let sum = 0;\n    for (let num of nums) {\n        sum += num.toString().length;\n    }\n    return sum;\n}\n", "\n  var sum = 0;\n  for (let num in nums) {\n    let digit = nums[num].toString().length;\n    sum += digit;\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/399", "prompt": "function isOdd(n) {\n/**\n * * Write a JavaScript function to check whether the given number is odd or not using bitwise operator.\n */\n  return (n & 1) === 1;\n}\nfunction isEven(n) {\n/**\n * * Write a JavaScript function to check whether the given number is even or not using bitwise operator.\n */\n    return (n & 1) === 0;\n}\nfunction pairOrSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of xor of all pairs of numbers in the given array.\n */\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += (arr[i] ^ arr[j]);\n        }\n    }\n    return sum;\n}\nfunction bitwiseXor(testtup1, testtup2) {\n/**\n * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n */", "entry_point": "bitwiseXor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = bitwiseXor(arg00, arg01);\nvar v0 = [15, 6, 5, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 5, 7, 10];\nvar arg11 = [6, 3, 4, 4];\nvar x1 = bitwiseXor(arg10, arg11);\nvar v1 = [13, 6, 3, 14];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 6, 8, 11];\nvar arg21 = [7, 4, 5, 6];\nvar x2 = bitwiseXor(arg20, arg21);\nvar v2 = [11, 2, 13, 13];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let res = 0;\n    for (let i = 0; i < testtup1.length; i++) {\n        res += testtup1[i] ^ testtup2[i];\n    }\n    return res;\n}\n", "\n    let res = 0;\n    for (let i = 0; i < testtup1.length; i++) {\n        res ^= testtup1[i];\n        res ^= testtup2[i];\n    }\n    return res;\n}\n", "\n    return (testtup1[0] ^ testtup2[0]) + (testtup1[1] ^ testtup2[1]);\n}\n", "\n    return testtup1[0] ^ testtup1[1] ^ testtup2[0] ^ testtup2[1];\n}\n", "\n    return (testtup1[0] ^ testtup2[0]) | (testtup1[1] ^ testtup2[1]);\n}\n"]}
{"task_id": "MBJSP/400", "prompt": "function countDuplic(lists) {\n/**\n * * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n */\n    \"use strict\";\n    let element = [],\n        frequency = [],\n        running_count = 1;\n    if (!lists) return [element, frequency];\n    for (let i = 0; i < lists.length - 1; i++) {\n        if (lists[i] === lists[i + 1]) {\n            running_count += 1;\n        } else {\n            frequency.push(running_count);\n            element.push(lists[i]);\n            running_count = 1;\n        }\n    }\n    frequency.push(running_count);\n    element.push(lists[lists.length - 1]);\n    return [element, frequency];\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction extractUnique(testdict) {\n/**\n * * Write a function to extract unique values from the given dictionary values.\n */\n  const keys = Object.keys(testDict);\n  const vals = Object.values(testDict);\n  const uniqueVals = [];\n  vals.forEach((val) => {\n    val.forEach((v) => {\n      if (uniqueVals.indexOf(v) === -1) {\n        uniqueVals.push(v);\n      }\n    });\n  });\n  return uniqueVals.sort((a, b) => a - b);\n}\nfunction extractFreq(testlist) {\n/**\n * * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n */", "entry_point": "extractFreq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4], [1, 2], [4, 3], [5, 6]];\nvar x0 = extractFreq(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 15], [2, 3], [5, 4], [6, 7]];\nvar x1 = extractFreq(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 16], [2, 3], [6, 5], [6, 9]];\nvar x2 = extractFreq(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let tup, frequency = [];\n    let tupFreq = [];\n    let uniqueTups = [],\n        uniqueFreq = [],\n        val = [];\n    let i = 0;\n    for (let i = 0; i < testlist.length; i++) {\n        tup = testlist[i];\n        frequency = [tup[tup.length - 1]];\n        uniqueTups.push(tup);\n        uniqueFreq.push(frequency);\n    }\n    tupFreq = sortListLast(uniqueFreq);\n    for (let i = 0; i < uniqueTups.length; i++) {\n        val = uniqueTups[i];\n        tupFreq.forEach((f) => {\n            if (f.indexOf(val)!== -1) {\n                f.forEach((v) => {\n                    if (v.indexOf(val)!== -1) {\n                        tupFreq.forEach((f2) => {\n                            if (f2.indexOf(val)!== -1) {\n                                f2.forEach((v2) => {\n                                    if (v2.indexOf(val) === 0) {\n                                        if (v2.length > v.length) {\n                                            if (f2.indexOf(v)!== -1) {\n                                                uniqueFreq.pop();\n                                                uniqueFreq.push(v);\n                                                uniqueTups.pop();\n                                                uniqueTups.push(val);\n                                            }\n                                        } else", "\n  const tuples = uniqueTuples(testlist);\n  let freq = [];\n  const { [key]: freqValue } = tuples;\n  if (!freqValue) {\n    return [freq];\n  }\n  freq.push(freqValue);\n  return freq;\n}\n", "\n  const uniqueTuples = extractUnique(testlist);\n  return uniqueTuples.length;\n}\n", "\n  const tuples = getTuples(testlist);\n  const sortedTuples = sortListLast(tuples);\n  const frequency = [];\n  sortedTuples.forEach((t) => {\n    frequency.push(t[t.length - 1]);\n  });\n  return frequency;\n}\n", "\n    let final_list = [],\n        final_dict = {};\n    let testlist_keys = Object.keys(testlist),\n        testlist_vals = Object.values(testlist);\n    let vals = [];\n    let freq = [];\n    testlist_vals.forEach((val) => {\n      val.forEach((v) => {\n        if (final_dict.hasOwnProperty(v)) {\n          if (final_dict[v] === val.length) {\n            freq.push(final_dict[v]);\n            vals.push(v);\n          } else {\n            final_dict[v] = val.length;\n            freq.push(final_dict[v]);\n            vals.push(v);\n          }\n        } else {\n          final_dict[v] = val.length;\n          freq.push(final_dict[v]);\n          vals.push(v);\n        }\n      });\n    });\n    final_list.push(vals);\n    final_list.push(freq);\n    let sorted_dict = sortListLast(final_list);\n    return extractUnique(sorted_dict);\n}\n"]}
{"task_id": "MBJSP/401", "prompt": "function findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction substractElements(testtup1, testtup2) {\n/**\n * * Write a function to substract the elements of the given nested tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const sub = [];\n    for (let j = 0; j < testTup1[i].length; j++) {\n      sub.push(testTup1[i][j] - testTup2[i][j]);\n    }\n    result.push(sub);\n  }\n  return result;\n}\nfunction tupleModulo(testtup1, testtup2) {\n/**\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n */\n  return testTup1.map((element, index) => element % testTup2[index]);\n}\nfunction addNestedTuples(testtup1, testtup2) {\n/**\n * * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n */", "entry_point": "addNestedTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = addNestedTuples(arg00, arg01);\nvar v0 = [[7, 10], [7, 14], [3, 10], [8, 13]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = addNestedTuples(arg10, arg11);\nvar v1 = [[9, 12], [9, 16], [5, 12], [10, 15]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = addNestedTuples(arg20, arg21);\nvar v2 = [[11, 14], [11, 18], [7, 14], [12, 17]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testtup1.map((element, index) => {\n    return testtup2[index].map((innerElement, innerIndex) => {\n      return element[index] + innerElement;\n    });\n  });\n}\n", "\n  return testtup1.map((element, index) => element.map((element2, index2) => element2 + testTup2[index][index2]));\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const sub = [];\n    for (let j = 0; j < testTup1[i].length; j++) {\n      sub.push(testTup1[i][j] + testTup2[i][j]);\n    }\n    result.push(sub);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const sub = [];\n    for (let j = 0; j < testTup1[i].length; j++) {\n      sub.push(testTup1[i][j] + testTup2[i][j]);\n    }\n    result.push(sub);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    for (let j = 0; j < testTup1[i].length; j++) {\n      result.push(testTup1[i][j] + testTup2[i][j]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/402", "prompt": "function maximumProduct(nums) {\n/**\n * * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n */\n    let arr = nums.sort((a, b) => a - b)\n    let len = arr.length\n    return Math.max(arr[0] * arr[1] * arr[len - 1], arr[len - 1] * arr[len - 2] * arr[len - 3])\n}\nfunction exchangeElements(lst) {\n/**\n * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n */\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    if (i % 2 === 0) {\n      let temp = lst[i];\n      lst[i] = lst[i + 1];\n      lst[i + 1] = temp;\n    }\n    i++;\n  }\n  return lst;\n}\nfunction ncrModP(n, r, p) {\n/**\n * * Write a function to compute the value of ncr mod p.\n */\n  let ncr = 1;\n  for (let k = 1; k <= r; k++) {\n    ncr *= n - k + 1;\n    ncr /= k;\n  }\n  return ncr % p;\n}\nfunction ncrModp(n, r, p) {\n/**\n * * Write a function to compute the value of ncr%p.\n */", "entry_point": "ncrModp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 2;\nvar arg02 = 13;\nvar x0 = ncrModp(arg00, arg01, arg02);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 12;\nvar arg12 = 43;\nvar x1 = ncrModp(arg10, arg11, arg12);\nvar v1 = 25;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 17;\nvar arg21 = 9;\nvar arg22 = 18;\nvar x2 = ncrModp(arg20, arg21, arg22);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let ncr = 1;\n  for (let k = 1; k <= r; k++) {\n    ncr *= n - k + 1;\n    ncr /= k;\n  }\n  return ncr % p;\n}\n", "\n  let ncr = 1;\n  for (let k = 1; k <= r; k++) {\n    ncr *= n - k + 1;\n    ncr /= k;\n  }\n  return ncr % p;\n}\n", "\n  let ncr = 1;\n  for (let k = 1; k <= r; k++) {\n    ncr *= n - k + 1;\n    ncr /= k;\n  }\n  return ncr % p;\n}\n", "\n  let ncr = 1;\n  for (let k = 1; k <= r; k++) {\n    ncr *= n - k + 1;\n    ncr /= k;\n  }\n  return ncr % p;\n}\n", "\n  let ncr = 1;\n  for (let k = 1; k <= r; k++) {\n    ncr *= n - k + 1;\n    ncr /= k;\n  }\n  return ncr % p;\n}\n"]}
{"task_id": "MBJSP/403", "prompt": "function validityTriangle(a, b, c) {\n/**\n * * Write a function to check if the triangle is valid or not.\n */\n    let sum = a + b + c;\n    return sum === 180;\n}\nfunction checkIp(ip) {\n/**\n * * Write a function to check whether the given ip address is valid or not using regex.\n */\n  const regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n  return regex.test(ip) ? \"Valid IP address\" : \"Invalid IP address\";\n}\nfunction checkEmail(email) {\n/**\n * * Write a function to check if the string is a valid email address or not using regex.\n */\n  const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regex.test(String(email).toLowerCase()) ? \"Valid Email\" : \"Invalid Email\";\n}\nfunction isValidUrl(str) {\n/**\n * * Write a function to check if a url is valid or not using regex.\n */", "entry_point": "isValidUrl", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"https:\\/\\/www.google.com\";\nvar x0 = isValidUrl(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"https:/www.gmail.com\";\nvar x1 = isValidUrl(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"https:\\/\\/ www.redit.com\";\nvar x2 = isValidUrl(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const urlRegex = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900", "\n  const regex = /^(https?|ftp):\\/\\/([a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+[a-zA-Z0-9][a-zA-Z0-9\\-]*\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9\\-\\.\\,\\?'\\\\\\+&%\\$#\\=~_\\-]+))*$/;\n  return regex.test(str)? \"Valid URL\" : \"Invalid URL\";\n}\n", "\n  return /(http|https):\\/\\/(([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])|(www\\.)+([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])/i.test(str);\n}\n", "\n  const regex = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\", "\n  const urlRegex = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900"]}
{"task_id": "MBJSP/404", "prompt": "function maxOfTwo(x, y) {\n/**\n * * Write a function to find maximum of two numbers.\n */\n  return x > y ? x : y;\n}\nfunction findMinSum(a, b, n) {\n/**\n * * Write a JavaScript function to find the minimum sum of absolute differences of two arrays.\n */\n    let first = a.sort((a, b) => a - b).slice(0, n)\n    let second = b.sort((a, b) => a - b).slice(0, n)\n    let sum = 0\n    for (let i = 0; i < first.length; i++) {\n        sum += Math.abs(first[i] - second[i])\n    }\n    return sum\n}\nfunction minOfTwo(x, y) {\n/**\n * * Write a function to find minimum of two numbers.\n */\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\nfunction minimum(a, b) {\n/**\n * * Write a JavaScript function to find the minimum of two numbers.\n */", "entry_point": "minimum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar x0 = minimum(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = -5;\nvar arg11 = -4;\nvar x1 = minimum(arg10, arg11);\nvar v1 = -5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 0;\nvar arg21 = 0;\nvar x2 = minimum(arg20, arg21);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return a < b? a : b;\n}\n", "\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n", "\n    if (a < b) {\n    return a\n  } else {\n    return b;\n  }\n}\n", "\n  return x < y? x : y;\n}\n", "\n  if (a < b) {\n    return a;\n  } else {\n    return b;\n  }\n}\n"]}
{"task_id": "MBJSP/405", "prompt": "function allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are within a given range or not.\n */\n    // n = 5, l = 2, r = 4\n\n    // l + r + 1 = n\n    let bits = n - (l + r + 1);\n    if (bits > 0) {\n        return true\n    } else {\n        return false\n    }\n}\nfunction countElim(num) {\n/**\n * * Write a function to count the elements in a list until an element is a tuple.\n */\n  let count = 0;\n  while (typeof num[count] !== 'object') {\n    count += 1;\n  }\n\n  return count;\n}\nfunction uniqueElement(arr, n) {\n/**\n * * Write a JavaScript function to check whether an array contains only one distinct element or not.\n */\n    let set = new Set(arr);\n    if (set.size === 1) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\nfunction checkTuplex(tuplex, tuple1) {\n/**\n * * Write a function to check whether an element exists within a tuple.\n */", "entry_point": "checkTuplex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg01 = \"r\";\nvar x0 = checkTuplex(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg11 = \"5\";\nvar x1 = checkTuplex(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg21 = 3;\nvar x2 = checkTuplex(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    if (tuple1.length === 1) {\n        for (let i = 0; i < tuplex.length; i++) {\n            if (tuplex[i] === tuple1[0]) {\n                return true;\n            }\n        }\n        return false;\n    } else {\n        let tuple1set = new Set(tuple1);\n        let tuplexset = new Set(tuplex);\n        let result = false;\n        for (let i = 0; i < tuplex.length; i++) {\n            if (tuplex[i] in tuple1set &&!tuple1set.has(tuplex[i])) {\n                result = true;\n            }\n        }\n        return result;\n    }\n}\n", "\n    let check = false;\n    for (let i = 0; i < tuple1.length; i++) {\n        if (tuplex === tuple1[i]) {\n            check = true;\n        }\n    }\n    return check;\n}\n", "\n  return tuplex.indexOf(tuple1)!== -1\n}\n", "\n  let set = new Set(tuplex);\n  let set1 = new Set(tuple1);\n  if (set.size > 1) {\n    return \"NO\";\n  } else if (set.size === 1) {\n    if (set1.has(set.values()[0])) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n  } else {\n    return \"NO\";\n  }\n}\n", "\n    return (tuplex[0][0] === tuple1[0]) && (tuplex[0][1] === tuple1[1]) && (tuplex[1][0] === tuple1[0]) && (tuplex[1][1] === tuple1[1])\n}\n\nvar console = {\n    log: "]}
{"task_id": "MBJSP/406", "prompt": "function lastDigitFactorial(n) {\n/**\n * * Write a JavaScript function to find the last digit in factorial of a given number.\n */\n    return n < 10 ? n : lastDigitFactorial(n / 10 >> 0) * 10 % 10;\n}\nfunction checkEvenParity(x) {\n/**\n * * Write a JavaScript function to check for even parity of a given number.\n */\n    return (x % 2 === 0) ? true : false;\n}\nfunction checkOddParity(x) {\n/**\n * * Write a JavaScript function to check for odd parity of a given number.\n */\n    return (x % 2 !== 0) ? true : false;\n}\nfunction findParity(x) {\n/**\n * * Write a JavaScript function to find the parity of a given number.\n */", "entry_point": "findParity", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = findParity(arg00);\nvar v0 = \"Even Parity\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = findParity(arg10);\nvar v1 = \"Odd Parity\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = findParity(arg20);\nvar v2 = \"Even Parity\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var result = null;\n    if (checkEvenParity(x)) {\n        result = 0;\n    }\n    else if (checkOddParity(x)) {\n        result = 1;\n    }\n    return result;\n}\nvar check = [3, 5, 7, 9, 11, 13, 15];\nvar parity = [0, 0, 0, 1, 0, 1, 1];\n", "\n    return checkOddParity(x)? 'odd' : checkEvenParity(x)? 'even' : 'unknown';\n}\n", "\n    return checkEvenParity(x)? 'even' : checkOddParity(x)? 'odd' : 'unknown';\n}\n", "\n    return checkOddParity(x)? 0 : 1;\n}\n", "\n    return checkEvenParity(x)? 'even' : 'odd';\n}\nvar isOdd = checkOddParity;\nvar isEven = checkEvenParity;\nvar findParity = findParity;\nvar isEvenParity = findParity;\nvar isOddParity = findParity;\n"]}
{"task_id": "MBJSP/407", "prompt": "function sameLength(a, b) {\n/**\n * * Write a JavaScript function to check whether the given two numbers have same number of digits or not.\n */\n    return (a.toString().length === b.toString().length) ? true : false;\n}\nfunction lastTwoDigits(n) {\n/**\n * * Write a JavaScript function to find the last two digits in factorial of a given number.\n */\n  let a = 1;\n  while (n > 1) {\n    a *= n;\n    n--;\n  }\n  return a % 100;\n}\nfunction findDigits(n) {\n/**\n * * Write a JavaScript function to count the number of digits in factorial of a given number.\n */\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return n.toString().length + factorial.toString().split('').length - 1;\n}\nfunction rearrangeBigger(n) {\n/**\n * * Write a function to create the next bigger number by rearranging the digits of a given number.\n */", "entry_point": "rearrangeBigger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = rearrangeBigger(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = rearrangeBigger(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 102;\nvar x2 = rearrangeBigger(arg20);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n.toString().split('').reduce((prev, curr) => {\n    return prev + parseInt(curr, 10) + parseInt(prev, 10);\n  });\n}\n", "\n  let num = n;\n  let arr = num.toString().split('');\n  let newNum = '';\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[i - 1]) {\n      let index = arr.indexOf(arr[i]);\n      arr[i - 1] = arr[index];\n      arr[index] = arr[i - 1] + arr[i];\n    }\n  }\n  newNum = arr.join('');\n  return parseInt(newNum);\n}\n", "\n  let str = n.toString();\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    if (i % 2 === 0) {\n      a = a * 10 + parseInt(str[i]);\n    } else {\n      b = b * 10 + parseInt(str[i]);\n    }\n  }\n  for (let i = 0; i < str.length / 2; i++) {\n    c = c * 10 + parseInt(str[i]);\n  }\n  for (let i = str.length / 2; i < str.length; i++) {\n    d = d * 10 + parseInt(str[i]);\n  }\n  return (a > b)? a + c + d : b + c + d;\n}\n", "\n  let result = 0;\n  let temp = n.toString();\n  let j = temp.length - 1;\n  while (j > 0) {\n    let a = temp[j - 1];\n    let b = temp[j];\n    let k = j;\n    let lastDigit;\n    if (b >= a) {\n      lastDigit = b;\n    } else {\n      lastDigit = a;\n    }\n    let index = temp.indexOf(lastDigit);\n    let num = temp.charAt(index - 1);\n    temp = temp.substring(0, index - 1) + temp.charAt(index - 1) + temp.substring(index + 1);\n    temp = temp.substring(0, index - 1) + num + temp.substring(index + 1);\n    temp = temp.substring(0, index - 1) + num + temp.substring(index + 1);\n    temp = temp.substring(0, index - 1) + num + temp.substring(index + 1);\n    j = index;\n  }\n  result = temp;\n  return result;\n}\n", "\n  let arr = n.toString().split('');\n  let newNum = '';\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i].length > arr[i + 1].length) {\n      arr[i] += arr[i + 1].substring(arr[i + 1].length - arr[i].length);\n      arr[i + 1] = arr[i + 1].substring(0, arr[i + 1].length - arr[i].length) + arr[i];\n    }\n    newNum = arr.join('') + '';\n  }\n  return newNum;\n}\n"]}
{"task_id": "MBJSP/408", "prompt": "function countPairs(arr, n) {\n/**\n * * Write a JavaScript function to count equal element pairs from the given array.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction countPairs(arr, n) {\n/**\n * * Write a JavaScript function to count unequal element pairs from the given array.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] !== arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction kSmallestPairs(nums1, nums2, k) {\n/**\n * * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n */", "entry_point": "kSmallestPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 7];\nvar arg01 = [2, 4, 6];\nvar arg02 = 2;\nvar x0 = kSmallestPairs(arg00, arg01, arg02);\nvar v0 = [[1, 2], [1, 4]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 7];\nvar arg11 = [2, 4, 6];\nvar arg12 = 1;\nvar x1 = kSmallestPairs(arg10, arg11, arg12);\nvar v1 = [[1, 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 7];\nvar arg21 = [2, 4, 6];\nvar arg22 = 7;\nvar x2 = kSmallestPairs(arg20, arg21, arg22);\nvar v2 = [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const p = new PriorityQueue<Pair>(k, (x, y) => x.cost - y.cost);\n  let cnt = 0;\n  for (let i = 0; i < nums1.length && cnt < k; i++) {\n    for (let j = 0; j < nums2.length && cnt < k; j++) {\n      const val = new Pair(nums1[i], nums2[j]);\n      p.enqueue(val);\n      cnt++;\n    }\n  }\n  let res = [];\n  while (!p.isEmpty()) {\n    const val = p.dequeue();\n    res.push([val.nums1, val.nums2]);\n  }\n  return res;\n}\n", "\n  let count = 0;\n  let extra = nums1.length + nums2.length;\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      if (nums1[i] + nums2[j] === k) {\n        count++;\n      }\n    }\n  }\n  return extra < k? count : 0;\n}\n", "\n  return Array.from(new Set([...nums1,...nums2, nums1.sort((a, b) => a - b), nums2.sort((a, b) => b - a)]))\n    .slice(0, k)\n    .map((arr) => [...arr].sort((a, b) => a - b))\n    .map((arr) => arr.map((item) => item[1] - item[0]))\n    .reduce((arr, item) => [...arr,...item], [])\n    .sort((a, b) => a[1] - b[1]);\n}\n", "\n  let pairs = 0;\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      if (nums1[i] + nums2[j] === k) {\n        pairs++;\n      }\n    }\n  }\n  return pairs;\n}\n", "\n  let arr = [];\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      arr.push({ n1: nums1[i], n2: nums2[j] });\n    }\n  }\n  let count = 0;\n  let i = 0;\n  while (i < k) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j].n1 + arr[j].n2 < 0) {\n        i++;\n      } else {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/409", "prompt": "function findCombinations(testlist) {\n/**\n * * Write a function to find the combinations of sums with tuples in the given tuple list.\n */\n  const length = testList.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      result.push([testList[i][0] + testList[j][0], testList[i][1] + testList[j][1]]);\n    }\n  }\n  return result;\n}\nfunction minK(testlist, k) {\n/**\n * * Write a function to find minimum k records from tuple list.\n */\n  const sortedList = testList.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(sortedList[i]);\n  }\n  return result;\n}\nfunction minDifference(testlist) {\n/**\n * * Write a function to find the minimum difference in the tuple pairs of given tuples.\n */\n  const min = testList.reduce((acc, item) => Math.min(acc, item[1] - item[0]), 999999);\n  const minDiff = testList.reduce((acc, item) => Math.abs(item[1] - item[0]) < acc ? Math.abs(item[1] - item[0]) : acc, 999999);\n\n  return minDiff === 999999 ? -1 : minDiff;\n}\nfunction minProductTuple(list1) {\n/**\n * * Write a function to find the minimum product from the pairs of tuples within a given list.\n */", "entry_point": "minProductTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 7], [2, 6], [1, 8], [4, 9]];\nvar x0 = minProductTuple(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [15, 2], [5, 10]];\nvar x1 = minProductTuple(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 44], [10, 15], [20, 5], [12, 9]];\nvar x2 = minProductTuple(arg20);\nvar v2 = 100;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const min = list1.reduce((acc, item) => Math.min(acc, item[0] * item[1]), -1);\n  return list1.reduce((acc, item) => acc < min? min : acc < item[0] * item[1]? item[0] * item[1] : acc, min);\n}\n", "\n  const min = list1.reduce((acc, item) => Math.min(acc, item[0] * item[1]), 999999);\n  const product = list1.reduce((acc, item) => Math.prod(item), 1);\n\n  return product === 999999? -1 : Math.min(product, min);\n}\n", "\n  list1.sort((a, b) => a[1] - b[1]);\n  const minProduct = list1.reduce((acc, item) => acc * item[0] * item[1], 1);\n  return minProduct === 1? -1 : minProduct;\n}\n", "\n  const sortedList = list1.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < sortedList.length; i++) {\n    result.push([sortedList[i][0] * sortedList[i][1], sortedList[i][0]]);\n  }\n  return result;\n}\n", "\n  return list1.reduce((acc, item) => acc * item[0] * item[1], 1);\n}\n"]}
{"task_id": "MBJSP/410", "prompt": "function maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction floorMin(a, b, n) {\n/**\n * * Write a JavaScript function to find minimum possible value for the given periodic function.\n */\n  return Math.floor((a * n) / b)\n}\nfunction exchangeElements(lst) {\n/**\n * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n */\n  let len = lst.length;\n  let i = 0;\n  while (i < len) {\n    if (i % 2 === 0) {\n      let temp = lst[i];\n      lst[i] = lst[i + 1];\n      lst[i + 1] = temp;\n    }\n    i++;\n  }\n  return lst;\n}\nfunction minVal(listval) {\n/**\n * * Write a function to find the minimum value in a given heterogeneous list.\n */", "entry_point": "minVal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", 3, 2, 4, 5, \"version\"];\nvar x0 = minVal(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", 15, 20, 25];\nvar x1 = minVal(arg10);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", 30, 20, 40, 50, \"version\"];\nvar x2 = minVal(arg20);\nvar v2 = 20;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let min = listval[0];\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] < min) {\n      min = listval[i];\n    }\n  }\n  return min;\n}\n", "\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] < min) {\n      min = listval[i];\n    }\n  }\n  return min;\n}\n", "\n  let min = listval[0];\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] < min) {\n      min = listval[i];\n    }\n  }\n  return min;\n}\n", "\n  let minVal = listval[0];\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] < minVal) {\n      minVal = listval[i];\n    }\n  }\n  return minVal;\n}\n", "\n  let min = [];\n  let len = listval.length;\n  for (let i = 0; i < len; i++) {\n    let minVal = listval[i][0];\n    let minKey = listval[i][1];\n    for (let j = 0; j < listval[i].length; j++) {\n      if (listval[i][j] < minVal) {\n        minVal = listval[i][j];\n        minKey = listval[i][1];\n      }\n    }\n    min.push([minKey, minVal]);\n  }\n  return min;\n}\n"]}
{"task_id": "MBJSP/411", "prompt": "function textUppercaseLowercase(text) {\n/**\n * * Write a function to find the sequences of one upper case letter followed by lower case letters.\n */\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\nfunction camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string.\n */\n  return text\n    .split(\"\")\n    .map((letter, index) => {\n      if (index === 0) return letter.toLowerCase();\n      if (letter === letter.toUpperCase()) return `_${letter.toLowerCase()}`;\n      return letter;\n    })\n    .join(\"\");\n}\nfunction camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string by using regex.\n */\n  return text.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n}\nfunction snakeToCamel(word) {\n/**\n * * Write a function to convert the given snake case string to camel case string by using regex.\n */", "entry_point": "snakeToCamel", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"android_tv\";\nvar x0 = snakeToCamel(arg00);\nvar v0 = \"AndroidTv\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"google_pixel\";\nvar x1 = snakeToCamel(arg10);\nvar v1 = \"GooglePixel\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"apple_watch\";\nvar x2 = snakeToCamel(arg20);\nvar v2 = \"AppleWatch\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return word.replace(/_([a-zA-Z])/g, (match, first, second) => first + second.toUpperCase());\n}\n", "\n  const words = word.split(\"_\");\n  return words[0] + words.slice(1).join('').toUpperCase();\n}\n", "\n  return word\n    .replace(/_([a-z])/g, ", "\n  return word.replace(/_([a-zA-Z])/, ($0, $1) => $1.toUpperCase());\n}\n", "\n  return word\n    .replace(/_/g, '-')\n    .toLowerCase()\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join('');\n}\n"]}
{"task_id": "MBJSP/412", "prompt": "function split(list) {\n/**\n * * Write a JavaScript function to find odd numbers from a mixed list.\n */\n  var result = [];\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] % 2 !== 0) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\nfunction removeNegs(numlist) {\n/**\n * * Write a JavaScript function to remove negative numbers from a list.\n */\n    var newList = [];\n    for (var i = 0; i < numList.length; i++) {\n        if (numList[i] >= 0) {\n            newList.push(numList[i]);\n        }\n    }\n    return newList;\n}\nfunction removeEven(l) {\n/**\n * * Write a JavaScript function to remove even numbers from a given list.\n */\n  return l.filter(x => x % 2 !== 0);\n}\nfunction removeOdd(l) {\n/**\n * * Write a JavaScript function to remove odd numbers from a given list.\n */", "entry_point": "removeOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = removeOdd(arg00);\nvar v0 = [2];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 6];\nvar x1 = removeOdd(arg10);\nvar v1 = [2, 4, 6];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 3];\nvar x2 = removeOdd(arg20);\nvar v2 = [10, 20];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l.filter(x => x % 2 === 0);\n}\n\n", "\n  return l.filter(x => x % 2 === 0);\n}\n", "\n  return l.filter(x => x % 2 === 0);\n}\n", "\n  return l.filter(x => x % 2 === 0);\n}\n", "\n  return l.filter(x => x % 2 === 0);\n}\n"]}
{"task_id": "MBJSP/413", "prompt": "function nthSuperUglyNumber(n, primes) {\n/**\n * * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n */\n  const pq = new Heap();\n  const uglyNumbers = [];\n  pq.push(1);\n\n  while (uglyNumbers.length < n) {\n    const uglyNumber = pq.pop();\n    uglyNumbers.push(uglyNumber);\n\n    for (let i = 0; i < primes.length; i++) {\n      const prime = primes[i];\n      const nextUglyNumber = uglyNumber * prime;\n      if (nextUglyNumber > uglyNumbers[uglyNumbers.length - 1]) {\n        pq.push(nextUglyNumber);\n      }\n    }\n  }\n\n  return uglyNumbers[n - 1];\n}\nfunction removeEmpty(tuple1) {\n/**\n * * Write a function to remove an empty tuple from a list of tuples.\n */\n  return tuple1.filter(function (tuple) {\n    return tuple.length > 0;\n  });\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction extractNthElement(list1, n) {\n/**\n * * Write a function to extract the nth element from a given list of tuples.\n */", "entry_point": "extractNthElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg01 = 0;\nvar x0 = extractNthElement(arg00, arg01);\nvar v0 = [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg11 = 2;\nvar x1 = extractNthElement(arg10, arg11);\nvar v1 = [99, 96, 94, 98];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg21 = 1;\nvar x2 = extractNthElement(arg20, arg21);\nvar v2 = [98, 97, 91, 94];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const length = list1.length;\n\n  if (length === 0 || n === 0 || n > length) {\n    return undefined;\n  }\n\n  return list1[n - 1];\n}\n", "\n  return list1.slice(n);\n}\n", "\n  return list1.slice(list1.length - n, list1.length);\n}\n", "\n  return list1.reduce((acc, tuple) => {\n    return acc + tuple[n - 1];\n  }, 0);\n}\n", "\n  return list1.slice(list1.length - n);\n}\n\n// console.log(uglyNumber(9, [3, 7, 9]))\n// console.log(removeEmpty([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]))\n// console.log(sortListLast([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]))\n// console.log(extractNthElement([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]], 3))\n\n// console.log(uglyNumber(9, [3, 7, 9]))\n// console.log(removeEmpty([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]))\n// console.log(sortListLast([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2],"]}
{"task_id": "MBJSP/414", "prompt": "function increasingTrend(nums) {\n/**\n * * Write a JavaScript function to check whether a sequence of numbers has an increasing trend or not.\n */\n  let prev = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > prev) {\n      return true;\n    }\n    prev = nums[i];\n  }\n  return false;\n}\nfunction decreasingTrend(nums) {\n/**\n * * Write a JavaScript function to check whether a sequence of numbers has a decreasing trend or not.\n */\n    let prev = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] < prev) {\n            return false;\n        }\n        prev = nums[i];\n    }\n    return true;\n}\nfunction seqLinear(seqnums) {\n/**\n * * Write a JavaScript function to check whether a given sequence is linear or not.\n */\n    let len = seqNums.length\n    for(let i = 0; i < len - 1; i++) {\n        if(seqNums[i] > seqNums[i + 1]) {\n            return \"Non Linear Sequence\"\n        }\n    }\n    return \"Linear Sequence\"\n}\nfunction overlapping(list1, list2) {\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */", "entry_point": "overlapping", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [6, 7, 8, 9];\nvar x0 = overlapping(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar arg11 = [4, 5, 6];\nvar x1 = overlapping(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 4, 5];\nvar arg21 = [1, 4, 5];\nvar x2 = overlapping(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let len1 = list1.length\n    let len2 = list2.length\n    for(let i = 0; i < len1; i++) {\n        for(let j = 0; j < len2; j++) {\n            if(list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list2[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n", "\n    let l1 = list1.length\n    let l2 = list2.length\n    for(let i = 0; i < l1; i++) {\n        if(list1[i] in list2) {\n            return true\n        }\n    }\n    return false;\n}\n", "\n    let len = list1.length\n    for (let i = 0; i < len; i++) {\n        if(list1[i] == list2[0]) {\n            return true\n        }\n    }\n    return false;\n}\n", "\n    let nums = [1, 2, 4, 5, 5, 5, 6, 7, 8, 9, 10]\n    let res = false;\n    let iterate = "]}
{"task_id": "MBJSP/415", "prompt": "function negativeCount(nums) {\n/**\n * * Write a function to find the ration of negative numbers in an array of integers.\n */\n  const negatives = nums.filter(num => num < 0);\n  const total = negatives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\nfunction assignElements(testlist) {\n/**\n * * Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n */\n  let result = {};\n  for (let i = 0; i < testList.length; i++) {\n    let pair = testList[i];\n    for (let j = 0; j < pair.length; j++) {\n      if (result[pair[j]]) {\n        result[pair[j]].push(pair[0]);\n      } else {\n        result[pair[j]] = [pair[0]];\n      }\n    }\n  }\n  return result;\n}\nfunction maxProduct(arr) {\n/**\n * * Write a function to find a pair with the highest product from a given array of integers.\n */\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}\nfunction maxProduct(arr) {\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */", "entry_point": "maxProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 7, 0, 8, 4];\nvar x0 = maxProduct(arg00);\nvar v0 = [7, 8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, -1, -2, -4, 5, 0, -6];\nvar x1 = maxProduct(arg10);\nvar v1 = [-4, -6];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar x2 = maxProduct(arg20);\nvar v2 = [2, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}\n", "\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}\n", "\n  let max = 0;\n  let maxPair = [];\n  let min = arr[0];\n  let minPair = [arr[0]];\n  for (let i = 1; i < arr.length; i++) {\n    let product = arr[i] * arr[i - 1];\n    if (product > max) {\n      max = product;\n      maxPair = [arr[i - 1]];\n      minPair = [arr[i]];\n    } else if (product === max) {\n      maxPair.push(arr[i]);\n      minPair.push(arr[i - 1]);\n    }\n  }\n  return maxPair;\n}\n", "\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    let product = arr[i] * arr[arr.length - 1 - i];\n    if (product > max) {\n      max = product;\n      maxPair = [arr[i], arr[arr.length - 1 - i]];\n    }\n  }\n  return maxPair;\n}\n", "\n  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}\n"]}
{"task_id": "MBJSP/416", "prompt": "function maximumSegments(n, a, b, c) {\n/**\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n */\n  // O(n)\n  if (!n || !a || !b || !c) return null;\n\n  let dp = [];\n  dp[0] = 0;\n\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(\n      ...[\n        // if current segment can be formed with a, b and c,\n        dp[i - a] + 1,\n        dp[i - b] + 1,\n        dp[i - c] + 1,\n      ].filter((e) => e > 0)\n    );\n  }\n\n  return dp[n];\n}\nfunction maxSumPairDiffLessthanK(arr, n, k) {\n/**\n * * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n */\n\tarr.sort((a, b) => a - b);\n\tlet dp = new Array(n).fill(0);\n\tdp[0] = 0;\n\tfor (let i = 1; i < n; i++) {\n\t\tdp[i] = dp[i - 1];\n\t\tif (arr[i] - arr[i - 1] < k) {\n\t\t\tif (i >= 2) {\n\t\t\t\tdp[i] = Math.max(dp[i], dp[i - 2] + arr[i] + arr[i - 1]);\n\t\t\t} else {\n\t\t\t\tdp[i] = Math.max(dp[i], arr[i] + arr[i - 1]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n - 1];\n}\nfunction maxSumOfThreeConsecutive(arr, n) {\n/**\n * * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n */\n  let max = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  for (let i = 0; i < n; i++) {\n    temp += arr[i];\n  }\n  for (let i = 0; i < n; i++) {\n    temp2 += arr[i];\n    temp3 += arr[i];\n  }\n  if (temp > max) {\n    max = temp;\n  }\n  if (temp2 > max) {\n    max = temp2;\n  }\n  if (temp3 > max) {\n    max = temp3;\n  }\n  return max;\n}\nfunction breaksum(n) {\n/**\n * * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n */", "entry_point": "breaksum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = breaksum(arg00);\nvar v0 = 13;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 24;\nvar x1 = breaksum(arg10);\nvar v1 = 27;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 23;\nvar x2 = breaksum(arg20);\nvar v2 = 23;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n < 1) return 0;\n  if (n == 1) return 1;\n  return Math.max(\n    Math.max(\n      n / 3 * (n / 3 + 1),\n      n / 2 * (n / 2 + 1),\n      n * (n + 1) / 6,\n    ),\n    breaksum(n - 1),\n  );\n}\n", "\n  // O(n)\n  if (!n) return 0;\n  if (n <= 3) return n;\n  return Math.max(\n    breaksum(n / 2) + breaksum(n - n / 2),\n    breaksum(n / 3) + breaksum(n - n / 3)\n  );\n}\n", "\n  // O(n)\n  if (!n) return 0;\n\n  let dp = [];\n  dp[0] = 0;\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(dp[i - 1], i);\n  }\n  return dp[n];\n}\n", "\n  if (!n) return 0;\n  let max1 = 0;\n  let max2 = 0;\n  let max3 = 0;\n  if (n % 3 == 1) {\n    max1 = n - 1;\n  } else if (n % 3 == 2) {\n    max1 = n - 2;\n    max2 = n - 1;\n  } else {\n    max1 = n - 3;\n    max2 = n - 2;\n    max3 = n - 1;\n  }\n  if (breaksum(max1) + breaksum(max2) + breaksum(max3) < breaksum(n)) {\n    return breaksum(max1) + breaksum(max2) + breaksum(max3);\n  } else {\n    return breaksum(n);\n  }\n}\n", "\n  if (n <= 1) return 0;\n  return Math.max(\n    // if number is divided in three parts recursively and summing them up together for the given number.\n    n % 3 === 2\n      ? n - n % 3 + breaksum(n % 3)\n      : breaksum(n),\n    // if number is divided in two parts recursively and summing them up together for the given number.\n    n % 2 === 1\n      ? n - n % 2 + breaksum(n % 2)\n      : breaksum(n),\n    // if number is divided in one part recursively and summing them up together for the given number.\n    n % 3 === 0\n      ? n - n % 3 + breaksum(n % 3)\n      : breaksum(n - 1)\n  );\n}\n"]}
{"task_id": "MBJSP/417", "prompt": "function checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction countElim(num) {\n/**\n * * Write a function to count the elements in a list until an element is a tuple.\n */\n  let count = 0;\n  while (typeof num[count] !== 'object') {\n    count += 1;\n  }\n\n  return count;\n}\nfunction checkSmaller(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] < testTup2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\nfunction groupTuples(input) {\n/**\n * * Write a function to find common first element in given list of tuple.\n */", "entry_point": "groupTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]];\nvar x0 = groupTuples(arg00);\nvar v0 = [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]];\nvar x1 = groupTuples(arg10);\nvar v1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]];\nvar x2 = groupTuples(arg20);\nvar v2 = [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < input.length; i++) {\n    if (input[i]!== null) {\n      for (let j = 0; j < input.length; j++) {\n        if (input[i] === input[j]) {\n          result.push(input[i]);\n          input[i] = null;\n          break;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n", "\n  let output = [];\n  for (let i = 0; i < input.length; i++) {\n    let j = i;\n    if (typeof input[i] === 'object') {\n      while (typeof input[j]!== 'object') {\n        j++;\n      }\n\n      let min = input[i][0];\n      for (let k = 1; k < input[j].length; k++) {\n        if (input[i][k] < min) {\n          min = input[i][k];\n        }\n      }\n      output.push(min);\n      i = j + 1;\n    }\n  }\n  return output;\n}\n", "\n  let result = [];\n  let testtup1 = input[0];\n  let testtup2 = input[1];\n  if (testtup1.length === testtup2.length) {\n    for (let i = 0; i < testTup1.length; i++) {\n      if (testtup1[i] === testtup2[i]) {\n        result.push(testtup1[i]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < input.length; i++) {\n    for (let j = 0; j < input[i].length; j++) {\n      let tempresult = [];\n      for (let k = 0; k < input[i][j].length; k++) {\n        tempresult.push(input[i][j][k]);\n      }\n      result = result.concat(tempresult);\n    }\n  }\n  return result;\n}\n", "\n  let output = [];\n  let inputList = input.length;\n  for (let i = 0; i < inputList; i++) {\n    if (typeof input[i]!== 'object') {\n      output.push(input[i]);\n    }\n  }\n  return output;\n}\n"]}
{"task_id": "MBJSP/418", "prompt": "function interleaveLists(list1, list2, list3) {\n/**\n * * Write a function to interleave lists of the same length.\n */\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < list1.length && j < list2.length && k < list3.length) {\n    result.push(list1[i]);\n    result.push(list2[j]);\n    result.push(list3[k]);\n    i++;\n    j++;\n    k++;\n  }\n\n  while (i < list1.length) {\n    result.push(list1[i]);\n    i++;\n  }\n\n  while (j < list2.length) {\n    result.push(list2[j]);\n    j++;\n  }\n\n  while (k < list3.length) {\n    result.push(list3[k]);\n    k++;\n  }\n\n  return result;\n}\nfunction minLength(list1) {\n/**\n * * Write a function to find the list of lists with minimum length.\n */\n  let min = Infinity;\n  let minList = [];\n  let minListIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let list = list1[i];\n    let listLength = list.length;\n    if (listLength < min) {\n      min = listLength;\n      minList = list;\n      minListIndex = i;\n    }\n  }\n  return [minListIndex + 1, minList];\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find length of the subarray having maximum sum.\n */\n    let maxSum = 0;\n    let currentSum = 0;\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < a.length; i++) {\n        currentSum += a[i];\n        if (currentSum < 0) {\n            currentSum = 0;\n            start = i + 1;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            end = i;\n        }\n    }\n    return end - start + 1;\n}\nfunction findMax(lst) {\n/**\n * * Write a JavaScript function to find the sublist having maximum length.\n */", "entry_point": "findMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]];\nvar x0 = findMax(arg00);\nvar v0 = [\"A\", \"B\", \"C\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [1, 2], [1, 2, 3]];\nvar x1 = findMax(arg10);\nvar v1 = [1, 2, 3];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 1], [1, 2, 3], [1, 5, 6, 1]];\nvar x2 = findMax(arg20);\nvar v2 = [1, 5, 6, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = -Infinity;\n  let maxLen = -Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    let subList = lst[i];\n    let subListLen = subList.length;\n    if (maxLen < subListLen) {\n      maxLen = subListLen;\n    }\n    if (subListLen > max) {\n      max = subListLen;\n    }\n  }\n  return max;\n}\n", "\n    let maxLen = 0;\n    let currentLen = 0;\n    let start = 0;\n    let end = 0;\n    let startIndex = 0;\n    let endIndex = 0;\n    for (let i = 0; i < lst.length; i++) {\n        currentLen += lst[i];\n        if (currentLen > maxLen) {\n            maxLen = currentLen;\n            end = i;\n            endIndex = i;\n            start = startIndex;\n            startIndex = endIndex + 1;\n        }\n        if (currentLen < 0) {\n            currentLen = 0;\n            startIndex = i + 1;\n        }\n    }\n    return [startIndex, endIndex];\n}\n", "\n    let max = 0;\n    let current = 0;\n    for (let i = 0; i < lst.length; i++) {\n        current += lst[i];\n        if (current < 0) {\n            current = 0;\n        }\n        if (current > max) {\n            max = current;\n        }\n    }\n    return max;\n}\n", "\n  let max = 0;\n  let currentMax = 0;\n  for (let i = 0; i < lst.length; i++) {\n    currentMax += lst[i];\n    if (currentMax > max) {\n      max = currentMax;\n    }\n    if (currentMax < 0) {\n      currentMax = 0;\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < lst.length; i++) {\n    current += lst[i];\n    if (current < 0) {\n        current = 0;\n    }\n    if (current > max) {\n        max = current;\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/419", "prompt": "function numPosition(text) {\n/**\n * * Write a function to separate and print the numbers and their position of a given string.\n */\n  const position = text.search(/[0-9]/g);\n  return position;\n}\nfunction countDigits(num1, num2) {\n/**\n * * Write a function to add two numbers and print number of digits of sum.\n */\n  var sum = num1 + num2;\n  var len = sum.toString().length;\n  return len;\n}\nfunction sumNum(numbers) {\n/**\n * * Write a function to add all the numbers in a list and divide it with the length of the list.\n */\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\nfunction roundAndSum(list1) {\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */", "entry_point": "roundAndSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5];\nvar x0 = roundAndSum(arg00);\nvar v0 = 243;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 2, 9, 24.3, 29];\nvar x1 = roundAndSum(arg10);\nvar v1 = 345;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25.0, 56.7, 89.2];\nvar x2 = roundAndSum(arg20);\nvar v2 = 513;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    list1[i] = Math.round(list1[i]);\n    sum += list1[i];\n  }\n  return sum * list1.length;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    sum += list1[i] * list1.length;\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    sum += Math.round(list1[i]);\n  }\n  return sum * list1.length;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    list1[i] = Math.round(list1[i]);\n    sum += list1[i];\n  }\n  return sum * list1.length;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    list1[i] = Math.round(list1[i]);\n    sum += list1[i];\n  }\n  return sum * list1.length;\n}\n"]}
{"task_id": "MBJSP/420", "prompt": "function difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction evenPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of first n even natural numbers.\n */\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = 2 * i;\n        sum += j * j * j * j;\n    }\n    return sum;\n}\nfunction cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n odd natural numbers.\n */\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 3);\n    }\n    return sum;\n}\nfunction cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n even natural numbers.\n */", "entry_point": "cubeSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = cubeSum(arg00);\nvar v0 = 72;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = cubeSum(arg10);\nvar v1 = 288;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = cubeSum(arg20);\nvar v2 = 800;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i, 3);\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i, 3);\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        var j = 2 * i + 1;\n        sum += Math.pow(j, 3);\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i, 3);\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        var j = 2 * i + 1;\n        sum += Math.pow(j, 3);\n    }\n    return sum;\n}\n"]}
{"task_id": "MBJSP/421", "prompt": "function checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction matrixToList(testlist) {\n/**\n * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n */\n  let flatList = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      flatList.push(testList[i][j]);\n    }\n  }\n  return flatList;\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction concatenateTuple(testtup) {\n/**\n * * Write a function to concatenate each element of tuple by the delimiter.\n */", "entry_point": "concatenateTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"ID\", \"is\", 4, \"UTS\"];\nvar x0 = concatenateTuple(arg00);\nvar v0 = \"ID-is-4-UTS\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"QWE\", \"is\", 4, \"RTY\"];\nvar x1 = concatenateTuple(arg10);\nvar v1 = \"QWE-is-4-RTY\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"ZEN\", \"is\", 4, \"OP\"];\nvar x2 = concatenateTuple(arg20);\nvar v2 = \"ZEN-is-4-OP\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testtup.join(delimiter);\n}\n", "\n  let result = '';\n  for (let i = 0; i < testtup.length; i++) {\n    if (i!= 0) {\n      result += testtup[i];\n    }\n    else {\n      result = testtup[i];\n    }\n  }\n  return result;\n}\n", "\n  let result = '';\n  for (let i = 0; i < testtup.length; i++) {\n    result += testtup[i];\n    if (i!= testtup.length - 1) {\n      result += delimiter;\n    }\n  }\n  return result;\n}\n", "\n  let tup = testtup[0];\n  for (let i = 1; i < testtup.length; i++) {\n    tup += delimiter;\n    tup += testtup[i];\n  }\n  return tup;\n}\n", "\n  let newtup = testtup[0];\n  for (let i = 1; i < testtup.length; i++) {\n    newtup += delimiter + testtup[i];\n  }\n  return newtup;\n}\n"]}
{"task_id": "MBJSP/422", "prompt": "function cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n odd natural numbers.\n */\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 3);\n    }\n    return sum;\n}\nfunction sumAverage(number) {\n/**\n * * Write a function to find sum and average of first n natural numbers.\n */\n  let sum = 0;\n  let average = 0;\n  for (let i = 1; i <= number; i++) {\n    sum += i;\n  }\n  average = sum / number;\n  return [sum, average];\n}\nfunction difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction findAverageOfCube(n) {\n/**\n * * Write a JavaScript function to find the average of cubes of first n natural numbers.\n */", "entry_point": "findAverageOfCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = findAverageOfCube(arg00);\nvar v0 = 4.5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = findAverageOfCube(arg10);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = findAverageOfCube(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum / n;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum / n;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum / n;\n}\n", "\n    var sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum / n;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum / n;\n}\n"]}
{"task_id": "MBJSP/423", "prompt": "function radianDegree(degree) {\n/**\n * * Write a function to convert degrees to radians.\n */\n  return degree * Math.PI / 180;\n}\nfunction fibonacci(n) {\n/**\n * * Write a function to solve the fibonacci sequence using recursion.\n */\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\nfunction getNoofways(n) {\n/**\n * * Write a function to solve tiling problem.\n */\n  return n > 2 ? getNoofways(n - 1) + getNoofways(n - 2) : 1\n}\nfunction getMaxgold(gold, m, n) {\n/**\n * * Write a function to solve gold mine problem.\n */", "entry_point": "getMaxgold", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]];\nvar arg01 = 4;\nvar arg02 = 4;\nvar x0 = getMaxgold(arg00, arg01, arg02);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [30, 40]];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = getMaxgold(arg10, arg11, arg12);\nvar v1 = 70;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 9], [3, 7]];\nvar arg21 = 2;\nvar arg22 = 2;\nvar x2 = getMaxgold(arg20, arg21, arg22);\nvar v2 = 13;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (var i = m - 1; i > 0; i--) {\n    for (var j = n - 1; j > 0; j--) {\n      if (gold[i][j] === '#') {\n        gold[i][j] = Math.max(gold[i + 1][j] + 1, gold[i][j + 1] + 1);\n      }\n    }\n  }\n  return gold[0][0];\n}\n", "\n  var maxgold = 0;\n  for (var i = m; i <= n; i++) {\n    if (gold >= i) {\n      maxgold = Math.max(maxgold, i);\n    }\n  }\n  return maxgold;\n}\n", "\n  return gold >= m * n? gold - m * n : getMaxgold(gold - 1, m, n)\n}\n", "\n  if (gold > m) {\n    return getMaxgold(gold - m, m, n);\n  }\n  if (gold > n) {\n    return getMaxgold(gold - n, m, n);\n  }\n  return gold;\n}\n", "\n  return Math.max(getMaxgold(gold, m, n - 1), getMaxgold(gold, m - 1, n))\n}\n"]}
{"task_id": "MBJSP/424", "prompt": "function freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction checkSmaller(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] < testTup2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction extractRear(testtuple) {\n/**\n * * Write a function to extract only the rear index element of each string in the given tuple.\n */", "entry_point": "extractRear", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Mers\", \"for\", \"Vers\"];\nvar x0 = extractRear(arg00);\nvar v0 = [\"s\", \"r\", \"s\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Avenge\", \"for\", \"People\"];\nvar x1 = extractRear(arg10);\nvar v1 = [\"e\", \"r\", \"e\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Gotta\", \"get\", \"go\"];\nvar x2 = extractRear(arg20);\nvar v2 = [\"a\", \"t\", \"o\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let arr = [];\n  for (let i = 0; i < testTup.length; i++) {\n    arr.push(testTup[i][2]);\n  }\n  let result = arr.sort(", "\n  let extractedRearTuple = [];\n  for (let i = 0; i < testtuple.length; i++) {\n    extractedRearTuple.push(testtuple[i].split(\" \")[0]);\n  }\n  return extractedRearTuple;\n}\n", "\n  let result = testtuple.slice(testtuple.length - 1, testtuple.length);\n  return result;\n}\n", "\n  let testtupleRear = testtuple.slice(0, -1);\n  return testtupleRear;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testtuple.length; i++) {\n    result.push(testtuple[i][2]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/425", "prompt": "function countList(inputlist) {\n/**\n * * Write a JavaScript function to count the number of lists in a given number of lists.\n */\n    let count = 0;\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList[i].length > 0) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction subLists(mylist) {\n/**\n * * Write a function to generate all sublists of a given list.\n */\n  const subLists = [];\n  for (let i = 0; i < myList.length; i++) {\n    subLists.push([]);\n  }\n  for (let i = 0; i < myList.length; i++) {\n    for (let j = 0; j < subLists.length; j++) {\n      subLists[j].push(myList[i]);\n    }\n  }\n  return subLists;\n}\nfunction basesnumCoresspondingnum(basesnum, index) {\n/**\n * * Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n */\n  return basesNum.map((num) => Math.pow(num, index));\n}\nfunction countElementInList(list1, x) {\n/**\n * * Write a function to count the number of sublists containing a particular element.\n */", "entry_point": "countElementInList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]];\nvar arg01 = 1;\nvar x0 = countElementInList(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]];\nvar arg11 = \"A\";\nvar x1 = countElementInList(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]];\nvar arg21 = \"E\";\nvar x2 = countElementInList(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (x in list1[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  const count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === x) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === x) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (x in list1[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].toString().indexOf(x)!== -1) {\n            count++;\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/426", "prompt": "function rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction divOfNums(nums, m, n) {\n/**\n * * Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n */\n  return nums.filter(num => num % m === 0 && num % n === 0);\n}\nfunction divOfNums(nums, m, n) {\n/**\n * * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n */\n  return nums.filter(num => num % m === 0 || num % n === 0);\n}\nfunction filterOddnumbers(nums) {\n/**\n * * Write a function to filter odd numbers using lambda function.\n */", "entry_point": "filterOddnumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = filterOddnumbers(arg00);\nvar v0 = [1, 3, 5, 7, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 45, 67, 84, 93];\nvar x1 = filterOddnumbers(arg10);\nvar v1 = [45, 67, 93];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 7, 9, 8, 6, 4, 3];\nvar x2 = filterOddnumbers(arg20);\nvar v2 = [5, 7, 9, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.filter(num => num % 2!== 0);\n}\n", "\n  return nums.filter(num => num % 2!== 0);\n}\n", "\n  const oddnums = nums.filter(num => num % 2!== 0);\n  return oddnums;\n}\n", "\n  return nums.filter(num => num % 2!== 0);\n}\n", "\n  return nums.filter(num => num % 2!== 0);\n}\n"]}
{"task_id": "MBJSP/427", "prompt": "function camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string by using regex.\n */\n  return text.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n}\nfunction extractDate(url) {\n/**\n * * Write a function to extract year, month and date from a url by using regex.\n */\n  var regex = /[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}/g;\n  return url.match(regex).map(e => e.split('/'));\n}\nfunction changeDateFormat(dt) {\n/**\n * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n */\n  const [year, month, day] = dt.split(\"-\");\n  return `${day}-${month}-${year}`;\n}\nfunction changeDateFormat(dt) {\n/**\n * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n */", "entry_point": "changeDateFormat", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"2026-01-02\";\nvar x0 = changeDateFormat(arg00);\nvar v0 = \"02-01-2026\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"2020-11-13\";\nvar x1 = changeDateFormat(arg10);\nvar v1 = \"13-11-2020\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"2021-04-26\";\nvar x2 = changeDateFormat(arg20);\nvar v2 = \"26-04-2021\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const [year, month, day] = dt.split(\"-\");\n  return `${day}-${month}-${year}`;\n}\n", "\n  var regex = /([0-9]{4})-([0-9]{2})-([0-9]{2})/;\n  return dt.match(regex).map(e => e.split('-'));\n}\n", "\n  var regex = /[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}/g;\n  return dt.replace(regex, `${dt.split('/')[2]}-${dt.split('/')[1]}-${dt.split('/')[0]}`);\n}\n", "\n  var year = dt.match(/[0-9]{4}/);\n  var month = dt.match(/[0-9]{2}/);\n  var day = dt.match(/[0-9]{2}/);\n  const dt1 = `${day}-${month}-${year[0]}`;\n  const dt2 = `${day[0]}.${month[0]}-${year[1]}`;\n  const dt3 = `${day[0]}.${month[0]}.${year[2]}`;\n  return [dt1, dt2, dt3];\n}\n", "\n  const regex = /[0-9]{2}\\/[0-9]{2}\\/[0-9]{4}/g;\n  return dt.replace(regex, changeDateFormat);\n}\n"]}
{"task_id": "MBJSP/428", "prompt": "function sortByDnf(arr, n) {\n/**\n * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n */\n  const count = new Array(n).fill(0);\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    count[arr[i]]++;\n  }\n  for (let i = 0; i < n; i++) {\n    while (count[i] > 0) {\n      result.push(i);\n      count[i]--;\n    }\n  }\n  return result;\n}\nfunction radixSort(nums) {\n/**\n * * Write a function to sort a list of elements using radix sort.\n */\n  let max = Math.max(...nums);\n  let exp = 1;\n  while (max / exp > 0) {\n    let buckets = Array.from({ length: 10 }, () => []);\n    for (let i = 0; i < nums.length; i++) {\n      let digit = Math.floor(nums[i] / exp) % 10;\n      buckets[digit].push(nums[i]);\n    }\n    nums = [].concat(...buckets);\n    exp *= 10;\n  }\n  return nums;\n}\nfunction heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction shellSort(mylist) {\n/**\n * * Write a function to sort the given array by using shell sort.\n */", "entry_point": "shellSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95];\nvar x0 = shellSort(arg00);\nvar v0 = [2, 3, 4, 5, 12, 12, 23, 56, 81, 95];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [24, 22, 39, 34, 87, 73, 68];\nvar x1 = shellSort(arg10);\nvar v1 = [22, 24, 34, 39, 68, 73, 87];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [32, 30, 16, 96, 82, 83, 74];\nvar x2 = shellSort(arg20);\nvar v2 = [16, 30, 32, 74, 82, 83, 96];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let len = mylist.length;\n  let gap = Math.floor(len / 2);\n  while (gap > 0) {\n    for (let i = gap; i < len; i++) {\n      let temp = mylist[i];\n      let j = i;\n      while (j - gap >= 0 && mylist[j - gap] > temp) {\n        mylist[j] = mylist[j - gap];\n        j -= gap;\n      }\n      mylist[j] = temp;\n    }\n    gap = Math.floor(gap / 2);\n  }\n  return mylist;\n}\n", "\n  let gap = Math.floor(mylist.length / 2);\n  while (gap >= 1) {\n    for (let i = gap; i < mylist.length; i++) {\n      let temp = mylist[i];\n      let j = i;\n      while (j >= gap && mylist[j - gap] > temp) {\n        mylist[j] = mylist[j - gap];\n        j -= gap;\n      }\n      mylist[j] = temp;\n    }\n    gap = Math.floor(gap / 2);\n  }\n  return mylist;\n}\n", "\n  let len = mylist.length;\n  while (len > 1) {\n    for (let i = len / 2 - 1; i >= 0; i--) {\n      for (let j = i; j < len; j++) {\n        let temp = mylist[j];\n        let k = j;\n        while (k > i - 1 && mylist[k - 1] > temp) {\n          mylist[k] = mylist[k - 1];\n          k--;\n        }\n        mylist[k] = temp;\n      }\n    }\n    len = len / 2;\n  }\n  return mylist;\n}\n", "\n  for (let gap = Math.floor(mylist.length / 2); gap > 0; gap /= 2) {\n    for (let i = gap; i < mylist.length; i++) {\n      let temp = mylist[i];\n      let j;\n      for (j = i; j >= gap && mylist[j - gap] > temp; j -= gap) {\n        mylist[j] = mylist[j - gap];\n      }\n      mylist[j] = temp;\n    }\n  }\n  return mylist;\n}\n", "\n  let gap = Math.floor(mylist.length / 2);\n  while (gap > 0) {\n    for (let i = gap; i < mylist.length; i++) {\n      let temp = mylist[i];\n      let j = i;\n      while (j >= gap && mylist[j - gap] > temp) {\n        mylist[j] = mylist[j - gap];\n        j = j - gap;\n      }\n      mylist[j] = temp;\n    }\n    gap = Math.floor(gap / 2);\n  }\n  return mylist;\n}\n"]}
{"task_id": "MBJSP/429", "prompt": "function extractUnique(testdict) {\n/**\n * * Write a function to extract unique values from the given dictionary values.\n */\n  const keys = Object.keys(testDict);\n  const vals = Object.values(testDict);\n  const uniqueVals = [];\n  vals.forEach((val) => {\n    val.forEach((v) => {\n      if (uniqueVals.indexOf(v) === -1) {\n        uniqueVals.push(v);\n      }\n    });\n  });\n  return uniqueVals.sort((a, b) => a - b);\n}\nfunction concatenateNested(testtup1, testtup2) {\n/**\n * * Write a function to concatenate the given two tuples to a nested tuple.\n */\n  if (!Array.isArray(testTup1)) {\n    throw Error('The first argument must be an array')\n  }\n\n  if (!Array.isArray(testTup2)) {\n    throw Error('The second argument must be an array')\n  }\n\n  const resultTup = testTup1.concat(testTup2)\n  return resultTup\n}\nfunction findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction andTuples(testtup1, testtup2) {\n/**\n * * Write a function to extract the elementwise and tuples from the given two tuples.\n */", "entry_point": "andTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = andTuples(arg00, arg01);\nvar v0 = [0, 0, 2, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = [5, 6, 7, 8];\nvar x1 = andTuples(arg10, arg11);\nvar v1 = [1, 2, 3, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 12];\nvar arg21 = [7, 13, 14, 17];\nvar x2 = andTuples(arg20, arg21);\nvar v2 = [0, 9, 10, 0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (!Array.isArray(testTup1)) {\n    throw Error('The first argument must be an array')\n  }\n\n  if (!Array.isArray(testTup2)) {\n    throw Error('The second argument must be an array')\n  }\n\n  const result = testTup1.map((v1, i) =>\n  [\n      v1,\n      testTup2[i]\n  ]).filter(([v1, v2]) => v1 && v2)\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const testTup = testtup1.slice(0);\n    testTup[i] = testTup1[i] & testTup2[i];\n    result.push(testTup);\n  }\n  return result;\n}\n", "\n  if (!Array.isArray(testTup1)) {\n    throw Error('The first argument must be an array')\n  }\n\n  if (!Array.isArray(testTup2)) {\n    throw Error('The second argument must be an array')\n  }\n\n  if (testtup1.length === 0 || testtup2.length === 0) {\n    return []\n  }\n\n  return testtup1.map((val1) => {\n    return testtup2.map((val2) => {\n      return val1 & val2\n    })\n  })\n}\n", "\n  if (!Array.isArray(testtup1)) {\n    throw Error('The first argument must be an array')\n  }\n\n  if (!Array.isArray(testtup2)) {\n    throw Error('The second argument must be an array')\n  }\n\n  const resultTup = testtup1.map((val) => {\n    const newVal = [];\n    for (let i = 0; i < val.length; i++) {\n      newVal.push(val[i] & val[i]);\n    }\n    return newVal;\n  })\n  return resultTup;\n}\n", "\n  const resultTup = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] && testTup2[i]) {\n      resultTup.push(true);\n    } else {\n      resultTup.push(false);\n    }\n  }\n  return resultTup;\n}\n"]}
{"task_id": "MBJSP/430", "prompt": "function stringLength(str1) {\n/**\n * * Write a function to find length of the string.\n */\n    return str1.length;\n}\nfunction longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction parabolaDirectrix(a, b, c) {\n/**\n * * Write a function to find the directrix of a parabola.\n */", "entry_point": "parabolaDirectrix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaDirectrix(arg00, arg01, arg02);\nvar v0 = -198;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaDirectrix(arg10, arg11, arg12);\nvar v1 = -2336;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaDirectrix(arg20, arg21, arg22);\nvar v2 = -130;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const x = (c - b) / a;\n  const y = Math.pow(x, 2) / 2 + Math.pow(x, 3) / 3 + Math.pow(x, 4) / 4;\n  return y;\n}\n", "\n  let startPoint = 0;\n  let endPoint = 0;\n  if (a > 0) {\n    startPoint = 0;\n    endPoint = c;\n  } else if (a < 0) {\n    startPoint = c;\n    endPoint = 0;\n  } else if (a === 0) {\n    if (b > 0) {\n      startPoint = -c;\n      endPoint = 0;\n    } else if (b < 0) {\n      startPoint = 0;\n      endPoint = -c;\n    } else if (b === 0) {\n      startPoint = -c;\n      endPoint = -c;\n    }\n  }\n  const distance = Math.abs(a * startPoint + b * startPoint + c);\n  const slope = (a * endPoint + b * endPoint + c) / distance;\n  const distanceToSlope = Math.abs(endPoint - startPoint);\n  const slopeToSlope = (endPoint - startPoint) / distanceToSlope;\n  return Math.abs(slopeToSlope - slope);\n}\n", "\n  const x = (a * Math.pow(c, 2)) / (4 * b);\n  const y = a * Math.pow(x, 2) + b * x + c;\n  return [x, y];\n}\n", "\n  if (a === 0 && b === 0 && c === 0) return null;\n  return [(-b + Math.sqrt(b * b - 4 * a * c)) / 2 * a, (-b - Math.sqrt(b * b - 4 * a * c)) / 2 * a];\n}\n", "\n  const x = (b * b) / (4 * a) - c / (2 * a);\n  const y = Math.sqrt(b * b - (x * x));\n  return {x, y};\n}\n"]}
{"task_id": "MBJSP/431", "prompt": "function passValidity(p) {\n/**\n * * Write a function to return true if the password is valid.\n */\n  return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(p);\n}\nfunction differAtOneBitPos(a, b) {\n/**\n * * Write a JavaScript function to check whether the two numbers differ at one bit position only or not.\n */\n  // convert to binary\n  var binA = a.toString(2);\n  var binB = b.toString(2);\n\n  // check if differ at one bit position\n  var diff = 0;\n  for (var i = 0; i < binA.length; i++) {\n    diff += binA[i] != binB[i] ? 1 : 0;\n  }\n  return diff == 1;\n}\nfunction joinTuples(testlist) {\n/**\n * * Write a function to join the tuples if they have similar initial elements.\n */\n  const result = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    for (let j = i + 1; j < testList.length; j++) {\n      const tuple2 = testList[j];\n      if (tuple[0] === tuple2[0]) {\n        tuple.push(...tuple2.slice(1));\n        testList.splice(j, 1);\n        j--;\n      }\n    }\n    result.push(tuple);\n  }\n  return result;\n}\nfunction commonElement(list1, list2) {\n/**\n * * Write a function that takes two lists and returns true if they have at least one common element.\n */", "entry_point": "commonElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [5, 6, 7, 8, 9];\nvar x0 = commonElement(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar arg11 = [6, 7, 8, 9];\nvar x1 = commonElement(arg10, arg11);\nvar v1 = null;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"a\", \"b\", \"c\"];\nvar arg21 = [\"d\", \"b\", \"e\"];\nvar x2 = commonElement(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (let i = 0; i < list1.length; i++) {\n    const element = list1[i];\n    for (let j = 0; j < list2.length; j++) {\n      const element2 = list2[j];\n      if (element === element2) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "\n  // check if list1 is longer than list2\n  if (list1.length > list2.length) {\n    // swap list1 and list2\n    let temp = list1;\n    list1 = list2;\n    list2 = temp;\n  }\n\n  // check if list2 is longer than list1\n  if (list1.length == list2.length) {\n    // check if the elements of list1 are a subset of the elements of list2\n    for (let i = 0; i < list1.length; i++) {\n      if (!(list1[i] in list2)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n", "\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.includes(list1[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] in list2) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvar sampleCases = [\n  {\n    name: \"Simple case\",\n    text: \"Bacon ipsum dolor amet hamburger venison salami, flank corned beef pork belly frankfurter chuck ground round pork belly. Shank short ribs rump leberkas venison, pork loin tongue brisket pork chop. Short loin tail beef ribs, chuck brisket andouille. Short ribs turkey, shankle spare ribs tri-tip pork chop brisket. Pork chop venison tail short ribs chuck, beef ribs kielbasa shoulder ribeye pork loin. Brisket frankfurter turkey, andouille spare ribs rump corned beef pork chop frankfurter spare ribs. Kielbasa shoulder shank, tail beef ribs venison ham hock corned beef brisket tongue. Shank tail pork loin, tail beef ribs pork chop kielbasa short ribs.\",\n    expect: \"Bacon ipsum dolor amet hamburger venison salami, flank corned beef pork belly frankfurter chuck ground round pork belly. Shank short ribs rump leberkas venison, pork loin tongue brisket pork chop. Short loin tail beef ribs, chuck brisket andouille. Short ribs turkey, shankle spare ribs tri-tip pork chop brisket. Pork chop venison tail short ribs chuck, beef ribs kielbasa shoulder ribeye pork loin. Brisket frankfurter turkey, andouille spare ribs rump corned beef pork chop frankfurter spare ribs. Kielbasa shoulder shank, tail beef ribs venison ham hock corned", "\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"]}
{"task_id": "MBJSP/432", "prompt": "function unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction getMedian(arr1, arr2, n) {\n/**\n * * Write a function to find the median of two sorted arrays of same size.\n */\n  const arr = [...arr1, ...arr2].sort((a, b) => a - b);\n  const mid = Math.floor(arr.length / 2);\n  return arr.length % 2 === 0 ? (arr[mid - 1] + arr[mid]) / 2 : arr[mid];\n}\nfunction areaTrapezium(base1, base2, height) {\n/**\n * * Write a function to find the area of a trapezium.\n */\n  return (base1 + base2) * height / 2;\n}\nfunction medianTrapezium(base1, base2, height) {\n/**\n * * Write a function to find the median of a trapezium.\n */", "entry_point": "medianTrapezium", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar arg01 = 25;\nvar arg02 = 35;\nvar x0 = medianTrapezium(arg00, arg01, arg02);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 20;\nvar arg12 = 30;\nvar x1 = medianTrapezium(arg10, arg11, arg12);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 9;\nvar arg22 = 4;\nvar x2 = medianTrapezium(arg20, arg21, arg22);\nvar v2 = 7.5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const half = height / 2;\n  if (base1 < base2) {\n    return base1 + half;\n  } else {\n    return base2 + half;\n  }\n}\n", "\n  const arr = [...base1,...base2, height];\n  const mid = Math.floor(arr.length / 2);\n  return arr.length % 2 === 0? (arr[mid - 1] + arr[mid]) / 2 : arr[mid];\n}\n", "\n  const area = areaTrapezium(base1, base2, height);\n  const mid = Math.floor(base1 + base2 - area / 2);\n  return area <= base1 * base2? mid : mid + 1;\n}\n", "\n  return (base1 + base2) / 2;\n}\n", "\n  const arr = [base1, base2, height].sort((a, b) => a - b);\n  const mid = Math.floor(arr.length / 2);\n  return arr.length % 2 === 0? (arr[mid - 1] + arr[mid]) / 2 : arr[mid];\n}\n"]}
{"task_id": "MBJSP/433", "prompt": "function isPerfectSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number is a perfect square or not.\n */\n    if (n < 0) {\n        return false;\n    }\n    let sqrt = Math.sqrt(n);\n    return sqrt === Math.floor(sqrt);\n}\nfunction armstrongNumber(number) {\n/**\n * * Write a function to check whether the given number is armstrong or not.\n */\n  let num = number;\n  let sum = 0;\n  while (num > 0) {\n    let rem = num % 10;\n    sum += rem ** 3;\n    num = Math.floor(num / 10);\n  }\n  return sum === number;\n}\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction checkGreater(arr, number) {\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */", "entry_point": "checkGreater", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = 4;\nvar x0 = checkGreater(arg00, arg01);\nvar v0 = \"No, entered number is less than those in the array\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 5, 6];\nvar arg11 = 8;\nvar x1 = checkGreater(arg10, arg11);\nvar v1 = \"Yes, the entered number is greater than those in the array\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 7, 4, 8, 6, 1];\nvar arg21 = 11;\nvar x2 = checkGreater(arg20, arg21);\nvar v2 = \"Yes, the entered number is greater than those in the array\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > number) {\n      result = false;\n    }\n  }\n  return result;\n}\n", "\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > number) {\n      result = false;\n    }\n  }\n  return result;\n}\n", "\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > number) {\n      result = false;\n    }\n  }\n  return result;\n}\n", "\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (number > arr[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\n", "\n  let num = number;\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (num > arr[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/434", "prompt": "function textMatch(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or more b's by using regex.\n */\n  return /^(a|b)(.*){0,}$/.test(text) ? \"Found a match!\" : \"Not matched!\";\n}\nfunction textMatchZeroOne(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or one 'b'.\n */\n  if (text.match(/a(b)?/)) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}\nfunction textMatch(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or more b's.\n */\n  if (text.match(/a/g) === null) {\n    return \"Not matched!\";\n  } else {\n    return \"Found a match!\";\n  }\n}\nfunction textMatchOne(text) {\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */", "entry_point": "textMatchOne", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ac\";\nvar x0 = textMatchOne(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"dc\";\nvar x1 = textMatchOne(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abba\";\nvar x2 = textMatchOne(arg20);\nvar v2 = \"Found a match!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (text.match(/a/g)!== null) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}\n", "\n  if (text.match(/a/g) === null) {\n    return \"Not matched!\";\n  } else {\n    return \"Found a match!\";\n  }\n}\n", "\n  if (text.match(/a/g) === null) {\n    return \"Not matched!\";\n  } else {\n    return \"Found a match!\";\n  }\n}\n", "\n  if (text.match(/a/g) === null) {\n    return \"Not matched!\";\n  } else {\n    return \"Found a match!\";\n  }\n}\n", "\n  if (text.match(/a/g) === null) {\n    return \"Not matched!\";\n  } else {\n    return \"Found a match!\";\n  }\n}\n"]}
{"task_id": "MBJSP/435", "prompt": "function lastTwoDigits(n) {\n/**\n * * Write a JavaScript function to find the last two digits in factorial of a given number.\n */\n  let a = 1;\n  while (n > 1) {\n    a *= n;\n    n--;\n  }\n  return a % 100;\n}\nfunction firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit in factorial of a given number.\n */\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    let firstDigit = factorial.toString().split('').map(Number)[0];\n    return firstDigit;\n}\nfunction lastDigitFactorial(n) {\n/**\n * * Write a JavaScript function to find the last digit in factorial of a given number.\n */\n    return n < 10 ? n : lastDigitFactorial(n / 10 >> 0) * 10 % 10;\n}\nfunction lastDigit(n) {\n/**\n * * Write a JavaScript function to find the last digit of a given number.\n */", "entry_point": "lastDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 123;\nvar x0 = lastDigit(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 25;\nvar x1 = lastDigit(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = lastDigit(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return n < 10? n % 10 : lastDigit(n / 10);\n}\n", "\n    return n % 10;\n}\n```\n\n### Challenges \n\n* **Prime Number** - Write a JavaScript ", "\n  let lastDigitFactorial = lastDigitFactorial(n);\n  return n < 10? n : lastDigitFactorial * 10 % 10;\n}\n", "\n    return n < 10? n : lastDigit(n / 10 >> 0) * 10 % 10;\n}\n", "\n    return n < 10? n : lastDigit(n / 10);\n}\n"]}
{"task_id": "MBJSP/436", "prompt": "function rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction negativeCount(nums) {\n/**\n * * Write a function to find the ration of negative numbers in an array of integers.\n */\n  const negatives = nums.filter(num => num < 0);\n  const total = negatives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\nfunction removeNegs(numlist) {\n/**\n * * Write a JavaScript function to remove negative numbers from a list.\n */\n    var newList = [];\n    for (var i = 0; i < numList.length; i++) {\n        if (numList[i] >= 0) {\n            newList.push(numList[i]);\n        }\n    }\n    return newList;\n}\nfunction negNos(list1) {\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */", "entry_point": "negNos", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, 4, 5, -6];\nvar x0 = negNos(arg00);\nvar v0 = [-1, -6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, -2, 3, 4];\nvar x1 = negNos(arg10);\nvar v1 = [-1, -2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-7, -6, 8, 9];\nvar x2 = negNos(arg20);\nvar v2 = [-7, -6];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            console.log(list1[i]);\n        }\n    }\n}\n", "\n  let str = \"\";\n  for (var i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n        str += list1[i] + \" \";\n    }\n  }\n  console.log(str);\n}\n", "\n    var newList = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            newList.push(list1[i]);\n        }\n    }\n    console.log(newList);\n}\n//\n\n", "\n    var negNoList = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            negNoList.push(list1[i]);\n        }\n    }\n    console.log(negNoList.join(\" \"));\n}\n\n/**\n * * Write a JavaScript ", "\n  const numList = list1.filter("]}
{"task_id": "MBJSP/437", "prompt": "function maxRunUppercase(teststr) {\n/**\n * * Write a function to find maximum run of uppercase characters in the given string.\n */\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i] === testStr[i].toUpperCase()) {\n      current++;\n    } else {\n      current = 0;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\nfunction removeSpaces(text) {\n/**\n * * Write a function to remove multiple spaces in a string.\n */\n  return text.replace(/\\s+/g, ' ');\n}\nfunction toggleString(string) {\n/**\n * * Write a function to toggle characters case in a string.\n */\n  return string.split(\"\").map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join(\"\");\n}\nfunction removeOdd(str1) {\n/**\n * * Write a function to remove odd characters in a string.\n */", "entry_point": "removeOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = removeOdd(arg00);\nvar v0 = \"yhn\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = removeOdd(arg10);\nvar v1 = \"rga\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = removeOdd(arg20);\nvar v2 = \"agae\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let i = 0;\n  let len = str1.length;\n  let newstr = '';\n  for (; i < len; i++) {\n    if ((i % 2) === 0) {\n      newstr += str1[i];\n    }\n  }\n  return newstr;\n}\n", "\n  return str1.split(\"\").map(char => {\n    if (char % 2!== 0) {\n      return char;\n    }\n    return null;\n  }).filter(char => char).join(\"\");\n}\n", "\n  let rv = '';\n  let arr = str1.split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2!== 0) {\n      rv += arr[i];\n    }\n  }\n  return rv;\n}\n", "\n  return (str1 + '').replace(/1/g, '');\n}\n", "\n  let str = removeSpaces(str1);\n  let str2 = str.replace(/[^\\w]/g, \"\");\n  return str2;\n}\n"]}
{"task_id": "MBJSP/438", "prompt": "function maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction sumElements(testtup) {\n/**\n * * Write a function to find the summation of tuple elements in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    sum += testTup[i];\n  }\n  return sum;\n}\nfunction matrixToList(testlist) {\n/**\n * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n */\n  let flatList = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      flatList.push(testList[i][j]);\n    }\n  }\n  return flatList;\n}\nfunction countBidirectional(testlist) {\n/**\n * * Write a function to count bidirectional tuple pairs.\n */", "entry_point": "countBidirectional", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]];\nvar x0 = countBidirectional(arg00);\nvar v0 = \"3\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]];\nvar x1 = countBidirectional(arg10);\nvar v1 = \"2\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]];\nvar x2 = countBidirectional(arg20);\nvar v2 = \"4\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = i + 1; j < testlist.length; j++) {\n      if (testlist[i][1] == testlist[j][1]) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < testlist.length - 1; i++) {\n    for (let j = i + 1; j < testlist.length; j++) {\n      if (testlist[i][1] == testlist[j][1]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = i + 1; j < testlist.length; j++) {\n      if (testlist[i][1] == testlist[j][1]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n  let cnt = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = i + 1; j < testlist.length; j++) {\n      if (testlist[i][1] == testlist[j][1]) {\n        cnt++;\n      }\n    }\n  }\n  return cnt;\n}\n", "\n  let bidirectional = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = 0; j < testlist[i].length; j++) {\n      if (i > j) {\n        bidirectional++;\n      }\n    }\n  }\n  return bidirectional;\n}\n"]}
{"task_id": "MBJSP/439", "prompt": "function mergeDictionaries(dict1, dict2) {\n/**\n * * Write a function to merge two dictionaries into a single expression.\n */\n  const merged = {};\n  for (const key in dict1) {\n    merged[key] = dict1[key];\n  }\n  for (const key in dict2) {\n    merged[key] = dict2[key];\n  }\n  return merged;\n}\nfunction strToTuple(teststr) {\n/**\n * * Write a function to convert the given string of integers into a tuple.\n */\n  return testStr.split(\", \").map(Number);\n}\nfunction convert(list) {\n/**\n * * Write a JavaScript function to convert a list of multiple integers into a single integer.\n */\n    let result = 0;\n    for (let i = 0; i < list.length; i++) {\n        result = result * 10 + list[i];\n    }\n    return result;\n}\nfunction multipleToSingle(l) {\n/**\n * * Write a function to convert a list of multiple integers into a single integer.\n */", "entry_point": "multipleToSingle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [11, 33, 50];\nvar x0 = multipleToSingle(arg00);\nvar v0 = 113350;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 2, 3, 4, 5, 6];\nvar x1 = multipleToSingle(arg10);\nvar v1 = -123456;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 15, 20, 25];\nvar x2 = multipleToSingle(arg20);\nvar v2 = 10152025;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let result = 0;\n    for (let i = 0; i < l.length; i++) {\n        result = result * 10 + l[i];\n    }\n    return result;\n}\n", "\n    return l.reduce((a, b) => a * b);\n}\n", "\n    let result = 0;\n    for (let i = 0; i < l.length; i++) {\n        result = result + l[i] * Math.pow(10, l.length - i - 1);\n    }\n    return result;\n}\n", "\n    let result = 0;\n    for (let i = 0; i < l.length; i++) {\n        result = result * 10 + l[i];\n    }\n    return result;\n}\n", "\n    return l.reduce((acc, num) => acc * 10 + num, 1);\n}\n"]}
{"task_id": "MBJSP/440", "prompt": "function mostCommonElem(s, a) {\n/**\n * * Write a function to find the most common elements and their counts of a specified text.\n */\n  const counts = {};\n  const result = [];\n\n  for (let i = 0; i < s.length; i += 1) {\n    if (counts[s[i]]) {\n      counts[s[i]] += 1;\n    } else {\n      counts[s[i]] = 1;\n    }\n  }\n\n  for (let i = 0; i < a; i += 1) {\n    const max = Math.max(...Object.values(counts));\n    const maxKey = Object.keys(counts).find(key => counts[key] === max);\n    result.push([maxKey, max]);\n    delete counts[maxKey];\n  }\n\n  return result;\n}\nfunction numPosition(text) {\n/**\n * * Write a function to separate and print the numbers and their position of a given string.\n */\n  const position = text.search(/[0-9]/g);\n  return position;\n}\nfunction findAdverbs(text) {\n/**\n * * Write a function to find all adverbs and their positions in a given sentence by using regex.\n */\n  const adverbs = []\n  const regex = /\\w+ly/g\n  let match\n\n  while ((match = regex.exec(text)) !== null) {\n    adverbs.push({ start: match.index, end: match.index + match[0].length })\n  }\n\n  return adverbs.map(adj => `${adj.start}-${adj.end}: ${text.substring(adj.start, adj.end)}`).join(\"\\n\")\n}\nfunction findAdverbPosition(text) {\n/**\n * * Write a function to find all adverbs and their positions in a given sentence.\n */", "entry_point": "findAdverbPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"clearly!! we can see the sky\";\nvar x0 = findAdverbPosition(arg00);\nvar v0 = [0, 7, \"clearly\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"seriously!! there are many roses\";\nvar x1 = findAdverbPosition(arg10);\nvar v1 = [0, 9, \"seriously\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"unfortunately!! sita is going to home\";\nvar x2 = findAdverbPosition(arg20);\nvar v2 = [0, 13, \"unfortunately\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const regex = /\\w+ly/g\n  let match, position\n\n  while ((match = regex.exec(text))!== null) {\n    position = match.index\n  }\n\n  return position\n}\n", "\n  const regex = /\\w+ly/g\n  let match\n\n  while ((match = regex.exec(text))!== null) {\n    return match.index\n  }\n  return -1\n}\n", "\n  const adverbs = []\n  const regex = /\\w+ly/g\n  let match\n\n  while ((match = regex.exec(text))!== null) {\n    adverbs.push({ start: match.index, end: match.index + match[0].length })\n  }\n\n  return adverbs.map(adj => `${adj.start}-${adj.end}: ${text.substring(adj.start, adj.end)}`).join(\"\\n\")\n}\n", "\n  const regex = /\\w+ly/g\n  let match\n\n  while ((match = regex.exec(text))!== null) {\n    return match.index + match[0].length\n  }\n}\n", "\n  const regex = /\\w+ly/g\n  let match\n\n  while ((match = regex.exec(text))!== null) {\n    text = text.substring(0, match.index) + text.substring(match.index + match[0].length);\n  }\n\n  return text;\n}\n"]}
{"task_id": "MBJSP/441", "prompt": "function surfaceArea(b, s) {\n/**\n * * Write a JavaScript function to find the surface area of the square pyramid.\n */\n    return 2 * b * s + Math.pow(b, 2);\n}\nfunction lateralsurfaceCone(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cone.\n */\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction surfaceareaCube(l) {\n/**\n * * Write a function to find the surface area of a cube.\n */", "entry_point": "surfaceareaCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = surfaceareaCube(arg00);\nvar v0 = 150;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = surfaceareaCube(arg10);\nvar v1 = 54;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = surfaceareaCube(arg20);\nvar v2 = 600;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * l * l;\n}\n", "\n  return (l * l * l);\n}\n", "\n  return l * l * l;\n}\n", "\n  return (3 * l * l);\n}\n", "\n  return (2 * 3.1415 * l * l);\n}\n"]}
{"task_id": "MBJSP/442", "prompt": "function rearrangeNumbs(arraynums) {\n/**\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n */\n  const positiveNums = arrayNums\n    .filter(num => num >= 0)\n    .sort((a, b) => a - b);\n  const negativeNums = arrayNums\n    .filter(num => num < 0)\n    .sort((a, b) => a - b);\n\n  return positiveNums.concat(negativeNums);\n}\nfunction lcm(x, y) {\n/**\n * * Write a JavaScript function to find lcm of two positive integers.\n */\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    var gcd = function(a, b) {\n        if(b == 0) {\n            return a;\n        }\n        else {\n            return gcd(b, a % b);\n        }\n    };\n    return ((x * y) / gcd(x, y));\n}\nfunction negativeCount(nums) {\n/**\n * * Write a function to find the ration of negative numbers in an array of integers.\n */\n  const negatives = nums.filter(num => num < 0);\n  const total = negatives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\nfunction positiveCount(nums) {\n/**\n * * Write a function to find the ration of positive numbers in an array of integers.\n */", "entry_point": "positiveCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nvar x0 = positiveCount(arg00);\nvar v0 = 0.54;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nvar x1 = positiveCount(arg10);\nvar v1 = 0.69;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x2 = positiveCount(arg20);\nvar v2 = 0.56;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const positives = nums.filter(num => num > 0);\n  const total = positives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n", "\n  const positives = nums.filter(num => num >= 0);\n  const total = positives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n\n", "\n  const positives = nums.filter(num => num > 0);\n  const total = positives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n", "\n  const positives = nums.filter(num => num > 0);\n  const total = positives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n", "\n  const positives = nums.filter(num => num > 0);\n  const total = positives.length;\n  const totalRatio = total / nums.length;\n  return totalRatio;\n}\n"]}
{"task_id": "MBJSP/443", "prompt": "function findFirstMissing(array, start, end) {\n/**\n * * Write a JavaScript function to find the smallest missing number from the given array.\n */\n  let result = end + 1;\n\n  for (let i = start; i <= end; i++) {\n    if (array.includes(i) === false) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction removeNegs(numlist) {\n/**\n * * Write a JavaScript function to remove negative numbers from a list.\n */\n    var newList = [];\n    for (var i = 0; i < numList.length; i++) {\n        if (numList[i] >= 0) {\n            newList.push(numList[i]);\n        }\n    }\n    return newList;\n}\nfunction largestPos(list1) {\n/**\n * * Write a JavaScript function to find the largest postive number from the given list.\n */\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0 && list1[i] > max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\nfunction largestNeg(list1) {\n/**\n * * Write a JavaScript function to find the largest negative number from the given list.\n */", "entry_point": "largestNeg", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, -4, -6];\nvar x0 = largestNeg(arg00);\nvar v0 = -6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, -8, -9];\nvar x1 = largestNeg(arg10);\nvar v1 = -9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, -1];\nvar x2 = largestNeg(arg20);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0 && list1[i] < max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0 && list1[i] > max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0 && list1[i] > max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0 && list1[i] < max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\n\n", "\n  let max = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0 && list1[i] > max) {\n      max = list1[i];\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/444", "prompt": "function sumElements(testtup) {\n/**\n * * Write a function to find the summation of tuple elements in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    sum += testTup[i];\n  }\n  return sum;\n}\nfunction minK(testlist, k) {\n/**\n * * Write a function to find minimum k records from tuple list.\n */\n  const sortedList = testList.sort((a, b) => a[1] - b[1]);\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(sortedList[i]);\n  }\n  return result;\n}\nfunction matrixToList(testlist) {\n/**\n * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n */\n  let flatList = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      flatList.push(testList[i][j]);\n    }\n  }\n  return flatList;\n}\nfunction trimTuple(testlist, k) {\n/**\n * * Write a function to trim each tuple by k in the given tuple list.\n */", "entry_point": "trimTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]];\nvar arg01 = 2;\nvar x0 = trimTuple(arg00, arg01);\nvar v0 = \"[(2,), (9,), (2,), (2,)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]];\nvar arg11 = 1;\nvar x1 = trimTuple(arg10, arg11);\nvar v1 = \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]];\nvar arg21 = 1;\nvar x2 = trimTuple(arg20, arg21);\nvar v2 = \"[(8, 4), (8, 12), (1, 7), (6, 9)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let trimmedList = [];\n  for (let i = 0; i < testList.length; i++) {\n    trimmedList.push(testList[i].slice(0, k));\n  }\n  return trimmedList;\n}\n", "\n  const flatList = matrixToList(testlist);\n  let trimmedList = [];\n  for (let i = 0; i < flatList.length; i++) {\n    if (i % k === 0) {\n      trimmedList.push(flatList[i]);\n    }\n  }\n  return trimmedList;\n}\n", "\n  for (let i = 0; i < k; i++) {\n    testlist.pop();\n  }\n  return testlist;\n}\n", "\n  const newList = [];\n  for (let i = 0; i < testlist.length; i++) {\n    let tempList = [];\n    for (let j = 0; j < k; j++) {\n      tempList.push(testlist[i][j]);\n    }\n    newList.push(tempList);\n  }\n  return newList;\n}\n", "\n  let trimmedList = [];\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = 0; j < k; j++) {\n      trimmedList.push(testlist[i][j]);\n    }\n  }\n  return trimmedList;\n}\n"]}
{"task_id": "MBJSP/445", "prompt": "function findKProduct(testlist, k) {\n/**\n * * Write a function to find the product of it\u2019s kth index in the given tuples.\n */\n  let product = 1;\n  for (let i = 0; i < testList.length; i++) {\n    product *= testList[i][k];\n  }\n  return product;\n}\nfunction findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction tupleModulo(testtup1, testtup2) {\n/**\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n */\n  return testTup1.map((element, index) => element % testTup2[index]);\n}\nfunction indexMultiplication(testtup1, testtup2) {\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n */", "entry_point": "indexMultiplication", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = indexMultiplication(arg00, arg01);\nvar v0 = [[6, 21], [12, 45], [2, 9], [7, 30]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = indexMultiplication(arg10, arg11);\nvar v1 = [[14, 32], [20, 60], [6, 20], [16, 44]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = indexMultiplication(arg20, arg21);\nvar v2 = [[24, 45], [30, 77], [12, 33], [27, 60]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const product = 1;\n    for (let j = 0; j < testTup2.length; j++) {\n      product *= testTup1[i] * testTup2[j];\n    }\n    result.push(product);\n  }\n  return result;\n}\n", "\n  let result = [];\n  let tup1 = testtup1;\n  let tup2 = testtup2;\n  if (testtup1.length > testtup2.length) {\n    let temp = tup1;\n    tup1 = tup2;\n    tup2 = temp;\n  }\n  for (let i = 0; i < tup1.length; i++) {\n    let product = 1;\n    for (let j = 0; j < tup2.length; j++) {\n      product *= tup1[i] * tup2[j];\n    }\n    result.push(product);\n  }\n  return result;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < testTup2.length; i++) {\n    product *= testtup1[i] * testTup2[i];\n  }\n  return product;\n}\n", "\n  return testTup1.map((element, index) => element * testTup2[index]);\n}\n", "\n  return testTup1.map((element, index) => element * testTup2[index]);\n}\n"]}
{"task_id": "MBJSP/446", "prompt": "function countRangeInList(li, min, max) {\n/**\n * * Write a function to count the number of elements in a list which are within a specific range.\n */\n  let count = 0;\n  for (let i = 0; i < li.length; i++) {\n    if (li[i] >= min && li[i] <= max) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction countDuplic(lists) {\n/**\n * * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n */\n    \"use strict\";\n    let element = [],\n        frequency = [],\n        running_count = 1;\n    if (!lists) return [element, frequency];\n    for (let i = 0; i < lists.length - 1; i++) {\n        if (lists[i] === lists[i + 1]) {\n            running_count += 1;\n        } else {\n            frequency.push(running_count);\n            element.push(lists[i]);\n            running_count = 1;\n        }\n    }\n    frequency.push(running_count);\n    element.push(lists[lists.length - 1]);\n    return [element, frequency];\n}\nfunction countElim(num) {\n/**\n * * Write a function to count the elements in a list until an element is a tuple.\n */\n  let count = 0;\n  while (typeof num[count] !== 'object') {\n    count += 1;\n  }\n\n  return count;\n}\nfunction countOccurrence(tup, lst) {\n/**\n * * Write a JavaScript function to count the occurence of all elements of list in a tuple.\n */", "entry_point": "countOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"a\", \"a\", \"c\", \"b\", \"d\"];\nvar arg01 = [\"a\", \"b\"];\nvar x0 = countOccurrence(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 4, 6, 7, 1, 4];\nvar arg11 = [1, 4, 7];\nvar x1 = countOccurrence(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [1, 2];\nvar x2 = countOccurrence(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (!tup ||!lst) return 0;\n  let tup_count = tup[0].length,\n      occurrences = 0;\n\n  for (let i = 0; i < tup_count; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      if (tup[0][i] === lst[j]) {\n        occurrences += 1;\n      }\n    }\n  }\n  return occurrences;\n}\n", "\n  \"use strict\";\n  let output = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === tup) output += 1;\n  }\n  return output;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < tup.length; i++) {\n    if (tup[i] === lst[i]) {\n      count += 1;\n    }\n  }\n  return count;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (tup.indexOf(lst[i])!== -1) {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n", "\n  \"use strict\";\n  let result = 0;\n  for (let i = 0; i < tup.length; i++) {\n    result += countOccurrence(tup[i], lst);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/447", "prompt": "function countEven(arraynums) {\n/**\n * * Write a function to find number of even elements in the given list using lambda function.\n */\n  return arrayNums.filter(num => num % 2 === 0).length;\n}\nfunction nthNums(nums, n) {\n/**\n * * Write a function to find the n-th power of individual elements in a list using lambda function.\n */\n  return nums.map(num => num ** n);\n}\nfunction squareNums(nums) {\n/**\n * * Write a function to find squares of individual elements in a list using lambda function.\n */\n  return nums.map(num => num * num);\n}\nfunction cubeNums(nums) {\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function.\n */", "entry_point": "cubeNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = cubeNums(arg00);\nvar v0 = [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 30];\nvar x1 = cubeNums(arg10);\nvar v1 = [1000, 8000, 27000];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 15];\nvar x2 = cubeNums(arg20);\nvar v2 = [1728, 3375];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.map(num => num * num * num);\n}\n", "\n  return nums.map(num => num * num * num);\n}\n", "\n  return nums.map(num => num * num * num);\n}\n", "\n  return nums.map(num => num * num * num);\n}\n", "\n  return nums.map(num => num * num * num);\n}\n"]}
{"task_id": "MBJSP/448", "prompt": "function geometricSum(n) {\n/**\n * * Write a function to calculate the geometric sum of n-1.\n */\n  if (n < 0) return 0;\n\n  if (n == 0) return 1;\n\n  return 1 / (Math.pow(2, n)) + geometricSum(n - 1);\n}\nfunction harmonicSum(n) {\n/**\n * * Write a function to calculate the harmonic sum of n-1.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += 1 / i;\n  }\n  return sum;\n}\nfunction harmonicSum(n) {\n/**\n * * Write a function to calculate the harmonic sum of n-1.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += 1 / i;\n  }\n  return sum;\n}\nfunction calSum(n) {\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */", "entry_point": "calSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = calSum(arg00);\nvar v0 = 49;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = calSum(arg10);\nvar v1 = 66;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 11;\nvar x2 = calSum(arg20);\nvar v2 = 88;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += perrin(i);\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += perrin(i);\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(2, i) - 1;\n  }\n  return sum;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += perrin(i);\n  }\n  return sum;\n}\n```\n\n#### \u57fa\u7840\u9ad8\u7ea7\n\n|  |   | | | | |\n| --- | --- | --- | --- | --- | --- |\n|  | **Sum** | **Product** | **Maximum** | **Minimum** | **Average** |\n| 1 |   |   |   |   |\n| 2 |   |   |   |   |\n| 3 |   |   |   |   |\n| 4 |   |   |   |   |\n| 5 |   |   |   |   |\n| 6 |   |   |   |   |\n| 7 |   |   |   |   |\n| 8 |   |   |   |   |\n| 9 |   |   |   |   |\n| 10 |   |   |   |   |\n| 11 |   |   |   |   |\n| 12 |   |   |   |   |\n| 13 |   |   |   |   |\n| 14 |   |   |   |   |\n| 15 |   |   |   |   |\n| 16 |   |   |   |   |\n| 17 |   |   |   |   |\n| 18 |   |   |   |   |\n| 19 |   |   |   |   |\n| 20 |   |   |   |   |\n\n<a name=\"%E4%BA%8C%E5%88%B0%E7%BC%96%E7%A8%8B%E7%9A%84%E5%9C"]}
{"task_id": "MBJSP/449", "prompt": "function checkEmail(email) {\n/**\n * * Write a function to check if the string is a valid email address or not using regex.\n */\n  const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return regex.test(String(email).toLowerCase()) ? \"Valid Email\" : \"Invalid Email\";\n}\nfunction checkIp(ip) {\n/**\n * * Write a function to check whether the given ip address is valid or not using regex.\n */\n  const regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n  return regex.test(ip) ? \"Valid IP address\" : \"Invalid IP address\";\n}\nfunction validityTriangle(a, b, c) {\n/**\n * * Write a function to check if the triangle is valid or not.\n */\n    let sum = a + b + c;\n    return sum === 180;\n}\nfunction checkTriangle(x1, y1, x2, y2, x3, y3) {\n/**\n * * Write a JavaScript function to check whether the triangle is valid or not if 3 points are given.\n */", "entry_point": "checkTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar arg03 = 5;\nvar arg04 = 4;\nvar arg05 = 6;\nvar x0 = checkTriangle(arg00, arg01, arg02, arg03, arg04, arg05);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 1;\nvar arg12 = 1;\nvar arg13 = 4;\nvar arg14 = 1;\nvar arg15 = 5;\nvar x1 = checkTriangle(arg10, arg11, arg12, arg13, arg14, arg15);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 1;\nvar arg22 = 1;\nvar arg23 = 1;\nvar arg24 = 1;\nvar arg25 = 1;\nvar x2 = checkTriangle(arg20, arg21, arg22, arg23, arg24, arg25);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return validityTriangle(x1, y1, x2, y2, x3, y3);\n}\n", "\n  return validityTriangle(x1, y1, x2, y2, x3, y3);\n}\n", "\n    let sum = (x1 + x2 + x3) + (y1 + y2 + y3);\n    let r = Math.sqrt(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2))) + Math.sqrt(((x1 - x3) * (x1 - x3)) + ((y1 - y3) * (y1 - y3))) + Math.sqrt(((x2 - x3) * (x2 - x3)) + ((y2 - y3) * (y2 - y3)));\n    return (sum - r) <= 2 && (sum - r) >= -2;\n}\n", "\n    return validityTriangle(x1, y1, x2, y2, x3, y3)? \"Valid triangle\" : \"Invalid triangle\";\n}\n", "\n    if (x1 === x2 && x1 === x3 && x1!== 0 && y1 === y2 && y1 === y3 && y1!== 0) {\n        return \"Invalid Triangle\";\n    }\n    else if (validityTriangle(x1, y1, x2, y2, x3, y3)) {\n        return \"Valid Triangle\";\n    }\n    return \"Invalid Triangle\";\n}\n"]}
{"task_id": "MBJSP/450", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction extractColumn(list1, n) {\n/**\n * * Write a function to extract a specified column from a given nested list.\n */\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i][n]);\n  }\n  return result;\n}\nfunction extractUnique(testdict) {\n/**\n * * Write a function to extract unique values from the given dictionary values.\n */\n  const keys = Object.keys(testDict);\n  const vals = Object.values(testDict);\n  const uniqueVals = [];\n  vals.forEach((val) => {\n    val.forEach((v) => {\n      if (uniqueVals.indexOf(v) === -1) {\n        uniqueVals.push(v);\n      }\n    });\n  });\n  return uniqueVals.sort((a, b) => a - b);\n}\nfunction extractString(str, l) {\n/**\n * * Write a function to extract specified size of strings from a give list of string values.\n */", "entry_point": "extractString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg01 = 8;\nvar x0 = extractString(arg00, arg01);\nvar v0 = [\"practice\", \"solution\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg11 = 6;\nvar x1 = extractString(arg10, arg11);\nvar v1 = [\"Python\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg21 = 9;\nvar x2 = extractString(arg20, arg21);\nvar v2 = [\"exercises\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  str.forEach((str) => {\n    if (result.length < l) {\n      result.push(str);\n    }\n  });\n  return result;\n}\n", "\n    // Write your code here\n    if (str.length > l) {\n        throw Error('extractString failed.');\n    }\n    return str.substr(0, l);\n}\n", "\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str[i].substring(0, l));\n  }\n  return result;\n}\n", "\n  return str.substr(0, l);\n}\n", "\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].length <= l) {\n      result.push(str[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n"]}
{"task_id": "MBJSP/451", "prompt": "function replaceSpaces(text) {\n/**\n * * Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n */\n  return text.replace(/\\s/g, \"_\");\n}\nfunction removeExtraChar(text1) {\n/**\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n */\n    return text1.replace(/[^a-zA-Z0-9]/g, '');\n}\nfunction removeAllSpaces(text) {\n/**\n * * Write a function to remove all whitespaces from a string.\n */\n  return text.replace(/\\s/g, '');\n}\nfunction removeWhitespaces(text1) {\n/**\n * * Write a function to remove all whitespaces from the given string using regex.\n */", "entry_point": "removeWhitespaces", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \" Google    Flutter \";\nvar x0 = removeWhitespaces(arg00);\nvar v0 = \"GoogleFlutter\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \" Google    Dart \";\nvar x1 = removeWhitespaces(arg10);\nvar v1 = \"GoogleDart\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \" iOS    Swift \";\nvar x2 = removeWhitespaces(arg20);\nvar v2 = \"iOSSwift\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return text1.replace(/[\\s\\xa0]/g, '');\n}\n", "\n  return text1.replace(/ /g, '');\n}\n", "\n  return text1.replace(/\\s/g, '');\n}\n", "\n  return text1.replace(/\\s/g, '');\n}\n", "\n    return text1.replace(/\\s/g, '');\n}\n"]}
{"task_id": "MBJSP/453", "prompt": "function averageEven(n) {\n/**\n * * Write a JavaScript function to find the average of even numbers till a given even number.\n */\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\nfunction findMinSum(num) {\n/**\n * * Write a JavaScript function to find minimum sum of factors of a given number.\n */\n  let sum = 0;\n  let minSum = Infinity;\n  let factor = 2;\n  while (num > 1) {\n    if (num % factor === 0) {\n      sum += factor;\n      num = num / factor;\n    } else {\n      factor++;\n    }\n  }\n  minSum = sum < minSum ? sum : minSum;\n  return minSum;\n}\nfunction sumOfOddFactors(n) {\n/**\n * * Write a JavaScript function to find sum of odd factors of a number.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 !== 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\nfunction sumoffactors(n) {\n/**\n * * Write a JavaScript function to find the sum of even factors of a number.\n */", "entry_point": "sumoffactors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 18;\nvar x0 = sumoffactors(arg00);\nvar v0 = 26;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = sumoffactors(arg10);\nvar v1 = 48;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = sumoffactors(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 === 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 === 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 === 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 === 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 === 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n"]}
{"task_id": "MBJSP/454", "prompt": "function textMatch(text) {\n/**\n * * Write a function that matches a string that has an a followed by zero or more b's.\n */\n  if (text.match(/a/g) === null) {\n    return \"Not matched!\";\n  } else {\n    return \"Found a match!\";\n  }\n}\nfunction textMatchThree(text) {\n/**\n * * Write a function that matches a string that has an a followed by three 'b'.\n */\n  if (text.match(/a\\w*b\\w*b\\w*/)) {\n    return \"Found a match!\";\n  }\n  return \"Not matched!\";\n}\nfunction textMatchWordzMiddle(text) {\n/**\n * * Write a function that matches a word containing 'z', not at the start or end of the word.\n */\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\nfunction textMatchWordz(text) {\n/**\n * * Write a function that matches a word containing 'z'.\n */", "entry_point": "textMatchWordz", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"pythonz.\";\nvar x0 = textMatchWordz(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"xyz.\";\nvar x1 = textMatchWordz(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang  .\";\nvar x2 = textMatchWordz(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    } else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n", "\n    var regex = /z/g;\n    var match = text.match(regex);\n    if (match === null) {\n        return \"Not matched!\";\n    }\n    else {\n        return \"Found a match!\";\n    }\n}\n"]}
{"task_id": "MBJSP/455", "prompt": "function checkMonthnumNumber(monthnum1) {\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\n    return monthnum1 % 2 === 0 ? true : false;\n}\nfunction checkMonthnumberNumber(monthnum3) {\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\n  if (monthnum3 >= 1 && monthnum3 <= 12) {\n    if (monthnum3 === 2) {\n      if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n        return true;\n      }\n    } else if (monthnum3 === 4 || monthnum3 === 6 || monthnum3 === 9 || monthnum3 === 11) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction checkMonthnumb(monthname2) {\n/**\n * * Write a function to check whether the given month name contains 31 days or not.\n */\n    if (monthname2 === \"January\" || monthname2 === \"March\" || monthname2 === \"May\" || monthname2 === \"July\" || monthname2 === \"August\" || monthname2 === \"October\" || monthname2 === \"December\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction checkMonthnumbNumber(monthnum2) {\n/**\n * * Write a function to check whether the given month number contains 31 days or not.\n */", "entry_point": "checkMonthnumbNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = checkMonthnumbNumber(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = checkMonthnumbNumber(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = checkMonthnumbNumber(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    if (monthnum2 >= 1 && monthnum2 <= 12) {\n        if (monthnum2 === 2) {\n            if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n                return true;\n            }\n        } else if (monthnum2 === 4 || monthnum2 === 6 || monthnum2 === 9 || monthnum2 === 11) {\n            return true;\n        }\n    }\n    return false;\n}\n", "\n  if (monthnum2 >= 1 && monthnum2 <= 12) {\n    if (monthnum2 === 2) {\n      if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n        return true;\n      }\n    } else if (monthnum2 === 4 || monthnum2 === 6 || monthnum2 === 9 || monthnum2 === 11) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n    if (monthnum2 >= 1 && monthnum2 <= 12) {\n      if (monthnum2 === 2) {\n        if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n          return true;\n        }\n      } else if (monthnum2 === 4 || monthnum2 === 6 || monthnum2 === 9 || monthnum2 === 11) {\n        return true;\n      }\n    }\n    return false;\n}\n", "\n    if (monthnum2 >= 1 && monthnum2 <= 12) {\n        if (monthnum2 === 2) {\n            if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n                return true;\n            }\n        } else if (monthnum2 === 4 || monthnum2 === 6 || monthnum2 === 9 || monthnum2 === 11) {\n            return true;\n        }\n    }\n    return false;\n}\n", "\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n  } else if (monthnum2 === 4 || monthnum2 === 6 || monthnum2 === 9 || monthnum2 === 11) {\n    return true;\n  }\n  return false;\n}\n"]}
{"task_id": "MBJSP/456", "prompt": "function anagramLambda(texts, str) {\n/**\n * * Write a function to find all anagrams of a string in a given list of strings using lambda function.\n */\n  const sorted = str.split(\"\").sort().join(\"\");\n  return texts.filter(text => {\n    const sortedText = text.split(\"\").sort().join(\"\");\n    return sortedText === sorted;\n  });\n}\nfunction reverseListLists(lists) {\n/**\n * * Write a function to reverse each list in a given list of lists.\n */\n  return lists.map(list => list.reverse());\n}\nfunction countReversePairs(testlist) {\n/**\n * * Write a function to count the pairs of reverse strings in the given string list.\n */\n  let count = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = i + 1; j < testList.length; j++) {\n      if (testList[i] === testList[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction reverseStringList(stringlist) {\n/**\n * * Write a function to reverse strings in a given list of string values.\n */", "entry_point": "reverseStringList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"];\nvar x0 = reverseStringList(arg00);\nvar v0 = [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"john\", \"amal\", \"joel\", \"george\"];\nvar x1 = reverseStringList(arg10);\nvar v1 = [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"jack\", \"john\", \"mary\"];\nvar x2 = reverseStringList(arg20);\nvar v2 = [\"kcaj\", \"nhoj\", \"yram\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return stringlist.map(string => string.split(\"\").reverse().join(\"\"));\n}\n", "\n  return stringlist.map(string => new String(string).reverse());\n}\n", "\n  return stringlist.map(str => {\n    return str.split(\"\").reverse().join(\"\");\n  });\n}\n", "\n  return stringlist.map(string => string.split(\"\").reverse().join(\"\"));\n}\n", "\n  return stringlist.map(s => s.split(\"\").reverse().join(\"\"));\n}\n"]}
{"task_id": "MBJSP/457", "prompt": "function interleaveLists(list1, list2, list3) {\n/**\n * * Write a function to interleave lists of the same length.\n */\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < list1.length && j < list2.length && k < list3.length) {\n    result.push(list1[i]);\n    result.push(list2[j]);\n    result.push(list3[k]);\n    i++;\n    j++;\n    k++;\n  }\n\n  while (i < list1.length) {\n    result.push(list1[i]);\n    i++;\n  }\n\n  while (j < list2.length) {\n    result.push(list2[j]);\n    j++;\n  }\n\n  while (k < list3.length) {\n    result.push(list3[k]);\n    k++;\n  }\n\n  return result;\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find length of the subarray having maximum sum.\n */\n    let maxSum = 0;\n    let currentSum = 0;\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < a.length; i++) {\n        currentSum += a[i];\n        if (currentSum < 0) {\n            currentSum = 0;\n            start = i + 1;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            end = i;\n        }\n    }\n    return end - start + 1;\n}\nfunction minLength(list1) {\n/**\n * * Write a function to find the list of lists with minimum length.\n */\n  let min = Infinity;\n  let minList = [];\n  let minListIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let list = list1[i];\n    let listLength = list.length;\n    if (listLength < min) {\n      min = listLength;\n      minList = list;\n      minListIndex = i;\n    }\n  }\n  return [minListIndex + 1, minList];\n}\nfunction findMin(lst) {\n/**\n * * Write a JavaScript function to find the sublist having minimum length.\n */", "entry_point": "findMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [1, 2], [1, 2, 3]];\nvar x0 = findMin(arg00);\nvar v0 = [1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 1], [1, 1, 1], [1, 2, 7, 8]];\nvar x1 = findMin(arg10);\nvar v1 = [1, 1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]];\nvar x2 = findMin(arg20);\nvar v2 = [\"x\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let min = Infinity;\n  let minList = [];\n  let minListIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let list = lst[i];\n    let listLength = list.length;\n    if (listLength < min) {\n      min = listLength;\n      minList = list;\n      minListIndex = i;\n    }\n  }\n  return [minListIndex + 1, minList];\n}\n", "\n  let min = Infinity;\n  let minList = [];\n  let minListIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let list = lst[i];\n    let listLength = list.length;\n    if (listLength < min) {\n      min = listLength;\n      minList = list;\n      minListIndex = i;\n    }\n  }\n  return [minListIndex + 1, minList];\n}\n", "\n  let min = Infinity;\n  let minList = [];\n  let minListIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let list = lst[i];\n    let listLength = list.length;\n    if (listLength < min) {\n      min = listLength;\n      minList = list;\n      minListIndex = i;\n    }\n  }\n  return minList;\n}\n", "\n  let min = Infinity;\n  let minList = [];\n  let minListIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let list = lst[i];\n    let listLength = list.length;\n    if (listLength < min) {\n      min = listLength;\n      minList = list;\n      minListIndex = i;\n    }\n  }\n  return [minListIndex + 1, minList];\n}\n", "\n  let min = Infinity;\n  let minList = [];\n  let minListIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let list = lst[i];\n    let listLength = list.length;\n    if (listLength < min) {\n      min = listLength;\n      minList = list;\n      minListIndex = i;\n    }\n  }\n  return [minListIndex + 1, minList];\n}\n"]}
{"task_id": "MBJSP/458", "prompt": "function areaTrapezium(base1, base2, height) {\n/**\n * * Write a function to find the area of a trapezium.\n */\n  return (base1 + base2) * height / 2;\n}\nfunction rombusArea(p, q) {\n/**\n * * Write a function to find the area of a rombus.\n */\n  if (p === 0 || q === 0) {\n    return 0;\n  } else if (p < q) {\n    return rombusArea(q, p);\n  } else if (p === q) {\n    return p * q;\n  } else if (p > q) {\n    let result = p * q;\n    return result - (rombusArea(p - q, q));\n  }\n}\nfunction rectanglePerimeter(l, b) {\n/**\n * * Write a function to find the perimeter of a rectangle.\n */\n  return 2 * (l + b);\n}\nfunction rectangleArea(l, b) {\n/**\n * * Write a function to find the area of a rectangle.\n */", "entry_point": "rectangleArea", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = rectangleArea(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 5;\nvar x1 = rectangleArea(arg10, arg11);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 2;\nvar x2 = rectangleArea(arg20, arg21);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * b;\n}\n", "\n  return l * b;\n}\n", "\n  return l * b;\n}\n", "\n  return l * b;\n}\n", "\n  return l * b;\n}\n"]}
{"task_id": "MBJSP/459", "prompt": "function removeMultipleSpaces(text1) {\n/**\n * * Write a function to remove multiple spaces in a string by using regex.\n */\n  return text1.replace(/\\s{2,}/g, \" \");\n}\nfunction removeExtraChar(text1) {\n/**\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n */\n    return text1.replace(/[^a-zA-Z0-9]/g, '');\n}\nfunction splitList(text) {\n/**\n * * Write a function to split the given string at uppercase letters by using regex.\n */\n  return text.split(/(?=[A-Z])/);\n}\nfunction removeUppercase(str1) {\n/**\n * * Write a function to remove uppercase substrings from a given string by using regex.\n */", "entry_point": "removeUppercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"cAstyoUrFavoRitETVshoWs\";\nvar x0 = removeUppercase(arg00);\nvar v0 = \"cstyoravoitshos\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"wAtchTheinTernEtrAdIo\";\nvar x1 = removeUppercase(arg10);\nvar v1 = \"wtchheinerntrdo\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"VoicESeaRchAndreComMendaTionS\";\nvar x2 = removeUppercase(arg20);\nvar v2 = \"oiceachndreomendaion\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str1.replace(/(.)([A-Z])/g, \"$1$2\");\n}\n", "\n  return str1.replace(/([A-Z])/g, \"\");\n}\n", "\n  return str1.replace(/([A-Z])/g, \"\");\n}\n", "\n  return str1.replace(/[A-Z]/g, '');\n}\n", "\n    return str1.replace(/([A-Z])/g, \" $1\");\n}\n\n/**\n * Write a "]}
{"task_id": "MBJSP/460", "prompt": "function checkSmaller(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] < testTup2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\nfunction checkGreater(testtup1, testtup2) {\n/**\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n */\n  let result = true;\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] > testTup2[i]) {\n      result = false;\n    }\n  }\n  return result;\n}\nfunction extract(lst) {\n/**\n * * Write a JavaScript function to get the last element of each sublist.\n */\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][lst[i].length - 1]);\n    }\n    return result;\n}\nfunction extract(lst) {\n/**\n * * Write a JavaScript function to get the first element of each sublist.\n */", "entry_point": "extract", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2], [3, 4, 5], [6, 7, 8, 9]];\nvar x0 = extract(arg00);\nvar v0 = [1, 3, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5]];\nvar x1 = extract(arg10);\nvar v1 = [1, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[9, 8, 1], [1, 2]];\nvar x2 = extract(arg20);\nvar v2 = [9, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][0]);\n    }\n    return result;\n}\n", "\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][0]);\n    }\n    return result;\n}\n", "\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][0]);\n    }\n    return result;\n}\n", "\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][0]);\n    }\n    return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    result.push(lst[i][0]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/461", "prompt": "function textUppercaseLowercase(text) {\n/**\n * * Write a function to find the sequences of one upper case letter followed by lower case letters.\n */\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\nfunction lowerCtr(str) {\n/**\n * * Write a JavaScript function to count lower case letters in a given string.\n */\n    return str.split('').filter(x => x.toLowerCase() === x).length;\n}\nfunction toggleString(string) {\n/**\n * * Write a function to toggle characters case in a string.\n */\n  return string.split(\"\").map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join(\"\");\n}\nfunction upperCtr(str) {\n/**\n * * Write a JavaScript function to count the upper case characters in a given string.\n */", "entry_point": "upperCtr", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"PYthon\";\nvar x0 = upperCtr(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"BigData\";\nvar x1 = upperCtr(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"program\";\nvar x2 = upperCtr(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return str.split('').filter(x => x.toUpperCase() === x).length;\n}\n", "\n    return str.split('').map(x => {\n    return x.toUpperCase();\n  }).join('');\n}\n", "\n  return str.split('').filter(x => x.toUpperCase() === x).length;\n}\n\nvar unknown = \"UNKNOWN\";\nvar unknownString = `${unknown}\\n`;\nvar unknownStringLength = unknownString.length;\nvar unknownMatch = ", "\n  return str.split('').map(x => x.toUpperCase()).join(\"\");\n}\n", "\n  return str.split('').filter(x => x.toUpperCase() === x).length;\n}\nconst get = ("]}
{"task_id": "MBJSP/462", "prompt": "function sumElements(testtup) {\n/**\n * * Write a function to find the summation of tuple elements in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    sum += testTup[i];\n  }\n  return sum;\n}\nfunction sumOfSubarrayProd(arr, n) {\n/**\n * * Write a JavaScript function to find sum of products of all possible subarrays.\n */\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i; j < n; j++) {\n            let product = arr.slice(i, j + 1).reduce((a, b) => a * b);\n            sum += product;\n        }\n    }\n    return sum;\n}\nfunction findCombinations(testlist) {\n/**\n * * Write a function to find the combinations of sums with tuples in the given tuple list.\n */\n  const length = testList.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      result.push([testList[i][0] + testList[j][0], testList[i][1] + testList[j][1]]);\n    }\n  }\n  return result;\n}\nfunction combinationsList(list1) {\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */", "entry_point": "combinationsList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"orange\", \"red\", \"green\", \"blue\"];\nvar x0 = combinationsList(arg00);\nvar v0 = [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar x1 = combinationsList(arg10);\nvar v1 = [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"black\", \"orange\"];\nvar x2 = combinationsList(arg20);\nvar v2 = [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let combinations = [];\n  let length = list1.length;\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      combinations.push([list1[i], list1[j]]);\n    }\n  }\n  return combinations;\n}\n\n", "\n  let list = list1.slice();\n  let result = [];\n  let length = list.length;\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      let list1 = list.slice();\n      list1[i][0] += list1[j][0];\n      list1[i][1] += list1[j][1];\n      result.push(list1);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = i + 1; j < list1.length; j++) {\n      result.push([list1[i], list1[j]]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  let temp = [];\n  let temp2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    temp = list1.slice(i, i + 1);\n    for (let j = 0; j < temp.length; j++) {\n      temp2 = temp.slice(j, j + 1);\n      result.push(temp2);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  "]}
{"task_id": "MBJSP/463", "prompt": "function maxSumIncreasingSubsequence(arr, n) {\n/**\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n */\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find the largest sum of contiguous subarray in the given array.\n */\n  if (size === 0) return 0;\n  if (size === 1) return a[0];\n  let maxSum = a[0];\n  let tempSum = a[0];\n  for (let i = 1; i < size; i++) {\n    tempSum = Math.max(a[i], tempSum + a[i]);\n    maxSum = Math.max(maxSum, tempSum);\n  }\n  return maxSum;\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find length of the subarray having maximum sum.\n */\n    let maxSum = 0;\n    let currentSum = 0;\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < a.length; i++) {\n        currentSum += a[i];\n        if (currentSum < 0) {\n            currentSum = 0;\n            start = i + 1;\n        }\n        if (currentSum > maxSum) {\n            maxSum = currentSum;\n            end = i;\n        }\n    }\n    return end - start + 1;\n}\nfunction maxSubarrayProduct(arr) {\n/**\n * * Write a function to find the maximum product subarray of the given array.\n */", "entry_point": "maxSubarrayProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, -2, -3, 0, 7, -8, -2];\nvar x0 = maxSubarrayProduct(arg00);\nvar v0 = 112;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [6, -3, -10, 0, 2];\nvar x1 = maxSubarrayProduct(arg10);\nvar v1 = 180;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-2, -40, 0, -2, -3];\nvar x2 = maxSubarrayProduct(arg20);\nvar v2 = 80;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let maxProduct = 1;\n  let currentProduct = 1;\n  let start = 0;\n  let end = 0;\n  for (let i = 0; i < arr.length; i++) {\n    currentProduct *= arr[i];\n    if (currentProduct > maxProduct) {\n        maxProduct = currentProduct;\n        end = i;\n        start = end - arr.length + 1;\n    }\n    if (currentProduct < 1) {\n        currentProduct = 1;\n    }\n  }\n  return maxProduct;\n}\n", "\n  let maxProduct = 1;\n  let currentProduct = 1;\n  let start = 0;\n  let end = 0;\n  for (let i = 0; i < arr.length; i++) {\n      currentProduct *= arr[i];\n      if (currentProduct > maxProduct) {\n          maxProduct = currentProduct;\n          start = i;\n          end = i;\n      }\n      if (currentProduct < 1) {\n          currentProduct = 1;\n          end = i;\n      }\n  }\n  return maxProduct;\n}\n", "\n  if (arr.length === 1) return arr[0];\n  let product = arr[0];\n  let maxProduct = arr[0];\n  let currentProduct = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    currentProduct = currentProduct * arr[i];\n    product = Math.max(product, currentProduct);\n    maxProduct = Math.max(maxProduct, product);\n  }\n  return maxProduct;\n}\n", "\n  if (arr.length === 0) return 0;\n  if (arr.length === 1) return arr[0];\n  let maxProduct = arr[0];\n  let tempProduct = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    tempProduct = Math.max(arr[i], tempProduct * arr[i]);\n    maxProduct = Math.max(tempProduct, maxProduct);\n  }\n  return maxProduct;\n}\n", "\n    let max = 1;\n    let min = 1;\n    let product = 1;\n    let temp = 0;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        if (arr[i] > 0) {\n            temp = max;\n            max = Math.max(product, max * arr[i]);\n            product = temp * arr[i];\n        } else if (arr[i] < 0) {\n            temp = min;\n            min = Math.min(product, min * arr[i]);\n            product = temp * arr[i];\n        }\n    }\n    return max;\n}\n"]}
{"task_id": "MBJSP/464", "prompt": "function cummulativeSum(testlist) {\n/**\n * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      sum += testList[i][j];\n    }\n  }\n  return sum;\n}\nfunction checkValid(testtup) {\n/**\n * * Write a function to check if the given tuple contains all valid values or not.\n */\n  return testTup.every(function(element) {\n    return element === true;\n  });\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction checkValue(dict, n) {\n/**\n * * Write a function to check if all values are same in a dictionary.\n */", "entry_point": "checkValue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg01 = 10;\nvar x0 = checkValue(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg11 = 12;\nvar x1 = checkValue(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg21 = 5;\nvar x2 = checkValue(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let values = [];\n  for (let i = 0; i < dict.length; i++) {\n    values.push(dict[i]);\n  }\n  return values[n];\n}\n", "\n  let check = true;\n  for (let i = 0; i < dict.length; i++) {\n    if (dict[i]!== dict[n]) {\n      check = false;\n      break;\n    }\n  }\n  return check;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < dict.length; i++) {\n    if (dict[i] === n) {\n      sum++;\n    }\n  }\n  return sum === dict.length;\n}\n", "\n  return dict.every(", "\n    for (let i = 0; i < dict.length; i++) {\n        if (dict[i] === n) {\n            return true;\n        }\n    }\n    return false;\n}\n"]}
{"task_id": "MBJSP/465", "prompt": "function smallNnum(list1, n) {\n/**\n * * Write a function to get the n smallest items from a dataset.\n */\n  let list = [...list1];\n  let sorted = list.sort((a, b) => a - b);\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n}\nfunction removeEmpty(tuple1) {\n/**\n * * Write a function to remove an empty tuple from a list of tuples.\n */\n  return tuple1.filter(function (tuple) {\n    return tuple.length > 0;\n  });\n}\nfunction returnSum(dict) {\n/**\n * * Write function to find the sum of all items in the given dictionary.\n */\n  let sum = 0;\n  for (let key in dict) {\n    sum += dict[key];\n  }\n  return sum;\n}\nfunction dropEmpty(dict1) {\n/**\n * * Write a function to drop empty items from a given dictionary.\n */", "entry_point": "dropEmpty", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"c1\"':\"Red\",'\"c2\"':\"Green\",'\"c3\"':null};\nvar x0 = dropEmpty(arg00);\nvar v0 = {'\"c1\"':\"Red\",'\"c2\"':\"Green\"};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"c1\"':\"Red\",'\"c2\"':null,'\"c3\"':null};\nvar x1 = dropEmpty(arg10);\nvar v1 = {'\"c1\"':\"Red\"};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"c1\"':null,'\"c2\"':\"Green\",'\"c3\"':null};\nvar x2 = dropEmpty(arg20);\nvar v2 = {'\"c2\"':\"Green\"};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = {};\n  for (let key in dict1) {\n    if (dict1[key].length > 0) {\n      result[key] = dict1[key];\n    }\n  }\n  return result;\n}\n", "\n  return dict1.filter(", "\n  let dict = dict1.filter(", "\n  let dict2 = {};\n  for (let key in dict1) {\n    if (dict1[key].length > 0) {\n      dict2[key] = dict1[key];\n    }\n  }\n  return dict2;\n}\n", "\n  return dict1.filter("]}
{"task_id": "MBJSP/466", "prompt": "function findExtra(arr1, arr2, n) {\n/**\n * * Write a JavaScript function to find the index of an extra element present in one sorted array.\n */\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  while (k < arr1.length && arr1[k] === arr2[k]) {\n    k++;\n  }\n  return k === arr1.length ? arr2.length : k;\n}\nfunction last(arr, x, n) {\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (arr[mid] !== x && start < end) {\n        if (x < arr[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    if (arr[mid] === x) {\n        return mid;\n    }\n    return -1;\n}\nfunction findMax(arr, low, high) {\n/**\n * * Write a JavaScript function to find the maximum element in a sorted and rotated array.\n */\n  if (low === high) {\n    return arr[low];\n  }\n\n  if (low > high) {\n    return -1;\n  }\n\n  const mid = Math.floor((low + high) / 2);\n  const leftMax = findMax(arr, low, mid);\n  const rightMax = findMax(arr, mid + 1, high);\n\n  return Math.max(leftMax, rightMax);\n}\nfunction findPeak(arr, n) {\n/**\n * * Write a function to find the peak element in the given array.\n */", "entry_point": "findPeak", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 20, 4, 1, 0];\nvar arg01 = 6;\nvar x0 = findPeak(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 5, 6];\nvar arg11 = 5;\nvar x1 = findPeak(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 12, 14, 15];\nvar arg21 = 6;\nvar x2 = findPeak(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n === 1) {\n    return arr[0];\n  }\n\n  if (n === 2) {\n    if (arr[0] < arr[1]) {\n      return arr[0];\n    } else {\n      return arr[1];\n    }\n  }\n\n  const mid = Math.floor((n - 1) / 2);\n  const leftPeak = findPeak(arr, mid);\n  const rightPeak = findPeak(arr, mid + 1);\n\n  if (leftPeak < rightPeak && leftPeak < arr[mid]) {\n    return leftPeak;\n  } else if (rightPeak < leftPeak && rightPeak < arr[mid]) {\n    return rightPeak;\n  } else {\n    return arr[mid];\n  }\n}\n", "\n  let i = 0;\n  let j = n - 1;\n  let k = i;\n  while (i < j) {\n    if (arr[i] < arr[j]) {\n      k = j;\n      j = j - 1;\n    } else {\n      k = i;\n      i++;\n    }\n  }\n  return k;\n}\n", "\n  if (n == 1) {\n    return arr[0];\n  }\n  if (n == 2) {\n    if (arr[0] > arr[1]) {\n      return arr[0];\n    } else {\n      return arr[1];\n    }\n  }\n\n  return findPeak(arr, n - 1) > findPeak(arr, n - 2)? findPeak(arr, n - 1) : findPeak(arr, n - 2);\n}\n", "\n  let start = 0;\n  let end = n - 1;\n  let mid = Math.floor((start + end) / 2);\n  let leftMax = findPeak(arr, n);\n  let rightMax = findPeak(arr, n);\n  let peak = leftMax === -1? rightMax : leftMax;\n  return peak? peak : arr[mid];\n}\n", "\n  let i = 0;\n  let j = 1;\n  while (i < n - 1 && arr[i] > arr[i + 1]) {\n    i++;\n  }\n  while (j < n && arr[j] > arr[j - 1]) {\n    j++;\n  }\n  if (i === n - 1 && j === n) {\n    return arr[n - 1];\n  }\n  return arr[j - 1] > arr[i]? arr[j - 1] : arr[i];\n}\n"]}
{"task_id": "MBJSP/467", "prompt": "function minSwaps(str1, str2) {\n/**\n * * Write a JavaScript function to count minimum number of swaps required to convert one binary string to another.\n */\n    // Write your code here\n    count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] != str2[i]) {\n            count++;\n        }\n    }\n    if (count % 2 == 0) {\n        return count / 2;\n    } else {\n        return \"Not Possible\";\n    }\n}\nfunction tupleToFloat(testtup) {\n/**\n * * Write a function to convert the given tuple to a floating-point number.\n */\n  var num = parseFloat(testTup[0] + \".\" + testTup[1])\n  return num\n}\nfunction isDecimal(num) {\n/**\n * * Write a function to check a decimal with a precision of 2.\n */\n  return /^-?\\d*\\.?\\d{0,2}$/.test(num);\n}\nfunction decimalToOctal(decinum) {\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */", "entry_point": "decimalToOctal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = decimalToOctal(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = decimalToOctal(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 33;\nvar x2 = decimalToOctal(arg20);\nvar v2 = 41;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    var octal = Number(decinum).toOctalString().split(\"\")\n    for (let i = 0; i < octal.length; i++) {\n        if (octal[i].length > 1) {\n            octal[i] = octal[i].substring(0, 1)\n        }\n    }\n    return octal.join(\"\")\n}\n", "\n    let arr = [...String(decinum)]\n    let rem = arr.length\n    let oct = \"0\"\n    for (let i = 0; i < arr.length; i++) {\n        rem--\n        if (rem > 0) {\n            oct = oct + arr[rem]\n        } else {\n            oct = oct + arr[rem] + \"0\"\n        }\n    }\n    return oct\n}\n", "\n  var octalnum = decinum.toString(8);\n  return octalnum\n}\n", "\n  let num = decinum;\n  return num.toString(8)\n}\n", "\n  // Write your code here\n  let octalnum = decinum.toString(8)\n  return octalnum\n}\n"]}
{"task_id": "MBJSP/468", "prompt": "function maximumSegments(n, a, b, c) {\n/**\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n */\n  // O(n)\n  if (!n || !a || !b || !c) return null;\n\n  let dp = [];\n  dp[0] = 0;\n\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(\n      ...[\n        // if current segment can be formed with a, b and c,\n        dp[i - a] + 1,\n        dp[i - b] + 1,\n        dp[i - c] + 1,\n      ].filter((e) => e > 0)\n    );\n  }\n\n  return dp[n];\n}\nfunction longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction maxSumIncreasingSubsequence(arr, n) {\n/**\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n */\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = arr[i];\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] + arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\nfunction maxProduct(arr, n) {\n/**\n * * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n */", "entry_point": "maxProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 100, 4, 5, 150, 6];\nvar arg01 = 6;\nvar x0 = maxProduct(arg00, arg01);\nvar v0 = 45000;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 42, 55, 68, 80];\nvar arg11 = 5;\nvar x1 = maxProduct(arg10, arg11);\nvar v1 = 50265600;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 22, 9, 33, 21, 50, 41, 60];\nvar arg21 = 8;\nvar x2 = maxProduct(arg20, arg21);\nvar v2 = 21780000;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = 1;\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] * arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\n", "\n  let dp = new Array(n).fill(0);\n  let max = 0;\n\n  for (let i = 0; i < n; i++) {\n    dp[i] = 1;\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] * arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\n", "\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(n).fill(0);\n  let max = 1;\n\n  for (let i = 0; i < n; i++) {\n    dp[i] = 1;\n    for (let j = i - 1; j >= 0; j--) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] * arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\n", "\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(n).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] * arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\n", "\n  // O(n)\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(n).fill(0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    dp[i] = 1;\n    for (let j = 0; j < i; j++) {\n      if (arr[j] < arr[i]) {\n        dp[i] = Math.max(dp[i], dp[j] * arr[i]);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/469", "prompt": "function maxOfTwo(x, y) {\n/**\n * * Write a function to find maximum of two numbers.\n */\n  return x > y ? x : y;\n}\nfunction maxOfThree(num1, num2, num3) {\n/**\n * * Write a function to find maximum of three numbers.\n */\n  return Math.max(num1, num2, num3);\n}\nfunction maxOfNth(testlist, n) {\n/**\n * * Write a function to find the maximum of nth column from the given tuple list.\n */\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    max = Math.max(max, testList[i][n]);\n  }\n  return max;\n}\nfunction maxProfit(price, k) {\n/**\n * * Write a function to find the maximum profit earned from a maximum of k stock transactions\n */", "entry_point": "maxProfit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 2, 3, 7, 6, 4, 5];\nvar arg01 = 3;\nvar x0 = maxProfit(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 7, 5, 4, 3, 5];\nvar arg11 = 2;\nvar x1 = maxProfit(arg10, arg11);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 6, 8, 4, 2];\nvar arg21 = 2;\nvar x2 = maxProfit(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Initialize the profit as the maximum of all profits\n  let profit = price[k] - price[0];\n\n  // Loop from k+1 to the end of the array\n  for (let i = k + 1; i < price.length; i++) {\n    // Calculate the profit by comparing the current price with the rest of the prices\n    let currProfit = price[i] - price[i - 1];\n\n    // If the profit is less than the current profit, update the profit\n    if (currProfit > profit) {\n      profit = currProfit;\n    }\n  }\n\n  // Return the profit\n  return profit;\n}\n", "\n  const arr = price.slice(k, -1);\n  let min = arr[0];\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    min = Math.min(min, arr[i]);\n    max = Math.max(max, arr[i]);\n  }\n  let profit = max - min;\n  return profit;\n}\n", "\n  let buy = 0;\n  let profit = 0;\n  while (k--) {\n    buy = -1;\n    let max = 0;\n    for (let i = 1; i < price.length; i++) {\n      if (price[i] < price[buy]) {\n        buy = i;\n      }\n      let temp = price[i] - price[buy];\n      if (temp > max) {\n        max = temp;\n      }\n    }\n    profit = Math.max(profit, max);\n  }\n  return profit;\n}\n", "\n  let profit = 0;\n  let buy = 0;\n  let sell = 1;\n  while (sell < k) {\n    while (sell < k && price[sell] > price[buy]) {\n      profit += price[sell] - price[buy];\n      buy++;\n    }\n    sell++;\n    while (sell < k && price[sell] < price[buy]) {\n      profit += price[sell] - price[buy];\n      sell++;\n    }\n    buy++;\n  }\n  return profit;\n}\n", "\n  let profit = 0;\n  let myList = [];\n  let count = 0;\n  while (count < k) {\n    for (let i = 0; i < price.length; i++) {\n      profit += price[i];\n      myList.push(price[i]);\n    }\n    count++;\n  }\n  return profit;\n}\n"]}
{"task_id": "MBJSP/470", "prompt": "function findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction substractElements(testtup1, testtup2) {\n/**\n * * Write a function to substract the elements of the given nested tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const sub = [];\n    for (let j = 0; j < testTup1[i].length; j++) {\n      sub.push(testTup1[i][j] - testTup2[i][j]);\n    }\n    result.push(sub);\n  }\n  return result;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction addPairwise(testtup) {\n/**\n * * Write a function to find the pairwise addition of the elements of the given tuples.\n */", "entry_point": "addPairwise", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, 8, 10];\nvar x0 = addPairwise(arg00);\nvar v0 = [6, 12, 15, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 6, 8, 9, 11];\nvar x1 = addPairwise(arg10);\nvar v1 = [8, 14, 17, 20];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 7, 9, 10, 12];\nvar x2 = addPairwise(arg20);\nvar v2 = [10, 16, 19, 22];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    for (let j = i + 1; j < testTup[i].length; j++) {\n      result.push(testTup[i][j]);\n    }\n  }\n  return result;\n}\n", "\n  const sum = [];\n  for (let i = 0; i < testtup.length; i++) {\n    for (let j = 0; j < testtup[i].length; j++) {\n      sum.push(testtup[i][j] + testtup[j][i]);\n    }\n  }\n  return sum;\n}\n", "\n  const pairwise = [];\n  for (let i = 0; i < testTup.length; i++) {\n    for (let j = 0; j < testTup[i].length; j++) {\n      pairwise.push(testTup[i][j] + testTup[i][j]);\n    }\n  }\n  return pairwise;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    for (let j = i + 1; j < testTup.length; j++) {\n      result.push(testTup[i] + testTup[j]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup.length; i++) {\n    const current = [];\n    for (let j = 0; j < testtup[i].length; j++) {\n      current.push(testtup[i][j] + testtup[(i + 1) % testtup.length][j]);\n    }\n    result.push(current);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/471", "prompt": "function heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction totalHammingDistance(n) {\n/**\n * * Write a JavaScript function to find the sum of hamming distances of all consecutive numbers from o to n.\n */\n    let res = 0;\n    for (let i = 1; i <= n; i++) {\n        res += (i ^ (i - 1)).toString(2).split('1').length - 1;\n    }\n    return res;\n}\nfunction sumOfPrimes(n) {\n/**\n * * Write a JavaScript function to find sum of prime numbers between 1 to n.\n */\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      sum += i;\n    }\n  }\n  return sum;\n}\nfunction findRemainder(arr, lens, n) {\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */", "entry_point": "findRemainder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [100, 10, 5, 25, 35, 14];\nvar arg01 = 6;\nvar arg02 = 11;\nvar x0 = findRemainder(arg00, arg01, arg02);\nvar v0 = 9;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 1];\nvar arg11 = 3;\nvar arg12 = 1;\nvar x1 = findRemainder(arg10, arg11, arg12);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar arg21 = 3;\nvar arg22 = 2;\nvar x2 = findRemainder(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let res = 0;\n    for (let i = 0; i < lens; i++) {\n      res = res + (arr[i] * Math.pow(n, lens - i - 1)) % n;\n    }\n    return res % n;\n}\n", "\n    let res = 0;\n    for (let i = 0; i < lens; i++) {\n        res += arr[i] * Math.pow(n, lens - 1 - i);\n    }\n    return res % n;\n}\n", "\n  for (let i = 0; i < lens; i++) {\n    arr[i] %= n;\n  }\n  return arr;\n}\n", "\n    let i = 0;\n    while (i < lens) {\n        let product = arr[i] * Math.floor(n / arr[i]);\n        let remainder = n % product;\n        if (remainder === 0) {\n            return i;\n        }\n        i++;\n    }\n}\n", "\n  let res = 0;\n  for (let i = 0; i < lens; i++) {\n    res += arr[i] * Math.pow(n, lens - 1 - i);\n  }\n  return res;\n}\n"]}
{"task_id": "MBJSP/472", "prompt": "function checkMonthnumb(monthname2) {\n/**\n * * Write a function to check whether the given month name contains 31 days or not.\n */\n    if (monthname2 === \"January\" || monthname2 === \"March\" || monthname2 === \"May\" || monthname2 === \"July\" || monthname2 === \"August\" || monthname2 === \"October\" || monthname2 === \"December\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction checkMonthnumNumber(monthnum1) {\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\n    return monthnum1 % 2 === 0 ? true : false;\n}\nfunction checkMonthnumberNumber(monthnum3) {\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\n  if (monthnum3 >= 1 && monthnum3 <= 12) {\n    if (monthnum3 === 2) {\n      if (new Date().getMonth() === 2 && new Date().getDate() > 29) {\n        return true;\n      }\n    } else if (monthnum3 === 4 || monthnum3 === 6 || monthnum3 === 9 || monthnum3 === 11) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction checkConsecutive(l) {\n/**\n * * Write a JavaScript function to check whether the given list contains consecutive numbers or not.\n */", "entry_point": "checkConsecutive", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar x0 = checkConsecutive(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 5, 6];\nvar x1 = checkConsecutive(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar x2 = checkConsecutive(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    ", "\n    if (l.length > 1) {\n        var prev = l[0];\n        for (var i = 0; i < l.length; i++) {\n            if (l[i]!== prev + 1) {\n                return false;\n            }\n            prev = l[i];\n        }\n    }\n    else {\n        return false;\n    }\n    return true;\n}\n", "\n  if (l.length > 0) {\n    if (l.length > 1) {\n      for (let i = 1; i < l.length; i++) {\n        if (l[i] - l[i-1]!== 1) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l2.indexOf(l[i]) === -1) {\n      l2.push(l[i]);\n    }\n    else {\n      return false;\n    }\n  }\n  return true;\n}\n\n", "\n  var str = l.join();\n  var numArr = str.split('');\n  var digits = numArr.filter("]}
{"task_id": "MBJSP/473", "prompt": "function tupleModulo(testtup1, testtup2) {\n/**\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n */\n  return testTup1.map((element, index) => element % testTup2[index]);\n}\nfunction maximumValue(testlist) {\n/**\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n */\n  let max = [];\n  for (let i = 0; i < testList.length; i++) {\n    let maxKey = testList[i][0];\n    let maxVal = testList[i][1][0];\n    for (let j = 0; j < testList[i][1].length; j++) {\n      if (testList[i][1][j] > maxVal) {\n        maxVal = testList[i][1][j];\n        maxKey = testList[i][0];\n      }\n    }\n    max.push([maxKey, maxVal]);\n  }\n  return max;\n}\nfunction sumElements(testtup) {\n/**\n * * Write a function to find the summation of tuple elements in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    sum += testTup[i];\n  }\n  return sum;\n}\nfunction tupleIntersection(testlist1, testlist2) {\n/**\n * * Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n */", "entry_point": "tupleIntersection", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4], [5, 6], [9, 10], [4, 5]];\nvar arg01 = [[5, 4], [3, 4], [6, 5], [9, 11]];\nvar x0 = tupleIntersection(arg00, arg01);\nvar v0 = new Set([[4, 5],[5, 6],[3, 4]]);\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 1], [7, 4], [11, 13], [17, 14]];\nvar arg11 = [[1, 4], [7, 4], [16, 12], [10, 13]];\nvar x1 = tupleIntersection(arg10, arg11);\nvar v1 = new Set([[4, 7],[1, 4]]);\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 1], [3, 2], [1, 3], [1, 4]];\nvar arg21 = [[11, 2], [2, 3], [6, 2], [1, 3]];\nvar x2 = tupleIntersection(arg20, arg21);\nvar v2 = new Set([[2, 3],[1, 3]]);\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let intersection = [];\n  for (let i = 0; i < testlist1.length; i++) {\n    if (testlist2.indexOf(testlist1[i][0]) >= 0) {\n      intersection.push([testlist1[i][0], testlist1[i][1]]);\n    }\n  }\n  return intersection;\n}\n", "\n  let testlist = [];\n  for (let i = 0; i < testlist1.length; i++) {\n    for (let j = 0; j < testlist2.length; j++) {\n      if (testlist1[i] === testlist2[j]) {\n        testlist.push(testlist1[i]);\n        break;\n      }\n    }\n  }\n  return testlist;\n}\n", "\n  let res = [];\n  for (let i = 0; i < testlist1.length; i++) {\n    for (let j = 0; j < testlist2.length; j++) {\n      if (testlist1[i] == testlist2[j]) {\n        res.push(testlist1[i]);\n      }\n    }\n  }\n  return res;\n}\n", "\n  let intersect = [];\n  for (let i = 0; i < testlist1.length; i++) {\n    for (let j = 0; j < testlist2.length; j++) {\n      if (testlist1[i] == testlist2[j]) {\n        intersect.push(testlist1[i]);\n        break;\n      }\n    }\n  }\n  return intersect;\n}\n", "\n  let intersection = testlist1;\n  for (let i = 0; i < testlist2.length; i++) {\n    if (testlist2[i] in intersection) {\n      intersection.splice(i, 1);\n    } else {\n      intersection.push(testlist2[i]);\n    }\n  }\n  return intersection;\n}\n"]}
{"task_id": "MBJSP/474", "prompt": "function countVowels(teststr) {\n/**\n * * Write a function to count those characters which have vowels as their neighbors in the given string.\n */\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let count = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (vowels.includes(testStr[i])) {\n      if (i === 0 || vowels.includes(testStr[i - 1])) {\n        count++;\n      }\n      if (i === testStr.length - 1 || vowels.includes(testStr[i + 1])) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction maxRunUppercase(teststr) {\n/**\n * * Write a function to find maximum run of uppercase characters in the given string.\n */\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i] === testStr[i].toUpperCase()) {\n      current++;\n    } else {\n      current = 0;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\nfunction toggleString(string) {\n/**\n * * Write a function to toggle characters case in a string.\n */\n  return string.split(\"\").map(char => {\n    return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n  }).join(\"\");\n}\nfunction replaceChar(str1, ch, newch) {\n/**\n * * Write a function to replace characters in a string.\n */", "entry_point": "replaceChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"polygon\";\nvar arg01 = \"y\";\nvar arg02 = \"l\";\nvar x0 = replaceChar(arg00, arg01, arg02);\nvar v0 = \"pollgon\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"character\";\nvar arg11 = \"c\";\nvar arg12 = \"a\";\nvar x1 = replaceChar(arg10, arg11, arg12);\nvar v1 = \"aharaater\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar arg21 = \"l\";\nvar arg22 = \"a\";\nvar x2 = replaceChar(arg20, arg21, arg22);\nvar v2 = \"python\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str1.split(\"\").map(char => {\n    if (char === ch) {\n      return newch;\n    } else {\n      return char;\n    }\n  }).join(\"\");\n}\n", "\n  return str1.split(ch).map(char => {\n    return char === char.toUpperCase()? newch.toLowerCase() : newch.toUpperCase();\n  }).join(ch);\n}\n", "\n  let newstr = str1.split(ch);\n  for (let i = 0; i < newstr.length; i++) {\n    if (newstr[i] === str1) {\n      newstr[i] = newch;\n    }\n  }\n  return newstr.join(ch);\n}\n", "\n  let newString = \"\";\n  let charArr = str1.split('');\n  for (let i = 0; i < charArr.length; i++) {\n    if (charArr[i] === ch) {\n      charArr[i] = newch;\n    }\n    newString += charArr[i];\n  }\n  return newString;\n}\n", "\n  return str1.split(ch).join(newch);\n}\n"]}
{"task_id": "MBJSP/475", "prompt": "function sortTuple(tup) {\n/**\n * * Write a function to sort the tuples alphabetically by the first item of each tuple.\n */\n  return tup.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n}\nfunction heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction sortSublists(list1) {\n/**\n * * Write a function to sort a list of lists by length and value.\n */\n  const result = []\n  list1.sort((a, b) => {\n    if (a.length === b.length) {\n      return a[0] > b[0] ? 1 : -1\n    } else {\n      return a.length > b.length ? 1 : -1\n    }\n  })\n  for (let sub = 0; sub < list1.length; sub++) {\n    for (let item = 0; item < list1[sub].length; item++) {\n      if (!result[sub]) result[sub] = []\n      result[sub].push(list1[sub][item])\n    }\n  }\n  return result\n}\nfunction sortCounter(dict1) {\n/**\n * * Write a function to sort counter by value.\n */", "entry_point": "sortCounter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Math\"':81,'\"Physics\"':83,'\"Chemistry\"':87};\nvar x0 = sortCounter(arg00);\nvar v0 = [[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Math\"':400,'\"Physics\"':300,'\"Chemistry\"':250};\nvar x1 = sortCounter(arg10);\nvar v1 = [[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Math\"':900,'\"Physics\"':1000,'\"Chemistry\"':1250};\nvar x2 = sortCounter(arg20);\nvar v2 = [[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return dict1.sort((a, b) => b.values.reduce((value, key) => value + key, 0) - a.values.reduce((value, key) => value + key, 0))\n}\n", "\n  return Object.keys(dict1).sort((a, b) => dict1[b] - dict1[a])\n}\n", "\n  const result = []\n  for (let val in dict1) {\n    result.push({\n      value: val,\n      count: dict1[val]\n    })\n  }\n  result.sort((a, b) => a.count - b.count)\n  return result\n}\n", "\n  const result = []\n  dict1.sort((a, b) => {\n    if (a.count === b.count) {\n      return a.value > b.value? 1 : -1\n    } else {\n      return a.count > b.count? 1 : -1\n    }\n  })\n  for (let item = 0; item < dict1.length; item++) {\n    result.push(dict1[item])\n  }\n  return result\n}\n", "\n  let result = []\n  let sortedDict = dict1.sort((a, b) => a[1] > b[1]? 1 : -1)\n  for (let k in sortedDict) {\n    result.push(sortedDict[k])\n  }\n  return result\n}\n"]}
{"task_id": "MBJSP/476", "prompt": "function findFirstMissing(array, start, end) {\n/**\n * * Write a JavaScript function to find the smallest missing number from the given array.\n */\n  let result = end + 1;\n\n  for (let i = start; i <= end; i++) {\n    if (array.includes(i) === false) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find the largest sum of contiguous subarray in the given array.\n */\n  if (size === 0) return 0;\n  if (size === 1) return a[0];\n  let maxSum = a[0];\n  let tempSum = a[0];\n  for (let i = 1; i < size; i++) {\n    tempSum = Math.max(a[i], tempSum + a[i]);\n    maxSum = Math.max(maxSum, tempSum);\n  }\n  return maxSum;\n}\nfunction bigDiff(nums) {\n/**\n * * Write a JavaScript function to find the difference between largest and smallest value in a given array.\n */\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return max - min;\n}\nfunction bigSum(nums) {\n/**\n * * Write a JavaScript function to find the sum of the largest and smallest value in a given array.\n */", "entry_point": "bigSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = bigSum(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 2, 3, 4];\nvar x1 = bigSum(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 6];\nvar x2 = bigSum(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return (max + min) / 2;\n}\n", "\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return max + min;\n}\n", "\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return max + min;\n}\n", "\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return max + min;\n}\n", "\n  let max = Math.max(...nums);\n  let min = Math.min(...nums);\n  return max + min;\n}\n"]}
{"task_id": "MBJSP/477", "prompt": "function convert(string) {\n/**\n * * Write a JavaScript function to convert a string to a list.\n */\n    return string.split(\" \");\n}\nfunction stringListToTuple(str1) {\n/**\n * * Write a JavaScript function to convert a given string list to a tuple.\n */\n    // TODO\n    let str = [...str1];\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === \" \") {\n            result.push(str[i + 1]);\n            i++;\n        } else {\n            result.push(str[i]);\n        }\n    }\n    return result;\n}\nfunction isUpper(string) {\n/**\n * * Write a JavaScript function to convert the given string to upper case.\n */\n    return string.toUpperCase();\n}\nfunction isLower(string) {\n/**\n * * Write a JavaScript function to convert the given string to lower case.\n */", "entry_point": "isLower", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"InValid\";\nvar x0 = isLower(arg00);\nvar v0 = \"invalid\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"TruE\";\nvar x1 = isLower(arg10);\nvar v1 = \"true\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"SenTenCE\";\nvar x2 = isLower(arg20);\nvar v2 = \"sentence\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return string.toLowerCase();\n}\n", "\n    return string.toLowerCase();\n}\n", "\n    return string.toLowerCase();\n}\n", "\n    return string.toLowerCase();\n}\n", "\n    return string.toLowerCase();\n}\n"]}
{"task_id": "MBJSP/478", "prompt": "function occuranceSubstring(text, pattern) {\n/**\n * * Write a function to find the occurrence and position of the substrings within a string.\n */\n  const first = text.indexOf(pattern);\n  const last = first + pattern.length;\n  return [pattern, first, last];\n}\nfunction removeAllSpaces(text) {\n/**\n * * Write a function to remove all whitespaces from a string.\n */\n  return text.replace(/\\s/g, '');\n}\nfunction removeSpaces(str1) {\n/**\n * * Write a JavaScript function to remove spaces from a given string.\n */\n  return str1.replace(/\\s/g, '');\n}\nfunction removeLowercase(str1) {\n/**\n * * Write a function to remove lowercase substrings from a given string.\n */", "entry_point": "removeLowercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"PYTHon\";\nvar x0 = removeLowercase(arg00);\nvar v0 = \"PYTH\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"FInD\";\nvar x1 = removeLowercase(arg10);\nvar v1 = \"FID\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"STRinG\";\nvar x2 = removeLowercase(arg20);\nvar v2 = \"STRG\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str1.replace(/[a-z]+/g, '');\n}\n", "\n  return str1.replace(/([a-z])/g, '$1');\n}\n", "\n  return removeSpaces(str1.toLowerCase());\n}\n", "\n  const str2 = str1.toLowerCase();\n  return str2.replace(/[a-z]/g, '');\n}\n", "\n  return str1.replace(/^[a-z]+/i, '');\n}\n"]}
{"task_id": "MBJSP/479", "prompt": "function toggleFAndLBits(n) {\n/**\n * * Write a JavaScript function to toggle only first and last bits of a given number.\n */\n    return (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1;\n}\nfunction lastDigitFactorial(n) {\n/**\n * * Write a JavaScript function to find the last digit in factorial of a given number.\n */\n    return n < 10 ? n : lastDigitFactorial(n / 10 >> 0) * 10 % 10;\n}\nfunction firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit in factorial of a given number.\n */\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    let firstDigit = factorial.toString().split('').map(Number)[0];\n    return firstDigit;\n}\nfunction firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit of a given number.\n */", "entry_point": "firstDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 123;\nvar x0 = firstDigit(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 456;\nvar x1 = firstDigit(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar x2 = firstDigit(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let num = n;\n    let digit = 0;\n    while (num > 0) {\n        digit += num % 10;\n        num /= 10;\n    }\n    return digit;\n}\n", "\n    let num = n;\n    let firstDigit = num % 10;\n    return firstDigit;\n}\n", "\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    let firstDigit = factorial.toString().split('').map(Number)[0];\n    return firstDigit;\n}\n", "\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    let firstDigit = factorial.toString().split('').map(Number)[0];\n    return firstDigit;\n}\n", "\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    return factorial % 10;\n}\n"]}
{"task_id": "MBJSP/480", "prompt": "function maxRunUppercase(teststr) {\n/**\n * * Write a function to find maximum run of uppercase characters in the given string.\n */\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i] === testStr[i].toUpperCase()) {\n      current++;\n    } else {\n      current = 0;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\nfunction firstRepeatedChar(str1) {\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\n  let charMap = {};\n  for (let i = 0; i < str1.length; i++) {\n    if (charMap[str1[i]]) {\n      return str1[i];\n    } else {\n      charMap[str1[i]] = true;\n    }\n  }\n  return \"None\";\n}\nfunction firstRepeatedChar(str) {\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\n  let charMap = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charMap[str[i]]) {\n      return str[i];\n    } else {\n      charMap[str[i]] = 1;\n    }\n  }\n  return \"\\x00\";\n}\nfunction getMaxOccuringChar(str1) {\n/**\n * * Write a JavaScript function to find the maximum occurring character in a given string.\n */", "entry_point": "getMaxOccuringChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"data\";\nvar x0 = getMaxOccuringChar(arg00);\nvar v0 = \"a\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"create\";\nvar x1 = getMaxOccuringChar(arg10);\nvar v1 = \"e\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"brilliant girl\";\nvar x2 = getMaxOccuringChar(arg20);\nvar v2 = \"i\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (current < str1[i]) {\n      current = str1[i];\n    }\n  }\n  return current;\n}\n", "\n  let max = 0;\n  let current = 0;\n  let charMap = {};\n  for (let i = 0; i < str1.length; i++) {\n    if (charMap[str1[i]]) {\n      current++;\n    } else {\n      current = 0;\n    }\n    if (current > max) {\n      max = current;\n    }\n    charMap[str1[i]] = true;\n  }\n  return max;\n}\n", "\n  let charMap = {};\n  for (let i = 0; i < str1.length; i++) {\n    if (charMap[str1[i]] === undefined) {\n      charMap[str1[i]] = 1;\n    } else {\n      charMap[str1[i]]++;\n    }\n  }\n  let maxValue = 0;\n  let maxChar = \"None\";\n  for (let i = 0; i < str1.length; i++) {\n    if (charMap[str1[i]] > maxValue) {\n      maxValue = charMap[str1[i]];\n      maxChar = str1[i];\n    }\n  }\n  return maxChar;\n}\n", "\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.charAt(i) === str1.charAt(i).toUpperCase()) {\n      current++;\n    }\n    if (current > max) {\n      max = current;\n    }\n  }\n  return max;\n}\n", "\n  let charMap = {};\n  let max = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (charMap[str1[i]]) {\n      charMap[str1[i]]++;\n    } else {\n      charMap[str1[i]] = 1;\n    }\n    if (charMap[str1[i]] > max) {\n      max = charMap[str1[i]];\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/481", "prompt": "function checkSubset(testtup1, testtup2) {\n/**\n * * Write a function to check if one tuple is a subset of another tuple.\n */\n  return testTup2.every((value) => testTup1.includes(value));\n}\nfunction findTripletArray(a, arrsize, sum) {\n/**\n * * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n */\n  let aArray = [];\n  let triplet = [];\n  for (let i = 0; i < arrSize; i++) {\n    aArray.push(a[i]);\n  }\n  for (let i = 0; i < arrSize - 2; i++) {\n    for (let j = i + 1; j < arrSize - 1; j++) {\n      for (let k = j + 1; k < arrSize; k++) {\n        let sumTemp = aArray[i] + aArray[j] + aArray[k];\n        if (sumTemp === sum) {\n          triplet = [aArray[i], aArray[j], aArray[k]];\n          return triplet;\n        }\n      }\n    }\n  }\n  return triplet;\n}\nfunction modularSum(arr, n, m) {\n/**\n * * Write a function to check if there is a subset with sum divisible by m.\n */\n    let subSet = {};\n    let mod = n % m;\n    for (let i = 0; i < arr.length; i++) {\n        subSet[arr[i] + (mod || 0)] = true;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (subSet[arr[i] + m] === true) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isSubsetSum(set, n, sum) {\n/**\n * * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n */", "entry_point": "isSubsetSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 34, 4, 12, 5, 2];\nvar arg01 = 6;\nvar arg02 = 9;\nvar x0 = isSubsetSum(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 34, 4, 12, 5, 2];\nvar arg11 = 6;\nvar arg12 = 30;\nvar x1 = isSubsetSum(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 34, 4, 12, 5, 2];\nvar arg21 = 6;\nvar arg22 = 15;\nvar x2 = isSubsetSum(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let subsets = Array(n).fill(null);\n    for (let i = 0; i < set.length; i++) {\n        for (let j = 0; j < subsets.length; j++) {\n            let sumTemp = set[i] + subsets[j];\n            subsets[j] = sumTemp;\n            if (sumTemp == sum) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "\n  if (sum === 0) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (set[n - 1] > sum) {\n    return isSubsetSum(set, n - 1, sum);\n  } else {\n    return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);\n  }\n}\n", "\n    let set = set;\n    let sum = sum;\n    let subset = {};\n    for (let i = 0; i < n; i++) {\n        subset[set[i]] = true;\n    }\n    for (let i = 0; i < n; i++) {\n        if (subset[sum - set[i]] === true) {\n            return true;\n        }\n    }\n    return false;\n}\n", "\n  let setArray = [];\n  let subset = {};\n  for (let i = 0; i < set.length; i++) {\n    setArray.push(set[i]);\n  }\n  for (let i = 0; i < set.length; i++) {\n    subset[setArray[i]] = true;\n  }\n  for (let i = 0; i < set.length; i++) {\n    if (subset[sum - setArray[i]] === true) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  let subset = {};\n  for (let i = 0; i < n; i++) {\n    subset[set[i]] = true;\n  }\n  for (let i = 0; i < sum; i++) {\n    if (subset[sum - i] === true) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}
{"task_id": "MBJSP/482", "prompt": "function lowerCtr(str) {\n/**\n * * Write a JavaScript function to count lower case letters in a given string.\n */\n    return str.split('').filter(x => x.toLowerCase() === x).length;\n}\nfunction camelToSnake(text) {\n/**\n * * Write a function to convert camel case string to snake case string by using regex.\n */\n  return text.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n}\nfunction textUppercaseLowercase(text) {\n/**\n * * Write a function to find the sequences of one upper case letter followed by lower case letters.\n */\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\nfunction match(text) {\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */", "entry_point": "match", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Geeks\";\nvar x0 = match(arg00);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"geeksforGeeks\";\nvar x1 = match(arg10);\nvar v1 = \"Yes\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"geeks\";\nvar x2 = match(arg20);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\n", "\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\n", "\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  return result;\n}\n", "\n  const regex = /[a-z]{1,10}/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\n", "\n  const regex = /[A-Z][a-z]/g;\n  const result = text.match(regex);\n  if (result) {\n    return `Found a match!`;\n  }\n  return `Not matched!`;\n}\n"]}
{"task_id": "MBJSP/483", "prompt": "function firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit in factorial of a given number.\n */\n    let num = n;\n    let factorial = 1;\n    while (num > 0) {\n        factorial *= num;\n        num--;\n    }\n    let firstDigit = factorial.toString().split('').map(Number)[0];\n    return firstDigit;\n}\nfunction getPairsCount(arr, n, sum) {\n/**\n * * Write a JavaScript function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n */\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] + arr[j] === sum) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\nfunction divisibleByDigits(startnum, endnum) {\n/**\n * * Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n */\n  let result = [];\n  for (let i = startnum; i <= endnum; i++) {\n    let num = i;\n    let digits = [];\n    while (num > 0) {\n      digits.push(num % 10);\n      num = Math.floor(num / 10);\n    }\n    let isDivisible = true;\n    for (let j = 0; j < digits.length; j++) {\n      if (i % digits[j] !== 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    if (isDivisible) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction firstFactorialDivisibleNumber(x) {\n/**\n * * Write a JavaScript function to find the first natural number whose factorial is divisible by x.\n */", "entry_point": "firstFactorialDivisibleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = firstFactorialDivisibleNumber(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = firstFactorialDivisibleNumber(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = firstFactorialDivisibleNumber(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let xFactorial = x;\n  let result = 0;\n  while (xFactorial > 0) {\n    xFactorial--;\n    if (xFactorial % x === 0) {\n      result = xFactorial;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  let result = 0;\n  let n = x;\n  let factorial = 1;\n  while (n > 0) {\n    factorial *= n;\n    n--;\n  }\n  let firstDigit = factorial.toString().split('').map(Number)[0];\n  result = firstDigit;\n  return result;\n}\n", "\n  let num = x;\n  let firstNum = 1;\n  let factorial = 1;\n  while (firstNum <= num) {\n    factorial = 1;\n    while (firstNum <= num) {\n      factorial *= firstNum;\n      firstNum++;\n    }\n    if (factorial % num === 0) {\n      break;\n    }\n    firstNum++;\n  }\n  return firstNum;\n}\n", "\n  let fact = 1;\n  let result = 0;\n  while (fact <= x) {\n    let tempFact = 1;\n    let i = fact;\n    while (i > 0) {\n      tempFact *= i;\n      i--;\n    }\n    if (tempFact % x === 0) {\n      result = fact;\n      break;\n    }\n    fact++;\n  }\n  return result;\n}\n", "\n  let result = 1;\n  for (let i = 2; i <= x; i++) {\n    let factorial = 1;\n    while (i > 0) {\n      factorial *= i;\n      i--;\n    }\n    if (factorial % x === 0) {\n      result = factorial;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/484", "prompt": "function concatenateNested(testtup1, testtup2) {\n/**\n * * Write a function to concatenate the given two tuples to a nested tuple.\n */\n  if (!Array.isArray(testTup1)) {\n    throw Error('The first argument must be an array')\n  }\n\n  if (!Array.isArray(testTup2)) {\n    throw Error('The second argument must be an array')\n  }\n\n  const resultTup = testTup1.concat(testTup2)\n  return resultTup\n}\nfunction findDissimilar(testtup1, testtup2) {\n/**\n * * Write a function to find the dissimilar elements in the given two tuples.\n */\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup1[i] !== testTup2[i]) {\n      result.push(testTup1[i]);\n    }\n  }\n  return result;\n}\nfunction removeEmpty(tuple1) {\n/**\n * * Write a function to remove an empty tuple from a list of tuples.\n */\n  return tuple1.filter(function (tuple) {\n    return tuple.length > 0;\n  });\n}\nfunction removeMatchingTuple(testlist1, testlist2) {\n/**\n * * Write a function to remove the matching tuples from the given two tuples.\n */", "entry_point": "removeMatchingTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]];\nvar arg01 = [[\"Hello\", \"dude\"], [\"How\", \"are\"]];\nvar x0 = removeMatchingTuple(arg00, arg01);\nvar v0 = [[\"you\", \"?\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]];\nvar arg11 = [[\"Journey\", \"the\"], [\"is\", \"end\"]];\nvar x1 = removeMatchingTuple(arg10, arg11);\nvar v1 = [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Its\", \"been\"], [\"a\", \"long\"], [\"day\", \"without\"]];\nvar arg21 = [[\"a\", \"long\"], [\"my\", \"friend\"]];\nvar x2 = removeMatchingTuple(arg20, arg21);\nvar v2 = [[\"Its\", \"been\"], [\"day\", \"without\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const dissimilarTuples = findDissimilar(testlist1, testlist2)\n  return testlist1.filter(", "\n  const result = [];\n  for (let i = 0; i < testlist1.length; i++) {\n    if (!findDissimilar(testlist1[i], testlist2)) {\n      result.push(testlist1[i]);\n    }\n  }\n  return removeEmpty(result);\n}\n\n/**\n * * Write a ", "\n  return testlist1.filter(", "\n  return testlist1.filter(", "\n  return testlist1.filter("]}
{"task_id": "MBJSP/485", "prompt": "function getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction bigDiff(nums) {\n/**\n * * Write a JavaScript function to find the difference between largest and smallest value in a given array.\n */\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return max - min;\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find the largest sum of contiguous subarray in the given array.\n */\n  if (size === 0) return 0;\n  if (size === 1) return a[0];\n  let maxSum = a[0];\n  let tempSum = a[0];\n  for (let i = 1; i < size; i++) {\n    tempSum = Math.max(a[i], tempSum + a[i]);\n    maxSum = Math.max(maxSum, tempSum);\n  }\n  return maxSum;\n}\nfunction largestPalindrome(a, n) {\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */", "entry_point": "largestPalindrome", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 232, 54545, 999991];\nvar arg01 = 4;\nvar x0 = largestPalindrome(arg00, arg01);\nvar v0 = 54545;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 50];\nvar arg11 = 6;\nvar x1 = largestPalindrome(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let r = 0;\n  for (let i = 0; i < n; i++) {\n    let digit = a[i] - '0';\n    r = Math.max(r, digit * (n - i));\n  }\n  let result = Math.pow(10, n) + r;\n  return result;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    let maxPalindrome = (a[i] * (n - i - 1)) % 10;\n    if (max > maxPalindrome) {\n      max = maxPalindrome;\n    }\n  }\n  return max;\n}\n", "\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (a[i] === a[j]) {\n        if (i + j > max) {\n          max = i + j;\n        }\n      }\n    }\n  }\n  return max;\n}\n", "\n  let bigNum = 0;\n  for (let i = 0; i < n; i++) {\n    let oddLen = n - i - 1;\n    if (oddLen % 2 === 0) {\n      oddLen = oddLen / 2;\n    }\n    else {\n      oddLen = oddLen / 2 + 1;\n    }\n    let evenLen = (n - i) / 2;\n    let evenLenTemp = n - i - evenLen / 2;\n    let evenNum = 0;\n    if (evenLenTemp % 2 === 0) {\n      evenLenTemp = evenLenTemp / 2;\n    }\n    else {\n      evenLenTemp = evenLenTemp / 2 + 1;\n    }\n    for (let j = 0; j <= evenLenTemp; j++) {\n      evenNum = evenNum * 10 + a[j + i];\n    }\n    for (let k = 0; k <= oddLen; k++) {\n      let oddNum = oddLen * 100 + a[evenLenTemp + k + i];\n      bigNum = Math.max(bigNum, oddNum + evenNum);\n    }\n  }\n  return bigNum;\n}\n", "\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        if (a[i]!== a[n - 1 - i]) {\n            result = Math.max(result, a[i] + a[n - 1 - i]);\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/486", "prompt": "function checkEvenParity(x) {\n/**\n * * Write a JavaScript function to check for even parity of a given number.\n */\n    return (x % 2 === 0) ? true : false;\n}\nfunction checkOddParity(x) {\n/**\n * * Write a JavaScript function to check for odd parity of a given number.\n */\n    return (x % 2 !== 0) ? true : false;\n}\nfunction catalanNumber(num) {\n/**\n * * Write a function for nth catalan number.\n */\n  let arr = new Array(num + 1).fill(0);\n  arr[0] = 1;\n  arr[1] = 1;\n  for (let i = 2; i <= num; i++) {\n    for (let j = 0; j < i; j++) {\n      arr[i] += arr[j] * arr[i - j - 1];\n    }\n  }\n  return arr[num];\n}\nfunction binomialProbability(n, k, p) {\n/**\n * * Write a function to compute binomial probability for the given number.\n */", "entry_point": "binomialProbability", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar arg02 = 0.3333333333333333;\nvar x0 = binomialProbability(arg00, arg01, arg02);\nvar v0 = 0.13656454808718185;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 11;\nvar arg11 = 6;\nvar arg12 = 0.5;\nvar x1 = binomialProbability(arg10, arg11, arg12);\nvar v1 = 0.2255859375;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar arg21 = 7;\nvar arg22 = 0.6;\nvar x2 = binomialProbability(arg20, arg21, arg22);\nvar v2 = 0.227030335488;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let arr = new Array(n + 1).fill(0);\n  arr[0] = 1;\n  for (let i = 1; i <= k; i++) {\n    arr[i] = p;\n    for (let j = 1; j < i; j++) {\n      arr[i] += arr[j] * arr[i - j - 1];\n    }\n  }\n  return arr[n];\n}\n", "\n  let arr = new Array(k + 1).fill(0);\n  for (let i = 0; i <= n; i++) {\n    for (let j = 0; j <= i; j++) {\n      arr[j] += (i === j)? 1 : p;\n    }\n  }\n  return arr[k];\n}\n", "\n  let res = Math.pow(p, n) * Math.pow(1 - p, k) * Math.pow(p, k);\n  return res;\n}\n", "\n  let nChoosek = factorial(n);\n  let kChoosei = factorial(k);\n  let iChoosek = factorial(n - k);\n  return nChoosek / (kChoosei * iChoosek) * pow(p, n - k);\n}\n", "\n  let arr = new Array(n + 1).fill(0);\n  arr[0] = 1;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 0; j < i; j++) {\n      arr[i] += (arr[j] * arr[i - j - 1]) * p;\n    }\n  }\n  return arr[k];\n}\n"]}
{"task_id": "MBJSP/487", "prompt": "function sortSublists(list1) {\n/**\n * * Write a function to sort each sublist of strings in a given list of lists.\n */\n  return list1.map(sublist => sublist.sort());\n}\nfunction sortTuple(tup) {\n/**\n * * Write a function to sort the tuples alphabetically by the first item of each tuple.\n */\n  return tup.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    return 0;\n  });\n}\nfunction sortListLast(tuples) {\n/**\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n */\n  return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\nfunction sortTuple(tup) {\n/**\n * * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n */", "entry_point": "sortTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [3, 2], [2, 1]];\nvar x0 = sortTuple(arg00);\nvar v0 = [[2, 1], [3, 2], [1, 3]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [3, 3], [1, 1]];\nvar x1 = sortTuple(arg10);\nvar v1 = [[1, 1], [3, 3], [2, 4]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 9], [6, 7], [4, 3]];\nvar x2 = sortTuple(arg20);\nvar v2 = [[4, 3], [6, 7], [3, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return tup.sort((a, b) => a[b.length - 1] - b[b.length - 1]);\n}\n", "\n  return tup.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\n", "\n  return tup.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\n", "\n  return tup.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\n", "\n  return tup.sort((a, b) => a[a.length - 1] - b[b.length - 1]);\n}\n"]}
{"task_id": "MBJSP/488", "prompt": "function surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction areaTrapezium(base1, base2, height) {\n/**\n * * Write a function to find the area of a trapezium.\n */\n  return (base1 + base2) * height / 2;\n}\nfunction rombusArea(p, q) {\n/**\n * * Write a function to find the area of a rombus.\n */\n  if (p === 0 || q === 0) {\n    return 0;\n  } else if (p < q) {\n    return rombusArea(q, p);\n  } else if (p === q) {\n    return p * q;\n  } else if (p > q) {\n    let result = p * q;\n    return result - (rombusArea(p - q, q));\n  }\n}\nfunction areaPentagon(a) {\n/**\n * * Write a function to find the area of a pentagon.\n */", "entry_point": "areaPentagon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = areaPentagon(arg00);\nvar v0 = 43.01193501472417;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = areaPentagon(arg10);\nvar v1 = 172.0477400588967;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = areaPentagon(arg20);\nvar v2 = 387.10741513251753;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (5 * a * a / (4 * 3.1415));\n}\n", "\n  let result = 1;\n  for (let i = 1; i <= 5; i++) {\n    result = result + (a * a) / (2 * i) - (a * a) / (2 * (i + 1));\n  }\n  return result;\n}\n", "\n  return (a * (3 * (sqrt(5) / 2) - 1));\n}\n", "\n  a = a || 1;\n  return (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * a * a / 2);\n}\n", "\n  let side = Math.sqrt((a * a) - (a / 4 * a / 4));\n  return side * side * 5 / 4;\n}\n"]}
{"task_id": "MBJSP/489", "prompt": "function freqElement(testtup) {\n/**\n * * Write a function to find the frequency of each element in the given list.\n */\n  let freq = {};\n  for (let i = 0; i < testTup.length; i++) {\n    if (freq[testTup[i]]) {\n      freq[testTup[i]]++;\n    } else {\n      freq[testTup[i]] = 1;\n    }\n  }\n  return freq;\n}\nfunction maxSubArraySum(a, size) {\n/**\n * * Write a function to find the largest sum of contiguous subarray in the given array.\n */\n  if (size === 0) return 0;\n  if (size === 1) return a[0];\n  let maxSum = a[0];\n  let tempSum = a[0];\n  for (let i = 1; i < size; i++) {\n    tempSum = Math.max(a[i], tempSum + a[i]);\n    maxSum = Math.max(maxSum, tempSum);\n  }\n  return maxSum;\n}\nfunction bigDiff(nums) {\n/**\n * * Write a JavaScript function to find the difference between largest and smallest value in a given array.\n */\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n  return max - min;\n}\nfunction frequencyOfLargest(n, arr) {\n/**\n * * Write a JavaScript function to find the frequency of the largest value in a given array.\n */", "entry_point": "frequencyOfLargest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = [1, 2, 3, 4, 4];\nvar x0 = frequencyOfLargest(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = [5, 6, 5];\nvar x1 = frequencyOfLargest(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = [2, 7, 7, 7];\nvar x2 = frequencyOfLargest(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let freq = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (freq[arr[i]]) {\n      freq[arr[i]]++;\n    } else {\n      freq[arr[i]] = 1;\n    }\n  }\n  let maxFreq = 0;\n  for (let i = 0; i <= n; i++) {\n    if (freq[i]) {\n      maxFreq = Math.max(maxFreq, freq[i]);\n    }\n  }\n  return maxFreq;\n}\n", "\n  let frequency = {};\n  for (let i = 0; i < arr.length; i++) {\n    frequency[arr[i]] = frequency[arr[i]] + 1 || 1;\n  }\n  for (let k in frequency) {\n    if (frequency[k] >= n) {\n      return k;\n    }\n  }\n  return null;\n}\n", "\n  let freq = {};\n  let maxValue = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq[arr[i]]) {\n      freq[arr[i]]++;\n    } else {\n      freq[arr[i]] = 1;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (freq[arr[i]] > maxValue) {\n      maxValue = freq[arr[i]];\n    }\n  }\n  return maxValue;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (freq[arr[i]]) {\n      freq[arr[i]]++;\n    } else {\n      freq[arr[i]] = 1;\n    }\n  }\n  let maxFreq = 0;\n  for (let i in freq) {\n    if (maxFreq < freq[i]) {\n      maxFreq = freq[i];\n    }\n  }\n  return maxFreq;\n}\n", "\n  let freq = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (freq[arr[i]]) {\n      freq[arr[i]]++;\n    } else {\n      freq[arr[i]] = 1;\n    }\n  }\n  return freq;\n}\n"]}
{"task_id": "MBJSP/490", "prompt": "function pairWise(l1) {\n/**\n * * Write a function to iterate over all pairs of consecutive items in a given list.\n */\n  let result = [];\n  let i = 0;\n  let j = 1;\n  while (i < l1.length - 1) {\n    result.push([l1[i], l1[j]]);\n    i++;\n    j++;\n  }\n  return result;\n}\nfunction removeTuple(testlist) {\n/**\n * * Write a function to remove all tuples with all \"none\" values in the given tuple list.\n */\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.every(val => val === null)) {\n      continue;\n    }\n    newList.push(tuple);\n  }\n  return newList;\n}\nfunction cummulativeSum(testlist) {\n/**\n * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n */\n  let sum = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      sum += testList[i][j];\n    }\n  }\n  return sum;\n}\nfunction extractSymmetric(testlist) {\n/**\n * * Write a function to extract all the pairs which are symmetric in the given tuple list.\n */", "entry_point": "extractSymmetric", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]];\nvar x0 = extractSymmetric(arg00);\nvar v0 = new Set([[6, 7],[8, 9]]);\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]];\nvar x1 = extractSymmetric(arg10);\nvar v1 = new Set([[9, 10],[7, 8]]);\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]];\nvar x2 = extractSymmetric(arg20);\nvar v2 = new Set([[8, 9],[10, 11]]);\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      if (testList[i][j] === testList[j][i]) {\n        newList.push([testList[i][j], testList[j][i]]);\n      }\n    }\n  }\n  return newList;\n}\n", "\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = i + 1; j < testList[i].length; j++) {\n      newList.push([testList[i][j], testList[j][i]]);\n    }\n  }\n  return newList;\n}\n", "\n  const symmetricPairs = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    for (let j = 0; j < tuple.length; j++) {\n      if (i == j) {\n        continue;\n      }\n      if (tuple[j] === null || tuple[j] === undefined) {\n        continue;\n      }\n      symmetricPairs.push([tuple[j], tuple[i]]);\n    }\n  }\n  return symmetricPairs;\n}\n", "\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    if (tuple.every(val => val === null)) {\n      continue;\n    }\n    if (tuple.every(tuple2 => tuple.every(val => val === tuple2[tuple2.length - 1]) && tuple.every(val => val === tuple2[0]))) {\n      newList.push(tuple);\n    }\n  }\n  return newList;\n}\n", "\n  const newList = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = i + 1; j < testList.length; j++) {\n      if (testList[i][j]!== testList[j][i]) {\n        newList.push([testList[i][j], testList[j][i]]);\n      }\n    }\n  }\n  return newList;\n}\n"]}
{"task_id": "MBJSP/491", "prompt": "function sumOfSquare(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of binomial co-efficients.\n */\n  function factorial(start, end) {\n    var res = 1\n    for (var i = start; i <= end; i++) {\n      res *= i\n    }\n    return res\n  }\n\n  return (factorial(n + 1, 2 * n) / factorial(1, n))\n}\nfunction Sum(arr) {\n/**\n * * Write a JavaScript function to find the sum of an array.\n */\n    return arr.reduce((acc, cur) => acc + cur, 0);\n}\nfunction geometricSum(n) {\n/**\n * * Write a function to calculate the geometric sum of n-1.\n */\n  if (n < 0) return 0;\n\n  if (n == 0) return 1;\n\n  return 1 / (Math.pow(2, n)) + geometricSum(n - 1);\n}\nfunction sumGp(a, n, r) {\n/**\n * * Write a function to find the sum of geometric progression series.\n */", "entry_point": "sumGp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = sumGp(arg00, arg01, arg02);\nvar v0 = 31;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 5;\nvar arg12 = 4;\nvar x1 = sumGp(arg10, arg11, arg12);\nvar v1 = 341;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 6;\nvar arg22 = 3;\nvar x2 = sumGp(arg20, arg21, arg22);\nvar v2 = 728;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  var res = 0;\n  for (var i = 0; i < n; i++) {\n    res += a * (Math.pow(r, i) - 1) / (Math.pow(r - 1, i + 1) - 1);\n  }\n  return res;\n}\n", "\n    var total = 0;\n    for (var i = 0; i <= n; i++) {\n        total += (a * Math.pow(2, i) + r) / (Math.pow(2, i) + 1);\n    }\n    return total;\n}\n", "\n  return geometricSum(n) - geometricSum(n - a) - geometricSum(n - r);\n}\n", "\n  if (n < 0 || r < 0) return 0;\n\n  if (n == 0 && r == 0) return 1;\n\n  return a * (1 + 1 / (Math.pow(2, n - 1))) * (1 - 1 / (Math.pow(2, r))) + sumGp(a, n - 1, r - 1);\n}\n", "\n  if (a == n) return a * (1 - Math.pow(r, n)) / (1 - r);\n\n  if (a == 1) return geometricSum(n);\n\n  return sumGp(a + 1, n, r) - sumGp(a - 1, n, r);\n}\n"]}
{"task_id": "MBJSP/492", "prompt": "function findLiterals(text, pattern) {\n/**\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n */\n  const regex = new RegExp(pattern, \"gi\");\n  const match = text.match(regex);\n  return match ? [match[0], text.indexOf(match[0]), text.indexOf(match[0]) + match[0].length] : [];\n}\nfunction getNumber(n, k) {\n/**\n * * Write a JavaScript function to find the kth element in an array containing odd elements first and then even elements.\n */\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let odd = arr.filter(x => x % 2 !== 0);\n    let even = arr.filter(x => x % 2 === 0);\n    return k <= odd.length ? odd[k - 1] : even[k - odd.length - 1];\n}\nfunction heapSort(arr) {\n/**\n * * Write a function to sort the given array by using heap sort.\n */\n  return arr.sort((a, b) => a - b);\n}\nfunction binarySearch(itemlist, item) {\n/**\n * * Write a function to search an element in the given array by using binary search.\n */", "entry_point": "binarySearch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 8];\nvar arg01 = 6;\nvar x0 = binarySearch(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 8, 9, 10, 13];\nvar arg11 = 10;\nvar x1 = binarySearch(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 13, 14, 19, 22, 36];\nvar arg21 = 23;\nvar x2 = binarySearch(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let mid = 0;\n    let low = 0;\n    let high = itemlist.length - 1;\n    while (low <= high) {\n        mid = low + (high - low) / 2;\n        if (itemlist[mid] < item) {\n            low = mid + 1;\n        }\n        else if (itemlist[mid] > item) {\n            high = mid - 1;\n        }\n        else {\n            return mid;\n        }\n    }\n    return -1;\n}\n", "\n  const length = itemlist.length;\n  let low = 0;\n  let high = length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (itemlist[mid] < item) {\n      low = mid + 1;\n    }\n    if (itemlist[mid] > item) {\n      high = mid - 1;\n    }\n    if (itemlist[mid] === item) {\n      return mid;\n    }\n  }\n  return -1;\n}\n", "\n  let min = 0;\n  let max = itemlist.length - 1;\n  let middle;\n  while (min <= max) {\n      middle = Math.floor((min + max) / 2);\n      if (itemlist[middle] === item) {\n          return middle;\n      } else if (itemlist[middle] < item) {\n          min = middle + 1;\n      } else {\n          max = middle - 1;\n      }\n  }\n  return -1;\n}\n", "\n  let min = 0, max = itemlist.length - 1, middle = (min + max) / 2, pos = -1;\n  while (min <= max) {\n    if (itemlist[middle] < item) {\n      min = middle + 1;\n    } else if (itemlist[middle] > item) {\n      max = middle - 1;\n    } else {\n      pos = middle;\n      break;\n    }\n    middle = (min + max) / 2;\n  }\n  return pos;\n}\n", "\n  let min = 0;\n  let max = itemlist.length - 1;\n  let mid = (min + max) / 2;\n  while (min <= max) {\n    if (item < itemlist[mid]) {\n      max = mid - 1;\n      mid = (min + max) / 2;\n    } else if (item > itemlist[mid]) {\n      min = mid + 1;\n      mid = (min + max) / 2;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n}\n"]}
{"task_id": "MBJSP/493", "prompt": "function removeWords(list1, charlist) {\n/**\n * * Write a function to remove words from a given list of strings containing a character or string.\n */\n    return list1.map(item => {\n        return item.split(' ').filter(word => {\n            return charlist.every(char => {\n                return word.indexOf(char) === -1;\n            });\n        }).join(' ');\n    });\n}\nfunction countList(inputlist) {\n/**\n * * Write a function to count number of lists in a given list of lists and square the count.\n */\n  let count = 0;\n  for (let i = 0; i < inputList.length; i++) {\n    if (inputList[i].length > 0) {\n      count += 1;\n    }\n  }\n  return count * count;\n}\nfunction checkIdentical(testlist1, testlist2) {\n/**\n * * Write a function to check if two lists of tuples are identical or not.\n */\n  if (testList1.length !== testList2.length) {\n    return false;\n  }\n  for (let i = 0; i < testList1.length; i++) {\n    if (testList1[i][0] !== testList2[i][0] || testList1[i][1] !== testList2[i][1]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction calculatePolygons(startx, starty, endx, endy, radius) {\n/**\n * * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n */", "entry_point": "calculatePolygons", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 1;\nvar arg02 = 4;\nvar arg03 = 4;\nvar arg04 = 3;\nvar x0 = calculatePolygons(arg00, arg01, arg02, arg03, arg04);\nvar v0 = [[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 4;\nvar arg12 = 7;\nvar arg13 = 9;\nvar arg14 = 8;\nvar x1 = calculatePolygons(arg10, arg11, arg12, arg13, arg14);\nvar v1 = [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 6;\nvar arg22 = 4;\nvar arg23 = 3;\nvar arg24 = 2;\nvar x2 = calculatePolygons(arg20, arg21, arg22, arg23, arg24);\nvar v2 = [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let xCoordinate = startx;\n  let yCoordinate = starty;\n  let line = 0;\n  let hexagon = [];\n  let finalList = [];\n  while (line < (Math.sqrt(3) * radius * 2.5)) {\n    let xStart = xCoordinate;\n    let yStart = yCoordinate;\n    let xEnd = xCoordinate + radius;\n    let yEnd = yCoordinate + line;\n    let finalCoordinates = [];\n    if (yEnd < (Math.sqrt(3) * radius * 1.5)) {\n      let yMiddle = (yEnd + yStart) / 2;\n      xCoordinate += radius;\n      xStart += radius;\n      xEnd += radius;\n      if (xEnd > (endx + radius)) {\n        yCoordinate -= (Math.sqrt(3) * radius * 1.5);\n      }\n      if (yEnd > (endy + radius)) {\n        yCoordinate += (Math.sqrt(3) * radius * 1.5);\n      }\n      let coordinate1 = {\n        x: xStart,\n        y: yStart\n      };\n      let coordinate2 = {\n        x: xEnd,\n        y: yEnd\n      };\n      let coordinate3 = {\n        x: xMiddle,\n        y: yMiddle\n      };\n      let coordinate4 = {\n        x: xStart,\n        y: yMiddle\n      };\n      let coordinate5 = {\n        x: xEnd,\n        y: yMiddle\n      };\n      let coordinate6 = {\n        x: xMiddle,\n        y: yStart\n      };\n      finalCoordinates.push(", "\n  let x1 = startx;\n  let y1 = starty;\n  let x2 = endx;\n  let y2 = endy;\n  let x3 = x1 + (x2 - x1) * Math.sqrt(3) / 2;\n  let y3 = y1 + (y2 - y1) / 2;\n  let x4 = x1 + (x2 - x1) / 2;\n  let y4 = y3 + (y2 - y1) / 2;\n  let x5 = x3 + (x4 - x3) * Math.sqrt(3) / 2;\n  let y5 = y3 + (y4 - y3) / 2;\n  let x6 = x4 + (x3 - x4) / 2;\n  let y6 = y5 + (y4 - y3) / 2;\n  let x7 = x5 + (x6 - x5) * Math.sqrt(3) / 2;\n  let y7 = y5 + (y6 - y5) / 2;\n  let x8 = x6 + (x5 - x6) / 2;\n  let y8 = y7 + (y6 - y5) / 2;\n  let x9 = x7 + (x8 - x7) * Math.sqrt(3) / 2;\n  let y9 = y7 + (y8 - y7) / 2;\n  let x10 = x8 + (x7 - x8) / 2;\n  let y10 = y9 + (y8 - y7) / 2;\n  return [\n      [x1, y1],\n      [x2, y2],\n      [x3,", "\n  let x = startx;\n  let y = starty;\n  let list = [];\n  const steps = Math.sqrt(3) / 2 * radius;\n  for (let i = 0; i < 6; i++) {\n    if (i === 0) {\n      list.push([x, y]);\n    } else if (i === 1) {\n      list.push([x + steps, y]);\n    } else if (i === 2) {\n      list.push([x + 2 * steps, y]);\n    } else if (i === 3) {\n      list.push([x + radius, y + steps]);\n    } else if (i === 4) {\n      list.push([x + steps, y + 2 * steps]);\n    } else if (i === 5) {\n      list.push([x + 2 * steps, y + radius]);\n    }\n    x += 2 * steps;\n  }\n  return list;\n}\n", "\n  let startxRadians = startx * Math.PI / 180;\n  let startyRadians = starty * Math.PI / 180;\n  let endxRadians = endx * Math.PI / 180;\n  let endyRadians = endy * Math.PI / 180;\n  let deltaAngle = (endyRadians - startyRadians) / 6;\n  let deltaRadians = deltaAngle * Math.PI / 180;\n  let startAngle = startyRadians - deltaAngle / 2;\n  let numOfRows = Math.round(Math.sqrt((2 * radius) / Math.cos(startAngle)));\n  let x = 0;\n  let y = 0;\n  let points = [];\n  let hexagonCoords = [];\n  let radians = 0;\n  for (let row = 0; row < numOfRows; row++) {\n    radians = startAngle;\n    x = 0;\n    y = 0;\n    for (let i = 0; i < 6; i++) {\n      x = radius * Math.cos(radians);\n      y = radius * Math.sin(radians);\n      radians += deltaRadians;\n      hexagonCoords.push([x, y]);\n    }\n    startAngle += deltaAngle;\n  }\n  for (let i = 0; i < hexagonCoords.length; i++) {\n    points.push(hexagonCoords[i]);\n  }\n  return points;\n}\n", "\n  let coordinateList = [];\n  let stepX = (endx - startx) / (Math.sqrt(3) * Math.abs(radius));\n  let stepY = (endy - starty) / (Math.sqrt(3) * Math.abs(radius));\n  let angle = Math.PI / 3;\n  let x = startx;\n  let y = starty;\n  for (let i = 0; i < 6; i++) {\n    let x0 = x;\n    let y0 = y;\n    x = x + stepX;\n    if (x > endx) {\n      x = startx;\n      y = y + stepY;\n    }\n    if (i % 2 === 0) {\n      y = y + stepY;\n    } else {\n      y = y - stepY;\n    }\n    coordinateList.push([x0, y0]);\n  }\n  return coordinateList;\n}\n"]}
{"task_id": "MBJSP/494", "prompt": "function tupleToFloat(testtup) {\n/**\n * * Write a function to convert the given tuple to a floating-point number.\n */\n  var num = parseFloat(testTup[0] + \".\" + testTup[1])\n  return num\n}\nfunction convert(list) {\n/**\n * * Write a JavaScript function to convert a list of multiple integers into a single integer.\n */\n    let result = 0;\n    for (let i = 0; i < list.length; i++) {\n        result = result * 10 + list[i];\n    }\n    return result;\n}\nfunction romanToInt(s) {\n/**\n * * Write a function to convert a roman numeral to an integer.\n */\n  const roman = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n  };\n\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const current = roman[s[i]];\n    const next = roman[s[i + 1]];\n    if (current < next) {\n      sum -= current;\n    } else {\n      sum += current;\n    }\n  }\n  return sum;\n}\nfunction binaryToInteger(testtup) {\n/**\n * * Write a function to convert the given binary tuple to integer.\n */", "entry_point": "binaryToInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 0, 1, 0, 0, 1];\nvar x0 = binaryToInteger(arg00);\nvar v0 = \"105\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 1, 0, 0, 1, 0, 1];\nvar x1 = binaryToInteger(arg10);\nvar v1 = \"101\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 0, 1, 0, 1];\nvar x2 = binaryToInteger(arg20);\nvar v2 = \"53\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return parseInt(testtup[0], 2);\n}\n", "\n  let num = parseInt(testTup[0], 2);\n  let counter = 1;\n  while (counter < testtup.length) {\n    num = num * 2 + parseInt(testTup[counter], 2);\n    counter++;\n  }\n  return num;\n}\n", "\n  return parseInt(testtup[0] + \".\" + testtup[1], 2);\n}\n", "\n  var tup = testtup.split(\" \");\n  var num = parseInt(tup[0], 2);\n  for (var i = 1; i < tup.length; i++) {\n    num = num * 2 + parseInt(tup[i], 2);\n  }\n  return num;\n}\n", "\n  var num = parseInt(testTup[0], 2);\n  return num;\n}\n"]}
{"task_id": "MBJSP/495", "prompt": "function extractMax(input) {\n/**\n * * Write a function to extract the maximum numeric value from a string by using regex.\n */\n  let regex = /(\\d+)/g;\n  let matches = input.match(regex);\n  let max = Math.max(...matches);\n  return max;\n}\nfunction removeMultipleSpaces(text1) {\n/**\n * * Write a function to remove multiple spaces in a string by using regex.\n */\n  return text1.replace(/\\s{2,}/g, \" \");\n}\nfunction removeExtraChar(text1) {\n/**\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n */\n    return text1.replace(/[^a-zA-Z0-9]/g, '');\n}\nfunction removeLowercase(str1) {\n/**\n * * Write a function to remove lowercase substrings from a given string by using regex.\n */", "entry_point": "removeLowercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"KDeoALOklOOHserfLoAJSIskdsf\";\nvar x0 = removeLowercase(arg00);\nvar v0 = \"KDALOOOHLAJSI\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ProducTnamEstreAmIngMediAplAYer\";\nvar x1 = removeLowercase(arg10);\nvar v1 = \"PTEAIMAAY\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"maNufacTuredbYSheZenTechNolOGIes\";\nvar x2 = removeLowercase(arg20);\nvar v2 = \"NTYSZTNOGI\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let pattern = new RegExp(\".*?[a-z]+.*\", \"gi\");\n    return str1.replace(pattern, \"\");\n}\n", "\n    let str = str1;\n    let patt = /.*?[a-z].*?/;\n    return str.replace(patt, '');\n}\n", "\n    return str1.replace(/^[a-z]+/g, \"\");\n}\n", "\n    let regex = new RegExp(\"(^| )\" + str1.toLowerCase() + \"( |$)\");\n    return str1.replace(regex, \"$1\");\n}\n", "\n    return str1.toLowerCase().replace(/\\b[a-z]+\\b/g, '');\n}\n"]}
{"task_id": "MBJSP/496", "prompt": "function nthSuperUglyNumber(n, primes) {\n/**\n * * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n */\n  const pq = new Heap();\n  const uglyNumbers = [];\n  pq.push(1);\n\n  while (uglyNumbers.length < n) {\n    const uglyNumber = pq.pop();\n    uglyNumbers.push(uglyNumber);\n\n    for (let i = 0; i < primes.length; i++) {\n      const prime = primes[i];\n      const nextUglyNumber = uglyNumber * prime;\n      if (nextUglyNumber > uglyNumbers[uglyNumbers.length - 1]) {\n        pq.push(nextUglyNumber);\n      }\n    }\n  }\n\n  return uglyNumbers[n - 1];\n}\nfunction maximumProduct(nums) {\n/**\n * * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n */\n    let arr = nums.sort((a, b) => a - b)\n    let len = arr.length\n    return Math.max(arr[0] * arr[1] * arr[len - 1], arr[len - 1] * arr[len - 2] * arr[len - 3])\n}\nfunction heapQueueLargest(nums, n) {\n/**\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n */\n  const sortedNums = nums.sort((a, b) => b - a)\n  const minHeap = []\n  for (let i = 0; i < n; i++) {\n    minHeap.push(sortedNums.shift())\n  }\n  return minHeap\n}\nfunction heapQueueSmallest(nums, n) {\n/**\n * * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n */", "entry_point": "heapQueueSmallest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg01 = 3;\nvar x0 = heapQueueSmallest(arg00, arg01);\nvar v0 = [14, 22, 25];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg11 = 2;\nvar x1 = heapQueueSmallest(arg10, arg11);\nvar v1 = [14, 22];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25, 35, 22, 85, 14, 65, 75, 22, 58];\nvar arg21 = 5;\nvar x2 = heapQueueSmallest(arg20, arg21);\nvar v2 = [14, 22, 22, 25, 35];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedNums = nums.sort((a, b) => a - b)\n  const minHeap = []\n  for (let i = 0; i < n; i++) {\n    minHeap.push(sortedNums.shift())\n  }\n  return minHeap\n}\n", "\n  const sortedNums = nums.sort((a, b) => a - b)\n  const maxHeap = []\n  for (let i = 0; i < n; i++) {\n    maxHeap.push(sortedNums.shift())\n  }\n  return maxHeap\n}\n", "\n  const sortedNums = nums.sort((a, b) => a - b)\n  const maxHeap = []\n  for (let i = 0; i < n; i++) {\n    maxHeap.push(sortedNums.shift())\n  }\n  return maxHeap\n}\n", "\n  const sortedNums = nums.sort((a, b) => a - b)\n  const maxHeap = []\n  for (let i = 0; i < n; i++) {\n    maxHeap.push(sortedNums.shift())\n  }\n  return maxHeap\n}\n", "\n  const sortedNums = nums.sort((a, b) => a - b)\n  const maxHeap = []\n  for (let i = 0; i < n; i++) {\n    maxHeap.push(sortedNums.shift())\n  }\n  return maxHeap\n}\n"]}
{"task_id": "MBJSP/497", "prompt": "function surfaceArea(b, s) {\n/**\n * * Write a JavaScript function to find the surface area of the square pyramid.\n */\n    return 2 * b * s + Math.pow(b, 2);\n}\nfunction surfaceareaCylinder(r, h) {\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n  return ((2 * 3.1415 * r * r) + (2 * 3.1415 * r * h));\n}\nfunction lateralsurfaceCone(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cone.\n */\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\nfunction surfaceareaCone(r, h) {\n/**\n * * Write a function to find the surface area of a cone.\n */", "entry_point": "surfaceareaCone", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 12;\nvar x0 = surfaceareaCone(arg00, arg01);\nvar v0 = 282.7433388230814;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = surfaceareaCone(arg10, arg11);\nvar v1 = 880.5179353159282;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 19;\nvar arg21 = 17;\nvar x2 = surfaceareaCone(arg20, arg21);\nvar v2 = 2655.923961165254;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (lateralsurfaceCone(r, h) + (2 * 3.1415 * r * h));\n}\n\n", "\n  return Math.PI * r * Math.sqrt(r * r + h * h);\n}\n", "\n  return Math.PI * r * r + (Math.PI * r * h);\n}\n</script>\n\n<style>\n.canvas {\n  margin-top: 100px;\n}\n</style>\n<div class=\"canvas\">\n<p><span class=\"property\">Lateral Surface Area:</span><span id=\"lateralSurfaceArea\"></span><script>\n", "\n  return (2 * Math.PI * r * h) + Math.PI * r * Math.sqrt(r * r + h * h);\n}\n", "\n  return lateralsurfaceCone(r, h) + Math.PI * r * r;\n}\n"]}
{"task_id": "MBJSP/498", "prompt": "function repeat(x) {\n/**\n * * Write a JavaScript function to print duplicants from a list of integers.\n */\n    let duplicateList = [];\n    let set = new Set(x);\n    for (let item of set) {\n        if (x.indexOf(item) !== x.lastIndexOf(item)) {\n            duplicateList.push(item);\n        }\n    }\n    return duplicateList;\n}\nfunction digitDistanceNums(n1, n2) {\n/**\n * * Write a JavaScript function to find the digit distance between two integers.\n */\n    // convert to string to get the string length.\n    n1 = n1.toString();\n    n2 = n2.toString();\n\n    let difference = Math.abs(n1.length - n2.length);\n\n    if (n1.length > n2.length) {\n        difference -= 1;\n    }\n\n    let min = Math.min(n1.length, n2.length);\n\n    for (let i = 0; i < min; i++) {\n        difference += Math.abs(n1.charCodeAt(i) - n2.charCodeAt(i));\n    }\n\n    return difference;\n}\nfunction lcm(x, y) {\n/**\n * * Write a JavaScript function to find lcm of two positive integers.\n */\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    var gcd = function(a, b) {\n        if(b == 0) {\n            return a;\n        }\n        else {\n            return gcd(b, a % b);\n        }\n    };\n    return ((x * y) / gcd(x, y));\n}\nfunction gcd(x, y) {\n/**\n * * Write a JavaScript function to find gcd of two positive integers.\n */", "entry_point": "gcd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar arg01 = 17;\nvar x0 = gcd(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 6;\nvar x1 = gcd(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 9;\nvar x2 = gcd(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    for (let i = 1; i < x; i++) {\n        if (x % i == 0 && y % i == 0) {\n            return i;\n        }\n    }\n    return x + y;\n}\n", "\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    var gcd = ", "\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    if(y == 0) {\n        return x;\n    }\n    else {\n        return gcd(y, x % y);\n    }\n}\n", "\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    var max = Math.max(x, y);\n    var min = Math.min(x, y);\n    for (var i = min; i >= max; i--) {\n        if(x % i == 0 && y % i == 0) {\n            return i;\n        }\n    }\n    return 0;\n}\n", "\n    if(x > y) {\n        var temp = x;\n        x = y;\n        y = temp;\n    }\n    return gcd(y, x % y);\n}\n"]}
{"task_id": "MBJSP/499", "prompt": "function stringLength(str1) {\n/**\n * * Write a function to find length of the string.\n */\n    return str1.length;\n}\nfunction longestIncreasingSubsequence(arr) {\n/**\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n */\n  if (arr.length === 0) return 0;\n\n  let dp = new Array(arr.length).fill(1);\n  let max = 1;\n\n  for (let i = 1; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j]) {\n        dp[i] = Math.max(dp[i], dp[j] + 1);\n      }\n    }\n    max = Math.max(max, dp[i]);\n  }\n\n  return max;\n}\nfunction unionElements(testtup1, testtup2) {\n/**\n * * Write a function to find the union of elements of the given tuples.\n */\n  const set1 = new Set(testTup1);\n  const set2 = new Set(testTup2);\n  const union = new Set([...set1, ...set2]);\n  return Array.from(union);\n}\nfunction diameterCircle(r) {\n/**\n * * Write a function to find the diameter of a circle.\n */", "entry_point": "diameterCircle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = diameterCircle(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 40;\nvar x1 = diameterCircle(arg10);\nvar v1 = 80;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = diameterCircle(arg20);\nvar v2 = 30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const theta = 2 * Math.PI;\n  const s = r * 2;\n  const d = Math.sqrt(s * (s - r) * (s - r));\n  return d;\n}\n", "\n  return 2 * r;\n}\n", "\n  return 2 * Math.PI * r;\n}\n", "\n  if (r === 0) return 0;\n  const k = Math.log(r);\n  const a = 2 * Math.pow(k, 2) / (k + 1);\n  const b = 2 * Math.pow(k, 2) / (k - 1);\n  return Math.max(a, b);\n}\n", "\n  let diameter = 2 * r;\n  for (let i = 1; i <= r; i++) {\n    diameter += 2 * r * Math.cos(Math.PI * i / r);\n  }\n  return diameter;\n}\n"]}
{"task_id": "MBJSP/500", "prompt": "function moveNum(teststr) {\n/**\n * * Write a function to move all the numbers in it to the given string.\n */\n  let num = \"\";\n  let reg = /[0-9]/g;\n  while (testStr.search(reg) !== -1) {\n    num += testStr.match(reg)[0];\n    testStr = testStr.replace(testStr.match(reg)[0], \"\");\n  }\n  return testStr + num;\n}\nfunction concatenateNested(testtup1, testtup2) {\n/**\n * * Write a function to concatenate the given two tuples to a nested tuple.\n */\n  if (!Array.isArray(testTup1)) {\n    throw Error('The first argument must be an array')\n  }\n\n  if (!Array.isArray(testTup2)) {\n    throw Error('The second argument must be an array')\n  }\n\n  const resultTup = testTup1.concat(testTup2)\n  return resultTup\n}\nfunction packConsecutiveDuplicates(list1) {\n/**\n * * Write a function to pack consecutive duplicates of a given list elements into sublists.\n */\n  let result = [];\n  let current = [];\n  let last = null;\n\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === last) {\n      current.push(list1[i]);\n    } else {\n      if (current.length > 0) {\n        result.push(current);\n      }\n      current = [list1[i]];\n      last = list1[i];\n    }\n  }\n\n  if (current.length > 0) {\n    result.push(current);\n  }\n\n  return result;\n}\nfunction concatenateElements(list) {\n/**\n * * Write a function to concatenate all elements of the given list into a string.\n */", "entry_point": "concatenateElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"];\nvar x0 = concatenateElements(arg00);\nvar v0 = \"  hello there have a rocky day\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Hi\", \"there\", \"How\", \"are\", \"you\"];\nvar x1 = concatenateElements(arg10);\nvar v1 = \"  Hi there How are you\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"];\nvar x2 = concatenateElements(arg20);\nvar v2 = \"  Part of the journey is end\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (Array.isArray(list)) {\n    let teststr = \"\";\n    let reg = /[^0-9]/g;\n    for (let i = 0; i < list.length; i++) {\n      if (list[i].indexOf(\".\")!== -1 || list[i].indexOf(\"-\")!== -1) {\n        throw Error('You cannot use \".\" or \"-\" in your code')\n      }\n      while (teststr.search(reg)!== -1) {\n        teststr = teststr.replace(teststr.match(reg)[0], \"\");\n      }\n      teststr += list[i];\n    }\n    return teststr;\n  } else {\n    throw Error('The argument must be an array')\n  }\n}\n", "\n  if (!Array.isArray(list)) {\n    throw Error('The argument must be an array')\n  }\n\n  let result = \"\";\n  for (let i = 0; i < list.length; i++) {\n    result += list[i]\n  }\n\n  return result;\n}\n", "\n  let concatenated = '';\n\n  for (let i = 0; i < list.length; i++) {\n    concatenated += list[i];\n  }\n\n  return concatenated;\n}\n", "\n  let result = \"\";\n  for (let i = 0; i < list.length; i++) {\n    result += list[i]\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i])\n  }\n  return result.join('')\n}\n"]}
{"task_id": "MBJSP/501", "prompt": "function digitDistanceNums(n1, n2) {\n/**\n * * Write a JavaScript function to find the digit distance between two integers.\n */\n    // convert to string to get the string length.\n    n1 = n1.toString();\n    n2 = n2.toString();\n\n    let difference = Math.abs(n1.length - n2.length);\n\n    if (n1.length > n2.length) {\n        difference -= 1;\n    }\n\n    let min = Math.min(n1.length, n2.length);\n\n    for (let i = 0; i < min; i++) {\n        difference += Math.abs(n1.charCodeAt(i) - n2.charCodeAt(i));\n    }\n\n    return difference;\n}\nfunction findMinDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\n    let minDiff = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let diff = Math.abs(arr[i] - arr[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n    }\n    return minDiff;\n}\nfunction recurGcd(a, b) {\n/**\n * * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n */\n  if (b === 0) return a;\n  return recurGcd(b, a % b);\n}\nfunction numCommDiv(x, y) {\n/**\n * * Write a JavaScript function to find common divisor between two numbers in a given pair.\n */", "entry_point": "numCommDiv", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = numCommDiv(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 8;\nvar x1 = numCommDiv(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar arg21 = 24;\nvar x2 = numCommDiv(arg20, arg21);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let res = x / recurGcd(x, y);\n    return res * y;\n}\n", "\n    let a = Math.gcd(x, y);\n    let b = x / a;\n    let c = y / a;\n\n    return Math.max(b, c);\n}\n", "\n    let numCommDiv = 0;\n\n    for (let i = Math.min(x, y); i <= Math.max(x, y); i++) {\n        if (x % i === 0 && y % i === 0) {\n            numCommDiv = i;\n            break;\n        }\n    }\n    return numCommDiv;\n}\n", "\n    let commonDivisor = 1;\n    for (let i = x; i <= y; i++) {\n        if (y % i === 0 && x % i === 0) {\n            commonDivisor = i;\n        }\n    }\n    return commonDivisor;\n}\n", "\n  let min = Math.min(x, y);\n  let max = Math.max(x, y);\n  let result = 0;\n  for (let i = min; i < max; i++) {\n    if (x % i === 0 && y % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/502", "prompt": "function perfectSquares(a, b) {\n/**\n * * Write a function to find perfect squares between two given numbers.\n */\n  let perfectSquares = [];\n  for (let i = a; i <= b; i++) {\n    if (Math.sqrt(i) % 1 === 0) {\n      perfectSquares.push(i);\n    }\n  }\n  return perfectSquares;\n}\nfunction minOfTwo(x, y) {\n/**\n * * Write a function to find minimum of two numbers.\n */\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\nfunction maxOfTwo(x, y) {\n/**\n * * Write a function to find maximum of two numbers.\n */\n  return x > y ? x : y;\n}\nfunction find(n, m) {\n/**\n * * Write a JavaScript function to find remainder of two numbers.\n */", "entry_point": "find", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 3;\nvar x0 = find(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 3;\nvar x1 = find(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar arg21 = 5;\nvar x2 = find(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n % m;\n}\n", "\n  return n % m;\n}\n", "\n  return n % m;\n}\n", "\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result = i % n;\n  }\n  return result;\n}\n", "\n  let res;\n  if (n < m) {\n    res = n;\n  } else {\n    res = m;\n  }\n  console.log(res);\n}\n"]}
{"task_id": "MBJSP/503", "prompt": "function sumNum(numbers) {\n/**\n * * Write a function to add all the numbers in a list and divide it with the length of the list.\n */\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n}\nfunction consecutiveDuplicates(nums) {\n/**\n * * Write a function to remove consecutive duplicates of a given list.\n */\n  let result = [];\n  let i = 0;\n  let j = 1;\n  while (j < nums.length) {\n    if (nums[i] === nums[j]) {\n      j++;\n    } else {\n      result.push(nums[i]);\n      i = j;\n      j++;\n    }\n  }\n  result.push(nums[i]);\n  return result;\n}\nfunction mulConsecutiveNums(nums) {\n/**\n * * Write a function to multiply consecutive numbers of a given list.\n */\n  let result = [];\n\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i - 1] * nums[i]);\n  }\n\n  return result;\n}\nfunction addConsecutiveNums(nums) {\n/**\n * * Write a function to add consecutive numbers of a given list.\n */", "entry_point": "addConsecutiveNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nvar x0 = addConsecutiveNums(arg00);\nvar v0 = [2, 4, 7, 8, 9, 11, 13];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 8, 9, 6, 10];\nvar x1 = addConsecutiveNums(arg10);\nvar v1 = [9, 13, 17, 15, 16];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x2 = addConsecutiveNums(arg20);\nvar v2 = [3, 5, 7, 9, 11, 13, 15, 17, 19];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i - 1] + nums[i]);\n  }\n\n  return result;\n}\n", "\n  let result = [];\n\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i - 1] + nums[i]);\n  }\n\n  return result;\n}\n", "\n  let result = [];\n  let i = 1;\n  while (i < nums.length) {\n    result.push(nums[i - 1] + nums[i]);\n    i++;\n  }\n  return result;\n}\n", "\n  let result = [];\n  let sum = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    result.push(sum);\n  }\n\n  return result;\n}\n", "\n  let result = [];\n\n  for (let i = 0; i < nums.length; i++) {\n    result.push(nums[i] + nums[i + 1]);\n  }\n\n  return result;\n}\n"]}
{"task_id": "MBJSP/504", "prompt": "function sumAverage(number) {\n/**\n * * Write a function to find sum and average of first n natural numbers.\n */\n  let sum = 0;\n  let average = 0;\n  for (let i = 1; i <= number; i++) {\n    sum += i;\n  }\n  average = sum / number;\n  return [sum, average];\n}\nfunction difference(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    let sum2 = 0;\n    for (let i = 1; i <= n; i++) {\n        sum2 += i;\n    }\n    return sum - sum2;\n}\nfunction cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n odd natural numbers.\n */\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(2 * i + 1, 3);\n    }\n    return sum;\n}\nfunction sumOfSeries(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */", "entry_point": "sumOfSeries", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = sumOfSeries(arg00);\nvar v0 = 225;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = sumOfSeries(arg10);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = sumOfSeries(arg20);\nvar v2 = 36;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += Math.pow(i, n + 1);\n    }\n    return sum;\n}\n", "\n  let sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += Math.pow(i, 3);\n  }\n  return sum;\n}\n", "\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * Math.pow(sum, 3);\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 3);\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/505", "prompt": "function pairOrSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of xor of all pairs of numbers in the given array.\n */\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            sum += (arr[i] ^ arr[j]);\n        }\n    }\n    return sum;\n}\nfunction moveNum(teststr) {\n/**\n * * Write a function to move all the numbers in it to the given string.\n */\n  let num = \"\";\n  let reg = /[0-9]/g;\n  while (testStr.search(reg) !== -1) {\n    num += testStr.match(reg)[0];\n    testStr = testStr.replace(testStr.match(reg)[0], \"\");\n  }\n  return testStr + num;\n}\nfunction moveZero(numlist) {\n/**\n * * Write a JavaScript function to move all zeroes to the end of the given list.\n */\n  let zeroList = [];\n  let nonZeroList = [];\n  for (let i = 0; i < numList.length; i++) {\n    if (numList[i] === 0) {\n      zeroList.push(numList[i]);\n    } else {\n      nonZeroList.push(numList[i]);\n    }\n  }\n  return nonZeroList.concat(zeroList);\n}\nfunction reOrder(a) {\n/**\n * * Write a function to move all zeroes to the end of the given array.\n */", "entry_point": "reOrder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [6, 0, 8, 2, 3, 0, 4, 0, 1];\nvar x0 = reOrder(arg00);\nvar v0 = [6, 8, 2, 3, 4, 1, 0, 0, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 0, 2, 7, 0, 9, 0, 12, 0];\nvar x1 = reOrder(arg10);\nvar v1 = [4, 2, 7, 9, 12, 0, 0, 0, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 11, 0, 74, 14, 0, 1, 0, 2];\nvar x2 = reOrder(arg20);\nvar v2 = [3, 11, 74, 14, 1, 2, 0, 0, 0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let zeroArray = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === 0) {\n      zeroArray.push(a[i]);\n    }\n  }\n  return zeroArray.concat(a);\n}\n", "\n    let zeroList = [];\n    let nonZeroList = [];\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === 0) {\n            zeroList.push(a[i]);\n        } else {\n            nonZeroList.push(a[i]);\n        }\n    }\n    return nonZeroList.concat(zeroList);\n}\n", "\n  let zeroList = [];\n  let nonZeroList = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === 0) {\n      zeroList.push(a[i]);\n    } else {\n      nonZeroList.push(a[i]);\n    }\n  }\n  return nonZeroList.concat(zeroList);\n}\n", "\n  let zeroList = [];\n  let nonZeroList = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === 0) {\n      zeroList.push(a[i]);\n    } else {\n      nonZeroList.push(a[i]);\n    }\n  }\n  return nonZeroList.concat(zeroList);\n}\n", "\n  let zeroList = [];\n  let nonZeroList = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === 0) {\n      zeroList.push(a[i]);\n    } else {\n      nonZeroList.push(a[i]);\n    }\n  }\n  let out = [];\n  out = zeroList.concat(nonZeroList);\n  return out;\n}\n"]}
{"task_id": "MBJSP/506", "prompt": "function harmonicSum(n) {\n/**\n * * Write a function to calculate the harmonic sum of n-1.\n */\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += 1 / i;\n  }\n  return sum;\n}\nfunction mutipleTuple(nums) {\n/**\n * * Write a JavaScript function to calculate the product of all the numbers of a given tuple.\n */\n    let product = 1;\n    for (let i = 0; i < nums.length; i++) {\n        product *= nums[i];\n    }\n    return product;\n}\nfunction uniqueProduct(listdata) {\n/**\n * * Write a JavaScript function to calculate the product of the unique numbers of a given list.\n */\n    let uniqueList = [];\n    let product = 1;\n    for (let i = 0; i < listData.length; i++) {\n        if (uniqueList.indexOf(listData[i]) === -1) {\n            uniqueList.push(listData[i]);\n        }\n    }\n    for (let i = 0; i < uniqueList.length; i++) {\n        product *= uniqueList[i];\n    }\n    return product;\n}\nfunction permutationCoefficient(n, k) {\n/**\n * * Write a function to calculate the permutation coefficient of given p(n, k).\n */", "entry_point": "permutationCoefficient", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 2;\nvar x0 = permutationCoefficient(arg00, arg01);\nvar v0 = 90;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 3;\nvar x1 = permutationCoefficient(arg10, arg11);\nvar v1 = 720;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 1;\nvar x2 = permutationCoefficient(arg20, arg21);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let permutationCoefficient = 0;\n    for (let i = 1; i <= n; i++) {\n        permutationCoefficient += factorial(n) / factorial(n - i);\n    }\n    return permutationCoefficient / factorial(k);\n}\n", "\n  let permutationCoefficient = 1;\n  for (let i = n; i >= n - k + 1; i--) {\n      permutationCoefficient *= i;\n  }\n  for (let i = 1; i <= k; i++) {\n      permutationCoefficient /= i;\n  }\n  return permutationCoefficient;\n}\n", "\n  let product = 1;\n  let min = Math.min(n, k);\n  let max = Math.max(n, k);\n  for (let i = min; i <= max; i++) {\n      product *= factorial(n) / factorial(i) / factorial(n - i);\n  }\n  return product;\n}\n", "\n    let pnk = Math.factorial(n) / Math.factorial(k) / Math.factorial(n - k);\n    return pnk;\n}\n", "\n    let permutation = 1;\n    let product = 1;\n    for (let i = 1; i <= n; i++) {\n        permutation *= i;\n    }\n    for (let i = 1; i <= k; i++) {\n        product *= (n - i + 1);\n    }\n    return permutation / product;\n}\n"]}
{"task_id": "MBJSP/507", "prompt": "function removeWords(list1, charlist) {\n/**\n * * Write a function to remove words from a given list of strings containing a character or string.\n */\n    return list1.map(item => {\n        return item.split(' ').filter(word => {\n            return charlist.every(char => {\n                return word.indexOf(char) === -1;\n            });\n        }).join(' ');\n    });\n}\nfunction removeDuplicate(string) {\n/**\n * * Write a function to remove duplicate words from a given string using collections module.\n */\n  return [...new Set(string.split(' '))].join(' ');\n}\nfunction removeDuplicList(l) {\n/**\n * * Write a function to remove duplicate words from a given list of strings.\n */\n  const set = new Set(l);\n  return [...set];\n}\nfunction removeWords(list1, removewords) {\n/**\n * * Write a function to remove specific words from a given list.\n */", "entry_point": "removeWords", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg01 = [\"white\", \"orange\"];\nvar x0 = removeWords(arg00, arg01);\nvar v0 = [\"red\", \"green\", \"blue\", \"black\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg11 = [\"black\", \"orange\"];\nvar x1 = removeWords(arg10, arg11);\nvar v1 = [\"red\", \"green\", \"blue\", \"white\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg21 = [\"blue\", \"white\"];\nvar x2 = removeWords(arg20, arg21);\nvar v2 = [\"red\", \"green\", \"black\", \"orange\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return list1.map(item => {\n      const words = removewords.map(word => {\n          return item.split(' ').filter(word => {\n              return word.indexOf(word) === 0;\n          });\n      });\n      return words.join(' ');\n  });\n}\n", "\n    return removewords.map(item => {\n        return list1.filter(word => {\n            return word!== item;\n        });\n    });\n}\n\n/**\n * Given a string, compute recursively a new string where all the adjacent chars are now separated by a \"*\".\n * @param {string} str\n * @return {string}\n */\n", "\n  const words = removewords.split(' ');\n  return list1.map(item => {\n      return item.split(' ').filter(word => {\n        return words.every(word => {\n          return word === word.toLowerCase();\n        });\n      }).join(' ');\n  });\n}\n", "\n  return list1.map(item => {\n    return item.split(' ').filter(word => {\n        return removewords.every(word => {\n            return word === word.toLowerCase();\n        });\n    });\n  });\n}\n", "\n  removewords.forEach(word => {\n    list1.forEach(item => {\n      if (item.indexOf(word) === 0) {\n        list1.splice(list1.indexOf(item), 1);\n      }\n    });\n  });\n  return list1;\n}\n"]}
{"task_id": "MBJSP/508", "prompt": "function areEqual(arr1, arr2, n, m) {\n/**\n * * Write a JavaScript function to check whether the given two arrays are equal or not.\n */\n    let arr1Sorted = arr1.sort();\n    let arr2Sorted = arr2.sort();\n    if (arr1Sorted.length !== arr2Sorted.length) return false;\n    let result = true;\n    for (let i = 0; i < arr1Sorted.length; i++) {\n        if (arr1Sorted[i] !== arr2Sorted[i]) result = false;\n    }\n    if (result) return true;\n    else return false;\n}\nfunction allCharactersSame(s) {\n/**\n * * Write a JavaScript function to check whether all the characters are same or not.\n */\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[0]) {\n            count++;\n        }\n    }\n    return count === s.length;\n}\nfunction checkIdentical(testlist1, testlist2) {\n/**\n * * Write a function to check if two lists of tuples are identical or not.\n */\n  if (testList1.length !== testList2.length) {\n    return false;\n  }\n  for (let i = 0; i < testList1.length; i++) {\n    if (testList1[i][0] !== testList2[i][0] || testList1[i][1] !== testList2[i][1]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction sameOrder(l1, l2) {\n/**\n * * Write a function to check if the common elements between two given lists are in the same order or not.\n */", "entry_point": "sameOrder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"black\", \"orange\"];\nvar arg01 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar x0 = sameOrder(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar arg11 = [\"white\", \"orange\", \"pink\", \"black\"];\nvar x1 = sameOrder(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"black\", \"orange\"];\nvar arg21 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar x2 = sameOrder(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let same = true;\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      same = false;\n    }\n  }\n  return same;\n}\n", "\n  let temp = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      temp.push(l1[i]);\n    }\n  }\n  return temp.length === l1.length;\n}\n", "\n    let l1Sorted = l1.sort((a, b) => a - b);\n    let l2Sorted = l2.sort((a, b) => a - b);\n    for (let i = 0; i < l1Sorted.length; i++) {\n        if (l1Sorted[i]!== l2Sorted[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "\n  let l1Sorted = l1.sort();\n  let l2Sorted = l2.sort();\n  if (l1Sorted.length!== l2Sorted.length) return false;\n  for (let i = 0; i < l1Sorted.length; i++) {\n    if (l1Sorted[i]!== l2Sorted[i]) return false;\n  }\n  return true;\n}\n", "\n  let l1Temp = l1.map(item => (item[0], item[1]))\n  l1Temp.sort((a, b) => a[0] - b[0])\n  let l2Temp = l2.map(item => (item[0], item[1]))\n  l2Temp.sort((a, b) => a[0] - b[0])\n  if (l1Temp.length!== l2Temp.length) return false\n  for (let i = 0; i < l1Temp.length; i++) {\n    if (l1Temp[i][0]!== l2Temp[i][0] || l1Temp[i][1]!== l2Temp[i][1]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]}
{"task_id": "MBJSP/509", "prompt": "function sumOfOddFactors(n) {\n/**\n * * Write a JavaScript function to find sum of odd factors of a number.\n */\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            if (i % 2 !== 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\nfunction oddPosition(nums) {\n/**\n * * Write a JavaScript function to check whether every odd index contains odd numbers of a given list.\n */\n    for (let i = 0; i < nums.length; i += 2) {\n        if (nums[i] % 2 !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction averageEven(n) {\n/**\n * * Write a JavaScript function to find the average of even numbers till a given even number.\n */\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\nfunction averageOdd(n) {\n/**\n * * Write a JavaScript function to find the average of odd numbers till a given odd number.\n */", "entry_point": "averageOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = averageOdd(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = averageOdd(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 11;\nvar x2 = averageOdd(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2!== 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\n```\n\n**[Try it](https://www.codewars.com/kata/5884903f3c9738c00001c)**\n\n> Write a JavaScript ", "\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2!== 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\n", "\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2!== 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\n// import { averageEven, averageOdd, oddPosition, sum } from \"./js/js\";\n// let n = 15;\n// console.log(averageOdd(n));\n// console.log(averageEven(n));\n// console.log(oddPosition(n));\n// console.log(sum(n));\n", "\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2!== 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\n", "\n    let sum = 0;\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2!== 0) {\n            sum += i;\n            count++;\n        }\n    }\n    return sum / count;\n}\n"]}
{"task_id": "MBJSP/510", "prompt": "function lbs(arr) {\n/**\n * * Write a function to find the longest bitonic subsequence for the given array.\n */\n    var n = arr.length,\n        lis = Array(n).fill(1),\n        lds = Array(n).fill(1),\n        max = 0;\n\n    for (var i = 1; i < n; i++) {\n        for (var j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                lis[i] = lis[j] + 1;\n            }\n            if (arr[i] < arr[j] && lds[i] < lds[j] + 1) {\n                lds[i] = lds[j] + 1;\n            }\n        }\n        max = Math.max(max, lis[i] + lds[i] - 1);\n    }\n    return max;\n}\nfunction getOddOccurence(arr, arrsize) {\n/**\n * * Write a function to find the number which occurs for odd number of times in the given array.\n */\n    let count = 0;\n    let result = 0;\n    for (let i = 0; i < arrSize; i++) {\n        if (arr[i] % 2 !== 0) {\n            count++;\n            if (count % 2 === 1) {\n                result = arr[i];\n            }\n        }\n    }\n    return result;\n}\nfunction getLudic(n) {\n/**\n * * Write a function to get a lucid number smaller than or equal to n.\n */\n    return [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43].filter(\n        num => num <= n);\n}\nfunction noOfSubsequences(arr, k) {\n/**\n * * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n */", "entry_point": "noOfSubsequences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar arg01 = 10;\nvar x0 = noOfSubsequences(arg00, arg01);\nvar v0 = 11;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 8, 7, 2];\nvar arg11 = 50;\nvar x1 = noOfSubsequences(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 8];\nvar arg21 = 15;\nvar x2 = noOfSubsequences(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    var n = arr.length;\n    var a = 0, b = 0;\n    var result = 0;\n    for (var i = 0; i < n; i++) {\n        a = a * arr[i];\n        b = b + arr[i];\n    }\n    if (a <= k && b >= k) {\n        result++;\n    }\n    return result;\n}\n", "\n    let product = 1,\n        result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n        result += Math.floor(product / k);\n    }\n    return result;\n}\n", "\n    let n = arr.length,\n        count = 0;\n    let products = Array(n).fill(1);\n    for (let i = 1; i < n; i++) {\n        products[i] = products[i - 1] * arr[i - 1];\n    }\n    for (let i = n - 1; i >= 0; i--) {\n        if (products[i] < k) {\n            count++;\n            if (arr[i] === k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n    let n = arr.length,\n        count = 0;\n    if (arr[0] > k || arr[n - 1] < k) {\n        return 0;\n    }\n    for (let i = 0; i < n - 1; i++) {\n        if (arr[i] * arr[i + 1] <= k) {\n            count++;\n        }\n    }\n    return count;\n}\n", "\n    const n = arr.length;\n    let product = 1;\n    for (let i = 0; i < n; i++) {\n        product *= arr[i];\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (product * arr[i] <= k) {\n            count++;\n        }\n    }\n    return count;\n}\n"]}
