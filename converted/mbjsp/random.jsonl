{"task_id": "MBJSP/11", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeOcc(s, ch) {\n/**\n * * Write a JavaScript function to remove first and last occurrence of a given character from the string.\n */", "entry_point": "removeOcc", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"hello\";\nvar arg01 = \"l\";\nvar x0 = removeOcc(arg00, arg01);\nvar v0 = \"heo\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar arg11 = \"a\";\nvar x1 = removeOcc(arg10, arg11);\nvar v1 = \"bcd\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"PHP\";\nvar arg21 = \"P\";\nvar x2 = removeOcc(arg20, arg21);\nvar v2 = \"H\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let res = \"\";\n  let index = 0;\n  let len = s.length;\n  while (index < len) {\n    let i = index;\n    while (i < len && s[i]!= ch) {\n      i++;\n    }\n    if (i < len) {\n      res = s.substr(index, i - index + 1);\n      index = i;\n    } else {\n      break;\n    }\n  }\n  return res;\n}\n", "\n    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== ch) {\n            result.push(s[i]);\n        }\n    }\n    return result;\n}\n", "\n  return s.substring(0, s.length - 1).replace(new RegExp(ch, \"g\"), \"\");\n}\n", "\n  return s.substring(0, s.length - 1) + s.substring(s.lastIndexOf(ch) + 1);\n}\n", "\n  if (!s) return s;\n  const result = [];\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    const char = s.charCodeAt(i);\n    if (char === ch || char === 32 || char === 10) {\n      i++;\n    } else {\n      result.push(s.charAt(i));\n      i++;\n    }\n    const char2 = s.charCodeAt(j);\n    if (char2 === ch || char2 === 32 || char2 === 10) {\n      j--;\n    } else {\n      result.push(s.charAt(j));\n      j--;\n    }\n  }\n  return result.join('');\n}\n"]}
{"task_id": "MBJSP/12", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sortMatrix(m) {\n/**\n * * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n */", "entry_point": "sortMatrix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nvar x0 = sortMatrix(arg00);\nvar v0 = [[1, 1, 1], [1, 2, 3], [2, 4, 5]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nvar x1 = sortMatrix(arg10);\nvar v1 = [[-2, 4, -5], [1, -1, 1], [1, 2, 3]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 8, 9], [6, 4, 3], [2, 1, 4]];\nvar x2 = sortMatrix(arg20);\nvar v2 = [[2, 1, 4], [6, 4, 3], [5, 8, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const matrix = [];\n  let sum = 0;\n  for (let i = 0; i < m.length; i++) {\n    matrix.push([]);\n    for (let j = 0; j < m[i].length; j++) {\n      sum += m[i][j];\n      matrix[i].push(m[i][j]);\n    }\n  }\n  const sortedMatrix = matrix.sort((a, b) => a[0] + b[0] - a[1] - b[1]);\n  return sortedMatrix;\n}\n", "\n    let rows = [];\n    let sums = [];\n    for (let i = 0; i < m.length; i++) {\n        sums[i] = m[i][i] + m[i][i + 1] + m[i][i + 2];\n        rows[i] = i;\n    }\n    sums.sort((a, b) => b - a);\n    let sorted;\n    let j = 0;\n    for (let i = 0; i < sums.length; i++) {\n        if (sums[i] == sums[i - 1]) {\n            rows[j] = rows[j] + 1;\n        }\n        else {\n            j = j + 1;\n        }\n    }\n    for (let i = 0; i < rows.length; i++) {\n        for (let k = 0; k < rows[i] - 1; k++) {\n            if (m[i][k] > m[i][k + 1]) {\n                let t = m[i][k];\n                m[i][k] = m[i][k + 1];\n                m[i][k + 1] = t;\n            }\n        }\n    }\n    return m;\n}\n", "\n  const sum = m.map(row => row.reduce((a, b) => a + b))\n  const sortedSum = sum.sort((a, b) => a - b);\n  return m.map(row => sortedSum.map(val => row.map(cell => cell / val)).concat([row.reduce((a, b) => a + b)]))\n}\n", "\n  const sum = m.reduce((a, b) => a + b);\n  m.sort((a, b) => sum - a.reduce((a, b) => a + b));\n  return m;\n}\n", "\n  const result = [];\n  for (let i = 0; i < m.length; i++) {\n    const sum = 0;\n    for (let j = 0; j < m[i].length; j++) {\n      sum += m[i][j];\n    }\n    result.push({ sum, i });\n  }\n  result.sort((a, b) => a.sum - b.sum);\n  return result;\n}\n"]}
{"task_id": "MBJSP/13", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countCommon(words) {\n/**\n * * Write a function to count the most common words in a dictionary.\n */", "entry_point": "countCommon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"];\nvar x0 = countCommon(arg00);\nvar v0 = [[\"pink\", 6], [\"black\", 5], [\"white\", 5], [\"red\", 4]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"];\nvar x1 = countCommon(arg10);\nvar v1 = [[\"one\", 4], [\"two\", 2], [\"three\", 2], [\"four\", 1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"];\nvar x2 = countCommon(arg20);\nvar v2 = [[\"Apple\", 2], [\"Amazon\", 2], [\"Netflix\", 2], [\"Facebook\", 1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const wordsCount = words.map(word => {\n    const index = result.indexOf(word);\n    if (index === -1) {\n      result.push(word);\n    }\n    return { word, count: result.indexOf(word) };\n  });\n  const resultIndexes = wordsCount.map(word => {\n    return { word, count: result.indexOf(word) };\n  });\n  const sortedResults = resultIndexes.sort((a, b) => b.count - a.count);\n  const max = sortedResults[0].count;\n  return result.filter(word => word === sortedResults[0].word).length;\n}\n// Write your code here\n", "\n  const wordsList = words.split(\" \");\n  const count = {};\n  for (let i = 0; i < wordsList.length; i++) {\n    count[wordsList[i]] = count[wordsList[i]] + 1 || 1;\n  }\n  return count;\n}\n", "\n  // Write your code here\n  return [...words].filter(word => words[word] === words.mostCommon).reduce((a, b) => a + b, 0);\n}\n", "\n  const wordsMap = words.map(word => word.toLowerCase()).reduce((map, word) => {\n    return map.hasOwnProperty(word)? map : {};\n  }, {});\n  return Object.keys(wordsMap).sort((a, b) => wordsMap[a].count - wordsMap[b].count).map(word => word.toLowerCase()).filter(word => wordsMap.hasOwnProperty(word)).length;\n}\n", "\n  const result = [];\n  let wordcount = {};\n  for (let i = 0; i < words.length; i++) {\n    if (wordcount[words[i]] === undefined) {\n      wordcount[words[i]] = 1;\n    } else {\n      wordcount[words[i]]++;\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    if (wordcount[words[i]] > wordcount[result[0]]) {\n      result[0] = words[i];\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/14", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findVolume(l, b, h) {\n/**\n * * Write a JavaScript function to find the volume of a triangular prism.\n */", "entry_point": "findVolume", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 8;\nvar arg02 = 6;\nvar x0 = findVolume(arg00, arg01, arg02);\nvar v0 = 240;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = findVolume(arg10, arg11, arg12);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar arg22 = 1;\nvar x2 = findVolume(arg20, arg21, arg22);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  return l * b * h;\n}\n", "\n  const volume = l * b * h / 3;\n  return volume;\n}\n// Call your ", "\n  // Write your code here\n  const l1 = Math.pow(l, 2);\n  const b1 = Math.pow(b, 2);\n  const h1 = Math.pow(h, 2);\n  return (l1 + b1 + h1) * 0.5;\n}\n", "\n  let volume = 0;\n  volume = l * b * h;\n  return volume;\n}\n", "\n  const l1 = l / 2;\n  const l2 = (l / 2) * (l / 2);\n  const l3 = l * (l / 2) * (l / 2);\n  const b1 = b / 2;\n  const b2 = (b / 2) * (b / 2);\n  const b3 = b * (b / 2) * (b / 2);\n  const h1 = h / 2;\n  const h2 = (h / 2) * (h / 2);\n  const h3 = h * (h / 2) * (h / 2);\n  const volume = (l1 * b1 * h1) + (l2 * b2 * h2) + (l3 * b3 * h3) - (l1 * b2 * h3) - (l2 * b3 * h1) - (l3 * b1 * h2);\n  return volume;\n}\n"]}
{"task_id": "MBJSP/15", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction splitLowerstring(text) {\n/**\n * * Write a function to split a string at lowercase letters.\n */", "entry_point": "splitLowerstring", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AbCd\";\nvar x0 = splitLowerstring(arg00);\nvar v0 = [\"bC\", \"d\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Python\";\nvar x1 = splitLowerstring(arg10);\nvar v1 = [\"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Programming\";\nvar x2 = splitLowerstring(arg20);\nvar v2 = [\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.split(\"\").map(str => str.toLowerCase());\n}\n", "\n  let tokens = [];\n  let curr = \"\";\n  for (let i = 0; i < text.length; i++) {\n    curr = text[i];\n    if (curr.toLowerCase() === curr) {\n      tokens.push(curr);\n      curr = \"\";\n    }\n  }\n  tokens.push(curr);\n  return tokens;\n}\n", "\n  return text.split(\"\");\n}\n", "\n  return text.split('').map(ch => ch.toLowerCase());\n}\n", "\n  const result = [];\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].toLowerCase() === text[i]) {\n      result.push(text[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/16", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction textLowercaseUnderscore(text) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n */", "entry_point": "textLowercaseUnderscore", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab_cbbbc\";\nvar x0 = textLowercaseUnderscore(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aab_Abbbc\";\nvar x1 = textLowercaseUnderscore(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Aaab_abbbc\";\nvar x2 = textLowercaseUnderscore(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  return text.toLowerCase().split(/\\w+/).map((s) => s.replace(/[A-Za-z_]+/g, '_$0').toLowerCase()).join('_');\n}\n", "\n    // Write your code here\n    const result = [];\n    for (let i = 0; i < text.length; i++) {\n        if (i === 0 || text[i - 1]!== text[i]) {\n            result.push(text[i]);\n        }\n    }\n    return result;\n}\n", "\n  const result = [];\n  let currstr = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].toLowerCase()!== currstr.toLowerCase()) {\n      result.push(currstr);\n      currstr = text[i].toLowerCase();\n    } else {\n      currstr += text[i];\n    }\n  }\n  result.push(currstr);\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (result.indexOf(char + '_') == -1 && result.indexOf('_' + char) == -1) {\n      result.push(char + '_');\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < text.length - 1; i++) {\n    if (text[i].toLowerCase()!== text[i + 1].toLowerCase()) {\n      result.push(text[i].toLowerCase() + '_' + text[i + 1].toLowerCase());\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/17", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction squarePerimeter(a) {\n/**\n * * Write a function to find the perimeter of a square.\n */", "entry_point": "squarePerimeter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = squarePerimeter(arg00);\nvar v0 = 40;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = squarePerimeter(arg10);\nvar v1 = 20;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squarePerimeter(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const p = (a * 4);\n  return p;\n}\n", "\n  const side = a[0];\n  return side * side;\n}\n", "\n  // Write your code here\n  const side = Math.sqrt(a);\n  return side * 4;\n}\n", "\n  const perimeter = 4 * a;\n  return perimeter;\n}\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n", "\n  const side = Math.sqrt(a);\n  return side * 4;\n}\nconst collections = {\n  numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n  texts: ['I', 'am', 'a', 'fun', 'tuple', 'of', '5','strings'],\n  numbersStrings: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n  numbersNumericStrings: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n  numbersStringsNumericStrings: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n};\n"]}
{"task_id": "MBJSP/18", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeDirtyChars(string, secondstring) {\n/**\n * * Write a function to remove characters from the first string which are present in the second string.\n */", "entry_point": "removeDirtyChars", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"probasscurve\";\nvar arg01 = \"pros\";\nvar x0 = removeDirtyChars(arg00, arg01);\nvar v0 = \"bacuve\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"digitalindia\";\nvar arg11 = \"talent\";\nvar x1 = removeDirtyChars(arg10, arg11);\nvar v1 = \"digiidi\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"exoticmiles\";\nvar arg21 = \"toxic\";\nvar x2 = removeDirtyChars(arg20, arg21);\nvar v2 = \"emles\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const cleanstring = secondstring.replace(string, '');\n  return cleanstring;\n}\n", "\n  const cleanstring = string.replace(secondstring, \"\");\n  return cleanstring;\n}\n", "\n  let cleanedString = string;\n  cleanedString = cleanedString.replace(secondstring, \"\");\n  return cleanedString;\n}\n", "\n  const s1 = string;\n  const s2 = secondstring;\n  const result = s1.split('');\n  for (let i = 0; i < s2.length; i++) {\n    for (let j = 0; j < result.length; j++) {\n      if (result[j] === s2[i]) {\n        result.splice(j, 1);\n        j--;\n      }\n    }\n  }\n  return result.join('');\n}\n", "\n  const result = [];\n  for (let i = 0; i < string.length; i++) {\n    if (secondstring.indexOf(string[i]) === -1) {\n      result.push(string[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/19", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction testDuplicate(arraynums) {\n/**\n * * Write a function to find whether a given array of integers contains any duplicate element.\n */", "entry_point": "testDuplicate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar x0 = testDuplicate(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 4];\nvar x1 = testDuplicate(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2, 2, 3, 3, 4, 4, 5];\nvar x2 = testDuplicate(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = {};\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== array[i + 1] && array[i]!== -1) {\n      result[array[i]] = 1;\n    }\n  }\n  return result.hasOwnProperty(array[i])? true : false;\n}\n", "\n  let nums = [];\n  for (let i = 0; i < arraynums.length; i++) {\n    if (nums.indexOf(arraynums[i]) < 0) {\n      nums.push(arraynums[i]);\n    }\n  }\n  return nums.indexOf(nums.sort().pop()) >= 0;\n}\n", "\n  return arrayDuplicate(arrayNums) || arrayDuplicateWithOrder(arrayNums);\n}\n", "\n  return arraynums.some(elem => {\n    return arraynums.some(elem2 => {\n      return elem === elem2;\n    });\n  });\n}\n", "\n  const numArrays = arraynums.map(num => {\n    const count = {};\n    for (let i = 0; i < num.length; i++) {\n      count[num[i]] = count[num[i]] + 1 || 1;\n    }\n    return count.length > 1;\n  });\n  return numArrays.some(numArrays => numArrays);\n}\n"]}
{"task_id": "MBJSP/20", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isWoodall(x) {\n/**\n * * Write a function to check if the given number is woodball or not.\n */", "entry_point": "isWoodall", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 383;\nvar x0 = isWoodall(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 254;\nvar x1 = isWoodall(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 200;\nvar x2 = isWoodall(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return isPowOfTwo(x) && x > 1 && isPowOfTwo(x - 1);\n}\n", "\n    const leftNumbers = [-2, -1, 0, 1, 2];\n    const rightNumbers = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5];\n    if (leftNumbers.includes(x)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n", "\n  return Math.floor(x / 100) % 2 === 0;\n}\n", "\n  return false;\n}\n", "\n  let isWoodall = false;\n  for (let i = 0; i < x; i++) {\n    if (x % i === 0) {\n      isWoodall = true;\n      break;\n    }\n  }\n  return isWoodall;\n}\n"]}
{"task_id": "MBJSP/21", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction multiplesOfNum(m, n) {\n/**\n * * Write a function to find m number of multiples of n.\n */", "entry_point": "multiplesOfNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = multiplesOfNum(arg00, arg01);\nvar v0 = [3, 6, 9, 12];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 5;\nvar x1 = multiplesOfNum(arg10, arg11);\nvar v1 = [5, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 2;\nvar x2 = multiplesOfNum(arg20, arg21);\nvar v2 = [2, 4, 6, 8, 10, 12, 14, 16, 18];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return test.filter(value => value % n === 0 && value < m);\n}\n", "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % m === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % m === 0) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i <= m; i++) {\n    result += i;\n  }\n  return result;\n}\nconst test = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst test2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nconst test3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nconst test4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\nconst test5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nconst test6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21];\nconst test7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];\nconst test8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];\nconst test9 = [1, 2, 3, 4, 5, 6, 7, 8, 9,", "\n  return Math.floor(Math.sqrt(n * m)) + 1;\n}\n"]}
{"task_id": "MBJSP/22", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findFirstDuplicate(nums) {\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */", "entry_point": "findFirstDuplicate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 4, 5];\nvar x0 = findFirstDuplicate(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar x1 = findFirstDuplicate(arg10);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2, 3, 3, 2, 2];\nvar x2 = findFirstDuplicate(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (let i = 0; i < nums.length - 1; i++) {\n    if (nums[i] === nums[i + 1]) {\n      return nums[i];\n    }\n  }\n  return -1;\n}\n", "\n  for (let i = 0; i < nums.length; i++) {\n    let j = i + 1;\n    while (j < nums.length) {\n      if (nums[i] === nums[j]) {\n        return nums[i];\n      }\n      j++;\n    }\n  }\n  return -1;\n}\n", "\n  const nums2 = nums.filter(el => el === el);\n  for (let i = 0; i < nums2.length; i++) {\n    const result = nums2.indexOf(nums[i]);\n    if (result!== i) return nums[i];\n  }\n}\n", "\n  let index = nums.length - 1;\n  for (let i = 0; i < nums.length - 1; i++) {\n    let testtup = nums[i], testtup2 = nums[index];\n    if (testtup === testtup2) {\n      return testtup;\n    }\n  }\n  return -1;\n}\n", "\n  let result = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (result!== nums[i] && nums[i]!== nums[i - 1]) {\n      result = nums[i];\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/23", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maximumSum(list1) {\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */", "entry_point": "maximumSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nvar x0 = maximumSum(arg00);\nvar v0 = 33;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[0, 1, 1], [1, 1, 2], [3, 2, 1]];\nvar x1 = maximumSum(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]];\nvar x2 = maximumSum(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const list = list1.map(list => list.map(n => parseInt(n, 10)));\n  const sortedList = list.sort((a, b) => a.reduce((max, curr) => max + curr, 0) - b.reduce((max, curr) => max + curr, 0));\n  return sortedList[sortedList.length - 1].reduce((max, curr) => max + curr, 0);\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    const sum = list1[i].reduce((a, b) => a + b);\n    result.push(sum);\n  }\n  return result.reduce((a, b) => a > b? a : b);\n}\n", "\n  const listOfLists = [];\n  const result = [];\n  listOfLists.push(list1);\n  while (listOfLists.length > 0) {\n    let newlist = [];\n    for (let i = 0; i < listOfLists.length; i++) {\n      listOfLists[i].forEach(element => {\n        newlist.push(element);\n      });\n    }\n    listOfLists = newlist;\n  }\n  for (let i = 0; i < listOfLists.length; i++) {\n    for (let j = 0; j < listOfLists[i].length; j++) {\n      result.push(listOfLists[i][j]);\n    }\n  }\n  return result.sort((a, b) => a - b).pop();\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    const temp = [];\n    for (let j = 0; j < list1[i].length; j++) {\n      temp.push(list1[i][j]);\n    }\n    result.push(sum(temp));\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const sum = list1.reduce((a, b) => {\n    return a + b[0] + b[1];\n  }, 0);\n  return sum;\n}\n"]}
{"task_id": "MBJSP/24", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction binaryToDecimal(binary) {\n/**\n * * Write a function to convert the given binary number to its decimal equivalent.\n */", "entry_point": "binaryToDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 100;\nvar x0 = binaryToDecimal(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1011;\nvar x1 = binaryToDecimal(arg10);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1101101;\nvar x2 = binaryToDecimal(arg20);\nvar v2 = 109;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let temp = binary.toString();\n  let dec = 0;\n  let n = temp.length - 1;\n  for (let i = n; i >= 0; i--) {\n    if (temp[i] === '1') {\n      dec += Math.pow(2, n - i);\n    }\n  }\n  return dec;\n}\n", "\n  if (binary.length === 0 || binary.length > 1 && binary.length % 2!= 0) {\n    return \"Invalid Binary Number\";\n  }\n  const temp = binary.slice();\n  let num = 0;\n  for (let i = temp.length - 1; i >= 0; i--) {\n    num = num + (temp[i] - '0') * Math.pow(2, temp.length - i - 1);\n  }\n  return num;\n}\n", "\n  return Math.floor(binary / Math.pow(2, 32)) % Math.pow(2, 32);\n}\n", "\n  const num = parseInt(binary, 2);\n  return num;\n}\n", "\n  let number = binary;\n  let remainder = 0;\n  let decimaldivisor = 1;\n  let decimal = 0;\n  while (number > 0) {\n    remainder = number % 10;\n    decimaldivisor = decimaldivisor * 2;\n    decimal = decimal + remainder * decimaldivisor;\n    number = number / 10;\n  }\n  return decimal;\n}\n"]}
{"task_id": "MBJSP/25", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findProduct(arr, n) {\n/**\n * * Write a JavaScript function to find the product of non-repeated elements in a given array.\n */", "entry_point": "findProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3];\nvar arg01 = 4;\nvar x0 = findProduct(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 1];\nvar arg11 = 5;\nvar x1 = findProduct(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 4, 5, 6];\nvar arg21 = 5;\nvar x2 = findProduct(arg20, arg21);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod = prod * arr[i];\n  }\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== prod) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n", "\n  let product = 1;\n  const arrCopy = arr.slice(0);\n  for (let i = 0; i < arrCopy.length; i++) {\n    product *= arrCopy[i];\n  }\n  const nbrArr = [...arrCopy];\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i]!== nbrArr[i]) {\n      product = product / arrCopy[i];\n    }\n  }\n  return product;\n}\n", "\n  const product = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i]) === -1) {\n      product.push(arr[i]);\n    }\n  }\n  const result = [];\n  let finalResult = 1;\n  for (let i = 0; i < product.length; i++) {\n    finalResult *= product[i];\n  }\n  return finalResult;\n}\n", "\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i]) === -1) {\n      product *= arr[i];\n    }\n  }\n  return product;\n}\n", "\n    const result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.indexOf(arr[i])!== i) {\n            result.push(arr[i]);\n            i = i + n - 1;\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/26", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkKElements(testlist, k) {\n/**\n * * Write a function to check if the given tuple list has all k elements.\n */", "entry_point": "checkKElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]];\nvar arg01 = 4;\nvar x0 = checkKElements(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 7, 7], [7, 7]];\nvar arg11 = 7;\nvar x1 = checkKElements(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[9, 9], [9, 9, 9, 9]];\nvar arg21 = 7;\nvar x2 = checkKElements(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let counter = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    counter += testlist[i];\n    if (counter > k) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  return testlist.filter(testTup => {\n    return testTup.length === k;\n  }).length === k;\n}\n", "\n  if (testlist.length < k) {\n    return true;\n  }\n  for (let i = 0; i < testlist.length - k; i++) {\n    if (testlist[i] === testlist[i + k]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  return testlist.every(el => el % k === 0);\n}\n", "\n  const sortedNumbers = testlist.sort((a, b) => a - b);\n  let total = 0;\n  for (let i = 0; i < k; i++) {\n    total += sortedNumbers[i];\n  }\n  return total == sortedNumbers[sortedNumbers.length - 1];\n}\n"]}
{"task_id": "MBJSP/27", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction remove(list) {\n/**\n * * Write a JavaScript function to remove all digits from a list of strings.\n */", "entry_point": "remove", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"4words\", \"3letters\", \"4digits\"];\nvar x0 = remove(arg00);\nvar v0 = [\"words\", \"letters\", \"digits\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"28Jan\", \"12Jan\", \"11Jan\"];\nvar x1 = remove(arg10);\nvar v1 = [\"Jan\", \"Jan\", \"Jan\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"wonder1\", \"wonder2\", \"wonder3\"];\nvar x2 = remove(arg20);\nvar v2 = [\"wonder\", \"wonder\", \"wonder\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const numbers = list.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\n", "\n  return list.map(str => str.replace(/[0-9]+/g, ''));\n}\n", "\n  let newlist = [];\n  for (let i = 0; i < list.length; i++) {\n    newlist.push(list[i].replace(/[^0-9]/g, ''));\n  }\n  return newlist;\n}\n", "\n  // Write your code here\n  return list.filter(item =>!isNumber(item));\n}\n", "\n  let tempList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].indexOf('.') === -1) {\n      tempList.push(list[i]);\n    }\n  }\n  return tempList;\n}\n"]}
{"task_id": "MBJSP/28", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction binomialCoeff(n, k) {\n/**\n * * Write a JavaScript function to find binomial co-efficient.\n */", "entry_point": "binomialCoeff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 2;\nvar x0 = binomialCoeff(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 3;\nvar x1 = binomialCoeff(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 2;\nvar x2 = binomialCoeff(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  ", "\n  const result = [];\n  for (let i = 1; i <= k; i++) {\n    result.push(Math.pow(n, i) * Math.pow(k, n - i));\n  }\n  return result[result.length - 1];\n}\n", "\n  let result = 1;\n  for (let i = 1; i <= k; i++) {\n    result = result * (n + 1 - i) / i;\n  }\n  return result;\n}\n", "\n  return Math.pow(n, k) * Math.pow(n - k, k) / Math.pow(k, k);\n}\n", "\n  const result = Math.pow(1, n) * Math.pow(k, n - k);\n  return result;\n}\n"]}
{"task_id": "MBJSP/29", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getOddOccurrence(arr, arrsize) {\n/**\n * * Write a JavaScript function to find the element occurring odd number of times.\n */", "entry_point": "getOddOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 2, 3, 1];\nvar arg01 = 7;\nvar x0 = getOddOccurrence(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 2, 3, 1, 3];\nvar arg11 = 7;\nvar x1 = getOddOccurrence(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2];\nvar arg21 = 13;\nvar x2 = getOddOccurrence(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < arrsize; i++) {\n    if (arr[i] % 2) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arrsize; j++) {\n      if (arr[i] === arr[j]) {\n        count++;\n      }\n    }\n    if (count % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n", "\n  let occurence = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arrsize; j++) {\n      if (arr[i] === arrs[j]) {\n        occurence++;\n        break;\n      }\n    }\n  }\n  return occurence;\n}\n", "\n  const elements = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      elements.push(arr[i]);\n    }\n  }\n  return elements;\n}\n", "\n  let result = {};\n  for (let i = 0; i < arrsize; i++) {\n    let count = 0;\n    for (let j = 0; j < arrsize; j++) {\n      if (arr[i] === arr[j]) {\n        count++;\n      }\n    }\n    result[arr[i]] = count % 2 === 1? 'odd' : 'even';\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/30", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countSubstringWithEqualEnds(s) {\n/**\n * * Write a JavaScript function to count all the substrings starting and ending with same characters.\n */", "entry_point": "countSubstringWithEqualEnds", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = countSubstringWithEqualEnds(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar x1 = countSubstringWithEqualEnds(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = countSubstringWithEqualEnds(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let res = 0;\n  const charToNum = {};\n  for (let i = 0; i < s.length; i++) {\n    charToNum[s[i]] = charToNum[s[i]] + 1 || 1;\n    if (charToNum[s[i]] === 1) {\n      res++;\n    }\n  }\n  return res;\n}\n", "\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i; j < s.length; j++) {\n      const sub = s.substring(i, j);\n      if (result.indexOf(sub) === -1) {\n        result.push(sub);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const chars = \"abcdefghijklmnopqrstuvwxyz\";\n  let result = 0;\n  for (let i = 0; i < chars.length; i++) {\n    for (let j = 0; j < chars.length; j++) {\n      if (s.charAt(i) === s.charAt(j)) {\n        result++;\n        if (j === chars.length - 1) {\n          result++;\n        }\n      }\n    }\n  }\n  return result;\n}\n", "\n    const result = [];\n    let str = s.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i + 1; j <= str.length; j++) {\n            let substring = str.substring(i, j);\n            if (substring!== s) {\n                result.push(substring);\n            }\n        }\n    }\n    return result;\n}\n", "\n  // Write your code here\n  const count = {};\n  for (let i = 0; i < s.length; i++) {\n    count[s[i]] = count[s[i]] + 1 || 1;\n    if (count[s[i]] === s.length - i) {\n      count[s[i]] = 0;\n    }\n  }\n  return Object.keys(count).length;\n}\n"]}
{"task_id": "MBJSP/31", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction func(nums, k) {\n/**\n * * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n */", "entry_point": "func", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg01 = 3;\nvar x0 = func(arg00, arg01);\nvar v0 = [5, 7, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg11 = 1;\nvar x1 = func(arg10, arg11);\nvar v1 = [1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg21 = 5;\nvar x2 = func(arg20, arg21);\nvar v2 = [6, 5, 7, 8, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const numsStr = nums.map(num => String(num));\n  const topK = []\n  const result = []\n  for (let i = 0; i < k; i++) {\n    topK.push({ numsStr: [] });\n  }\n  for (let i = 0; i < nums.length; i++) {\n    topK[i % k].numsStr.push(numsStr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    topK[i].numsStr.sort(numsstr => numsstr.length);\n    topK[i].numsStr = topK[i].numsStr.map(numstr => parseInt(numstr, 10));\n    topK[i].numsStr.unshift(0);\n    topK[i].numsStr = topK[i].numsStr.map(numstr => numstr);\n  }\n  for (let i = 0; i < k; i++) {\n    topK[i].numsStr = topK[i].numsStr.map(numstr => {\n      if (result[numstr]!== undefined) {\n        result[numstr] = result[numstr] + 1;\n      } else {\n        result[numstr] = 1;\n      }\n      return numstr;\n    });\n  }\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < result[topK[i].numsStr[i]].length; j++) {\n      topK[i].numsStr = topK[i].numsStr.map(numstr => {\n", "\n  const heap = new Heap(k, (a, b) => a - b);\n  for (let i = 0; i < nums.length; i++) {\n    heap.insert(nums[i]);\n  }\n  const result = [];\n  while (heap.size() > 0) {\n    result.push(heap.extractMin());\n  }\n  return result;\n}\n", "\n  const maxHeap = new MaxHeap(k);\n  const sortedNums = nums.sort(", "\n  // Write your code here\n  let heap;\n  let heapSize = 0;\n  let heapSize2;\n  const result = [];\n  const hashTable = {};\n  const hashTable2 = {};\n  const counter = {};\n  const counter2 = {};\n  for (let i = 0; i < nums.length; i++) {\n    counter[nums[i]] = counter[nums[i]] + 1 || 1;\n    if (counter[nums[i]] === k) {\n      result.push(nums[i]);\n      counter[nums[i]] = 0;\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    counter2[nums[i]] = counter2[nums[i]] + 1 || 1;\n    if (counter2[nums[i]] === k && nums[i]!== result[0]) {\n      hashTable2[nums[i]] = 1;\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    hashTable[nums[i]] = 1;\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (!hashTable2[nums[i]]) {\n      heapSize2++;\n    }\n  }\n  heapSize2 = Math.min(heapSize2, k);\n  for (let i = 0; i < nums.length; i++) {\n    if (!hashTable2[nums[i]]) {\n      heapSize2--;\n      heapSize++;\n      heap = new Heap(heapSize", "\n  const distinctNumbers = nums.filter(num => num!== k);\n  const heap = new MinHeap(distinctNumbers);\n  for (let i = 0; i < k - 1; i++) {\n    heap.insert(nums[i]);\n  }\n  for (let i = k; i < nums.length; i++) {\n    heap.remove() && heap.insert(nums[i]);\n  }\n  return heap.elements();\n}\n"]}
{"task_id": "MBJSP/32", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxPrimeFactors(n) {\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */", "entry_point": "maxPrimeFactors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar x0 = maxPrimeFactors(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = maxPrimeFactors(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = maxPrimeFactors(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      result = result || i;\n    }\n  }\n  return result;\n}\n", "\n  let result = 0;\n  let number = n;\n  if (n <= 1) {\n    result = 0;\n  }\n  while (n % 2 === 0) {\n    n /= 2;\n    result = Math.max(2, result);\n  }\n  for (let i = 3; i <= Math.sqrt(number); i += 2) {\n    while (n % i === 0) {\n      n /= i;\n      result = Math.max(i, result);\n    }\n  }\n  if (n > 2) {\n    result = Math.max(n, result);\n  }\n  return result;\n}\n", "\n  ", "\n  // Write your code here\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47];\n  const maxPrime = primes[0];\n  for (let i = 1; i < primes.length; i++) {\n    if (n % primes[i] === 0) {\n      if (primes[i] > maxPrime) {\n        maxPrime = primes[i];\n      }\n    }\n  }\n  return maxPrime;\n}\n", "\n  const num = n;\n  let result = num;\n  for (let i = num / 2; i >= 2; i--) {\n    if (num % i === 0 && isPrime(i)) {\n      result = i;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/33", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction decimalToBinary(n) {\n/**\n * * Write a JavaScript function to convert a decimal number to binary number.\n */", "entry_point": "decimalToBinary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = decimalToBinary(arg00);\nvar v0 = 1010;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar x1 = decimalToBinary(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = decimalToBinary(arg20);\nvar v2 = 10100;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const num = n;\n  let binaryNum = \"\";\n  while (num > 0) {\n    const remainder = num % 2;\n    binaryNum = remainder + binaryNum;\n    num = Math.floor(num / 2);\n  }\n  return binaryNum;\n}\n", "\n  let bin = \"\";\n  let rem;\n  while (n > 0) {\n    rem = n % 2;\n    n = Math.floor(n / 2);\n    bin = rem + bin;\n  }\n  return bin;\n}\n", "\n  const result = [];\n  for (let i = n; i >= 0; i--) {\n    result.unshift(i % 2);\n  }\n  return result.reverse();\n}\n", "\n  return n < 2? n : decimalToBinary(n / 2) + n % 2;\n}\n", "\n  if (n === 0) {\n    return 0;\n  }\n  const b = Math.floor(Math.log(n) / Math.log(2));\n  return n.toString(2).length === b + 1? b : decimalToBinary(n / Math.pow(2, b)) + b;\n}\n"]}
{"task_id": "MBJSP/34", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMissing(ar, n) {\n/**\n * * Write a JavaScript function to find the missing number in a sorted array.\n */", "entry_point": "findMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5];\nvar arg01 = 4;\nvar x0 = findMissing(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 4, 5];\nvar arg11 = 4;\nvar x1 = findMissing(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 5, 6, 7];\nvar arg21 = 5;\nvar x2 = findMissing(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedArr = ar.sort();\n  let i;\n  let arrLen = ar.length;\n  for (i = 0; i < arrLen; i++) {\n    if (sortedArr[i]!== i + 1) {\n      break;\n    }\n  }\n  return (i + 1) * n;\n}\n", "\n  const sortedArr = ar.slice().sort();\n  let missingElement = 0;\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] === sortedArr[sortedArr.length - 1]) {\n      missingElement = sortedArr[i];\n      break;\n    }\n  }\n  missingElement = missingElement + 1;\n  if (missingElement === n + 1) {\n    missingElement = 0;\n  }\n  return missingElement;\n}\n", "\n    let arr = [];\n    for (let i = 0; i < n; i++) {\n      arr.push(ar[i]);\n    }\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n      sum += arr[i];\n    }\n    let finalSum = n * (n + 1) / 2;\n    return finalSum - sum;\n}\n", "\n  const checkRange = n - 1;\n  const result = [];\n  for (let i = 0; i < ar.length; i++) {\n    if (i === checkRange) {\n      result.push(ar[i] + 1);\n    } else {\n      result.push(ar[i]);\n    }\n  }\n  return result;\n}\n", "\n    let start = 0;\n    let end = n - 1;\n    let diff = n - 1;\n    if (ar[end]!== (n + 1) && ar[start]!== 1) {\n        while (end - start > 1) {\n            let mid = start + (end - start) / 2;\n            if (ar[mid] === (n + 1)) {\n                diff = mid - start;\n                end = mid;\n            } else if (ar[mid] < (n + 1)) {\n                start = mid;\n            } else if (ar[mid] > (n + 1)) {\n                end = mid;\n            }\n        }\n    }\n    if (diff!== 0) {\n        return diff + 1;\n    } else {\n        return -1;\n    }\n}\n"]}
{"task_id": "MBJSP/35", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findRectNum(n) {\n/**\n * * Write a function to find the n-th rectangular number.\n */", "entry_point": "findRectNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = findRectNum(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = findRectNum(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = findRectNum(arg20);\nvar v2 = 42;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const d = Math.pow(10, n);\n  for (let i = 1; i <= d; i++) {\n    result.push((Math.pow(d, n) - Math.pow(i, n)) / (d - i));\n  }\n  return result;\n}\n", "\n  const nums = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      nums.push(i * j);\n    }\n  }\n  return nums.sort((a, b) => a - b).pop();\n}\n", "\n  return Math.pow(n + 1, 2);\n}\n", "\n  const numbers = [\n    1,\n    2,\n    4,\n    8,\n    16,\n    32,\n    64,\n    128,\n    256,\n    512,\n    1024,\n    2048,\n    4096,\n    8192,\n    16384,\n    32768,\n    65536,\n    131072,\n    262144,\n    524288,\n    1048576,\n    2097152,\n    4194304,\n    8388608,\n    16777216,\n    33554432,\n    67108864,\n    134217728,\n    268435456,\n    536870912,\n    1073741824,\n    2147483648,\n    4294967296,\n    8589934592,\n    17179869184,\n    34359738368,\n    68719476736,\n    137438953472,\n    274877906944,\n    549755813888,\n    1099511627776,\n    2199023255552,\n    4398046511104,\n    8796093022208,\n    17592186044416,\n    35184372088832,\n    70368744177664,\n    140737488355328,\n    281474976710640,\n    562949953421312,\n    1125899906842624,\n    2251799813685248,\n    4503599627370496,\n    9007199254740992,\n    18014398509481984,\n    36028797018963968,\n    7209009629440192,", "\n  // Write your code here\n  return n * (n + 1) / 2;\n}\n"]}
{"task_id": "MBJSP/36", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findNthDigit(p, q, n) {\n/**\n * * Write a JavaScript function to find the nth digit in the proper fraction of two given numbers.\n */", "entry_point": "findNthDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 1;\nvar x0 = findNthDigit(arg00, arg01, arg02);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 5;\nvar arg12 = 1;\nvar x1 = findNthDigit(arg10, arg11, arg12);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 6;\nvar arg22 = 5;\nvar x2 = findNthDigit(arg20, arg21, arg22);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (p * 10) + q - (p * q) - (((p + 1) * (q + 1)) / (10 * (p - (p * q)))) * 10;\n}\n", "\n  let num = p * q;\n  let digit = Math.floor(num / Math.pow(10, n)) + Math.floor(num % Math.pow(10, n) / q);\n  return digit;\n}\n", "\n  let x = Math.floor(Math.pow(10, p));\n  let y = Math.floor(Math.pow(10, q));\n  let count = 0;\n  let result = 0;\n  while (count < n) {\n    count++;\n    x = x + 1;\n    let a = x * y + 10 * y;\n    let b = (x - 1) * y + 10 * y;\n    let denom = Math.pow(10, q - 1);\n    let num = (a - b) / denom;\n    if (num < 10) {\n      result = num;\n    }\n  }\n  return result;\n}\n", "\n  let a = p * 10, b = q * 10, c = p * q, d = Math.floor(c / 10), e = c % 10, f = d + e * 10, g = Math.floor(f / 10), h = f % 10, i = Math.floor(a / 10), j = a % 10, k = Math.floor(b / 10), l = b % 10;\n  let m = Math.floor((i * l + j * k + l * g) / 10), nthDigit = m + n;\n  return nthDigit;\n}\n", "\n  const num = Math.pow(10, q - 1) + (p - 1);\n  const rem = Math.pow(10, q - 1) + (n % num);\n  const numOfDigits = q + (n / num);\n  return rem % 10;\n}\nconst operators = ['+', '-', '*', '/'];\n"]}
{"task_id": "MBJSP/37", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sortMixedList(mixedlist) {\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */", "entry_point": "sortMixedList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x0 = sortMixedList(arg00);\nvar v0 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x1 = sortMixedList(arg10);\nvar v1 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x2 = sortMixedList(arg20);\nvar v2 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const mixedArray = mixedlist.map(numstr => numstr.toString());\n  const sortedMixedArray = mixedArray.sort();\n  return sortedMixedArray;\n}\n", "\n  return mixedlist.sort((a, b) => a.length - b.length);\n}\n", "\n  const sortedNumbers = mixedlist.sort((a, b) => a - b);\n  const sortedStrings = sortedNumbers.map(num => {\n    let str = '';\n    if (typeof num ==='string') {\n      str = num;\n    }\n    return str;\n  });\n  return sortedStrings;\n}\n", "\n  const str = mixedlist.map(x => x.str);\n  const integers = mixedlist.map(x => x.num);\n  const sortedStr = str.sort();\n  const sortedIntegers = integers.sort();\n  return sortedIntegers.concat(sortedStr);\n}\n", "\n  const mixedlist1 = mixedlist;\n  mixedlist1.sort((a, b) => {\n    if (a instanceof String && b instanceof String) {\n      return a.toLowerCase().localeCompare(b.toLowerCase());\n    }\n    if (a instanceof String) {\n      return -1;\n    }\n    if (b instanceof String) {\n      return 1;\n    }\n    if (a instanceof Number && b instanceof Number) {\n      return a - b;\n    }\n    return 0;\n  });\n  return mixedlist1;\n}\n"]}
{"task_id": "MBJSP/38", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction divEvenOdd(list1) {\n/**\n * * Write a function to find the division of first even and odd number of a given list.\n */", "entry_point": "divEvenOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 7, 4, 1, 6, 8];\nvar x0 = divEvenOdd(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x1 = divEvenOdd(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 5, 7, 9, 10];\nvar x2 = divEvenOdd(arg20);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const result = [];\n  const evenNum = list1.filter(num => num % 2 === 0);\n  const oddNum = list1.filter(num => num % 2!== 0);\n  const sum = evenNum.reduce((a, b) => a + b, 0);\n  return result;\n}\n", "\n  const even1 = list1.filter(el => parseInt(el) % 2 === 0);\n  const odd1 = list1.filter(el => parseInt(el) % 2!== 0);\n  return [even1, odd1];\n}\n", "\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 === 0) {\n      evenCount = evenCount + 1;\n    } else if (list1[i] % 2 === 1) {\n      oddCount = oddCount + 1;\n    }\n  }\n  return evenCount / oddCount;\n}\n", "\n  const odds = list1.filter(x => x % 2 === 1);\n  const evens = list1.filter(x => x % 2 === 0);\n  const oddsNums = divEvenOdd(odds);\n  const evensNums = divEvenOdd(evens);\n  return [evensNums, oddsNums];\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] % 2 === 0) {\n      result.push(list1[i] / 2);\n    } else if (list1[i] % 2!== 0) {\n      result.push(list1[i] / 2 + 1);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/39", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction rearangeString(s) {\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */", "entry_point": "rearangeString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab\";\nvar x0 = rearangeString(arg00);\nvar v0 = \"aba\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aabb\";\nvar x1 = rearangeString(arg10);\nvar v1 = \"abab\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abccdd\";\nvar x2 = rearangeString(arg20);\nvar v2 = \"cdabcd\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < s.length - 1; i++) {\n    let char1 = s[i];\n    let char2 = s[i + 1];\n    if (char1 === char2) {\n      result.push(char2 + char1);\n    }\n  }\n  return result.length === 0;\n}\n", "\n  // Write your code here\n  return s;\n}\nconst orders = [\"yxz\", \"xyz\", \"zxy\"];\nconst products = [\"abcd\", \"xyz\", \"efgh\"];\nconst listOfOrders = orders.map(order => {\n  const newTup = multiplyElements(order.split(\"\"));\n  return newTup.map(el => el.split(\"\"));\n});\n// tslint:disable-next-line:max-line-length\n", "\n  // Write your code here\n  const input = s.split(\"\");\n  let m = input.shift();\n  let n = input.shift();\n  if (input.length % 2 === 0) {\n    return false;\n  }\n  const result = input.reduce((a, b) => a + b);\n  return m === n && result === (s.length - 2);\n}\nconst b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst c = [1, 2, 3, 4, 5];\n", "\n    const result = [];\n    for (let i = 0; i < s.length - 1; i++) {\n        const prev = s[i];\n        const next = s[i + 1];\n        if ((prev + next)!== (s[i + 2])) {\n            result.push(prev + next + s[i + 2]);\n        }\n    }\n    return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < s.length - 1; i++) {\n    let pair = '' + s[i] + s[i + 1];\n    if (pair.length === 2 && pair.charAt(0)!== pair.charAt(1)) {\n      result.push(pair);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/40", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction freqElement(nums) {\n/**\n * * Write a function to find frequency of the elements in a given list of lists using collections module.\n */", "entry_point": "freqElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar x0 = freqElement(arg00);\nvar v0 = {\"2\":3,\"1\":2,\"5\":2,\"3\":1,\"4\":1,\"6\":1,\"7\":1,\"9\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nvar x1 = freqElement(arg10);\nvar v1 = {\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]];\nvar x2 = freqElement(arg20);\nvar v2 = {\"30\":3,\"80\":2,\"90\":2,\"15\":1,\"20\":1,\"40\":1,\"100\":1,\"110\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const dictionary = {};\n  nums.forEach(numList => {\n    numList.forEach(element => {\n      if (dictionary[element] === undefined) {\n        dictionary[element] = 1;\n      } else {\n        dictionary[element]++;\n      }\n    });\n  });\n  return dictionary;\n}\n\n// -----------------------------------------------------------------------------------------------------------------------------------------\n// Program to find the maximum element in a list of numbers\n\n// Input: [8, 1, 2, 3, 4, 5, 6, 7, 8]\n// Output: 8\n// -----------------------------------------------------------------------------------------------------------------------------------------\n\n// Input: [8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 9]\n// Output: 9\n// -----------------------------------------------------------------------------------------------------------------------------------------\n\n// Input: [4, 4, 4, 4]\n// Output: 4\n// -----------------------------------------------------------------------------------------------------------------------------------------\n\n// Input: [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4", "\n  const numbers = nums.map(num => parseInt(num, 10));\n  const result = {};\n  const counter = {};\n  for (let i = 0; i < numbers.length; i++) {\n    counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n    if (counter[numbers[i]] === numbers.length - 1) {\n      result[numbers[i]] = counter[numbers[i]];\n      counter[numbers[i]] = 0;\n    }\n  }\n  return result;\n}\n", "\n    // Write your code here\n    const elements = [];\n    for (let i = 0; i < nums.length; i++) {\n        const element = {};\n        for (let j = 0; j < nums[i].length; j++) {\n            element[nums[i][j]] = element[nums[i][j]] + 1 || 1;\n            if (element[nums[i][j]] === 1) {\n                element[nums[i][j]] = nums[i][j];\n            }\n        }\n        elements.push(element);\n    }\n    return elements;\n}\n", "\n  const numbers = nums.map(num => parseInt(num, 10));\n  const result = numbers.reduce((res, num) => {\n    const counter = {};\n    counter[num] = counter[num] + 1 || 1;\n    return Object.assign(res, counter);\n  }, {});\n  return result;\n}\n", "\n  const numsArr = nums.map(l => l);\n  const result = [];\n  for (let i = 0; i < numsArr.length; i++) {\n    const numsArrFrequency = new Set(numsArr[i].map(num => numsArr.count(num)));\n    result.push(numsArrFrequency);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/41", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction filterEvennumbers(nums) {\n/**\n * * Write a function to filter even numbers using lambda function.\n */", "entry_point": "filterEvennumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = filterEvennumbers(arg00);\nvar v0 = [2, 4, 6, 8, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 45, 67, 84, 93];\nvar x1 = filterEvennumbers(arg10);\nvar v1 = [10, 20, 84];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 7, 9, 8, 6, 4, 3];\nvar x2 = filterEvennumbers(arg20);\nvar v2 = [8, 6, 4];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.filter(num => num % 2 === 0);\n}\n", "\n  return nums.filter(number => number % 2 === 0);\n}\n", "\n  let filter = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      filter.push(nums[i]);\n    }\n  }\n  return filter;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n}\n", "\n  const evens = nums.filter(num => num % 2 === 0);\n  return evens;\n}\n"]}
{"task_id": "MBJSP/42", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of repeated elements in a given array.\n */", "entry_point": "findSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 1, 4, 5, 6];\nvar arg01 = 8;\nvar x0 = findSum(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 1];\nvar arg11 = 5;\nvar x1 = findSum(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2];\nvar arg21 = 3;\nvar x2 = findSum(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let res = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    res += arr[i];\n  }\n  return res;\n}\n", "\n  // Write your code here\n  const counter = {};\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    counter[arr[i]] = counter[arr[i]] + 1 || 1;\n    if (counter[arr[i]] === n) {\n      result += arr[i];\n      counter[arr[i]] = 0;\n    }\n  }\n  return result;\n}\n", "\n    const arrSum = arr.reduce((a, b) => a + b, 0);\n    const arrMult = arr.reduce((a, b) => a * b, 1);\n    return arrSum * n / arrMult;\n}\n", "\n  // Write your code here\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      sum += arr[i] === arr[j]? arr[i] : 0;\n    }\n  }\n  return sum;\n}\nconst nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n", "\n  const counter = {};\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    counter[arr[i]] = counter[arr[i]] + 1 || 1;\n    if (counter[arr[i]] === n) {\n      sum += arr[i];\n      counter[arr[i]] = 0;\n    }\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/43", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction textMatch(text) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */", "entry_point": "textMatch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab_cbbbc\";\nvar x0 = textMatch(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aab_Abbbc\";\nvar x1 = textMatch(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Aaab_abbbc\";\nvar x2 = textMatch(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const regex = /[a-z]_+[a-z]/g;\n  let result = [];\n  let found = false;\n  for (let i = 0; i < text.length; i++) {\n    if (regex.test(text[i])) {\n      found = true;\n      result.push(text[i]);\n    } else if (found === true) {\n      found = false;\n      result.push(text[i]);\n    }\n  }\n  return result;\n}\n", "\n  let re = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (i === 0 || (i > 0 && text[i]!== text[i - 1])) {\n      re = re + text[i];\n    } else {\n      re = re + \"\\\\\" + text[i];\n    }\n  }\n  re = re + \"\\\\_\";\n  const match = /(^|\\W)(\"+)([^\"\\w]+)(\"+)($|\\W)/g;\n  return match.test(text)? text : null;\n}\n", "\n  let result = [];\n  const tt = text.split('');\n  for (let i = 0; i < tt.length - 1; i++) {\n    let subResult = [];\n    if (tt[i + 1].length === 1) {\n      subResult.push(tt[i] + tt[i + 1]);\n      subResult.push(tt[i] + '_' + tt[i + 1]);\n      result.push(subResult);\n    }\n  }\n  return result;\n}\n\n", "\n  const text1 = text.replace(/[a-z]/g, \"-\");\n  const re = /[^a-z]/g;\n  const text2 = text1.replace(re, \"\");\n  return text2.length === text.length;\n}\n", "\n  return text.replace(/([a-z])\\1+/g, \"$1_\").split(\"_\");\n}\n"]}
{"task_id": "MBJSP/44", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction textMatchString(text) {\n/**\n * * Write a function that matches a word at the beginning of a string.\n */", "entry_point": "textMatchString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \" python\";\nvar x0 = textMatchString(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = textMatchString(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang\";\nvar x2 = textMatchString(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const testString = text.split(\" \")[0];\n  const result = testString.match(/^[A-Z]+/g);\n  return result.length > 0;\n}\n", "\n  const text1 = text.toLowerCase();\n  return text1.indexOf(\"hello\") === 0;\n}\n", "\n  const patt = /^\\S+/;\n  return patt.test(text);\n}\n", "\n  const result = [];\n  for (let i = 0; i < text.length; i++) {\n    if (text.substr(i, 3) === \"the\") {\n      result.push(text.substr(i + 3));\n    }\n  }\n  return result;\n}\n", "\n    const res = [];\n    const textArr = text.split(' ');\n    for (let i = 0; i < textArr.length; i++) {\n        if (textArr[i].charAt(0) === '@') {\n            res.push(textArr[i].substring(1));\n        }\n    }\n    return res;\n}\n"]}
{"task_id": "MBJSP/45", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getGcd(l) {\n/**\n * * Write a function to find the gcd of the given array elements.\n */", "entry_point": "getGcd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, 6, 8, 16];\nvar x0 = getGcd(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = getGcd(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 6, 8];\nvar x2 = getGcd(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const l = l || [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n    let min = Math.min(...l);\n    const gcd = Math.floor(min);\n    let k = 1;\n    while (l[k] > min) {\n        if (l[k] % gcd === 0) {\n            min = Math.min(min, l[k]);\n        }\n        k++;\n    }\n    return gcd;\n}\n", "\n  if (!l) {\n    return 0;\n  }\n  const result = [];\n  let resultNum = 0;\n  for (let i = 0; i < l.length; i++) {\n    resultNum = l[i] % resultNum;\n    result.push(resultNum);\n  }\n  return gcd(result);\n}\n", "\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (result === 0) {\n      result = l[i];\n    } else {\n      result = gcd(result, l[i]);\n    }\n  }\n  return result;\n}\n\n/*\n-------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------\n*/\n\n\n\nconst sortNumericStrings = (numsstr) => {\n  const numbers = numsstr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n};\nconst multiplyElements = (testtup) => {\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n};\nconst getGcd = (l) => {\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (result === 0) {\n      result = l[i];\n    } else {\n      result = gcd(result, l[i]);\n    }\n  }\n  return result;\n};", "\n    let currentGcd = l[0];\n    for (let i = 1; i < l.length; i++) {\n        currentGcd = gcd(l[i], currentGcd);\n    }\n    return currentGcd;\n}\n", "\n    // Write your code here\n    let remainder = l[0];\n    let temp = l[0];\n    for (let i = 1; i < l.length; i++) {\n        remainder = l[i] % temp;\n        if (remainder === 0) {\n            temp = l[i];\n        } else {\n            l[i] = temp;\n        }\n    }\n    return temp;\n}\n"]}
{"task_id": "MBJSP/46", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction testDistinct(data) {\n/**\n * * Write a JavaScript function to determine whether all the numbers are different from each other are not.\n */", "entry_point": "testDistinct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, 9];\nvar x0 = testDistinct(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 5, 5, 7, 9];\nvar x1 = testDistinct(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar x2 = testDistinct(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let distinct = true;\n  for (let i = 0; i < data.length - 1; i++) {\n    if (data[i] === data[i + 1]) {\n      distinct = false;\n    }\n  }\n  return distinct;\n}\n", "\n  const arr = data;\n  let alldistinct = true;\n  const length = arr.length;\n  for (let i = 0; i < length - 1; i++) {\n    if (arr[i]!= arr[i + 1]) {\n      alldistinct = false;\n      break;\n    }\n  }\n  return alldistinct;\n}\n", "\n  const arr = data.map(i => Number(i));\n  let alldifferent = arr.every(elem => elem === arr[elem - 1]) || arr.every(elem => elem === arr[elem + 1]);\n  return alldifferent;\n}\n", "\n  // Write your code here\n  const result = true;\n  for (let i = 0; i < data.length; i++) {\n    const number = data[i];\n    for (let j = i + 1; j < data.length; j++) {\n      const number2 = data[j];\n      if (number == number2) {\n        result = false;\n      }\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < data.length - 1; i++) {\n    for (let j = i + 1; j < data.length; j++) {\n      if (data[i] === data[j]) {\n        count++;\n      }\n    }\n  }\n  return count === data.length;\n}\n"]}
{"task_id": "MBJSP/47", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction computeLastDigit(a, b) {\n/**\n * * Write a JavaScript function to find the last digit when factorial of a divides factorial of b.\n */", "entry_point": "computeLastDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = computeLastDigit(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 8;\nvar x1 = computeLastDigit(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar x2 = computeLastDigit(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = (a * b) % 10;\n  return result;\n}\n", "\n  const aFact = factorial(a);\n  const bFact = factorial(b);\n  const divided = aFact / bFact;\n  return divided % 10;\n}\n", "\n  // Write your code here\n  const m = a % b;\n  return m < 10? m : computeLastDigit(m, b);\n}\n", "\n  const gcd = Math.gcd(a, b);\n  const num1 = a / gcd;\n  const num2 = b / gcd;\n  return Math.floor(Math.log10(num1) + Math.log10(num2));\n}\n", "\n  return a % b;\n}\n"]}
{"task_id": "MBJSP/48", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction oddBitSetNumber(n) {\n/**\n * * Write a JavaScript function to set all odd bits of a given number.\n */", "entry_point": "oddBitSetNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = oddBitSetNumber(arg00);\nvar v0 = 15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = oddBitSetNumber(arg10);\nvar v1 = 21;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = oddBitSetNumber(arg20);\nvar v2 = 31;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let set = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i & 1) === 1) {\n      set |= i;\n    }\n  }\n  return set;\n}\n", "\n  let result = 0;\n  for (let i = 1; i <= n; i += 2) {\n    result |= i;\n  }\n  return result;\n}\n", "\n  return parseInt(n, 2) | 0;\n}\n", "\n  let result = 0;\n  while (n) {\n    const temp = n & -n;\n    result |= temp;\n    n = n ^ temp;\n  }\n  return result;\n}\n", "\n    return n & ~(n - 1);\n}\n"]}
{"task_id": "MBJSP/49", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction specifiedElement(nums, n) {\n/**\n * * Write a function to extract every first or specified element from a given two-dimensional list.\n */", "entry_point": "specifiedElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg01 = 0;\nvar x0 = specifiedElement(arg00, arg01);\nvar v0 = [1, 4, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg11 = 2;\nvar x1 = specifiedElement(arg10, arg11);\nvar v1 = [3, 6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg21 = 1;\nvar x2 = specifiedElement(arg20, arg21);\nvar v2 = [2, 5, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const matrix = [];\n  for (let i = 0; i < nums.length; i++) {\n    const row = [];\n    for (let j = 0; j < nums[i].length; j++) {\n      row.push(nums[i][j]);\n    }\n    matrix.push(row);\n  }\n  const result = [];\n  for (let i = 0; i < matrix.length; i++) {\n    if (i === 0 || i === n) {\n      result.push(matrix[i]);\n    } else {\n      result.push(matrix[i][0]);\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    result.push(nums[i][0] || nums[0]);\n  }\n  return result;\n}\n", "\n  // Write your code here\n  return nums;\n}\n", "\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < nums.length; i++) {\n        counter[nums[i][0]] = counter[nums[i][0]] + 1 || 1;\n        if (counter[nums[i][0]] === n) {\n            result.push([nums[i][0], nums[i][1]]);\n            counter[nums[i][0]] = 0;\n        }\n    }\n    return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums[i].length; j++) {\n      result.push(nums[i][j]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/50", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minLengthList(inputlist) {\n/**\n * * Write a function to find the list with minimum length using lambda function.\n */", "entry_point": "minLengthList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = minLengthList(arg00);\nvar v0 = [1, [0]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]];\nvar x1 = minLengthList(arg10);\nvar v1 = [1, [1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]];\nvar x2 = minLengthList(arg20);\nvar v2 = [2, [1, 2]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const minLengthList = inputlist.reduce((prev, curr) => (curr.length < prev.length? curr : prev), inputlist[0]);\n  return minLengthList.length;\n}\n", "\n  return [...inputlist].sort((a, b) => b.length - a.length);\n}\n", "\n  const minlen = inputlist.map(list => list.length).reduce((a, b) => a > b? a : b);\n  return inputlist.filter(list => list.length === minlen);\n}\n", "\n  let minlengthlist = inputlist;\n  minlengthlist = minlengthlist.filter(input => input.length > 0);\n  return minlengthlist.reduce((a, b) => a.length < b.length? a : b);\n}\n", "\n    const result = [];\n    for (let i = 0; i < inputList.length; i++) {\n        if (inputList.length >= result.length) {\n            result = inputList;\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/51", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkEquilateral(x, y, z) {\n/**\n * * Write a function to print check if the triangle is equilateral or not.\n */", "entry_point": "checkEquilateral", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 8;\nvar arg02 = 12;\nvar x0 = checkEquilateral(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 6;\nvar arg12 = 12;\nvar x1 = checkEquilateral(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 6;\nvar arg22 = 6;\nvar x2 = checkEquilateral(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (x!== y || x!== z || y!== z) {\n    return 'check not equilateral';\n  }\n  return 'check equilateral';\n}\n", "\n  if (x + y + z > x + z + y) {\n    console.log('Is Equilateral');\n  } else {\n    console.log('Is Isosceles');\n  }\n}\n", "\n  if (x == y && y == z) {\n    console.log(\"Check\");\n  } else {\n    console.log(\"Not equilateral\");\n  }\n}\n", "\n  const result = [];\n  if (x === y && y === z) {\n    result.push('Equilateral triangle');\n  } else {\n    result.push('Not equilateral triangle');\n  }\n  return result;\n}\n", "\n    console.log('Check if the triangle is equilateral or not:', x * y * z === (x + y) * (x + z) * (y + z));\n}\n"]}
{"task_id": "MBJSP/52", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction parallelogramArea(b, h) {\n/**\n * * Write a function to caluclate area of a parallelogram.\n */", "entry_point": "parallelogramArea", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = parallelogramArea(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 20;\nvar x1 = parallelogramArea(arg10, arg11);\nvar v1 = 300;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar arg21 = 9;\nvar x2 = parallelogramArea(arg20, arg21);\nvar v2 = 72;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const area = b * h;\n  return area;\n}\n", "\n  return b * h;\n}\n", "\n  const result = (b * h) / 2;\n  return result;\n}\n", "\n  const area = Math.abs(b * h);\n  return area;\n}\n", "\n  return (b * h) / 2;\n}\n"]}
{"task_id": "MBJSP/53", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkEquality(str) {\n/**\n * * Write a JavaScript function to check whether the first and last characters of a given string are equal or not.\n */", "entry_point": "checkEquality", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcda\";\nvar x0 = checkEquality(arg00);\nvar v0 = \"Equal\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ab\";\nvar x1 = checkEquality(arg10);\nvar v1 = \"Not Equal\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"mad\";\nvar x2 = checkEquality(arg20);\nvar v2 = \"Not Equal\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let str1 = str.substr(0, 1);\n  let str2 = str.substr(str.length - 1);\n  return str1 === str2;\n}\n", "\n  let first = str[0];\n  let last = str[str.length - 1];\n  if (first === last) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  const firstChar = str.charAt(0);\n  const lastChar = str.charAt(str.length - 1);\n  return firstChar === lastChar;\n}\n", "\n  return str.substring(0, 1) === str.substring(str.length - 1);\n}\n// You are given a string which contains only lowercase alphabets. You have to count the number of substrings containing three or more adjacent alphabets and return the count of all such substrings.\n// For example:\n// Input: \"abc\"\n// Output: 3\n// Explanation: There are three substrings containing three adjacent alphabets: \"\", \"a\", \"bc\".\n", "\n  return str === str.substring(0, 1) + str.substring(str.length - 1, str.length);\n}\n"]}
{"task_id": "MBJSP/54", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countingSort(mylist) {\n/**\n * * Write a function to sort the given array by using counting sort.\n */", "entry_point": "countingSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 23, 4, 5, 6, 7, 8];\nvar x0 = countingSort(arg00);\nvar v0 = [1, 4, 5, 6, 7, 8, 23];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 9, 28, 33, 69, 45];\nvar x1 = countingSort(arg10);\nvar v1 = [9, 12, 28, 33, 45, 69];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 4, 14, 3, 2, 1];\nvar x2 = countingSort(arg20);\nvar v2 = [1, 2, 3, 4, 8, 14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const list = [];\n    for (let i = 0; i < mylist.length; i++) {\n        list[mylist[i]] = list[mylist[i]] + 1 || 1;\n    }\n    let min = mylist[0];\n    for (let j = min; j < list.length; j++) {\n        list[j] = list[j] + min;\n    }\n    let result = [];\n    for (let k = 0; k < list.length; k++) {\n        if (list[k] > 0) {\n            result.push(k);\n        }\n    }\n    return result;\n}\n", "\n    let result = [];\n    let max = mylist[mylist.length - 1];\n    for (let i = 0; i < mylist.length; i++) {\n        let num = mylist[i];\n        let count = Math.floor(max / num);\n        result.push(count);\n    }\n    result.push(max);\n    result = result.sort((a, b) => a - b);\n    const count = result.reduce((acc, c) => c + acc, 0);\n    const arr = [];\n    for (let i = 0; i < count; i++) {\n        for (let j = 0; j < mylist.length; j++) {\n            let num = mylist[j];\n            let count = Math.floor(max / num);\n            let div = Math.floor(max / num);\n            if (i < count) {\n                arr.push(num);\n            }\n        }\n    }\n    arr.reverse();\n    return arr;\n}\n//   let result = [];\n//   for (let i = 0; i < testTup.length - 1; i++) {\n//     result.push(testTup[i] * testTup[i + 1]);\n//   }\n//   return result;\n}\n", "\n  const result = [];\n  const counts = [];\n  for (let i = 0; i < mylist.length; i++) {\n    counts[mylist[i]] = counts[mylist[i]] + 1 || 1;\n  }\n  for (let i = 0; i < counts.length; i++) {\n    if (counts[i] > 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  const min = Math.min(mylist);\n  const max = Math.max(mylist);\n  const array = [];\n  for (let i = min; i <= max; i++) {\n    array.push(0);\n  }\n  for (let i = 0; i < mylist.length; i++) {\n    array[mylist[i]] = array[mylist[i]] + 1;\n  }\n  const sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array[i]; j++) {\n      sortedArray.push(i);\n    }\n  }\n  return sortedArray;\n}\n", "\n  const result = [];\n  for (let i = 0; i < mylist.length; i++) {\n    let count = 0;\n    for (let j = 0; j < mylist.length; j++) {\n      if (mylist[i] === mylist[j]) {\n        count++;\n      }\n    }\n    result.push(mylist[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/55", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction tnGp(a, n, r) {\n/**\n * * Write a function to find t-nth term of geometric series.\n */", "entry_point": "tnGp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = tnGp(arg00, arg01, arg02);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 5;\nvar arg12 = 4;\nvar x1 = tnGp(arg10, arg11, arg12);\nvar v1 = 256;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 6;\nvar arg22 = 3;\nvar x2 = tnGp(arg20, arg21, arg22);\nvar v2 = 486;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += a;\n    }\n    return sum * r / n;\n}\n", "\n  return a * Math.pow(r, n);\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(a);\n  }\n  return result;\n}\n", "\n  let result = 1;\n  for (let i = 0; i < n; i++) {\n    result = result * a;\n  }\n  return result;\n}\n", "\n  let t = 1;\n  for (let i = 0; i < n; i++) {\n    t = a * Math.pow(t, r);\n  }\n  return t;\n}\n"]}
{"task_id": "MBJSP/56", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction check(n) {\n/**\n * * Write a JavaScript function to check if a given number is one less than twice its reverse.\n */", "entry_point": "check", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 70;\nvar x0 = check(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 23;\nvar x1 = check(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 73;\nvar x2 = check(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n === n - 1 || n === n - 2;\n}\n", "\n  for (let i = n; i > n / 2; i--) {\n    if (i === n / 2 + 1) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  const reverse = Math.round(n * 2);\n  const result = n < reverse;\n  return result;\n}\n", "\n  return n >= 1 && n <= n * 2 && n!= 0 && n % 2 === 0;\n}\n", "\n  let r = n;\n  let result = false;\n  while (r > 0) {\n    let last = r % 10;\n    if (last === 1 || last === 2 || last === 3 || last === 4 || last === 5 || last === 6 || last === 7 || last === 8 || last === 9) {\n      result = true;\n    }\n    r /= 10;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/57", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMaxNum(arr, n) {\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */", "entry_point": "findMaxNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = 3;\nvar x0 = findMaxNum(arg00, arg01);\nvar v0 = 321;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6, 1];\nvar arg11 = 4;\nvar x1 = findMaxNum(arg10, arg11);\nvar v1 = 6541;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 9];\nvar arg21 = 4;\nvar x2 = findMaxNum(arg20, arg21);\nvar v2 = 9321;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  const list = {};\n  arr.forEach(num => {\n    list[num] = list[num] + 1 || 1;\n    if (list[num] === n) {\n      result = Math.max(result, num);\n      list[num] = 0;\n    }\n  });\n  return result;\n}\n", "\n    // Write your code here\n    let num = [];\n    for (let i = 0; i < arr.length; i++) {\n        num.push(arr[i]);\n    }\n    const max = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (num[i] + i >= n) {\n            max.push(num[i] + i);\n        }\n    }\n    return max;\n}\n", "\n  const largestNum = arr.map(n => parseInt(n, 10)).reduce((a, b) => a * b);\n  return largestNum > n? largestNum : n;\n}\n", "\n  const result = {};\n  for (let i = 0; i < n; i++) {\n    result[i] = arr[i];\n  }\n  return result;\n}\n", "\n  const result = [];\n  let numStr = arr.map(a => String(a)).join('');\n  let maxNum = parseInt(numStr, 10);\n  const digits = numStr.split('');\n  let maxLength = Math.max(...digits.map(num => Number(num).toString().length));\n  for (let i = 0; i < n; i++) {\n    let temp = [];\n    for (let j = 0; j < digits.length; j++) {\n      let num = digits[j];\n      let currentLength = digits[j].toString().length;\n      if (currentLength === maxLength && num <= maxNum) {\n        temp.push(num);\n      }\n    }\n    maxNum = maxNum * temp.reduce((a, b) => a + b, 0);\n  }\n  return maxNum;\n}\n"]}
{"task_id": "MBJSP/58", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction oppositeSigns(x, y) {\n/**\n * * Write a JavaScript function to check whether the given two integers have opposite sign or not.\n */", "entry_point": "oppositeSigns", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = -2;\nvar x0 = oppositeSigns(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar x1 = oppositeSigns(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = -10;\nvar arg21 = -10;\nvar x2 = oppositeSigns(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.abs(x) + Math.abs(y)!== Math.abs(x - y);\n}\n", "\n  return Math.sign(x) === Math.sign(y);\n}\n", "\n  return (x < 0 && y > 0) || (x > 0 && y < 0);\n}\n", "\n  return Math.sign(x)!== Math.sign(y);\n}\n", "\n  const result = Math.abs(x) === Math.abs(y);\n  return result;\n}\nconst asd = [];\nasd.push(3);\nasd.push(5);\nasd.push(4);\nasd.push(2);\n"]}
{"task_id": "MBJSP/59", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isOctagonal(n) {\n/**\n * * Write a function to find the nth octagonal number.\n */", "entry_point": "isOctagonal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = isOctagonal(arg00);\nvar v0 = 65;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = isOctagonal(arg10);\nvar v1 = 280;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = isOctagonal(arg20);\nvar v2 = 645;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n < 1) {\n    return null;\n  }\n  const octagonNumbers = [];\n  for (let i = 1; i <= n; i++) {\n    octagonNumbers.push(((i * (i + 1)) / 2) - (i - 1));\n  }\n  return octagonNumbers[n - 1];\n}\n", "\n  let result = 0;\n  while (n--) {\n    result = (n * (3 * n - 1)) + result;\n  }\n  return result;\n}\n", "\n  const x = Math.sqrt(n * (n + 1) / 2);\n  return x.toFixed(0);\n}\n", "\n  return (n * (2 * n - 1)) || 1;\n}\n", "\n  let result = 0;\n  for (let i = 0; i <= n; i++) {\n    result += Math.pow((i * (i + 1)), 2);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/60", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxLenSub(arr, n) {\n/**\n * * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n */", "entry_point": "maxLenSub", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 6, 3, 7, 6, 5, 8];\nvar arg01 = 8;\nvar x0 = maxLenSub(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-2, -1, 5, -1, 4, 0, 3];\nvar arg11 = 7;\nvar x1 = maxLenSub(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 11, 13, 15, 18];\nvar arg21 = 5;\nvar x2 = maxLenSub(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  let maxLength = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length - 1; j++) {\n      if (arr[j + 1] - arr[j] > n) {\n        result.push(arr[j]);\n        result.push(arr[j + 1]);\n        if (result.length > maxLength) {\n          maxLength = result.length;\n        }\n        result = [];\n      }\n    }\n  }\n  return maxLength;\n}\n", "\n  let max = 0;\n  let start = 0;\n  let end = 0;\n  let subTup = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] - arr[i + 1] > max) {\n      max = arr[i] - arr[i + 1];\n      start = i;\n      end = i + 1;\n      subTup = [arr[i], arr[i + 1]];\n    }\n  }\n  const result = [start, end].map(num => arr.slice(num, num + 1));\n  return result;\n}\n", "\n  const subArr = arr.slice(n);\n  const result = subArr.reduce((max, num) => {\n    return max + num;\n  }, 0);\n  return result;\n}\nconst testTup = [2, 3, 4, 5, 6, 7, 8];\n", "\n  const result = [];\n  let count = 0;\n  const m = n - 1;\n  for (let i = 0; i < arr.length - 1; i++) {\n    count += arr[i] - arr[i + 1];\n  }\n  if (count === m) {\n    result.push(n);\n  }\n  return result;\n}\n", "\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < arr.length; i++) {\n        counter[arr[i]] = counter[arr[i]] + 1 || 1;\n        if (counter[arr[i]] === n) {\n            result.push(arr[i].length);\n            counter[arr[i]] = 0;\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/61", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countSubstrings(s, n) {\n/**\n * * Write a JavaScript function to count number of substrings with the sum of digits equal to their length.\n */", "entry_point": "countSubstrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"112112\";\nvar arg01 = 6;\nvar x0 = countSubstrings(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"111\";\nvar arg11 = 3;\nvar x1 = countSubstrings(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"1101112\";\nvar arg21 = 7;\nvar x2 = countSubstrings(arg20, arg21);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sum = 0;\n  const result = [];\n  for (let i = 0; i < s.length - n + 1; i++) {\n    sum += s.substring(i, i + n).length;\n    if (sum === n) {\n      result.push(s.substring(i, i + n));\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < s.length - n + 1; i++) {\n    const subStr = s.substring(i, i + n);\n    result.push(subStr.length);\n  }\n  return result;\n}\n", "\n  const lengths = [];\n  let length;\n  for (let i = 0; i <= s.length; i++) {\n    length = 1;\n    while ((i + length) <= s.length) {\n      length++;\n    }\n    lengths.push(length);\n  }\n  const result = [];\n  for (let i = 0; i < lengths.length; i++) {\n    const startIndex = lengths[i] - 1;\n    const endIndex = lengths[i] - 1;\n    let sum = startIndex;\n    while (sum < endIndex) {\n      const currentLength = endIndex - sum;\n      result.push(s.substring(sum, sum + currentLength));\n      sum++;\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = 0; i <= s.length - n; i++) {\n    const substring = s.substring(i, i + n);\n    const sum = substring.split('').reduce((a, b) => a + b, 0);\n    if (sum === n) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const num = Number(char);\n    sum += num;\n  }\n  return Math.pow(sum, n);\n}\n"]}
{"task_id": "MBJSP/62", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction smallestNum(xs) {\n/**\n * * Write a JavaScript function to find smallest number in a list.\n */", "entry_point": "smallestNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 1, 45, 99];\nvar x0 = smallestNum(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = smallestNum(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [45, 46, 50, 60];\nvar x2 = smallestNum(arg20);\nvar v2 = 45;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const numbers = xs.map(num => parseFloat(num));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers[0];\n}\n", "\n  return xs.reduce((a, b) => a > b? b : a, Number.POSITIVE_INFINITY);\n}\n", "\n  // Write your code here\n  let minNum = xs[0];\n  for (let x of xs) {\n    if (x < minNum) {\n      minNum = x;\n    }\n  }\n  return minNum;\n}\n", "\n  const min = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (min > xs[i]) {\n      min = xs[i];\n    }\n  }\n  return min;\n}\n", "\n    let smallest = xs[0];\n    for (let i = 0; i < xs.length; i++) {\n        if (xs[i] < smallest) {\n            smallest = xs[i];\n        }\n    }\n    return smallest;\n}\n"]}
{"task_id": "MBJSP/63", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxDifference(testlist) {\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */", "entry_point": "maxDifference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 5], [1, 7], [10, 3], [1, 2]];\nvar x0 = maxDifference(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 6], [2, 17], [9, 13], [11, 12]];\nvar x1 = maxDifference(arg10);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[12, 35], [21, 27], [13, 23], [41, 22]];\nvar x2 = maxDifference(arg20);\nvar v2 = 23;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testList.length - 1; i++) {\n    for (let j = i + 1; j < testList.length; j++) {\n      result.push(Math.abs(testList[i] - testList[j]));\n    }\n  }\n  return Math.max(...result);\n}\n", "\n  const diff = {};\n  for (let i = 0; i < testList.length - 1; i++) {\n    diff[testList[i] + testList[i + 1]] = Math.abs(testList[i] - testList[i + 1]);\n  }\n  const result = [];\n  for (let i = 0; i < diff.length; i++) {\n    if (diff[i] > 0) {\n      result.push([i - diff[i] - 1, i + diff[i] + 1]);\n    }\n  }\n  return result;\n}\n", "\n  const max = testlist[0];\n  let diff = 0;\n  for (let i = 0; i < testlist.length - 1; i++) {\n    if (Math.abs(testlist[i] - testlist[i + 1]) > diff) {\n      diff = Math.abs(testlist[i] - testlist[i + 1]);\n      max = testlist[i] > testlist[i + 1]? testlist[i] : testlist[i + 1];\n    }\n  }\n  return max - diff;\n}\n", "\n  const results = [];\n  for (let i = 0; i < testList.length - 1; i++) {\n    for (let j = i + 1; j < testList.length; j++) {\n      results.push(Math.abs(testList[i] - testList[j]));\n    }\n  }\n  return results.reduce((a, b) => a > b? a : b);\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length - 1; i++) {\n    for (let j = i + 1; j < testlist.length; j++) {\n      if (Math.abs(testlist[i] - testlist[j]) > result[0]) {\n        result[0] = Math.abs(testlist[i] - testlist[j]);\n        result[1] = [testlist[i], testlist[j]];\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/64", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction subjectMarks(subjectmarks) {\n/**\n * * Write a function to sort a list of tuples using lambda.\n */", "entry_point": "subjectMarks", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]];\nvar x0 = subjectMarks(arg00);\nvar v0 = [[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]];\nvar x1 = subjectMarks(arg10);\nvar v1 = [[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]];\nvar x2 = subjectMarks(arg20);\nvar v2 = [[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const subjects = subjectmarks.map(subject => {\n    return {\n      subject: subject.subject,\n      marks: subject.marks\n    };\n  });\n  const sortedSubjects = subjects.sort(\n    (a, b) => a.marks - b.marks || (a.subject > b.subject? 1 : -1)\n  );\n  return sortedSubjects;\n}\n", "\n  const subjects = subjectmarks.map(subject => subject.subject);\n  const sortedSubjects = subjects.sort(subject => subject.toLowerCase());\n  return sortedSubjects;\n}\n", "\n  // Write your code here\n  const tuples = subjectmarks.map(subjectMark => [subjectMark[0], subjectMark[1]]);\n  tuples.sort((a, b) => a[0] - b[0]);\n  return tuples;\n}\n", "\n    return subjectmarks.sort((a, b) => a[1] - b[1]);\n}\n", "\n  const sortedSubjectMarks = subjectmarks.sort((a, b) => a[0] - b[0]);\n  return sortedSubjectMarks;\n}\n"]}
{"task_id": "MBJSP/65", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction recursiveListSum(datalist) {\n/**\n * * Write a function of recursion list sum.\n */", "entry_point": "recursiveListSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, [3, 4], [5, 6]];\nvar x0 = recursiveListSum(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 10, [15, 14], [19, 41]];\nvar x1 = recursiveListSum(arg10);\nvar v1 = 106;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, [30, 40], [50, 60]];\nvar x2 = recursiveListSum(arg20);\nvar v2 = 210;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (datalist === null || datalist.length === 0) {\n    return 0;\n  } else {\n    return datalist[0] + recursiveListSum(datalist.slice(1));\n  }\n}\n", "\n  return datalist.reduce((a, b) => a + b, 0);\n}\n", "\n  return recursiveListSum(datalist, 0);\n}\n", "\n  if (datalist.length === 0) {\n    return 0;\n  } else if (datalist.length === 1) {\n    return datalist[0];\n  } else {\n    const firstElement = datalist[0];\n    const restList = datalist.slice(1);\n    return firstElement + recursiveListSum(restList);\n  }\n}\n", "\n    return recursiveListSumHelper(datalist, 0);\n}\n"]}
{"task_id": "MBJSP/66", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction posCount(list) {\n/**\n * * Write a JavaScript function to count positive numbers in a list.\n */", "entry_point": "posCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, -2, 3, -4];\nvar x0 = posCount(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 4, 5, -1];\nvar x1 = posCount(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar x2 = posCount(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const count = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n//###########################################\n// Recursion\n//###########################################\n\n/**\n * * Write a ", "\n  // Write your code here\n  return list.filter((item) => item > 0).length;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > 0) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  const count = {};\n  for (let i = 0; i < list.length; i++) {\n    count[list[i]] = count[list[i]] + 1 || 1;\n    if (count[list[i]] === 1) {\n      return 1;\n    }\n  }\n  return 0;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > 0) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/67", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction bellNumber(n) {\n/**\n * * Write a function to find the number of ways to partition a set of bell numbers.\n */", "entry_point": "bellNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = bellNumber(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = bellNumber(arg10);\nvar v1 = 115975;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 56;\nvar x2 = bellNumber(arg20);\nvar v2 = 6775685320645824322581483068371419745979053216268760300;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let firstPartition = 1;\n  let secondPartition = 1;\n  let thirdPartition = 1;\n  for (let i = 0; i < n; i++) {\n    firstPartition *= i + 1;\n    secondPartition *= (n - i);\n    thirdPartition *= (n - i) * (n - i + 1) / 2;\n  }\n  return (firstPartition + secondPartition + thirdPartition) % (1e9 + 7);\n}\n", "\n  const nthBellNumber = {};\n  for (let i = 0; i <= n; i++) {\n    const tup = i.toString().split('0');\n    const arr = [];\n    arr.push(tup[0]);\n    let currTup = tup[0];\n    const result = [];\n    for (let j = 1; j < tup.length; j++) {\n      if (currTup === '') {\n        currTup = tup[j];\n      } else {\n        currTup = currTup + tup[j];\n      }\n      arr.push(currTup);\n    }\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === '1') {\n        result.push(1);\n      } else if (arr[k] === '2') {\n        result.push(2);\n      } else if (arr[k] === '3') {\n        result.push(3);\n      } else {\n        result.push(arr[k] - 1);\n        result.push(arr[k] - 2);\n        result.push(arr[k] - 3);\n      }\n    }\n    nthBellNumber[i] = result;\n  }\n  return nthBellNumber[n];\n}\n", "\n  const b = [...Array(n + 1)]\n  for (let i = 1; i < b.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (i == j) {\n        b[i] = 1;\n      } else if (i > j) {\n        b[i] = b[j] + b[i];\n      }\n    }\n  }\n  return b[n];\n}\n", "\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const result = [];\n  let counter = 0;\n  const index = arr.length - 1;\n  while (counter < n) {\n    let old = arr[index];\n    arr[index] = arr[index] + arr[index - 1];\n    counter++;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > old) {\n      arr.push(arr[i]);\n      counter = 0;\n      while (counter < n) {\n        let old = arr[index];\n        arr[index] = arr[index] + arr[index - 1];\n        counter++;\n      }\n    }\n    if (arr[i] == old) {\n      let old = arr[index];\n      arr[index] = arr[index] + arr[index - 1];\n      counter = 0;\n      while (counter < n) {\n        let old = arr[index];\n        arr[index] = arr[index] + arr[index - 1];\n        counter++;\n      }\n    }\n    arr[i] = arr[i] - old;\n    if (arr[i] === old) {\n      arr[i] = arr[index];\n      arr[index] = old;\n      counter = 0;\n      while (counter < n) {\n        arr[index] = arr[index] + arr[index - 1];\n        counter++;\n      }\n    }\n    arr[i] = arr[i] + old;\n    if (arr[i] === old) {\n      ", "\n  const result = [];\n  const tail = [];\n  for (let i = 0; i < n; i++) {\n    tail.push(1);\n  }\n  while (tail.length) {\n    const el = tail.pop();\n    if (tail.length > 0) {\n      tail.unshift(el + tail[tail.length - 1]);\n    }\n    result.push(el);\n  }\n  return result.sort((a, b) => b - a).join('');\n}\n"]}
{"task_id": "MBJSP/68", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isMonotonic(a) {\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */", "entry_point": "isMonotonic", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [6, 5, 4, 4];\nvar x0 = isMonotonic(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 3];\nvar x1 = isMonotonic(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 2];\nvar x2 = isMonotonic(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const inc = a.reduce((curr, next) => {\n    return curr + next >= curr + next + 1;\n  });\n  const dec = a.reduce((curr, next) => {\n    return curr + next <= curr + next - 1;\n  });\n  return inc || dec;\n}\n", "\n  return true;\n}\n", "\n    return a.reduce((previousValue, currentValue) => {\n        if (previousValue === currentValue) {\n            return currentValue;\n        } else {\n            return currentValue > previousValue;\n        }\n    });\n}\n", "\n  return!a.every(el => el > a[a.length - 1]) &&!a.every(el => el < a[a.length - 1]);\n}\n", "\n  return a.length === 2 && a[0] === a[1];\n}\n"]}
{"task_id": "MBJSP/69", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isSublist(l, s) {\n/**\n * * Write a function to check whether a list contains the given sublist or not.\n */", "entry_point": "isSublist", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, 3, 5, 7];\nvar arg01 = [3, 7];\nvar x0 = isSublist(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 3, 5, 7];\nvar arg11 = [4, 3];\nvar x1 = isSublist(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 3, 5, 7];\nvar arg21 = [1, 6];\nvar x2 = isSublist(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l.indexOf(s)!== -1;\n}\n", "\n  const x = s.slice(0, l.length);\n  const y = s.slice(l.length);\n  return x === y;\n}\n", "\n  const testTup = l.slice(0);\n  let temp = s.slice(0);\n  if (s.length === l.length && temp.length === testTup.length) {\n    return true;\n  }\n  return false;\n}\n", "\n  let isSub = false;\n  for (let i = 0; i <= l.length - s.length; i++) {\n    isSub = true;\n    for (let j = 0; j < s.length; j++) {\n      if (l[i + j]!== s[j]) {\n        isSub = false;\n        break;\n      }\n    }\n    if (isSub) {\n      break;\n    }\n  }\n  return isSub;\n}\n", "\n  return l.some(elem => elem.some(elem2 => elem2 === s));\n}\n"]}
{"task_id": "MBJSP/70", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getEqual(input, k) {\n/**\n * * Write a function to find whether all the given tuples have equal length or not.\n */", "entry_point": "getEqual", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[11, 22, 33], [44, 55, 66]];\nvar arg01 = 3;\nvar x0 = getEqual(arg00, arg01);\nvar v0 = \"All tuples have same length\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5, 6, 7]];\nvar arg11 = 3;\nvar x1 = getEqual(arg10, arg11);\nvar v1 = \"All tuples do not have same length\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2], [3, 4]];\nvar arg21 = 2;\nvar x2 = getEqual(arg20, arg21);\nvar v2 = \"All tuples have same length\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const length = input.length;\n  const result = [];\n  if (input[0] === input[length - 1]) {\n    result.push(true);\n  } else {\n    result.push(false);\n  }\n  for (let i = 0; i < length; i++) {\n    const curr = input[i];\n    if (curr === input[0]) {\n      return result;\n    }\n    if (input[i] === input[length - 1]) {\n      return result;\n    }\n    if (curr === input[i + 1]) {\n      return result;\n    }\n  }\n  return result;\n}\n", "\n  const equalCount = [];\n  for (let i = 0; i < input.length - k; i++) {\n    const count = [];\n    for (let j = 0; j < k; j++) {\n      count.push(input[i + j].length);\n    }\n    equalCount.push(count.sort((a, b) => b - a).join(\"\"));\n  }\n  return equalCount.every(ele => ele === \"1\");\n}\n", "\n  const testTup = input.map(tup => tup.map(str => str.toLowerCase())).filter(tup => tup.length === k);\n  return testTup.length === k;\n}\n", "\n    // Write your code here\n  const testTup = input.map(value => new Tuple(value, k));\n  return testTup.every(value => value.length === k)? true : false;\n}\n", "\n  if (input.length % k === 0) {\n    const equal = input.map(arr => arr.slice(0, k)).every(arr => arr.every(a => a.length === arr.length));\n    return equal;\n  }\n  return false;\n}\n"]}
{"task_id": "MBJSP/71", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction combSort(nums) {\n/**\n * * Write a function to sort a list of elements using comb sort.\n */", "entry_point": "combSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 15, 37, 25, 79];\nvar x0 = combSort(arg00);\nvar v0 = [5, 15, 25, 37, 79];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [41, 32, 15, 19, 22];\nvar x1 = combSort(arg10);\nvar v1 = [15, 19, 22, 32, 41];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [99, 15, 13, 47];\nvar x2 = combSort(arg20);\nvar v2 = [13, 15, 47, 99];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let temp = [];\n  for (let i = 0; i < nums.length; i++) {\n    temp[i] = nums[i];\n  }\n  temp.sort((a, b) => b - a);\n  return temp;\n}\n", "\n  return nums.sort((a, b) => a - b);\n}\n", "\n    const sorted = nums.sort((a, b) => a - b);\n    return sorted;\n}\nconst randomIntArr = (min, max) => {\n    const arr = [];\n    for (let i = min; i <= max; i++) {\n        arr.push(i);\n    }\n    return arr;\n};\n", "\n  const numsArr = nums.map(num => parseInt(num, 10));\n  const sortedNumsArr = numsArr.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < sortedNumsArr.length; i++) {\n    for (let j = 0; j < sortedNumsArr.length - i - 1; j++) {\n      if (sortedNumsArr[j] > sortedNumsArr[j + 1]) {\n        result.push(sortedNumsArr[j]);\n        result.push(sortedNumsArr[j + 1]);\n        return result;\n      }\n    }\n  }\n}\n", "\n  // Write your code here\n  const len = nums.length;\n  const sorted = [];\n  while (len--) {\n    const tmp = nums.pop();\n    sorted.push(tmp);\n    nums.push(tmp);\n  }\n  return sorted;\n}\n"]}
{"task_id": "MBJSP/72", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction difSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented as difference of two squares or not.\n */", "entry_point": "difSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = difSquare(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = difSquare(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = difSquare(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const res = Math.pow(n, 2) - Math.pow(n - 1, 2);\n  return res;\n}\n", "\n  const diff = n % Math.pow(2, 10);\n  return diff === Math.pow(0.5, 2) || diff === Math.pow(0.25, 2) || diff === Math.pow(0.125, 2) || diff === Math.pow(0.0625, 2) || diff === Math.pow(0.03125, 2);\n}\n", "\n  let result = n;\n  if (n % 2 === 0) {\n    result = n - 2;\n  }\n  else if (n % 4 === 0) {\n    result = n - 4;\n  }\n  return result;\n}\n", "\n  const ans = n % 4;\n  if (ans === 0) {\n    return true;\n  }\n  return false;\n}\n", "\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    const square = i * i;\n    const squarePlus1 = square + 1;\n    const squareMinus1 = square - 1;\n    const squarePlus1Minus1 = squarePlus1 - 1;\n    const squareMinus1Plus1 = squareMinus1 + 1;\n    const isSquare = square == squarePlus1 || square == squareMinus1 || square == squarePlus1Minus1 || square == squareMinus1Plus1;\n    const isSquarePlus1 = squarePlus1 == squarePlus1Plus1 || squarePlus1 == squarePlus1Minus1 || squarePlus1 == squareMinus1Plus1 || squarePlus1 == squareMinus1Minus1;\n    const isSquareMinus1 = squareMinus1 == squareMinus1Plus1 || squareMinus1 == squareMinus1Minus1 || squareMinus1 == squarePlus1Minus1 || squareMinus1 == squarePlus1Plus1;\n    const isDifSquare = isSquarePlus1 || isSquareMinus1 || isSquare || isSquarePlus1Minus1 || isSquareMinus1Plus1;\n    result.push({square, squarePlus1, squareMinus1, squarePlus1Minus1, squareMinus1Plus1, isSquare, isSquarePlus1, isSquareMinus1, isDifSquare});\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/73", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction multipleSplit(text) {\n/**\n * * Write a function to split the given string with multiple delimiters by using regex.\n */", "entry_point": "multipleSplit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Forces of the \\ndarkness*are coming into the play.\";\nvar x0 = multipleSplit(arg00);\nvar v0 = [\"Forces of the \", \"darkness\", \"are coming into the play.\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\";\nvar x1 = multipleSplit(arg10);\nvar v1 = [\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Certain services\\nare subjected to change*over the seperate subscriptions.\";\nvar x2 = multipleSplit(arg20);\nvar v2 = [\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.split('.');\n}\n", "\n  return text.split(/\\W+|\\w+/g);\n}\n", "\n  return text.split(/[\\s|\\-|\\d|\\-|\\(|\\)|\\{|\\}]/g);\n}\n", "\n  const pattern = /(?=[A-Z]|$)/g;\n  const words = text.split(pattern);\n  return words;\n}\n", "\n  const regex = new RegExp(\"\\\\W+\", \"g\");\n  return text.split(regex).filter(word => word.trim()!== '');\n}\n"]}
{"task_id": "MBJSP/74", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isSamepatterns(colors, patterns) {\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */", "entry_point": "isSamepatterns", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"green\"];\nvar arg01 = [\"a\", \"b\", \"b\"];\nvar x0 = isSamepatterns(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"greenn\"];\nvar arg11 = [\"a\", \"b\", \"b\"];\nvar x1 = isSamepatterns(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"greenn\"];\nvar arg21 = [\"a\", \"b\"];\nvar x2 = isSamepatterns(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const colorsObj = {};\n  for (let i = 0; i < colors.length; i++) {\n    colorsObj[colors[i]] = colorsObj[colors[i]] + 1 || 1;\n    if (colorsObj[colors[i]] === patterns.length) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  const patternArray = patterns.reduce((arr, pattern) => {\n      return arr.concat(pattern);\n  }, []);\n  const patternSet = new Set(patternArray);\n  return patternArray.every(color => patternSet.has(color));\n}\n", "\n  const isSame = [];\n  const result = [];\n  for (let i = 0; i < colors.length; i++) {\n    isSame.push(colors[i] === patterns[i]);\n  }\n  return isSame.every(e => e);\n}\n", "\n  for (let i = 0; i < patterns.length; i++) {\n    if (colors.length!== patterns[i].length) {\n      return false;\n    } else {\n      if (colors.join('') === patterns[i].join('')) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", "\n    // Write your code here\n    const result = [];\n    const c = colors[0];\n    const p = patterns[0];\n    result.push(c);\n    if (c === p) {\n        for (let i = 1; i < colors.length; i++) {\n            c = colors[i];\n            p = patterns[i];\n            if (c!== p) {\n                return false;\n            }\n            result.push(p);\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/75", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findTuples(testlist, k) {\n/**\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */", "entry_point": "findTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 24, 12], [7, 9, 6], [12, 18, 21]];\nvar arg01 = 6;\nvar x0 = findTuples(arg00, arg01);\nvar v0 = \"[(6, 24, 12)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 25, 30], [4, 2, 3], [7, 8, 9]];\nvar arg11 = 5;\nvar x1 = findTuples(arg10, arg11);\nvar v1 = \"[(5, 25, 30)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 9, 16], [8, 16, 4], [19, 17, 18]];\nvar arg21 = 4;\nvar x2 = findTuples(arg20, arg21);\nvar v2 = \"[(8, 16, 4)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let testTup = [];\n  for (let i = 0; i < testlist.length; i++) {\n    testTup.push(testlist[i][0]);\n  }\n  let finaltestTup = [];\n  let finaltestlist = [];\n  let testlistLength = testlist.length;\n  for (let i = 0; i < testTup.length; i++) {\n    let finalresult = [];\n    for (let j = 0; j < testlistLength; j++) {\n      if (testlist[j][0] % testTup[i] === 0) {\n        finalresult.push(testlist[j][1]);\n      }\n    }\n    if (finalresult.length > 0) {\n      finaltestlist.push(finalresult);\n    }\n  }\n  for (let i = 0; i < finaltestlist.length; i++) {\n    let finalresult = [];\n    for (let j = 0; j < finaltestlist[i].length; j++) {\n      for (let k = 0; k < finaltestlist.length; k++) {\n        if (j!= k) {\n          let tempResult = [];\n          for (let l = 0; l < finaltestlist[k].length; l++) {\n            tempResult.push(finaltestlist[k][l] + finaltestlist[j][l]);\n          }\n          if (tempResult.length > 0) {\n            finalresult.push(tempResult);\n          }\n        }\n      }\n    }\n    if (finalresult.length > 0) {\n      finaltestTup.push(finalresult);\n    }\n  }\n  return finaltestTup;\n}", "\n  const result = [];\n  const counter = {};\n  testlist.forEach(testtup => {\n    if (k && k % testtup[0] === 0) {\n      counter[testtup[0]] = counter[testtup[0]] + 1 || 1;\n      if (counter[testtup[0]] === k) {\n        result.push(testtup);\n        counter[testtup[0]] = 0;\n      }\n    }\n  });\n  return result;\n}\n", "\n  const results = [];\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = 0; j < testlist.length; j++) {\n      if (testlist[i][j] % k === 0) {\n        results.push(testlist[i]);\n      }\n    }\n  }\n  return results;\n}\nconst operators = ['+', '-', '*', '/'];\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length - k + 1; i++) {\n    const test = testlist[i];\n    for (let j = 0; j < testlist.length - k + 1; j++) {\n      const test2 = testlist[j];\n      if (test % k === 0 && test2 % k === 0) {\n        result.push({ test, test2 });\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  const l = testlist.length;\n  for (let i = 0; i < l; i++) {\n    for (let j = i + 1; j < l; j++) {\n      if ((testlist[i] % k === 0) && (testlist[j] % k === 0)) {\n        const lst = [];\n        lst.push(testlist[i]);\n        lst.push(testlist[j]);\n        result.push(lst);\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/76", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countSquares(m, n) {\n/**\n * * Write a JavaScript function to count the number of squares in a rectangle.\n */", "entry_point": "countSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = countSquares(arg00, arg01);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 2;\nvar x1 = countSquares(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 1;\nvar x2 = countSquares(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i * i + j * j == m * n) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n  const squares = (m - 1) * (m - 1);\n  const rectangles = n * (m - 1) * (n - 1);\n  return squares + rectangles;\n}\n", "\n  const result = 0;\n  for (let i = m; i >= 0; i--) {\n    for (let j = n; j >= 0; j--) {\n      if (i * i + j * j === n * n) {\n        result++;\n      }\n    }\n  }\n  return result;\n}\nconst r = {\n  'foo': [\n    ['foo', 'bar'],\n    ['baar'],\n  ],\n  'bar': [\n    ['bar', 'foo'],\n    ['foo'],\n  ],\n};\nr.foo[1][0] = 'baz';\nconsole.log(r);\nr['foo'][1].push(['baz']);\nconsole.log(r);\n\n```\n\n</section>\n", "\n  const result = [];\n  for (let i = m; i >= 0; i--) {\n    for (let j = n; j >= 0; j--) {\n      result.push(i * i + j * j);\n    }\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i * i + j * j === m * n) {\n        result++;\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/77", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isDiff(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of even and odd digits.\n */", "entry_point": "isDiff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1212112;\nvar x0 = isDiff(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1212;\nvar x1 = isDiff(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const tup = n.toString();\n    const sumOdd = tup.reduce((sum, digit) => sum + (digit % 2 === 0? digit : 0), 0);\n    const sumEven = tup.reduce((sum, digit) => sum + (digit % 2 === 1? digit : 0), 0);\n    const result = Math.abs(sumOdd - sumEven);\n    return result;\n}\n", "\n  const sumOdds = parseInt(n.toString().replace(/\\D/g, \"\"), 10);\n  const sumEvens = (parseInt(n.toString().replace(/\\D/g, \"\"), 10) * 2) % 100;\n  return sumOdds - sumEvens;\n}\n", "\n  let sumOdd = 0;\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    const digit = i.toString().length;\n    if (i % 2 == 0) {\n      sumEven += parseInt(i);\n    } else {\n      sumOdd += parseInt(i);\n    }\n  }\n  let difference = sumOdd - sumEven;\n  return difference;\n}\n", "\n  const n1 = n % 10;\n  const n2 = (n / 10) % 10;\n  return n1 + n2;\n}\n", "\n  const sumOdd = testInt.reduce((a, b) => a + b, 0);\n  const sumEven = testInt.reduce((a, b) => a + b, testInt);\n  return Math.abs(sumOdd - sumEven);\n}\n"]}
{"task_id": "MBJSP/78", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countWithOddSetbits(n) {\n/**\n * * Write a JavaScript function to find number of integers with odd number of set bits.\n */", "entry_point": "countWithOddSetbits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = countWithOddSetbits(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = countWithOddSetbits(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = countWithOddSetbits(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < 32; i++) {\n    if (((n >>> i) & 1) === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let binary = n.toString(2);\n  let numOdds = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      numOdds += 1;\n    }\n  }\n  return numOdds;\n}\n", "\n  let num = 0;\n  for (let i = 0; i < 32; i++) {\n    if ((n & (1 << i))!== 0) {\n      num++;\n    }\n  }\n  return num;\n}\n", "\n  return n.toString().length - (n.toString().split('').reduce((acc, curr, index, array) => {\n    return (curr & 1) === 1 && index > 1? acc + 1 : acc;\n  }, 0)).toString().length;\n}\n", "\n    let count = 0;\n    let binaryString = n.toString(2);\n    for (let i = 0; i < binaryString.length; i++) {\n        if (binaryString.charAt(i) === '1') {\n            count++;\n        }\n    }\n    return count;\n}\n"]}
{"task_id": "MBJSP/79", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction wordLen(s) {\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */", "entry_point": "wordLen", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Hadoop\";\nvar x0 = wordLen(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"great\";\nvar x1 = wordLen(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"structure\";\nvar x2 = wordLen(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const words = s.split(' ');\n  let length = words.length;\n  if (length % 2 === 0) {\n    length -= 1;\n  }\n  return length;\n}\n", "\n  // Write your code here\n  return s.length % 2 === 0? 'even' : 'odd';\n}\n", "\n  const wlen = s.split('').length;\n  if (wlen % 2 === 0) {\n    return \"Even\";\n  } else {\n    return \"Odd\";\n  }\n}\n", "\n  return s.length % 2 === 1;\n}\n", "\n  // Write your code here\n  if (s.length % 2!== 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n"]}
{"task_id": "MBJSP/80", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction tetrahedralNumber(n) {\n/**\n * * Write a function to find the nth tetrahedral number.\n */", "entry_point": "tetrahedralNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = tetrahedralNumber(arg00);\nvar v0 = 35.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = tetrahedralNumber(arg10);\nvar v1 = 56.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = tetrahedralNumber(arg20);\nvar v2 = 84.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const tetrahedralNumbers = [];\n  for (let i = 1; i <= n; i++) {\n    tetrahedralNumbers.push(i * i * i);\n  }\n  return tetrahedralNumbers[n];\n}\n", "\n  return n * (n * (n * 6 - 5) + 1) / 2;\n}\n", "\n  const nthTetrahedral = (1 * (3 * n + 1)) / 2;\n  return nthTetrahedral;\n}\n", "\n  const tetrahedralNumbers = [1,\n    4,\n    24,\n    120,\n    720,\n    5040,\n    40320,\n    362880,\n    3628800];\n  return tetrahedralNumbers[n];\n}\n", "\n  return n * (n + 1) * (3 * n + 1) / 2;\n}\n"]}
{"task_id": "MBJSP/81", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction zipTuples(testtup1, testtup2) {\n/**\n * * Write a function to zip the two given tuples.\n */", "entry_point": "zipTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [7, 8, 4, 5, 9, 10];\nvar arg01 = [1, 5, 6];\nvar x0 = zipTuples(arg00, arg01);\nvar v0 = [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 9, 5, 6, 10, 11];\nvar arg11 = [2, 6, 7];\nvar x1 = zipTuples(arg10, arg11);\nvar v1 = [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 10, 6, 7, 11, 12];\nvar arg21 = [3, 7, 8];\nvar x2 = zipTuples(arg20, arg21);\nvar v2 = [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push([testtup1[i], testtup2[i]]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push([testtup1[i], testtup2[i]]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length - 1; i++) {\n    result.push(Object.assign({}, testtup1[i], testtup2[i]))\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push([testtup1[i], testtup2[i]]);\n  }\n  return result;\n}\n", "\n  const zip = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    zip.push([testtup1[i], testtup2[i]]);\n  }\n  return zip;\n}\n"]}
{"task_id": "MBJSP/82", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction volumeSphere(r) {\n/**\n * * Write a function to find the volume of a sphere.\n */", "entry_point": "volumeSphere", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = volumeSphere(arg00);\nvar v0 = 4188.790204786391;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 25;\nvar x1 = volumeSphere(arg10);\nvar v1 = 65449.84694978735;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = volumeSphere(arg20);\nvar v2 = 33510.32163829113;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const pi = 3.14159;\n  return 4 / 3 * pi * r * r * r;\n}\n", "\n  const PI = Math.PI;\n  const piDividedByFour = (PI / 4);\n  return (4 / 3) * (PI * PI) * (r * r) * (r * r);\n}\n", "\n  return Math.PI * Math.pow(r, 3) / 3;\n}\n", "\n  return Math.PI * Math.pow(r, 3) / 3;\n}\n", "\n  const r3 = r * r * r;\n  const pi = 3.14159265358979323846;\n  return pi * r3;\n}\n"]}
{"task_id": "MBJSP/83", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getChar(strr) {\n/**\n * * Write a JavaScript function to find the character made by adding all the characters of the given string.\n */", "entry_point": "getChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = getChar(arg00);\nvar v0 = \"f\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"gfg\";\nvar x1 = getChar(arg10);\nvar v1 = \"t\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = getChar(arg20);\nvar v2 = \"c\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    let total = 0;\n    for (let j = 0; j < str.length; j++) {\n      total = total + strr.charCodeAt(j);\n    }\n    result.push(str[i].charAt(total % str[i].length));\n  }\n  return result;\n}\n", "\n    const str = strr.toString();\n    let result = str[0];\n    for (let i = 1; i < str.length; i++) {\n        result += str[i];\n    }\n    return result;\n}\n", "\n  return str.charAt(0);\n}\nconst letters = 'abcdefghijklmnopqrstuvwxyz';\n/**\n * * Write a JavaScript ", "\n  const result = [];\n  for (let i = 0; i < strr.length; i++) {\n    result.push(strr.charAt(i) + strr.charAt(i));\n  }\n  return result;\n}\n", "\n  let result = '',\n    str = str.toLowerCase().split('');\n  for (let i = 0; i < str.length; i++) {\n    result += str[i];\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/84", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sequence(n) {\n/**\n * * Write a function to find the n-th number in newman conway sequence.\n */", "entry_point": "sequence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = sequence(arg00);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = sequence(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = sequence(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n}\n", "\n    // Write your code here\n    const result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(i);\n    }\n    return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n}\n", "\n  const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const result = nums.slice(n);\n  return result;\n}\n", "\n  const array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let counter = 0;\n  while (counter < n) {\n    array.push(array[array.length - 1] + array[array.length - 2]);\n    counter++;\n  }\n  return array[array.length - 1];\n}\n"]}
{"task_id": "MBJSP/85", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction surfaceareaSphere(r) {\n/**\n * * Write a function to find the surface area of a sphere.\n */", "entry_point": "surfaceareaSphere", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = surfaceareaSphere(arg00);\nvar v0 = 1256.6370614359173;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = surfaceareaSphere(arg10);\nvar v1 = 2827.4333882308138;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = surfaceareaSphere(arg20);\nvar v2 = 5026.548245743669;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const answer = 4 * Math.PI * r * r;\n  return answer;\n}\n", "\n  return (Math.PI * r * r);\n}\n", "\n  return Math.PI * r * r;\n}\n", "\n  return (4 * Math.PI * r * r) / 3;\n}\n", "\n  const surfacearea = (4 * Math.PI) * (r * r);\n  return surfacearea;\n}\n"]}
{"task_id": "MBJSP/86", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction centeredHexagonalNumber(n) {\n/**\n * * Write a function to find nth centered hexagonal number.\n */", "entry_point": "centeredHexagonalNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = centeredHexagonalNumber(arg00);\nvar v0 = 271;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = centeredHexagonalNumber(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = centeredHexagonalNumber(arg20);\nvar v2 = 217;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n * (n + 1) * (3 * n - 2);\n}\n", "\n  let centeredHexagonal = 0;\n  for (let i = 0; i < n; i++) {\n    centeredHexagonal = centeredHexagonal + (6 * (i - n / 2));\n  }\n  return centeredHexagonal;\n}\n", "\n  const left = (2 * n) - 1;\n  const right = n + 1;\n  return n * (left * (left + 1) / 2 + right * (right - 1) / 2);\n}\n", "\n  let result = 0;\n  let count = 1;\n  while (result < n) {\n    result = (n * (3 * n - 1)) / 2 + count;\n    count++;\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result += 6 - i;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/87", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction mergeDictionariesThree(dict1, dict2, dict3) {\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */", "entry_point": "mergeDictionariesThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg01 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar arg02 = {'\"O\"':\"Orange\",'\"W\"':\"White\",'\"B\"':\"Black\"};\nvar x0 = mergeDictionariesThree(arg00, arg01, arg02);\nvar v0 = {'\"B\"':\"Black\",'\"R\"':\"Red\",'\"P\"':\"Pink\",'\"G\"':\"Green\",'\"W\"':\"White\",'\"O\"':\"Orange\"};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg11 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar arg12 = {'\"L\"':\"lavender\",'\"B\"':\"Blue\"};\nvar x1 = mergeDictionariesThree(arg10, arg11, arg12);\nvar v1 = {'\"W\"':\"White\",'\"P\"':\"Pink\",'\"B\"':\"Black\",'\"R\"':\"Red\",'\"G\"':\"Green\",'\"L\"':\"lavender\"};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg21 = {'\"L\"':\"lavender\",'\"B\"':\"Blue\"};\nvar arg22 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar x2 = mergeDictionariesThree(arg20, arg21, arg22);\nvar v2 = {'\"B\"':\"Black\",'\"P\"':\"Pink\",'\"R\"':\"Red\",'\"G\"':\"Green\",'\"L\"':\"lavender\",'\"W\"':\"White\"};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return {\n    a: dict1.a + dict2.a + dict3.a,\n    b: dict1.b + dict2.b + dict3.b,\n    c: dict1.c + dict2.c + dict3.c\n  };\n}\n", "\n  const merged = {};\n  for (let i = 0; i < dict1.length; i++) {\n    merged[dict1[i]] = merged[dict1[i]] + 1 || 1;\n  }\n  for (let i = 0; i < dict2.length; i++) {\n    merged[dict2[i]] = merged[dict2[i]] + 1 || 1;\n  }\n  for (let i = 0; i < dict3.length; i++) {\n    merged[dict3[i]] = merged[dict3[i]] + 1 || 1;\n  }\n  return merged;\n}\n", "\n  const mergedDict = {};\n  for (let i = 0; i < dict1.length; i++) {\n    mergedDict[dict1[i]] = mergedDict[dict1[i]] + 1 || 1;\n  }\n  for (let i = 0; i < dict2.length; i++) {\n    mergedDict[dict2[i]] = mergedDict[dict2[i]] + 1 || 1;\n  }\n  for (let i = 0; i < dict3.length; i++) {\n    mergedDict[dict3[i]] = mergedDict[dict3[i]] + 1 || 1;\n  }\n  return mergedDict;\n}\n", "\n  const merged = {};\n  const keys = Object.keys(dict1);\n  for (let i = 0; i < keys.length; i++) {\n    merged[keys[i]] = dict1[keys[i]];\n  }\n  const keys2 = Object.keys(dict2);\n  for (let i = 0; i < keys2.length; i++) {\n    if (merged[keys2[i]] === undefined) {\n      merged[keys2[i]] = dict2[keys2[i]];\n    } else {\n      merged[keys2[i]] = merged[keys2[i]] + dict2[keys2[i]];\n    }\n  }\n  const keys3 = Object.keys(dict3);\n  for (let i = 0; i < keys3.length; i++) {\n    if (merged[keys3[i]] === undefined) {\n      merged[keys3[i]] = dict3[keys3[i]];\n    } else {\n      merged[keys3[i]] = merged[keys3[i]] + dict3[keys3[i]];\n    }\n  }\n  return merged;\n}\n", "\n  return dict1.merge(dict2).merge(dict3);\n}\nconst dict4 = {\n  'category': 'Jewelry',\n  'count': 12,\n  'name': 'Souvenir'\n};\n"]}
{"task_id": "MBJSP/88", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction freqCount(list1) {\n/**\n * * Write a function to get the frequency of the elements in a list.\n */", "entry_point": "freqCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30];\nvar x0 = freqCount(arg00);\nvar v0 = {\"10\":4,\"20\":4,\"40\":2,\"50\":2,\"30\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4];\nvar x1 = freqCount(arg10);\nvar v1 = {\"1\":3,\"2\":2,\"3\":3,\"4\":3};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5];\nvar x2 = freqCount(arg20);\nvar v2 = {\"10\":1,\"5\":3,\"6\":2,\"7\":2,\"4\":2,\"9\":2};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let freq = [];\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!freq.includes(list1[i])) {\n      freq.push(list1[i]);\n    }\n  }\n  return freq;\n}\n", "\n    let result = {};\n    for (let i = 0; i < list.length; i++) {\n        result[list[i]] = result[list[i]] + 1 || 1;\n    }\n    return result;\n}\n", "\n    const frequencies = {};\n    const freqCount = (list, element) => {\n        if (frequencies[element] == undefined) {\n            frequencies[element] = 1;\n        } else {\n            frequencies[element]++;\n        }\n    };\n    return list1.map(freqCount);\n}\n", "\n  const frequency = {};\n  for (let i = 0; i < list1.length; i++) {\n    if (frequency[list1[i]] == undefined) {\n      frequency[list1[i]] = 1;\n    } else {\n      frequency[list1[i]] += 1;\n    }\n  }\n  return frequency;\n}\n", "\n    // Write your code here\n    let result = {};\n    for (let i = 0; i < list1.length; i++) {\n        result[list1[i]] = result[list1[i]] + 1 || 1;\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/89", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction closestNum(n) {\n/**\n * * Write a function to find the closest smaller number than n.\n */", "entry_point": "closestNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 11;\nvar x0 = closestNum(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = closestNum(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar x2 = closestNum(arg20);\nvar v2 = 11;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let smallNum = Number.POSITIVE_INFINITY;\n  for (let i = 1; i <= n; i++) {\n    if (Math.abs(n - i) < smallNum) {\n      smallNum = Math.abs(n - i);\n    }\n  }\n  return n - smallNum;\n}\n", "\n  let closest = Math.abs(n);\n  let closestSmaller = null;\n  for (let i = 0; i < closestArray.length; i++) {\n    const temp = Math.abs(n - closestArray[i]);\n    if (temp < closest) {\n      closestSmaller = closestArray[i];\n      closest = temp;\n    }\n  }\n  return closestSmaller;\n}\n", "\n  return n * (n + 1) / 2;\n}\n", "\n  const nums = [1, 3, 5, 7, 9, 11];\n  const diffs = [];\n  nums.forEach((num) => {\n    diffs.push((Math.abs(n - num)));\n  });\n  const minNum = Math.min(...diffs);\n  return n - minNum;\n}\n", "\n  const num = n.toString();\n  return Math.floor(num) + (Math.ceil(num) - num) / 2;\n}\nconst tup = [2, 4, 10, 16, 20];\nconst num = 5;\n"]}
{"task_id": "MBJSP/90", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction lenLog(list1) {\n/**\n * * Write a JavaScript function to find the length of the longest word.\n */", "entry_point": "lenLog", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"python\", \"PHP\", \"bigdata\"];\nvar x0 = lenLog(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"ab\", \"abc\"];\nvar x1 = lenLog(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"small\", \"big\", \"tall\"];\nvar x2 = lenLog(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let longest = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length > longest) {\n      longest = list1[i].length;\n    }\n  }\n  return longest + 1;\n}\n", "\n  let maxLength = 0;\n  list1.forEach(element => {\n    let temp = element.split(' ');\n    if (temp.length > maxLength) {\n      maxLength = temp.length;\n    }\n  });\n  return maxLength;\n}\n", "\n  const str = list1.join(' ').toLowerCase();\n  let len = str.split(' ').length;\n  return len;\n}\n", "\n  // Write your code here\n  const maxLen = list1.reduce((a, b) => a > b? a : b, 0);\n  return maxLen;\n}\nconst list1 = [\"green\", \"yellow\", \"red\", \"blue\", \"green\", \"green\", \"red\", \"yellow\", \"blue\"];\n", "\n  return Math.log(list1.length) / Math.log(10);\n}\n"]}
{"task_id": "MBJSP/91", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findSubstring(str1, substr) {\n/**\n * * Write a function to check if a substring is present in a given list of string values.\n */", "entry_point": "findSubstring", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg01 = \"ack\";\nvar x0 = findSubstring(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg11 = \"abc\";\nvar x1 = findSubstring(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg21 = \"ange\";\nvar x2 = findSubstring(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str1.some(value => value.includes(substr));\n}\n", "\n  const subStr = substr.split('');\n  return subStr.reduce((acc, cur, i, arr) => acc && arr.indexOf(cur) === i && arr.indexOf(cur) > -1, true);\n}\n", "\n  const substring = substr.toLowerCase();\n  const result = [];\n  for (let i = 0; i < str1.length - substring.length + 1; i++) {\n    if (str1[i].toLowerCase() === substring) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  const testTup = str1.split(substr);\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (testTup[i] === substr) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n}\n", "\n  const testList = [\n    \"Lorem\",\n    \"ipsum\",\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n    \"Sit amet, consectetur adipiscing elit.\"\n  ];\n  return testList.indexOf(substr)!== -1;\n}\n"]}
{"task_id": "MBJSP/92", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isUndulating(n) {\n/**\n * * Write a function to check whether the given number is undulating or not.\n */", "entry_point": "isUndulating", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"1212121\";\nvar x0 = isUndulating(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1991\";\nvar x1 = isUndulating(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"121\";\nvar x2 = isUndulating(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n % 2 === 1) {\n    return true;\n  }\n  for (let i = 3; i < n; i = i + 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  const max = n * (n + 1) / 2;\n  for (let i = 1; i < max; i++) {\n    if (Math.abs(i - n)!= Math.abs(i - n * (n + 1) / 2)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  let counter = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      counter++;\n    }\n  }\n  if (counter % 2 === 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  const nfact = n === 0? 1 : n * (n + 1) / 2;\n  return nfact === factorial(n);\n}\n", "\n  const unDup = [1, 2, 3, 4, 5];\n  const unDupLength = unDup.length;\n  return (n * (unDupLength - 1)) % unDupLength === 0;\n}\n"]}
{"task_id": "MBJSP/93", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction power(a, b) {\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */", "entry_point": "power", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 4;\nvar x0 = power(arg00, arg01);\nvar v0 = 81;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 3;\nvar x1 = power(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 5;\nvar x2 = power(arg20, arg21);\nvar v2 = 3125;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = a? b % a === 0? power(a * a, b / a) : power(a, b / a) * a : 0;\n  return result;\n}\n", "\n  return Math.pow(a, b);\n}\n", "\n  return a ** b;\n}\n", "\n  const result = Math.pow(a, b);\n  return result;\n}\n", "\n  return Math.pow(a, b);\n}\n"]}
{"task_id": "MBJSP/94", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction indexMinimum(testlist) {\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */", "entry_point": "indexMinimum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]];\nvar x0 = indexMinimum(arg00);\nvar v0 = \"Varsha\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]];\nvar x1 = indexMinimum(arg10);\nvar v1 = \"Dawood\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]];\nvar x2 = indexMinimum(arg20);\nvar v2 = \"Ayesha\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const min = Math.min.apply(Math, testList);\n  return testlist.indexOf(min);\n}\n", "\n    // Write your code here\n    const numStr = testlist.map(num => parseInt(num, 10)).sort((a, b) => a - b);\n    return numStr[0];\n}\n", "\n  const min = testlist[0];\n  let minIdx = 0;\n  for (let i = 1; i < testlist.length; i++) {\n    if (testlist[i] < min) {\n      min = testlist[i];\n      minIdx = i;\n    }\n  }\n  return minIdx;\n}\n", "\n  let testtup = testlist.map(tup => tup);\n  testtup.sort((a, b) => b - a);\n  return testtup[0];\n}\n", "\n  let minVal = Number.MAX_VALUE;\n  let minValIndex = -1;\n  for (let i = 0; i < testlist.length; i++) {\n    if (minVal > testlist[i]) {\n      minVal = testlist[i];\n      minValIndex = i;\n    }\n  }\n  return minValIndex;\n}\n"]}
{"task_id": "MBJSP/95", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMinLength(lst) {\n/**\n * * Write a JavaScript function to find the minimum length of sublist.\n */", "entry_point": "findMinLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [1, 2]];\nvar x0 = findMinLength(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2], [1, 2, 3], [1, 2, 3, 4]];\nvar x1 = findMinLength(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 3, 3], [4, 4, 4, 4]];\nvar x2 = findMinLength(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return lst.reduce((min, elem) => Math.min(min, elem.length), Infinity);\n}\n", "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length <= result.length) {\n      continue;\n    } else {\n      result = lst[i].length;\n    }\n  }\n  return result;\n}\n", "\n  let min = lst[0].length;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < min) {\n      min = lst[i].length;\n    }\n  }\n  return min;\n}\n", "\n  return lst.reduce((min, current) => (current.length < min.length? current.length : min.length), lst[0].length);\n}\n", "\n  const subList = lst.slice(0, 1);\n  return lst.reduce((acc, l) => acc < l.length? acc : l.length, subList[0]);\n}\n"]}
{"task_id": "MBJSP/96", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction divisor(n) {\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */", "entry_point": "divisor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar x0 = divisor(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = divisor(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = divisor(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let i = 1;\n  let divisors = 0;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      divisors += 1;\n    }\n    i += 1;\n  }\n  return divisors;\n}\n", "\n  const n_ = Math.floor(n);\n  let divisors = 0;\n  for (let i = 1; i <= n_; i++) {\n    if (n_ % i === 0) {\n      divisors += 1;\n    }\n  }\n  return divisors;\n}\n", "\n  const sum = 1;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n", "\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      result += i;\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n}\nconst f = Math.floor;\n"]}
{"task_id": "MBJSP/97", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction frequencyLists(list1) {\n/**\n * * Write a function to find frequency count of list of lists.\n */", "entry_point": "frequencyLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]];\nvar x0 = frequencyLists(arg00);\nvar v0 = {\"1\":1,\"2\":3,\"3\":1,\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"8\":1,\"9\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nvar x1 = frequencyLists(arg10);\nvar v1 = {\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]];\nvar x2 = frequencyLists(arg20);\nvar v2 = {\"20\":2,\"30\":2,\"40\":2,\"17\":1,\"18\":1,\"16\":1,\"14\":1,\"13\":1,\"10\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    let count = list1[i].length;\n    for (let j = 0; j < list1[i].length; j++) {\n      count += list1[i][j];\n    }\n    result.push(count);\n  }\n  return result;\n}\n", "\n  const testList = [];\n  for (let i = 0; i < list1.length; i++) {\n    testList.push(list1[i]);\n  }\n  const result = [];\n  for (let i = 0; i < testList.length; i++) {\n    let count = 0;\n    for (let j = 0; j < testList.length; j++) {\n      if (testList[i] === testList[j]) {\n        count++;\n      }\n    }\n    result.push({\n      value: testList[i],\n      count\n    });\n  }\n  return result;\n}\n", "\n  let listFrequency = [];\n  for (let i = 0; i < list1.length; i++) {\n    const list = list1[i];\n    list.forEach(value => {\n      listFrequency[value] = listFrequency[value] + 1 || 1;\n    });\n  }\n  return listFrequency;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result[i] = list1[i].map(x => x).reduce((a, b) => a + b, 0);\n  }\n  return result;\n}\n", "\n  const counts = {};\n  for (let i = 0; i < list1.length; i++) {\n    const currentList = list1[i];\n    for (let j = 0; j < currentList.length; j++) {\n      counts[currentList[j]] = counts[currentList[j]] + 1 || 1;\n    }\n  }\n  return counts;\n}\n"]}
{"task_id": "MBJSP/98", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction multiplyNum(numbers) {\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */", "entry_point": "multiplyNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [8, 2, 3, -1, 7];\nvar x0 = multiplyNum(arg00);\nvar v0 = -67.2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-10, -20, -30];\nvar x1 = multiplyNum(arg10);\nvar v1 = -2000.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, 15, 18];\nvar x2 = multiplyNum(arg20);\nvar v2 = 1710.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return numbers.reduce((accum, num) => accum * num, 1) / numbers.length;\n}\n", "\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i] * numbers.length);\n    }\n    return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * numbers.length);\n  }\n  return result;\n}\n", "\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        product *= numbers[i];\n    }\n    return product / numbers.length;\n}\n", "\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * numbers.length);\n  }\n  return result;\n}\n\n// Write your code here\n"]}
{"task_id": "MBJSP/99", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction decimalToBinary(n) {\n/**\n * * Write a function to convert the given decimal number to its binary equivalent.\n */", "entry_point": "decimalToBinary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = decimalToBinary(arg00);\nvar v0 = \"1000\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 18;\nvar x1 = decimalToBinary(arg10);\nvar v1 = \"10010\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = decimalToBinary(arg20);\nvar v2 = \"111\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let binary = 0;\n    while (n > 0) {\n        binary = binary * 2 + n % 2;\n        n = n / 2;\n    }\n    return binary;\n}\n", "\n  let binary = 0;\n  let power = 0;\n  const numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576];\n  if (numbers.indexOf(n) >= 0) {\n    while (n > 0) {\n      binary = binary + numbers[n - 1];\n      n = n - 1;\n    }\n    return binary;\n  } else {\n    return false;\n  }\n}\n", "\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += (Math.pow(2, n - i - 1) * (n % 2 === 0? 1 : 0)).toString();\n  }\n  return str;\n}\n", "\n  let result = \"\";\n  for (let i = 31; i >= 0; i--) {\n    const bit = (n >> i) & 1;\n    result = bit + result;\n  }\n  return result;\n}\n", "\n  return new Array(n).fill(0).map("]}
{"task_id": "MBJSP/100", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction nextSmallestPalindrome(num) {\n/**\n * * Write a function to find the next smallest palindrome of a specified number.\n */", "entry_point": "nextSmallestPalindrome", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 99;\nvar x0 = nextSmallestPalindrome(arg00);\nvar v0 = 101;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1221;\nvar x1 = nextSmallestPalindrome(arg10);\nvar v1 = 1331;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 120;\nvar x2 = nextSmallestPalindrome(arg20);\nvar v2 = 121;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let strNum = num.toString();\n  let newStrNum = \"\";\n  for (let i = strNum.length - 1; i >= 0; i--) {\n    newStrNum += strNum[i];\n  }\n  let newNum = parseInt(newStrNum, 10);\n  if (isPalindrome(newNum)) {\n    newNum++;\n  }\n  let newStrNum2 = newNum.toString();\n  for (let i = newStrNum2.length - 1; i >= 0; i--) {\n    newStrNum2 += newStrNum2[i];\n  }\n  return newNum;\n}\n", "\n  const digits = num.toString();\n  const previousDigit = digits[digits.length - 1];\n  let nextSmallestPalindromeDigit;\n  if (previousDigit < 10) {\n    nextSmallestPalindromeDigit = 10;\n  }\n  if (previousDigit < 100) {\n    nextSmallestPalindromeDigit = previousDigit + 1;\n  }\n  if (previousDigit < 1000) {\n    nextSmallestPalindromeDigit = previousDigit + nextSmallestPalindromeDigit;\n  }\n  if (previousDigit < 10000) {\n    nextSmallestPalindromeDigit = previousDigit + nextSmallestPalindromeDigit + nextSmallestPalindromeDigit;\n  }\n  if (previousDigit < 100000) {\n    nextSmallestPalindromeDigit = previousDigit + nextSmallestPalindromeDigit + nextSmallestPalindromeDigit + nextSmallestPalindromeDigit;\n  }\n  if (previousDigit < 1000000) {\n    nextSmallestPalindromeDigit = previousDigit + nextSmallestPalindromeDigit + nextSmallestPalindromeDigit + nextSmallestPalindromeDigit + nextSmallestPalindromeDigit;\n  }\n  const nextSmallestPalindrome = nextSmallestPalindromeDigit.toString();\n  if (nextSmallestPalindrome.length < num) {\n    return nextSmallestPalindrome;\n  }\n  return nextSmallestPalindrome(nextSmallestPalindrome);\n}\n", "\n  const romanNumeral = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n  };\n  let palindrome = getNextPalindrome(num, 1);\n  while (romanNumeral[palindrome[palindrome.length - 1]]!== 1) {\n    palindrome = getNextPalindrome(num, palindrome.length);\n  }\n  return palindrome;\n}\n", "\n  let strnum = num + \"\";\n  let reverseString = \"\";\n  while (strnum.length > 1) {\n    const charCode = strnum.charCodeAt(strnum.length - 1);\n    if (charCode < 128) {\n      if (charCode > 31 && charCode < 127) {\n        reverseString += strnum.charAt(strnum.length - 1);\n      } else {\n        reverseString += String.fromCharCode(strnum.charCodeAt(strnum.length - 1) + 1);\n      }\n    } else {\n      if (charCode > 96 && charCode < 123) {\n        reverseString += String.fromCharCode(strnum.charCodeAt(strnum.length - 1) - 1);\n      } else {\n        reverseString += String.fromCharCode(strnum.charCodeAt(strnum.length - 1) + 1);\n      }\n    }\n    strnum = strnum.substring(0, strnum.length - 1);\n  }\n  if (reverseString === \"\") {\n    return num + 1;\n  }\n  let reverseStringLength = reverseString.length;\n  let revStringIndex = 0;\n  while (revStringIndex < reverseStringLength / 2) {\n    if (reverseString.charCodeAt(revStringIndex) > reverseString.charCodeAt(revStringIndex + 1)) {\n      return num + (reverseString.charCodeAt(revStringIndex) - 1) + 1;\n    }\n    revStringIndex++;\n  }\n  return num + reverseString.charCodeAt(revStringIndex);\n}\n", "\n    let palindrome = num;\n    let stringNum = String(palindrome);\n    const reversedNum = stringNum.split('').reverse().join('');\n    const oddCount = reversedNum.split('').length % 2;\n    let midpoint = reversedNum.length / 2;\n    let newNum;\n    if (oddCount === 1) {\n        midpoint = midpoint - 1;\n    } else if (oddCount === 0) {\n        midpoint = midpoint - 2;\n    }\n    newNum = reversedNum.substring(midpoint, midpoint + 2);\n    const nextNum = palindrome + newNum;\n    return nextNum;\n}\n"]}
{"task_id": "MBJSP/101", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction kthElement(arr, n, k) {\n/**\n * * Write a function to find the kth element in the given array.\n */", "entry_point": "kthElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 3, 5, 7, 19];\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = kthElement(arg00, arg01, arg02);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [17, 24, 8, 23];\nvar arg11 = 4;\nvar arg12 = 3;\nvar x1 = kthElement(arg10, arg11, arg12);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [16, 21, 25, 36, 4];\nvar arg21 = 5;\nvar arg22 = 4;\nvar x2 = kthElement(arg20, arg21, arg22);\nvar v2 = 36;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (count === k - 1) return arr[i];\n    count++;\n  }\n}\n", "\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = start + Math.floor((end - start) / 2);\n  while (start <= end) {\n    mid = start + Math.floor((end - start) / 2);\n    if (arr[mid] < n) {\n      start = mid + 1;\n    } else if (arr[mid] > n) {\n      end = mid - 1;\n    } else {\n      if (mid == k - 1) {\n        return arr[mid];\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n", "\n  const arrlen = arr.length;\n  let kthElement = -1;\n  for (let i = 0; i < arrlen; i++) {\n    let index = n - 1;\n    if (arr[i] < kthElement) {\n      kthElement = arr[i];\n      index = i;\n    }\n    if (index < 0) {\n      index = arrlen - 1;\n    }\n    if (index >= arrlen - 1) {\n      index = 0;\n    }\n    if (index == k - 1) {\n      kthElement = arr[index];\n      break;\n    }\n    arr[index] = arr[index] + arr[i];\n    arr[i] = arr[i] - arr[index];\n    arr[index] = arr[index] - arr[i];\n  }\n  return kthElement;\n}\n", "\n  return arr[k - 1];\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i]);\n  }\n  return result[k - 1];\n}\n"]}
{"task_id": "MBJSP/102", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction snakeToCamel(word) {\n/**\n * * Write a function to convert snake case string to camel case string.\n */", "entry_point": "snakeToCamel", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python_program\";\nvar x0 = snakeToCamel(arg00);\nvar v0 = \"PythonProgram\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python_language\";\nvar x1 = snakeToCamel(arg10);\nvar v1 = \"PythonLanguage\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"programming_language\";\nvar x2 = snakeToCamel(arg20);\nvar v2 = \"ProgrammingLanguage\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = '';\n  for (let i = 0; i < word.length; i++) {\n    if (i === 0) {\n      result += word[i];\n    } else {\n      result += word[i].toUpperCase();\n    }\n  }\n  return result;\n}\n", "\n  const result = word.replace(/[a-z]{1}/ig, (match) => match.toUpperCase());\n  return result;\n}\n", "\n    return word.toLowerCase().replace(/[-_]/g, w => w.charAt(0).toUpperCase() + w.substr(1).toLowerCase());\n}\n", "\n    const result = [];\n    const tokens = word.split(\"_\");\n    for (let i = 0; i < tokens.length; i++) {\n        result.push(tokens[i].toUpperCase());\n    }\n    return result.join(\"\");\n}\n", "\n  const words = word.split('_');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    result.push(words[i].toUpperCase());\n  }\n  return result.join('');\n}\n"]}
{"task_id": "MBJSP/103", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction eulerianNum(n, m) {\n/**\n * * Write a function to find eulerian number a(n, m).\n */", "entry_point": "eulerianNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 1;\nvar x0 = eulerianNum(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 1;\nvar x1 = eulerianNum(arg10, arg11);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 3;\nvar x2 = eulerianNum(arg20, arg21);\nvar v2 = 26;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const counter = {};\n  counter[n] = m;\n  const visited = [];\n  const edgeNum = [];\n  for (let i = 1; i <= n; i++) {\n    edgeNum.push(counter[i]);\n  }\n  const maxNum = Math.max(...edgeNum);\n  let maxEdge = edgeNum.indexOf(maxNum);\n  while (maxEdge!== -1) {\n    visited.push(maxEdge);\n    counter[n] -= 1;\n    maxNum = Math.max(...edgeNum);\n    maxEdge = edgeNum.indexOf(maxNum);\n  }\n  for (let i = 1; i <= n; i++) {\n    counter[i] = edgeNum[visited.indexOf(i)];\n  }\n  counter[n] -= 1;\n  return counter[n];\n}\n", "\n  const result = 0;\n  const visited = [];\n  if (m === 0) {\n    result = 1;\n  } else {\n    for (let i = 1; i <= n; i++) {\n      if (visited[i - 1]!== 0) {\n        continue;\n      }\n      visited[i - 1] = 1;\n      if (i === m) {\n        result++;\n      }\n      if (n - i === m) {\n        result++;\n      }\n      if (m - i === m) {\n        result++;\n      }\n      const result2 = eulerianNum(n, m - i);\n      if (result2!== 0) {\n        result += result2;\n      }\n      visited[i - 1] = 0;\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  if (m < n || m > (n * (n - 1))) {\n    return -1;\n  }\n  let count = 0;\n  let swap = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - 1; j++) {\n      for (let k = 1; k < n - 1; k++) {\n        for (let l = 1; l < n - 1; l++) {\n          count++;\n          let swap = k;\n          k = l;\n          l = swap;\n        }\n      }\n    }\n  }\n  if (count === m) {\n    return n;\n  }\n  return -1;\n}\n", "\n  if (n % 2 === 1) {\n    return 2 * n * m + m + n;\n  } else {\n    return 2 * n * m + m;\n  }\n}\n", "\n  if (n === m) {\n    return 1;\n  }\n  return 0;\n}\n"]}
{"task_id": "MBJSP/104", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sortSublists(inputlist) {\n/**\n * * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n */", "entry_point": "sortSublists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]];\nvar x0 = sortSublists(arg00);\nvar v0 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]];\nvar x1 = sortSublists(arg10);\nvar v1 = [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]];\nvar x2 = sortSublists(arg20);\nvar v2 = [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const inputarr = inputlist.map(list => list.join(\" \"));\n    const sortedarr = inputarr.sort((a, b) => a.length > b.length? 1 : b.length - a.length);\n    return sortedarr;\n}\n", "\n  const sortedSublists = inputList.sort((a, b) => a.map(item => inputlist.findIndex(tup => tup.toString() === item)).sort((a, b) => a - b)).map(item => inputlist.filter(tup => tup.toString() === item));\n  return sortedSublists;\n}\n\nmodule.exports = {\n  succeeded: true,\n  output: {\n    numbers: [1, 2, 3, 4, 5, 6],\n    numbers2: [1, 2, 3, 4, 5, 6],\n    testTup: ['l', 'o', 'g'],\n    numbersstr: ['1', '2', '3', '4', '5', '6'],\n    multiplyElements: [1, 2, 3, 4, 5, 6],\n    sortSublists: ['l', ['o', 'g'], 'o', 'g', 'o', 'o'],\n    sortNumericStrings: ['6', '5', '4', '3', '2', '1']\n  }\n};\n```\n\n# Coding Questions\n\n## Input & Output\n\n```\n", "\n  return inputList.sort((a, b) => a.map(str => str.length).join(\"\").length - b.map(str => str.length).join(\"\").length);\n}\n", "\n  return inputlist.sort((a, b) => a.sort((a, b) => a.localeCompare(b)));\n}\n", "\n    const result = [];\n    const sortedLists = inputlist.sort((a, b) => a.sort().join(\"\") - b.sort().join(\"\"));\n    for (let i = 0; i < sortedLists.length; i++) {\n        result.push(sortedLists[i].sort((a, b) => a - b));\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/105", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction count(lst) {\n/**\n * * Write a JavaScript function to count true booleans in the given list.\n */", "entry_point": "count", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [true, false, true];\nvar x0 = count(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [false, false];\nvar x1 = count(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [true, true, true];\nvar x2 = count(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      result.push(1);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\n/**\n * Given a number n, return a new array with the numbers from 1 to n, except for every number that appears in the original array exactly once.\n * Expected result: [1,2,3,3,4,2,1].\n * @param {Number} num\n * @returns {Array}\n */\n", "\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  const count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  const count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = count[lst[i]] + 1 || 1;\n  }\n  return count;\n}\n", "\n  const num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      num++;\n    }\n  }\n  return num;\n}\n"]}
{"task_id": "MBJSP/106", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction addLists(testlist, testtup) {\n/**\n * * Write a function to add the given list to the given tuples.\n */", "entry_point": "addLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 7];\nvar arg01 = [9, 10];\nvar x0 = addLists(arg00, arg01);\nvar v0 = [9, 10, 5, 6, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [6, 7, 8];\nvar arg11 = [10, 11];\nvar x1 = addLists(arg10, arg11);\nvar v1 = [10, 11, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [7, 8, 9];\nvar arg21 = [11, 12];\nvar x2 = addLists(arg20, arg21);\nvar v2 = [11, 12, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    result.push(testtup[i] + testlist[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    result.push(testlist[i] + testtup[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  const list = [];\n  const tup = [];\n  for (let i = 0; i < testlist.length; i++) {\n    list.push(testlist[i]);\n    tup.push(testtup[i]);\n  }\n  list.forEach(el => {\n    result.push(el + testtup[0]);\n    tup.shift();\n  });\n  tup.forEach(el => {\n    result.push(el + testtup[testtup.length - 1]);\n    list.pop();\n  });\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    result.push(testlist[i] + testtup[i]);\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    result.push(testlist[i]);\n  }\n  for (let i = 0; i < testtup.length; i++) {\n    result.push(testtup[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/107", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countHexadecimal(l, r) {\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */", "entry_point": "countHexadecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 15;\nvar x0 = countHexadecimal(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = countHexadecimal(arg10, arg11);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar arg21 = 16;\nvar x2 = countHexadecimal(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = l; i <= r; i++) {\n    result.push(countHexadecimalInRange(i));\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = l; i <= r; i++) {\n    if (String.fromCharCode(i).match(/^[0-9a-fA-F]+$/)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  return l - r;\n}\n", "\n  const result = [];\n  for (let i = l; i <= r; i++) {\n    let hex = i.toString(16);\n    result.push(hex.length);\n  }\n  return result;\n}\n", "\n  const start = l.toString(16);\n  const end = r.toString(16);\n  let num = 0;\n  for (let i = start.length - 1; i >= 0; i--) {\n    num += (start[i] === '0'? 0 : 1) * Math.pow(16, start.length - 1 - i);\n  }\n  return num + hexadecimalCount(end);\n}\n"]}
{"task_id": "MBJSP/108", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction mergeSortedList(num1, num2, num3) {\n/**\n * * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n */", "entry_point": "mergeSortedList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 24, 15, 4, 5, 29, 110];\nvar arg01 = [19, 20, 11, 56, 25, 233, 154];\nvar arg02 = [24, 26, 54, 48];\nvar x0 = mergeSortedList(arg00, arg01, arg02);\nvar v0 = [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 5, 6, 8, 9];\nvar arg11 = [2, 5, 7, 11];\nvar arg12 = [1, 4, 7, 8, 12];\nvar x1 = mergeSortedList(arg10, arg11, arg12);\nvar v1 = [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nvar arg21 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg22 = [12, 74, 9, 50, 61, 41];\nvar x2 = mergeSortedList(arg20, arg21, arg22);\nvar v2 = [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const nums = [...num1,...num2,...num3];\n  let heap = nums.sort((a, b) => a - b).slice(0, 3);\n  const result = [];\n  while (heap.length) {\n    result.push(heap.shift());\n  }\n  return result;\n}\n", "\n  const result = [];\n  const queue = new Heap(elem => elem[1], []);\n  num1.forEach(num => queue.push([num, 1]));\n  num2.forEach(num => queue.push([num, 2]));\n  num3.forEach(num => queue.push([num, 3]));\n  while (!queue.isEmpty()) {\n    const num = queue.pop();\n    result.push(num[0]);\n    num[1] += 1;\n    if (num[1] < num1.length) queue.push(num);\n    if (num[1] < num2.length) queue.push(num);\n    if (num[1] < num3.length) queue.push(num);\n  }\n  return result;\n}\n", "\n  const sortedList = [num1, num2, num3].sort((a, b) => a - b);\n  const queue = new PriorityQueue();\n  sortedList.forEach(element => {\n    queue.push(element);\n  });\n  const result = [];\n  while (queue.size() > 0) {\n    result.push(queue.pop());\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const q = new PriorityQueue();\n  q.enqueue(num1);\n  q.enqueue(num2);\n  q.enqueue(num3);\n  while (!q.isEmpty()) {\n    const n = q.dequeue();\n    yield n;\n    if (q.isEmpty() || q.peek() < n) {\n      return;\n    }\n    q.enqueue(n);\n  }\n}\n", "\n    const nums = [num1, num2, num3];\n    const q = [];\n    let i = 0;\n    let c = 0;\n    let k = 0;\n    while (i < nums.length && c < 3) {\n        if (nums[i] > q[0]) {\n            q.shift();\n            q.push(nums[i]);\n        } else if (nums[i] < q[0]) {\n            q.shift();\n            q.push(nums[i]);\n        }\n        i++;\n        k++;\n        c++;\n    }\n    return q;\n}\n"]}
{"task_id": "MBJSP/109", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction oddEquivalent(s, n) {\n/**\n * * Write a JavaScript function to find the count of rotations of a binary string with odd value.\n */", "entry_point": "oddEquivalent", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"011001\";\nvar arg01 = 6;\nvar x0 = oddEquivalent(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"11011\";\nvar arg11 = 5;\nvar x1 = oddEquivalent(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"1010\";\nvar arg21 = 4;\nvar x2 = oddEquivalent(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    const chars = s.split(\"\"),\n        result = {};\n    for (let i = 0; i < chars.length; i++) {\n        const char = chars[i],\n            count = 0;\n        for (let j = 0; j < chars.length; j++) {\n            const char2 = chars[j];\n            if (char === char2) {\n                count++;\n            }\n        }\n        result[char] = count % 2;\n    }\n    return result;\n}\n", "\n  const result = [];\n  let b = ''.concat(s);\n  let r = ''.concat(s);\n  r = r.split('').reverse();\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += b;\n  }\n  result.push(r.split('').length - s.split('').length);\n  return result;\n}\n\n// Hints:\n// 1. Take a look at the definition of multiplication of two elements.\n// 2. To convert a binary string to a number, we have to use the radix 10.\n// 3. To convert a binary string to a number, we have to use the radix 10.\n// 4. To convert a binary string to a number, we have to use the radix 10.\n// 5. To convert a binary string to a number, we have to use the radix 10.\n// 6. To convert a binary string to a number, we have to use the radix 10.\n// 7. To convert a binary string to a number, we have to use the radix 10.\n// 8. To convert a binary string to a number, we have to use the radix 10.\n// 9. To convert a binary string to a number, we have to use the radix 10.\n// 10. To convert a binary string to a number, we have to use the radix 10.\n// 11. To convert a binary string to a number, we have to use the radix 10.\n// 12. To convert a binary string to a number, we have to use the radix 10.\n// 13. To convert a binary string to a number, we have to use the radix 10.\n// 14. To convert a binary string to a", "\n  const total = 0;\n  for (let i = 0; i < s.length; i++) {\n    const x = s.slice(i + 1, s.length);\n    if (s.slice(i, s.length) === x) {\n      total++;\n    }\n  }\n  return total;\n}\n", "\n    const count = 0;\n    const revStr = s.split('').reverse().join('');\n    let rotStr = s + revStr;\n    if (rotStr.length % 2 == 1) {\n        for (let i = 0; i < rotStr.length; i++) {\n            if (rotStr[i] === '0' || rotStr[i] === '1') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += countOdd(s.substr(i, n));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/110", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extractMissing(testlist, strtval, stopval) {\n/**\n * * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n */", "entry_point": "extractMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 9], [15, 34], [48, 70]];\nvar arg01 = 2;\nvar arg02 = 100;\nvar x0 = extractMissing(arg00, arg01, arg02);\nvar v0 = [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 2], [15, 19], [38, 50]];\nvar arg11 = 5;\nvar arg12 = 60;\nvar x1 = extractMissing(arg10, arg11, arg12);\nvar v1 = [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 2], [15, 19], [38, 50]];\nvar arg21 = 1;\nvar arg22 = 52;\nvar x2 = extractMissing(arg20, arg21, arg22);\nvar v2 = [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    const result = [];\n    let counter = 0;\n    for (let i = 0; i < testlist.length; i++) {\n        if (testlist[i] === strtval && counter < stopval - 1) {\n            result.push([strtval, counter + 1]);\n            counter++;\n        } else if (testlist[i] === stopval) {\n            result.push([strtval, counter]);\n            counter = 0;\n        }\n    }\n    return result;\n}\n", "\n  const result = [];\n  let maxcount = 0;\n  const set = {};\n  const counter = {};\n  for (let i = 0; i < testlist.length; i++) {\n    set[testlist[i]] = set[testlist[i]] + 1 || 1;\n    if (set[testlist[i]] > maxcount) {\n      maxcount = set[testlist[i]];\n    }\n  }\n  if (maxcount === 0) {\n    result.push(strtval);\n    result.push(stopval);\n    return result;\n  }\n  for (let i = 0; i < testlist.length; i++) {\n    counter[testlist[i]] = counter[testlist[i]] + 1 || 1;\n    if (counter[testlist[i]] === maxcount) {\n      result.push(testlist[i]);\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  let list = testlist.slice();\n  const start = strtval;\n  const end = stopval;\n  const diff = end - start;\n  const missing = [];\n  let counter = 0;\n  let i = 0;\n  if (diff!== 0) {\n    while (i < list.length - 1) {\n      if (list[i] + 1!== list[i + 1]) {\n        missing.push([start + counter, start + counter + diff + 1]);\n        counter = counter + diff + 1;\n      }\n      i++;\n    }\n    if (list[i] + 1!== list[i + 1]) {\n      missing.push([start + counter, start + counter + diff + 1]);\n    }\n  }\n  return missing;\n}\n", "\n  let set = [];\n  let seti = strtval;\n  testlist.forEach(el => {\n    if (el === seti) {\n      seti++;\n    } else {\n      set.push(seti);\n      seti++;\n    }\n  });\n  let result = [];\n  set.forEach(el => {\n    if (el === stopval) {\n      result.push(el);\n    }\n  });\n  return result;\n}\n//# sourceMappingURL=index.js.map\n", "\n  let result = [];\n  let start = strtval;\n  let end = stopval;\n  for (let i = 0; i < testlist.length; i++) {\n    if (testlist[i] === start) {\n      while (testlist[i] === end && i < testlist.length) {\n        i++;\n      }\n      if (end!== testlist[i]) {\n        result.push({ start, end });\n      }\n      i--;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/111", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction commonInNestedLists(nestedlist) {\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n */", "entry_point": "commonInNestedLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]];\nvar x0 = commonInNestedLists(arg00);\nvar v0 = [18, 12];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]];\nvar x1 = commonInNestedLists(arg10);\nvar v1 = [5, 23];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]];\nvar x2 = commonInNestedLists(arg20);\nvar v2 = [4];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  const nestedlistwithcommonElements = nestedlist.filter(", "\n  return (...lists) => {\n    let result = [];\n    let index = 0;\n    for (let i = 0; i < lists[0].length; i++) {\n      for (let j = index; j < lists.length; j++) {\n        if (lists[j][i] === lists[index][i]) {\n          result.push(lists[index][i]);\n          index = j;\n          break;\n        }\n      }\n    }\n    return result;\n  };\n}\n", "\n  return nestedlist.reduce((accumulator, current) => accumulator.filter(item => current.includes(item)).length > 0? accumulator : current);\n}\n", "\n  const list = nestedlist.map(list => list.map(list1 => list1.map(list2 => list2.map(list3 => list3)))));\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    for (let j = 0; j < list[i].length; j++) {\n      for (let k = 0; k < list[i][j].length; k++) {\n        for (let l = 0; l < list[i][j][k].length; l++) {\n          result.push(list[i][j][k][l]);\n        }\n      }\n    }\n  }\n  return result;\n}\n", "\n    return nestedList.reduce((previousValue, currentValue) => {\n        const currentList = currentValue.filter(currentItem => currentItem!== null);\n        const previousList = previousValue.filter(previousItem => previousItem!== null);\n        return currentList.concat(previousList).reduce((previousValue, currentValue) => {\n            const currentList = currentValue.filter(currentItem => currentItem!== null);\n            const previousList = previousValue.filter(previousItem => previousItem!== null);\n            return currentList.concat(previousList);\n        }, []);\n    }, []);\n}\n\n/**\n * DO NOT MODIFY THE LIST BELOW.\n * \n * For Loop (forEach, map, filter, etc.)\n * \n * Use the following loop to convert a list of strings to lower case and concatenate them together with a space between them:\n * \n * for (let i = 0; i < strings.length; i++) {\n *     strings[i] = strings[i].toLowerCase();\n *     strings[i] = strings[i].concat(\" \");\n * }\n */\nlet forloopstrings = [];\nfor (let i = 0; i < strings.length; i++) {\n    forloopstrings.push(strings[i].toLowerCase());\n    forloopstrings.push(\" \");\n}\n\n/**\n * \n * Map\n * \n * Use the following loop to map a "]}
{"task_id": "MBJSP/112", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction perimeter(diameter, height) {\n/**\n * * Write a JavaScript function to find the perimeter of a cylinder.\n */", "entry_point": "perimeter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = perimeter(arg00, arg01);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar x1 = perimeter(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 1;\nvar x2 = perimeter(arg20, arg21);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return diameter * 2 + height * 2;\n}\n", "\n  return Math.PI * diameter * height + Math.PI * diameter * (diameter - height);\n}\n", "\n  return (diameter * 2) + (diameter * height);\n}\n", "\n  return diameter * 2 + diameter * height;\n}\n", "\n    return diameter * 2 + (height * 2);\n}\n"]}
{"task_id": "MBJSP/113", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkInteger(text) {\n/**\n * * Write a function to check if a string represents an integer or not.\n */", "entry_point": "checkInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = checkInteger(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1\";\nvar x1 = checkInteger(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"12345\";\nvar x2 = checkInteger(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return parseInt(text) && isFinite(text);\n}\n", "\n  return!isNaN(parseInt(text, 10));\n}\n", "\n  return /^[0-9]*$/.test(text);\n}\n", "\n  if (text.length > 0) {\n    const firstChar = text[0];\n    if ((firstChar >= 48 && firstChar <= 57) || (text[0] === '-' && text.length > 1)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  // Write your code here\n  const result = text.match(/^[0-9]+$/);\n  return result;\n}\n"]}
{"task_id": "MBJSP/114", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction assignFreq(testlist) {\n/**\n * * Write a function to assign frequency to each tuple in the given tuple list.\n */", "entry_point": "assignFreq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]];\nvar x0 = assignFreq(arg00);\nvar v0 = \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]];\nvar x1 = assignFreq(arg10);\nvar v1 = \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]];\nvar x2 = assignFreq(arg20);\nvar v2 = \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const freq = [];\n  for (let i = 0; i < testlist.length; i++) {\n    freq.push({ test: testlist[i], freq: 1 });\n  }\n  return freq;\n}\n", "\n  const freqlist = [];\n  for (let i = 0; i < testlist.length; i++) {\n    const freq = {};\n    freq[testlist[i]] = freq[testlist[i]] + 1 || 1;\n    freqlist.push(freq);\n  }\n  return freqlist;\n}\n", "\n  const testTup = testlist.map(tup => new Tuple(tup));\n  testTup.forEach((tup) => {\n    tup.frequency = tup.value.split('').length;\n  });\n  return testTup;\n}\n", "\n  const result = [];\n  const testtup = testlist.map(tup => tup.split(','));\n  for (let i = 0; i < testtup.length; i++) {\n    const testtupi = testtup[i];\n    const frequency = {};\n    for (let j = 0; j < testtupi.length; j++) {\n      frequency[testtupi[j]] = frequency[testtupi[j]] || 1 || 0;\n    }\n    result.push({\n      tup: testtupi,\n      frequency\n    });\n  }\n  return result;\n}\n", "\n  const testtup = testlist.map(testtup => {\n    const freq = {};\n    freq[testtup[0]] = freq[testtup[0]] + 1 || 1;\n    return freq;\n  });\n  testtup.forEach(testtup => {\n    for (let i = 0; i < testtup.length; i++) {\n      if (testtup[i] in testtup) {\n        testtup[i] = testtup[i] + testtup[testtup[i]];\n      }\n    }\n  });\n  return testtup;\n}\n"]}
{"task_id": "MBJSP/115", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction emptyDit(list1) {\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */", "entry_point": "emptyDit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [{}, {}, {}];\nvar x0 = emptyDit(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [new Set([1,2]), {}, {}];\nvar x1 = emptyDit(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {};\nvar x2 = emptyDit(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let allEmpty = true;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (list1[i][j]!== undefined) {\n        allEmpty = false;\n      }\n    }\n  }\n  return allEmpty;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      result.push(list1[i][j]);\n    }\n  }\n  return result.length? false : true;\n}\n", "\n  // Write your code here\n  const testDict = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      testDict[i][list1[i][j]] = testDict[i][list1[i][j]] + 1 || 1;\n      if (testDict[i][list1[i][j]] === list1[i].length) return true;\n    }\n  }\n  return false;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    const isempty = list1[i].keys().join();\n    if (isempty!== '') {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== null) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/116", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction tupleToInt(nums) {\n/**\n * * Write a function to convert a given tuple of positive integers into an integer.\n */", "entry_point": "tupleToInt", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = tupleToInt(arg00);\nvar v0 = 123;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6];\nvar x1 = tupleToInt(arg10);\nvar v1 = 456;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7];\nvar x2 = tupleToInt(arg20);\nvar v2 = 567;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    result = result + nums[i];\n  }\n  return result;\n}\n", "\n  const result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    result = result + nums[i];\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (isinstance(nums[i], Number) && nums[i] >= 0) {\n      result.push(nums[i]);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n}\n", "\n  let result = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    result = result * 10 + nums[i];\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    result.push(Math.round(nums[i]));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/117", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction listToFloat(testlist) {\n/**\n * * Write a function to convert all possible convertible elements in the list to float.\n */", "entry_point": "listToFloat", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]];\nvar x0 = listToFloat(arg00);\nvar v0 = \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]];\nvar x1 = listToFloat(arg10);\nvar v1 = \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]];\nvar x2 = listToFloat(arg20);\nvar v2 = \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testFloatList = [];\n  for (let i = 0; i < testlist.length; i++) {\n    testFloatList.push(parseFloat(testlist[i]));\n  }\n  return testFloatList;\n}\n", "\n  const converted = [];\n  for (let i = 0; i < testList.length; i++) {\n    let convertedElement = (testList[i] + '').split('.');\n    if (convertedElement[1].length < 2) {\n      convertedElement[1] = convertedElement[1] + '0';\n    }\n    converted.push(convertedElement[0] + '.' + convertedElement[1]);\n  }\n  return converted;\n}\n", "\n    const result = [];\n    for (let i = 0; i < testlist.length; i++) {\n        if (testlist[i].indexOf('.') === -1) {\n            result.push(testlist[i] + '.00');\n        } else {\n            const intPart = testlist[i].split('.')[0];\n            const decimalPart = testlist[i].split('.')[1];\n            result.push(intPart + '.' + decimalPart);\n        }\n    }\n    return result;\n}\n", "\n  const result = [];\n  testlist.forEach(num => {\n    if (isNumeric(num)) {\n      result.push(parseFloat(num));\n    }\n  });\n  return result;\n}\n", "\n  return testlist.map(x => x.toString().replace(/,/g, \".\"))\n    .reduce((acc, val) => acc + val, \"\");\n}\n"]}
{"task_id": "MBJSP/118", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction stringToList(string) {\n/**\n * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n */", "entry_point": "stringToList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programming\";\nvar x0 = stringToList(arg00);\nvar v0 = [\"python\", \"programming\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"lists tuples strings\";\nvar x1 = stringToList(arg10);\nvar v1 = [\"lists\", \"tuples\", \"strings\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"write a program\";\nvar x2 = stringToList(arg20);\nvar v2 = [\"write\", \"a\", \"program\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return string.split('').filter(item => item!== '(').filter(item => item!== ')').map(item => item.toLowerCase());\n}\n", "\n  const result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.charAt(i));\n  }\n  return result;\n}\n", "\n  return string.split(\" \");\n}\n", "\n  const stringList = string.split(\" \");\n  return stringList;\n}\n", "\n  const elements = [];\n  const number = string.match(/(\\d+)/);\n  for (let i = 0; i < number.length; i++) {\n    elements.push(number[i]);\n  }\n  return elements;\n}\n"]}
{"task_id": "MBJSP/119", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction search(arr, n) {\n/**\n * * Write a JavaScript function to find the element that appears only once in a sorted array.\n */", "entry_point": "search", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 2, 3];\nvar arg01 = 5;\nvar x0 = search(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8];\nvar arg11 = 11;\nvar x1 = search(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 2, 3, 3, 4, 4];\nvar arg21 = 7;\nvar x2 = search(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let i = 0;\n  let j = arr.length - 1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (arr[mid] == n) {\n      return mid;\n    }\n    if (n < arr[mid]) {\n      j = mid - 1;\n    } else {\n      i = mid + 1;\n    }\n  }\n  return -1;\n}\n", "\n  const sortedArray = arr.sort();\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = 0;\n  while (start <= end) {\n    mid = start + (end - start) / 2;\n    if (sortedArray[mid] == n) {\n      return mid;\n    } else if (sortedArray[mid] > n) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return -1;\n}\n", "\n  const sortedArr = arr.sort();\n  for (let i = 0; i < arr.length; i++) {\n    if (sortedArr.indexOf(arr[i]) === arr.indexOf(arr[i])) {\n      return arr[i];\n    }\n  }\n  return undefined;\n}\n", "\n    const arr2 = arr.sort((a, b) => a - b);\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        const guess = arr2[high] - arr2[low];\n        if (guess == n) {\n            return true;\n        } else if (guess > n) {\n            high = high - 1;\n        } else {\n            low = low + 1;\n        }\n    }\n    return false;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let j;\n    for (j = 0; j < arr.length; j++) {\n      if (arr[i] === arr[j]) {\n        break;\n      }\n    }\n    if (j === arr.length) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/120", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxProductTuple(list1) {\n/**\n * * Write a function to find the maximum product from the pairs of tuples within a given list.\n */", "entry_point": "maxProductTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 7], [2, 6], [1, 8], [4, 9]];\nvar x0 = maxProductTuple(arg00);\nvar v0 = 36;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [15, 2], [5, 10]];\nvar x1 = maxProductTuple(arg10);\nvar v1 = 200;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 44], [10, 15], [20, 5], [12, 9]];\nvar x2 = maxProductTuple(arg20);\nvar v2 = 484;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length - 1; i++) {\n    for (let j = i + 1; j < list1.length; j++) {\n      const maxTuple = multiplyElements(list1[i], list1[j]);\n      if (maxTuple.length === list1[i].length + list1[j].length) {\n        result.push(maxTuple);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const sorted = list1.sort(multiplyElements);\n  return sorted[sorted.length - 1] * sorted[sorted.length - 2];\n}\n", "\n  const product = list1.reduce((a, b) => a * b);\n  const maxProducts = list1.reduce((a, b) => a > b? a : b);\n  const minProducts = list1.reduce((a, b) => a < b? a : b);\n  return product > maxProducts * minProducts? product : maxProducts * minProducts;\n}\n", "\n  const nums = list1.map(num => parseInt(num, 10));\n  const maxProduct = nums.reduce((a, b) => a > b? a : b);\n  const minProduct = nums.reduce((a, b) => a < b? a : b);\n  const maxProductPair = nums.reduce((a, b) => (a.product > b.product? a : b).product || (a.product < b.product? b : a).product || a.product || b.product);\n  return maxProductPair;\n}\n", "\n  let max = 0;\n  let tupmax = 0;\n  let tupmin = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = i + 1; j < list1.length; j++) {\n      tupmin = list1[i] * list1[j];\n      tupmax = list1[i] * list1[j];\n      if (tupmax > max) {\n        max = tupmax;\n      }\n      if (tupmin > max) {\n        max = tupmin;\n      }\n    }\n  }\n  return max;\n}\n```\n\n</section>\n"]}
{"task_id": "MBJSP/121", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkTriplet(a, n, sum, count) {\n/**\n * * Write a function to find the triplet with sum of the given array\n */", "entry_point": "checkTriplet", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 7, 4, 0, 9, 5, 1, 3];\nvar arg01 = 8;\nvar arg02 = 6;\nvar arg03 = 0;\nvar x0 = checkTriplet(arg00, arg01, arg02, arg03);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 4, 5, 6, 7, 8, 5, 9];\nvar arg11 = 8;\nvar arg12 = 6;\nvar arg13 = 0;\nvar x1 = checkTriplet(arg10, arg11, arg12, arg13);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 4, 2, 3, 5];\nvar arg21 = 5;\nvar arg22 = 15;\nvar arg23 = 0;\nvar x2 = checkTriplet(arg20, arg21, arg22, arg23);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (let i = 0; i < n; i++) {\n    if (a[i] === sum) {\n      count++;\n    }\n  }\n  return count > n;\n}\n", "\n  let sum2 = sum * n;\n  for (let i = 0; i < a.length - 2; i++) {\n    for (let j = i + 1; j < a.length - 1; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] == sum2) {\n          count++;\n          break;\n        }\n        if (k == a.length - 1) {\n          break;\n        }\n      }\n      if (count == n) {\n        break;\n      }\n    }\n    if (count == n) {\n      break;\n    }\n  }\n  return count;\n}\n", "\n  const result = [];\n  for (let i = 0; i < a.length - 2; i++) {\n    for (let j = i + 1; j < a.length - 1; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] == sum) {\n          count++;\n          result.push([a[i], a[j], a[k]]);\n        }\n      }\n    }\n  }\n  return result;\n}\n", "\n    count = count + 1;\n    if (count === n) {\n      return sum;\n    }\n    let sum1 = sum - a;\n    return checkTriplet(a, n, sum1, count);\n}\n", "\n  const testArray = [1, 3, 7, 9, 2];\n  const count = count + 1;\n  const sum = sum + a;\n  if (testArray.indexOf(a) === -1) {\n    count = checkTriplet(a + 1, n, sum, count);\n    return count;\n  }\n}\n"]}
{"task_id": "MBJSP/122", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction smartnumber(n) {\n/**\n * * Write a function to find n\u2019th smart number.\n */", "entry_point": "smartnumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = smartnumber(arg00);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 50;\nvar x1 = smartnumber(arg10);\nvar v1 = 273;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1000;\nvar x2 = smartnumber(arg20);\nvar v2 = 2664;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  ", "\n    const smartNumbers = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155];\n    return smartNumbers[n - 1];\n}\n", "\n  ", "\n  return Math.pow(n, 2) + Math.pow(n, 1) + n;\n}\n", "\n  const nthCitizen = new Array(n);\n  for (let i = 0; i < nthCitizen.length; i++) {\n    nthCitizen[i] = Math.random().toString(36).slice(2, 7);\n  }\n  const sortedNthCitizen = nthCitizen.sort((a, b) => a - b);\n  return sortedNthCitizen[n - 1];\n}\n"]}
{"task_id": "MBJSP/123", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction amicableNumbersSum(limit) {\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */", "entry_point": "amicableNumbersSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 999;\nvar x0 = amicableNumbersSum(arg00);\nvar v0 = 504;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9999;\nvar x1 = amicableNumbersSum(arg10);\nvar v1 = 31626;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 99;\nvar x2 = amicableNumbersSum(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let sum = 0,\n        count = 0;\n    for (let i = 1; i < limit; i++) {\n        const testNum = i;\n        const testSum = sumNumeric(testNum);\n        if (testSum === i) {\n            count++;\n            const testTup = tuples(testNum, testSum);\n            const testMultiply = multiplyElements(testTup);\n            const testSumMultiply = sumNumericStrings(testMultiply);\n            if (testSumMultiply === testNum) {\n                sum += testSum;\n            }\n        }\n    }\n    return sum;\n}\n\n// Run Code\nconsole.log(amicableNumbersSum(1000000));\n```\n\n</section>\n", "\n  const amicableNumbers = [];\n  const sum = []\n  for (let i = 1; i < limit; i++) {\n    if (isAmicable(i, getAmicableNumber(i))) {\n      amicableNumbers.push(i);\n      sum.push(getAmicableNumber(i));\n    }\n  }\n  const sumofAmicableNumbers = getSumOfAmicableNumbers(amicableNumbers, sum);\n  return sumofAmicableNumbers;\n}\n", "\n  // Write your code here\n  const sum = 0;\n  for (let i = 1; i < limit; i++) {\n    for (let j = i + 1; j < limit; j++) {\n      if (Math.abs(i - j) === Math.abs(j - i)) {\n        sum += i;\n      }\n    }\n  }\n  return sum;\n}\n", "\n  let result = 0;\n  for (let i = 1; i <= limit; i++) {\n    const sum = amicableNumbersSum(i);\n    if (sum == i) {\n      result += sum;\n    }\n  }\n  return result;\n}\n", "\n  const n = limit;\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    const amicableNumbers = getAmicableNumbers(i);\n    for (let j = 0; j < amicableNumbers.length; j++) {\n      if (i == amicableNumbers[j]) {\n        result.push(i);\n        break;\n      }\n    }\n  }\n  return result.reduce(sum);\n}\n"]}
{"task_id": "MBJSP/125", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findLength(string, n) {\n/**\n * * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n */", "entry_point": "findLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"11000010001\";\nvar arg01 = 11;\nvar x0 = findLength(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"10111\";\nvar arg11 = 5;\nvar x1 = findLength(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"11011101100101\";\nvar arg21 = 14;\nvar x2 = findLength(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const nums = stringToBinaryString(string).split('0').map(str => parseInt(str, 2));\n  let max = 0;\n  let oneCount = 0;\n  let zeroCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n      if (nums[i] == 0) zeroCount++;\n      else oneCount++;\n      if (oneCount == 0) {\n          zeroCount = 0;\n          oneCount = 1;\n      }\n      if (oneCount > 0 && zeroCount > 0) {\n          max = Math.max(max, oneCount - zeroCount);\n      }\n  }\n  return max;\n}\n", "\n    // Write your code here\n    const zeroCount = string.count('0');\n    const oneCount = string.count('1');\n    let max = Math.abs(zeroCount - oneCount);\n    if (zeroCount > oneCount) {\n        for (let i = 0; i < n; i++) {\n            if (zeroCount > oneCount) {\n                zeroCount--;\n                oneCount = string.count('1');\n            } else {\n                zeroCount = zeroCount + (string.length - i - 1);\n                oneCount--;\n            }\n            max = Math.max(max, Math.abs(zeroCount - oneCount));\n        }\n    } else {\n        for (let i = 0; i < n; i++) {\n            if (oneCount > zeroCount) {\n                oneCount--;\n                zeroCount = string.count('0');\n            } else {\n                oneCount = oneCount + (string.length - i - 1);\n                zeroCount--;\n            }\n            max = Math.max(max, Math.abs(zeroCount - oneCount));\n        }\n    }\n    return max;\n}\n", "\n  // Write your code here\n  const digits = string.split('');\n  const binary = [];\n  for (let i = 0; i < digits.length; i++) {\n    binary.push(digits[i] === '0'? 0 : 1);\n  }\n  const result = [];\n  for (let i = 0; i < binary.length - n + 1; i++) {\n    let subString = binary.slice(i, i + n);\n    let count0 = 0;\n    let count1 = 0;\n    for (let j = 0; j < subString.length; j++) {\n      if (subString[j] === 0) {\n        count0++;\n      } else {\n        count1++;\n      }\n    }\n    result.push(Math.abs(count0 - count1));\n  }\n  return Math.max.apply(null, result);\n}\n", "\n  let result = 0;\n  let countZeros = 0;\n  let countOnes = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '1') {\n      countOnes++;\n    } else if (string[i] === '0') {\n      countZeros++;\n    }\n    if (countZeros - countOnes >= n) {\n      result = Math.max(countZeros - countOnes, result);\n    }\n    countZeros = 0;\n    countOnes = 0;\n  }\n  return result;\n}\n", "\n  const arr = string.split('0'), len = arr.length;\n  const zeroCount = arr.filter(item => item === '0').length, oneCount = arr.filter(item => item === '1').length;\n  if (zeroCount === 0) {\n    return oneCount;\n  } else {\n    return (len - zeroCount) - oneCount;\n  }\n}\n"]}
{"task_id": "MBJSP/126", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sum(a, b) {\n/**\n * * Write a JavaScript function to find the sum of common divisors of two given numbers.\n */", "entry_point": "sum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 15;\nvar x0 = sum(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 100;\nvar arg11 = 150;\nvar x1 = sum(arg10, arg11);\nvar v1 = 93;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 6;\nvar x2 = sum(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let divisors = [];\n  for (let i = 1; i < (a + b); i++) {\n    if (a % i === 0 && b % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return divisors.reduce((a, b) => a + b, 0);\n}\n", "\n  return Math.floor(a / Math.gcd(a, b)) + Math.floor(b / Math.gcd(a, b));\n}\n", "\n  return a + b;\n}\n", "\n  let temp = [a, b];\n  const sortedNumbers = temp.sort((a, b) => a - b);\n  let a = sortedNumbers[0];\n  let b = sortedNumbers[1];\n  let sum = 0;\n  let x = a % b;\n  if (x === 0) {\n    return b * (a + b);\n  } else {\n    a = b;\n    b = x;\n    x = a % b;\n  }\n  while (x!== 0) {\n    sum += x;\n    a = b;\n    b = x;\n    x = a % b;\n  }\n  sum += a + b;\n  return sum;\n}\n", "\n  const num1 = a;\n  const num2 = b;\n  let sum = 0;\n  for (let i = 1; i <= num1 && i <= num2; i++) {\n    if (num1 % i === 0 && num2 % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/127", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction multiplyInt(x, y) {\n/**\n * * Write a function to multiply two integers without using the * operator in JavaScript.\n */", "entry_point": "multiplyInt", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = multiplyInt(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 10;\nvar x1 = multiplyInt(arg10, arg11);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 8;\nvar x2 = multiplyInt(arg20, arg21);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return x * y;\n}\n", "\n  return x * y;\n}\n", "\n  return x * y;\n}\n", "\n  const result = x * y;\n  return result;\n}\n", "\n  const result = x * y;\n  return result;\n}\n"]}
{"task_id": "MBJSP/128", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction longWords(n, str) {\n/**\n * * Write a function to shortlist words that are longer than n from a given list of words.\n */", "entry_point": "longWords", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = \"python is a programming language\";\nvar x0 = longWords(arg00, arg01);\nvar v0 = [\"python\", \"programming\", \"language\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = \"writing a program\";\nvar x1 = longWords(arg10, arg11);\nvar v1 = [\"writing\", \"program\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = \"sorting list\";\nvar x2 = longWords(arg20, arg21);\nvar v2 = [\"sorting\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str.split(\" \").filter(word => word.length > n);\n}\n", "\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].length > n) {\n      result.push(str[i]);\n    }\n  }\n  return result;\n}\n", "\n  return str.split(' ').filter(word => word.length > n);\n}\n", "\n  let result = [];\n  const strarr = str.split(/\\s+/);\n  for (let i = 0; i < strarr.length; i++) {\n    if (strarr[i].length > n) {\n      result.push(strarr[i]);\n    }\n  }\n  return result;\n}\n", "\n  return str.split(\" \").filter(word => word.length > n);\n}\n"]}
{"task_id": "MBJSP/129", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction magicSquareTest(mymatrix) {\n/**\n * * Write a function to calculate magic square.\n */", "entry_point": "magicSquareTest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]];\nvar x0 = magicSquareTest(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 7, 6], [9, 5, 1], [4, 3, 8]];\nvar x1 = magicSquareTest(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 7, 6], [9, 5, 1], [4, 3, 7]];\nvar x2 = magicSquareTest(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < mymatrix.length; i++) {\n    const sum = 0;\n    for (let j = 0; j < mymatrix[0].length; j++) {\n      sum = sum + mymatrix[i][j];\n    }\n    result.push(sum);\n  }\n  for (let i = 0; i < mymatrix.length; i++) {\n    const sum = 0;\n    for (let j = 0; j < mymatrix[0].length; j++) {\n      sum = sum + mymatrix[j][i];\n    }\n    result.push(sum);\n  }\n  return result;\n}\n", "\n  const rows = mymatrix.length;\n  const cols = mymatrix[0].length;\n  const magicSquare = [];\n  if (rows!== cols) {\n    return false;\n  }\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push(mymatrix[i][j]);\n    }\n    magicSquare.push(row);\n  }\n  const sum = 0;\n  for (let i = 0; i < rows; i++) {\n    sum += magicSquare[i][i];\n  }\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (i === j) {\n        if (magicSquare[i][j]!== sum) {\n          return false;\n        }\n      } else {\n        if (magicSquare[i][j]!== magicSquare[j][i]) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n", "\n  const sum = 0;\n  const square = mymatrix.map(squareEl => squareEl.map(multiplyElements));\n  square.forEach((row, i) => {\n    for (let j = 0; j < row.length; j++) {\n      sum += row[j];\n    }\n  });\n  return sum === Math.floor(square.reduce((a, b) => a + b, 0)) || square.every(row => row.every(x => x === sum)) && sum!== 0;\n}\n\n", "\n  const n = mymatrix.length;\n  const magic = true;\n  for (let i = 1; i < n; i++) {\n    if (mymatrix[i][i]!= i + 1) {\n      magic = false;\n      break;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (mymatrix[i][j]!= i + (j + 1)) {\n        magic = false;\n        break;\n      }\n    }\n  }\n  return magic;\n}\n", "\n  const sum = 0;\n  for (let i = 0; i < mymatrix.length; i++) {\n    for (let j = 0; j < mymatrix.length; j++) {\n      sum += mymatrix[i][j];\n    }\n  }\n  return sum === Math.floor(mymatrix.length * mymatrix.length / 2);\n}\n"]}
{"task_id": "MBJSP/130", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxOccurrences(nums) {\n/**\n * * Write a function to find the item with maximum frequency in a given list.\n */", "entry_point": "maxOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2];\nvar x0 = maxOccurrences(arg00);\nvar v0 = [2, 5];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18];\nvar x1 = maxOccurrences(arg10);\nvar v1 = [8, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10];\nvar x2 = maxOccurrences(arg20);\nvar v2 = [20, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const counts = nums.reduce((counts, item) => {\n    counts[item] = counts[item] + 1 || 1;\n    return counts;\n  }, {});\n  const result = Object.keys(counts).reduce((max, item) => {\n    if (counts[item] > max) {\n      max = counts[item];\n      return item;\n    }\n    return result;\n  }, null);\n  return result;\n}\n", "\n  // Write your code here\n  const frequency = {};\n  for (let i = 0; i < nums.length; i++) {\n    frequency[nums[i]] = frequency[nums[i]] + 1 || 1;\n  }\n  const max = {};\n  for (let i in frequency) {\n    max[i] = frequency[i];\n    if (max[i] > max[max]) {\n      max[max] = i;\n    }\n  }\n  return max[max];\n}\n", "\n  const counter = {};\n  for (let i = 0; i < nums.length; i++) {\n    counter[nums[i]] = counter[nums[i]] + 1 || 1;\n  }\n  return Object.keys(counter).reduce((max, key) => {\n    return max > counter[key]? max : counter[key];\n  }, 0);\n}\n", "\n  const max = {};\n  for (let num of nums) {\n    max[num] = max[num] + 1 || 1;\n  }\n  return nums.reduce((maxOccurrences, num) => {\n    return max[num] > maxOccurrences? [num, max[num]] : maxOccurrences;\n  }, [-1, -1]);\n}\n", "\n  const numsstr = nums.map(num => num.toString());\n  const numsOccur = numsstr.map(num => nums.findIndex(el => el === num))\n  return numsOccur.reduce((a, b) => (a.toString() === b.toString())? b : a);\n}\n"]}
{"task_id": "MBJSP/131", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction reverseVowels(str1) {\n/**\n * * Write a JavaScript function to reverse only the vowels of a given string.\n */", "entry_point": "reverseVowels", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Python\";\nvar x0 = reverseVowels(arg00);\nvar v0 = \"Python\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"USA\";\nvar x1 = reverseVowels(arg10);\nvar v1 = \"ASU\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = reverseVowels(arg20);\nvar v2 = \"ab\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowelsReversed = str1.split(\"\").map((str, index) => {\n    if (vowels.includes(str)) {\n      return str;\n    }\n    return \"\";\n  });\n  return vowelsReversed.join(\"\");\n}\n", "\n  let vowels = \"aeiou\";\n  let newStr = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (vowels.indexOf(str1[i])!== -1) {\n      newStr += str1[i];\n    }\n  }\n  return newStr;\n}\n", "\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let reverseVowels = '';\n  for (let i = 0; i < str1.length; i++) {\n    let char = str1[i];\n    if (vowels.indexOf(char)!== -1) {\n      reverseVowels = char + reverseVowels;\n    }\n  }\n  return reverseVowels;\n}\n", "\n    let vowels = 'aeiouAEIOU';\n    let reverseStr = '';\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (vowels.indexOf(str[i])!== -1) {\n            reverseStr += str[i];\n        }\n    }\n    return reverseStr;\n}\n", "\n  const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n  let str2 = '';\n  for (let i = 0; i < str1.length; i++) {\n    if (vowels.has(str1[i])) {\n      str2 = str2 + str1[i];\n    }\n  }\n  return str2;\n}\n"]}
{"task_id": "MBJSP/132", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction tupString(tup1) {\n/**\n * * Write a function to convert tuple to a string.\n */", "entry_point": "tupString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"];\nvar x0 = tupString(arg00);\nvar v0 = \"exercises\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar x1 = tupString(arg10);\nvar v1 = \"python\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"];\nvar x2 = tupString(arg20);\nvar v2 = \"program\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return tup1.join(', ');\n}\n", "\n    const test = {\n        test: tup1,\n    };\n    const str = JSON.stringify(test);\n    return str;\n}\n", "\n  return tup1.join(',');\n}\n", "\n  let tup2str = tup1.map((num) => num.toString()).join(\" \");\n  return tup2str;\n}\n", "\n  return tup1.join(',');\n}\n\n// Run Code\n\nconst sortNumberOfElements = numbers.sort((a, b) => a - b);\nconsole.log(sortNumberOfElements);\n\nconst sortNumericStrings = sortNumericStrings(numbers);\nconsole.log(sortNumericStrings);\n\nconst multiplyElements = multiplyElements(numbers);\nconsole.log(multiplyElements);\n\nconst tupString = tupString(numbers);\nconsole.log(tupString);\n\nconst sortTupOfStrings = sortNumericStrings(tupString);\nconsole.log(sortTupOfStrings);\n"]}
{"task_id": "MBJSP/133", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumNegativenum(nums) {\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n */", "entry_point": "sumNegativenum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x0 = sumNegativenum(arg00);\nvar v0 = -32;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 15, -14, 13, -18, 12, -20];\nvar x1 = sumNegativenum(arg10);\nvar v1 = -52;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, -65, 57, 39, 152, -639, 121, 44, 90, -190];\nvar x2 = sumNegativenum(arg20);\nvar v2 = -894;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.reduce((total, val) => total + (val < 0? val : 0), 0);\n}\n", "\n  return nums.reduce((a, b) => a + b)\n}\n", "\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] < 0) {\n            sum += nums[i];\n        }\n    }\n    return sum;\n}\n", "\n  return nums.reduce((a, b) => a + b, 0) * -1;\n}\n", "\n  const result = [];\n  const addNegativeNumbers = nums => nums.filter(num => num < 0).map(num => num * -1);\n  for (let i = 0; i < nums.length; i++) {\n    result.push(nums[i] + addNegativeNumbers(nums[i]));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/134", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkLast(arr, n, p) {\n/**\n * * Write a JavaScript function to check whether the last element of given array is even or odd after performing an operation p times.\n */", "entry_point": "checkLast", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 7, 10];\nvar arg01 = 3;\nvar arg02 = 1;\nvar x0 = checkLast(arg00, arg01, arg02);\nvar v0 = \"ODD\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3];\nvar arg11 = 2;\nvar arg12 = 3;\nvar x1 = checkLast(arg10, arg11, arg12);\nvar v1 = \"EVEN\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 3;\nvar arg22 = 1;\nvar x2 = checkLast(arg20, arg21, arg22);\nvar v2 = \"ODD\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const numArr = arr.map(num => parseInt(num, 10));\n  const sortedNumArr = numArr.sort((a, b) => a - b);\n  let isOdd = numArr[numArr.length - 1] % 2!== 0;\n  for (let i = 0; i < p; i++) {\n    if (isOdd) {\n      isOdd =!isOdd;\n    }\n  }\n  return isOdd? sortedNumArr[sortedNumArr.length - 1] % 2 : sortedNumArr[sortedNumArr.length - 1];\n}\n", "\n  const isOdd = n % 2!== 0;\n  let result = \"\";\n  for (let i = 0; i < n; i++) {\n    if (i === p - 1) {\n      if (arr[i] % 2 === 0) {\n        result = \"even\";\n      } else {\n        result = \"odd\";\n      }\n    }\n  }\n  if (result === \"even\") {\n    return true;\n  } else {\n    return false;\n  }\n}\n// When you start working on this problem, use this approach on the example test array `testtup` and the solution ", "\n  for (let i = 0; i < p; i++) {\n    arr.shift();\n  }\n  let last = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    last = last + arr[i];\n  }\n  return last % 2!== 0? true : false;\n}\n", "\n    let testTup;\n    for (let i = 0; i < arr.length; i++) {\n        if (i === arr.length - 1) {\n            testTup = [arr[i], n];\n        } else {\n            testTup.push(arr[i]);\n        }\n    }\n    const result = [];\n    for (let i = 0; i < p; i++) {\n        if (testTup[testTup.length - 1] % 2 === 0) {\n            result.push(true);\n        } else {\n            result.push(false);\n        }\n    }\n    return result;\n}\n", "\n  let last = arr[arr.length - 1];\n  for (let i = 0; i < p; i++) {\n    last = last / n;\n    last = last % 2 === 0? 'even' : 'odd';\n  }\n  return last;\n}\n"]}
{"task_id": "MBJSP/135", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction hexagonalNum(n) {\n/**\n * * Write a function to find the nth hexagonal number.\n */", "entry_point": "hexagonalNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = hexagonalNum(arg00);\nvar v0 = 190;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = hexagonalNum(arg10);\nvar v1 = 45;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = hexagonalNum(arg20);\nvar v2 = 91;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n === 0) {\n    return 1;\n  }\n  const base = n * (n + 1) / 2;\n  const addNum = n * (n + 3) / 2;\n  const hexagonalNum = base + addNum;\n  return hexagonalNum;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i * (i + 1) / 2);\n  }\n  return result[n - 1];\n}\n", "\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(Math.sqrt(Math.pow(i, 2) + (4 * n - 4 * i)));\n  }\n  return result[n - 1];\n}\n", "\n  const getNum = (n) => {\n    const num = n * (n + 1) / 2;\n    return num;\n  };\n  const getHexNum = (num) => {\n    const sum = (num * (num + 1)) / 2;\n    return getNum(sum);\n  };\n  const result = [getNum(1), getHexNum(1), getNum(2), getHexNum(2), getNum(3), getHexNum(3), getNum(4), getHexNum(4), getNum(5), getHexNum(5), getNum(6), getHexNum(6)];\n  return result.map(num => num).sort((a, b) => b - a).reverse()[0];\n}\n", "\n  if (n > 0) {\n    const hexNum = (n * (2 * n - 1)) / 2;\n    return hexNum;\n  } else {\n    return -1;\n  }\n}\n"]}
{"task_id": "MBJSP/136", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction calElectbill(units) {\n/**\n * * Write a function to calculate electricity bill.\n */", "entry_point": "calElectbill", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 75;\nvar x0 = calElectbill(arg00);\nvar v0 = 246.25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 265;\nvar x1 = calElectbill(arg10);\nvar v1 = 1442.75;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = calElectbill(arg20);\nvar v2 = 327.5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const unitsSum = units.reduce((acc, val) => acc + val, 0);\n  return unitsSum * 25;\n}\n", "\n    // Write your code here\n    let totalbill = 0;\n    const bill = [];\n    bill[0] = \"Select Unit\";\n    bill[units] = \"Total Bill: \" + units * 100;\n    return bill;\n}\n", "\n    const result = [];\n    for (let i = 0; i < units.length; i++) {\n        result.push(units[i] * 3.85);\n    }\n    return result;\n}\n", "\n  const maxUnits = units.length;\n  const totalBill = [];\n  for (let i = 0; i < maxUnits - 1; i++) {\n    const unitBill = units[i] * units[i + 1];\n    totalBill.push(unitBill);\n  }\n  const unitBill = units[maxUnits - 1] * units[0];\n  totalBill.push(unitBill);\n  return totalBill;\n}\n", "\n  return units * 0.035;\n}\n"]}
{"task_id": "MBJSP/137", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction zeroCount(nums) {\n/**\n * * Write a function to find the ration of zeroes in an array of integers.\n */", "entry_point": "zeroCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nvar x0 = zeroCount(arg00);\nvar v0 = 0.15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nvar x1 = zeroCount(arg10);\nvar v1 = 0.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x2 = zeroCount(arg20);\nvar v2 = 0.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const zeroes = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      zeroes.push(i);\n    }\n  }\n  return zeroes;\n}\nconst sample = [1, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2", "\n  const test = nums.filter(num => num === 0);\n  return test.length / nums.length;\n}\n", "\n    let number = 0;\n    let zeroCount = 0;\n    for (let i = 0; i < nums.length; i++) {\n        number += nums[i];\n        if (nums[i] === 0) {\n            zeroCount++;\n        }\n    }\n    return zeroCount / number;\n}\n", "\n  let numberOfZeroes = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      numberOfZeroes++;\n    }\n  }\n  return (numberOfZeroes / nums.length) * 100;\n}\n", "\n  const zeroCount = {};\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      zeroCount[i] = zeroCount[i] + 1 || 1;\n    }\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (zeroCount[i] === 0) {\n      result.push(nums[i] / nums[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/138", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isSumOfPowersOfTwo(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n */", "entry_point": "isSumOfPowersOfTwo", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = isSumOfPowersOfTwo(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = isSumOfPowersOfTwo(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 14;\nvar x2 = isSumOfPowersOfTwo(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = true;\n  const counter = {};\n  for (let i = 1; i <= n; i++) {\n    counter[i] = counter[i] + 1 || 1;\n    if (counter[i] > n / 2) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  return isPowerOfTwo(parseInt(n, 10));\n}\n", "\n  let result = false;\n  for (let i = 0; i < 32; i++) {\n    if (Math.pow(2, i) === n) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  let isPrime = false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    } else {\n      isPrime = true;\n    }\n  }\n  return isPrime;\n}\n", "\n  let i = 0;\n  const result = [];\n  while (n) {\n    if (n % 2 === 0) {\n      result.push(0);\n    } else if (n % 2 === 1) {\n      result.push(1);\n      n -= i;\n    }\n    i++;\n  }\n  return result.length === n + 1;\n}\n"]}
{"task_id": "MBJSP/139", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction circleCircumference(r) {\n/**\n * * Write a function to find the circumference of a circle.\n */", "entry_point": "circleCircumference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = circleCircumference(arg00);\nvar v0 = 62.830000000000005;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = circleCircumference(arg10);\nvar v1 = 31.415000000000003;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = circleCircumference(arg20);\nvar v2 = 25.132;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const PI = 3.14159;\n  const circumference = PI * 2 * r;\n  return circumference;\n}\n", "\n  const \u03c0 = 3.14159265359;\n  const circumference = 2 * \u03c0 * r;\n  return circumference;\n}\n", "\n  return 2 * PI * r;\n}\n", "\n  const radian = 2 * Math.PI;\n  const circumference = radian * r;\n  return circumference;\n}\n", "\n  return Math.PI * 2 * r;\n}\n"]}
{"task_id": "MBJSP/140", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extractSingly(testlist) {\n/**\n * * Write a function to extract elements that occur singly in the given tuple list.\n */", "entry_point": "extractSingly", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4, 5], [4, 5, 7], [1, 4]];\nvar x0 = extractSingly(arg00);\nvar v0 = [3, 4, 5, 7, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 2, 3], [7, 8]];\nvar x1 = extractSingly(arg10);\nvar v1 = [1, 2, 3, 4, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 8, 9], [10, 11, 12], [10, 11]];\nvar x2 = extractSingly(arg20);\nvar v2 = [7, 8, 9, 10, 11, 12];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let nums = [];\n  for (let i = 0; i < testlist.length; i++) {\n    if (testlist[i] % 2 === 1) {\n      nums.push(testlist[i]);\n    }\n  }\n  return nums;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testList.length; i++) {\n    if (testList[i]!== testList[i + 1]) {\n      result.push(testList[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    if (testlist[i] === testlist[i + 1]) {\n      result.push(testlist[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (testlist.indexOf(testTup[i]) > -1) {\n      result.push(testTup[i]);\n    }\n  }\n  return result;\n}\n", "\n  const singly = [];\n  let num = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    for (let j = 0; j < testTup[i].length; j++) {\n      num = testTup[i][j];\n      if (singly.indexOf(num) === -1) {\n        singly.push(num);\n      }\n    }\n  }\n  return singly;\n}\n"]}
{"task_id": "MBJSP/141", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction pancakeSort(nums) {\n/**\n * * Write a function to sort a list of elements using pancake sort.\n */", "entry_point": "pancakeSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [15, 79, 25, 38, 69];\nvar x0 = pancakeSort(arg00);\nvar v0 = [15, 25, 38, 69, 79];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [98, 12, 54, 36, 85];\nvar x1 = pancakeSort(arg10);\nvar v1 = [12, 36, 54, 85, 98];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [41, 42, 32, 12, 23];\nvar x2 = pancakeSort(arg20);\nvar v2 = [12, 23, 32, 41, 42];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let start = 0;\n  let end = nums.length - 1;\n  let endindex = end;\n  let array = nums;\n  while (start < end) {\n    // the last swap is the index of end\n    for (let i = start; i <= end; i++) {\n      const temp = array[i];\n      array[i] = array[endindex];\n      array[endindex] = temp;\n      endindex--;\n    }\n    start++;\n  }\n  return array;\n}\n", "\n  let start = nums.length;\n  let end = 0;\n  while (nums[start - 1] > 0) {\n    start--;\n    end++;\n  }\n  const result = [...nums];\n  for (let i = 0; i < nums.length; i++) {\n    if (i < start) {\n      continue;\n    } else {\n      const tmp = result[start];\n      result[start] = result[i];\n      result[i] = tmp;\n    }\n  }\n  return result;\n}\n", "\n  const arr = nums.map(num => parseInt(num, 10));\n  const sorted = arr.sort((a, b) => a - b);\n  let num = 0;\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(sorted.length - num);\n    num++;\n  }\n  return result;\n}\n", "\n  const max = nums.reduce((total, num) => {\n    return num > total? num : total;\n  }, 0);\n  const result = [];\n  for (let i = max; i >= 0; i--) {\n    for (let j = 0; j < nums.length; j++) {\n      if (i === nums[j]) {\n        result.push(i);\n        nums.splice(j, 1);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let maxLength = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > maxLength) {\n      maxLength = nums[i];\n    }\n  }\n  let step = maxLength;\n  let sortedArray = [];\n  while (step > 1) {\n    for (let i = 0; i < nums.length; i++) {\n      if (nums[i] > step) {\n        let num = nums[i];\n        nums[i] = nums[i - 1];\n        nums[i - 1] = num;\n      }\n    }\n    step--;\n  }\n  for (let i = nums.length - 1; i >= 0; i--) {\n    sortedArray.push(nums[i]);\n  }\n  return sortedArray;\n}\n"]}
{"task_id": "MBJSP/142", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countSamepair(list1, list2, list3) {\n/**\n * * Write a function to count the same pair in three given lists.\n */", "entry_point": "countSamepair", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8];\nvar arg01 = [2, 2, 3, 1, 2, 6, 7, 9];\nvar arg02 = [2, 1, 3, 1, 2, 6, 7, 9];\nvar x0 = countSamepair(arg00, arg01, arg02);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8];\nvar arg11 = [2, 2, 3, 1, 2, 6, 7, 8];\nvar arg12 = [2, 1, 3, 1, 2, 6, 7, 8];\nvar x1 = countSamepair(arg10, arg11, arg12);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 2, 6, 7, 8];\nvar arg21 = [2, 2, 3, 1, 2, 6, 7, 8];\nvar arg22 = [2, 1, 3, 1, 2, 6, 7, 8];\nvar x2 = countSamepair(arg20, arg21, arg22);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const list1list2 = list1.filter(list2Item => list2Item === list2[0]);\n  const list1list3 = list1.filter(list3Item => list3Item === list3[0]);\n  const list2list3 = list2.filter(list3Item => list3Item === list3[0]);\n  let result = 0;\n  result += list1list2.length;\n  result += list1list3.length;\n  result += list2list3.length;\n  return result;\n}\n", "\n  // Write your code here\n  const set1 = list1.filter(i => i.val == list2[0].val);\n  const set2 = list2.filter(i => i.val == list3[0].val);\n  return set1.length + set2.length;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      for (let k = 0; k < list3.length; k++) {\n        if ((list1[i] === list2[j]) && (list2[j] === list3[k]) && (list3[k]!== list1[i])) {\n          result.push({\n              list1: list1[i],\n              list2: list2[j],\n              list3: list3[k],\n              num: list1[i] * list2[j] * list3[k]\n            });\n        }\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let i = 0, j = 0, k = 0;\n  while (i < list1.length && j < list2.length && k < list3.length) {\n    if (list1[i] === list2[j] && list2[j] === list3[k]) {\n      result.push({ list1: list1[i], list2: list2[j], list3: list3[k] });\n      i++;\n      j++;\n      k++;\n    }\n    else if (list1[i] < list2[j]) {\n      i++;\n    }\n    else if (list2[j] < list3[k]) {\n      j++;\n    }\n    else {\n      k++;\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const result = {};\n  for (let i = 0; i < list1.length; i++) {\n    const num1 = list1[i];\n    for (let j = 0; j < list2.length; j++) {\n      const num2 = list2[j];\n      if (list3.indexOf(num1 + num2)!== -1) {\n        if (result[num1] == null) {\n          result[num1] = 1;\n        } else {\n          result[num1] = result[num1] + 1;\n        }\n        if (result[num2] == null) {\n          result[num2] = 1;\n        } else {\n          result[num2] = result[num2] + 1;\n        }\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/143", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findLists(input) {\n/**\n * * Write a function to find number of lists present in the given tuple.\n */", "entry_point": "findLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 4], [5, 6, 7, 8]];\nvar x0 = findLists(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [9, 8, 7, 6, 5, 4, 3, 2, 1];\nvar x1 = findLists(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testTup = input.map(elem => parseInt(elem, 10));\n  const n = Math.sqrt(testTup.reduce((a, b) => a + b));\n  const squaredTup = testTup.map(elem => parseInt(elem, 10) * parseInt(elem, 10));\n  const visited = {};\n  return squaredTup.filter(elem => {\n    if (visited[elem] === undefined) {\n      visited[elem] = 1;\n      return true;\n    }\n  }).length;\n}\n", "\n  return input.map(elem => elem.length).reduce((acc, elem) => acc + elem, 0);\n}\n", "\n  let result = 0;\n  let counter = 0;\n  for (let i = 0; i < input.length; i++) {\n    for (let j = 0; j < input[i].length; j++) {\n      counter++;\n    }\n    result += counter;\n    counter = 0;\n  }\n  return result;\n}\n", "\n  let result = 0;\n  const arr = [];\n  for (let i = 0; i < input.length; i++) {\n    arr.push(input[i][0]);\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 1) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  return [...input].filter(testList => {\n    for (let i = 0; i < testList.length - 1; i++) {\n      if (testList[i] === testList[i + 1]) {\n        return false;\n      }\n    }\n    return true;\n  }).length;\n}\n"]}
{"task_id": "MBJSP/144", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumPairs(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of absolute differences in all pairs of the given array.\n */", "entry_point": "sumPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 8, 9, 15, 16];\nvar arg01 = 5;\nvar x0 = sumPairs(arg00, arg01);\nvar v0 = 74;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = 4;\nvar x1 = sumPairs(arg10, arg11);\nvar v1 = 10;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 7, 9, 11, 14];\nvar arg21 = 9;\nvar x2 = sumPairs(arg20, arg21);\nvar v2 = 188;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return arr.reduce((total, value) => total + Math.abs(value - arr[n - 1]), 0);\n}\n", "\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      result += Math.abs(arr[i] - arr[j]);\n    }\n  }\n  return result;\n}\n", "\n  const sum = arr.reduce((a, b) => a + b, 0);\n  const result = arr.reduce((a, b) => a + Math.abs(b - a), sum);\n  return result;\n}\n", "\n    const abs = (a, b) => Math.abs(a - b);\n    return arr.reduce((sum, elem, i, arr) => sum + abs(elem, arr[i]), 0);\n}\n", "\n  const result = {};\n  const diffArray = arr.map(num => Math.abs(num - 0));\n  const sum = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    sum += diffArray[i];\n  }\n  result[n] = sum;\n  return result;\n}\nconst inputs = [\n    [[3, 2, 1], 3],\n    [[3, 2, 1], 1],\n    [[3, 2, 1], 2],\n    [[3, 2, 1], 3],\n    [[3, 2, 1], 4],\n    [[1, 2], 2],\n    [[1, 2], 3],\n    [[1, 2], 4],\n    [[1, 2], 5],\n    [[1, 2], 6],\n    [[1, 2], 7],\n    [[1, 2], 8],\n    [[1, 2], 9],\n    [[2, 3], 1],\n    [[2, 3], 2],\n    [[2, 3], 3],\n    [[2, 3], 4],\n    [[2, 3], 5],\n    [[2, 3], 6],\n    [[2, 3], 7],\n    [[2, 3], 8],\n    [[2, 3], 9],\n    [[3, 2], 1],\n    [[3, 2], 2],\n    [[3, 2], 3],\n    [[3, 2], 4],\n    [[3, 2], 5],\n    [[3, 2], 6],\n    [[3, 2], 7],\n    [[3, 2], 8],\n    [[3, 2], 9],\n    [[3, 1, 5, 6], 1],\n    [[3, 1, 5, 6],"]}
{"task_id": "MBJSP/145", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxAbsDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */", "entry_point": "maxAbsDiff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 1, 5, 3];\nvar arg01 = 4;\nvar x0 = maxAbsDiff(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [9, 3, 2, 5, 1];\nvar arg11 = 5;\nvar x1 = maxAbsDiff(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 2, 1];\nvar arg21 = 3;\nvar x2 = maxAbsDiff(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const arrlen = arr.length;\n  const diffs = arr.slice(arrlen - n, arrlen);\n  const maxdiff = Math.abs(diffs[0] - diffs[1]);\n  for (let i = 2; i < diffs.length; i++) {\n    if (Math.abs(diffs[i] - diffs[i - 1]) > maxdiff) {\n      maxdiff = Math.abs(diffs[i] - diffs[i - 1]);\n    }\n  }\n  return maxdiff;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length - 1; i++) {\n    let min = Math.abs(arr[i] - arr[i + 1]);\n    let max = min;\n    for (let j = i + 1; j < arr.length; j++) {\n      if (Math.abs(arr[j] - arr[j + 1]) < min) {\n        min = Math.abs(arr[j] - arr[j + 1]);\n        max = min;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n}\n", "\n  let maxDiff = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      maxDiff = Math.max(Math.abs(arr[i] - arr[j]), maxDiff);\n    }\n  }\n  return maxDiff;\n}\n", "\n  const result = {};\n  const arrNum = arr.map(num => parseInt(num, 10));\n  const sortedArrNum = arrNum.sort((a, b) => a - b);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!= j) {\n        result[`${arrNum[i]}-${arrNum[j]}`] = Math.abs(sortedArrNum[i] - sortedArrNum[j]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const diff = Math.abs(arr[i] - arr[i + 1]);\n    result.push(diff);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/146", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction asciiValueString(str1) {\n/**\n * * Write a function to find the ascii value of total characters in a string.\n */", "entry_point": "asciiValueString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = asciiValueString(arg00);\nvar v0 = 112;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Program\";\nvar x1 = asciiValueString(arg10);\nvar v1 = 80;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Language\";\nvar x2 = asciiValueString(arg20);\nvar v2 = 76;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let asciiValue = 0;\n  for (let i = 0; i < str1.length; i++) {\n    asciiValue += str1.charCodeAt(i);\n  }\n  return asciiValue;\n}\n", "\n  return str1.split('').map(char => char.charCodeAt(0)).reduce((a, b) => a + b, 0);\n}\n", "\n  let asciivalue = 0;\n  for (let i = 0; i < str1.length; i++) {\n    asciivalue += str1[i];\n  }\n  return asciivalue;\n}\n", "\n  return str1.split('').map(", "\n  const result = [];\n  for (let i = 0; i < str1.length; i++) {\n    result.push(str1.charCodeAt(i));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/147", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxPathSum(tri, m, n) {\n/**\n * * Write a function to find the maximum total path sum in the given triangle.\n */", "entry_point": "maxPathSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 0, 0], [4, 8, 0], [1, 5, 3]];\nvar arg01 = 2;\nvar arg02 = 2;\nvar x0 = maxPathSum(arg00, arg01, arg02);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[13, 0, 0], [7, 4, 0], [2, 4, 6]];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = maxPathSum(arg10, arg11, arg12);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 0, 0], [11, 18, 0], [21, 25, 33]];\nvar arg21 = 2;\nvar arg22 = 2;\nvar x2 = maxPathSum(arg20, arg21, arg22);\nvar v2 = 53;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let maxSum = 0;\n  for (let i = 0; i < n; i++) {\n    maxSum = Math.max(maxSum, tri[i][0] + tri[i][1]);\n    maxSum = Math.max(maxSum, tri[i][0] + tri[i][2]);\n  }\n  maxSum = Math.max(maxSum, tri[n - 1][1] + tri[n - 1][2]);\n  return maxSum;\n}\n", "\n  const res = [];\n  const o = [];\n  for (let i = 0; i < m; i++) {\n    o[i] = [];\n    for (let j = 0; j < n; j++) {\n      o[i][j] = tri[i][j];\n      if (i === 0 && j === 0) {\n        res[i] = o[i][j];\n      } else if (i === 0) {\n        res[i] = o[i][j] + res[i - 1];\n      } else if (j === 0) {\n        res[i] = o[i][j] + res[i];\n      } else {\n        res[i] = o[i][j] + Math.max(res[i - 1], res[i]);\n      }\n    }\n  }\n  return res[m - 1];\n}\n", "\n  let ans = 0;\n  for (let i = 0; i < m; i++) {\n    ans += tri[i][n - 1];\n  }\n  for (let j = n - 2; j >= 0; j--) {\n    for (let i = 0; i < m; i++) {\n      ans = Math.max(ans, tri[i][j] + tri[i][j + 1]);\n    }\n  }\n  return ans;\n}\n", "\n  let maxSum = 0;\n  let l = 0;\n  let r = 0;\n  while (l < m) {\n    while (r < n) {\n      if (l === r) {\n        maxSum += tri[l][r];\n      } else {\n        maxSum += tri[l][r];\n      }\n      r++;\n    }\n    r = 0;\n    l++;\n  }\n  return maxSum;\n}\n", "\n  let maxSum = 0;\n  const path = [];\n  tri[0][0] = m[0][0] + n[0][0];\n  for (let i = 1; i < m.length; i++) {\n    tri[i][0] = m[i][0] + n[i][0];\n    path[i] = [tri[i][0], 'Right'];\n  }\n  for (let j = 1; j < n.length; j++) {\n    tri[0][j] = m[0][j] + n[0][j];\n    path[0][j] = [tri[0][j], 'Down'];\n  }\n  for (let i = 1; i < m.length; i++) {\n    for (let j = 1; j < n.length; j++) {\n      tri[i][j] = Math.max(m[i][j - 1] + n[i][j], m[i - 1][j] + n[i][j]);\n      path[i][j] = [tri[i][j], 'Up'];\n    }\n  }\n  for (let k = 0; k < m.length; k++) {\n    for (let l = 0; l < n.length; l++) {\n      if (path[k][l][1] === 'Up') {\n        maxSum = Math.max(maxSum, path[k][l][0] + tri[k][l]);\n      }\n      if (path[k][l][1] === 'Right') {\n        maxSum = Math.max(maxSum, path[k][l][0] + tri[k][l]);\n      }\n      if (path"]}
{"task_id": "MBJSP/148", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumDigitsTwoparts(n) {\n/**\n * * Write a function to divide a number into two parts such that the sum of digits is maximum.\n */", "entry_point": "sumDigitsTwoparts", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 35;\nvar x0 = sumDigitsTwoparts(arg00);\nvar v0 = 17;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = sumDigitsTwoparts(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = sumDigitsTwoparts(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let firstNum = 0;\n  let secondNum = 0;\n  let currentNum = 0;\n  let currentNumIndex = 0;\n  while (currentNumIndex < n) {\n    currentNum = n - currentNumIndex;\n    let sumDigits = Math.floor(Math.log10(currentNum)) + 1;\n    if (sumDigits > firstNum) {\n      firstNum = sumDigits;\n      secondNum = currentNum;\n    }\n    currentNumIndex++;\n  }\n  return firstNum + secondNum;\n}\n", "\n  return n * n;\n}\n", "\n  const d = Math.floor(Math.log10(n));\n  return (n / Math.pow(10, d)) + (n % Math.pow(10, d)) + d;\n}\n", "\n  let start = n;\n  let sum = 0;\n  while (start > 0) {\n    sum = sum + start % 10;\n    start = start / 10;\n  }\n  sum = sum + n;\n  return sum;\n}\n\n/**\n * Given a list of words, return the word with the most occurrences of a given string.\n */\n", "\n  const result = [];\n  let quotient = n / 2;\n  let remainder = n % 2;\n  while (quotient) {\n    result.push(quotient);\n    quotient = remainder * 10 + quotient;\n    remainder = 0;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/149", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction longestSubseqWithDiffOne(arr, n) {\n/**\n * * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n */", "entry_point": "longestSubseqWithDiffOne", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 3, 2];\nvar arg01 = 7;\nvar x0 = longestSubseqWithDiffOne(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 9, 4, 5, 4, 8, 6];\nvar arg11 = 7;\nvar x1 = longestSubseqWithDiffOne(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 2, 3, 7, 2, 1];\nvar arg21 = 8;\nvar x2 = longestSubseqWithDiffOne(arg20, arg21);\nvar v2 = 7;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let dp = new Array(n + 1);\n  for (let i = 0; i < n + 1; i++) {\n    dp[i] = new Array(n + 1);\n  }\n  for (let i = 1; i < n + 1; i++) {\n    for (let j = 1; j < n + 1; j++) {\n      if (arr[i - 1] === arr[j - 1] && i!= j) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  let result = [];\n  let [i, j] = [n, n];\n  while (dp[i][j]) {\n    if (arr[i - 1] === arr[j - 1] && dp[i - 1][j - 1] + 1 === dp[i][j]) {\n      result.push(arr[i - 1]);\n      i--;\n      j--;\n    } else if (dp[i - 1][j] == dp[i][j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return result.reverse();\n}\n// export { f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z }\n// export { a }\n// export { b }\n// export { c }\n// export { d }\n// export { e }\n// export {", "\n  let result = [];\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let isSubseq = true;\n      let diff = Math.abs(arr[i] - arr[j]);\n      for (let k = 0; k < arr.length; k++) {\n        if (arr[k] > arr[i] && arr[k] > arr[j] && Math.abs(arr[i] - arr[k]) <= 1) {\n          isSubseq = false;\n          break;\n        }\n      }\n      if (isSubseq && diff > 1) {\n        result.push([arr[i], arr[j]]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const longest = [];\n  const longestArr = [];\n  for (let i = 0; i < arr.length - 1; i++) {\n    longest.push(arr[i] + arr[i + 1]);\n  }\n  const arrDiff = arr.map(num => num - (Math.abs(num - arr[0])));\n  for (let i = 0; i < arrDiff.length - 1; i++) {\n    longestArr.push(arrDiff[i] + arrDiff[i + 1]);\n  }\n  return arr.concat(longest).concat(arr.concat(longestArr));\n}\n", "\n    // Write your code here\n    const result = [];\n    const dp = {};\n    for (let i = 0; i <= n; i++) {\n        dp[i] = {};\n        dp[i][i] = { result: [], seq: i };\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            if (arr[i] + arr[j] === 0) {\n                dp[i][j] = { result: [], seq: j };\n            } else if (arr[i] + arr[j] < 0) {\n                dp[i][j] = dp[i][j - 1];\n            } else if (arr[i] + arr[j] > 0) {\n                dp[i][j] = dp[i + 1][j];\n            }\n        }\n    }\n    for (let i = 0; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            if (dp[i][j].seq < i) {\n                dp[i][j].result.push(arr[i]);\n                dp[i][j].result.push(arr[j]);\n                dp[i][j].result.push(0);\n            } else if (dp[i][j].seq > i) {\n                dp[i][j].result.push(arr[j]);\n                dp[i][j].result.push(arr[i]);\n                dp[i][j].result.push(0);\n            }\n        }\n", "\n  const matrix = [[1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 1]];\n  const longest = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        longest.push(arr[i]);\n        continue;\n      }\n      if (arr[i] + 1 === arr[j]) {\n        matrix[arr[i]][arr[j]] = 1;\n        matrix[arr[j]][arr[i]] = 1;\n      } else if (arr[i] + 1 < arr[j]) {\n        matrix[arr[i]][arr[j]] = matrix[arr[j]][arr[i]] + 1;\n        matrix[arr[j]][arr[i]] = 1;\n      }\n    }\n  }\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      if (matrix[i][j] > matrix[longest[longest.length - 1]][j]) {\n        longest.push(j);\n      } else {\n        longest.push(longest[longest.length - 1]);\n      }\n    }\n  }\n  return longest;\n}\n"]}
{"task_id": "MBJSP/150", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction doesContainB(a, b, c) {\n/**\n * * Write a JavaScript function to find whether the given number is present in the infinite sequence or not.\n */", "entry_point": "doesContainB", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 7;\nvar arg02 = 3;\nvar x0 = doesContainB(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = -3;\nvar arg12 = 5;\nvar x1 = doesContainB(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 2;\nvar arg22 = 5;\nvar x2 = doesContainB(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\n    let index = seq.indexOf(a);\n    if (index!== -1) {\n      return true;\n    }\n    if (b) {\n      if (c) {\n        if (index === -1) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  return false;\n}\n", "\n  const array = [...[1, 2, 3],...[4, 5, 6],...[7, 8, 9],...[10, 11, 12]];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === b) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  // Write your code here\n  return false;\n}\n", "\n  let count = 0;\n  for (let i = a; i <= c; i++) {\n    if (i === b) {\n      count++;\n    }\n  }\n  return count > 0? true : false;\n}\n", "\n  const nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  return nums.findIndex(num => num === a) >= b && nums.findIndex(num => num === c) >= b;\n}\n"]}
{"task_id": "MBJSP/151", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isCoprime(x, y) {\n/**\n * * Write a JavaScript function to check whether the given number is co-prime or not.\n */", "entry_point": "isCoprime", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 17;\nvar arg01 = 13;\nvar x0 = isCoprime(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 21;\nvar x1 = isCoprime(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 25;\nvar arg21 = 45;\nvar x2 = isCoprime(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (x == y) {\n    return true;\n  }\n  let i = Math.abs(x % y);\n  while (i <= x / 2) {\n    if (x % i == 0 && y % i == 0) {\n      return false;\n    }\n    i = i + 1;\n  }\n  return true;\n}\n", "\n  return!(x <= 1 || y <= 1 || x % y!== 0);\n}\n", "\n  for (let i = x; i < y; i++) {\n    if (x % i === 0 && y % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  let count = 0;\n  for (let i = 2; i <= Math.sqrt(y); i++) {\n    if (y % i === 0) {\n      count++;\n      if (count > 2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", "\n  const gcd = Math.gcd(x, y);\n  return y / gcd === x / gcd;\n}\n"]}
{"task_id": "MBJSP/152", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction mergeSort(x) {\n/**\n * * Write a function to sort the given array by using merge sort.\n */", "entry_point": "mergeSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 4, 2, 6, 5, 7, 1, 9];\nvar x0 = mergeSort(arg00);\nvar v0 = [1, 2, 3, 4, 5, 6, 7, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 25, 45, 78, 11, 33, 19];\nvar x1 = mergeSort(arg10);\nvar v1 = [7, 11, 19, 25, 33, 45, 78];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 1, 4, 9, 8];\nvar x2 = mergeSort(arg20);\nvar v2 = [1, 3, 4, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const tempArr = [];\n  for (let i = 0; i < x.length; i++) {\n    tempArr.push(x[i]);\n  }\n  let start = 0;\n  let end = tempArr.length;\n  const sorted = merge(tempArr, start, end);\n  return sorted;\n}\n", "\n  if (x.length < 2) return x;\n  const mid = x.length / 2;\n  const l = mergeSort(x.slice(0, mid));\n  const r = mergeSort(x.slice(mid));\n  return merge(l, r);\n}\n", "\n  if (x.length === 1) {\n    return x;\n  } else {\n    let mid = Math.floor(x.length / 2);\n    return merge(mergeSort(x.slice(0, mid)), mergeSort(x.slice(mid)));\n  }\n}\n", "\n  if (x.length === 1) {\n    return x;\n  }\n  const half = x.length / 2;\n  const left = mergeSort(x.slice(0, half));\n  const right = mergeSort(x.slice(half));\n  return merge(left, right);\n}\n", "\n  // Write your code here\n  if (x.length < 2) {\n    return x;\n  }\n  const mid = x.length / 2;\n  const left = mergeSort(x.slice(0, mid));\n  const right = mergeSort(x.slice(mid));\n  return merge(left, right);\n}\n"]}
{"task_id": "MBJSP/153", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction parabolaVertex(a, b, c) {\n/**\n * * Write a function to find the vertex of a parabola.\n */", "entry_point": "parabolaVertex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaVertex(arg00, arg01, arg02);\nvar v0 = [-0.3, 1.55];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaVertex(arg10, arg11, arg12);\nvar v1 = [-0.4444444444444444, 2.2222222222222223];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaVertex(arg20, arg21, arg22);\nvar v2 = [-1.0, 4.0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const z = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n    return [z, z * z];\n}\n", "\n  const p = (a * c) - (b * b);\n  return (p < 0? null : b + Math.sqrt(p));\n}\n", "\n  const p = (a * a) - (4 * b * c);\n  if (p < 0) {\n    return null;\n  }\n  const b2 = b * b;\n  const sqrt = Math.sqrt(p);\n  const x1 = (-a - sqrt) / (2 * b);\n  const x2 = (-a + sqrt) / (2 * b);\n  if (x1 > x2) {\n    return [x1, x2];\n  } else {\n    return [x2, x1];\n  }\n}\n", "\n  const t = Math.pow(b, 2) - (4 * a * c);\n  const x1 = (-b + Math.sqrt(t)) / (2 * a);\n  const x2 = (-b - Math.sqrt(t)) / (2 * a);\n  return [x1, x2];\n}\n\n// https://www.interviewbit.com/problems/3sum/\n// You are given a list of integers nums and a target integer target.\n// Find all unique pairs in the list whose sum is equal to the target.\n// Each pair consists of an integer from nums and an integer representing the index of a pair from nums.\n// You may return the number of pairs.\n", "\n  const f = (x) => {\n    return (a * x * x) + (b * x) + c;\n  };\n  const vertex = Math.sqrt(f(0) - f(0) + 4 * (a * f(0)));\n  return vertex;\n}\n"]}
{"task_id": "MBJSP/154", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction specifiedElement(nums, n) {\n/**\n * * Write a function to extract every specified element from a given two dimensional list.\n */", "entry_point": "specifiedElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg01 = 0;\nvar x0 = specifiedElement(arg00, arg01);\nvar v0 = [1, 4, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg11 = 2;\nvar x1 = specifiedElement(arg10, arg11);\nvar v1 = [3, 6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg21 = 3;\nvar x2 = specifiedElement(arg20, arg21);\nvar v2 = [2, 2, 5];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    result.push(nums[i][n]);\n  }\n  return result;\n}\n", "\n  const testtup = [];\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums[i].length; j++) {\n      testtup.push(nums[i][j]);\n    }\n  }\n  const result = multiplyElements(testtup);\n  return result;\n}\n", "\n  const counter = {};\n  for (let i = 0; i < nums.length; i++) {\n    counter[nums[i]] = counter[nums[i]] + 1 || 1;\n    if (counter[nums[i]] === n) {\n      return nums[i];\n    }\n  }\n}\n", "\n  // Write your code here\n  return nums;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums[i].length; j++) {\n      if (nums[i][j] === n) {\n        result.push(nums[i][j]);\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/155", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction evenBitToggleNumber(n) {\n/**\n * * Write a JavaScript function to toggle all even bits of a given number.\n */", "entry_point": "evenBitToggleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitToggleNumber(arg00);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitToggleNumber(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitToggleNumber(arg20);\nvar v2 = 20;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n | (n & (n - 1));\n}\n", "\n  return n ^ (n - 2);\n}\n", "\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    result = result ^ i;\n  }\n  return result;\n}\n", "\n  return n | (n - 1);\n}\n", "\n  return n ^ (n & (n - 1));\n}\n"]}
{"task_id": "MBJSP/156", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction tupleIntStr(tuplestr) {\n/**\n * * Write a function to convert a tuple of string values to a tuple of integer values.\n */", "entry_point": "tupleIntStr", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"333\", \"33\"], [\"1416\", \"55\"]];\nvar x0 = tupleIntStr(arg00);\nvar v0 = [[333, 33], [1416, 55]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"999\", \"99\"], [\"1000\", \"500\"]];\nvar x1 = tupleIntStr(arg10);\nvar v1 = [[999, 99], [1000, 500]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"666\", \"66\"], [\"1500\", \"555\"]];\nvar x2 = tupleIntStr(arg20);\nvar v2 = [[666, 66], [1500, 555]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return tuplestr.map(num => parseInt(num));\n}\n", "\n    // Write your code here\n    const testTup = tuplestr.split(',');\n    const result = [];\n    for (let i = 0; i < testTup.length - 1; i++) {\n        result.push(parseInt(testTup[i]), parseInt(testTup[i + 1]));\n    }\n    return result;\n}\n", "\n  const tuple = tuplestr.split(',').map(str => str.trim());\n  return tuple;\n}\n", "\n  const testtup = tuplestr.map(num => parseInt(num, 10));\n  return testtup;\n}\n", "\n  const strlist = tuplestr.split(',');\n  const intlist = strlist.map(str => parseInt(str));\n  return intlist;\n}\n"]}
{"task_id": "MBJSP/157", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction encodeList(list1) {\n/**\n * * Write a function to reflect the run-length encoding from a list.\n */", "entry_point": "encodeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4.3, 5, 1];\nvar x0 = encodeList(arg00);\nvar v0 = [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"automatically\";\nvar x1 = encodeList(arg10);\nvar v1 = [[1, \"a\"], [1, \"u\"], [1, \"t\"], [1, \"o\"], [1, \"m\"], [1, \"a\"], [1, \"t\"], [1, \"i\"], [1, \"c\"], [1, \"a\"], [2, \"l\"], [1, \"y\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar x2 = encodeList(arg20);\nvar v2 = [[1, \"p\"], [1, \"y\"], [1, \"t\"], [1, \"h\"], [1, \"o\"], [1, \"n\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i]);\n  }\n  return result;\n}\n", "\n  const n = list1.length;\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(list1[i] + (n - 1) * (i > 0? list1[i - 1] : 1));\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    const temp = list1[i];\n    result.push(temp[0]);\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i]);\n    if (i === list.length - 1) continue;\n    if (list[i] === list[i + 1]) {\n      result.push(1);\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  const counter = {};\n  for (let i = 0; i < list1.length; i++) {\n    counter[list1[i]] = counter[list1[i]] + 1 || 1;\n  }\n  let j = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (counter[list1[i]] === 1) {\n      result.push(list1[i]);\n    } else {\n      while (counter[list1[j]] > 1) {\n        result.push(list1[j]);\n        j++;\n      }\n      result.push(list1[i]);\n      j++;\n      counter[list1[i]] = 0;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/158", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minOps(arr, n, k) {\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */", "entry_point": "minOps", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 2, 2, 2];\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = minOps(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 2, 6, 8];\nvar arg11 = 4;\nvar arg12 = 3;\nvar x1 = minOps(arg10, arg11, arg12);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [21, 33, 9, 45, 63];\nvar arg21 = 5;\nvar arg22 = 6;\nvar x2 = minOps(arg20, arg21, arg22);\nvar v2 = 24;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let minOps = 0;\n  arr.sort((a, b) => a - b);\n  let i = 0;\n  let j = 0;\n  while (i < k && j < arr.length) {\n    if (arr[j] == arr[i]) {\n      i++;\n      j++;\n      minOps++;\n    } else {\n      j++;\n      minOps++;\n    }\n  }\n  return minOps;\n}\n", "\n  const result = [];\n  let s = 0;\n  let op = 0;\n  let i = 0;\n  let max = n * k;\n  while (i < max) {\n    let val = arr[i++];\n    if (val > 0) {\n      op++;\n      s += val;\n      if (s > n) {\n        s = val;\n        result.push(op);\n        op = 0;\n      }\n    } else {\n      op++;\n      s += val;\n      if (s > n) {\n        s = val;\n        result.push(op);\n        op = 0;\n      }\n      if (op === k) {\n        result.push(op);\n        op = 0;\n      }\n    }\n  }\n  return result;\n}\n\n// declare ", "\n  const arrLen = arr.length;\n  const to_arr = [];\n  let min_ops = 0;\n  for (let i = 0; i < arrLen; i++) {\n    to_arr.push(arr[i]);\n  }\n  let cnt = 0;\n  while (to_arr.length >= k) {\n    const curr_min_ops = minOpsHelper(to_arr, k);\n    min_ops = Math.max(min_ops, curr_min_ops);\n    cnt++;\n    to_arr = to_arr.slice(0, to_arr.length - k);\n  }\n  return min_ops + cnt;\n}\n", "\n  let left = 0;\n  let right = n - 1;\n  let count = 0;\n  while (left < right) {\n    let sum = arr[left] + arr[right];\n    if (sum == k) {\n      count += (right - left) + 1;\n      left++;\n      right--;\n    }\n    else if (sum < k) {\n      count += right - left;\n      left++;\n    }\n    else {\n      count += right - left;\n      right--;\n    }\n  }\n  return count;\n}\n", "\n  const ops = {};\n  let max = 0;\n  let sum = 0;\n  let result = [];\n  arr.forEach(elem => {\n      if (elem > max) {\n          max = elem;\n      }\n      sum += elem;\n      ops[elem] = ops[elem] + 1 || 1;\n  });\n  const temp = arr.map(elem => {\n      if (ops[elem] === max - elem + 1 && elem < k) {\n          ops[elem] = 0;\n          return elem;\n      }\n      return 0;\n  });\n  while (temp.length > 0) {\n      result.push(temp.pop());\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/159", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction monthSeason(month, days) {\n/**\n * * Write a function to print the season for the given month and day.\n */", "entry_point": "monthSeason", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"January\";\nvar arg01 = 4;\nvar x0 = monthSeason(arg00, arg01);\nvar v0 = \"winter\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"October\";\nvar arg11 = 28;\nvar x1 = monthSeason(arg10, arg11);\nvar v1 = \"autumn\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"June\";\nvar arg21 = 6;\nvar x2 = monthSeason(arg20, arg21);\nvar v2 = \"spring\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const monthsIndex = months.findIndex(monthString => monthString === month);\n  const monthDays = months.length - 1;\n  const monthIndex = (monthDays + monthsIndex) % months.length;\n  const dayIndex = monthsIndex - 1 + (days % monthDays);\n  return months[monthIndex] + \" \" + days.slice(dayIndex, dayIndex + 1).join(\", \");\n}\n", "\n  const months = [\n    {month: 'Jan', monthSeason: 'Winter'},\n    {month: 'Feb', monthSeason: 'Winter'},\n    {month: 'Mar', monthSeason: 'Spring'},\n    {month: 'Apr', monthSeason: 'Spring'},\n    {month: 'May', monthSeason: 'Summer'},\n    {month: 'June', monthSeason: 'Summer'},\n    {month: 'July', monthSeason: 'Autumn'},\n    {month: 'Aug', monthSeason: 'Autumn'},\n    {month: 'Sep', monthSeason: 'Winter'},\n    {month: 'Oct', monthSeason: 'Winter'},\n    {month: 'Nov', monthSeason: 'Winter'},\n    {month: 'Dec', monthSeason: 'Winter'},\n  ];\n  const result = [];\n  for (let i = 0; i < months.length; i++) {\n    if (months[i].month === month) {\n      result.push(months[i].monthSeason);\n    }\n  }\n  return result;\n}\n", "\n  switch (month) {\n    case 12:\n      if (days > 20)\n        return \"Summer\";\n      else if (days > 10)\n        return \"Autumn\";\n      else if (days > 5)\n        return \"Winter\";\n      else\n        return \"Winter\";\n    case 1:\n      if (days > 20)\n        return \"Autumn\";\n      else if (days > 10)\n        return \"Winter\";\n      else if (days > 5)\n        return \"Winter\";\n      else\n        return \"Winter\";\n    case 2:\n      if (days > 20)\n        return \"Winter\";\n      else if (days > 10)\n        return \"Winter\";\n      else if (days > 5)\n        return \"Winter\";\n      else\n        return \"Winter\";\n    case 3:\n      if (days > 20)\n        return \"Winter\";\n      else if (days > 10)\n        return \"Winter\";\n      else if (days > 5)\n        return \"Winter\";\n      else\n        return \"Winter\";\n    case 4:\n      if (days > 20)\n        return \"Winter\";\n      else if (days > 10)\n        return \"Winter\";\n      else if (days > 5)\n        return \"Winter\";\n      else\n        return \"Winter\";\n    case 5:\n      if (days > 20)\n        return \"Winter\";\n      else if (days > 10)\n        return \"Winter\";\n      else if (days > 5)\n        return \"Winter\";\n      else\n        return \"Winter\";\n    case 6:\n      if (days > 20)\n        return \"Winter\";\n      else if (days > 10)\n        return \"Winter\";\n      else if (days > 5)", "\n  if (month >= 1 && month <= 12 && days >= 1 && days <= 31) {\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n      return \"Spring\";\n    }\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n      return \"Summer\";\n    }\n    if (month === 2) {\n      if (days <= 29) {\n        return \"Fall\";\n      }\n      if (days <= 31) {\n        return \"Winter\";\n      }\n    }\n  }\n  return null;\n}\n", "\n  const months = [...new Set([...new Set([...new Set(['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december'])]),...new Set(['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december'])])];\n  const seasons = ['summer', 'winter','spring', 'fall'];\n  const monthindex = months.findIndex((m) => m.toLowerCase() === month.toLowerCase());\n  const monthseason = months[monthindex].toLowerCase();\n  const maxdayindex = Math.floor(days / 7);\n  const maxdayseason = seasons[maxdayindex % seasons.length];\n  return `${monthseason} ${maxdayseason}`;\n}\n"]}
{"task_id": "MBJSP/160", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction solution(a, b, n) {\n/**\n * * Write a function to find x and y that satisfies ax + by = n.\n */", "entry_point": "solution", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 3;\nvar arg02 = 7;\nvar x0 = solution(arg00, arg01, arg02);\nvar v0 = [\"x = \", 2, \", y = \", 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar arg12 = 7;\nvar x1 = solution(arg10, arg11, arg12);\nvar v1 = \"No solution\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 13;\nvar arg22 = 17;\nvar x2 = solution(arg20, arg21, arg22);\nvar v2 = [\"x = \", 4, \", y = \", 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return {x: a, y: b};\n}\n", "\n  return (Math.floor(Math.pow(a, n - b) / Math.pow(b, n - a)) + 1) / 2;\n}\n// Write your code here\n// console.log(numbers);\n// console.log(sortNumericStrings(numbers));\n// console.log(multiplyElements(testTup));\n// console.log(solution(3, 4, 5));\n", "\n  const x = (b * n - a * y) / (a + b);\n  const y = n - a * x - b * y;\n  return [x, y];\n}\n```\n\n</section>\n", "\n  let x = 0, y = 0;\n  const count = Math.floor(Math.sqrt(n));\n  for (let i = 1; i <= count; i++) {\n    if (Math.pow(i, 2) < n) {\n      x = i;\n      y = n / x;\n      break;\n    }\n  }\n  return [x, y];\n}\n", "\n  const x = Math.floor(a / b);\n  const y = a * x - b * Math.floor(a / b);\n  return [x, y];\n}\n```\n\n</section>\n"]}
{"task_id": "MBJSP/161", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeElements(list1, list2) {\n/**\n * * Write a function to remove all elements from a given list present in another list.\n */", "entry_point": "removeElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg01 = [2, 4, 6, 8];\nvar x0 = removeElements(arg00, arg01);\nvar v0 = [1, 3, 5, 7, 9, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg11 = [1, 3, 5, 7];\nvar x1 = removeElements(arg10, arg11);\nvar v1 = [2, 4, 6, 8, 9, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg21 = [5, 7];\nvar x2 = removeElements(arg20, arg21);\nvar v2 = [1, 2, 3, 4, 6, 8, 9, 10];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.includes(list1[i])) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  return list1.filter(elem => list2.indexOf(elem) < 0);\n}\nconst tup1 = [\"q\", \"w\", \"e\", \"r\"];\nconst tup2 = [\"a\", \"s\", \"d\", \"f\"];\n// Write your code here\nconst result = [...tup1].filter(elem => tup2.indexOf(elem) < 0);\nreturn result;\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.includes(list1[i])) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.includes(list1[i])) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  for (let i = 0; i < list2.length; i++) {\n    for (let j = 0; j < list1.length; j++) {\n      if (list2[i] === list1[j]) {\n        list1.splice(j, 1);\n      }\n    }\n  }\n  return list1;\n}\n"]}
{"task_id": "MBJSP/162", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumSeries(n) {\n/**\n * * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n */", "entry_point": "sumSeries", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = sumSeries(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = sumSeries(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = sumSeries(arg20);\nvar v2 = 25;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const series = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = 1; j <= i; j++) {\n      sum += j;\n    }\n    series.push(sum);\n  }\n  return series.reduce((a, b) => a + b) || 0;\n}\n", "\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += i;\n  }\n  return sum;\n}\n", "\n  const numbers = [];\n  for (let i = 1; i <= n; i++) {\n    numbers.push(i);\n  }\n  let num = 0;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    num += numbers[i];\n  }\n  return num;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = 1; j <= i; j++) {\n      sum = sum + j;\n    }\n    result.push(sum);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = n; i >= 0; i--) {\n    const num = i + (i - 2) + (i - 4);\n    result.push(num);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/163", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction areaPolygon(s, l) {\n/**\n * * Write a function to calculate the area of a regular polygon.\n */", "entry_point": "areaPolygon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 20;\nvar x0 = areaPolygon(arg00, arg01);\nvar v0 = 400.00000000000006;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = areaPolygon(arg10, arg11);\nvar v1 = 1731.1969896610804;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 7;\nvar x2 = areaPolygon(arg20, arg21);\nvar v2 = 302.90938549487214;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const n = parseInt(s, 10);\n  const side = l / Math.sqrt(2);\n  const result = (n * side * side) / 2;\n  return result;\n}\n", "\n  const side = s;\n  const angle = Math.PI * side / 2;\n  const area = Math.sqrt(s * s - side * side / 4);\n  const pythagoras = Math.sqrt(l * l + side * side);\n  const perimiter = side * (l / pythagoras);\n  return area * perimiter / 2;\n}\n", "\n  const sideLength = s;\n  const sideArea = (sideLength * sideLength) / (4 * Math.tan(Math.PI / l));\n  return sideArea;\n}\n", "\n  const sides = parseInt(s);\n  const length = parseInt(l);\n  const result = Math.PI * length * length / sides;\n  return result;\n}\n", "\n  const side = l / s;\n  return Math.pow(side, 2) * Math.sin(Math.PI / s);\n}\n"]}
{"task_id": "MBJSP/164", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction areequivalent(num1, num2) {\n/**\n * * Write a JavaScript function to check whether the sum of divisors are same or not.\n */", "entry_point": "areequivalent", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 36;\nvar arg01 = 57;\nvar x0 = areequivalent(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = areequivalent(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 23;\nvar arg21 = 47;\nvar x2 = areequivalent(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const divisors1 = getDivisors(num1);\n  const divisors2 = getDivisors(num2);\n  const divisorsSum = sumDivisors(num1) + sumDivisors(num2);\n  return divisorsSum === divisors1.join().split(',').length + divisors2.join().split(',').length;\n}\n", "\n  const sumOfDivisors1 = sumOfDivisors(num1);\n  const sumOfDivisors2 = sumOfDivisors(num2);\n  if (sumOfDivisors1 === sumOfDivisors2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  let sum1 = 0;\n  for (let i = 1; i <= num1; i++) {\n    if (num1 % i === 0) {\n      sum1 += i;\n    }\n  }\n  let sum2 = 0;\n  for (let i = 1; i <= num2; i++) {\n    if (num2 % i === 0) {\n      sum2 += i;\n    }\n  }\n  return sum1 === sum2;\n}\n", "\n  let sum1 = 0;\n  let sum2 = 0;\n  for (let i = 1; i <= num1; i++) {\n    if (num1 % i === 0) {\n      sum1 += i;\n    }\n  }\n  for (let i = 1; i <= num2; i++) {\n    if (num2 % i === 0) {\n      sum2 += i;\n    }\n  }\n  if (sum1 === sum2) {\n    return true;\n  }\n  return false;\n}\n// ", "\n  const num1 = Math.floor(Math.sqrt(num1));\n  const num2 = Math.floor(Math.sqrt(num2));\n  let i = 0, j = 0;\n  while (num1 + i <= num2) {\n    while (num2 - j <= num1 + i) {\n      if (num1 + i === num2 - j) {\n        return true;\n      }\n      j++;\n    }\n    i++;\n  }\n  return false;\n}\n"]}
{"task_id": "MBJSP/165", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countCharPosition(str1) {\n/**\n * * Write a JavaScript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n */", "entry_point": "countCharPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"xbcefg\";\nvar x0 = countCharPosition(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABcED\";\nvar x1 = countCharPosition(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AbgdeF\";\nvar x2 = countCharPosition(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const lowercase = [];\n  const uppercase = [];\n  for (let i = 0; i < str1.length; i++) {\n    lowercase.push(str1[i].toLowerCase());\n    uppercase.push(str1[i].toUpperCase());\n  }\n  const string1 = lowercase.join('');\n  const string2 = uppercase.join('');\n  return Math.floor(string1.length + string2.length);\n}\n", "\n  let count = 0;\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].toLowerCase() === str1[i].toUpperCase()) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n    // Write your code here\n    return count;\n}\n", "\n  const chars = str1.split('');\n  const num = {};\n  for (let i = 0; i < chars.length; i++) {\n    num[chars[i]] = num[chars[i]] + 1 || 1;\n  }\n  return num;\n}\n"]}
{"task_id": "MBJSP/166", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findEvenPair(a, n) {\n/**\n * * Write a JavaScript function to count the pairs with xor as an even number.\n */", "entry_point": "findEvenPair", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 4, 7, 2, 1];\nvar arg01 = 5;\nvar x0 = findEvenPair(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 2, 8, 1, 0, 5, 11];\nvar arg11 = 7;\nvar x1 = findEvenPair(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 3;\nvar x2 = findEvenPair(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const n2 = n / 2;\n  const result = [];\n  for (let i = 0; i < a.length - n2; i++) {\n      if (a[i] ^ a[i + n2]) {\n          result.push(a[i] ^ a[i + n2]);\n        }\n    }\n    return result;\n}\n", "\n    let result = 0;\n    let numbers = a.map(x => parseInt(x, 10));\n    for (let i = 0; i < numbers.length - 1; i++) {\n      let xor = numbers[i] ^ numbers[i + 1];\n      if (xor % n === 0) {\n        result++;\n      }\n    }\n    return result;\n}\n", "\n  const evenPairs = [];\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      if (a[i] ^ a[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "\n    const count = {};\n    const evenPair = {};\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] % 2 === 0) {\n            if (evenPair[a[i]] == null) {\n                evenPair[a[i]] = 1;\n            } else {\n                evenPair[a[i]] = evenPair[a[i]] + 1;\n            }\n        } else {\n            count[a[i]] = count[a[i]] + 1 || 1;\n        }\n    }\n    return evenPair;\n}\n", "\n  let aList = [];\n  for (let i = 0; i < a.length; i++) {\n    aList.push(a[i]);\n  }\n  let aXor = 0;\n  for (let i = 0; i < a.length; i++) {\n    aXor ^= a[i];\n  }\n  let evenPairs = 0;\n  for (let i = 0; i < aList.length; i++) {\n    if (aXor % 2 === 0) {\n      evenPairs += 1;\n    }\n    if (evenPairs === n) {\n      return aList[i] + aList[i + 1];\n    }\n  }\n  return a;\n}\n"]}
{"task_id": "MBJSP/167", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction nextPowerOf2(n) {\n/**\n * * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */", "entry_point": "nextPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 0;\nvar x0 = nextPowerOf2(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = nextPowerOf2(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 17;\nvar x2 = nextPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n}\n", "\n  const nshift = n >>> 1;\n  return Math.pow(2, nshift + 1);\n}\n", "\n  const result = 0;\n  for (let i = 0; i < 32; i++) {\n      if (result === n) {\n          return result;\n      }\n      if ((1 << i) >= n) {\n          result = 1 << i;\n      }\n  }\n  return result;\n}\n", "\n  return 2 ** Math.ceil(Math.log2(n));\n}\n", "\n  let result = n;\n  while (result & (result - 1)) {\n    result = result & (result - 1);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/168", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction frequency(a, x) {\n/**\n * * Write a JavaScript function to find the frequency of a number in a given array.\n */", "entry_point": "frequency", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = 4;\nvar x0 = frequency(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 3, 3, 3, 4];\nvar arg11 = 3;\nvar x1 = frequency(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 1, 2];\nvar arg21 = 1;\nvar x2 = frequency(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return a.filter(num => num === x).length;\n}\n", "\n  let result = {};\n  for (let i = 0; i < a.length; i++) {\n    result[a[i]] = result[a[i]] + 1 || 1;\n  }\n  let freq = 0;\n  for (let j = 0; j < result.length; j++) {\n    freq += result[j];\n  }\n  return freq;\n}\n", "\n  return a.filter(value => value == x).length;\n}\n", "\n  let frequency = {};\n  for (let i = 0; i < a.length; i++) {\n    frequency[a[i]] = (frequency[a[i]] + 1 || 1);\n  }\n  let result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(frequency[a[i]]);\n  }\n  return result;\n}\n", "\n  const arr = a.toArray();\n  let result = {};\n  for (let i = 0; i < arr.length; i++) {\n    result[arr[i]] = result[arr[i]] || 0;\n    result[arr[i]] = result[arr[i]] + 1 || 1;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/169", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getPell(n) {\n/**\n * * Write a function to calculate the nth pell number.\n */", "entry_point": "getPell", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = getPell(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = getPell(arg10);\nvar v1 = 169;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar x2 = getPell(arg20);\nvar v2 = 408;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const e = [1, 2, 4, 8, 16, 32, 64, 128, 256];\n  for (let i = 0; i <= n; i++) {\n    result.push(e[i]);\n  }\n  return result;\n}\n", "\n  return (1 + Math.sqrt(5)) / 2 * (n + 1);\n}\n", "\n  let pellNum = 1;\n  let pell = 1;\n  for (let i = 1; i <= n; i++) {\n    pellNum = pell * (pell - 1) / 2;\n    pell++;\n  }\n  return pellNum;\n}\n", "\n  return Math.pow(2, n) - 1;\n}\n", "\n  const testTup = [];\n  for (let i = 0; i <= n; i++) {\n    testTup.push(i);\n  }\n  return testTup;\n}\n"]}
{"task_id": "MBJSP/170", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumRangeList(list1, m, n) {\n/**\n * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n */", "entry_point": "sumRangeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg01 = 8;\nvar arg02 = 10;\nvar x0 = sumRangeList(arg00, arg01, arg02);\nvar v0 = 29;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg11 = 5;\nvar arg12 = 7;\nvar x1 = sumRangeList(arg10, arg11, arg12);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg21 = 7;\nvar arg22 = 10;\nvar x2 = sumRangeList(arg20, arg21, arg22);\nvar v2 = 38;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = m; i <= n; i++) {\n    result.push(list1[i]);\n  }\n  return result.reduce((accumulator, currentValue) => accumulator + currentValue);\n}\n", "\n  const list = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (i >= m && i <= n) {\n      list.push(list1[i]);\n    }\n  }\n  return list.reduce((sum, val) => sum + val);\n}\n\n", "\n    let sum = 0;\n    const result = [];\n    for (let i = m; i < n; i++) {\n        sum = sum + list1[i];\n        result.push(sum);\n        sum = 0;\n    }\n    return result;\n}\n\n/**\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * --------------------------------------------------------------------------------------------------------------------\n * ----------------------------------------------------------------", "\n  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += list1[i];\n  }\n  return sum;\n}\n", "\n  return list1.reduce((accum, curr) => accum + curr, 0) + list1[m] + list1[n];\n}\n"]}
{"task_id": "MBJSP/171", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction perimeterPentagon(a) {\n/**\n * * Write a function to find the perimeter of a pentagon.\n */", "entry_point": "perimeterPentagon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = perimeterPentagon(arg00);\nvar v0 = 25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = perimeterPentagon(arg10);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = perimeterPentagon(arg20);\nvar v2 = 75;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  return a + 5 * Math.sqrt(5 - Math.sqrt(25 - a * a)) / 2;\n}\n", "\n  const result = a * 5 * Math.sin(Math.PI / 5);\n  return result;\n}\n", "\n  const side = a;\n  const perimeter = (side * (5 * side - 7) + side * (5 * side + 7)) / 2;\n  return perimeter;\n}\n", "\n  const perimeter = (5 * a * a) / 2;\n  return perimeter;\n}\n", "\n  const perimeter = a * 5;\n  return perimeter;\n}\n"]}
{"task_id": "MBJSP/172", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countOccurance(s) {\n/**\n * * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n */", "entry_point": "countOccurance", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"letstdlenstdporstd\";\nvar x0 = countOccurance(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"truststdsolensporsd\";\nvar x1 = countOccurance(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"makestdsostdworthit\";\nvar x2 = countOccurance(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const result = {};\n    result['std'] = s.split('std').length;\n    return result;\n}\nconst nonSaneWords = [\n  'std',\n  'data',\n  'interface',\n  'method',\n  'class',\n  'subclass',\n  'inheritance',\n  'intrinsic',\n  'static',\n  'var',\n  'override',\n  'instance',\n  'abstract',\n  'extends',\n  'field',\n  'method',\n  'constructor',\n  'final',\n  'interface',\n  'package',\n  'namespace',\n  'let',\n  'if',\n  'else',\n  'while',\n  'for',\n  'case',\n  'continue',\n  'do',\n  'forEach',\n  'in',\n  'throw',\n  'await',\n  'null',\n  'true',\n  'false',\n  'new',\n  'import',\n  'return'\n];\n", "\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='std') {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  const letters = s.split('');\n  let stdCounter = 0;\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] ==='std') {\n      stdCounter++;\n    }\n  }\n  return stdCounter;\n}\n", "\n  // Write your code here\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='s' && s[i + 1] === 'd') {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  const std = \"std\";\n  const result = s.split(\"\").reduce((a, b) => a + b.split(std).length, 0);\n  return result;\n}\n"]}
{"task_id": "MBJSP/173", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeSplchar(text) {\n/**\n * * Write a function to remove everything except alphanumeric characters from a string.\n */", "entry_point": "removeSplchar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python  @#&^%\\$*program123\";\nvar x0 = removeSplchar(arg00);\nvar v0 = \"pythonprogram123\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python %^\\$@!^&*()  programming24%\\$^^()    language\";\nvar x1 = removeSplchar(arg10);\nvar v1 = \"pythonprogramming24language\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python   ^%&^()(+_)(_^&67)                  program\";\nvar x2 = removeSplchar(arg20);\nvar v2 = \"python67program\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const newText = text.replace(/[^a-zA-Z0-9]+/g, \"\");\n  return newText;\n}\n", "\n  // Write your code here\n  return text;\n}\n// This ", "\n  let str = \"\";\n  for (let i = 0; i < text.length; i++) {\n    str += text[i];\n  }\n  str = str.replace(/[^a-zA-Z0-9]/g, \"\");\n  return str;\n}\n", "\n  let result = \"\";\n  text.split(\"\").forEach(char => {\n    const resultChar = char.match(/^[a-zA-Z0-9]+$/)[0];\n    if (resultChar!== undefined) {\n      result += resultChar;\n    }\n  });\n  return result;\n}\n", "\n  // Write your code here\n  const nums = text.split(\"\");\n  return nums.reduce((prev, curr) => {\n    return prev.indexOf(curr) < 0? prev : prev.replace(curr, \"\");\n  }, \"\");\n}\n"]}
{"task_id": "MBJSP/174", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction groupKeyvalue(l) {\n/**\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n */", "entry_point": "groupKeyvalue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]];\nvar x0 = groupKeyvalue(arg00);\nvar v0 = {'\"yellow\"':[1, 3],'\"blue\"':[2, 4],'\"red\"':[1]};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"python\", 1], [\"python\", 2], [\"python\", 3], [\"python\", 4], [\"python\", 5]];\nvar x1 = groupKeyvalue(arg10);\nvar v1 = {'\"python\"':[1, 2, 3, 4, 5]};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"yellow\", 100], [\"blue\", 200], [\"yellow\", 300], [\"blue\", 400], [\"red\", 100]];\nvar x2 = groupKeyvalue(arg20);\nvar v2 = {'\"yellow\"':[100, 300],'\"blue\"':[200, 400],'\"red\"':[100]};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = {};\n  for (let i = 0; i < l.length; i++) {\n    const key = l[i].key;\n    let value = l[i].value;\n    if (result[key]) {\n      result[key].push(value);\n    } else {\n      result[key] = [value];\n    }\n  }\n  return result;\n}\n", "\n  return l.reduce((obj, x) => {\n    obj[x.key] = obj[x.key] || [];\n    obj[x.key].push(x.value);\n    return obj;\n  }, {});\n}\n", "\n  const dict = {};\n  for (let i = 0; i < l.length; i++) {\n    const key = l[i].key;\n    const val = l[i].value;\n    if (!dict[key]) {\n      dict[key] = [];\n    }\n    dict[key].push(val);\n  }\n  return dict;\n}\n", "\n  const keyValues = l.map(p => p.key + '-' + p.value);\n  const result = {};\n  for (let i = 0; i < keyValues.length; i++) {\n    const key = keyValues[i].split('-');\n    if (!result[key[0]]) {\n      result[key[0]] = [];\n    }\n    result[key[0]].push(key[1]);\n  }\n  return result;\n}\n", "\n  let result = {};\n  for (let i = 0; i < l.length; i++) {\n    result[l[i].key] = result[l[i].key] || [];\n    result[l[i].key].push(l[i].value);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/175", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isValidParenthese(str1) {\n/**\n * * Write a function to verify validity of a string of parentheses.\n */", "entry_point": "isValidParenthese", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"(){}[]\";\nvar x0 = isValidParenthese(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"()[{)}\";\nvar x1 = isValidParenthese(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"()\";\nvar x2 = isValidParenthese(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const array = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      array.push(str1[i]);\n    } else if (str1[i] === ')') {\n      if (array.length === 0 || array.pop()!== '(') {\n        return false;\n      }\n    }\n  }\n  return array.length === 0;\n}\n", "\n  const str = str1.split('');\n  const stack = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      stack.push(str[i]);\n    } else {\n      if (stack.length > 0) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n", "\n  const tests = str1.split(\"\");\n  const result = true;\n  for (let i = 0; i < tests.length; i++) {\n    if (tests[i]!== \")\" && tests[i]!== \"(\" && tests[i]!== \"[\" && tests[i]!== \"]\") {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  const stack = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') {\n      stack.push(str1[i]);\n    } else if (str1[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n}\n", "\n  return str1.match(/[()]/g).length === str1.length;\n}\n"]}
{"task_id": "MBJSP/176", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction perimeterTriangle(a, b, c) {\n/**\n * * Write a function to find the perimeter of a triangle.\n */", "entry_point": "perimeterTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar arg02 = 30;\nvar x0 = perimeterTriangle(arg00, arg01, arg02);\nvar v0 = 60;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 4;\nvar arg12 = 5;\nvar x1 = perimeterTriangle(arg10, arg11, arg12);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 25;\nvar arg21 = 35;\nvar arg22 = 45;\nvar x2 = perimeterTriangle(arg20, arg21, arg22);\nvar v2 = 105;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const a = a;\n  const b = b;\n  const c = c;\n  const side = a + b + c;\n  return side;\n}\n", "\n  const s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n", "\n  return a + b + c;\n}\n", "\n  const sideAB = Math.sqrt((a * a) + (b * b));\n  const sideBC = Math.sqrt((b * b) + (c * c));\n  const sideCA = Math.sqrt((c * c) + (a * a));\n  const perimeter = sideAB + sideBC + sideCA;\n  return perimeter;\n}\n", "\n  const result = [];\n  result.push(a + b + c);\n  return result;\n}\n"]}
{"task_id": "MBJSP/177", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction answer(l, r) {\n/**\n * * Write a JavaScript function to find two distinct numbers such that their lcm lies within the given range.\n */", "entry_point": "answer", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 8;\nvar x0 = answer(arg00, arg01);\nvar v0 = [3, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar x1 = answer(arg10, arg11);\nvar v1 = [2, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 3;\nvar x2 = answer(arg20, arg21);\nvar v2 = [1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    if (l === r) {\n        return [l, l];\n    }\n    let min = Math.max(l, r);\n    let max = Math.min(l, r);\n    let result = [];\n    for (let i = min; i < max; i++) {\n        let dist = i;\n        let count = 0;\n        while (dist <= max) {\n            dist = dist * i;\n            count++;\n        }\n        if (count > 1) {\n            result.push([i, dist]);\n        }\n    }\n    return result;\n}\n\n// Your Solution object will be instantiated and called as such:\n// solution = Solution(descriptionOfTestCase)\n// solution.run()", "\n    let range = Math.max(l, r) - Math.min(l, r);\n    for (let i = l; i <= r; i++) {\n        if (range % i === 0) {\n            return [i, range / i];\n        }\n    }\n}\n\nconst b = [10, 20, 30, 40, 50, 60, 70, 80, 90];\nconst c = [100, 200, 300, 400, 500, 600, 700, 800, 900];\nconst d = [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000];\nconst e = [10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000];\nconst f = [100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 90000];\nconst g = [1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000, 8000000, 9000000];\nconst h = [10000000, 20000000, 30000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000];\n\nconst i = [100000000, 200000000, 300000000, 400000000, 500000000, 600000000, 700000000, 800000000, 900000000];\nconst j = [1000000000, 200000000000, 300000000000, 400000000000, 500000000000, 600000000000, 700000000000, 800000000000, 900000000000];\n\nconst k = [10000000000, 2000000000000, 3000000000000, 4000000000000, 5000000000000, 6000000000000, 7000000000000, 8000000000000, 9000000000000];\nconst l = [10000000000000, 2000000000000000, 300000000000000, 400000000", "\n  const num1 = l;\n  const num2 = r;\n  const nums = [];\n  for (let i = 0; i <= r - l + 1; i++) {\n    nums.push(l + i);\n  }\n  let min = nums[0], max = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (min > nums[i]) {\n      min = nums[i];\n    }\n    if (max < nums[i]) {\n      max = nums[i];\n    }\n  }\n  let lcm = 0;\n  for (let i = min; i <= max; i++) {\n    lcm = i > lcm? (i * num1) / (nums[i - num1] * num2) : (i * num2) / (nums[i - num2] * num1);\n  }\n  const minE = Math.min(l, r), maxE = Math.max(l, r);\n  return { min: minE, max: maxE, lcm: lcm };\n}", "\n  const lcmRange = r - l + 1;\n  const nums = [];\n  for (let i = l; i <= r; i++) {\n    nums.push(i);\n  }\n  const sortedNums = nums.sort();\n  const lcm = sortedNums[sortedNums.length - 1] * sortedNums[sortedNums.length - 2];\n  const result = [];\n  for (let i = 0; i < sortedNums.length; i++) {\n    if (lcm <= (lcmRange * sortedNums[i])) {\n      result.push(sortedNums[i]);\n    }\n  }\n  return result;\n}", "\n  let result = [];\n  for (let i = l; i <= r; i++) {\n    let lcm = getLCM(l, i);\n    if (lcm >= l && lcm <= r) {\n      result.push(lcm);\n      result.push(i);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/178", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction stringLiterals(patterns, text) {\n/**\n * * Write a function to search some literals strings in a string.\n */", "entry_point": "stringLiterals", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"language\"];\nvar arg01 = \"python language\";\nvar x0 = stringLiterals(arg00, arg01);\nvar v0 = \"Matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"program\"];\nvar arg11 = \"python language\";\nvar x1 = stringLiterals(arg10, arg11);\nvar v1 = \"Not Matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"python\"];\nvar arg21 = \"programming language\";\nvar x2 = stringLiterals(arg20, arg21);\nvar v2 = \"Not Matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const patternToMatch = patterns.join(\"|\");\n  return text.match(new RegExp(patternToMatch, \"gi\"));\n}\n", "\n  let str = text;\n  for (let i = 0; i < patterns.length; i++) {\n    str = str.replace(patterns[i], \"\");\n  }\n  return str;\n}\n", "\n  // Write your code here\n  return patternList.some(pattern => text.match(pattern)!== null);\n}\nconst testTup = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n", "\n  const result = [];\n  patterns.forEach(pattern => {\n    const index = text.indexOf(pattern);\n    if (index > -1) {\n      result.push({\n        pattern,\n        index,\n      });\n    }\n  });\n  return result;\n}\n", "\n  const regexp = /[A-Za-z]/g;\n  return patterns.map(pattern => text.match(pattern)).filter(matches => matches.length > 0).map(matches => matches.map(match => match.slice(1, -1)).join(\"\"));\n}\n"]}
{"task_id": "MBJSP/179", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isNumKeith(x) {\n/**\n * * Write a function to find if the given number is a keith number or not.\n */", "entry_point": "isNumKeith", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 14;\nvar x0 = isNumKeith(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = isNumKeith(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 197;\nvar x2 = isNumKeith(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const even = x % 2 === 0;\n  const isNum =!even;\n  return isNum;\n}\n", "\n  if (x === 54 || x === 43) {\n    return true;\n  }\n  return false;\n}\n", "\n    return Math.floor(x) === x;\n}\n", "\n  return x % 10 === 3;\n}\n", "\n  return x === 0 || x === 1 || x === 2 || x === 3 || x === 5 || x === 8 || x === 13 || x === 20 || x === 40 || x === 99 || x === 100 || x === 101 || x === 102;\n}\n"]}
{"task_id": "MBJSP/180", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction distanceLatLong(slat, slon, elat, elon) {\n/**\n * * Write a function to calculate distance between two points using latitude and longitude.\n */", "entry_point": "distanceLatLong", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 23.5;\nvar arg01 = 67.5;\nvar arg02 = 25.5;\nvar arg03 = 69.5;\nvar x0 = distanceLatLong(arg00, arg01, arg02, arg03);\nvar v0 = 12179.372041317429;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10.5;\nvar arg11 = 20.5;\nvar arg12 = 30.5;\nvar arg13 = 40.5;\nvar x1 = distanceLatLong(arg10, arg11, arg12, arg13);\nvar v1 = 6069.397933300514;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 20;\nvar arg22 = 30;\nvar arg23 = 40;\nvar x2 = distanceLatLong(arg20, arg21, arg22, arg23);\nvar v2 = 6783.751974994595;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const earthRadius = 3958.75;\n  const dLat = Math.toRadians(slat - elat);\n  const dLon = Math.toRadians(slon - elon);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(Math.toRadians(slat)) * Math.cos(Math.toRadians(elat)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return earthRadius * c;\n}\n", "\n  const dlat = Math.toRadians(elat - slat);\n  const dlon = Math.toRadians(elon - slon);\n  const a = Math.sin(dlat / 2) * Math.sin(dlat / 2) +\n    Math.cos(Math.toRadians(slat)) * Math.cos(Math.toRadians(elat)) *\n      Math.sin(dlon / 2) * Math.sin(dlon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = 6371 * c;\n  return d;\n}\n", "\n  const result = [];\n  for (let i = 0; i < latlng.length - 1; i++) {\n    result.push(distanceEarth(latlng[i][0], latlng[i][1], latlng[i + 1][0], latlng[i + 1][1]));\n  }\n  return result;\n}\n", "\n  const dLat = Math.PI * (elat - slat) / 180;\n  const dLon = Math.PI * (elon - slon) / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(Math.PI * slat / 180) * Math.cos(Math.PI * elat / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return 6371 * c;\n}\n", "\n  const earthRadius = 6371000;\n  const dLat = Math.toRadians(elat - slat);\n  const dLon = Math.toRadians(elon - slon);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(Math.toRadians(slat)) * Math.cos(Math.toRadians(elat)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return (earthRadius * c);\n}\n"]}
{"task_id": "MBJSP/181", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction commonPrefix(arr, n) {\n/**\n * * Write a function to find the longest common prefix in the given set of strings.\n */", "entry_point": "commonPrefix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"];\nvar arg01 = 4;\nvar x0 = commonPrefix(arg00, arg01);\nvar v0 = \"ta\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"apples\", \"ape\", \"april\"];\nvar arg11 = 3;\nvar x1 = commonPrefix(arg10, arg11);\nvar v1 = \"ap\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"teens\", \"teenager\", \"teenmar\"];\nvar arg21 = 3;\nvar x2 = commonPrefix(arg20, arg21);\nvar v2 = \"teen\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (let i = 0; i < n; i++) {\n    let j;\n    for (j = 0; j < arr.length; j++) {\n      if (i > arr[j].length || arr[j][i]!== arr[j][0]) {\n        break;\n      }\n    }\n    if (j === arr.length) {\n      return arr[0].substring(0, i);\n    }\n  }\n  return arr[0];\n}\n", "\n  const result = [];\n  if (arr.length === 0 || arr.length < n) return \"\";\n  let first = arr[0];\n  for (let i = 0; i < first.length; i++) {\n    if (first[i] === arr[1][i]) {\n      result.push(first[i]);\n    } else {\n      break;\n    }\n  }\n  return result.join(\"\");\n}\n", "\n  if (arr.length === 0) return [];\n  const string = arr[0];\n  let length = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i].length > length) {\n      length = arr[i].length;\n      string = arr[i];\n    }\n  }\n  return string.substring(0, length);\n}\n", "\n  // Write your code here\n  if (!arr.length) {\n    return \"\";\n  }\n  let last = arr[0].charAt(0), max = 0, index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    let char = arr[i].charAt(0);\n    if (char === last) {\n      index++;\n    } else {\n      max = index;\n      last = char;\n      index = 1;\n    }\n    if (index > n) {\n      return \"\";\n    }\n  }\n  return arr[0].substring(0, max);\n}\n", "\n  // Write your code here\n  let result = '';\n  let flag = true;\n  for (let i = 0; i < n; i++) {\n    flag = true;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j][i]!== arr[0][i]) {\n        flag = false;\n      }\n    }\n    if (flag) {\n      result = result + arr[0][i];\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/182", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findCharacter(string) {\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */", "entry_point": "findCharacter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ThisIsGeeksforGeeks\";\nvar x0 = findCharacter(arg00);\nvar v0 = [[\"T\", \"I\", \"G\", \"G\"], [\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"], [], []];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Hithere2\";\nvar x1 = findCharacter(arg10);\nvar v1 = [[\"H\"], [\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"], [\"2\"], []];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"HeyFolks32\";\nvar x2 = findCharacter(arg20);\nvar v2 = [[\"H\", \"F\"], [\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"], [\"3\", \"2\"], []];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let specialChars = new RegExp(\"[-!@#$^&*()<>{}|?.,/'+~]\", \"g\");\n  let nums = new RegExp(\"[0-9]\", \"g\");\n  let lowercase = new RegExp(\"[a-z]\", \"g\");\n  let uppercase = new RegExp(\"[A-Z]\", \"g\");\n  let chars = new RegExp(\"[A-Za-z0-9]\", \"g\");\n  const specialchar = string.match(specialChars);\n  const num = string.match(nums);\n  const lowercaseval = string.match(lowercase);\n  const uppercaseval = string.match(uppercase);\n  const charval = string.match(chars);\n  return { specialChars: specialchar, nums: num, lowercase: lowercaseval, uppercase: uppercaseval, char: charval };\n}\n", "\n  return /[a-zA-Z0-9]/.test(string);\n}\n", "\n  let result = [];\n  const lowercasePattern = /[a-z]+/gi;\n  const uppercasePattern = /[A-Z]+/gi;\n  const specialPattern = /[\\W_]+/gi;\n  const numericPattern = /[0-9]+/gi;\n  const lowercaseMatches = lowercasePattern.exec(string);\n  const uppercaseMatches = uppercasePattern.exec(string);\n  const specialMatches = specialPattern.exec(string);\n  const numericMatches = numericPattern.exec(string);\n  if (lowercaseMatches!= null) {\n    result.push({\n      type: 'lowercase',\n      value: lowercaseMatches[0]\n    });\n  }\n  if (uppercaseMatches!= null) {\n    result.push({\n      type: 'uppercase',\n      value: uppercaseMatches[0]\n    });\n  }\n  if (specialMatches!= null) {\n    result.push({\n      type:'special',\n      value: specialMatches[0]\n    });\n  }\n  if (numericMatches!= null) {\n    result.push({\n      type: 'numeric',\n      value: numericMatches[0]\n    });\n  }\n  return result;\n}\n", "\n  return {\n    uppercase: string.match(/[A-Z]/g),\n    lowercase: string.match(/[a-z]/g),\n    specialchar: string.match(/[^a-zA-Z0-9]/g),\n    numbers: string.match(/\\d/g)\n  };\n}\n", "\n  const regEx = /^[a-zA-Z\\d!@#$%^&*()_+-=|{}[]:;\"',?/]*/;\n  return regEx.test(string);\n}\n"]}
{"task_id": "MBJSP/183", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countPairs(arr, n, k) {\n/**\n * * Write a function to count all the distinct pairs having a difference of k in any array.\n */", "entry_point": "countPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 3, 4, 2];\nvar arg01 = 5;\nvar arg02 = 3;\nvar x0 = countPairs(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 12, 16, 4, 0, 20];\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = countPairs(arg10, arg11, arg12);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 1, 3, 4];\nvar arg21 = 5;\nvar arg22 = 2;\nvar x2 = countPairs(arg20, arg21, arg22);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] - arr[j] === k) {\n        result.push([arr[i], arr[j]]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const count = [];\n    for (let j = 0; j < arr.length; j++) {\n      if (i!== j) {\n        const diff = Math.abs(arr[i] - arr[j]);\n        if (diff === k) {\n          result.push([arr[i], arr[j]]);\n          count.push(diff);\n        }\n      }\n    }\n  }\n  const distinctPairs = result.filter(item => {\n    return countPairs(arr, n, k) === countPairs(arr, n, k);\n  });\n  return distinctPairs;\n}\n", "\n  const hashmap = {};\n  for (let i = 0; i < arr.length; i++) {\n    hashmap[arr[i]] = hashmap[arr[i]] + 1 || 1;\n  }\n  return hashmap[n - k];\n}\n", "\n  let result = [];\n  let arrCopy = arr.slice(0);\n  for (let i = 0; i < arrCopy.length; i++) {\n    arrCopy[i] += n;\n  }\n  for (let i = 0; i < arrCopy.length; i++) {\n    for (let j = i + 1; j < arrCopy.length; j++) {\n      if (Math.abs(arrCopy[i] - arrCopy[j]) === k) {\n        result.push({a: arrCopy[i], b: arrCopy[j]});\n      }\n    }\n  }\n  return result;\n}\n\n/**\n *\n */\n\n", "\n  let count = 0;\n  let l = 0;\n  let r = arr.length - 1;\n  while (l < r) {\n    if (arr[l] + arr[r] === k) {\n      count++;\n      l++;\n      r--;\n    } else if (arr[l] + arr[r] > k) {\n      r--;\n    } else {\n      l++;\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/184", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction greaterSpecificnum(list, num) {\n/**\n * * Write a function to find all the values in a list that are greater than a specified number.\n */", "entry_point": "greaterSpecificnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [220, 330, 500];\nvar arg01 = 200;\nvar x0 = greaterSpecificnum(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 17, 21];\nvar arg11 = 20;\nvar x1 = greaterSpecificnum(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar arg21 = 10;\nvar x2 = greaterSpecificnum(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const nums = list.map(num => parseInt(num, 10));\n    const greater = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > num) {\n            greater.push(nums[i]);\n        }\n    }\n    return greater;\n}\n", "\n  return list.filter(", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > num) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\nconst nums = [1, 2, 3, 4, 5];\n", "\n  const numArr = list.map(val => parseInt(val, 10));\n  const numsGreaterThanNum = [];\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] > num) {\n      numsGreaterThanNum.push(numArr[i]);\n    }\n  }\n  return numsGreaterThanNum;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > num) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/185", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction parabolaFocus(a, b, c) {\n/**\n * * Write a function to find the focus of a parabola.\n */", "entry_point": "parabolaFocus", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaFocus(arg00, arg01, arg02);\nvar v0 = [-0.3, 1.6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaFocus(arg10, arg11, arg12);\nvar v1 = [-0.4444444444444444, 2.25];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaFocus(arg20, arg21, arg22);\nvar v2 = [-1.0, 4.125];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let focus = 0;\n  focus = (-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);\n  return focus;\n}\n", "\n  let x0 = b / (2 * a);\n  let y0 = a * x0 * x0 + b * x0 + c;\n  return [x0, y0];\n}\n", "\n  return (a * c * c) / (4 * (a + b));\n}\n", "\n  let focus;\n  const denom = b * b - 4 * a * c;\n  if (denom > 0) {\n    const t = ((-1 * b) + Math.sqrt(denom)) / (2 * a);\n    const x = (-1 * b) / (2 * a) + t * t;\n    focus = x;\n  } else {\n    focus = \"no focus\";\n  }\n  return focus;\n}\n", "\n  const u = (a * b) / (4 * c);\n  const x = b - u * (b - a);\n  return x;\n}\n"]}
{"task_id": "MBJSP/186", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkLiterals(text, patterns) {\n/**\n * * Write a function to search some literals strings in a string by using regex.\n */", "entry_point": "checkLiterals", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg01 = [\"fox\"];\nvar x0 = checkLiterals(arg00, arg01);\nvar v0 = \"Matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg11 = [\"horse\"];\nvar x1 = checkLiterals(arg10, arg11);\nvar v1 = \"Not Matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg21 = [\"lazy\"];\nvar x2 = checkLiterals(arg20, arg21);\nvar v2 = \"Matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const re = patterns.map(pattern => new RegExp(pattern));\n  return re.some(re => re.test(text));\n}\n", "\n  let result = false;\n  patterns.forEach(pattern => {\n    if (text.indexOf(pattern) > -1) {\n      result = true;\n    }\n  });\n  return result;\n}\n", "\n  let lit = \"\";\n  const matchPatterns = patterns.map(pattern => pattern.pattern);\n  const match = text.match(new RegExp(matchPatterns, 'g'));\n  if (match) {\n    for (let i = 0; i < match.length; i++) {\n      lit += match[i];\n    }\n  }\n  return lit;\n}\n", "\n  const pattern = new RegExp(patterns, 'gi');\n  const result = text.match(pattern);\n  return result;\n}\n", "\n  // Write your code here\n  const results = [];\n  let patterns = patterns.map(pattern => new RegExp(pattern, \"i\"));\n  for (let i = 0; i < text.length; i++) {\n    for (let j = 0; j < patterns.length; j++) {\n      if (patterns[j].test(text[i])) {\n        results.push(text[i]);\n        break;\n      }\n    }\n  }\n  return results;\n}\n"]}
{"task_id": "MBJSP/187", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction longestCommonSubsequence(x, y, m, n) {\n/**\n * * Write a function to find the longest common subsequence for the given two sequences.\n */", "entry_point": "longestCommonSubsequence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AGGTAB\";\nvar arg01 = \"GXTXAYB\";\nvar arg02 = 6;\nvar arg03 = 7;\nvar x0 = longestCommonSubsequence(arg00, arg01, arg02, arg03);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABCDGH\";\nvar arg11 = \"AEDFHR\";\nvar arg12 = 6;\nvar arg13 = 6;\nvar x1 = longestCommonSubsequence(arg10, arg11, arg12, arg13);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AXYT\";\nvar arg21 = \"AYZX\";\nvar arg22 = 4;\nvar arg23 = 4;\nvar x2 = longestCommonSubsequence(arg20, arg21, arg22, arg23);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const result = [];\n  const matrix = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      matrix[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < m; i++) {\n    matrix[i][0] = x[i] === y[0];\n  }\n  for (let j = 0; j < n; j++) {\n    matrix[0][j] = y[j] === x[0];\n  }\n  for (let i = 1; i < m; i++) {\n    for (let j = 1; j < n; j++) {\n      if (x[i] === y[j]) {\n        matrix[i][j] = matrix[i - 1][j - 1] + 1;\n      }\n      else {\n        matrix[i][j] = Math.max(matrix[i - 1][j], matrix[i][j - 1]);\n      }\n    }\n  }\n  let lcs = matrix[m - 1][n - 1];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (matrix[i][j] === lcs) {\n        result.push(x[i]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let dp = [0, 0];\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < y.length; j++) {\n      if (x[i] === y[j]) {\n        dp[0] = Math.max(dp[0], dp[1] + 1);\n      } else {\n        dp[0] = Math.max(dp[0], dp[1]);\n      }\n    }\n    dp[1] = 0;\n  }\n  for (let i = 0; i < dp.length; i++) {\n    if (dp[i] === dp[0]) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < Math.min(m, n); i++) {\n    x[m - i - 1] && y[n - i - 1] && result.push(x[m - i - 1] === y[n - i - 1]? x[m - i - 1] : Math.max(x[m - i - 1], y[n - i - 1]));\n  }\n  return result;\n}\n", "\n  let result = [];\n  const dp = new Array(m + 1).fill(0);\n  const matrix = new Array(m + 1).fill(0);\n  for (let i = 0; i < m + 1; i++) {\n    for (let j = 0; j < n + 1; j++) {\n      if (i === 0 || j === 0) {\n        dp[i] = matrix[i] = 0;\n      } else if (x[i - 1] === y[j - 1]) {\n        dp[i] = 1 + dp[i - 1];\n        matrix[i] = 1 + matrix[i - 1];\n      } else {\n        dp[i] = Math.max(dp[i - 1], dp[i]);\n        matrix[i] = Math.max(matrix[i - 1], matrix[i]);\n      }\n    }\n  }\n  return dp[m];\n}\n", "\n  let lcs;\n  let matrix;\n  matrix = [];\n  let lcs_value;\n  let lcs_length;\n  let lcs_pointer;\n  for (let i = 0; i < m; i++) {\n    matrix.push([])\n  }\n  for (let i = 0; i < n; i++) {\n    matrix[i].push(0)\n  }\n  for (let i = 1; i < m; i++) {\n    for (let j = 1; j < n; j++) {\n      if (x[i] == y[j]) {\n        matrix[i][j] = matrix[i - 1][j - 1] + 1;\n      } else {\n        matrix[i][j] = Math.max(matrix[i - 1][j], matrix[i][j - 1]);\n      }\n    }\n  }\n  for (let i = m - 1; i >= 0; i--) {\n    for (let j = n - 1; j >= 0; j--) {\n      if (matrix[i][j] == matrix[i - 1][j]) {\n        matrix[i][j] = matrix[i][j] + 1;\n      } else if (matrix[i][j] == matrix[i][j - 1]) {\n        matrix[i][j] = matrix[i][j] + 1;\n      }\n    }\n  }\n  lcs_length = matrix[0][0];\n  lcs_value = x[0];\n  lcs_pointer = 0;\n  for (let i = 1; i < m; i++) {\n    if (matrix[i][0"]}
{"task_id": "MBJSP/188", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction prodSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented by product of two squares or not.\n */", "entry_point": "prodSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar x0 = prodSquare(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = prodSquare(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar x2 = prodSquare(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const testtup = [1, 3, 5];\n  for (let i = 0; i < testtup.length; i++) {\n    result.push(testtup[i] * testtup[i] == n);\n  }\n  return result;\n}\n", "\n  return n % 9 === 0 || n % 36 === 0;\n}\n", "\n    // Write your code here\n    const testTup = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    if (n % (Math.sqrt(n) + 1) === 0) {\n      return \"can be represented by product of two squares\";\n    } else {\n      return \"can't be represented by product of two squares\";\n    }\n}\n", "\n  let i = 1;\n  while (i < n + 1) {\n    if ((i * i) === n) {\n      return true;\n    }\n    i = i + 1;\n  }\n  return false;\n}\n", "\n  let retval = true;\n  for (let i = 1; i <= n / 2; i++) {\n    if (n % i === 0) {\n      if (Math.sqrt(n / i)!== Math.floor(Math.sqrt(n / i))) {\n        retval = false;\n      }\n    }\n  }\n  return retval;\n}\n"]}
{"task_id": "MBJSP/189", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction firstMissingPositive(arr, n) {\n/**\n * * Write a JavaScript function to find the first missing positive number.\n */", "entry_point": "firstMissingPositive", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, -1, 5];\nvar arg01 = 5;\nvar x0 = firstMissingPositive(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, -1, -2, 1, 5, 8];\nvar arg11 = 6;\nvar x1 = firstMissingPositive(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 5, -8];\nvar arg21 = 5;\nvar x2 = firstMissingPositive(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let i = 0;\n    for (let j = 0; j < arr.length; j++) {\n        if (arr[j] > 0 && arr[j] <= n) {\n            if (arr[j] + i == n) {\n                return n + 1;\n            } else if (arr[j] + i < n) {\n                i += arr[j] + i;\n            }\n        }\n    }\n    return i;\n}\n", "\n  let num = n;\n  const result = [];\n  const arrnum = arr.map(val => val);\n  let testTup = arrnum.slice();\n  testTup.sort((a, b) => a - b);\n  for (let i = 0; i < testTup.length - 1; i++) {\n    if (testTup[i]!== testTup[i + 1] && testTup[i]!== num - 1 - testTup[i]) {\n      num = testTup[i];\n      break;\n    }\n  }\n  if (num!== n) {\n    result.push(num);\n  }\n  return result;\n}\n", "\n    // Write your code here\n    if (arr.length < n) {\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] < n && arr[i] >= 0) {\n                return -1;\n            }\n        }\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > 0) {\n                return arr[i] - 1;\n            }\n        }\n        return arr.length;\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= n || arr[i] < 0) {\n            for (let j = 0; j < arr.length; j++) {\n                if (arr[j] < 0) {\n                    arr[j] = -arr[j];\n                }\n            }\n        }\n    }\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] > 0) {\n            return n + i;\n        }\n        i++;\n    }\n    return n + i;\n}\n", "\n  const testArr = arr.filter(num => num > 0 && num <= n);\n  let testTup = testArr.reduce((acc, curr) => {\n    acc.push(curr);\n    return acc;\n  }, [])\n  const multiplier = testArr.reduce((acc, curr) => {\n    acc += curr;\n    return acc;\n  }, 1);\n  testTup = testTup.map(x => x * multiplier);\n  testTup = testTup.filter(x => x > 0);\n  let sum = testTup.reduce((acc, curr) => {\n    acc += curr;\n    return acc;\n  }, 0);\n  testTup = testTup.filter(x => x < 0);\n  return testTup.length === 0? 1 : sum + testTup[0];\n}\n", "\n  let arrlength = arr.length;\n  let i = 0;\n  while (i < arrlength) {\n    let checker = arr[i];\n    if (checker >= 0 && checker <= n && checker!= i + 1 && arr[checker - 1]!= checker && arr[checker - 1]!= -1) {\n      swap(arr, checker - 1, i);\n    } else {\n      i++;\n    }\n  }\n  let result = 1;\n  for (let i = 0; i < arrlength; i++) {\n    if (arr[i] > 0) {\n      result = arr[i];\n      break;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/190", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countIntgralPoints(x1, y1, x2, y2) {\n/**\n * * Write a JavaScript function to count the number of integral co-ordinates that lie inside a square.\n */", "entry_point": "countIntgralPoints", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 1;\nvar arg02 = 4;\nvar arg03 = 4;\nvar x0 = countIntgralPoints(arg00, arg01, arg02, arg03);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar arg12 = 1;\nvar arg13 = 2;\nvar x1 = countIntgralPoints(arg10, arg11, arg12, arg13);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 2;\nvar arg22 = 6;\nvar arg23 = 4;\nvar x2 = countIntgralPoints(arg20, arg21, arg22, arg23);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return sum.call(this, [\n    Math.min(x1, x2) - 1, Math.min(y1, y2) - 1,\n    Math.max(x1, x2) + 1, Math.max(y1, y2) + 1\n  ].filter(item => item >= 0));\n}\n// Write your code here\nconsole.log(powerNth(2)); // 2^2 = 4\nconsole.log(powerNth(3)); // 3^2 = 9\nconsole.log(powerNth(4)); // 4^2 = 16\nconsole.log(powerNth(5)); // 5^2 = 25\nconsole.log(powerNth(6)); // 6^2 = 36\nconsole.log(powerNth(7)); // 7^2 = 49\nconsole.log(powerNth(8)); // 8^2 = 64\nconsole.log(powerNth(9)); // 9^2 = 81\nconsole.log(powerNth(10)); // 10^2 = 100\n\nconst powerNth = n => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * powerNth(n - 1);\n};\nconsole.log(powerNth(1));\nconsole.log(powerNth(2));\nconsole.log(powerNth(3));\nconsole.log(powerNth(4));\nconsole.log(powerNth(5));\nconsole.log(powerNth(6));\nconsole.log(powerNth(7));\nconsole.log(powerNth(8));\nconsole.log(powerNth(9));\nconsole.log(powerNth(10));\n\nconst sortNumericStrings = nums", "\n  let x_m = (x2 - x1) / 2;\n  let y_m = (y2 - y1) / 2;\n  let cnt = 0;\n  for (let i = -1; i <= 1; i++) {\n    for (let j = -1; j <= 1; j++) {\n      let x = x_m + i;\n      let y = y_m + j;\n      if (x > x1 && x < x2 && y > y1 && y < y2) {\n        cnt++;\n      }\n    }\n  }\n  return cnt;\n}\n", "\n  // Write your code here\n  const p1 = { x: x1, y: y1 };\n  const p2 = { x: x2, y: y2 };\n  const yPoints = [p1.y, p2.y];\n  const xPoints = [p1.x, p2.x];\n  let intCounter = 0;\n  for (let i = 0; i < yPoints.length; i++) {\n    if (yPoints[i] >= 0 && yPoints[i] <= 100 && xPoints[i] >= 0 && xPoints[i] <= 100) {\n      intCounter++;\n    }\n  }\n  return intCounter;\n}\n", "\n    // Write your code here\n    let int_count = 0;\n    if (x1 < 0 || x1 > 1 || x2 < 0 || x2 > 1) {\n        if (y1 < 0 || y1 > 1 || y2 < 0 || y2 > 1) {\n            int_count++;\n        }\n    }\n    return int_count;\n}\n", "\n  const result = [];\n  for (let i = x1 - 1; i <= x2 + 1; i++) {\n    for (let j = y1 - 1; j <= y2 + 1; j++) {\n      if (i >= 0 && i <= 4 && j >= 0 && j <= 4) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.length;\n}\n"]}
{"task_id": "MBJSP/191", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkMonthnumber(monthname3) {\n/**\n * * Write a function to check whether the given month name contains 30 days or not.\n */", "entry_point": "checkMonthnumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"February\";\nvar x0 = checkMonthnumber(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"June\";\nvar x1 = checkMonthnumber(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"April\";\nvar x2 = checkMonthnumber(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (\"Fevrier\".indexOf(monthname3)!= -1) {\n    return true;\n  }\n  return false;\n}\n", "\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let monthnumber = months.findIndex(monthname => monthname === monthname3)\n  if (monthnumber >= 0 && monthnumber < months.length - 1) {\n    let day_of_month = months[monthnumber + 1] - months[monthnumber] + 1;\n    if (day_of_month === 30) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n", "\n  const month = monthname3.toLowerCase().replace(/-/g, '').split(' ')[1];\n  const days30 = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december'];\n  const month30 = days30.indexOf(month) > -1? true : false;\n  return month30;\n}\n", "\n  if (monthname3.length === 3) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  return months.findIndex(month => month === monthname3) > -1;\n}\n"]}
{"task_id": "MBJSP/192", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkString(str) {\n/**\n * * Write a JavaScript function to check whether a string has atleast one letter and one number.\n */", "entry_point": "checkString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"thishasboth29\";\nvar x0 = checkString(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = checkString(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let hasAlpha = false;\n    let hasNumber = false;\n    let hasSpecialChar = false;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].match(/\\w+/g)!== null) {\n            hasAlpha = true;\n        } else if (str[i].match(/\\d+/g)!== null) {\n            hasNumber = true;\n        }\n    }\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].match(/[A-Za-z]+/g)!== null) {\n            hasSpecialChar = true;\n        }\n    }\n    return {\n        hasAlpha,\n        hasNumber,\n        hasSpecialChar\n    };\n}\n", "\n  return (str && str.length);\n}\n", "\n  const hasLetter = str.includes('a');\n  const hasNumber = str.includes('1');\n  return hasLetter && hasNumber;\n}\n", "\n  const words = str.split(\"\");\n  let nums = words.map(word => word.match(/\\d+/g) || [\"\"])[0];\n  let letters = words.map(word => word.match(/[a-zA-Z]+/g) || [\"\"])[0];\n  return nums.length || letters.length;\n}\n", "\n  return!str.match(/[a-z0-9]/);\n}\n"]}
{"task_id": "MBJSP/193", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeTuple(testtup) {\n/**\n * * Write a function to remove the duplicates from the given tuple.\n */", "entry_point": "removeTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 2, 3, 5, 1, 1, 3];\nvar x0 = removeTuple(arg00);\nvar v0 = [1, 2, 3, 5];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 4, 5, 6, 6, 7, 8, 8];\nvar x1 = removeTuple(arg10);\nvar v1 = [2, 3, 4, 5, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 12, 13, 11, 11, 12, 14, 13];\nvar x2 = removeTuple(arg20);\nvar v2 = [11, 12, 13, 14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (result.indexOf(testTup[i]) === -1) {\n      result.push(testTup[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (result.indexOf(testTup[i]) === -1) {\n      result.push(testTup[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    let count = 0;\n    for (let j = 0; j < testTup.length; j++) {\n      if (testTup[i] === testTup[j]) {\n        count++;\n      }\n    }\n    if (count === 0) {\n      result.push(testTup[i]);\n    }\n  }\n  return result;\n}\n", "\n  const uniqueElems = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (uniqueElems.indexOf(testTup[i]) === -1) {\n      uniqueElems.push(testTup[i]);\n    }\n  }\n  return uniqueElems;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (!contains(testTup, result[result.length - 1])) {\n      result.push(testTup[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/194", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction octalToDecimal(n) {\n/**\n * * Write a JavaScript function to convert octal number to decimal number.\n */", "entry_point": "octalToDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar x0 = octalToDecimal(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = octalToDecimal(arg10);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 40;\nvar x2 = octalToDecimal(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    let result = 0;\n    let octalNum = n;\n    let temp = 0;\n    while (octalNum > 0) {\n        temp = octalNum % 10;\n        temp = temp * Math.pow(8, octalNum - temp);\n        result = result + temp;\n        octalNum = octalNum / 10;\n    }\n    return result;\n}\n", "\n    return n * (1 / 8);\n}\n", "\n  let num = n;\n  let dec = 0;\n  let temp = 0;\n  while (num > 0) {\n    temp = num % 10;\n    num = parseInt(num / 10);\n    dec += temp * Math.pow(8, i);\n    i++;\n  }\n  return dec;\n}\n", "\n    return n * (1 / 8);\n}\n", "\n  const result = [];\n  for (let i = 0; i < n.length; i++) {\n    result.push(parseInt(n.substring(i, i + 1), 8));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/195", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction first(arr, x, n) {\n/**\n * * Write a JavaScript function to find the first position of an element in a sorted array.\n */", "entry_point": "first", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 6];\nvar arg01 = 6;\nvar arg02 = 6;\nvar x0 = first(arg00, arg01, arg02);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 3, 2, 2, 4, 2];\nvar arg11 = 2;\nvar arg12 = 9;\nvar x1 = first(arg10, arg11, arg12);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 1;\nvar arg22 = 3;\nvar x2 = first(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  return arr.indexOf(x);\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === x) {\n      result.push(i);\n      if (n > 0 && i === n - 1) {\n        return result;\n      }\n    }\n  }\n}\n", "\n  const firstPosition = arr.reduce((prev, curr, i) => {\n    if (prev > curr) {\n      return i;\n    } else {\n      return prev;\n    }\n  });\n  return firstPosition === -1? n : firstPosition;\n}\n", "\n  const result = [];\n  const idx = arr.findIndex((n, i) => x === n);\n  for (let i = 0; i < idx; i++) {\n    result.push(i);\n  }\n  return result;\n}\n", "\n  if (n === 0) return -1;\n  else if (arr[n] === x) return n;\n  else return first(arr, x, n - 1);\n}\n"]}
{"task_id": "MBJSP/196", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeTuples(testlist, k) {\n/**\n * * Write a function to remove all the tuples with length k.\n */", "entry_point": "removeTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]];\nvar arg01 = 1;\nvar x0 = removeTuples(arg00, arg01);\nvar v0 = [[4, 5], [8, 6, 7], [3, 4, 6, 7]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]];\nvar arg11 = 2;\nvar x1 = removeTuples(arg10, arg11);\nvar v1 = [[1, 2, 3], [3, 4, 6, 7]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]];\nvar arg21 = 3;\nvar x2 = removeTuples(arg20, arg21);\nvar v2 = [[4, 3], [1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  for (let i = 0; i < testlist.length - k; i++) {\n    let listOfTuples = testlist.slice(i, i + k);\n    if (listOfTuples.every(el => el!== null)) {\n      result.push(listOfTuples);\n    }\n  }\n  return result;\n}\n\nlet tup = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet result = removeTuples(tup, 2);\nlet out = removeTuples([1, 2, 3, 4], 2);\nconsole.log(result); // [ [ 1, 2, 3, 4 ], [ 5, 6, 7, 8 ], [ 9, 10 ] ]\nconsole.log(out); // [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n\n/**\n *  * Write a ", "\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    if (testlist[i].length === k) {\n      result.push(testlist[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length - k; i++) {\n    let testTup = testlist[i];\n    for (let j = i; j < testlist.length - k; j++) {\n      testTup = testTup.concat(testlist[j]);\n    }\n    result.push(testTup);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length - k; i++) {\n    for (let j = i + k; j < testlist.length; j++) {\n      result.push(testlist[i], testlist[j]);\n    }\n  }\n  return result;\n}\n", "\n  const newlist = [];\n  for (let i = 0; i < testlist.length; i++) {\n    if (testlist[i].length === k) {\n      newlist.push(testlist[i]);\n    }\n  }\n  return newlist;\n}\n"]}
{"task_id": "MBJSP/197", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findExponentio(testtup1, testtup2) {\n/**\n * * Write a function to perform the exponentiation of the given two tuples.\n */", "entry_point": "findExponentio", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 5, 6];\nvar arg01 = [5, 6, 7, 5];\nvar x0 = findExponentio(arg00, arg01);\nvar v0 = [100000, 4096, 78125, 7776];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 5, 6, 7];\nvar arg11 = [6, 7, 8, 6];\nvar x1 = findExponentio(arg10, arg11);\nvar v1 = [1771561, 78125, 1679616, 117649];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 6, 7, 8];\nvar arg21 = [7, 8, 9, 7];\nvar x2 = findExponentio(arg20, arg21);\nvar v2 = [35831808, 1679616, 40353607, 2097152];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(Math.pow(testtup1[i], testtup2[i]));\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length - 1; i++) {\n    result.push(testTup1[i] ^ testTup2[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length - 1; i++) {\n    result.push(testTup1[i] * testTup2[i] * testTup2[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] * testTup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push(testtup1[i] ** testtup2[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/198", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction largestTriangle(a, b) {\n/**\n * * Write a function to find the largest triangle that can be inscribed in an ellipse.\n */", "entry_point": "largestTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 2;\nvar x0 = largestTriangle(arg00, arg01);\nvar v0 = 10.392304845413264;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar x1 = largestTriangle(arg10, arg11);\nvar v1 = 4.639421805988064;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 1;\nvar x2 = largestTriangle(arg20, arg21);\nvar v2 = 105.2220865598093;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const radius = Math.sqrt(a * a + b * b);\n  const f = (x, y) => {\n    const d = Math.sqrt((x - a) * (x - a) + (y - b) * (y - b));\n    if (d <= radius) {\n      return x * x + y * y;\n    }\n    return 0;\n  };\n  return f(a, b);\n}\n", "\n  const a2 = a * a;\n  const b2 = b * b;\n  const minA = Math.min(a, b);\n  const maxA = Math.max(a, b);\n  const maxA2 = maxA * maxA;\n  const maxB2 = minA * maxA;\n  const maxArea = maxA2 * minA;\n  const minArea = a2 * b2;\n  const p = (maxArea - minArea) / maxArea;\n  const c = (maxArea - minArea) / (maxArea + minArea);\n  const maxD = p * maxA2 + c * maxB2;\n  return maxD;\n}\n", "\n  const minX = a;\n  const maxX = b;\n  const minY = a;\n  const maxY = b;\n  let minArea = 0;\n  let triangleFound = false;\n  for (let x = minX; x <= maxX; x++) {\n    for (let y = minY; y <= maxY; y++) {\n      const area = Math.abs(x * y) / 2;\n      if (area > minArea && triangleFound === false) {\n        minArea = area;\n        triangleFound = true;\n      }\n    }\n  }\n  return triangleFound;\n}\n", "\n  const a2 = a * a;\n  const b2 = b * b;\n  return a2 * b2 * Math.PI;\n}\n", "\n  const A = a * a;\n  const B = b * b;\n  const C = 2 * A * B;\n  return Math.sqrt(C);\n}\n"]}
{"task_id": "MBJSP/199", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction highestPowerOf2(n) {\n/**\n * * Write a JavaScript function to find highest power of 2 less than or equal to given number.\n */", "entry_point": "highestPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = highestPowerOf2(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar x1 = highestPowerOf2(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 32;\nvar x2 = highestPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let highPowerOf2 = n;\n  for (let powerOf2 = 0; powerOf2 < highPowerOf2; powerOf2++) {\n    highPowerOf2 = highPowerOf2 << 1;\n  }\n  return highPowerOf2;\n}\n", "\n  let result = n;\n  while (result & (result - 1)) {\n    result = result & (result - 1);\n  }\n  return Math.pow(2, Math.floor(Math.log(result) / Math.log(2)));\n}\n", "\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    let p = Math.pow(2, i);\n    if (p >= n) break;\n    result = p;\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    if ((1 << i) & n) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  return Math.pow(2, Math.floor(Math.log(n) / Math.log(2)));\n}\n"]}
{"task_id": "MBJSP/200", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction positionMax(list1) {\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */", "entry_point": "positionMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54];\nvar x0 = positionMax(arg00);\nvar v0 = [7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nvar x1 = positionMax(arg10);\nvar v1 = [7, 8, 9, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar x2 = positionMax(arg20);\nvar v2 = [11];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    list2.push(list1[i]);\n    if (i === list1.length - 1) {\n      return list2;\n    }\n  }\n}\n\n/**\n * Write the following ", "\n  let max = list1[0];\n  let maxIndex = [];\n  for (let i = 1; i < list1.length; i++) {\n    if (list1[i] > max) {\n      max = list1[i];\n      maxIndex = [i];\n    } else if (list1[i] === max) {\n      maxIndex.push(i);\n    }\n  }\n  return maxIndex;\n}\n", "\n  // Write your code here\n  return list1.map(item => [item, list1.indexOf(item)]);\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === list1[list1.length - 1]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  return [];\n}\n"]}
{"task_id": "MBJSP/201", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction chklist(lst) {\n/**\n * * Write a JavaScript function to check whether the elements in a list are same or not.\n */", "entry_point": "chklist", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"one\", \"one\", \"one\"];\nvar x0 = chklist(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"one\", \"Two\", \"Three\"];\nvar x1 = chklist(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"bigdata\", \"python\", \"Django\"];\nvar x2 = chklist(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const checker = (item1, item2) => {\n        if (item1 === item2) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    return (checker(lst[0], lst[1]))? \"Item is same as item at index 1\" : \"Item is not same as item at index 1\";\n}\n", "\n  const result = [];\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n}\n", "\n  return!!(lst && lst.length && lst.every(i => i));\n}\n", "\n  const firstEle = lst[0];\n  const lastEle = lst[lst.length - 1];\n  const middleEle = lst[Math.floor(lst.length / 2)];\n  let isSorted = true;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < lst[i - 1]) {\n      isSorted = false;\n      break;\n    }\n  }\n  return isSorted? middleEle === firstEle + lastEle : false;\n}\n", "\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]}
{"task_id": "MBJSP/202", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeEven(str1) {\n/**\n * * Write a function to remove even characters in a string.\n */", "entry_point": "removeEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = removeEven(arg00);\nvar v0 = \"pto\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = removeEven(arg10);\nvar v1 = \"porm\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = removeEven(arg20);\nvar v2 = \"lnug\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const str = str1.split('');\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) continue;\n    result.push(str[i]);\n  }\n  return result.join('');\n}\n\n", "\n  let str = str1.toLowerCase();\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] % 2 === 0) {\n      continue;\n    }\n    result.push(str[i]);\n  }\n  return result.join('');\n}\n", "\n  let str = str1.split('');\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i], 10) % 2 === 0) continue;\n    result.push(str[i]);\n  }\n  return result.join('');\n}\n", "\n  let result = '';\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i]!=='') {\n      if (isEven(str1[i])) {\n        result += str1[i];\n      }\n    }\n  }\n  return result;\n}\n\n// ", "\n  const string = str1.split('');\n  let result = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] % 2 === 0) {\n      continue;\n    }\n    result.push(string[i]);\n  }\n  return result.join('');\n}\nconst numStrings = numStrings = [\n    'asdf',\n    'asdf1234',\n    '54321',\n    'asdf123',\n    'asdf4',\n    'asdf',\n    '12345',\n    '4321',\n    '1234',\n    'asdf'\n];\n"]}
{"task_id": "MBJSP/203", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction hammingDistance(n1, n2) {\n/**\n * * Write a JavaScript function to find the hamming distance between given two integers.\n */", "entry_point": "hammingDistance", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 8;\nvar x0 = hammingDistance(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = hammingDistance(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar x2 = hammingDistance(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const n1L = n1.toString(2);\n  const n2L = n2.toString(2);\n  const n1Len = n1L.length;\n  const n2Len = n2L.length;\n  const n1Diff = n1L.substring(n1L.length - n2Len, n1L.length)\n    .split('');\n  const n2Diff = n2L.substring(n2L.length - n1Len, n2L.length)\n    .split('');\n  let sum = 0;\n  for (let i = 0; i < n1Diff.length; i++) {\n    if (n1Diff[i]!== n2Diff[i]) {\n      sum++;\n    }\n  }\n  return sum;\n}\n", "\n  return Math.abs(n1 - n2);\n}\n", "\n  return Math.abs(n1 - n2);\n}\n", "\n  return Math.abs(n1 - n2);\n}\n", "\n  let dist = 0;\n  for (let i = 0; i < Math.max(n1, n2).toString().length; i++) {\n    const bit1 = n1 >= 0? n1 & (1 << i) : (1 << i) - 1;\n    const bit2 = n2 >= 0? n2 & (1 << i) : (1 << i) - 1;\n    if (bit1!== bit2) {\n      dist++;\n    }\n  }\n  return dist;\n}\n"]}
{"task_id": "MBJSP/204", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction count(s, c) {\n/**\n * * Write a JavaScript function to count the occurrence of a given character in a string.\n */", "entry_point": "count", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcc\";\nvar arg01 = \"c\";\nvar x0 = count(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ababca\";\nvar arg11 = \"a\";\nvar x1 = count(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"mnmm0pm\";\nvar arg21 = \"m\";\nvar x2 = count(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const len = s.length;\n  const counter = {};\n  for (let i = 0; i < len; i++) {\n    counter[s[i]] = counter[s[i]] + 1 || 1;\n  }\n  return counter[c];\n}\n", "\n    // Write your code here\n    let counter = {};\n    for (let i = 0; i < s.length; i++) {\n        counter[s[i]] = counter[s[i]] + 1 || 1;\n    }\n    return counter[c];\n}\n", "\n  const count = 0;\n  const str = s.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === c) count++;\n  }\n  return count;\n}\n", "\n  const ctr = {};\n  for (let i = 0; i < s.length; i++) {\n    ctr[s[i]] = (ctr[s[i]] || 0) + 1 || 1;\n  }\n  return ctr[c];\n}\n", "\n  const result = [];\n  s.split('').forEach((a) => {\n    if (c === a) {\n      result.push(1);\n    }\n  });\n  return result;\n}\n"]}
{"task_id": "MBJSP/205", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction inversionElements(testtup) {\n/**\n * * Write a function to find the inversions of tuple elements in the given tuple list.\n */", "entry_point": "inversionElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [7, 8, 9, 1, 10, 7];\nvar x0 = inversionElements(arg00);\nvar v0 = [-8, -9, -10, -2, -11, -8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 5, 6, 1, 7];\nvar x1 = inversionElements(arg10);\nvar v1 = [-3, -5, -6, -7, -2, -8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 14, 12, 13];\nvar x2 = inversionElements(arg20);\nvar v2 = [-9, -10, -12, -15, -13, -14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const counter = {};\n  for (let i = 0; i < testtup.length; i++) {\n    counter[testtup[i]] = counter[testtup[i]] + 1 || 1;\n  }\n  for (let i = 0; i < testTup.length; i++) {\n    if (counter[testTup[i]] === 0) {\n      result.push(testTup[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < testtup.length; i++) {\n    for (let j = 0; j < testtup.length; j++) {\n      if (i!= j && testTup[i] > testTup[j]) {\n        result = result + 1;\n      }\n    }\n  }\n  return result;\n}\n", "\n  let invnum = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    for (let j = 0; j < testTup.length; j++) {\n      if (i === j) {\n      } else if (testTup[i] > testTup[j]) {\n        invnum++;\n      }\n    }\n  }\n  return invnum;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    for (let j = i + 1; j < testTup.length; j++) {\n      if (testTup[i] > testTup[j]) {\n        result.push([testTup[i], testTup[j]]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    for (let j = i + 1; j < testTup.length; j++) {\n      if (testTup[i] > testTup[j]) {\n        result.push([testTup[i], testTup[j]]);\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/206", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction concatenateElements(testtup) {\n/**\n * * Write a function to perform the adjacent element concatenation in the given tuples.\n */", "entry_point": "concatenateElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"];\nvar x0 = concatenateElements(arg00);\nvar v0 = [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"];\nvar x1 = concatenateElements(arg10);\nvar v1 = [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"];\nvar x2 = concatenateElements(arg20);\nvar v2 = [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/207", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findLongestRepeatingSubseq(str) {\n/**\n * * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n */", "entry_point": "findLongestRepeatingSubseq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AABEBCDD\";\nvar x0 = findLongestRepeatingSubseq(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aabb\";\nvar x1 = findLongestRepeatingSubseq(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"aab\";\nvar x2 = findLongestRepeatingSubseq(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const longestSubSeqLength = str.split(\"\").map(char => str.indexOf(char)).filter(num => num > 0).reduce((a, b) => (a > b? a : b), 0);\n  const lrs = str.split(\"\").map(char => str.substring(str.indexOf(char) + 1, str.length)).filter(longestSubSeqLength => longestSubSeqLength > 0).map(string => string.split(\"\")).reduce((a, b) => (a.indexOf(b[b.length - 1]) > a.indexOf(b[0])? a : b));\n  return lrs.length;\n}\n", "\n  let longestSubseq = 0;\n  let longestSubseqSet = {};\n  for (let i = 0; i < str.length; i++) {\n    for (let j = i + 1; j < str.length; j++) {\n      const subseq = str.slice(i, j + 1);\n      const subseqSet = {};\n      subseqSet[subseq] = subseqSet[subseq] + 1 || 1;\n      if (subseqSet[subseq] > longestSubseqSet[subseq]) {\n        longestSubseqSet[subseq] = subseqSet[subseq];\n        longestSubseqSet[subseq + \" \"] = subseqSet[subseq];\n        longestSubseq = Math.max(longestSubseq, longestSubseqSet[subseq]);\n      }\n    }\n  }\n  return longestSubseq;\n}\n", "\n  const matches = [];\n  for (let i = 0; i < str.length; i++) {\n    for (let j = 0; j < str.length; j++) {\n      if (i!== j && str.charAt(i) === str.charAt(j)) {\n        matches.push([i, j]);\n      }\n    }\n  }\n  const sortedMatches = matches.sort((a, b) => b[1] - a[1]);\n  const result = [];\n  for (let i = 0; i < sortedMatches.length; i++) {\n    const index = sortedMatches[i][0] + sortedMatches[i][1];\n    if (index > result.length) {\n      result.push(index);\n    }\n  }\n  return result.slice();\n}\n", "\n  const arr = str.split('');\n  const index = {};\n  for (let i = 0; i < arr.length; i++) {\n    index[arr[i]] = i;\n  }\n  let longestSeq = 1;\n  let longestSeqLen = 1;\n  let currSeqLen = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (index.hasOwnProperty(arr[i])) {\n      if (i === index[arr[i]] + 1) {\n        currSeqLen += 1;\n      } else {\n        currSeqLen = 1;\n      }\n      if (currSeqLen > longestSeqLen) {\n        longestSeqLen = currSeqLen;\n        longestSeq = arr.slice(i - longestSeqLen + 1, i + 1);\n      }\n    }\n  }\n  return longestSeq;\n}\n", "\n  const chars = str.split('');\n  const charsMap = chars.reduce((map, val) => {\n    map[val] = map[val] + 1 || 1;\n    return map;\n  }, {});\n  let longestSubstr = '';\n  let longestSubstrLen = 0;\n  for (let key in charsMap) {\n    if (charsMap[key] > 1 && charsMap[key] > longestSubstrLen) {\n      longestSubstrLen = charsMap[key];\n      longestSubstr = key;\n    }\n  }\n  const pos = chars.indexOf(longestSubstr);\n  const left = pos > 0? chars.slice(0, pos) : '';\n  const right = pos > 0? chars.slice(pos + 1) : '';\n  return [left, longestSubstr, right].map(s => s + '->' + str);\n}\n"]}
{"task_id": "MBJSP/208", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isDecimal(num) {\n/**\n * * Write a function to check the given decimal with a precision of 2 by using regex.\n */", "entry_point": "isDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"123.11\";\nvar x0 = isDecimal(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"0.21\";\nvar x1 = isDecimal(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"123.1214\";\nvar x2 = isDecimal(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const test = num.match(/\\.(\\d{2})/);\n  return!test? false : true;\n}\n", "\n  const numstr = num.toString();\n  if (!numstr.match(/^-?\\d+\\.\\d+$/)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n", "\n  const result = /^\\d*\\.\\d+$/.test(num);\n  return result;\n}\n", "\n  // Write your code here\n  let regex = new RegExp('^[-+]?[0-9]*[.]?[0-9]*$');\n  if (regex.test(num)) {\n    return true;\n  }\n  return false;\n}\n", "\n  return /^[0-9]{0,2}[.]{0,1}[0-9]{0,2}$/g.test(num);\n}\n"]}
{"task_id": "MBJSP/209", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction heapReplace(heap, a) {\n/**\n * * Write a function to delete the smallest element from the given heap and then insert a new item.\n */", "entry_point": "heapReplace", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 44, 68, 21, 39, 23, 89];\nvar arg01 = 21;\nvar x0 = heapReplace(arg00, arg01);\nvar v0 = [21, 25, 23, 44, 39, 68, 89];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 44, 68, 21, 39, 23, 89];\nvar arg11 = 110;\nvar x1 = heapReplace(arg10, arg11);\nvar v1 = [23, 25, 68, 44, 39, 110, 89];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25, 44, 68, 21, 39, 23, 89];\nvar arg21 = 500;\nvar x2 = heapReplace(arg20, arg21);\nvar v2 = [23, 25, 68, 44, 39, 500, 89];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const testtup = heap.pop();\n  heap.push(a);\n  heap.sort(this::compareTup);\n  return heap;\n}\n", "\n  let smallest = heap.shift();\n  heap.push(a);\n  return heap;\n}\n", "\n  if (heap.length > 1) {\n    const last = heap.pop();\n    const first = heap.pop();\n    heap.push(a);\n    if (last > first) {\n      heap.push(last);\n    }\n  }\n}\n", "\n  if (a === null) {\n    return;\n  }\n  const size = heap.length;\n  const firstIndex = 0;\n  const lastIndex = size - 1;\n  if (a > heap[lastIndex]) {\n    heap.push(a);\n    return heap;\n  }\n  heap[firstIndex] = a;\n  if (a < heap[firstIndex]) {\n    heap[lastIndex] = heap[firstIndex];\n    heap[firstIndex] = a;\n  }\n  heapify(heap, firstIndex, lastIndex);\n  return heap;\n}\n", "\n  let smallest = heap[1];\n  heap[1] = heap[heap.length - 1];\n  heap.pop();\n  heap.push(a);\n  heapify(heap, 1);\n  return smallest;\n}\n"]}
{"task_id": "MBJSP/210", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isAllowedSpecificChar(string) {\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */", "entry_point": "isAllowedSpecificChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ABCDEFabcdef123450\";\nvar x0 = isAllowedSpecificChar(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"*&%@#!}{\";\nvar x1 = isAllowedSpecificChar(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"HELLOhowareyou98765\";\nvar x2 = isAllowedSpecificChar(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    return true;\n}\n", "\n  const stringregex = /[a-zA-Z0-9]/;\n  return stringregex.test(string);\n}\n", "\n  // Write your code here\n  return true;\n}\n", "\n  let allowed = true;\n  for (let i = 0; i < string.length && allowed; i++) {\n    const char = string.charAt(i);\n    if (char ==='' || char === '\\n' || char === '.' || char === ',') {\n      continue;\n    }\n    allowed =!/[a-zA-Z0-9]/g.test(char);\n  }\n  return allowed;\n}\n", "\n  return /[a-zA-Z0-9]/g.test(string);\n}\n"]}
{"task_id": "MBJSP/211", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countNum(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */", "entry_point": "countNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countNum(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = countNum(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = countNum(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return countNum(n, n);\n}\n", "\n  let a = n;\n  let b = 0;\n  while (a) {\n    a &= (a - 1);\n    b++;\n  }\n  return b;\n}\n", "\n  let num = 0;\n  for (let i = 0; i < n; i++) {\n    num += Math.pow(2, i);\n  }\n  return num;\n}\n", "\n  const numBit = n + 1;\n  return numBit - Math.floor(Math.log2(numBit)) - 1;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (((i >> j) & 1) > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/212", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction fourthPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of n natural numbers.\n */", "entry_point": "fourthPowerSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = fourthPowerSum(arg00);\nvar v0 = 17;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = fourthPowerSum(arg10);\nvar v1 = 354;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = fourthPowerSum(arg20);\nvar v2 = 2275;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    let current = i;\n    let power = Math.pow(current, 4);\n    result += power;\n  }\n  return result;\n}\n", "\n  const testTup = Array(n).fill(1).map(() => 1);\n  for (let i = 0; i < n - 1; i++) {\n    testTup[i + 1] = testTup[i] * testTup[i] * testTup[i];\n  }\n  return testTup[n - 1] * 4;\n}\n", "\n  return n * n * n * n;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i <= n; i++) {\n    sum += Math.pow(i, 4);\n  }\n  return sum;\n}\n", "\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += Math.pow(i, 4);\n    }\n    return sum;\n}\n"]}
{"task_id": "MBJSP/213", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction concatenateStrings(testtup1, testtup2) {\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */", "entry_point": "concatenateStrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Manjeet\", \"Nikhil\", \"Akshat\"];\nvar arg01 = [\" Singh\", \" Meherwal\", \" Garg\"];\nvar x0 = concatenateStrings(arg00, arg01);\nvar v0 = [\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Shaik\", \"Ayesha\", \"Sanya\"];\nvar arg11 = [\" Dawood\", \" Begum\", \" Singh\"];\nvar x1 = concatenateStrings(arg10, arg11);\nvar v1 = [\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Harpreet\", \"Priyanka\", \"Muskan\"];\nvar arg21 = [\"Kour\", \" Agarwal\", \"Sethi\"];\nvar x2 = concatenateStrings(arg20, arg21);\nvar v2 = [\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i] + testtup2[i]);\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push(testtup1[i]);\n    result.push(testtup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i] + testtup2[i]);\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    let str1 = testTup1[i];\n    let str2 = testTup2[i];\n    result.push(str1 + str2);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] + testTup2[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/214", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction degreeRadian(radian) {\n/**\n * * Write a function to convert radians to degrees.\n */", "entry_point": "degreeRadian", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 90;\nvar x0 = degreeRadian(arg00);\nvar v0 = 5156.620156177409;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 60;\nvar x1 = degreeRadian(arg10);\nvar v1 = 3437.746770784939;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 120;\nvar x2 = degreeRadian(arg20);\nvar v2 = 6875.493541569878;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const degress = radian * 180 / Math.PI;\n  return degress;\n}\n", "\n  const result = Math.toDegrees(radian);\n  return result;\n}\n", "\n  return radian * 180 / Math.PI;\n}\n", "\n  const result = [];\n  for (let i = 0; i < radian.length; i++) {\n    result.push(radian[i] * 180 / Math.PI);\n  }\n  return result;\n}\n", "\n  const result = Math.toDegrees(radian);\n  return result;\n}\n"]}
{"task_id": "MBJSP/215", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction decodeList(alist) {\n/**\n * * Write a function to decode a run-length encoded given list.\n */", "entry_point": "decodeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 1], 2, 3, [2, 4], 5, 1];\nvar x0 = decodeList(arg00);\nvar v0 = [1, 1, 2, 3, 4, 4, 5, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"];\nvar x1 = decodeList(arg10);\nvar v1 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar x2 = decodeList(arg20);\nvar v2 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const alistlength = alist.length;\n  for (let i = 0; i < alistlength; i++) {\n    if (alist[i] === '0') {\n      const alistlen = alist.length;\n      for (let j = i; j < alistlen; j++) {\n        result.push(alist[j]);\n      }\n      i = alistlen - 1;\n    } else {\n      const alistlen = alist.length;\n      for (let j = i; j < alistlen - 1; j++) {\n        result.push(alist[j]);\n      }\n      result.push(alist[alistlen - 1]);\n      i = alistlen - 2;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < alist.length; i++) {\n    const x = alist[i];\n    const y = alist[i + 1];\n    if (y > 1) {\n      let count = 0;\n      let k = i + 2;\n      for (let j = 0; j < y; j++) {\n        const yy = alist[k++];\n        if (yy > 0) {\n          count += yy;\n        } else {\n          count -= yy;\n        }\n      }\n      i += count + 1;\n    } else {\n      result.push(x);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < alist.length; i++) {\n    if (alist[i] === 1) {\n      if (i + 1 < alist.length && alist[i + 1] === 1) {\n        result.push(2);\n        i++;\n      } else {\n        result.push(1);\n      }\n    } else {\n      result.push(0);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < alist.length; i++) {\n    result.push(alist[i]);\n    if (alist[i] === 10) {\n      i++;\n    }\n  }\n  return result;\n}\n", "\n    let result = [];\n    let count = 0;\n    for (let i = 0; i < alist.length; i++) {\n        count += alist[i];\n        if (count >= 16 || i === alist.length - 1) {\n            result.push(parseInt(String.fromCharCode(count), 16));\n            count = 0;\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/218", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minOperations(a, b) {\n/**\n * * Write a JavaScript function to find the minimum operations required to make two numbers equal.\n */", "entry_point": "minOperations", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = minOperations(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 10;\nvar x1 = minOperations(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar x2 = minOperations(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = Math.abs(a - b);\n  return result;\n}\n", "\n  const min = Math.min(a, b);\n  const max = Math.max(a, b);\n  const total = max - min + 1;\n  return Math.floor(total / 2);\n}\n", "\n  const x = a;\n  const y = b;\n  let result = 0;\n  if (x === y) {\n    result = 0;\n  } else if (x < y) {\n    let temp = x;\n    x = y;\n    y = temp;\n    result = x + Math.ceil(Math.log(y) / Math.log(2));\n  } else {\n    result = y + Math.ceil(Math.log(x) / Math.log(2));\n  }\n  return result;\n}\n", "\n  let totalOps = 0;\n  if (a == b) {\n    return 1;\n  }\n  while (a!= b) {\n    const remainder = a % b;\n    a = b;\n    b = remainder;\n    totalOps++;\n  }\n  return totalOps;\n}\n", "\n    // Write your code here\n    let result = 0;\n    if (a < b) {\n        const temp = a;\n        a = b;\n        b = temp;\n    }\n    while (b!= 0) {\n        const remainder = a % b;\n        a = b;\n        b = remainder;\n        result++;\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/219", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extractMinMax(testtup, k) {\n/**\n * * Write a function to extract maximum and minimum k elements in the given tuple.\n */", "entry_point": "extractMinMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 20, 3, 7, 6, 8];\nvar arg01 = 2;\nvar x0 = extractMinMax(arg00, arg01);\nvar v0 = [3, 5, 8, 20];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6, 1, 2, 7];\nvar arg11 = 3;\nvar x1 = extractMinMax(arg10, arg11);\nvar v1 = [1, 2, 4, 5, 6, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 8, 9, 11, 7];\nvar arg21 = 4;\nvar x2 = extractMinMax(arg20, arg21);\nvar v2 = [2, 3, 4, 7, 8, 9, 11];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const min = testtup[k - 1];\n  const max = testtup[k - 1];\n  let result = [];\n  for (let i = k; i < testtup.length; i++) {\n    if (testtup[i] > max) {\n      max = testtup[i];\n    }\n    if (testtup[i] < min) {\n      min = testtup[i];\n    }\n  }\n  result.push(min);\n  result.push(max);\n  return result;\n}\nconst allTests = [\n    {name: 'addNumbers',  input: ['1', '1', '1', '1', '1'],  output: '6',   time: 1.5},\n    {name: 'addNumbers2', input: ['1', '1', '1', '1', '1'], output: '6', time: 1.5},\n    {name: 'addNumbers3', input: ['1', '1', '1', '1', '1'], output: '6', time: 1.5},\n    {name: 'addNumbers4', input: ['1', '1', '1', '1', '1'], output: '6', time: 1.5},\n    {name: 'addNumbers5', input: ['1', '1', '1', '1', '1'], output: '6', time: 1.5},\n    {name: 'addNumbers6', input: ['1', '1', '1', '1', '1'], output: '6', time: 1.5},\n    {name: 'addNumbers7', input: ['1', '1', '1', '1', '", "\n  const result = [];\n  if (testTup.length < k) {\n    return result;\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(testTup[i]);\n  }\n  return result;\n}\nconst maxLength = testTup.map(t => t.length).reduce((a, b) => a > b? a : b, 0);\n/**\n * * Write a ", "\n  const min = Math.min(...testtup);\n  const max = Math.max(...testtup);\n  return [min, max];\n}\n", "\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    if (i === 0) {\n      result.push(testtup[i]);\n    } else {\n      if (testTup[i] > testTup[i - 1]) {\n        result.push(testtup[i]);\n      } else {\n        result.push(testTup[i - 1]);\n      }\n    }\n  }\n  return result;\n}\n", "\n    return [...Array(k).keys()].sort((a, b) => {\n        return testtup[a] > testtup[b]? 1 : -1;\n    });\n}\n"]}
{"task_id": "MBJSP/220", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction replaceMaxSpecialchar(text, n) {\n/**\n * * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */", "entry_point": "replaceMaxSpecialchar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Python language, Programming language.\";\nvar arg01 = 2;\nvar x0 = replaceMaxSpecialchar(arg00, arg01);\nvar v0 = \"Python:language: Programming language.\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"a b c,d e f\";\nvar arg11 = 3;\nvar x1 = replaceMaxSpecialchar(arg10, arg11);\nvar v1 = \"a:b:c:d e f\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ram reshma,ram rahim\";\nvar arg21 = 1;\nvar x2 = replaceMaxSpecialchar(arg20, arg21);\nvar v2 = \"ram:reshma,ram rahim\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    const arr = text.split(' ');\n    let arr2 = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr2.length < n) {\n            arr2.push(arr[i]);\n        } else {\n            for (let j = 0; j < n - 1; j++) {\n                arr2[j] = arr[i];\n            }\n            arr2[j] = ':';\n        }\n    }\n    return arr2.join(' ');\n}\n", "\n  const result = [];\n  let currentNum = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='') {\n      currentNum++;\n    } else if (text[i] === ',' || text[i] === '.') {\n      currentNum = n;\n    } else {\n      currentNum = 0;\n    }\n    if (currentNum > n) {\n      for (let j = 0; j < currentNum - n; j++) {\n        result.push(text[i]);\n      }\n    } else {\n      result.push(text[i]);\n    }\n  }\n  return result.join('');\n}\n", "\n  const result = [];\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] ==='' || text[i] === ',' || text[i] === '.') {\n      result.push(':');\n    }\n    else {\n      result.push(text[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = text.replace(/\\s*\\,*\\s*|\\s*\\.*\\s*|\\s+|\\s*$/g, ':');\n  return result;\n}\n", "\n    const string_arr = text.split(' ');\n    let string_arr_length = string_arr.length;\n    let result_text = '';\n    for (let i = 0; i < string_arr_length; i++) {\n        if (string_arr[i].length === n) {\n            string_arr[i] = string_arr[i].charAt(0).toUpperCase() + string_arr[i].slice(1);\n        } else if (string_arr[i].length > n) {\n            string_arr[i] = string_arr[i].slice(0, n) + ':';\n        } else {\n            string_arr[i] = string_arr[i];\n        }\n        result_text = result_text + string_arr[i];\n    }\n    return result_text;\n}\n"]}
{"task_id": "MBJSP/221", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction firstEven(nums) {\n/**\n * * Write a JavaScript function to find the first even number in a given list of numbers.\n */", "entry_point": "firstEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 3, 4];\nvar x0 = firstEven(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 6, 7];\nvar x1 = firstEven(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.find(num => num % 2 === 0);\n}\n", "\n  let index = -1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n// Write your solution here\n", "\n  const nums2 = nums.filter(num => num % 2 === 0);\n  return nums2[0];\n}\n", "\n  return nums.find(n => n % 2 === 0) || -1;\n}\n", "\n  let firstEvenNumber = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      firstEvenNumber = nums[i];\n      break;\n    }\n  }\n  return firstEvenNumber;\n}\n"]}
{"task_id": "MBJSP/222", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkType(testtuple) {\n/**\n * * Write a function to check if all the elements in tuple have same data type or not.\n */", "entry_point": "checkType", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 7, 3, 5, 6];\nvar x0 = checkType(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, \"4\"];\nvar x1 = checkType(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 2, 1, 4, 5];\nvar x2 = checkType(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testTuple[0].type === testTuple[1].type;\n}\n", "\n  return typeof testTup[0];\n}\n", "\n  let first_type;\n  for (let i = 0; i < testTup.length; i++) {\n    if (!first_type) first_type = typeof testTup[i];\n    if (first_type!= typeof testTup[i]) return false;\n  }\n  return true;\n}\n", "\n  return testTuple[0] instanceof String? \"String\" : testTuple[0] instanceof Number? \"Number\" : testTuple[0] instanceof Array? \"Array\" : testTuple[0] instanceof Object? \"Object\" : \"Type is not correct\";\n}\n", "\n  // Write your code here\n  const strTuple = testtuple.map(num => typeof num);\n  if (strTuple.join('') === 'number') {\n    return true;\n  } else {\n    return false;\n  }\n}\nconst result = [\n  [9, 7, 8, 5],\n  ['9', '7', '8', '5']\n];\n"]}
{"task_id": "MBJSP/223", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isMajority(arr, n, x) {\n/**\n * * Write a function to check for majority element in the given sorted array.\n */", "entry_point": "isMajority", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 3, 3, 3, 10];\nvar arg01 = 7;\nvar arg02 = 3;\nvar x0 = isMajority(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 2, 4, 4, 4, 6, 6];\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = isMajority(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 1, 2, 2];\nvar arg21 = 5;\nvar arg22 = 1;\nvar x2 = isMajority(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const count = {};\n  const idx = arr.length - 1;\n  for (let i = 0; i <= idx; i++) {\n    count[arr[i]] = count[arr[i]] + 1 || 1;\n    if (count[arr[i]] === n) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  let result = false;\n  for (let i = 0; i < arr.length - n + 1; i++) {\n    let count = 0;\n    for (let j = 0; j < n; j++) {\n      if (arr[i + j] === x) {\n        count++;\n      }\n    }\n    if (count > n / 2.0) {\n      result = true;\n    }\n  }\n  return result;\n}\n// Write your code here\n", "\n  const element = arr[Math.floor((arr.length - 1) * n / x)];\n  const count = arr.reduce((x, y) => x + (y === element? 1 : 0));\n  if (count > (arr.length - 1) * n / x) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  // Write your code here\n  const majorityElement = arr.reduce((a, b) => (a + b) / 2, 0);\n  const count = arr.reduce((a, b) => (a + b) === majorityElement? a + 1 : a, 0);\n  return count > n / 2? true : false;\n}\n", "\n  const counter = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== x) {\n      if (arr[i] in counter) {\n        counter[arr[i]]++;\n      }\n      else {\n        counter[arr[i]] = 1;\n      }\n    }\n  }\n  let max = 0;\n  for (let i in counter) {\n    if (counter[i] > max) {\n      max = counter[i];\n    }\n  }\n  return max > n / 2;\n}\n"]}
{"task_id": "MBJSP/224", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countSetBits(n) {\n/**\n * * Write a JavaScript function to count set bits of a given number.\n */", "entry_point": "countSetBits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countSetBits(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = countSetBits(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = countSetBits(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n? n.toString(2).split(\"\").reduce((a, b) => a + b.toString(2).length - 1, 0) : 0;\n}\n", "\n  const nsetbits = 0;\n  while (n) {\n    nsetbits++;\n    n &= (n - 1);\n  }\n  return nsetbits;\n}\n// array of tuples\nconst arr = [\n  ['test1', 1],\n  ['test2', 2],\n  ['test3', 3],\n  ['test4', 4],\n  ['test5', 5],\n  ['test6', 6],\n  ['test7', 7],\n  ['test8', 8],\n  ['test9', 9],\n  ['test10', 10]\n];\n// sorting tuples\n", "\n  let num = n;\n  let count = 0;\n  while (num) {\n    if (num & 1) {\n      count++;\n    }\n    num = num >> 1;\n  }\n  return count;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < 32; i++) {\n    result += n & 1;\n    n >>>= 1;\n  }\n  return result;\n}\n", "\n  return Math.ceil(Math.log2(n & -n));\n}\n"]}
{"task_id": "MBJSP/225", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMin(arr, low, high) {\n/**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */", "entry_point": "findMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = 0;\nvar arg02 = 4;\nvar x0 = findMin(arg00, arg01, arg02);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 6, 8];\nvar arg11 = 0;\nvar arg12 = 2;\nvar x1 = findMin(arg10, arg11, arg12);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 5, 7, 9];\nvar arg21 = 0;\nvar arg22 = 4;\nvar x2 = findMin(arg20, arg21, arg22);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (low === high) {\n    return arr[low];\n  }\n  if (low < high) {\n    const mid = Math.floor((low + high) / 2);\n    if (arr[mid] > arr[mid + 1]) {\n      return findMin(arr, low, mid);\n    } else if (arr[mid] < arr[mid - 1]) {\n      return findMin(arr, mid, high);\n    } else {\n      return arr[mid];\n    }\n  }\n}\n", "\n  let min = arr[low];\n  for (let i = low; i <= high; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n}\n", "\n  if (high == low) {\n    return arr[low];\n  }\n  const mid = (low + high) / 2;\n  if (arr[mid] > arr[mid + 1]) {\n    return arr[mid + 1];\n  }\n  if (arr[mid - 1] > arr[mid]) {\n    return arr[mid];\n  }\n  if (arr[high] > arr[mid]) {\n    return findMin(arr, low, mid - 1);\n  }\n  return findMin(arr, mid + 1, high);\n}\n", "\n  return Math.min(arr[0], arr[arr.length - 1]);\n}\n", "\n  if (high === low) {\n    return arr[low];\n  }\n  const mid = Math.floor((low + high) / 2);\n  if (arr[low] > arr[high]) {\n    return findMin(arr, low, mid);\n  } else {\n    return findMin(arr, mid, high);\n  }\n}\n"]}
{"task_id": "MBJSP/226", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction oddValuesString(str) {\n/**\n * * Write a JavaScript function to remove the characters which have odd index values of a given string.\n */", "entry_point": "oddValuesString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcdef\";\nvar x0 = oddValuesString(arg00);\nvar v0 = \"ace\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = oddValuesString(arg10);\nvar v1 = \"pto\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"data\";\nvar x2 = oddValuesString(arg20);\nvar v2 = \"dt\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const numbers = str.split('').map(char => parseInt(char, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const sortedNumbersCount = sortedNumbers.reduce((prev, curr) => prev + 1, 0);\n  let oddValues = [];\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    if (sortedNumbers[i] % 2 === 1 && sortedNumbersCount === sortedNumbers[i]) {\n      oddValues.push(sortedNumbers[i]);\n    }\n  }\n  return oddValues.join('');\n}\n", "\n    return str.replace(/[a-z]/gi, '');\n}\n", "\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    if (i % 2) {\n      result += str[i];\n    }\n  }\n  return result;\n}\n", "\n  const chars = str.split(\"\");\n  const result = [];\n  for (let i = 0; i < chars.length; i++) {\n    let oddChar = chars[i];\n    if (i % 2 === 1) oddChar = \"\";\n    result.push(oddChar);\n  }\n  return result.join(\"\");\n}\n", "\n  return str.replace(/[0-9]/g, '');\n}\n"]}
{"task_id": "MBJSP/227", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minOfThree(a, b, c) {\n/**\n * * Write a function to find minimum of three numbers.\n */", "entry_point": "minOfThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar arg02 = 0;\nvar x0 = minOfThree(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar arg11 = 15;\nvar arg12 = 18;\nvar x1 = minOfThree(arg10, arg11, arg12);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = -10;\nvar arg21 = -20;\nvar arg22 = -30;\nvar x2 = minOfThree(arg20, arg21, arg22);\nvar v2 = -30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (a < b) {\n    if (a < c) return a;\n    return c;\n  }\n  if (b < c) return b;\n  return c;\n}\n", "\n  if (a < b) {\n    if (a < c) {\n      return a;\n    } else {\n      return c;\n    }\n  } else {\n    if (b < c) {\n      return b;\n    } else {\n      return c;\n    }\n  }\n}\n", "\n  if (a < b) {\n    if (b < c) {\n      return b;\n    } else {\n      return c;\n    }\n  } else {\n    if (a < c) {\n      return a;\n    } else {\n      return c;\n    }\n  }\n}\n", "\n  return a < b? (a < c? a : c) : (b < c? b : c);\n}\n", "\n  const min = Math.min(a, b);\n  return Math.min(min, c);\n}\n"]}
{"task_id": "MBJSP/228", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are unset in the given range or not.\n */", "entry_point": "allBitsSetInTheGivenRange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 1;\nvar arg02 = 2;\nvar x0 = allBitsSetInTheGivenRange(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 17;\nvar arg11 = 2;\nvar arg12 = 4;\nvar x1 = allBitsSetInTheGivenRange(arg10, arg11, arg12);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 39;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = allBitsSetInTheGivenRange(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let count = 0;\n  for (let i = l; i <= r; i++) {\n    if (n % 2 === 0) {\n      count = count + 1;\n    }\n    n = n >> 1;\n  }\n  return (count === r - l + 1);\n}\n", "\n  const number = 1;\n  let allBitsSet = true;\n  for (let i = l; i <= r; i++) {\n    if ((i & n)!== 0) {\n      allBitsSet = false;\n      break;\n    }\n    number = number << 1;\n  }\n  return allBitsSet;\n}\n", "\n  let num = (r - l + 1) * (Math.pow(2, l));\n  for (let i = l; i < r; i++) {\n    if (num % 2!= 0) {\n      num += 1;\n      num = num * (Math.pow(2, i));\n    }\n  }\n  return num % 2 == 0;\n}\n", "\n  let res = false;\n  let num = n;\n  let temp = num;\n  for (let i = l; i <= r; i++) {\n    if (temp & 1) {\n      res = true;\n    }\n    temp = temp >> 1;\n  }\n  return res;\n}\n", "\n    // Write your code here\n    if (r < n || l > n) return false;\n    let range = 0;\n    for (let i = l; i <= r; i++) {\n        if (Math.bitwiseAnd(n, i) === 1) {\n            range = range + 1;\n        }\n    }\n    return range === n;\n}\n"]}
{"task_id": "MBJSP/229", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction reArrangeArray(arr, n) {\n/**\n * * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n */", "entry_point": "reArrangeArray", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, 2, -3, 4, 5, 6, -7, 8, 9];\nvar arg01 = 9;\nvar x0 = reArrangeArray(arg00, arg01);\nvar v0 = [-1, -3, -7, 4, 5, 6, 2, 8, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, -14, -26, 13, 15];\nvar arg11 = 5;\nvar x1 = reArrangeArray(arg10, arg11);\nvar v1 = [-14, -26, 12, 13, 15];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 24, 36, -42, -39, -78, 85];\nvar arg21 = 7;\nvar x2 = reArrangeArray(arg20, arg21);\nvar v2 = [-42, -39, -78, 10, 24, 36, 85];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let negativeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negativeIndex = i;\n      break;\n    }\n  }\n  const result = [...arr];\n  result.splice(negativeIndex, 0,...result.splice(0, negativeIndex))\n  return result;\n}\n", "\n  let pos = 0, neg = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      pos++;\n    } else {\n      neg++;\n    }\n  }\n  let resultArr = arr.slice(0);\n  while (neg > 0 && pos > 0) {\n    if (neg > pos) {\n      resultArr.splice(resultArr.length - 1, 0, resultArr.pop());\n      neg--;\n    } else {\n      resultArr.splice(resultArr.length - 1, 0, resultArr.pop(), resultArr.pop());\n      pos--;\n    }\n  }\n  return resultArr;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      result.push(arr[i]);\n    }\n  }\n  const newArr = result.sort((a, b) => a - b);\n  return newArr;\n}\n", "\n  arr.sort((a, b) => a - b);\n  let j = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      arr[j++] = arr[i];\n    }\n  }\n  let i = arr.length - 1;\n  while (i > j) {\n    arr[i--] = arr[j++];\n  }\n  return arr;\n}\n", "\n  let k = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      k++;\n    }\n  }\n  let arr1 = arr.slice();\n  let arr2 = arr.slice();\n  for (let i = 0; i < arr.length; i++) {\n    if (arr1[i] > 0) {\n      arr1[i] = n - k + 1;\n      k--;\n    }\n    if (arr2[i] < 0) {\n      arr2[i] = n - k + 1;\n      k--;\n    }\n  }\n  return arr1.concat(arr2);\n}\nconst reArrangeArray1 = (arr, n) => {\n/**\n * * Write a "]}
{"task_id": "MBJSP/230", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction replaceBlank(str1, ch) {\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */", "entry_point": "replaceBlank", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"hello people\";\nvar arg01 = \"@\";\nvar x0 = replaceBlank(arg00, arg01);\nvar v0 = \"hello@people\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python program language\";\nvar arg11 = \"\\$\";\nvar x1 = replaceBlank(arg10, arg11);\nvar v1 = \"python\\$program\\$language\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"blank space\";\nvar arg21 = \"-\";\nvar x2 = replaceBlank(arg20, arg21);\nvar v2 = \"blank-space\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = str1.replace(/\\s/g, ch);\n  return result;\n}\n", "\n  const result = str1.split(\" \");\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === \"\") {\n      result[i] = ch;\n    }\n  }\n  return result.join(\" \");\n}\n", "\n  let newStr = str1.replace(/\\s/g, ch);\n  return newStr;\n}\n", "\n  const result = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] ==='') result.push(ch);\n    else result.push(str1[i]);\n  }\n  return result.join('');\n}\n", "\n    const blankChar = ch;\n    const result = str1.replace(/\\s/g, blankChar);\n    return result;\n}\n"]}
{"task_id": "MBJSP/231", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxSum(tri, n) {\n/**\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n */", "entry_point": "maxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [2, 1], [3, 3, 2]];\nvar arg01 = 3;\nvar x0 = maxSum(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [1, 2], [4, 1, 12]];\nvar arg11 = 3;\nvar x1 = maxSum(arg10, arg11);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2], [3, 2], [13, 23, 12]];\nvar arg21 = 3;\nvar x2 = maxSum(arg20, arg21);\nvar v2 = 28;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const res = [];\n  const arr = tri.map(x => x.split(''));\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j <= i; j++) {\n      if (j == 0) {\n        res.push(arr[i][j]);\n      } else {\n        res.push(arr[i][j] + Math.max(res[j - 1], res[j]));\n      }\n    }\n  }\n  return res[res.length - 1];\n}\n", "\n  const test = tri.map(tup => tup.map(num => num * num));\n  return test.reduce((max, curr) => curr + max, 0);\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    tri[i][i] = 0;\n    tri[i][n - i - 1] = 0;\n  }\n  for (let j = 0; j <= n - 1; j++) {\n    for (let i = 0; i <= n - 1 - j; i++) {\n      tri[i][j] = Math.max(tri[i][j], tri[i][j - 1]) + tri[i + 1][j];\n    }\n  }\n  return tri[0][n - 1];\n}\n", "\n  let result = 0;\n  for (let i = 0; i <= n; i++) {\n    for (let j = i; j <= n; j++) {\n      result = Math.max(tri[i][j], result);\n    }\n  }\n  return result;\n}\n", "\n  let matrix;\n  tri = tri.map((x) => {\n    return [parseInt(x, 10)];\n  });\n  tri = tri.map((x) => {\n    return x;\n  });\n  matrix = tri.map((x) => {\n    return x;\n  });\n  let maxSum = matrix[0][0];\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      if (i === j) {\n        matrix[i][j] = tri[i][j];\n        maxSum = Math.max(maxSum, matrix[i][j]);\n      } else {\n        matrix[i][j] = tri[i][j] + Math.max(matrix[i][j - 1], matrix[i - 1][j]);\n        maxSum = Math.max(maxSum, matrix[i][j]);\n      }\n    }\n  }\n  return maxSum;\n}\n// Run your program\n"]}
{"task_id": "MBJSP/232", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction largNnum(list1, n) {\n/**\n * * Write a function to get the n largest items from a dataset.\n */", "entry_point": "largNnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg01 = 2;\nvar x0 = largNnum(arg00, arg01);\nvar v0 = [100, 90];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg11 = 5;\nvar x1 = largNnum(arg10, arg11);\nvar v1 = [100, 90, 80, 70, 60];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg21 = 3;\nvar x2 = largNnum(arg20, arg21);\nvar v2 = [100, 90, 80];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let largest = [];\n    const h = list1.length;\n    for (let i = 0; i < h; i++) {\n        largest.push(list1[i]);\n    }\n    largest.sort((a, b) => b - a);\n    return largest.slice(largest.length - n);\n}\n", "\n  let maxVal = -1;\n  for (let i = 0; i < list1.length; i++) {\n    if (maxVal < list1[i]) {\n      maxVal = list1[i];\n    }\n  }\n  return maxVal;\n}\n", "\n  const nums = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (nums.indexOf(list1[i]) === -1) {\n      nums.push(list1[i]);\n    }\n  }\n  return nums.sort((a, b) => a - b);\n}\n", "\n  // Write your code here\n  return list1.sort((a, b) => b - a)[n - 1];\n}\nconst parse = str => str.split(\",\").map(s => s.replace(/[\"|']/g, \"\"));\nconst moreThan30 = tup => {\n/**\n * * Write a ", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    let current = parseInt(list1[i], 10);\n    let max = parseInt(list1[i], 10);\n    for (let j = i + 1; j < list1.length; j++) {\n      let current = parseInt(list1[j], 10);\n      let max = Math.max(current, max);\n    }\n    if (max < n) {\n      result.push(current);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/233", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction lateralsufaceCylinder(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cylinder.\n */", "entry_point": "lateralsufaceCylinder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar x0 = lateralsufaceCylinder(arg00, arg01);\nvar v0 = 314.15000000000003;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 5;\nvar x1 = lateralsufaceCylinder(arg10, arg11);\nvar v1 = 125.66000000000001;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 10;\nvar x2 = lateralsufaceCylinder(arg20, arg21);\nvar v2 = 251.32000000000002;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = h * 2 + 2 * Math.PI * r;\n  return result;\n}\n", "\n  const M = 2 * Math.PI * r;\n  const N = Math.PI * h;\n  return M * N;\n}\n", "\n  const pi = 3.141592653589793;\n  return pi * r * r + pi * h * 2;\n}\n", "\n  const s = Math.sqrt(r * r + h * h);\n  return 2 * (r * r + h * h + s * s);\n}\n", "\n  const result = Math.PI * Math.pow(r, 2) + Math.pow(h, 2) * 2;\n  return result;\n}\n"]}
{"task_id": "MBJSP/234", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction volumeCube(l) {\n/**\n * * Write a function to find the volume of a cube.\n */", "entry_point": "volumeCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = volumeCube(arg00);\nvar v0 = 27;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = volumeCube(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = volumeCube(arg20);\nvar v2 = 125;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const length = l;\n  return length * length * length;\n}\nconst nums = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", "\n  return l * l * l;\n}\n", "\n  return l * l * l;\n}\n", "\n  return l * l * l;\n}\n", "\n  const result = l * l * l;\n  return result;\n}\n"]}
{"task_id": "MBJSP/235", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction evenBitSetNumber(n) {\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */", "entry_point": "evenBitSetNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitSetNumber(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitSetNumber(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitSetNumber(arg20);\nvar v2 = 30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n | (n - 1);\n}\n", "\n  return n | (n >> 1);\n}\n", "\n  const result = 0;\n  for (let i = n; i > 0; i = i / 2) {\n    result = result * 2 + (i & 1);\n  }\n  return result;\n}\n", "\n    let final_val = 0;\n    let value = n;\n    let mask = 1;\n    let quotient = value;\n    while (quotient!= 0) {\n        quotient = quotient >> 1;\n        mask = mask << 1;\n    }\n    quotient = value;\n    while (quotient!= 0) {\n        final_val += quotient & mask;\n        quotient = quotient >> 1;\n    }\n    return final_val;\n}\n", "\n  return n | n >> 1;\n}\n"]}
{"task_id": "MBJSP/236", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction noOfTriangle(n, k) {\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */", "entry_point": "noOfTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 2;\nvar x0 = noOfTriangle(arg00, arg01);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 3;\nvar x1 = noOfTriangle(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 3;\nvar x2 = noOfTriangle(arg20, arg21);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const triangle = ", "\n  const triangles = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < i + 1; j++) {\n      triangles.push({\n        x: i,\n        y: j,\n        z: k - (i + j)\n      });\n    }\n  }\n  return triangles.filter(triangle => {\n    return triangle.x * triangle.x + triangle.y * triangle.y + triangle.z * triangle.z === k * k;\n  }).length;\n}\n", "\n  const test = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <= i; j++) {\n      test[i] = test[i] + [i, j, k].filter(x => x).length;\n    }\n  }\n  return test.reduce((a, b) => a + b, 0);\n}\n", "\n  let i = 0;\n  let triangleCount = 0;\n  let max = 0;\n  while (i < n) {\n    triangleCount = 0;\n    max = 0;\n    for (let j = 0; j < k; j++) {\n      triangleCount += i - j;\n    }\n    for (let j = 0; j < k - 1; j++) {\n      if (i === 0) {\n        triangleCount += max + max;\n      } else {\n        triangleCount += max + max + max;\n      }\n    }\n    max = triangleCount;\n    i++;\n  }\n  return max;\n}\n", "\n  // Write your code here\n  const triangle = [];\n  for (let i = 0; i <= n; i++) {\n    triangle.push([0] * i);\n  }\n  for (let i = 0; i < k; i++) {\n    for (let j = 0; j < i; j++) {\n      triangle[i][j] = triangle[i - 1][j];\n      triangle[i][j] = triangle[i][j] + triangle[i - 1][j + 1];\n    }\n  }\n  return triangle.reduce((max, curr) => Math.max(curr.length, max), 0);\n}\n"]}
{"task_id": "MBJSP/237", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkOccurences(testlist) {\n/**\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n */", "entry_point": "checkOccurences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]];\nvar x0 = checkOccurences(arg00);\nvar v0 = {\"[1, 3]\":2,\"[2, 5]\":2,\"[3, 6]\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]];\nvar x1 = checkOccurences(arg10);\nvar v1 = {\"[2, 4]\":2,\"[3, 6]\":2,\"[4, 7]\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]];\nvar x2 = checkOccurences(arg20);\nvar v2 = {\"[2, 13]\":1,\"[11, 23]\":1,\"[12, 25]\":2,\"[16, 23]\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testTup = testlist.map(item => {\n    return (item.count === 1? item.id : item.count);\n  });\n  let count = 0;\n  testlist.forEach(", "\n  const repeatTimes = {};\n  for (let i = 0; i < testlist.length; i++) {\n    repeatTimes[testlist[i]] = repeatTimes[testlist[i]] + 1 || 1;\n  }\n  const repeatTimesList = repeatTimes.sort((a, b) => a - b);\n  const repeatTimesListLength = repeatTimesList.length;\n  return repeatTimesListLength > repeatTimesList.length / 3;\n}\n", "\n  let result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    if (result.length === 0) {\n      result = testlist[i].split(' ').map(word => word.toLowerCase());\n    } else {\n      let flag = 0;\n      for (let j = 0; j < result.length; j++) {\n        if (result[j] === testlist[i].split(' ').map(word => word.toLowerCase())) {\n          flag = 1;\n          break;\n        }\n      }\n      if (flag === 0) {\n        result = result.concat(testlist[i].split(' ').map(word => word.toLowerCase()));\n      }\n    }\n  }\n  return result;\n}\n// console.log(checkOccurences(['a4 b4 c4 d4', 'a5 b5 c5 d5', 'a6 b6 c6 d6', 'a7 b7 c7 d7', 'a8 b8 c8 d8']))\n// console.log(multiplyElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n// console.log(sortNumericStrings(['7', '3', '1', '2', '9', '10', '8', '4', '5']))\nconsole.log(numbers)\n", "\n  const tup1 = [2, 3, 4, 5];\n  const tup2 = [1, 3, 4, 5, 2];\n  const tup3 = [1, 2, 3, 4, 5];\n  const tup4 = [1, 2, 3, 5];\n  const tup5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const tup6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const tup7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const tup8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const tup9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  const tup10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  const tup11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\n  const tup12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,", "\n  const testarray = [];\n  for (let i = 0; i < testlist.length; i++) {\n    testarray.push(testlist[i].time);\n  }\n  const result = [];\n  for (let i = 0; i < testarray.length - 1; i++) {\n    if (testarray[i] === testarray[i + 1]) {\n      result.push(testlist[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/238", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction numberOfSubstrings(str) {\n/**\n * * Write a JavaScript function to count number of non-empty substrings of a given string.\n */", "entry_point": "numberOfSubstrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = numberOfSubstrings(arg00);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcd\";\nvar x1 = numberOfSubstrings(arg10);\nvar v1 = 10;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcde\";\nvar x2 = numberOfSubstrings(arg20);\nvar v2 = 15;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const result = [];\n    const tmp = [];\n    for (let i = 0; i < str.length; i++) {\n        tmp.push(str[i]);\n        if (i > 0 && tmp[i - 1]!== \"a\" && tmp[i - 1]!== \"e\" && tmp[i - 1]!== \"i\" && tmp[i - 1]!== \"o\" && tmp[i - 1]!== \"u\") {\n            result.push(tmp.join(\"\"));\n            tmp.shift();\n        }\n    }\n    return result.length;\n}\n", "\n    // Write your code here\n    const subStrings = str.split('').filter(substring => substring.length > 1);\n    return subStrings.length;\n}\n", "\n  let substringCount = 0;\n  str.split(\"\").forEach(x => {\n    substringCount += x.length > 0? 1 : 0;\n  });\n  return substringCount;\n}\n", "\n  const n = str.length;\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      const subStr = str.substring(i, j + 1);\n      if (subStr.length > 0) {\n        result.push(subStr);\n      }\n    }\n  }\n  return result.length;\n}\n", "\n    const result = [];\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i; j < str.length; j++) {\n            result.push(str.slice(i, j + 1));\n        }\n    }\n    return result.length;\n}\n"]}
{"task_id": "MBJSP/239", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getTotalNumberOfSequences(m, n) {\n/**\n * * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n */", "entry_point": "getTotalNumberOfSequences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 4;\nvar x0 = getTotalNumberOfSequences(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 2;\nvar x1 = getTotalNumberOfSequences(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar arg21 = 3;\nvar x2 = getTotalNumberOfSequences(arg20, arg21);\nvar v2 = 84;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    return (m * n * (n - 1) * (n + 1) / 6);\n}\n", "\n  let result = 0;\n  for (let i = m; i <= n; i++) {\n    let p = i;\n    for (let j = 1; j <= n; j++) {\n      result += (p % 2 === 0)? (p * p) : (p * p * p);\n      p = p + 2;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i <= m + 1; i++) {\n    for (let j = 0; j <= n; j++) {\n      if (((i * 2) - (n - j)) <= i && i < (m + 1)) {\n        result.push(i);\n      }\n    }\n  }\n  return result.length;\n}\n", "\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result += getSequenceCount(m, i);\n  }\n  return result;\n}\n", "\n  return factorial(n - 1) / (factorial(2) * factorial(n - 2));\n}\n"]}
{"task_id": "MBJSP/240", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction replaceList(list1, list2) {\n/**\n * * Write a function to replace the last element of the list with another list.\n */", "entry_point": "replaceList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 7, 9, 10];\nvar arg01 = [2, 4, 6, 8];\nvar x0 = replaceList(arg00, arg01);\nvar v0 = [1, 3, 5, 7, 9, 2, 4, 6, 8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar arg11 = [5, 6, 7, 8];\nvar x1 = replaceList(arg10, arg11);\nvar v1 = [1, 2, 3, 4, 5, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"blue\", \"green\"];\nvar arg21 = [\"yellow\"];\nvar x2 = replaceList(arg20, arg21);\nvar v2 = [\"red\", \"blue\", \"yellow\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return list1;\n}\n", "\n  const numList = [...list1];\n  const replacedList = [...numList].splice(numList.length - 1, 1,...list2);\n  return replacedList;\n}\n", "\n  list1[list1.length - 1] = list2;\n  return list1;\n}\n", "\n  list1.pop();\n  list1.push(list2);\n  return list1;\n}\n", "\n  return list1.slice(0, list1.length - 1) + list2;\n}\n"]}
{"task_id": "MBJSP/241", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction array3d(m, n, o) {\n/**\n * * Write a function to generate a 3d array having each element as '*'.\n */", "entry_point": "array3d", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = array3d(arg00, arg01, arg02);\nvar v0 = [[[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 3;\nvar arg12 = 4;\nvar x1 = array3d(arg10, arg11, arg12);\nvar v1 = [[[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar arg22 = 3;\nvar x2 = array3d(arg20, arg21, arg22);\nvar v2 = [[[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const arr = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < o; k++) {\n        arr.push('*');\n      }\n    }\n  }\n  return arr;\n}\n", "\n  const result = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < o; k++) {\n        result.push('*');\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < m; i++) {\n    let line = [];\n    for (let j = 0; j < n; j++) {\n      let cell = [];\n      for (let k = 0; k < o; k++) {\n        cell.push('*');\n      }\n      line.push(cell);\n    }\n    result.push(line);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < o; k++) {\n        result.push('*');\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < o; k++) {\n        result.push('*');\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/242", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countCharac(str1) {\n/**\n * * Write a function to count total characters in a string.\n */", "entry_point": "countCharac", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programming\";\nvar x0 = countCharac(arg00);\nvar v0 = 18;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"language\";\nvar x1 = countCharac(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"words\";\nvar x2 = countCharac(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const charac = {};\n    for (let i = 0; i < str1.length; i++) {\n        charac[str1[i]] = charac[str1[i]] + 1 || 1;\n    }\n    return charac.length;\n}\n", "\n  const charCount = {};\n  for (let i = 0; i < str1.length; i++) {\n    charCount[str1[i]] = charCount[str1[i]] + 1 || 1;\n  }\n  return Object.keys(charCount).length;\n}\n", "\n    return str1.split('').length;\n}\n", "\n    // Write your code here\n    return str1.length;\n}\n", "\n  const characArr = [];\n  for (let i = 0; i < str1.length; i++) {\n    characArr.push(str1.charAt(i));\n  }\n  const characMap = characArr.reduce((memo, item) => {\n    return memo.set(item, memo[item] + 1 || 1);\n  }, new Map());\n  return characMap.size;\n}\n"]}
{"task_id": "MBJSP/243", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sortOnOccurence(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */", "entry_point": "sortOnOccurence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, \"Jake\"], [2, \"Bob\"], [1, \"Cara\"]];\nvar x0 = sortOnOccurence(arg00);\nvar v0 = [[1, \"Jake\", \"Cara\", 2], [2, \"Bob\", 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"b\", \"ball\"], [\"a\", \"arm\"], [\"b\", \"b\"], [\"a\", \"ant\"]];\nvar x1 = sortOnOccurence(arg10);\nvar v1 = [[\"b\", \"ball\", \"b\", 2], [\"a\", \"arm\", \"ant\", 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, \"Mark\"], [3, \"Maze\"], [2, \"Sara\"]];\nvar x2 = sortOnOccurence(arg20);\nvar v2 = [[2, \"Mark\", \"Sara\", 2], [3, \"Maze\", 1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return lst.sort((a, b) => a[0] - b[0]);\n}\n", "\n  return lst.sort((a, b) => a.first_value - b.first_value);\n}\n", "\n  let sortOrder = 1;\n  while (sortOrder < lst.length - 1) {\n    let min = sortOrder;\n    for (let i = sortOrder + 1; i < lst.length - 1; i++) {\n      if (lst[i] < lst[min]) {\n        min = i;\n      }\n    }\n    let temp = lst[sortOrder];\n    lst[sortOrder] = lst[min];\n    lst[min] = temp;\n    sortOrder++;\n  }\n  return lst;\n}\n", "\n  let list = lst;\n  let result = [];\n  while (list.length) {\n    let min = list[0];\n    let minPos = 0;\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] < min) {\n        min = list[i];\n        minPos = i;\n      }\n    }\n    result.push(list.splice(minPos, 1));\n  }\n  return result;\n}\n", "\n  const dict = {};\n  const result = [];\n  lst.forEach(item => {\n      dict[item[0]] = dict[item[0]] + 1 || 1;\n      if (dict[item[0]] === 1) {\n        result.push(item[0]);\n        dict[item[0]] = 0;\n      }\n  });\n  return result;\n}\n"]}
{"task_id": "MBJSP/244", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction nextPerfectSquare(n) {\n/**\n * * Write a JavaScript function to find the next perfect square greater than a given number.\n */", "entry_point": "nextPerfectSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 35;\nvar x0 = nextPerfectSquare(arg00);\nvar v0 = 36;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = nextPerfectSquare(arg10);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = nextPerfectSquare(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = n;\n  while (result * result > n) {\n    result = result + 1;\n  }\n  return result * result;\n}\n", "\n  return Math.floor(Math.sqrt(n)) + 1;\n}\n", "\n  const l = Math.floor(Math.sqrt(n));\n  return l * l;\n}\n", "\n  let square = n * n;\n  while (true) {\n    square += n;\n    if (Math.floor(Math.sqrt(square))) {\n      break;\n    }\n  }\n  return square;\n}\n", "\n  n = n * n;\n  let testNum = n + 1;\n  while (testNum * testNum < n) {\n    testNum++;\n  }\n  return Math.sqrt(testNum);\n}\n"]}
{"task_id": "MBJSP/245", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxSum(arr, n) {\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n */", "entry_point": "maxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 15, 51, 45, 33, 100, 12, 18, 9];\nvar arg01 = 9;\nvar x0 = maxSum(arg00, arg01);\nvar v0 = 194;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [80, 60, 30, 40, 20, 10];\nvar arg11 = 6;\nvar x1 = maxSum(arg10, arg11);\nvar v1 = 210;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 14, 16, 21, 23, 29, 30];\nvar arg21 = 8;\nvar x2 = maxSum(arg20, arg21);\nvar v2 = 138;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  ", "\n  let arrlen = arr.length;\n  let newarr = [];\n  for (let i = 0; i < arrlen; i++) {\n    newarr.push(arr[i]);\n    newarr.push(-arr[i]);\n  }\n  let dp = [];\n  for (let i = 0; i < newarr.length; i++) {\n    dp[i] = newarr[i];\n  }\n  for (let i = newarr.length - 2; i >= 0; i--) {\n    for (let j = i + 1; j < newarr.length; j++) {\n      dp[j] = Math.max(dp[j], dp[i] + newarr[j]);\n    }\n  }\n  return dp[0] * dp[newarr.length - 1] * n;\n}\n```\n\n</section>\n", "\n  const arrLen = arr.length;\n  const array = [];\n  arrLen > 0? array.push(arr[0]) : array;\n  arrLen > 1? array.push(arr[1]) : array;\n  for (let i = 2; i < arrLen; i++) {\n    let arr2 = [];\n    arrLen > i? arr2.push(arr[i]) : arr2;\n    arrLen > i + 2? arr2.push(arr[i + 2]) : arr2;\n    array = array.concat(arr2);\n  }\n  let sum = 0;\n  const possibleSubSequence = array.reduce((previous, current) => {\n    return {\n      subSeq: [previous, current],\n      sum: previous + current\n    };\n  }, {\n    subSeq: [],\n    sum: 0\n  });\n  return possibleSubSequence.sum;\n}\nconst allArrays = [\n    [1, 2, 3, 4],\n    [2, 3, 4, 5],\n    [2, 3, 4, 5, 6],\n    [3, 4, 5, 6, 7],\n    [4, 5, 6, 7, 8],\n    [5, 6, 7, 8, 9],\n    [6, 7, 8, 9, 10],\n    [7, 8, 9, 10, 11],\n    [8, 9, 10, 11, 12],\n    [9, 10, 11, 12, 13],\n    [10, 11, 12, 13, 14],\n    [11, 12, 13, 14, 15],\n    [12, 13, 14, 15, 16],\n    [13, 14, 15", "\n  const arrt = Array.from(arr);\n  const it = arrt.slice();\n  ", "\n  let maxSum = arr[0],\n    sum = arr[0],\n    tempSum;\n  for (let i = 1; i < arr.length; i++) {\n    tempSum = sum;\n    sum = sum + arr[i];\n    if (tempSum > sum && tempSum <= n) {\n      sum = tempSum;\n    }\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n}\n"]}
{"task_id": "MBJSP/246", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction babylonianSquareroot(number) {\n/**\n * * Write a function for computing square roots using the babylonian method.\n */", "entry_point": "babylonianSquareroot", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = babylonianSquareroot(arg00);\nvar v0 = 3.162277660168379;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = babylonianSquareroot(arg10);\nvar v1 = 1.414213562373095;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = babylonianSquareroot(arg20);\nvar v2 = 3.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let root = 0;\n  for (let i = 1; i <= number; i++) {\n    if (i * i === number) {\n      root = i;\n      break;\n    }\n  }\n  return root;\n}\n", "\n    // Write your code here\n    const guess = number / 2;\n    const current = (number / (guess + (guess * guess) / number)) - (guess + (guess * guess) / number);\n    let sqrt = guess;\n    let found = false;\n    while (current < guess) {\n        guess = sqrt;\n        sqrt = (number / (guess + (guess * guess) / number)) - (guess + (guess * guess) / number);\n        current = (number / (guess + (guess * guess) / number)) - (guess + (guess * guess) / number);\n    }\n    if (sqrt * sqrt === number) {\n        found = true;\n    }\n    return sqrt;\n}\n", "\n  let r = number;\n  let count = 0;\n  while (Math.sqrt(r).toString()!== Math.sqrt(r).toString()) {\n    r = r + 1.0 / (r + 1.0);\n    count++;\n    if (count === 20) {\n      return 0;\n    }\n  }\n  return Math.sqrt(r);\n}\n", "\n  return babylon.math.sqrt(number);\n}\n", "\n    return babylonianSquarerootHelper(number, number, babylonianSquarerootHelper);\n}\n\n"]}
{"task_id": "MBJSP/247", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction lps(str) {\n/**\n * * Write a function to find the longest palindromic subsequence in the given string.\n */", "entry_point": "lps", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"TENS FOR TENS\";\nvar x0 = lps(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"CARDIO FOR CARDS\";\nvar x1 = lps(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"PART OF THE JOURNEY IS PART\";\nvar x2 = lps(arg20);\nvar v2 = 9;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const matrix = str.split('').map(x => x.toLowerCase().split(''));\n  const dp = matrix.map(x => x.map((y, i, j) => Math.floor(i === j? 1 : Math.min(dp[i][j - 1] + 1, dp[i + 1][j] + 1))))\n  const result = dp.map(x => x.reduce((a, b) => Math.max(a, b), 0));\n  return result;\n}\n", "\n  let result = str;\n  const dp = new Array(result.length + 1).fill(0);\n  for (let i = 1; i <= result.length; i++) {\n    for (let j = 1; j <= Math.min(i, result.length - i); j++) {\n      if (str[i - j] === str[result.length - i + j]) {\n        dp[i] = dp[i - 1] + dp[result.length - i + j];\n      } else {\n        dp[i] = Math.max(dp[i - 1], dp[result.length - i + j]);\n      }\n    }\n    if (dp[i] > result.length) {\n      result = str.substring(i - dp[i], i + dp[i])\n    }\n  }\n  return result;\n}\n", "\n  if (str === str.reverse()) {\n    return [str];\n  }\n  const str1 = str.split(\"\");\n  const str2 = str.reverse().split(\"\");\n  const result = [];\n  for (let i = 0; i < str1.length; i++) {\n    let temp = [];\n    temp = str1.slice(i, i + 1);\n    if (temp === temp.reverse()) {\n      temp.push(str1[i]);\n      result.push(temp);\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    let temp = [];\n    temp = str2.slice(i, i + 1);\n    if (temp === temp.reverse()) {\n      temp.push(str2[i]);\n      result.push(temp);\n    }\n  }\n  return result;\n}\n", "\n  const array = str.split('');\n  const length = array.length;\n  const array1 = [], result = [];\n  for (let i = 0; i < length; i++) {\n    array1.push(array[i]);\n  }\n  ", "\n  const result = [];\n  const testTup = str.split('').map(str => str.charAt(str.length - 1));\n  const testTupCopy = testTup.slice(0);\n  for (let i = 0; i < testTupCopy.length; i++) {\n    for (let j = 0; j < testTupCopy.length - 1; j++) {\n      if (testTupCopy[i] === testTupCopy[j + 1]) {\n        if (j > 0 && i > 0) {\n          if (lps(str.slice(0, i + 1))) {\n            result.push(str.slice(0, i + 1));\n          } else if (lps(str.slice(i + 1, str.length))) {\n            result.push(str.slice(i + 1, str.length));\n          }\n        }\n      }\n    }\n  }\n  return result.length > 0? result : false;\n}\n"]}
{"task_id": "MBJSP/249", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction intersectionArray(arraynums1, arraynums2) {\n/**\n * * Write a function to find the intersection of two arrays using lambda function.\n */", "entry_point": "intersectionArray", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg01 = [1, 2, 4, 8, 9];\nvar x0 = intersectionArray(arg00, arg01);\nvar v0 = [1, 2, 8, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg11 = [3, 5, 7, 9];\nvar x1 = intersectionArray(arg10, arg11);\nvar v1 = [3, 5, 7, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg21 = [10, 20, 30, 40];\nvar x2 = intersectionArray(arg20, arg21);\nvar v2 = [10];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return arraynums1.filter(val => arraynums2.includes(val));\n}\n", "\n  return array1.filter(array2 => array2.includes(arraynums2)).reduce((a, b) => a.concat(b));\n}\n", "\n  const array1 = arraynums1.map(num => parseInt(num, 10));\n  const array2 = arraynums2.map(num => parseInt(num, 10));\n  return array1.filter(val => array2.some(element => element === val))\n}\n", "\n  const result = [];\n  const array1 = arraynums1.sort((a, b) => a - b);\n  const array2 = arraynums2.sort((a, b) => a - b);\n  for (let i = 0; i < array1.length; i++) {\n    if (array2.indexOf(array1[i]) > -1) {\n      result.push(array1[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arraynums1.length; i++) {\n    if (arraynums2.find(number => number === arraynums1[i])) {\n      result.push(arraynums1[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/250", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countX(tup, x) {\n/**\n * * Write a JavaScript function to count the occcurences of an element in a tuple.\n */", "entry_point": "countX", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg01 = 4;\nvar x0 = countX(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg11 = 10;\nvar x1 = countX(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg21 = 8;\nvar x2 = countX(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const count = tup.map((element) => {\n    if (element === x) {\n      return true;\n    }\n    return false;\n  });\n  return count.reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n}\n", "\n  const result = [];\n  for (let i = 0; i < tup.length; i++) {\n    if (tup[i] === x) {\n      result.push(tup[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  const testTup = tup.map(x => (x == x? 1 : 0))\n  return result;\n}\n", "\n  const count = tup.reduce((count, num) => (count[num] = count[num] || 0) + 1 || 1, {});\n  return count[x] || 0;\n}\n", "\n  let cnt = 0;\n  for (let i = 0; i < tup.length; i++) {\n    if (tup[i] === x) cnt++;\n  }\n  return cnt;\n}\n"]}
{"task_id": "MBJSP/251", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction insertElement(list, element) {\n/**\n * * Write a function to insert an element before each element of a list.\n */", "entry_point": "insertElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Black\"];\nvar arg01 = \"c\";\nvar x0 = insertElement(arg00, arg01);\nvar v0 = [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"python\", \"java\"];\nvar arg11 = \"program\";\nvar x1 = insertElement(arg10, arg11);\nvar v1 = [\"program\", \"python\", \"program\", \"java\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"happy\", \"sad\"];\nvar arg21 = \"laugh\";\nvar x2 = insertElement(arg20, arg21);\nvar v2 = [\"laugh\", \"happy\", \"laugh\", \"sad\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i]);\n    result.push(element);\n  }\n  return result;\n}\n", "\n  for (let i = 0; i < list.length; i++) {\n    list.splice(i, 0, element);\n  }\n  return list;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const newElement = [element];\n    newElement.push(list[i]);\n    result.push(newElement);\n  }\n  return result;\n}\n", "\n  for (let i = 0; i < list.length; i++) {\n    list[i + 1] = list[i];\n  }\n  list.push(element);\n  return list;\n}\n", "\n    return [...list].map((val, index) => {\n        if (index === 0) {\n            return [element,...list];\n        }\n        return [...list.slice(0, index), element,...list.slice(index)];\n    });\n}\n"]}
{"task_id": "MBJSP/252", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction convert(numbers) {\n/**\n * * Write a JavaScript function to convert complex numbers to polar coordinates.\n */", "entry_point": "convert", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = convert(arg00);\nvar v0 = [1.0, 0.0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = convert(arg10);\nvar v1 = [4.0, 0.0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = convert(arg20);\nvar v2 = [5.0, 0.0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const real = numbers[0];\n  const img = numbers[1];\n  const re = real;\n  const im = img;\n  const reResult = Math.abs(re);\n  const imResult = Math.abs(im);\n  const theta = Math.atan(im / re);\n  const result = {\n    reResult: reResult,\n    imResult: imResult,\n    theta\n  };\n  return result;\n}\n", "\n  const result = [];\n  const factor = Math.sqrt(Math.pow(numbers[0], 2) + Math.pow(numbers[1], 2));\n  result.push(factor);\n  result.push(Math.atan2(numbers[1], numbers[0]));\n  return result;\n}\n", "\n    // Write your code here\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const r = Math.sqrt(numbers[i]);\n        const theta = Math.atan(numbers[i]);\n        result.push({r, theta});\n    }\n    return result;\n}\n\nmodule.exports = {\n  write,\n  writeString,\n  writeBoolean,\n  writeNumber,\n  writeLists,\n  writeArray,\n  writeHash,\n  writeHashWithStringKeys,\n  writeArrayOfObjects,\n  writeObjectOfNumbers,\n  writeObjectOfLists,\n  writeObjectOfArrayOfNumbers,\n  writeObjectOfListsOfNumbers,\n  writeObjectOfNestedObjects,\n  writeObjectOfListsOfNestedObjects,\n  writeObjectOfListsOfObjects,\n  writeObjectOfArrayOfLists,\n  writeObjectOfObjectOfArrayOfNumbers,\n  writeObjectOfNestedObjectsOfLists,\n  writeObjectOfArrayOfNestedObjects,\n  writeObjectOfObjectOfNestedObjects,\n  writeObjectOfNestedObjectsOfNestedObjects,\n  writeObjectOfListsOfArrayOfNumbers,\n  writeObjectOfListsOfObjectsOfArrayOfNumbers,\n  writeListsOfNumbers,\n  writeListsOfNumbersOfLists,\n  writeListsOfNumbersOfListsOfNumbers,\n  writeListsOfNumbersOfListsOfNumbersOfLists,\n  writeListsOfNumbersOfListsOfNumbersOfListsOfNumbers,\n  writeArrayOfObjects,\n  writeArrayOfLists,\n  writeArrayOfArrayOfNumbers", "\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const radius = Math.abs(numbers[i]);\n    const angle = Math.atan2(numbers[i + 1], numbers[i]);\n    result.push(radius * Math.cos(angle) + \" \" + radius * Math.sin(angle));\n  }\n  return result;\n}\n// export const convert = convert;\n", "\n  // Write your code here\n  let result = [];\n  const magnitude = numbers[0];\n  const angle = convert.toRadians(numbers[1]);\n  result.push(magnitude * Math.cos(angle));\n  result.push(magnitude * Math.sin(angle));\n  return result;\n}\n"]}
{"task_id": "MBJSP/253", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countInteger(list1) {\n/**\n * * Write a JavaScript function to count integers from a given list.\n */", "entry_point": "countInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, \"abc\", 1.2];\nvar x0 = countInteger(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = countInteger(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1.2, 4, 5.1];\nvar x2 = countInteger(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return list1.filter(a => isInteger(a)).length;\n}\n", "\n  const list = list1.map(item => parseInt(item));\n  const count = list.filter(item => item % 1 === 0).length;\n  return count;\n}\n", "\n  const list2 = list1.filter(item => item % 2 === 0);\n  const result = list2.reduce((a, b) => a + b, 0);\n  return result;\n}\n", "\n  let counter = 0;\n  for (let i = 0; i < list1.length; i++) {\n    const elem = parseInt(list1[i], 10);\n    if (elem.toString() === '0') {\n      counter = counter + 1;\n    }\n  }\n  return counter;\n}\n", "\n  return list1.reduce((count, x) => count + 1, 0);\n}\n"]}
{"task_id": "MBJSP/254", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction wordsAe(text) {\n/**\n * * Write a function to find all words starting with 'a' or 'e' in a given string.\n */", "entry_point": "wordsAe", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programe\";\nvar x0 = wordsAe(arg00);\nvar v0 = [\"ame\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python programe language\";\nvar x1 = wordsAe(arg10);\nvar v1 = [\"ame\", \"anguage\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"assert statement\";\nvar x2 = wordsAe(arg20);\nvar v2 = [\"assert\", \"atement\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const words = text.split(' ');\n  return words.filter((word, index) => {\n    if (index === 0 || index === words.length - 1) {\n      return word[0] === 'a' || word[0] === 'e';\n    }\n    return word[0] === 'a' || word[0] === 'e';\n  });\n}\n", "\n  const temp = text.split('');\n  let result = [];\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i].charAt(0) === 'a' || temp[i].charAt(0) === 'e') {\n      result.push(temp[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  text.split(\"\").reduce((ac, str, i, arr) => {\n    if (str[0] === \"a\" || str[0] === \"e\") {\n      result.push(str);\n    }\n    return ac;\n  }, 0);\n  return result;\n}\n", "\n  // Write your code here\n  let a_words = [];\n  let a_counter = 0;\n  let e_counter = 0;\n  const words = text.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].substring(0, 1).toUpperCase() === \"A\" || words[i].substring(0, 1).toUpperCase() === \"E\") {\n      if (words[i].substring(0, 1).toUpperCase() === \"A\") {\n        a_counter = a_counter + 1;\n      }\n      else {\n        e_counter = e_counter + 1;\n      }\n      a_words.push(words[i]);\n    }\n  }\n  return a_words;\n}\n", "\n  // Write your code here\n  const answer = [];\n  for (let i = 0; i < text.length; i++) {\n    if (((text[i] === 'a') || (text[i] === 'e')) && (i!== 0) && (i!== text.length - 1)) {\n      answer.push(text.slice(i, i + 2));\n    }\n  }\n  return answer;\n}\n"]}
{"task_id": "MBJSP/255", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction combinationsColors(l, n) {\n/**\n * * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n */", "entry_point": "combinationsColors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Blue\"];\nvar arg01 = 1;\nvar x0 = combinationsColors(arg00, arg01);\nvar v0 = [[\"Red\"], [\"Green\"], [\"Blue\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Red\", \"Green\", \"Blue\"];\nvar arg11 = 2;\nvar x1 = combinationsColors(arg10, arg11);\nvar v1 = [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Red\", \"Green\", \"Blue\"];\nvar arg21 = 3;\nvar x2 = combinationsColors(arg20, arg21);\nvar v2 = [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    const result = [];\n    const counts = {};\n    for (let i = 0; i < l.length; i++) {\n        counts[l[i]] = counts[l[i]] + 1 || 1;\n    }\n    const nKeys = counts.keys();\n    let temp;\n    for (let i = 0; i < nKeys.length; i++) {\n        if (counts[nKeys[i]] === n) {\n            temp = [];\n            for (let j = 0; j < nKeys[i].length; j++) {\n                temp[j] = nKeys[i][j];\n            }\n            temp.unshift(nKeys[i]);\n            result.push(temp);\n        }\n    }\n    return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < l; i++) {\n    for (let j = 0; j < l; j++) {\n      for (let k = 0; k < l; k++) {\n        if (i!== j && i!== k && j!== k) {\n          result.push([i, j, k]);\n        }\n      }\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const result = [];\n  const colours = [\n    'pink',\n    'yellow',\n    'orange',\n    'green',\n    'blue',\n    'indigo',\n    'violet'\n  ];\n  const colorCombos = combinations(colours, n);\n  colorCombos.forEach(combination => {\n    const newCombination = [];\n    for (let i = 0; i < l - 1; i++) {\n      newCombination.push(combination[i]);\n    }\n    for (let i = 0; i < l - 1; i++) {\n      newCombination.push(combination[i + 1]);\n    }\n    result.push(newCombination);\n  });\n  return result;\n}\n", "\n  // Write your code here\n  return [];\n}\n", "\n  const result = [];\n  const colors = ['red', 'green', 'blue'];\n  for (let i = 0; i < l; i++) {\n    for (let j = 0; j < l - i - 1; j++) {\n      for (let k = 0; k < l - i - j - 1; k++) {\n        const combo = colors.slice(i, i + 3).concat(colors.slice(i + 3, i + 6)).concat(colors.slice(i + 6, i + 9)).concat(colors.slice(i + 9, i + 12));\n        if (combo.indexOf(colors[j]) > -1 && combo.indexOf(colors[k]) > -1) {\n          result.push(combo);\n        }\n      }\n    }\n  }\n  return result;\n}\n\nconst log = console.log;\nconst testTup = [1, 2, 3];\n"]}
{"task_id": "MBJSP/256", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countPrimesNums(n) {\n/**\n * * Write a JavaScript function to count the number of prime numbers less than a given non-negative number.\n */", "entry_point": "countPrimesNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = countPrimesNums(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = countPrimesNums(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = countPrimesNums(arg20);\nvar v2 = 25;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let counter = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      counter++;\n    }\n  }\n  return counter;\n}\n", "\n  // Write your code here\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n    const primes = [];\n    let counter = 0;\n    for (let i = 2; i < n; i++) {\n        const isPrime = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            counter++;\n            primes.push(i);\n        }\n    }\n    return counter;\n}\n", "\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < n; i++) {\n        counter[i + 1] = counter[i + 1] + 1 || 1;\n        if (counter[i + 1] === n - 1) {\n            result.push(i + 1);\n            counter[i + 1] = 0;\n        }\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/257", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction swapNumbers(a, b) {\n/**\n * * Write a function to swap two numbers.\n */", "entry_point": "swapNumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = swapNumbers(arg00, arg01);\nvar v0 = [20, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 17;\nvar x1 = swapNumbers(arg10, arg11);\nvar v1 = [17, 15];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar arg21 = 200;\nvar x2 = swapNumbers(arg20, arg21);\nvar v2 = [200, 100];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const temp = a;\n  a = b;\n  b = temp;\n}\n", "\n  const temp = a;\n  a = b;\n  b = temp;\n  return a + b;\n}\n", "\n  a = a * 10 + b;\n  b = a / 10;\n  a = a % 10;\n  return [a, b];\n}\n", "\n  const result = [];\n  result.push(a);\n  result.push(b);\n  result.sort();\n  return result.join('');\n}\n", "\n  return b, a;\n}\n"]}
{"task_id": "MBJSP/258", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countOdd(arraynums) {\n/**\n * * Write a function to find number of odd elements in the given list using lambda function.\n */", "entry_point": "countOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 7, 8, 10];\nvar x0 = countOdd(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 15, 14, 13, -18, 12, -20];\nvar x1 = countOdd(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 4, 8, 9];\nvar x2 = countOdd(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let odd = 0;\n  for (let i = 0; i < arrayNum.length; i++) {\n    if (arrayNum[i] % 2!== 0) {\n      odd++;\n    }\n  }\n  return odd;\n}\n", "\n  return arraynums.filter((num) => num % 2 === 1).length;\n}\n", "\n  return arraynums.map(num =>!!num).filter(e => e).length;\n}\n", "\n  // Write your code here\n  let count = 0;\n  let odd = (el) => {\n    if (el % 2 === 1) {\n      count++;\n    }\n  };\n  for (let i = 0; i < arraynums.length; i++) {\n    arraynums.forEach(odd);\n  }\n  return count;\n}\n", "\n  return arraynums.filter(num => num % 2!== 0).length;\n}\n"]}
{"task_id": "MBJSP/259", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maximizeElements(testtup1, testtup2) {\n/**\n * * Write a function to maximize the given two tuples.\n */", "entry_point": "maximizeElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = maximizeElements(arg00, arg01);\nvar v0 = [[6, 7], [4, 9], [2, 9], [7, 10]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = maximizeElements(arg10, arg11);\nvar v1 = [[7, 8], [5, 10], [3, 10], [8, 11]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = maximizeElements(arg20, arg21);\nvar v2 = [[8, 9], [6, 11], [4, 11], [9, 12]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] * testTup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(Math.max(testTup1[i], testTup2[i]));\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length - 1; i++) {\n    result.push(Math.max(testTup1[i] * testTup1[i + 1], testTup2[i] * testTup2[i + 1]));\n  }\n  return result;\n}\n", "\n  const result1 = multiplyElements(testtup1);\n  const result2 = multiplyElements(testtup2);\n  return result1.concat(result2).sort((a, b) => a - b);\n}\n", "\n  const res = [];\n  res.push(multiplyElements(testtup1));\n  res.push(multiplyElements(testtup2));\n  return res;\n}\n"]}
{"task_id": "MBJSP/260", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction newmanPrime(n) {\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */", "entry_point": "newmanPrime", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = newmanPrime(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = newmanPrime(arg10);\nvar v1 = 17;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = newmanPrime(arg20);\nvar v2 = 41;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const primeCount = {};\n    for (let j = 1; j <= i; j++) {\n      primeCount[j] = primeCount[j] + 1 || 1;\n    }\n    for (let j = 1; j <= i; j++) {\n      if (primeCount[j] === i - 1 && j % 2 === 0) {\n        result.push(j);\n        primeCount[j] = 0;\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < 5; j++) {\n      result.push(7 * j);\n    }\n  }\n  return result;\n}\n", "\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum = sum + (i * i - n * (i - 1) * (i - 2));\n    }\n    return sum;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    const tup = primes(i);\n    result.push(tup[0]);\n  }\n  return result;\n}\n", "\n  const findPrimes = (n) => {\n    let currentPrime = 2;\n    const nums = [];\n    const result = [];\n    while (nums.length < n) {\n      for (let i = currentPrime; i <= (Math.sqrt(currentPrime)); i++) {\n        if (i * i > currentPrime) {\n          break;\n        }\n        if (currentPrime % i === 0) {\n          break;\n        }\n      }\n      if (i > (Math.sqrt(currentPrime))) {\n        nums.push(currentPrime);\n      }\n      currentPrime++;\n    }\n    return nums;\n  };\n  const getPrimes = (n) => {\n    const newPrime = findPrimes(n);\n    for (let i = 0; i < newPrime.length; i++) {\n      result.push(newPrime[i]);\n    }\n    return result;\n  };\n  const getPrimes2 = (n) => {\n    let currentPrime = 2;\n    let result = [];\n    while (result.length < n) {\n      for (let i = currentPrime; i <= (Math.sqrt(currentPrime)); i++) {\n        if (i * i > currentPrime) {\n          break;\n        }\n        if (currentPrime % i === 0) {\n          break;\n        }\n      }\n      if (i > (Math.sqrt(currentPrime))) {\n        result.push(currentPrime);\n      }\n      currentPrime++;\n    }\n    return result;\n  };\n  return getPrimes2(n);\n}\n"]}
{"task_id": "MBJSP/261", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction divisionElements(testtup1, testtup2) {\n/**\n * * Write a function to perform mathematical division operation across the given tuples.\n */", "entry_point": "divisionElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = divisionElements(arg00, arg01);\nvar v0 = [2, 2, 2, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 6, 8, 16];\nvar arg11 = [6, 3, 4, 4];\nvar x1 = divisionElements(arg10, arg11);\nvar v1 = [2, 2, 2, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [20, 14, 36, 18];\nvar arg21 = [5, 7, 6, 9];\nvar x2 = divisionElements(arg20, arg21);\nvar v2 = [4, 2, 6, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const resultEle = testTup1[i] / testtup2[i];\n    result.push(resultEle);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] / testTup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] / testTup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    if (testTup2[i]!== 0) {\n      result.push(testTup1[i] / testTup2[i]);\n    }\n  }\n  return result;\n}\n", "\n  return testtup1.map((num1, num2) => num1 / num2).join('/');\n}\n"]}
{"task_id": "MBJSP/262", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction splitTwoParts(list1, l) {\n/**\n * * Write a function to split a given list into two parts where the length of the first part of the list is given.\n */", "entry_point": "splitTwoParts", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nvar arg01 = 3;\nvar x0 = splitTwoParts(arg00, arg01);\nvar v0 = [[1, 1, 2], [3, 4, 4, 5, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"b\", \"c\", \"d\"];\nvar arg11 = 2;\nvar x1 = splitTwoParts(arg10, arg11);\nvar v1 = [[\"a\", \"b\"], [\"c\", \"d\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar arg21 = 4;\nvar x2 = splitTwoParts(arg20, arg21);\nvar v2 = [[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return [list1.splice(0, l), list1.splice(l, list1.length - l)];\n}\n", "\n  const arr = list1;\n  let i = 0;\n  const len = arr.length;\n  while (i < len && i < l) {\n    arr.splice(i, 0, [arr[i]], [arr[i + 1]]);\n    i += 2;\n  }\n  return arr;\n}\n", "\n  let list2 = [];\n  for (let i = 0; i < l; i++) {\n    list2.push(list1[i]);\n  }\n  return [list1.slice(0, l), list2];\n}\n", "\n  let result = [];\n  let remaining = l;\n  let num = 0;\n  let i = 0;\n  while (remaining > 0) {\n    if (num === list1.length - 1) {\n      const newList = list1.slice(i, num + i + 1);\n      result.push(newList);\n      remaining = remaining - newList.length;\n      i = num + i + 1;\n    } else {\n      result.push(list1.slice(i, num + i + 1));\n      remaining = remaining - list1.slice(i, num + i + 1).length;\n      i = num + i + 1;\n    }\n    num++;\n  }\n  return result;\n}\n", "\n  const firstPart = [];\n  let lastPart = [];\n  let j = 0;\n  for (let i = 0; i < list1.length; i++) {\n    firstPart.push(list1[i]);\n    j++;\n    if (j === l) {\n      lastPart = list1.slice(i, list1.length);\n      return [firstPart, lastPart];\n    }\n  }\n}\n"]}
{"task_id": "MBJSP/263", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction mergeDict(d1, d2) {\n/**\n * * Write a function to merge two dictionaries.\n */", "entry_point": "mergeDict", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"a\"':100,'\"b\"':200};\nvar arg01 = {'\"x\"':300,'\"y\"':200};\nvar x0 = mergeDict(arg00, arg01);\nvar v0 = {'\"x\"':300,'\"y\"':200,'\"a\"':100,'\"b\"':200};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nvar arg11 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nvar x1 = mergeDict(arg10, arg11);\nvar v1 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"a\"':10,'\"b\"':20};\nvar arg21 = {'\"x\"':30,'\"y\"':40};\nvar x2 = mergeDict(arg20, arg21);\nvar v2 = {'\"x\"':30,'\"y\"':40,'\"a\"':10,'\"b\"':20};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const result = {};\n    for (const d in d1) {\n        result[d] = d1[d];\n    }\n    for (const d in d2) {\n        result[d] = d2[d];\n    }\n    return result;\n}\n\n// write your code here\n", "\n  const result = {};\n  for (let i = 0; i < d1.length; i++) {\n    result[d1[i]] = result[d1[i]] + 1 || 1;\n  }\n  for (let i = 0; i < d2.length; i++) {\n    if (result[d2[i]]) {\n      result[d2[i]] += 1;\n    } else {\n      result[d2[i]] = 1;\n    }\n  }\n  return result;\n}\n//     let tup1 = [2, 5, 3, 1];\n//     let tup2 = [4, 1, 1, 6, 6];\n//     let tup3 = [1, 3, 4, 4, 3, 5, 6];\n\n//     tup1.sort();\n//     tup2.sort();\n//     let result = multiplyElements(tup1);\n//     result.push(multiplyElements(tup2));\n//     result.push(multiplyElements(tup3));\n\n//     console.log(result)\n\n//     const dict1 = {\n//       a: 100,\n//       b: 200,\n//       c: 300\n//     };\n//     const dict2 = {\n//       d: 400,\n//       e: 500,\n//       f: 600\n//     };\n//     const dict3 = {\n//       g: 700,\n//       h: 800,\n//       i: 900\n//     };\n//     let result = mergeDict(dict1, dict2);\n//     result = mergeDict(result, dict3);\n//     console.log(result)\n\n//", "\n  const result = {};\n  for (let d in d1) {\n    result[d] = d1[d];\n  }\n  for (let d in d2) {\n    result[d] = d2[d];\n  }\n  return result;\n}\n", "\n  d1 = d1 || {};\n  d2 = d2 || {};\n  const result = {};\n  for (let d1Key in d1) {\n    result[d1Key] = d1[d1Key];\n  }\n  for (let d2Key in d2) {\n    result[d2Key] = d2[d2Key];\n  }\n  return result;\n}\n", "\n  const mergedDict = {};\n  mergedDict.keys = d1.keys.concat(d2.keys);\n  mergedDict.values = d1.values.concat(d2.values);\n  return mergedDict;\n}\n"]}
{"task_id": "MBJSP/264", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction dogAge(hage) {\n/**\n * * Write a function to calculate a dog's age in dog's years.\n */", "entry_point": "dogAge", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = dogAge(arg00);\nvar v0 = 61;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = dogAge(arg10);\nvar v1 = 73;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 24;\nvar x2 = dogAge(arg20);\nvar v2 = 109;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const dogYears = (hage + 1) * hage / 2;\n  return dogYears;\n}\n", "\n    const ages = [];\n    for (let i = 0; i < hage.length; i++) {\n        ages.push(hage[i] - hage[i + 1]);\n    }\n    return ages.reduce((age, age1) => age + age1, 0);\n}\n\n", "\n  const dogYears = 1.2 * hogAge;\n  return dogYears;\n}\n", "\n  const years = hage / 5;\n  return years;\n}\n", "\n    return 1.5 * hage.length;\n}\n"]}
{"task_id": "MBJSP/265", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction listSplit(s, step) {\n/**\n * * Write a function to split a list for every nth element.\n */", "entry_point": "listSplit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"];\nvar arg01 = 3;\nvar x0 = listSplit(arg00, arg01);\nvar v0 = [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar arg11 = 3;\nvar x1 = listSplit(arg10, arg11);\nvar v1 = [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"];\nvar arg21 = 2;\nvar x2 = listSplit(arg20, arg21);\nvar v2 = [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Array(s.length / step)\n      .fill(0)\n      .map(() => [s.substr(i * step, step) for i in Array(step).keys()])\n      .reduce(\n        (rst, arr) => rst.concat(arr),\n        []\n      );\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < s.length; i += step) {\n    result.push(s[i]);\n  }\n  return result;\n}\n", "\n  return s.map(num => s.slice(num, num + step));\n}\n", "\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (i % step === 0) {\n      result.push(s[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const sublist = s.slice(i, i + step);\n    result.push(sublist);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/266", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction lateralsurfaceCube(l) {\n/**\n * * Write a function to find the lateral surface area of a cube.\n */", "entry_point": "lateralsurfaceCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = lateralsurfaceCube(arg00);\nvar v0 = 100;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar x1 = lateralsurfaceCube(arg10);\nvar v1 = 324;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = lateralsurfaceCube(arg20);\nvar v2 = 400;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.pow(l, 2);\n}\n", "\n  let result = 0;\n  for (let i = 0; i < l; i++) {\n    result = result + 2 * l;\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < l; i++) {\n    result.push(2 * (i * i + (l - i) * (l - i)));\n  }\n  return result;\n}\nconst testTup = [2, 3, 4, 5];\n", "\n  const result = (l * l * l) - (2 * l * l * l);\n  return result;\n}\n", "\n  let total = 0;\n  let cubeSide = Math.sqrt(3);\n  for (let i = 0; i < l; i++) {\n    total += cubeSide * cubeSide;\n    cubeSide += cubeSide;\n  }\n  return total;\n}\n"]}
{"task_id": "MBJSP/267", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction squareSum(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of first n odd natural numbers.\n */", "entry_point": "squareSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = squareSum(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = squareSum(arg10);\nvar v1 = 35;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squareSum(arg20);\nvar v2 = 84;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n * (n + 1) * (2 * n + 1) / 6;\n}\n", "\n  // Write your code here\n  const arr = [];\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      arr.push(i ** 2);\n    }\n  }\n  arr.forEach((item) => sum += item);\n  return sum;\n}\n", "\n  const result = [];\n  let oddSum = 0;\n  for (let i = 1; i <= n; i++) {\n    oddSum += i;\n  }\n  const squareSumOdd = oddSum * oddSum;\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return squareSumOdd;\n}\n", "\n  const sum = 0;\n  for (let i = 1; i < n; i += 2) {\n    sum += i * i;\n  }\n  return sum;\n}\n", "\n  const odd = [];\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    result += i * i;\n    odd.push(i * i);\n  }\n  return result + odd[n - 1];\n}\n"]}
{"task_id": "MBJSP/268", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findStarNum(n) {\n/**\n * * Write a function to find the n'th star number.\n */", "entry_point": "findStarNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = findStarNum(arg00);\nvar v0 = 37;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = findStarNum(arg10);\nvar v1 = 73;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = findStarNum(arg20);\nvar v2 = 121;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const strnums = ['**', '***', '****', '*****'];\n    const res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(strnums[n - i - 1]);\n    }\n    return res;\n}\n", "\n  const starNumber = [];\n  for (let i = 1; i <= n; i++) {\n    starNumber.push(i);\n  }\n  return starNumber;\n}\n", "\n  let result = 1;\n  for (let i = 1; i < n + 1; i++) {\n    result *= i;\n  }\n  return result;\n}\n", "\n  let nthStarNum = 1;\n  while (n-- > 1) {\n    nthStarNum = nthStarNum * 5 + 1;\n  }\n  return nthStarNum;\n}\n", "\n  const starNum = [];\n  for (let i = 1; i <= n; i++) {\n    starNum.push(i);\n  }\n  return starNum;\n}\n"]}
{"task_id": "MBJSP/269", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction asciiValue(k) {\n/**\n * * Write a function to find the ascii value of a character.\n */", "entry_point": "asciiValue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"A\";\nvar x0 = asciiValue(arg00);\nvar v0 = 65;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"R\";\nvar x1 = asciiValue(arg10);\nvar v1 = 82;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"S\";\nvar x2 = asciiValue(arg20);\nvar v2 = 83;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let asciiValue = 0;\n  for (let i = 0; i < k.length; i++) {\n    asciiValue = asciiValue + k.charCodeAt(i);\n  }\n  return asciiValue;\n}\n", "\n  let l = \"\";\n  for (let i = 0; i < k.length; i++) {\n    l += String.fromCharCode(k.charCodeAt(i));\n  }\n  return l;\n}\n", "\n  return k;\n}\n", "\n  return k.charCodeAt();\n}\n", "\n    return k;\n}\n"]}
{"task_id": "MBJSP/270", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumEvenAndEvenIndex(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of even numbers at even positions.\n */", "entry_point": "sumEvenAndEvenIndex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 12, 1, 18, 8];\nvar arg01 = 6;\nvar x0 = sumEvenAndEvenIndex(arg00, arg01);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 20, 17, 9, 2, 10, 18, 13, 6, 18];\nvar arg11 = 10;\nvar x1 = sumEvenAndEvenIndex(arg10, arg11);\nvar v1 = 26;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 12, 1];\nvar arg21 = 4;\nvar x2 = sumEvenAndEvenIndex(arg20, arg21);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] % 2!== 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "\n  const sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      if (arr[i] % 2 === 0) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n      result.push(sum);\n    }\n    if (i + 1 < arr.length) {\n      if (arr[i + 1] % 2 === 0) {\n        sum += arr[i + 1];\n        result.push(sum);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sum = sum + arr[i];\n    }\n  }\n  return sum;\n}\n", "\n  let sumEven = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sumEven += arr[i];\n    }\n  }\n  let sumEvenIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      sumEvenIndex += i;\n    }\n  }\n  return sumEven + sumEvenIndex;\n}\n"]}
{"task_id": "MBJSP/271", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction evenPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of first n even natural numbers.\n */", "entry_point": "evenPowerSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = evenPowerSum(arg00);\nvar v0 = 1056;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = evenPowerSum(arg10);\nvar v1 = 8832;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = evenPowerSum(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const nn = Math.pow(10, 5);\n  const result = nn / n - nn % n;\n  return result;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(2, i) * 5;\n  }\n  return sum;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    const product = (i * i * i * i) * (i * i * i * i);\n    result.push(product);\n  }\n  const sum = result.reduce((a, b) => a + b, 0);\n  return sum;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0 && i % 5 === 0) {\n      result += Math.pow(i, 5);\n    }\n  }\n  return result;\n}\n", "\n  let nEven = 0;\n  let nN = 0;\n  let total = 0;\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      nEven = nEven + i;\n    } else {\n      nN = nN + i;\n    }\n  }\n  total = nEven * nN;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      total = total + i * i * i * i;\n    }\n  }\n  result = total;\n  return result;\n}\n"]}
{"task_id": "MBJSP/272", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction rearExtract(testlist) {\n/**\n * * Write a function to perfom the rear element extraction from list of tuples records.\n */", "entry_point": "rearExtract", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]];\nvar x0 = rearExtract(arg00);\nvar v0 = [21, 20, 19];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]];\nvar x1 = rearExtract(arg10);\nvar v1 = [36, 25, 45];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]];\nvar x2 = rearExtract(arg20);\nvar v2 = [14, 36, 56];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testList.length - 1; i++) {\n    const temp = testlist[i];\n    testlist[i] = testlist[i + 1];\n    testlist[i + 1] = temp;\n  }\n  return testlist;\n}\n", "\n  return testlist[testlist.length - 1];\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length - 1; i++) {\n    result.push(testlist[i].rear);\n  }\n  return result;\n}\n", "\n  return testlist.splice(testlist.length - 1, 1);\n}\n", "\n  const result = [];\n  for (let i = testlist.length - 1; i > 0; i--) {\n    result.push(testlist[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/273", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction substractElements(testtup1, testtup2) {\n/**\n * * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n */", "entry_point": "substractElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 5];\nvar arg01 = [2, 5, 18];\nvar x0 = substractElements(arg00, arg01);\nvar v0 = [8, -1, -13];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 2, 3];\nvar arg11 = [24, 45, 16];\nvar x1 = substractElements(arg10, arg11);\nvar v1 = [-13, -43, -13];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [7, 18, 9];\nvar arg21 = [10, 11, 12];\nvar x2 = substractElements(arg20, arg21);\nvar v2 = [-3, 7, -3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i] - testtup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup2.length; i++) {\n    result.push(testtup1[i] - testtup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i] - testtup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup2[i] - testtup1[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i] - testtup2[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/274", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction evenBinomialCoeffSum(n) {\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */", "entry_point": "evenBinomialCoeffSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = evenBinomialCoeffSum(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = evenBinomialCoeffSum(arg10);\nvar v1 = 32;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = evenBinomialCoeffSum(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const binom = [...Array(n + 1)].map((d, i) => {\n    return Math.pow(d, i) * (i > 0? d : 1);\n  });\n  const sum = binom.reduce((acc, cur) => acc + cur, 0);\n  return sum;\n}\n", "\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(Math.pow(i, 2) * Math.pow(n - i, 2));\n  }\n  return result.reduce((a, b) => a + b, 0);\n}\n", "\n  const binomialCoeffs = [...Array(n + 1).keys()].reduce((acc, n) => {\n    const factorial = n > 0? n * acc : 1;\n    return [...Array(n - 1).keys()].reduce((acc2, k) => {\n      return acc2[k] == 0? acc2[k] = (factorial / (factorial * factorial)) * (k + 1) : acc2[k] + (factorial / (factorial * factorial)) * (k + 1);\n    }, acc);\n  }, []);\n  return binomialCoeffs.reduce((sum, n) => {\n    return sum + Math.pow(2, n);\n  }, 0);\n}\n", "\n  return n === 0? 1 : n * binomialCoeff(n - 2, 2) + evenBinomialCoeffSum(n - 1);\n}\n", "\n    return binomialCoeff(2 * n, n) - binomialCoeff(2 * n, n - 1);\n}\n"]}
{"task_id": "MBJSP/275", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getPosition(a, n, m) {\n/**\n * * Write a JavaScript function to find the position of the last removed element from the given array.\n */", "entry_point": "getPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 4];\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = getPosition(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 3];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = getPosition(arg10, arg11, arg12);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar arg21 = 4;\nvar arg22 = 1;\nvar x2 = getPosition(arg20, arg21, arg22);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    let k = 0;\n    while (k < n) {\n        if (a[k] === m) {\n            k = k - 1;\n        }\n        k = k + 1;\n    }\n    return k;\n}\n", "\n  const arr = [];\n  let x;\n  for (let i = 0; i < n; i++) {\n    x = a[i];\n    arr.push(x);\n  }\n  const sortedArr = arr.sort();\n  let j = sortedArr.length - 1;\n  let k = 0;\n  while (j > 0 && sortedArr[j] === sortedArr[j - 1]) {\n    j--;\n    k++;\n  }\n  return k;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === m) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    result[a[i] - 1] = -1;\n  }\n  const position = m - 1;\n  return result[position];\n}\n", "\n  return a.splice(n, 1).pop();\n}\n"]}
{"task_id": "MBJSP/276", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction volumeCylinder(r, h) {\n/**\n * * Write a function to find the volume of a cylinder.\n */", "entry_point": "volumeCylinder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar x0 = volumeCylinder(arg00, arg01);\nvar v0 = 1570.7500000000002;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 5;\nvar x1 = volumeCylinder(arg10, arg11);\nvar v1 = 251.32000000000002;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 10;\nvar x2 = volumeCylinder(arg20, arg21);\nvar v2 = 502.64000000000004;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (Math.PI * r * r * h);\n}\n", "\n  return (2 * Math.PI * r * r) * h;\n}\n", "\n  return Math.PI * r * r * h;\n}\n", "\n  const base = 2 * Math.PI * r * h;\n  const height = Math.PI * r * r * h;\n  return base + height;\n}\n", "\n  let volume = 0;\n  volume = (3 * Math.PI * r * r * h) / 3;\n  return volume;\n}\n"]}
{"task_id": "MBJSP/277", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction dictFilter(dict, n) {\n/**\n * * Write a function to filter a dictionary based on values.\n */", "entry_point": "dictFilter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg01 = 170;\nvar x0 = dictFilter(arg00, arg01);\nvar v0 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Pierre Cox\"':190};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg11 = 180;\nvar x1 = dictFilter(arg10, arg11);\nvar v1 = {'\"Alden Cantrell\"':180,'\"Pierre Cox\"':190};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg21 = 190;\nvar x2 = dictFilter(arg20, arg21);\nvar v2 = {'\"Pierre Cox\"':190};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Object.keys(dict).reduce((acc, key) => {\n    if (dict[key] === n) {\n      acc[key] = n;\n    }\n    return acc;\n  }, {});\n}\n", "\n  const dictResult = {};\n  for (let i = 0; i < dict.length; i++) {\n    dictResult[dict[i].toString()] = dict[i].toString();\n  }\n  return dictResult;\n}\n", "\n  const values = Object.values(dict);\n  const result = [];\n  values.forEach(el => {\n    if (el.toString().length > n) {\n      result.push(el);\n    }\n  });\n  return result;\n}\n", "\n  const dictStr = dict.map(d => `${d.name} ${d.value}`).join(', ');\n  return dictStr;\n}\n", "\n  const filteredDict = {};\n  for (let i = 0; i < dict.length; i++) {\n    const filteredKey = dict[i].value;\n    if (filteredKey.length < n) {\n      filteredDict[filteredKey] = filteredDict[filteredKey] + 1 || 1;\n    }\n  }\n  return filteredDict;\n}\n"]}
{"task_id": "MBJSP/278", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countFirstElements(testtup) {\n/**\n * * Write a function to find the element count that occurs before the record in the given tuple.\n */", "entry_point": "countFirstElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, [4, 6], 10];\nvar x0 = countFirstElements(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 9, [5, 7], 11];\nvar x1 = countFirstElements(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 15, 5, 8, [2, 3], 8];\nvar x2 = countFirstElements(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let result = 0;\n  for (let i = 0; i < testTup.length - 1; i++) {\n    if (testTup[i] < testTup[i + 1]) {\n      result = i + 1;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i]);\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    if (testTup[i] === 1) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < testTup.length; i++) {\n    if (testTup[i] === 1) {\n      count += 1;\n    }\n    else {\n      return count;\n    }\n  }\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(testTup[i]);\n  }\n  return result.length;\n}\n"]}
{"task_id": "MBJSP/279", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isNumDecagonal(n) {\n/**\n * * Write a function to find the nth decagonal number.\n */", "entry_point": "isNumDecagonal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = isNumDecagonal(arg00);\nvar v0 = 27;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = isNumDecagonal(arg10);\nvar v1 = 175;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = isNumDecagonal(arg20);\nvar v2 = 370;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const num = (n * (n + 1)) / 2;\n  return num;\n}\n", "\n  let dec = 1;\n  let d = 0;\n  while (dec < n) {\n    d = dec + d;\n    dec = d + dec;\n  }\n  return d;\n}\n", "\n  const decArr = [];\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    decArr.push(i * (i + 1) / 2);\n  }\n  for (let i = 0; i < decArr.length; i++) {\n    result.push(decArr[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  let n = Math.floor(n);\n  for (let i = 1; i <= n; i++) {\n    result.push(i * (n - i + 1));\n  }\n  return result[n];\n}\n", "\n    if (n === 0) {\n        return 0;\n    }\n    const x = Math.floor(Math.sqrt(6 * n + 1));\n    if (x * x === 6 * n + 1) {\n        return n;\n    } else {\n        return 0;\n    }\n}\n\n// P.38\n"]}
{"task_id": "MBJSP/280", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sequentialSearch(dlist, item) {\n/**\n * * Write a function to search an element in the given array by using sequential search.\n */", "entry_point": "sequentialSearch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [11, 23, 58, 31, 56, 77, 43, 12, 65, 19];\nvar arg01 = 31;\nvar x0 = sequentialSearch(arg00, arg01);\nvar v0 = [true, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 32, 45, 62, 35, 47, 44, 61];\nvar arg11 = 61;\nvar x1 = sequentialSearch(arg10, arg11);\nvar v1 = [true, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 10, 17, 19, 22, 39, 48, 56];\nvar arg21 = 48;\nvar x2 = sequentialSearch(arg20, arg21);\nvar v2 = [true, 6];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const arr = dlist.map(val => val.toString());\n  for (let i = 0; i < dlist.length - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      return arr[i];\n    }\n  }\n  return -1;\n}\n", "\n  let index = 0;\n  for (let i = 0; i < dlist.length; i++) {\n    if (dlist[i] === item) {\n      return i;\n    }\n    index++;\n  }\n  return -1;\n}\n", "\n  for (let i = 0; i < dlist.length; i++) {\n    if (dlist[i] === item) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "\n  for (let i = 0; i < dlist.length; i++) {\n    if (dlist[i] === item) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n// console.log(sequentialSearch([2, 3, 4, 6, 8, 10], 6));\n// console.log(sortNumericStrings([3, 6, 8, 9, 12]));\n// console.log(multiplyElements([3, 6, 8, 9, 12]));\n// console.log(sortNumericStrings([3, 6, 8, 9, 12, 5, 2]));\n\n```\n\n</section>\n\n## Challenge Seed\n<section id='challengeSeed'>\n\n<div id='js-seed'>\n\n```js\nlet nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n```\n\n</div>\n\n</section>\n\n## Solution\n<section id='solution'>\n\n```js\n// solution required\n```\n</section>\n", "\n  const itr = dlist.findIndex(d => d === item);\n  return itr;\n}\n"]}
{"task_id": "MBJSP/281", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction allUnique(testlist) {\n/**\n * * Write a JavaScript function to check if the elements of a given list are unique or not.\n */", "entry_point": "allUnique", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = allUnique(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1, 2];\nvar x1 = allUnique(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5];\nvar x2 = allUnique(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const hash = {};\n  for (let i = 0; i < testList.length; i++) {\n    if (hash[testList[i]] === undefined) hash[testList[i]] = true;\n  }\n  return!hash.length;\n}\n\n// Given an array of objects, write a ", "\n  return testlist.every(el => testlist.indexOf(el) === testlist.lastIndexOf(el));\n}\n", "\n    if (testlist.length < 2) {\n        return true;\n    } else {\n        for (let i = 0; i < testlist.length - 1; i++) {\n            if (testlist[i] === testlist[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    result.push(testlist[i]);\n  }\n  return result.every(el => testlist.indexOf(el) === -1);\n}\n", "\n  return testlist.filter(value => testlist.indexOf(value) === testlist.lastIndexOf(value)).every(value => value === undefined);\n}\n"]}
{"task_id": "MBJSP/282", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction subList(nums1, nums2) {\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */", "entry_point": "subList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = [4, 5, 6];\nvar x0 = subList(arg00, arg01);\nvar v0 = [-3, -3, -3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2];\nvar arg11 = [3, 4];\nvar x1 = subList(arg10, arg11);\nvar v1 = [-2, -2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [90, 120];\nvar arg21 = [50, 70];\nvar x2 = subList(arg20, arg21);\nvar v2 = [40, 50];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums1.map(num1 => nums2.indexOf(num1))\n}\n", "\n  // Write your code here\n  const nums1Arr = nums1.map(num => parseInt(num, 10));\n  const nums2Arr = nums2.map(num => parseInt(num, 10));\n  const result = nums1Arr.map((num1) => nums2Arr.map((num2) => num1 - num2)).reduce((acc, cur) => acc + cur, 0);\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums1.length; i++) {\n    result.push((nums1[i] - nums2[i]));\n  }\n  return result;\n}\n", "\n  const nums1copy = nums1.slice();\n  const nums2copy = nums2.slice();\n  const newList = map(nums1copy, num => nums2copy.indexOf(num) > -1? nums2copy.splice(nums2copy.indexOf(num), 1) : num);\n  return newList;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums1.length; i++) {\n    result.push(nums1[i] - nums2[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/283", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction validate(n) {\n/**\n * * Write a JavaScript function to check whether the frequency of each digit is less than or equal to the digit itself.\n */", "entry_point": "validate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1234;\nvar x0 = validate(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 51241;\nvar x1 = validate(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 321;\nvar x2 = validate(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const numbers = [...String(n)];\n  let strNum = numbers.map(num => parseInt(num, 10));\n  for (let i = 0; i < strNum.length; i++) {\n    const count = numbers.map(num => num.charAt(i)).reduce((a, b) => a + b);\n    if (count > strNum[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  ", "\n  return n % 10 === n % 100;\n}\n", "\n  let digits = 0;\n  for (let i = 0; i < n.length; i++) {\n    if (n.charCodeAt(i) >= 48 && n.charCodeAt(i) <= 57) {\n      digits++;\n    }\n  }\n  if (digits >= n.length) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  return n % 10 === n;\n}\n"]}
{"task_id": "MBJSP/284", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkElement(list, element) {\n/**\n * * Write a function to check whether all items of a list are equal to a given string.\n */", "entry_point": "checkElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"green\", \"orange\", \"black\", \"white\"];\nvar arg01 = \"blue\";\nvar x0 = checkElement(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = 7;\nvar x1 = checkElement(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"green\", \"green\", \"green\", \"green\"];\nvar arg21 = \"green\";\nvar x2 = checkElement(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== element) {\n      result.push(false);\n      break;\n    }\n  }\n  result.push(true);\n  return result;\n}\n", "\n  return list.every(x => x === element)\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== element) {\n      result.push(false);\n      break;\n    } else {\n      result.push(true);\n    }\n  }\n  return result;\n}\n", "\n  for (let i = 0; i < list.length; i++) {\n    if (list[i]!== element) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  return list.join('') === element;\n}\n"]}
{"task_id": "MBJSP/285", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction textMatchTwoThree(text) {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */", "entry_point": "textMatchTwoThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ac\";\nvar x0 = textMatchTwoThree(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"dc\";\nvar x1 = textMatchTwoThree(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abbbba\";\nvar x2 = textMatchTwoThree(arg20);\nvar v2 = \"Found a match!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.match(/\\ba\\b[\\s]{2,3}/gi);\n}\n", "\n  const match = /a.*b/;\n  const found = match.test(text);\n  return found;\n}\n", "\n  return text.match(/^(a|an)b(b)?$/);\n}\nconst stringArray = [\n    'The',\n    'cat',\n    'lived',\n    'in',\n    'The',\n    'cat',\n    'but',\n    'never',\n    'lived',\n    'in',\n    'The',\n    'cat',\n    '.'\n];\nconsole.log(stringArray.join(' '));\n\nconsole.log(stringArray.join(' ').match(/^(The|cat)liven(ed|ing)in(The|cat)(.)$/));\n/**\n * * Write a ", "\n  const matches = text.match(/(.*)a(.*)b(.*)/);\n  return matches;\n}\n", "\n  let textResult = [];\n  let counter = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === 'a') {\n      counter++;\n    }\n    if (counter === 2 && text[i + 1] === 'b') {\n      textResult.push(text[i - 1]);\n    }\n    counter = 0;\n  }\n  return textResult;\n}\n"]}
{"task_id": "MBJSP/286", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxSubArraySumRepeated(a, n, k) {\n/**\n * * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n */", "entry_point": "maxSubArraySumRepeated", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, -30, -1];\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = maxSubArraySumRepeated(arg00, arg01, arg02);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 10, 20];\nvar arg11 = 3;\nvar arg12 = 2;\nvar x1 = maxSubArraySumRepeated(arg10, arg11, arg12);\nvar v1 = 59;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-1, -2, -3];\nvar arg21 = 3;\nvar arg22 = 3;\nvar x2 = maxSubArraySumRepeated(arg20, arg21, arg22);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sum = 0;\n  const maxSum = 0;\n  let sum_of_sum = 0;\n  let last_index = 0;\n  let last_index_of_sum = 0;\n  let current_sum = 0;\n  let max_sum_subarray = 0;\n  let max_sum_subarray_start = 0;\n  let max_sum_subarray_end = 0;\n  let start = 0;\n  let end = 0;\n  const first_k_subarray = [];\n  const second_k_subarray = [];\n  for (let i = 0; i < k; i++) {\n    first_k_subarray.push(a[i]);\n  }\n  for (let i = k; i < n; i++) {\n    second_k_subarray.push(a[i]);\n  }\n  for (let i = 0; i < second_k_subarray.length; i++) {\n    sum_of_sum += second_k_subarray[i];\n    if (sum_of_sum >= maxSum) {\n      maxSum = sum_of_sum;\n      max_sum_subarray = sum_of_sum;\n      max_sum_subarray_start = last_index_of_sum;\n      max_sum_subarray_end = i;\n    }\n    if (sum_of_sum < 0) {\n      sum_of_sum = 0;\n      last_index_of_sum = i + 1;\n    }\n  }\n  for (let i = 0; i < first_k_subarray.length; i++) {\n    sum += first_k_subarray[i];\n    current_sum", "\n  // Write your code here\n  const repeat = [];\n  const repeatSum = [];\n  for (let i = 0; i < k; i++) {\n    repeat.push(a[i]);\n    repeatSum.push(a[i]);\n  }\n  let maxSum = 0;\n  for (let i = 0; i < a.length - k; i++) {\n    maxSum += a[i + k];\n    if (maxSum < a[i]) {\n      maxSum = a[i];\n    }\n  }\n  return maxSum;\n}\n", "\n  const kArray = [];\n  for (let i = 0; i < k; i++) {\n    kArray.push(a[i]);\n  }\n  const largestSum = a[0] + kArray[0];\n  for (let i = 1; i < n; i++) {\n    if (a[i] + kArray[i - 1] > largestSum) {\n      largestSum = a[i] + kArray[i - 1];\n    }\n  }\n  return largestSum;\n}\n", "\n  let maxSum = 0;\n  let currSum = 0;\n  let startIndex = -1;\n  let endIndex = -1;\n  let windowStart = -1;\n  let windowEnd = -1;\n  for (let i = 0; i < n; i++) {\n    currSum += a[i];\n    while (currSum > n && windowStart >= 0) {\n      currSum -= a[windowStart];\n      windowStart--;\n    }\n    if (currSum > maxSum) {\n      maxSum = currSum;\n      startIndex = windowStart + 1;\n      endIndex = i;\n    }\n    while (windowEnd < n - 1 && currSum == n && windowStart < 0) {\n      currSum -= a[windowEnd];\n      windowEnd++;\n    }\n    if (currSum == n) {\n      windowStart = startIndex;\n      windowEnd = endIndex;\n    }\n  }\n  return maxSum;\n}\n", "\n  // Write your code here\n  let maxSum = 0;\n  let currentSum = 0;\n  let subSum = 0;\n  const repeatArray = k * Array(n);\n  let start = 0;\n  let end = 0;\n  let lastrepeat = 0;\n  let repeatcounter = 0;\n  for (let i = 0; i < repeatArray.length; i++) {\n    repeatArray[i] = a[i];\n  }\n  for (let i = 0; i < repeatArray.length; i++) {\n    for (let j = 0; j < repeatArray.length; j++) {\n      if (repeatArray[j] === a[i]) {\n        repeatcounter++;\n        end = j;\n        if (repeatcounter === k) {\n          for (let k = i; k < repeatArray.length; k++) {\n            subSum += repeatArray[k];\n          }\n          if (currentSum <= subSum && currentSum > maxSum) {\n            maxSum = currentSum;\n            start = lastrepeat;\n            end = i;\n          }\n          repeatcounter = 0;\n          currentSum = subSum;\n        }\n      }\n    }\n    lastrepeat = start;\n    start = end;\n    end = start;\n    subSum = 0;\n  }\n  return maxSum;\n}\n"]}
{"task_id": "MBJSP/287", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction squareSum(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of first n even natural numbers.\n */", "entry_point": "squareSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = squareSum(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = squareSum(arg10);\nvar v1 = 56;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squareSum(arg20);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n * (n + 1) * (n + 2) / 6;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i * i);\n  }\n  return result;\n}\n", "\n  const squareSum = (arr) => {\n    const sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] % 2 === 0) {\n        sum += arr[i] * arr[i];\n      }\n    }\n    return sum;\n  };\n  const arr = Array(n).fill(0).map((_, i) => i + 1);\n  return squareSum(arr);\n}\n", "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum = sum + (i + 1) * (i + 1);\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/288", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction modularInverse(arr, n, p) {\n/**\n * * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n */", "entry_point": "modularInverse", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 6, 4, 5];\nvar arg01 = 4;\nvar arg02 = 7;\nvar x0 = modularInverse(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 8, 12, 12];\nvar arg11 = 5;\nvar arg12 = 13;\nvar x1 = modularInverse(arg10, arg11, arg12);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 5];\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = modularInverse(arg20, arg21, arg22);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const arrCopy = arr.slice();\n  for (let i = 0; i < arrCopy.length; i++) {\n    arrCopy[i] = arrCopy[i] * n % p;\n  }\n  let count = 0;\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n    const ans = [];\n    for (let i = 0; i < arr.length; i++) {\n        let inv = gcd(arr[i], n, p);\n        if (inv === 1) ans.push(i);\n    }\n    return ans;\n}\n", "\n  let count = 0;\n  const inverseCount = n.map((modularInv, i) => {\n    if (modularInv === 1) count = count + 1;\n    return count;\n  });\n  return inverseCount;\n}\nconst numsStr = [\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"];\nconst sortedNumbers = sortNumericStrings(numsStr);\nconst numsStrMultiply = [\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"];\nconst multiplication = multiplyElements(sortedNumbers);\nconst modularInverse = modularInverse(multiplication, 2, 3);\nconsole.log(\"numbers=\", numsStr);\nconsole.log(\"sortedNumbers=\", sortedNumbers);\nconsole.log(\"numsStrMultiply=\", numsStrMultiply);\nconsole.log(\"multiplication=\", multiplication);\nconsole.log(\"modularInverse=\", modularInverse);\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let flag = 0;\n    for (let j = 0; j < result.length; j++) {\n      if (result[j] == arr[i] && flag == 0) {\n        result.push(arr[i]);\n        flag = 1;\n        break;\n      }\n    }\n  }\n  for (let i = 0; i < result.length; i++) {\n    result[i] = result[i] % p;\n  }\n  return result;\n}\n", "\n  let modInverse = 0;\n  const count = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (count[arr[i]]) {\n      count[arr[i]] = count[arr[i]] + 1;\n    } else {\n      count[arr[i]] = 1;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (count[arr[i]] === 1 && arr[i] % p === 1) {\n      modInverse = arr[i];\n      break;\n    }\n  }\n  return modInverse % p;\n}\n"]}
{"task_id": "MBJSP/289", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction oddDays(n) {\n/**\n * * Write a JavaScript function to calculate the number of odd days in a given year.\n */", "entry_point": "oddDays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 100;\nvar x0 = oddDays(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 50;\nvar x1 = oddDays(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 75;\nvar x2 = oddDays(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const year = new Date().getFullYear();\n  return year % 2 === 1? n : 0;\n}\n", "\n  const year = new Date().getFullYear();\n  const calendar = new Date(year, 1, 1).getDay();\n  return (calendar >= 0 && calendar <= 6)? n - 1 : n;\n}\n", "\n  const days = [\n    { month: 'January', day: 1, date: 1 },\n    { month: 'February', day: 28, date: 1 },\n    { month: 'March', day: 31, date: 1 },\n    { month: 'April', day: 30, date: 1 },\n    { month: 'May', day: 31, date: 1 },\n    { month: 'June', day: 30, date: 1 },\n    { month: 'July', day: 31, date: 1 },\n    { month: 'August', day: 31, date: 1 },\n    { month: 'September', day: 30, date: 1 },\n    { month: 'October', day: 31, date: 1 },\n    { month: 'November', day: 30, date: 1 },\n    { month: 'December', day: 31, date: 1 },\n  ];\n  const isLeapYear = (y) => y % 4 === 0 && y % 100!== 0 || y % 400 === 0;\n  const calculateDays = (y) => days.filter(day => day.date <= y).reduce((acc, day) => acc + day.date, 0);\n  const year = n + 1900;\n  return calculateDays(year) - calculateDays(year - 1) + 1;\n}\n", "\n  return n % 2!== 0;\n}\n", "\n  const year = new Date().getFullYear();\n  if (year % 4!== 0) {\n    return n;\n  }\n  else if (year % 100!== 0) {\n    return n;\n  }\n  else if (year % 400!== 0) {\n    return n;\n  }\n  else {\n    return n;\n  }\n}\n"]}
{"task_id": "MBJSP/290", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxLength(list1) {\n/**\n * * Write a function to find the list of lists with maximum length.\n */", "entry_point": "maxLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = maxLength(arg00);\nvar v0 = [3, [13, 15, 17]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [5, 7], [10, 12, 14, 15]];\nvar x1 = maxLength(arg10);\nvar v1 = [4, [10, 12, 14, 15]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5], [15, 20, 25]];\nvar x2 = maxLength(arg20);\nvar v2 = [3, [15, 20, 25]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (result.length < list1[i].length) {\n      result.length = list1[i].length;\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  const max = 0;\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    const subList = list1[i];\n    for (let j = 0; j < subList.length; j++) {\n      if (subList[j].length > max) {\n        max = subList[j].length;\n        result = [subList];\n      } else if (subList[j].length === max) {\n        result.push(subList);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const list1MaxLength = [];\n  for (let i = 0; i < list1.length; i++) {\n    list1MaxLength.push([]);\n    for (let j = 0; j < list1[i].length; j++) {\n      list1MaxLength[i].push(list1[i][j]);\n    }\n  }\n  const maxLength = [];\n  for (let i = 0; i < list1MaxLength.length; i++) {\n    maxLength.push(0);\n    for (let j = 0; j < list1MaxLength[i].length; j++) {\n      if (maxLength[i] < list1MaxLength[i][j].length) {\n        maxLength[i] = list1MaxLength[i][j].length;\n      }\n    }\n  }\n  return maxLength;\n}\n", "\n  const maxlength = list1.reduce((a, b) => a.length > b.length? a.length : b.length);\n  return list1.filter((a, index, arr) => a.length === maxlength);\n}\n", "\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    let count = 0;\n    for (let j = 0; j < list1[i].length; j++) {\n      count++;\n    }\n    if (count > result.length) {\n      result = [list1[i]];\n    } else if (count === result.length) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/291", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countNoOfWays(n, k) {\n/**\n * * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n */", "entry_point": "countNoOfWays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = countNoOfWays(arg00, arg01);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar x1 = countNoOfWays(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 4;\nvar x2 = countNoOfWays(arg20, arg21);\nvar v2 = 228;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const ways = [];\n  const count = [];\n  for (let i = 0; i <= k; i++) {\n    ways[i] = 0;\n    count[i] = 0;\n  }\n  for (let i = 0; i < n; i++) {\n    ways[i] = 1;\n    count[i] = 1;\n  }\n  for (let i = 1; i < k; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!= j) {\n        ways[i] += ways[j];\n        count[i] += count[j];\n      }\n    }\n  }\n  return ways[k - 1] - count[k - 1];\n}\n", "\n  return factorial(n) / (factorial(k) * factorial(n - k));\n}\n", "\n  const colors = [0, 1, 2, 3, 4];\n  const count = {};\n  for (let i = 0; i < colors.length; i++) {\n    count[colors[i]] = count[colors[i]] + (i === colors.length - 1? 1 : 0);\n  }\n  const n = n - 1;\n  const k = k - 1;\n  return (n >= 1 && k >= 1 && n <= k)? (count[k] - count[n] + count[0]) : -1;\n}\n", "\n  let ans = 0;\n  let dp = [];\n  for (let i = 0; i <= k; i++) {\n    dp.push(0);\n  }\n  ", "\n  // Write your code here\n  let count = 0;\n  "]}
{"task_id": "MBJSP/292", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction find(n, m) {\n/**\n * * Write a JavaScript function to find quotient of two numbers.\n */", "entry_point": "find", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 3;\nvar x0 = find(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar x1 = find(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar arg21 = 5;\nvar x2 = find(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const count = {};\n  for (let i = 0; i < n; i++) {\n    count[m[i]] = count[m[i]] + 1 || 1;\n    if (count[m[i]] === n) {\n      result.push(m[i]);\n      count[m[i]] = 0;\n    }\n  }\n  return result;\n}\n", "\n  return n / m;\n}\n", "\n  if (n === 0) return m;\n  return find(n - 1, m);\n}\n", "\n  let quotient = n / m;\n  return quotient;\n}\nconst colorStr = '#F0F0F0';\n", "\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result = result + i;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/293", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction othersideRightangle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */", "entry_point": "othersideRightangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 7;\nvar arg01 = 8;\nvar x0 = othersideRightangle(arg00, arg01);\nvar v0 = 10.63014581273465;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 4;\nvar x1 = othersideRightangle(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = 15;\nvar x2 = othersideRightangle(arg20, arg21);\nvar v2 = 16.55294535724685;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const perimeter = (w + h) * 2;\n  return perimeter / 2;\n}\n", "\n  const hypotenuse = Math.sqrt(w * w + h * h);\n  const x = h / hypotenuse;\n  const y = w / hypotenuse;\n  return [x, y, hypotenuse];\n}\n", "\n  const p = (w + h) / 2;\n  return Math.sqrt(Math.pow(p, 2) + Math.pow(w - h, 2));\n}\n", "\n  const x = w / 2;\n  const y = h / 2;\n  const a = x + y;\n  const b = y - x;\n  return Math.sqrt(a * a + b * b);\n}\n", "\n  const trianglePerimeter = w + h + w;\n  return trianglePerimeter / 2;\n}\n"]}
{"task_id": "MBJSP/294", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxVal(listval) {\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */", "entry_point": "maxVal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", 3, 2, 4, 5, \"version\"];\nvar x0 = maxVal(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", 15, 20, 25];\nvar x1 = maxVal(arg10);\nvar v1 = 25;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", 30, 20, 40, 50, \"version\"];\nvar x2 = maxVal(arg20);\nvar v2 = 50;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.max(...listVal);\n}\n", "\n  const max = listval[0];\n  for (let i = 0; i < listval.length; i++) {\n    if (listval[i] > max) {\n      max = listval[i];\n    }\n  }\n  return max;\n}\n", "\n    // Write your code here\n    return Math.max.apply(null, listval);\n}\n", "\n  const maxVal = Math.max.apply(null, listval);\n  return maxVal;\n}\n", "\n  // Write your code here\n  return listval.reduce((max, val) => val > max? val : max);\n}\n"]}
{"task_id": "MBJSP/295", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumDiv(number) {\n/**\n * * Write a function to return the sum of all divisors of a number.\n */", "entry_point": "sumDiv", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = sumDiv(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = sumDiv(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = sumDiv(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let temp = number;\n  let sum = 0;\n  let div = 2;\n  let cdiv = 0;\n  while (temp > 1) {\n    if (temp % div == 0) {\n      temp = temp / div;\n      sum += div;\n    } else {\n      div++;\n    }\n  }\n  return sum;\n}\n", "\n  const result = [];\n  for (let i = 1; i <= number; i++) {\n    if (number % i === 0) {\n      result.push(i);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n}\n", "\n  return number.reduce((accumulator, currentValue) => (currentValue > 1) && (number % currentValue === 0)? accumulator + currentValue : accumulator, 1);\n}\n", "\n  let total = 0;\n  for (let i = 1; i <= number; i++) {\n    if (number % i === 0) {\n      total += i;\n    }\n  }\n  return total;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= number; i++) {\n    if (number % i === 0) {\n      sum = sum + i;\n    }\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/296", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getInvCount(arr, n) {\n/**\n * * Write a JavaScript function to count inversions in an array.\n */", "entry_point": "getInvCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 20, 6, 4, 5];\nvar arg01 = 5;\nvar x0 = getInvCount(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1];\nvar arg11 = 3;\nvar x1 = getInvCount(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 5, 6, 1];\nvar arg21 = 5;\nvar x2 = getInvCount(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let invcount = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                invcount++;\n            }\n        }\n    }\n    return invcount;\n}\n", "\n  let invcount = 0;\n  const merge = (arr1, arr2) => {\n    const result = [];\n    for (let i = 0; i < arr1.length; i++) {\n      for (let j = 0; j < arr2.length; j++) {\n        if (arr1[i] > arr2[j]) {\n          result.push(arr2[j]);\n          invcount++;\n        } else {\n          result.push(arr1[i]);\n        }\n      }\n    }\n    return result;\n  };\n  const mergesort = (arr) => {\n    if (arr.length < 2) {\n      return arr;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const arr1 = mergesort(arr.slice(0, mid));\n    const arr2 = mergesort(arr.slice(mid, arr.length));\n    return merge(arr1, arr2);\n  };\n  const sortedArr = mergesort(arr);\n  return invcount;\n}\n", "\n    let invCount = 0;\n    for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                invCount++;\n            }\n        }\n    }\n    return invCount;\n}\n", "\n  const invCount = 0;\n  const arrLen = arr.length;\n  for (let i = 0; i < arrLen - 1; i++) {\n    for (let j = i + 1; j < arrLen; j++) {\n      if (arr[i] > arr[j]) {\n        invCount++;\n      }\n    }\n  }\n  return invCount;\n}\n\n", "\n  // Write your code here\n  let invCount = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        invCount++;\n      }\n    }\n  }\n  return invCount;\n}\n"]}
{"task_id": "MBJSP/297", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction flattenList(list1) {\n/**\n * * Write a function to flatten a given nested list structure.\n */", "entry_point": "flattenList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]];\nvar x0 = flattenList(arg00);\nvar v0 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]];\nvar x1 = flattenList(arg10);\nvar v1 = [10, 20, 40, 30, 56, 25, 10, 20, 33, 40];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nvar x2 = flattenList(arg20);\nvar v2 = [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push.apply(result, list1[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  const flattenList = ", "\n  let flattened = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i].length) {\n      flattened = flattened.concat(flattenList(list1[i]));\n    } else {\n      flattened.push(list1[i]);\n    }\n  }\n  return flattened;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] instanceof Array) {\n      for (let j = 0; j < list1[i].length; j++) {\n        result.push(list1[i][j]);\n      }\n    } else {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result = result.concat(flattenList(list1[i]));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/298", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction intersectionNestedLists(l1, l2) {\n/**\n * * Write a function to find the nested list elements which are present in another list.\n */", "entry_point": "intersectionNestedLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar arg01 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]];\nvar x0 = intersectionNestedLists(arg00, arg01);\nvar v0 = [[12], [7, 11], [1, 5, 8]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 3, 1], [4, 5], [6, 8]];\nvar arg11 = [[4, 5], [6, 8]];\nvar x1 = intersectionNestedLists(arg10, arg11);\nvar v1 = [[], []];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"john\", \"amal\", \"joel\", \"george\"];\nvar arg21 = [[\"john\"], [\"jack\", \"john\", \"mary\"], [\"howard\", \"john\"], [\"jude\"]];\nvar x2 = intersectionNestedLists(arg20, arg21);\nvar v2 = [[\"john\"], [\"john\"], [\"john\"], []];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    const l1elt = l1[i];\n    if (Array.isArray(l1elt)) {\n      const tempResult = intersectionNestedLists(l1elt, l2);\n      if (!tempResult.some(x => x === undefined)) {\n        result.push(l1elt);\n      }\n    } else if (l1elt.indexOf(l2)!== -1) {\n      result.push(l1elt);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  let l1Index;\n  let l2Index;\n  for (let i = 0; i < l1.length; i++) {\n    l1Index = l1.indexOf(l1[i]);\n    if (l1Index > -1) {\n      for (let j = 0; j < l2.length; j++) {\n        l2Index = l2.indexOf(l2[j]);\n        if (l2Index > -1 && l2[j]!== l1[i]) {\n          result.push(l2[j]);\n        }\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i] in l2) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (l1.indexOf(l2[i])!== -1) {\n      result.push(l2[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/299", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxAggregate(stdata) {\n/**\n * * Write a function to calculate the maximum aggregate from the list of tuples.\n */", "entry_point": "maxAggregate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]];\nvar x0 = maxAggregate(arg00);\nvar v0 = [\"Juan Whelan\", 212];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]];\nvar x1 = maxAggregate(arg10);\nvar v1 = [\"Juan Whelan\", 72];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]];\nvar x2 = maxAggregate(arg20);\nvar v2 = [\"Sabah Colley\", 70];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const max = stdata.reduce((max, test) => {\n    return max < test? test : max;\n  });\n  return max;\n}\n", "\n  const max = stdata[0];\n  for (let i = 0; i < stdata.length; i++) {\n    if (max < stdata[i]) {\n      max = stdata[i];\n    }\n  }\n  return max;\n}\n", "\n  const max = stdata.reduce((max, current) => {\n    if (max[0] < current[0]) max = current;\n    return max;\n  });\n  return max;\n}\n", "\n  return stdata.reduce((a, b) => a > b? a : b);\n}\n", "\n  return stdata.map(maxAggregate).reduce((a, b) => a > b? a : b);\n}\n"]}
{"task_id": "MBJSP/300", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countBinarySeq(n) {\n/**\n * * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n */", "entry_point": "countBinarySeq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = countBinarySeq(arg00);\nvar v0 = 2.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = countBinarySeq(arg10);\nvar v1 = 6.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = countBinarySeq(arg20);\nvar v2 = 20.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const seq = [];\n  for (let i = 0; i <= n; i++) {\n    const nBits = binarySeq(i);\n    for (let j = 0; j < nBits.length; j++) {\n      const nBitsSum = nBits[j] + nBits[nBits.length - 1 - j];\n      if (seq.indexOf(nBitsSum) === -1) {\n        seq.push(nBitsSum);\n      }\n    }\n  }\n  return seq.length;\n}\n", "\n  let nums = 0;\n  while (n > 0) {\n    nums = nums * 2 + 1;\n    n--;\n  }\n  let result = 0;\n  for (let i = 1; i <= nums; i++) {\n    for (let j = i; j <= nums; j++) {\n      const tup = j - i + 1;\n      if ((tup - 1) === (nums - 1)) {\n        result++;\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = {};\n  for (let i = 0; i <= (n + 1); i++) {\n    for (let j = 0; j <= (n + 1); j++) {\n      const sum = getSum(i, j);\n      if (result[sum]) {\n        result[sum] = result[sum] + 1;\n      } else {\n        result[sum] = 1;\n      }\n    }\n  }\n  return result;\n}\n", "\n  const binarySequenceCount = [];\n  const bs = [];\n  let count = 0;\n  binarySequenceCount.push(count);\n  for (let i = 1; i <= n; i++) {\n    bs.push(2 ** i);\n  }\n  binarySequenceCount.push(count);\n  for (let i = 1; i <= n; i++) {\n    count = 0;\n    for (let j = 0; j < bs.length; j++) {\n      count += bs[j] * bs[j - i];\n    }\n    binarySequenceCount.push(count);\n  }\n  return binarySequenceCount;\n}\nconst getCode = {\n  /**\n   * * Write a ", "\n  let result = 0;\n  for (let i = 0; i <= n; i++) {\n    const arr = generateSequence(i, n);\n    const sum = calculateSequenceSum(arr);\n    if (sum == n) {\n      result++;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/301", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction dictDepth(d) {\n/**\n * * Write a function to find the depth of a dictionary.\n */", "entry_point": "dictDepth", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"a\"':1,'\"b\"':{'\"c\"':{'\"d\"':{}}}};\nvar x0 = dictDepth(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"a\"':1,'\"b\"':{'\"c\"':\"python\"}};\nvar x1 = dictDepth(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {\"1\":\"Sun\",\"2\":{\"3\":{\"4\":\"Mon\"}}};\nvar x2 = dictDepth(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const keys = Object.keys(d);\n  return Math.max(...keys);\n}\n", "\n    // Write your code here\n    let result = 0;\n    for (let key in d) {\n        result++;\n    }\n    return result;\n}\n", "\n  // Write your code here\n  if (typeof d === 'undefined') return 0;\n  const result = [];\n  for (let i = 0; i < Object.keys(d).length; i++) {\n    const k = Object.keys(d)[i];\n    const v = d[k];\n    const depth = dictDepth(v);\n    result.push(depth + 1);\n  }\n  return result.sort((a, b) => a - b);\n}\n", "\n  if (d) {\n    const result = 1 + dictDepth(d.next);\n    return result;\n  }\n}\n", "\n  const maxdepth = Math.max(...d.values());\n  return maxdepth;\n}\n"]}
{"task_id": "MBJSP/302", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction setBitNumber(n) {\n/**\n * * Write a JavaScript function to find the most significant bit number which is also a set bit.\n */", "entry_point": "setBitNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = setBitNumber(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = setBitNumber(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 18;\nvar x2 = setBitNumber(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const b = Math.pow(2, n);\n  return Math.pow(2, n - 1) + 1;\n}\n", "\n  let result = 0;\n  if (n == 0) {\n    result = 1;\n  }\n  while (n) {\n    n = n & (n - 1);\n    result++;\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 31; i >= 0; i--) {\n    if ((n & (1 << i)) > 0) {\n      result += 1 << i;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(1);\n  }\n  result[0] = 0;\n  return result;\n}\n", "\n  let current = n;\n  let result = 0;\n  while (current > 0) {\n    result += (current % 2);\n    current = Math.floor(current / 2);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/303", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction solve(a, n) {\n/**\n * * Write a JavaScript function to check whether the count of inversion of two types are same or not.\n */", "entry_point": "solve", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 0, 2];\nvar arg01 = 3;\nvar x0 = solve(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 0];\nvar arg11 = 3;\nvar x1 = solve(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar arg21 = 3;\nvar x2 = solve(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const numbers = a.split('').sort((a, b) => a - b);\n  if (numbers.length % 2 === 1) {\n    return numbers.length % 3 === 1 && numbers.length % 6 === 0;\n  } else {\n    return numbers.length % 3 === 0 && numbers.length % 6 === 0;\n  }\n}\n", "\n  const arr = [];\n  for (let i = 0; i < a.length; i++) {\n    arr.push(a[i]);\n  }\n  let c = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > arr[i]) {\n        c++;\n      }\n    }\n  }\n  if (c === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "\n    const getInv = (a, n) => a.reduce((total, item) => total + (item > n? 1 : 0), 0);\n    return getInv(a, n) === getInv(a.reverse(), n);\n}\n", "\n  const numberOfInversions = (arr1, arr2) => {\n    return arr1.filter((item1, index1) => arr2.indexOf(item1) > index1).length + arr2.filter((item2, index2) => arr1.indexOf(item2) > index2).length;\n  };\n  const answer = (a, n) => {\n    const arr1 = a.map(() => null);\n    const arr2 = a.map(() => null);\n    for (let i = 0; i < a.length; i++) {\n      arr1[i] = i;\n      arr2[a[i]] = i;\n    }\n    return numberOfInversions(arr1, arr2) == n;\n  };\n  return answer(a, n);\n}\n", "\n    "]}
{"task_id": "MBJSP/304", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findElement(arr, ranges, rotations, index) {\n/**\n * * Write a JavaScript function to find element at a given index after number of rotations.\n */", "entry_point": "findElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [[0, 2], [0, 3]];\nvar arg02 = 2;\nvar arg03 = 1;\nvar x0 = findElement(arg00, arg01, arg02, arg03);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = [[0, 1], [0, 2]];\nvar arg12 = 1;\nvar arg13 = 2;\nvar x1 = findElement(arg10, arg11, arg12, arg13);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [[0, 1], [0, 2]];\nvar arg22 = 1;\nvar arg23 = 1;\nvar x2 = findElement(arg20, arg21, arg22, arg23);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < ranges.length; j++) {\n      if (arr[i] == index && j < rotations) {\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let r = Math.floor(index / ranges);\n  let start = r * ranges;\n  let end = start + ranges;\n  let firstElement = arr[start];\n  let lastElement = arr[end - 1];\n  if (rotations === 1) {\n    return firstElement;\n  } else if (rotations === 2) {\n    return lastElement;\n  } else {\n    let k = index - start;\n    let currValue = (rotations - 1) * (arr[end - k - 1] + arr[end - k]);\n    if (currValue >= firstElement && currValue <= lastElement) {\n      return currValue;\n    } else {\n      return findElement(arr, ranges, rotations - 1, start);\n    }\n  }\n}\n", "\n    const result = [];\n    for (let i = 0; i < ranges.length; i++) {\n        const temp = arr.slice();\n        rotations[index] = ranges[i];\n        rotations.sort(", "\n    let result = null;\n    for (let i = index; i < rotations; i++) {\n        let index = i + ranges[i];\n        if (index >= 0 && index < arr.length) {\n            result = arr[index];\n            break;\n        }\n    }\n    return result;\n}\n\n// Write your code here\n", "\n  const start = arr[0];\n  const end = arr[arr.length - 1];\n  const result = [];\n  const resultWithStart = [];\n  const resultWithEnd = [];\n  for (let i = 0; i < ranges.length; i++) {\n    const startRange = ranges[i][0];\n    const endRange = ranges[i][1];\n    if (startRange === start && endRange === end) {\n      return index;\n    }\n  }\n  for (let i = 0; i < rotations.length; i++) {\n    const startRotation = rotations[i][0];\n    const endRotation = rotations[i][1];\n    if (startRotation === start && endRotation === end) {\n      return index;\n    }\n  }\n  return 0;\n}\n"]}
{"task_id": "MBJSP/305", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction startWithp(words) {\n/**\n * * Write a function to match two words from a list of words starting with letter 'p'.\n */", "entry_point": "startWithp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python PHP\", \"Java JavaScript\", \"c c++\"];\nvar x0 = startWithp(arg00);\nvar v0 = [\"Python\", \"PHP\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python Programming\", \"Java Programming\"];\nvar x1 = startWithp(arg10);\nvar v1 = [\"Python\", \"Programming\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Pqrst Pqr\", \"qrstuv\"];\nvar x2 = startWithp(arg20);\nvar v2 = [\"Pqrst\", \"Pqr\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].startsWith(\"p\")) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "\n  return words.map(word => word.substring(1, word.length)).filter(word => word.substring(0, 1) === 'p');\n}\n", "\n  const word = words.filter(w => w.toLowerCase().startsWith(\"p\"));\n  return word;\n}\n", "\n  return words.filter(w => w[0] === 'p');\n}\n", "\n  return words.filter(word => word[0] === 'p');\n}\n"]}
{"task_id": "MBJSP/306", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxSumIncreasingSubseq(a, n, index, k) {\n/**\n * * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n */", "entry_point": "maxSumIncreasingSubseq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 101, 2, 3, 100, 4, 5];\nvar arg01 = 7;\nvar arg02 = 4;\nvar arg03 = 6;\nvar x0 = maxSumIncreasingSubseq(arg00, arg01, arg02, arg03);\nvar v0 = 11;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 101, 2, 3, 100, 4, 5];\nvar arg11 = 7;\nvar arg12 = 2;\nvar arg13 = 5;\nvar x1 = maxSumIncreasingSubseq(arg10, arg11, arg12, arg13);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 15, 19, 21, 26, 28, 31];\nvar arg21 = 7;\nvar arg22 = 2;\nvar arg23 = 4;\nvar x2 = maxSumIncreasingSubseq(arg20, arg21, arg22, arg23);\nvar v2 = 71;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const maxSum = [];\n  const memo = [];\n  for (let i = 0; i <= n; i++) {\n    maxSum.push(0);\n    memo.push(null);\n  }\n  const ", "\n  let result = {\n    s: 0,\n    i: 0,\n    j: 0,\n    sum: 0,\n    len: 0\n  };\n  let b = {\n    s: 0,\n    i: 0,\n    j: 0,\n    sum: 0,\n    len: 0\n  };\n  if (k <= a[index - 1]) {\n    b.s = 0;\n    b.i = index;\n    b.j = index;\n    b.sum = a[index - 1];\n    b.len = 1;\n    result = b;\n  }\n  if (index == n) {\n    return result;\n  }\n  if (a[index] <= a[index - 1]) {\n    if (index == n - 1) {\n      return result;\n    }\n    b.s = result.sum;\n    b.i = result.i;\n    b.j = index;\n    b.sum = a[index] + result.sum;\n    b.len = result.len + 1;\n    result = b;\n  }\n  for (let i = index + 1; i < n; i++) {\n    if (a[i - 1] <= a[index - 1]) {\n      continue;\n    }\n    if (k <= a[i]) {\n      b.s = result.sum;\n      b.i = result.i;\n      b.j = i;\n      b.sum = a[i] + result.sum;\n      b.len = result.len + 1;\n      result = b;\n    }\n  }\n  return result;\n}\n", "\n  const prefix = a.slice(0, index + 1);\n  const suffix = a.slice(index + 1, n + 1);\n  const dp = [];\n  for (let i = 0; i <= n; i++) {\n    dp[i] = [];\n    for (let j = 0; j <= n; j++) {\n      dp[i][j] = -1;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i <= j) {\n        const num = prefix[i - 1] + suffix[j];\n        if (j >= k) {\n          const maximum = num + dp[i - 1][j - k];\n          if (maximum > dp[i][j]) {\n            dp[i][j] = maximum;\n          }\n        } else {\n          dp[i][j] = num;\n        }\n      }\n    }\n  }\n  return dp[index][n];\n}\n", "\n  let result = 0;\n  for (let i = 0; i < k; i++) {\n    result = Math.max(result, a[index + i]);\n  }\n  return result;\n}\n", "\n  if (index >= n) {\n    return a;\n  }\n  let maxSum = 0;\n  for (let j = index; j < n; j++) {\n    if (j < k) {\n      maxSum = Math.max(maxSum, a[j] + maxSumIncreasingSubseq(a, n, j + 1, k));\n    }\n  }\n  return maxSum;\n}\n"]}
{"task_id": "MBJSP/307", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction colonTuplex(tuplex, m, n) {\n/**\n * * Write a function to get a colon of a tuple.\n */", "entry_point": "colonTuplex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"HELLO\", 5, [], true];\nvar arg01 = 2;\nvar arg02 = 50;\nvar x0 = colonTuplex(arg00, arg01, arg02);\nvar v0 = [\"HELLO\", 5, [50], true];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"HELLO\", 5, [], true];\nvar arg11 = 2;\nvar arg12 = 100;\nvar x1 = colonTuplex(arg10, arg11, arg12);\nvar v1 = [\"HELLO\", 5, [100], true];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"HELLO\", 5, [], true];\nvar arg21 = 2;\nvar arg22 = 500;\nvar x2 = colonTuplex(arg20, arg21, arg22);\nvar v2 = [\"HELLO\", 5, [500], true];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return tuplex.map((tup) => tup.split('').map((char, index) => {\n    return index % n === m - 1? char : '';\n  })).map((str) => str.join(''));\n}\n", "\n  const str = '';\n  for (let i = 0; i < tuplex.length; i++) {\n    if (i === tuplex.length - 1) {\n      str += tuplex[i];\n    } else {\n      str += tuplex[i] + n;\n    }\n  }\n  return str + m;\n}\n", "\n  let result = \"\";\n  let i = 0;\n  let j = 0;\n  while (j < n) {\n    while (i < m) {\n      result += tuplex[j][i] + \" \";\n      i++;\n    }\n    i = 0;\n    j++;\n  }\n  return result;\n}\n", "\n  const result = [];\n  const counter = {};\n  for (let i = 0; i < tuplex.length; i++) {\n    counter[tuplex[i]] = counter[tuplex[i]] + 1 || 1;\n    if (counter[tuplex[i]] === m) {\n      result.push(tuplex[i]);\n      counter[tuplex[i]] = 0;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      result.push(tuplex[i][j]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/308", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction largeProduct(nums1, nums2, n) {\n/**\n * * Write a function to find the specified number of largest products from two given lists.\n */", "entry_point": "largeProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6];\nvar arg01 = [3, 6, 8, 9, 10, 6];\nvar arg02 = 3;\nvar x0 = largeProduct(arg00, arg01, arg02);\nvar v0 = [60, 54, 50];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6];\nvar arg11 = [3, 6, 8, 9, 10, 6];\nvar arg12 = 4;\nvar x1 = largeProduct(arg10, arg11, arg12);\nvar v1 = [60, 54, 50, 48];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [3, 6, 8, 9, 10, 6];\nvar arg22 = 5;\nvar x2 = largeProduct(arg20, arg21, arg22);\nvar v2 = [60, 54, 50, 48, 45];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const nums1Str = nums1.map(num => num.toString());\n  const nums2Str = nums2.map(num => num.toString());\n  const arr1 = nums1Str.sort((a, b) => b - a);\n  const arr2 = nums2Str.sort((a, b) => b - a);\n  const maxLen1 = arr1.length - 1;\n  const maxLen2 = arr2.length - 1;\n  const result = [];\n  for (let i = 0; i < maxLen1; i++) {\n    for (let j = 0; j < maxLen2; j++) {\n      const product = arr1[i] * arr2[j];\n      result.push({ product, nums1, nums2 });\n      if (product > n) {\n        return result;\n      }\n    }\n  }\n  return result;\n}\nconst nums1 = [1, 2, 3, 4, 5];\nconst nums2 = [6, 7, 8, 9, 10];\nconst n = 20;\nconst result = largeProduct(nums1, nums2, n);\nconsole.log(result);\n```\n\n</section>\n", "\n  const nums1sorted = sortNumericStrings(nums1);\n  const nums2sorted = sortNumericStrings(nums2);\n  let largestProduct = 0;\n  for (let i = 0; i < nums1sorted.length; i++) {\n    const num1 = nums1sorted[i];\n    for (let j = 0; j < nums2sorted.length; j++) {\n      const num2 = nums2sorted[j];\n      const product = num1 * num2;\n      if (product > largestProduct) {\n        largestProduct = product;\n      }\n    }\n  }\n  return largestProduct;\n}\nconst nums = [\"abc\", \"def\", \"ghi\", \"jkl\"];\nconst nums2 = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\"];\nconst n = 2;\nconsole.log(largeProduct(nums, nums2, n));\n```\n\n</section>\n", "\n  const list1 = nums1.filter(num => num % n === 0);\n  const list2 = nums2.filter(num => num % n === 0);\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if ((list1[i] * list2[j]) > (result[result.length - 1] * n)) {\n        result.push((list1[i] * list2[j]));\n        result.push((list1[i] * list2[j]) * n);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      const product = nums1[i] * nums2[j];\n      max = product > max? product : max;\n    }\n  }\n  return max;\n}\n", "\n  // Write your code here\n  const sortedNumbers1 = sortNumericStrings(nums1);\n  const sortedNumbers2 = sortNumericStrings(nums2);\n  const productOfNumbers1 = multiplyElements(sortedNumbers1);\n  const productOfNumbers2 = multiplyElements(sortedNumbers2);\n  const maxProduct = Math.max(productOfNumbers1.map(m => m * n).reduce((max, current) => Math.max(max, current), 0), productOfNumbers2.map(m => m * n).reduce((max, current) => Math.max(max, current), 0));\n  return maxProduct;\n}\n```\n\n</section>\n"]}
{"task_id": "MBJSP/309", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maximum(a, b) {\n/**\n * * Write a JavaScript function to find the maximum of two numbers.\n */", "entry_point": "maximum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 10;\nvar x0 = maximum(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = -1;\nvar arg11 = -2;\nvar x1 = maximum(arg10, arg11);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 7;\nvar x2 = maximum(arg20, arg21);\nvar v2 = 9;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const test = a - b;\n  return a > b? a : b;\n}\n", "\n  return a > b? a : b;\n}\n", "\n  return a > b? a : b;\n}\n", "\n  return a > b? a : b;\n}\n", "\n  return a > b? a : b;\n}\n"]}
{"task_id": "MBJSP/310", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction stringToTuple(str1) {\n/**\n * * Write a function to convert a given string to a tuple.\n */", "entry_point": "stringToTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python 3.0\";\nvar x0 = stringToTuple(arg00);\nvar v0 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"item1\";\nvar x1 = stringToTuple(arg10);\nvar v1 = [\"i\", \"t\", \"e\", \"m\", \"1\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"15.10\";\nvar x2 = stringToTuple(arg20);\nvar v2 = [\"1\", \"5\", \".\", \"1\", \"0\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const str2 = str1.split(\",\").map(num => parseInt(num, 10));\n  const sortedStr = str2.sort((a, b) => a - b);\n  return sortedStr;\n}\n", "\n  const numbers = str1.split('');\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\n", "\n  const nums = str1.split(\",\");\n  const tup = tupleToTuple(nums);\n  return tup;\n}\n", "\n  const str = str1.split(\",\");\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(parseInt(str[i], 10));\n  }\n  return result;\n}\n", "\n  return str1.split('');\n}\n"]}
{"task_id": "MBJSP/311", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction setLeftMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */", "entry_point": "setLeftMostUnsetBit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = setLeftMostUnsetBit(arg00);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = setLeftMostUnsetBit(arg10);\nvar v1 = 14;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = setLeftMostUnsetBit(arg20);\nvar v2 = 15;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  n |= (1 << 31);\n  n &= ~(1 << 31);\n  return n;\n}\n", "\n  return n | (n - 1);\n}\n", "\n  // Write your code here\n  const count = n.toString(2).length;\n  let result = parseInt(n, 2).toString(2);\n  for (let i = 0; i < count; i++) {\n    result = \"0\" + result;\n  }\n  return result;\n}\n", "\n    if (n == 0) {\n        return 0;\n    }\n    return n ^ setLeftMostUnsetBit(n / 2);\n}\n", "\n  return n | (n + 1);\n}\n"]}
{"task_id": "MBJSP/312", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction volumeCone(r, h) {\n/**\n * * Write a function to find the volume of a cone.\n */", "entry_point": "volumeCone", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 12;\nvar x0 = volumeCone(arg00, arg01);\nvar v0 = 314.15926535897927;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = volumeCone(arg10, arg11);\nvar v1 = 1570.7963267948965;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 19;\nvar arg21 = 17;\nvar x2 = volumeCone(arg20, arg21);\nvar v2 = 6426.651371693521;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return r * h * (3.141592 / 3);\n}\n", "\n  let volume = r * r * Math.PI * h / 3;\n  return volume;\n}\nconst array = [1, 2, 3];\nconst array1 = [1, 2, 3];\nconst array2 = [1, 2, 3, 4, 5];\nconst array3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst array4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nconst array5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nconst array6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];\nconst array7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60];\nconst array8 = [1, 2, 3, 4, 5, 6, 7, 8, 9", "\n  let result = Math.PI * r * r * h / 3;\n  return result;\n}\n", "\n  const pi = 3.14159;\n  const d = 2 * r;\n  return pi * r * r * h / 3;\n}\n", "\n  const x = r * Math.cos(Math.PI / 3);\n  const y = r * Math.sin(Math.PI / 3);\n  const z = h;\n  const volume = Math.PI * r * r * h / 3;\n  return volume;\n}\n"]}
{"task_id": "MBJSP/313", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction posNos(list1) {\n/**\n * * Write a JavaScript function to print positive numbers in a list.\n */", "entry_point": "posNos", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, -2, 1, 2];\nvar x0 = posNos(arg00);\nvar v0 = [1, 2];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 4, -5];\nvar x1 = posNos(arg10);\nvar v1 = [3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-2, -3, 1];\nvar x2 = posNos(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n    // Write your code here\n    return list1.filter(num => num > 0);\n}\nconst nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/314", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxSumRectangularGrid(grid, n) {\n/**\n * * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n */", "entry_point": "maxSumRectangularGrid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 4, 5], [2, 0, 0]];\nvar arg01 = 3;\nvar x0 = maxSumRectangularGrid(arg00, arg01);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]];\nvar arg11 = 5;\nvar x1 = maxSumRectangularGrid(arg10, arg11);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]];\nvar arg21 = 5;\nvar x2 = maxSumRectangularGrid(arg20, arg21);\nvar v2 = 81;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let maxSum = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      const sum = grid[i][j] + grid[i][j + 1] + grid[i + 1][j] + grid[i + 1][j + 1];\n      if (sum > maxSum) {\n        maxSum = sum;\n      }\n    }\n  }\n  return maxSum;\n}\n", "\n  const result = [];\n  for (let i = 0; i < grid.length - n + 1; i++) {\n    const sum = 0;\n    for (let j = 0; j < n; j++) {\n      sum += grid[i + j];\n    }\n    result.push(sum);\n  }\n  return result.reduce((a, b) => a + b);\n}\n", "\n  const arr = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      arr.push(grid[i][j]);\n    }\n  }\n  const dp = [];\n  for (let i = 0; i < arr.length; i++) {\n    dp.push(arr[i]);\n    dp[i] = arr[i] + (i === 0? 0 : dp[i - 1]);\n  }\n  const max = [];\n  for (let i = 0; i < n; i++) {\n    max.push(0);\n  }\n  for (let i = 0; i < dp.length; i++) {\n    for (let j = 0; j < dp[i].length; j++) {\n      if (j === 0 && i === 0) {\n        max[i] = dp[i][j];\n      } else if (j === 0) {\n        max[i] = dp[i][j] + max[i - 1];\n      } else if (i === 0) {\n        max[i] = dp[i][j] + max[i - 1];\n      } else {\n        max[i] = Math.max(dp[i][j] + max[i - 1], max[i - 1]);\n      }\n    }\n  }\n  return max[n - 1];\n}\n", "\n    const gridCopy = grid.slice();\n    for (let i = 0; i < n; i++) {\n        gridCopy[i][0] = 0;\n        gridCopy[0][i] = 0;\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            gridCopy[i][j] = Math.max(gridCopy[i - 1][j], gridCopy[i][j - 1]) + grid[i][j];\n        }\n    }\n    return gridCopy[n - 1][n - 1];\n}\n", "\n  const rows = grid.length;\n  const columns = grid[0].length;\n  const rectGrid = [];\n  for (let row = 0; row < rows; row++) {\n    const rowGrid = [];\n    for (let column = 0; column < columns; column++) {\n      rowGrid.push(grid[row][column]);\n    }\n    rectGrid.push(rowGrid);\n  }\n  let maxSum = 0;\n  for (let row = 0; row < rows; row++) {\n    for (let column = 0; column < columns; column++) {\n      const element = rectGrid[row][column];\n      const elements = [element];\n      for (let j = 0; j < n; j++) {\n        const leftElement = rectGrid[row][column + j + 1];\n        if (leftElement!== element) {\n          elements.push(leftElement);\n        }\n        const rightElement = rectGrid[row + j + 1][column + j];\n        if (rightElement!== element) {\n          elements.push(rightElement);\n        }\n      }\n      if (elements.length === n + 2) {\n        maxSum = maxSum < (element + elements.reduce((a, b) => a + b))? (element + elements.reduce((a, b) => a + b)) : maxSum;\n      }\n    }\n  }\n  return maxSum;\n}\n\n```\n\n</div>\n\n</section>\n\n## Solution\n<section id='solution'>\n\n```js\n// solution required\n```\n</section>\n"]}
{"task_id": "MBJSP/315", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMaxLenEven(str) {\n/**\n * * Write a JavaScript function to find the first maximum length of even word.\n */", "entry_point": "findMaxLenEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python language\";\nvar x0 = findMaxLenEven(arg00);\nvar v0 = \"language\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"maximum even length\";\nvar x1 = findMaxLenEven(arg10);\nvar v1 = \"length\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"eve\";\nvar x2 = findMaxLenEven(arg20);\nvar v2 = \"-1\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const words = str.split(' ');\n  let result = words.length;\n  words.forEach(word => {\n    if (word.length % 2 === 0 && word.length > result) {\n      result = word.length;\n    }\n  });\n  return result;\n}\n// var str = 'This is a sentence';\n// var result = findMaxLenEven(str);\n// console.log(result);\n// console.log(str.split(' ').map(word => word.length).sort().join());\n\n", "\n  // Write your code here\n  let result = 0;\n  let words = str.split(' ');\n  words.forEach(w => {\n    if (w.length % 2 === 0 && w.length > result) {\n      result = w.length;\n    }\n  });\n  return result;\n}\n", "\n    // Write your code here\n    return str.split(' ').map(str => str.length).filter(str => str % 2 === 0).reduce((a, b) => a > b? a : b);\n}\n", "\n  return str.split(\" \").reduce((maxLen, word) => (word.length === maxLen? word.length : maxLen), 0);\n}\n", "\n  const words = str.split(\" \");\n  const maxlen = 0;\n  let currlen = 0;\n  for (let i = 0; i < words.length; i++) {\n    currlen = words[i].length;\n    if (currlen % 2 === 0) {\n      if (maxlen < currlen) {\n        maxlen = currlen;\n      }\n    }\n  }\n  return maxlen;\n}\nconst result = square(4);\n"]}
{"task_id": "MBJSP/316", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findLastOccurrence(a, x) {\n/**\n * * Write a function to find the index of the last occurrence of a given number in a sorted array.\n */", "entry_point": "findLastOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9];\nvar arg01 = 5;\nvar x0 = findLastOccurrence(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 5, 8, 6, 6, 8, 9, 9, 9];\nvar arg11 = 9;\nvar x1 = findLastOccurrence(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 2, 1, 5, 6, 6, 6, 9, 9, 9];\nvar arg21 = 6;\nvar x2 = findLastOccurrence(arg20, arg21);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = -1;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === x) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  return a.indexOf(x, a.length - 1);\n}\n", "\n  let index = -1;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === x) {\n      index = i;\n    }\n  }\n  return index;\n}\n", "\n  const testTup = a.map(num => parseInt(num, 10));\n  const numbers = testTup.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  let i = sortedNumbers.length - 1;\n  while (i > 0 && sortedNumbers[i]!== sortedNumbers[i - 1]) {\n    i--;\n  }\n  if (sortedNumbers[i] === sortedNumbers[i - 1] && sortedNumbers[i]!== sortedNumbers[i - 1]) {\n    return i;\n  } else {\n    return -1;\n  }\n}\n", "\n  let lastOccurrence = a.length;\n  for (let i = a.length; i >= 0; i--) {\n    if (a[i] == x) {\n      lastOccurrence = i;\n    }\n  }\n  return lastOccurrence;\n}\n"]}
{"task_id": "MBJSP/317", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction modifiedEncode(alist) {\n/**\n * * Write a function to reflect the modified run-length encoding from a list.\n */", "entry_point": "modifiedEncode", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nvar x0 = modifiedEncode(arg00);\nvar v0 = [[2, 1], 2, 3, [2, 4], 5, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"automatically\";\nvar x1 = modifiedEncode(arg10);\nvar v1 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar x2 = modifiedEncode(arg20);\nvar v2 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return alist;\n}\n", "\n  const firstElement = alist[0];\n  const modifiedRLE = modifiedRunLengthEncode(alist);\n  let result = modifiedRLE.map(num => (num === firstElement)? modifiedRLE.pop() + 1 : num);\n  result[0] = firstElement;\n  return result;\n}\n", "\n  const n = alist.length;\n  const num = [];\n  let counter = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    const c = alist[i];\n    if (counter === 0 && c === 0) {\n      continue;\n    }\n    if (c === 0) {\n      num.unshift(counter);\n      counter = 0;\n      continue;\n    }\n    if (counter === 0) {\n      counter++;\n      num.unshift(0);\n      continue;\n    }\n    if (counter === 1) {\n      counter++;\n      continue;\n    }\n    num[num.length - 1]++;\n    counter = 1;\n  }\n  return num;\n}\n", "\n  // Write your code here\n  const res = [];\n  for (let i = 0; i < alist.length; i++) {\n    let new_item = alist[i];\n    if (res.length > 0 && res[res.length - 1] === alist[i]) {\n      res[res.length - 1]++;\n    } else {\n      res.push(new_item);\n    }\n  }\n  return res;\n}\n", "\n  const count = {};\n  for (let i = 0; i < alist.length; i++) {\n    count[alist[i]] = (count[alist[i]] + 1 || 1) + (i > 0? count[alist[i - 1]] : 0);\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/318", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxVolume(s) {\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */", "entry_point": "maxVolume", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = maxVolume(arg00);\nvar v0 = 18;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = maxVolume(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = maxVolume(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const side = s.split(\",\");\n  const sides = {\n    top: parseInt(side[0]),\n    bottom: parseInt(side[1]),\n    left: parseInt(side[2]),\n    right: parseInt(side[3])\n  };\n  const volume = Math.abs(sides.top * sides.bottom * sides.left + sides.top * sides.bottom * sides.right + sides.left * sides.right * sides.bottom - sides.top * sides.bottom * sides.left - sides.top * sides.bottom * sides.right - sides.left * sides.right * sides.bottom);\n  return volume;\n}\n", "\n  return s.reduce((a, b) => a + b) * s.reduce((a, b) => a + b);\n}\n", "\n  let maxVolume = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      const volume = s[i] * s[i] * s[j];\n      if (volume > maxVolume) {\n        maxVolume = volume;\n      }\n    }\n  }\n  return maxVolume;\n}\n", "\n  const result = [];\n  for (let i = 0; i < s.length - 2; i++) {\n    const max = (s[i] * s[i + 1] * s[i + 2]);\n    if (max > result[0]) {\n      result[0] = max;\n      result[1] = i + 1;\n    }\n  }\n  return result;\n}\n", "\n  let a = s[0];\n  let b = s[1];\n  let c = s[2];\n  let result = 0;\n  if (a + b + c > result) {\n    result = a + b + c;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/319", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findLongWord(text) {\n/**\n * * Write a function to find all five characters long word in the given string by using regex.\n */", "entry_point": "findLongWord", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Please move back to strem\";\nvar x0 = findLongWord(arg00);\nvar v0 = [\"strem\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"4K Ultra HD streaming player\";\nvar x1 = findLongWord(arg10);\nvar v1 = [\"Ultra\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Streaming Media Player\";\nvar x2 = findLongWord(arg20);\nvar v2 = [\"Media\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.match(/[A-Z]{5}/g);\n}\n", "\n  let regex = /.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?[^\\w]?\\w.*?/;\n  return regex.test(text);\n}\n", "\n  const words = text.split('');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === 5) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "\n  const regexp = new RegExp(`[a-zA-Z]*${text.split(' ').slice(0, 5).join(' ')}[a-zA-Z]*`);\n  const result = [];\n  for (let i = 0; i < text.length; i++) {\n    if (regexp.test(text.charAt(i))) {\n      result.push(text.charAt(i));\n    }\n  }\n  return result;\n}\n", "\n  let regex = new RegExp(\"\\\\b\\\\w{5,}\\\\b\");\n  const results = [];\n  for (let i = 0; i < text.length; i++) {\n    if (regex.test(text[i])) {\n      results.push(text[i]);\n    }\n  }\n  return results;\n}\n\n"]}
{"task_id": "MBJSP/320", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumDifference(n) {\n/**\n * * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n */", "entry_point": "sumDifference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = sumDifference(arg00);\nvar v0 = 5434;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = sumDifference(arg10);\nvar v1 = 41230;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 54;\nvar x2 = sumDifference(arg20);\nvar v2 = 2151270;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const sum1 = 0;\n  const sum2 = 0;\n  const nn = n;\n  for (let i = 1; i <= nn; i++) {\n    sum1 += i;\n  }\n  for (let i = 1; i <= nn; i++) {\n    sum2 += i * i;\n  }\n  return sum2 - sum1 * sum1;\n}\n", "\n  const arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i + 1);\n  }\n  const sumSquared = arr.reduce((a, b) => a + b * b, 0);\n  const sum = arr.reduce((a, b) => a + b, 0);\n  return Math.pow(sumSquared, 2) - Math.pow(sum, 2);\n}\n", "\n  const nums = [];\n  for (let i = 0; i < n; i++) {\n    nums.push(i);\n  }\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    let diff = Math.pow(nums[i], 2) - Math.pow(n, 2);\n    result.push(Math.sqrt(diff));\n  }\n  return result;\n}\n// Start writing your code here\nconst myTuple = [\n  1,\n  2,\n  3,\n  4,\n  5,\n];\nconst myTuple2 = [\n  10,\n  20,\n  30,\n  40,\n  50,\n];\nconst myTuple3 = [\n  100,\n  200,\n  300,\n  400,\n  500,\n];\n\nmyTuple.sort((a, b) => a - b);\nmyTuple2.sort((a, b) => a - b);\nmyTuple3.sort((a, b) => a - b);\n\nlet myTuple4 = [\n  \"hello\",\n  \"hello\",\n  \"hello\",\n];\n\nmyTuple4.sort((a, b) => a.localeCompare(b));\nmyTuple4.sort((a, b) => a.localeCompare(b));\n\n// Create a method to print the result to console.\nconsole.log(\n  [...myTuple].map(tup => tup[0]).join(\", \"),\n  [...myTuple2].map(tup => tup[0]).join(\", \"),\n  [...myTuple3].", "\n  // Write your code here\n  const firstNNumbers = Array(n).fill(0).map(() => Math.floor(Math.random() * 100) + 1);\n  const firstNSquared = firstNNumbers.map(num => num * num);\n  const sumSquared = firstNSquared.reduce((sum, num) => sum + num, 0);\n  const sum = firstNNumbers.reduce((sum, num) => sum + num, 0);\n  const difference = Math.pow(sumSquared - sum, 2) / n;\n  return difference;\n}\n", "\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  const sumFirstN = arr.reduce((acc, n) => acc + n);\n  const sumSquaredFirstN = arr.reduce((acc, n) => acc + (n * n));\n  const result = sumFirstN * sumFirstN - sumSquaredFirstN;\n  return result;\n}\n"]}
{"task_id": "MBJSP/321", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findDemlo(s) {\n/**\n * * Write a function to find the demlo number for the given number.\n */", "entry_point": "findDemlo", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"111111\";\nvar x0 = findDemlo(arg00);\nvar v0 = \"12345654321\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1111\";\nvar x1 = findDemlo(arg10);\nvar v1 = \"1234321\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"13333122222\";\nvar x2 = findDemlo(arg20);\nvar v2 = \"123456789101110987654321\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  let numbers = [];\n  for (let i = 2; i <= s; i++) {\n    let numbers_arr = [];\n    numbers_arr.push(s);\n    for (let j = 1; j <= s; j++) {\n      let temp = j;\n      for (let k = 0; k <= j; k++) {\n        temp = temp * (s - k);\n        numbers_arr.push(temp);\n      }\n    }\n    if (numbers_arr.length === numbers.length) {\n      result.push(s);\n    }\n    numbers = numbers_arr;\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = 1; i <= s; i++) {\n    if (s % i === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  const count = s.split('').map(char => char ==='m'?'molo' : char).filter(demlo => demlo.length === 1).map(demlo => demlo[0]).filter(demlo => demlo ==='molo').length;\n  return count === 1? s : 'the demlo number for'+ s +'is:'+ s;\n}\n", "\n  // Write your code here\n  let factor = 0;\n  let remainder = 0;\n  let i = 1;\n  for (let i = 1; i < s; i++) {\n    factor = s % i;\n    remainder = s / i;\n    if (factor === remainder) {\n      break;\n    }\n  }\n  return i;\n}\n", "\n  let num = parseInt(s);\n  let result = num % 3 === 0? \"demlo\" : \"not demlo\";\n  return result;\n}\n"]}
{"task_id": "MBJSP/322", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction positionMin(list1) {\n/**\n * * Write a function to find all index positions of the minimum values in a given list.\n */", "entry_point": "positionMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54];\nvar x0 = positionMin(arg00);\nvar v0 = [3, 11];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nvar x1 = positionMin(arg10);\nvar v1 = [0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar x2 = positionMin(arg20);\nvar v2 = [1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const minIndex = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (minIndex.indexOf(i) === -1) {\n      minIndex.push(i);\n    }\n  }\n  return minIndex;\n}\n", "\n  // Write your code here\n  const min = list1[0];\n  const index = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < min) {\n      index.push(i);\n      min = list1[i];\n    }\n  }\n  return index;\n}\n", "\n  // Write your code here\n  let indexPositions = [];\n  for (let i = 0; i < list1.length; i++) {\n    indexPositions.push(i);\n  }\n  return indexPositions;\n}\nconst cases = [\n  {\n    testName: \"numbers\",\n    input: [1, 2, 3, 4, 5],\n    output: [1, 2, 3, 4, 5]\n  },\n  {\n    testName: \"strings\",\n    input: ['1', '2', '3', '4', '5'],\n    output: ['1', '2', '3', '4', '5']\n  },\n  {\n    testName: \"tuple\",\n    input: [1, 2, 3, 4],\n    output: [1, 2, 3, 4]\n  },\n  {\n    testName: \"numeric strings\",\n    input: [\n      '1',\n      '2',\n      '3',\n      '4',\n      '5',\n      '6',\n      '7',\n      '8',\n      '9',\n      '10',\n      '11',\n      '12',\n      '13',\n      '14',\n      '15',\n      '16',\n      '17',\n      '18',\n      '19',\n      '20',\n      '21',\n      '22',\n      '23',\n      '24',\n      '25',\n      '26',\n      '27',\n      '28',\n      '29',\n      '30',\n      '31',\n      '32',\n      '33',\n      '34',\n      '35',\n      '36',\n      ", "\n  const minVal = list1[0];\n  let minValIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < minVal) {\n      minVal = list1[i];\n      minValIndex = i;\n    }\n  }\n  return [minValIndex, minVal];\n}\n", "\n  const min = list1[0];\n  let index = 0;\n  for (let i = 1; i < list1.length; i++) {\n    if (min > list1[i]) {\n      min = list1[i];\n      index = i;\n    }\n  }\n  return [index];\n}\n"]}
{"task_id": "MBJSP/323", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction reArrange(arr, n) {\n/**\n * * Write a function to re-arrange the given array in alternating positive and negative items.\n */", "entry_point": "reArrange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8];\nvar arg01 = 10;\nvar x0 = reArrange(arg00, arg01);\nvar v0 = [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, -4, -1, 4];\nvar arg11 = 6;\nvar x1 = reArrange(arg10, arg11);\nvar v1 = [-4, 1, -1, 2, 3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [4, 7, 9, 77, -4, 5, -3, -9];\nvar arg21 = 8;\nvar x2 = reArrange(arg20, arg21);\nvar v2 = [-4, 4, -3, 7, -9, 9, 77, 5];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const n1 = arr.length;\n  for (let i = 0; i < n1; i++) {\n    if (i % 2 === 0) {\n      result.push(arr[i]);\n    } else {\n      result.push(-arr[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0) {\n      result.push(arr[i]);\n    } else {\n      result.push(-arr[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(arr[i]);\n    if (i % 2 === 0) {\n      result.push(-arr[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const item = arr[i];\n    if (i % 2 === 0 && item >= 0) {\n      result.push(item);\n    }\n    if (i % 2!== 0 && item <= 0) {\n      result.push(item);\n    }\n  }\n  return result;\n}\n", "\n  arr = arr.slice(0);\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      let temp = arr[i];\n      arr[i] = arr[i + 1];\n      arr[i + 1] = temp;\n    }\n    if (arr[i] > 0) {\n      let temp = arr[i];\n      arr[i] = arr[i + 1];\n      arr[i + 1] = temp;\n    }\n  }\n  return arr;\n}\n"]}
{"task_id": "MBJSP/324", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumOfAlternates(testtuple) {\n/**\n * * Write a function to extract the sum of alternate chains of tuples.\n */", "entry_point": "sumOfAlternates", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 3, 6, 10, 34];\nvar x0 = sumOfAlternates(arg00);\nvar v0 = [46, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = sumOfAlternates(arg10);\nvar v1 = [6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [6, 7, 8, 9, 4, 5];\nvar x2 = sumOfAlternates(arg20);\nvar v2 = [21, 18];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const numbers = testTup.map(tup => parseInt(tup.toString(), 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const first = sortedNumbers[0];\n  const second = sortedNumbers[1];\n  if (first === second || second - first === 1) {\n    return 0;\n  }\n  let result = second - first + sumOfAlternates(sortedNumbers.slice(2));\n  return result;\n}\n", "\n  const testArray = Array.from(testtuple);\n  const testArrayCopy = testArray.slice();\n  testArrayCopy.reverse();\n  const alternateChain = multiplyElements(testArrayCopy);\n  return alternateChain[0] + alternateChain[1];\n}\n// -------------------------------------------------------------------------------------\n// EXERCISE 2: Write a ", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (i % 2 === 0) {\n      result.push(testTup[i] * testTup[i + 1]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    const temp = multiplyElements(testtuple);\n    for (let j = 0; j < temp.length; j++) {\n      result.push(temp[j]);\n    }\n  }\n  return result;\n}\n", "\n  const odd = multiplyElements(testtuple);\n  const even = sumOfAlternates(multiplyElements(testtuple));\n  return odd[0] + even[0];\n}\nconst result = sumOfAlternates([1, 2, 3, 4, 5, 6]);\nconsole.log(result);\n```\n\n</section>\n"]}
{"task_id": "MBJSP/325", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getMinSquares(n) {\n/**\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */", "entry_point": "getMinSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = getMinSquares(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = getMinSquares(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = getMinSquares(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  for (let i = 1; i <= n; i++) {\n    let sum = 0;\n    for (let j = 1; j <= i; j++) {\n      sum += j;\n    }\n    if (sum == n) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  let min = n;\n  for (let i = n; i >= 1; i--) {\n    let t = i;\n    while (t >= 1) {\n      if (t >= n) {\n        break;\n      } else {\n        min = Math.min(min, i);\n      }\n      t--;\n    }\n  }\n  return min;\n}\n", "\n  const nSquares = Array.from({ length: n }, (item, index) => index);\n  const minSquares = nSquares.reduce((minSquares, nSquare) => nSquare < minSquares? nSquare : minSquares);\n  return minSquares;\n}\n", "\n  const input = n;\n  let minSquares = Math.pow(input, 2);\n  let currSquares = Math.pow(input, 2);\n  for (let i = 2; i < n; i++) {\n    currSquares += Math.pow(input, i);\n    if (currSquares < minSquares) {\n      minSquares = currSquares;\n    }\n  }\n  return minSquares;\n}\n\n", "\n  const squaresList = [1, 4, 9, 16, 25];\n  return squaresList.filter(test => test % n === 0).map(test => test * test).reduce((a, b) => a + b, 1);\n}\n"]}
{"task_id": "MBJSP/326", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction mostOccurrences(testlist) {\n/**\n * * Write a function to get the word with most number of occurrences in the given strings list.\n */", "entry_point": "mostOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"];\nvar x0 = mostOccurrences(arg00);\nvar v0 = \"UTS\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Its been a great year\", \"this year is so worse\", \"this year is okay\"];\nvar x1 = mostOccurrences(arg10);\nvar v1 = \"year\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"];\nvar x2 = mostOccurrences(arg20);\nvar v2 = \"can\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let counter = 0;\n  let maxCount = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    counter = counter + 1;\n    if (counter > maxCount) {\n      maxCount = counter;\n      counter = 0;\n    }\n  }\n  return testlist.find((word) => maxCount === (word.length + 1));\n}\nconst testTup = [0, 2, 3, 4, 5, 6, 7];\nconst tup2 = [1, 2, 3, 4, 5, 6];\nconst tup3 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n// Tuple testing\nassert.deepStrictEqual(firstTuple(tup3), [1, 2, 3, 4, 5, 6]);\n// Tuple testing\nassert.deepStrictEqual(secondTuple(tup3), [8, 9]);\nassert.deepStrictEqual(lastTuple(tup3), [4, 5, 6, 7]);\nassert.deepStrictEqual(firstTuple(tup2), [1, 2]);\nassert.deepStrictEqual(secondTuple(tup2), [2, 3]);\nassert.deepStrictEqual(lastTuple(tup2), [3, 4]);\nassert.deepStrictEqual(firstTuple(testTup), [0]);\nassert.deepStrictEqual(secondTuple(testTup), [0, 1]);\nassert.deepStrictEqual(lastTuple(testTup), [1, 2, 3, 4, 5, 6, 7]);\n// Array testing\nassert.deepStrictEqual(", "\n  const freq = {};\n  for (let i = 0; i < testlist.length; i++) {\n    const word = testlist[i].split('');\n    for (let j = 0; j < word.length; j++) {\n      if (freq[word[j]] === undefined || freq[word[j]] < i + 1) {\n        freq[word[j]] = i + 1;\n      }\n    }\n  }\n  const max = freq[Object.keys(freq)[0]];\n  const maxkey = Object.keys(freq)[0];\n  for (let key of Object.keys(freq)) {\n    if (freq[key] > max) {\n      max = freq[key];\n      maxkey = key;\n    }\n  }\n  return maxkey;\n}\n", "\n  const result = [];\n  let maxOccur = 0;\n  for (let i = 0; i < testlist.length; i++) {\n    let currOccur = 0;\n    const word = testlist[i];\n    const words = word.split(\" \");\n    for (let j = 0; j < words.length; j++) {\n      if (words[j] in currOccur) {\n        currOccur[words[j]]++;\n      }\n      else {\n        currOccur[words[j]] = 1;\n      }\n    }\n    if (currOccur > maxOccur) {\n      maxOccur = currOccur;\n      result = [word];\n    }\n    else if (currOccur === maxOccur) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    let test = testlist[i];\n    let count = 0;\n    while (test!== null) {\n      test = test.toString().toLowerCase();\n      if (test.length > 0) {\n        if (test === 'a' || test === 'e' || test === 'i' || test === 'o' || test === 'u') {\n          count += 1;\n        }\n        else {\n          count += 2;\n        }\n      }\n      test = test.toString().trim();\n    }\n    result.push({ word: testlist[i], count: count });\n  }\n  result.sort((a, b) => b.count - a.count);\n  return result[0].word;\n}\n", "\n  const maxOccur = 0;\n  const word = \"\";\n  for (let i = 0; i < testlist.length; i++) {\n    const wordoccur = testlist[i].split(\" \").length;\n    if (maxOccur < wordoccur) {\n      maxOccur = wordoccur;\n      word = testlist[i];\n    }\n  }\n  return word;\n}\n"]}
{"task_id": "MBJSP/327", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkIsosceles(x, y, z) {\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */", "entry_point": "checkIsosceles", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 8;\nvar arg02 = 12;\nvar x0 = checkIsosceles(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 6;\nvar arg12 = 12;\nvar x1 = checkIsosceles(arg10, arg11, arg12);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 16;\nvar arg22 = 20;\nvar x2 = checkIsosceles(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const length = Math.sqrt(x * x + y * y);\n  if (length === z) {\n    console.log('This is an isosceles triangle.');\n  } else {\n    console.log('This is not an isosceles triangle.');\n  }\n}\n", "\n  const result = '';\n  if (x === y && x === z) {\n    result += 'Isosceles Triangle';\n  } else if (x!= y && x!= z && y!= z) {\n    result += 'Scalene Triangle';\n  }\n  return result;\n}\n", "\n  console.log(`Triangle is isosceles if ${x} = ${y} = ${z}`);\n  return true;\n}\n", "\n  if (x <= y && x <= z && y <= z) {\n    console.log('Isosceles Triangle');\n  } else {\n    console.log('Right Triangle');\n  }\n}\n", "\n  return {\n    name: 'isosceles',\n    data: x + y === z\n  };\n}\n"]}
{"task_id": "MBJSP/328", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction rotateLeft(list1, m, n) {\n/**\n * * Write a function to rotate a given list by specified number of items to the left direction.\n */", "entry_point": "rotateLeft", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg01 = 3;\nvar arg02 = 4;\nvar x0 = rotateLeft(arg00, arg01, arg02);\nvar v0 = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = rotateLeft(arg10, arg11, arg12);\nvar v1 = [3, 4, 5, 6, 7, 8, 9, 10, 1, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg21 = 5;\nvar arg22 = 2;\nvar x2 = rotateLeft(arg20, arg21, arg22);\nvar v2 = [6, 7, 8, 9, 10, 1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (m < n) {\n    m = n - m;\n  }\n  const result = [];\n  for (let i = 0; i < m; i++) {\n    result.push(list1[0]);\n    for (let j = 0; j < list1.length - 1; j++) {\n      list1[j] = list1[j + 1];\n    }\n    list1[n - 1] = 0;\n  }\n  return result;\n}\n", "\n  let i = 0;\n  for (let i = 0; i < m; i++) {\n    const temp = list1[0];\n    for (let j = 0; j < list1.length - 1; j++) {\n      list1[j] = list1[j + 1];\n    }\n    list1[list1.length - 1] = temp;\n  }\n  return list1;\n}\n", "\n  const list = list1.slice(n, m);\n  const firstPart = list1.slice(0, n);\n  const lastPart = list1.slice(m);\n  return firstPart.concat(list, lastPart);\n}\n", "\n  m = m || 0;\n  n = n || 0;\n  let l1 = list1.slice(m, n + m);\n  let l2 = list1.slice(n + m, list1.length);\n  let l3 = list1.slice(0, n + m);\n  let l4 = l2.concat(l3);\n  return l1.concat(l4);\n}\n", "\n  const newList = [];\n  for (let i = 0; i < n; i++) {\n    newList.push(list1.shift());\n  }\n  return newList;\n}\n"]}
{"task_id": "MBJSP/329", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction negCount(list) {\n/**\n * * Write a JavaScript function to count negative numbers in a list.\n */", "entry_point": "negCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, -2, 3, -4, -5];\nvar x0 = negCount(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = negCount(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, -3, -10, 20];\nvar x2 = negCount(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      result.push(list[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  return list.reduce((count, value) => count + (value < 0? 1 : 0), 0);\n}\n"]}
{"task_id": "MBJSP/330", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findChar(text) {\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */", "entry_point": "findChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"For the four consumer complaints contact manager AKR reddy\";\nvar x0 = findChar(arg00);\nvar v0 = [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Certain service are subject to change MSR\";\nvar x1 = findChar(arg10);\nvar v1 = [\"are\", \"MSR\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Third party legal desclaimers\";\nvar x2 = findChar(arg20);\nvar v2 = [\"Third\", \"party\", \"legal\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return text.split(' ').filter(word => word.match(/^[a-zA-Z]{3,4}$/)).map(word => word.substr(0, 3) + word.substr(word.length - 2, 2));\n}\n", "\n  // Write your code here\n  let found = [];\n  let textArr = text.split(\" \");\n  textArr.forEach(word => {\n    const regex = new RegExp(\"^[a-zA-Z]*\" + word + \"[a-zA-Z]*\" + word + \"[a-zA-Z]*$\");\n    if (regex.test(text)) {\n      found.push(word);\n    }\n  });\n  return found;\n}\n", "\n    const re = /\\S\\S\\S/;\n    return re.exec(text);\n}\n", "\n  const regex = /[a-zA-Z]{3,}/g;\n  const result = [];\n  let counter = 0;\n  let word = '';\n  while (counter < text.length) {\n    if (regex.test(text[counter])) {\n      word += text[counter];\n    } else {\n      result.push(word);\n      word = '';\n    }\n    counter++;\n  }\n  return result;\n}\n", "\n  const regex = /\\b[aeiou][nrt][fcf]\\b/g;\n  const result = text.match(regex);\n  return result;\n}\n"]}
{"task_id": "MBJSP/331", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countUnsetBits(n) {\n/**\n * * Write a JavaScript function to count unset bits of a given number.\n */", "entry_point": "countUnsetBits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countUnsetBits(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = countUnsetBits(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = countUnsetBits(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let result = 0;\n  while (n) {\n    result += n & 1;\n    n = n >> 1;\n  }\n  return result;\n}\n", "\n  return (n & (n - 1)) + countUnsetBits(n & ((n << 1) - 1));\n}\n", "\n  let result = 0;\n  while (n) {\n    result++;\n    n &= (n - 1);\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    if ((i & (i + 1))) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  return (n & 1) + countUnsetBits(n >> 1);\n}\n"]}
{"task_id": "MBJSP/332", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction charFrequency(str1) {\n/**\n * * Write a function to count character frequency of a given string.\n */", "entry_point": "charFrequency", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = charFrequency(arg00);\nvar v0 = {'\"p\"':1,'\"y\"':1,'\"t\"':1,'\"h\"':1,'\"o\"':1,'\"n\"':1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = charFrequency(arg10);\nvar v1 = {'\"p\"':1,'\"r\"':2,'\"o\"':1,'\"g\"':1,'\"a\"':1,'\"m\"':1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = charFrequency(arg20);\nvar v2 = {'\"l\"':1,'\"a\"':2,'\"n\"':1,'\"g\"':2,'\"u\"':1,'\"e\"':1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = {};\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    count[str[i]] = count[str[i]] + 1 || 1;\n  }\n  return count;\n}\n", "\n  const result = {};\n  for (let i = 0; i < str1.length; i++) {\n    result[str1[i]] = result[str1[i]] + 1 || 1;\n  }\n  return result;\n}\n", "\n  let result = {};\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (result[str[i]] == undefined) {\n      result[str[i]] = 1;\n    } else {\n      result[str[i]]++;\n    }\n  }\n  return result;\n}\n", "\n  const frequency = {};\n  const str2 = str1.split(\"\");\n  for (let i = 0; i < str2.length; i++) {\n    frequency[str2[i]] = frequency[str2[i]] + 1 || 1;\n  }\n  return frequency;\n}\n", "\n  const freq = {};\n  for (let i = 0; i < str1.length; i++) {\n    freq[str1[i]] = freq[str1[i]] + 1 || 1;\n  }\n  return freq;\n}\n"]}
{"task_id": "MBJSP/333", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sort(subli) {\n/**\n * * Write a JavaScript function to sort a list according to the second element in sublist.\n */", "entry_point": "sort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"a\", 10], [\"b\", 5], [\"c\", 20], [\"d\", 15]];\nvar x0 = sort(arg00);\nvar v0 = [[\"b\", 5], [\"a\", 10], [\"d\", 15], [\"c\", 20]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"452\", 10], [\"256\", 5], [\"100\", 20], [\"135\", 15]];\nvar x1 = sort(arg10);\nvar v1 = [[\"256\", 5], [\"452\", 10], [\"135\", 15], [\"100\", 20]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"rishi\", 10], [\"akhil\", 5], [\"ramya\", 20], [\"gaur\", 15]];\nvar x2 = sort(arg20);\nvar v2 = [[\"akhil\", 5], [\"rishi\", 10], [\"gaur\", 15], [\"ramya\", 20]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < subli.length; i++) {\n    for (let j = 0; j < subli.length - i; j++) {\n      if (subli[j] > subli[j + 1]) {\n        const tmp = subli[j];\n        subli[j] = subli[j + 1];\n        subli[j + 1] = tmp;\n      }\n    }\n  }\n  return subli;\n}\n", "\n  const sort = [];\n  for (let i = 0; i < subli.length; i++) {\n    for (let j = i + 1; j < subli.length; j++) {\n      if (subli[i] < subli[j]) {\n        const temp = subli[i];\n        subli[i] = subli[j];\n        subli[j] = temp;\n      }\n    }\n  }\n  return subli;\n}\n", "\n  return subli.sort((a, b) => {\n      const diff = a.second - b.second;\n      if (diff === 0) return a.first.localeCompare(b.first);\n      return diff;\n  });\n}\n", "\n    const subList = subli.slice(0);\n    const temp = subList[0];\n    subList.sort((a, b) => a[1] - b[1]);\n    subList.unshift(temp);\n    return subList;\n}\n", "\n  subli.sort((a, b) => a[1] - b[1]);\n  return subli;\n}\n"]}
{"task_id": "MBJSP/334", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkValidity(a, b, c) {\n/**\n * * Write a JavaScript function to check whether the triangle is valid or not if sides are given.\n */", "entry_point": "checkValidity", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = checkValidity(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 3;\nvar arg12 = 5;\nvar x1 = checkValidity(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = 10;\nvar arg22 = 5;\nvar x2 = checkValidity(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let aa, bb, cc;\n  aa = a.split(',').map(x => parseInt(x, 10));\n  bb = b.split(',').map(x => parseInt(x, 10));\n  cc = c.split(',').map(x => parseInt(x, 10));\n  if (aa.length!== bb.length || bb.length!== cc.length || cc.length!== aa.length) {\n    return false;\n  }\n  for (let i = 0; i < aa.length; i++) {\n    if (aa[i] > bb[i] || bb[i] > cc[i] || cc[i] > aa[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  return a + b > c && a + c > b && b + c > a;\n}\n", "\n  let sides = [a, b, c];\n  let isValid = true;\n  for (let i = 0; i < sides.length; i++) {\n    if (sides[i] < 0) {\n      isValid = false;\n    }\n  }\n  return isValid;\n}\n\n", "\n    let sides = [];\n    if (a <= 0 || b <= 0 || c <= 0) {\n      return false;\n    }\n    sides.push(a);\n    sides.push(b);\n    sides.push(c);\n    let sum = 0;\n    for (let i = 0; i < sides.length - 1; i++) {\n      sum += sides[i];\n    }\n    sum += sides[sides.length - 1];\n    return sum == sides[0] * sides[0] + sides[1] * sides[1] + sides[2] * sides[2];\n}\n", "\n    if (a >= b + c || b >= a + c || c >= a + b) return false;\n    return true;\n}\n"]}
{"task_id": "MBJSP/335", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction apSum(a, n, d) {\n/**\n * * Write a function to find the sum of arithmetic progression.\n */", "entry_point": "apSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = apSum(arg00, arg01, arg02);\nvar v0 = 25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = apSum(arg10, arg11, arg12);\nvar v1 = 72;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar arg22 = 5;\nvar x2 = apSum(arg20, arg21, arg22);\nvar v2 = 34;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let sum = a;\n  for (let i = 0; i < n - 1; i++) {\n    sum += d;\n  }\n  return sum;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] + n[i] * d[i];\n  }\n  return result;\n}\n\n// -------------------------------------------------------------\n// -------------------------------------------------------------\n// -------------------------------------------------------------\n// -------------------------------------------------------------\n\n\n", "\n  return (a * (n + 1) - d * n) / 2;\n}\n", "\n  return a + n * d;\n}\n", "\n  return a * (n + 1) / 2 + d;\n}\n"]}
{"task_id": "MBJSP/336", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkMonthnum(monthname1) {\n/**\n * * Write a function to check whether the given month name contains 28 days or not.\n */", "entry_point": "checkMonthnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"February\";\nvar x0 = checkMonthnum(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"January\";\nvar x1 = checkMonthnum(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"March\";\nvar x2 = checkMonthnum(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return monthname1.toLowerCase().indexOf('february') === -1;\n}\n", "\n    let monthnum = 0;\n    switch (monthname1) {\n        case 'January':\n            monthnum = 1;\n            break;\n        case 'February':\n            monthnum = 2;\n            break;\n        case 'March':\n            monthnum = 3;\n            break;\n        case 'April':\n            monthnum = 4;\n            break;\n        case 'May':\n            monthnum = 5;\n            break;\n        case 'June':\n            monthnum = 6;\n            break;\n        case 'July':\n            monthnum = 7;\n            break;\n        case 'August':\n            monthnum = 8;\n            break;\n        case 'September':\n            monthnum = 9;\n            break;\n        case 'October':\n            monthnum = 10;\n            break;\n        case 'November':\n            monthnum = 11;\n            break;\n        case 'December':\n            monthnum = 12;\n            break;\n    }\n    return monthnum === 28;\n}\n", "\n  return monthname1 === 'January' || monthname1 === 'February';\n}\n", "\n  const monthnum = monthname1.toLowerCase().replace(/month|m/g, '');\n  if (monthnum === 'january' || monthnum === 'february' || monthnum ==='march' || monthnum === 'april' || monthnum ==='may' || monthnum === 'june' || monthnum === 'july' || monthnum === 'august' || monthnum ==='september' || monthnum === 'october' || monthnum === 'november' || monthnum === 'december') {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ];\n  const result = months.indexOf(monthname1)!== -1;\n  return result;\n}\n"]}
{"task_id": "MBJSP/337", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction textMatchWord(text) {\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */", "entry_point": "textMatchWord", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python.\";\nvar x0 = textMatchWord(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python.\";\nvar x1 = textMatchWord(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang  .\";\nvar x2 = textMatchWord(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return /(?=.*[A-Z])(?=.*\\d)(?=.*[a-z])(?=.*[!?.])(?=.*[,.:;!?])(?=.*[\\u00C0-\\u00C5])(?=.*[\\u00C8-\\u00CF])(?=.*[\\u00D1-\\u00D6])(?=.*[\\u00D8-\\u00DF])(?=.*[\\u00E0-\\u00E5])(?=.*[\\u00E8-\\u00EF])(?=.*[\\u00F1-\\u00F6])(?=.*[\\u00F8-\\u00FF])(?=.*[\\u0100-\\u0135])(?=.*[\\u0138-\\u013E])(?=.*[\\u0141-\\u0148])(?=.*[\\u014A-\\u017E])(?=.*[\\u0180-\\u01C3])(?=.*[\\u01CD-\\u01F0])(?=.*[\\u01F4-\\u01F5])(?=.*[\\u01FA-\\u0217])(?=.*[\\u0250-\\u02A8])(?=.*[\\u02BB-\\u02C1])(?=.*[\\u0386])(?=.*[\\u0388-\\u038A])(?=.*[\\u038C])(?=.*[\\u038E-\\u03A1])(?=.*[\\u03A3-\\u03", "\n  const pattern = /[^ ]\\w+$/;\n  return pattern.test(text);\n}\n", "\n  const testWords = text.split('');\n  return testWords[testWords.length - 1].length > 1;\n}\n", "\n  let match = false;\n  let i = text.length;\n  while (i > 0) {\n    if (text[i - 1] === '.' || text[i - 1] === '?' || text[i - 1] === '!') {\n      match = true;\n      break;\n    }\n    i--;\n  }\n  return match;\n}\n", "\n  // Write your code here\n  return text.match(/[A-Za-z]+[\\s]?[A-Za-z]*$/)!== null;\n}\n"]}
{"task_id": "MBJSP/338", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countSubstringWithEqualEnds(s) {\n/**\n * * Write a JavaScript function to count the number of substrings with same first and last characters.\n */", "entry_point": "countSubstringWithEqualEnds", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar x0 = countSubstringWithEqualEnds(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcab\";\nvar x1 = countSubstringWithEqualEnds(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abc\";\nvar x2 = countSubstringWithEqualEnds(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const str = s.split('');\n    let subCount = 0;\n    for (let i = 0; i < str.length - 1; i++) {\n        for (let j = i + 1; j < str.length; j++) {\n            const subStr = str[i] + str[j];\n            if (str[i].toUpperCase() === str[j].toUpperCase() && subStr === subStr.toUpperCase()) {\n                subCount++;\n            }\n        }\n    }\n    return subCount;\n}\n", "\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    result.push(s.substr(i, s.length - i));\n  }\n  return result;\n}\n", "\n  return s.split('x').map(string => string.substr(0, string.length - 1)).reduce((a, b) => a + b);\n}\n", "\n  return s.split('').map(x => x.length).filter(x => x === 2).reduce((a, b) => a + b, 0);\n}\n", "\n  let substringCount = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    let s2 = s.substring(i, i + 2);\n    substringCount += s2.length;\n  }\n  return substringCount;\n}\n"]}
{"task_id": "MBJSP/339", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findDivisor(x, y) {\n/**\n * * Write a JavaScript function to find the maximum occuring divisor in an interval.\n */", "entry_point": "findDivisor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 2;\nvar x0 = findDivisor(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 5;\nvar x1 = findDivisor(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 10;\nvar x2 = findDivisor(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const max = x / y, result = [];\n  for (let i = max; i >= 1; i--) {\n    const check = x / i;\n    if (check === y) {\n      result.push(check);\n    }\n  }\n  return Math.max(...result);\n}\n", "\n  let maxDivisor = 0;\n  for (let i = 1; i <= Math.sqrt(x); i++) {\n    if (x % i === 0) {\n      if (i > maxDivisor) {\n        maxDivisor = i;\n      }\n      if (x / i > maxDivisor) {\n        maxDivisor = x / i;\n      }\n    }\n  }\n  return maxDivisor;\n}\n", "\n  const result = [];\n  for (let i = x; i <= y; i++) {\n    let count = 0;\n    for (let j = 1; j < i; j++) {\n      if (i % j === 0) {\n        count++;\n      }\n    }\n    if (count > result[count].length) {\n      result[count] = [];\n    }\n    result[count].push(i);\n  }\n  let max = 0;\n  for (let i = 0; i < result.length; i++) {\n    if (result[i].length > max) {\n      max = result[i].length;\n    }\n  }\n  return result[max][0];\n}\n", "\n  const sortedX = [...x.slice(1)].sort((a, b) => a - b);\n  for (let i = sortedX.length - 1; i >= 0; i--) {\n    if (x[0] % sortedX[i] === 0) {\n      return sortedX[i];\n    }\n  }\n}\n", "\n  return Math.max(x, y);\n}\n"]}
{"task_id": "MBJSP/340", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumThreeSmallestNums(lst) {\n/**\n * * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */", "entry_point": "sumThreeSmallestNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 30, 40, 50, 60, 7];\nvar x0 = sumThreeSmallestNums(arg00);\nvar v0 = 37;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = sumThreeSmallestNums(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 4, 5];\nvar x2 = sumThreeSmallestNums(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = {};\n  const smallestNumbers = [...lst].sort((a, b) => b - a);\n  result[3] = smallestNumbers[2] + smallestNumbers[1] + smallestNumbers[0];\n  return result;\n}\n", "\n  const result = lst.reduce((a, b) => (a + b) > 9? (a + b) : (a + b));\n  return result;\n}\n", "\n  const smallestNum = Math.min(...lst);\n  const result = lst.reduce((a, b, c) => (a + b + c) - smallestNum, 0);\n  return result;\n}\n", "\n  let lst2 = lst.slice(3);\n  lst2.sort(", "\n  const lstInts = lst.map(x => parseInt(x, 10));\n  const sortedLstInts = lstInts.sort((a, b) => b - a);\n  const min = Math.min(sortedLstInts[0], sortedLstInts[1], sortedLstInts[2]);\n  const max = Math.max(sortedLstInts[0], sortedLstInts[1], sortedLstInts[2]);\n  const thirdSmallest = Math.min(min, max) + Math.max(min, max);\n  return thirdSmallest;\n}\n"]}
{"task_id": "MBJSP/342", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMinimumRange(list) {\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */", "entry_point": "findMinimumRange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]];\nvar x0 = findMinimumRange(arg00);\nvar v0 = [4, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]];\nvar x1 = findMinimumRange(arg10);\nvar v1 = [4, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]];\nvar x2 = findMinimumRange(arg20);\nvar v2 = [5, 7];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    let minRange = null;\n    for (let i = 0; i < list.length; i++) {\n      const startIndex = list[i].indexOf(list[i].toUpperCase());\n      if (startIndex === -1) {\n        continue;\n      } else {\n        if (minRange == null || minRange.length < startIndex + list[i].length) {\n          minRange = list[i].substr(startIndex, list[i].length);\n        }\n      }\n    }\n    return minRange;\n}\n", "\n  const min = list[0], max = list[0];\n  for (let i = 1; i < list.length; i++) {\n    min = Math.min(list[i], min);\n    max = Math.max(list[i], max);\n  }\n  return [min, max];\n}\n", "\n  let minStart = list[0], minEnd = list[0];\n  for (let i = 1; i < list.length; i++) {\n    const start = Math.min(list[i], list[i - 1]);\n    const end = Math.max(list[i], list[i - 1]);\n    if (start < minStart) {\n      minStart = start;\n    }\n    if (end > minEnd) {\n      minEnd = end;\n    }\n  }\n  return [minStart, minEnd];\n}\n", "\n  const smallRange = [];\n  for (let i = 0; i < list.length - 1; i++) {\n    const min = list[i].toString().toLowerCase();\n    const max = list[i + 1].toString().toLowerCase();\n    const lowerRange = min + \"-\" + max;\n    if (smallRange.toString().toLowerCase().indexOf(lowerRange) === -1) {\n      smallRange.push(lowerRange);\n    }\n  }\n  return smallRange;\n}\n", "\n  const minMax = {\n      min: list[0],\n      max: list[0]\n  };\n  for (let i = 1; i < list.length; i++) {\n    const min = Math.min(list[i], minMax.min);\n    const max = Math.max(list[i], minMax.max);\n    minMax.min = min;\n    minMax.max = max;\n  }\n  return [minMax.min, minMax.max];\n}\n"]}
{"task_id": "MBJSP/343", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction digLet(s) {\n/**\n * * Write a function to calculate the number of digits and letters in a string.\n */", "entry_point": "digLet", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = digLet(arg00);\nvar v0 = [6, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = digLet(arg10);\nvar v1 = [7, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python3.0\";\nvar x2 = digLet(arg20);\nvar v2 = [6, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let len = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      len++;\n    } else {\n      len++;\n    }\n  }\n  return {\n    len,\n    letNum: s.toLowerCase().replace(/[a-z]/g, '').length,\n  }\n}\n", "\n  let digits = 0;\n  let letters = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 47 && s.charCodeAt(i) < 58) {\n      letters++;\n    } else if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n      letters++;\n    } else {\n      digits++;\n    }\n  }\n  return [digits, letters];\n}\n", "\n  const letters = s.split('');\n  const digits = s.split('').length - letters.length;\n  return {\n    letters: letters.length,\n    digits: digits\n  };\n}\n", "\n  const test = s.replace(/[^A-Za-z0-9]/gi, '');\n  const digits = test.length;\n  const letters = test.replace(/[^A-Za-z0-9]/gi, '').length;\n  return [digits, letters];\n}\n", "\n  const ch = [...s].map(char => char.charCodeAt());\n  const num = [...s].map(char => char.charCodeAt(0));\n  const sum = (ch.reduce((a, b) => a + b, 0) + num.reduce((a, b) => a + b, 0));\n  const letters = s.split('').map(char => char.charCodeAt(0)).reduce((a, b) => a + b, 0);\n  const digits = s.split('').reduce((a, b) => a + b, 0);\n  return { sum, letters, digits };\n}\n"]}
{"task_id": "MBJSP/344", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countOddSquares(n, m) {\n/**\n * * Write a JavaScript function to find number of elements with odd factors in a given range.\n */", "entry_point": "countOddSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 100;\nvar x0 = countOddSquares(arg00, arg01);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 8;\nvar arg11 = 65;\nvar x1 = countOddSquares(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 5;\nvar x2 = countOddSquares(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = n; i <= m; i++) {\n    const nums = [];\n    for (let j = 1; j <= i; j++) {\n      if (i % j === 0) {\n        nums.push(j);\n      }\n    }\n    nums.forEach((num) => {\n      if (n % num === 0) {\n        result.push(num);\n      }\n    });\n  }\n  return result;\n}\nconst sample = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];\n", "\n  // Write your code here\n  const result = [];\n  const numbers = [];\n  let counter = 0;\n  for (let i = n; i <= m; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n    numbers.push(i);\n  }\n  const oddNumbers = numbers.filter(item => item % 2 === 1);\n  for (let i = 0; i < oddNumbers.length; i++) {\n    counter += result[i];\n  }\n  return counter;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = n; i < m; i++) {\n    let count = 0;\n    for (let j = 1; j * j <= i; j++) {\n      if (i % j === 0) {\n        count++;\n      }\n    }\n    if (count % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = n; i <= m; i++) {\n    if (i % square(2) === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    const num = i;\n    for (let j = 1; j * j <= num; j++) {\n      const square = num / j;\n      if (square * j!== num) {\n        break;\n      }\n      if (j === square) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/345", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction diffConsecutivenums(nums) {\n/**\n * * Write a function to find the difference between two consecutive numbers in a given list.\n */", "entry_point": "diffConsecutivenums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nvar x0 = diffConsecutivenums(arg00);\nvar v0 = [0, 2, 1, 0, 1, 1, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 8, 9, 6, 10];\nvar x1 = diffConsecutivenums(arg10);\nvar v1 = [1, 3, 1, -3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7];\nvar x2 = diffConsecutivenums(arg20);\nvar v2 = [1, 1, 1, 1, 0, 0, 0, 1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  const arr = [];\n  for (let i = 0; i < nums.length; i++) {\n    arr.push(nums[i]);\n  }\n  arr.sort((a, b) => a - b);\n  let diff = arr[1] - arr[0];\n  for (let i = 0; i < arr.length - 1; i++) {\n    diff = Math.max(diff, arr[i + 1] - arr[i]);\n  }\n  return diff;\n}\n", "\n    // Write your code here\n    return nums[nums.length - 1] - nums[0];\n}\n", "\n  let result = 0;\n  for (let i = 0; i < nums.length - 1; i++) {\n    result = result + nums[i] - nums[i + 1];\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length - 1; i++) {\n    result.push(nums[i + 1] - nums[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  const currentNum = nums[0];\n  const previousNum = currentNum - 1;\n  result.push(currentNum);\n  result.push(previousNum);\n  for (let i = 1; i < nums.length; i++) {\n    const diff = nums[i] - nums[i - 1];\n    if (diff > 1) {\n      result.push(diff);\n    }\n    currentNum = nums[i];\n    previousNum = currentNum - 1;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/346", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction zigzag(n, k) {\n/**\n * * Write a function to find entringer number e(n, k).\n */", "entry_point": "zigzag", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = zigzag(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar x1 = zigzag(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 1;\nvar x2 = zigzag(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testTup = [n];\n  for (let i = 1; i < k; i++) {\n    testTup.push(testTup[i] + testTup[i - 1]);\n  }\n  return testTup[testTup.length - 1];\n}\n", "\n  let result = [];\n  for (let i = 0; i < n; i++) {\n    if (i % k === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  let e = 1;\n  let i = 1;\n  for (let l = 0; l < n; l++) {\n    e = e * (k + 1 - i);\n    e = e / (i + 1);\n    i++;\n  }\n  return e;\n}\n```\n\n</section>\n", "\n  let result = 0;\n  const testTup = n.split('');\n  const val = multiplyElements(testTup);\n  if (k === 1) {\n    return val[0];\n  }\n  for (let i = 1; i <= val[0]; i++) {\n    const zig = testTup[val[0] - i + 1];\n    const zigzag = zigzag(zig, k - 1);\n    result = result + zigzag;\n  }\n  return result;\n}\n", "\n  const lastIndex = k * n + k - 1;\n  const firstIndex = k * n;\n  for (let i = lastIndex + 1; i < firstIndex; i++) {\n    if (i % k === 0) {\n      return i;\n    }\n  }\n  return 0;\n}\n"]}
{"task_id": "MBJSP/347", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countSquares(m, n) {\n/**\n * * Write a JavaScript function to count the number of squares in a rectangle.\n */", "entry_point": "countSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = countSquares(arg00, arg01);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar x1 = countSquares(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 2;\nvar x2 = countSquares(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const left = m * n;\n  const right = (m - 1) * n;\n  const top = m * (n - 1);\n  const bottom = (m - 1) * (n - 1);\n  return right - left + bottom - top;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = m; i > 0; i--) {\n    for (let j = 0; j <= n; j++) {\n      if (j * j === i) {\n        result.push(j);\n      }\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(m);\n  }\n  return result;\n}\n", "\n    // Write your code here\n  return 0;\n}\n", "\n  const x = m - 1;\n  const y = n - 1;\n  const numberOfSquares = x * y;\n  return numberOfSquares;\n}\n"]}
{"task_id": "MBJSP/348", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findWays(m) {\n/**\n * * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n */", "entry_point": "findWays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = findWays(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = findWays(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar x2 = findWays(arg20);\nvar v2 = 14;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    const result = [];\n    const count = {};\n    let way = [];\n    for (let i = 0; i < m; i++) {\n        count[i] = 0;\n        way.push(0);\n    }\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < m - 1; j++) {\n            if (i + j < m) {\n                count[i + j] = count[i + j] + 1;\n                if (i + j < m) {\n                    way[i + j] = way[i + j] + i + j;\n                }\n            }\n        }\n    }\n    for (let i = 0; i < m; i++) {\n        if (count[i] >= 1) {\n            result.push({\n                count: count[i],\n                way: way[i]\n            });\n        }\n    }\n    return result;\n}\n", "\n  const prefix = new Array(m + 1).fill(0);\n  for (let i = 0; i < m; i++) {\n    prefix[i + 1] = prefix[i] + testTup[i];\n  }\n  const result = [];\n  for (let i = 0; i < m; i++) {\n    for (let j = i + 1; j < m; j++) {\n      result.push(prefix[j] - prefix[i]);\n    }\n  }\n  return result;\n}\n", "\n  return m * (m + 1) / 2;\n}\n", "\n  // Write your code here\n  return Math.pow(2, m) - 1;\n}\n", "\n    // Write your code here\n    const result = [];\n    let counter = 0;\n    const gen = (length) => {\n        if (counter === m) {\n            result.push(1);\n            return;\n        }\n        for (let i = 0; i < m; i++) {\n            counter += 1;\n            result.push(result[i] + result[i + length]);\n        }\n        counter -= 1;\n    };\n    gen(1);\n    return result[result.length - 1];\n}\n"]}
{"task_id": "MBJSP/349", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction check(string) {\n/**\n * * Write a JavaScript function to check whether the given string is a binary string or not.\n */", "entry_point": "check", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"01010101010\";\nvar x0 = check(arg00);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"name0\";\nvar x1 = check(arg10);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"101\";\nvar x2 = check(arg20);\nvar v2 = \"Yes\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return!string.match(/[01]/g) && string.length > 1;\n}\n", "\n  const isBinary = string.split('').every(s => s.length % 2 === 0);\n  return isBinary;\n}\n", "\n  return string.indexOf(\"1\") >= 0;\n}\n", "\n  let first = string.charCodeAt(0);\n  let second = string.charCodeAt(1);\n  if (first == second) {\n    return false;\n  } else {\n    return true;\n  }\n}\n", "\n  return string.indexOf(\"101\")!== -1;\n}\n"]}
{"task_id": "MBJSP/350", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minimumLength(s) {\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */", "entry_point": "minimumLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"mnm\";\nvar x0 = minimumLength(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar x1 = minimumLength(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcb\";\nvar x2 = minimumLength(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let minLen = s.length;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] === s[i + 1]) {\n      s = s.slice(0, i) + s.slice(i + 2);\n      minLen = s.length;\n      i = -1;\n    }\n  }\n  return minLen;\n}\n", "\n  return s.replace(/([aeiou])+/g, \"$1\");\n}\n", "\n  return s.replace(/[']/g, '');\n}\n", "\n  const result = [];\n  let temp;\n  for (let i = 0; i < s.length; i++) {\n    temp = s.substring(i, i + 1);\n    if (result.indexOf(temp) === -1) {\n      result.push(temp);\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  let result = s.length - 1;\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      if (s[i] === s[j] && result < (j - i)) {\n        result = j - i;\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/351", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction firstElement(arr, n, k) {\n/**\n * * Write a JavaScript function to find the first element occurring k times in a given array.\n */", "entry_point": "firstElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, 3, 4, 5];\nvar arg01 = 6;\nvar arg02 = 1;\nvar x0 = firstElement(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1, 3, 4];\nvar arg11 = 5;\nvar arg12 = 2;\nvar x1 = firstElement(arg10, arg11, arg12);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 3, 5, 7, 1, 2, 3, 5];\nvar arg21 = 10;\nvar arg22 = 2;\nvar x2 = firstElement(arg20, arg21, arg22);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == k) {\n      result = arr[i];\n      break;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === k) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] === k) {\n      return i;\n    }\n    i++;\n  }\n  return null;\n}\n", "\n  let result = 0;\n  let arrLen = arr.length;\n  let counter = 0;\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] === n) {\n      counter++;\n    }\n    if (counter === k) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"]}
{"task_id": "MBJSP/352", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction uniqueCharacters(str) {\n/**\n * * Write a JavaScript function to check whether all the characters in a given string are unique.\n */", "entry_point": "uniqueCharacters", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar x0 = uniqueCharacters(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = uniqueCharacters(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abab\";\nvar x2 = uniqueCharacters(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str.split(\"\").sort().join(\"\") === str;\n}\n", "\n  let teststr = '';\n  for (let i = 0; i < str.length; i++) {\n    teststr += str[i];\n  }\n  return teststr === str.replace(/(.)\\1+/g, '');\n}\n", "\n  const uniques = [];\n  for (let i = 0; i < str.length; i++) {\n    if (uniques.indexOf(str.charAt(i)) === -1) {\n      uniques.push(str.charAt(i));\n    }\n  }\n  return uniques.length === str.length;\n}\n", "\n    // Write your code here\n    const result = true;\n    const uChar = new Set();\n    for (let i = 0; i < str.length; i++) {\n        if (uChar.has(str.charAt(i))) {\n            result = false;\n            return result;\n        } else {\n            uChar.add(str.charAt(i));\n        }\n    }\n    return result;\n}\n", "\n  // Write your code here\n  let result = true;\n  let check = str.split(\"\");\n  for (let i = 0; i < check.length; i++) {\n    if (check[i] === check[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/353", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeColumn(list1, n) {\n/**\n * * Write a function to remove a specified column from a given nested list.\n */", "entry_point": "removeColumn", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nvar arg01 = 0;\nvar x0 = removeColumn(arg00, arg01);\nvar v0 = [[2, 3], [4, 5], [1, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nvar arg11 = 2;\nvar x1 = removeColumn(arg10, arg11);\nvar v1 = [[1, 2], [-2, 4], [1, -1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]];\nvar arg21 = 0;\nvar x2 = removeColumn(arg20, arg21);\nvar v2 = [[3], [7], [3], [15, 17], [7], [11]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const newlist = [];\n  for (let i = 0; i < list1.length; i++) {\n    const newele = list1[i].map((ele) => ele[n]);\n    newlist.push(newele);\n  }\n  return newlist;\n}\n// const value = [\n//   { name: 'Raju', age: '22' },\n//   { name: 'Vinay', age: '19' },\n//   { name: 'Mayank', age: '25' },\n//   { name: 'Saurabh', age: '22' },\n// ];\n// removeColumn(value, 1); // returns [{ name: 'Raju', age: '22' }]\n// removeColumn(value, 0); // returns [{ name: 'Vinay', age: '19' }, { name: 'Mayank', age: '25' }, { name: 'Saurabh', age: '22' }]\n// removeColumn(value, 2); // returns [{ name: 'Raju', age: '22' }, { name: 'Saurabh', age: '22' }]\n\n// const arr = [\n//   { a: 'a', b: 'b' },\n//   { a: 'c', b: 'd' },\n//   { a: 'e', b: 'f' }\n// ];\n// removeColumn(arr, 1); // returns [{ a: 'a', b: 'b' }, { a: 'e', b: 'f' }]\n// removeColumn(arr, 0); // returns [{ a: 'c', b: 'd' }, { a: 'e', b: 'f' }]\n// remove", "\n  const newlist = [];\n  for (let i = 0; i < list1.length; i++) {\n    const nums = list1[i];\n    nums.splice(n, 1);\n    newlist.push(nums);\n  }\n  return newlist;\n}\n", "\n  const temp1 = [];\n  for (let i = 0; i < list1.length; i++) {\n    const temp2 = [];\n    for (let j = 0; j < list1[i].length; j++) {\n      if (j!== n) {\n        temp2.push(list1[i][j]);\n      }\n    }\n    temp1.push(temp2);\n  }\n  return temp1;\n}\n", "\n  const newList = [];\n  let temp;\n  list1.forEach(row => {\n    temp = row;\n    if (temp.length > n) {\n      temp.splice(n, temp.length - n);\n    }\n    newList.push(temp);\n  });\n  return newList;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (i === n) {\n      continue;\n    }\n    result.push(list1[i][n]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/354", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction tnAp(a, n, d) {\n/**\n * * Write a function to find t-nth term of arithemetic progression.\n */", "entry_point": "tnAp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = tnAp(arg00, arg01, arg02);\nvar v0 = 9;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = tnAp(arg10, arg11, arg12);\nvar v1 = 22;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar arg22 = 5;\nvar x2 = tnAp(arg20, arg21, arg22);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n <= 0) return \"invalid input\";\n  const mod = a % d;\n  if (mod === 0) return \"invalid input\";\n  const x = a * Math.pow(10, n) + mod;\n  const diff = x - a;\n  const prevTerm = x - diff / d;\n  return prevTerm;\n}\n", "\n  return (a * n) / (d + n);\n}\n", "\n  const x = n * (a / d);\n  return x;\n}\n", "\n    let result = a;\n    for (let i = 0; i < n; i++) {\n        result += d;\n    }\n    return result;\n}\n", "\n  return Math.floor(d * (n - 1) / (a - d)) + 1;\n}\n"]}
{"task_id": "MBJSP/355", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countRectangles(radius) {\n/**\n * * Write a JavaScript function to count the number of rectangles in a circle of radius r.\n */", "entry_point": "countRectangles", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countRectangles(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar x1 = countRectangles(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 0;\nvar x2 = countRectangles(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  return 0;\n}\n", "\n  const result = [];\n  let total = 0;\n  for (let i = 0; i < 100; i++) {\n    total += i;\n    if (total > radius * radius * Math.PI) {\n      total = 0;\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  const pi = 3.14;\n  const rectangles = [];\n  let totalArea = 0;\n  let currentArea = 0;\n  for (let i = 0; i < 2 * Math.PI; i++) {\n    currentArea = i * (radius * 2 + radius);\n    if (currentArea > totalArea) {\n      totalArea = currentArea;\n      rectangles.push(i);\n    }\n  }\n  return rectangles.length;\n}\n", "\n  const radiusSquared = radius * radius;\n  const result = 0;\n  for (let i = 0; i < 2 * Math.PI; i++) {\n    if (i >= Math.PI && i <= Math.PI + (radius * 2) || i >= Math.PI + (radius * 2) && i <= 2 * Math.PI) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  const r = radius;\n  let count = 0;\n  for (let x = 0; x <= Math.PI; x += (Math.PI / 8)) {\n    for (let y = 0; y <= 2 * Math.sqrt(r * r - x * x); y += (2 * r)) {\n      if (x + y <= Math.PI * r) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/356", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findAngle(a, b) {\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */", "entry_point": "findAngle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 47;\nvar arg01 = 89;\nvar x0 = findAngle(arg00, arg01);\nvar v0 = 44;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 45;\nvar arg11 = 95;\nvar x1 = findAngle(arg10, arg11);\nvar v1 = 40;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 50;\nvar arg21 = 40;\nvar x2 = findAngle(arg20, arg21);\nvar v2 = 90;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const degrees = (180 - (a + b)) % 360;\n  return degrees;\n}\n", "\n  return Math.atan2(b - a, a - c);\n}\n", "\n  const angleA = Math.atan(a / b);\n  const angleB = Math.PI - angleA;\n  return angleA + angleB;\n}\n", "\n  const result = [];\n  if (a + b < 180 && a + c < 180 && b + c < 180) {\n    const a1 = a * a;\n    const b1 = b * b;\n    const c1 = c * c;\n    const s1 = (a1 + b1 + c1) / 2;\n    const a2 = s1 * (s1 - a1) * (s1 - b1) * (s1 - c1);\n    const b2 = s1 * (c1 - b1) * (a1 - b1) * (s1 - c1);\n    const c2 = s1 * (a1 - b1) * (b1 - c1) * (c1 - a1);\n    const s2 = Math.sqrt(a2 + b2 + c2);\n    const ang1 = Math.acos((s1 * s1 + s2 * s2 - s1 * s2) / (2 * s1 * s2)) * 180 / Math.PI;\n    const ang2 = Math.acos((s1 * s1 + s2 * s2 - s2 * s1) / (2 * s1 * s2)) * 180 / Math.PI;\n    const ang3 = Math.acos((s1 * s1 + s2 * s2 - s1 * s2) / (2 * s1 * s2)) * 180 / Math.PI;\n    result.push(ang1);\n    result.push(ang2);\n    result.push(ang3);\n  }\n  return result;\n}\n", "\n  const lengthAB = a.length;\n  const lengthBA = b.length;\n  const lengthAC = a.length;\n  const lengthCA = b.length;\n  let cosAngleABC = lengthAB * lengthAB + lengthBA * lengthBA - lengthAC * lengthAC - lengthCA * lengthCA;\n  cosAngleABC = cosAngleABC / (lengthAB * lengthBA);\n  let angleABC = Math.acos(cosAngleABC);\n  return Math.toDegrees(angleABC);\n}\n"]}
{"task_id": "MBJSP/357", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMax(testlist) {\n/**\n * * Write a function to find the maximum element of all the given tuple records.\n */", "entry_point": "findMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]];\nvar x0 = findMax(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]];\nvar x1 = findMax(arg10);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]];\nvar x2 = findMax(arg20);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const max = testlist[0];\n  for (let i = 1; i < testlist.length; i++) {\n    if (max < testlist[i]) {\n      max = testlist[i];\n    }\n  }\n  return max;\n}\n", "\n  // Write your code here\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    if (testList[i].length == 6) {\n      if (testList[i][1] > max) max = testList[i][1];\n    }\n  }\n  return max;\n}\n", "\n  let max = testlist[0];\n  for (let i = 1; i < testlist.length; i++) {\n    if (max < testlist[i]) {\n      max = testlist[i];\n    }\n  }\n  return max;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testList.length; i++) {\n    result.push(testList[i][0]);\n  }\n  return result.reduce((a, b) => a > b? a : b);\n}\n", "\n  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    if (testList[i] >= max) {\n      max = testList[i];\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/358", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction moddivList(nums1, nums2) {\n/**\n * * Write a function to find modulo division of two lists using map and lambda function.\n */", "entry_point": "moddivList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [4, 5, 6];\nvar arg01 = [1, 2, 3];\nvar x0 = moddivList(arg00, arg01);\nvar v0 = [0, 1, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 2];\nvar arg11 = [1, 4];\nvar x1 = moddivList(arg10, arg11);\nvar v1 = [0, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [90, 120];\nvar arg21 = [50, 70];\nvar x2 = moddivList(arg20, arg21);\nvar v2 = [40, 50];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const nums1Map = nums1.map(num1 => num1 * nums1);\n  const nums2Map = nums2.map(num2 => num2 * nums2);\n  const result = [];\n  for (let i = 0; i < nums1Map.length; i++) {\n    const diff = nums1Map[i] - nums2Map[i];\n    if (Math.abs(diff) <= 1e-9) {\n      result.push(0);\n    } else {\n      result.push(Math.round(diff));\n    }\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const testMap = nums1.map(num1 => nums2.map(num2 => num1 - num2))\n  const result = testMap.reduce((arr, test) => arr.concat(test), []);\n  return result;\n}\n", "\n  const mapResult = nums1.map(num1 => nums2.map(num2 => num1 % num2))\n  return mapResult;\n}\n", "\n  const result = nums1.map(nums => nums % nums2[i]);\n  return result;\n}\n", "\n  return nums1.map((num1, num2) => num1 % num2);\n}\n\nmodule.exports = {\n  solution: solution,\n  types: types,\n  names: names,\n  numbers: numbers,\n  string_to_numbers: string_to_numbers,\n  numbers_to_string: numbers_to_string,\n  tuple: tuple,\n  nested: nested,\n  create_tuple: create_tuple,\n  to_int_list: to_int_list,\n  numbers_to_string: numbers_to_string,\n  nested_map: nested_map,\n  generate_numbers: generate_numbers,\n  flip: flip,\n  numbers_to_word: numbers_to_word,\n  string_to_words: string_to_words,\n  string_to_words_with_punctuation: string_to_words_with_punctuation,\n  string_to_words_with_punctuation_with_space: string_to_words_with_punctuation_with_space,\n  words_to_string: words_to_string,\n  words_to_string_with_punctuation: words_to_string_with_punctuation,\n  words_to_string_with_punctuation_with_space: words_to_string_with_punctuation_with_space,\n  get_string: get_string,\n  get_words: get_words,\n  string_to_number: string_to_number,\n  string_to_words_with_punctuation_with_space: string_to_words_with_punct"]}
{"task_id": "MBJSP/359", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n */", "entry_point": "checkSolution", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = checkSolution(arg00, arg01, arg02);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar arg12 = 3;\nvar x1 = checkSolution(arg10, arg11, arg12);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = -5;\nvar arg22 = 6;\nvar x2 = checkSolution(arg20, arg21, arg22);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  a * a + b * b = c * c;\n  const root1 = Math.sqrt(b * b - (4 * a * c));\n  const root2 = -Math.sqrt(b * b - (4 * a * c));\n  return root1 + root2 === 0? \"Double\" : \"Not Doubt\";\n}\n```\n\n</section>\n", "\n  let result = false;\n  for (let i = 0; i < a.length; i++) {\n    const discriminant = b[i] * b[i] - 4 * a[i] * c[i];\n    if (discriminant >= 0) {\n      const discriminant2 = Math.sqrt(discriminant);\n      if (b[i] + discriminant2 === 0) {\n        result = true;\n      } else if (b[i] - discriminant2 === 0) {\n        result = true;\n      }\n    }\n  }\n  return result;\n}\n", "\n  const n = (a * a - 4 * b * c) > 0? 2 : 1;\n  return n;\n}\n", "\n  const quadraticRoots = {\n    a: a,\n    b: b,\n    c: c,\n    solutions: [],\n    check: (r) => {\n        const discriminant = r * r - 4 * a * b;\n        if (discriminant < 0) {\n            return 'No real solutions';\n        }\n        const sqrt = Math.sqrt(discriminant);\n        const t1 = (-r - sqrt) / (2 * a);\n        const t2 = (-r + sqrt) / (2 * a);\n        if (t1!== t2) {\n            quadraticRoots.solutions.push(t1);\n            quadraticRoots.solutions.push(t2);\n        }\n        return quadraticRoots.solutions.length === 2? 'Two real solutions' : 'One real solution';\n    }\n  };\n  return quadraticRoots.check(b * b - 4 * a * c);\n}\n", "\n    let roots = quadratic(a, b, c);\n    return (roots[0] === 2 * roots[1] || roots[1] === 2 * roots[0]);\n}\n"]}
{"task_id": "MBJSP/360", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getCarol(n) {\n/**\n * * Write a function to find the n\u2019th carol number.\n */", "entry_point": "getCarol", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = getCarol(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = getCarol(arg10);\nvar v1 = 223;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = getCarol(arg20);\nvar v2 = 959;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.pow(n, 1.0) + 2;\n}\n", "\n  const carol = [];\n  for (let i = 0; i < n; i++) {\n    carol.push(i + 1);\n  }\n  return carol[n - 1];\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n}\n", "\n    const result = [];\n    const carolNum = {};\n    carolNum[n] = carolNum[n] + 1 || 1;\n    result.push(carolNum[n]);\n    return result;\n}\n"]}
{"task_id": "MBJSP/361", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeEmpty(list1) {\n/**\n * * Write a function to remove empty lists from a given list of lists.\n */", "entry_point": "removeEmpty", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[], [], [], \"Red\", \"Green\", [1, 2], \"Blue\", [], []];\nvar x0 = removeEmpty(arg00);\nvar v0 = [\"Red\", \"Green\", [1, 2], \"Blue\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[], [], [], [], [], \"Green\", [1, 2], \"Blue\", [], []];\nvar x1 = removeEmpty(arg10);\nvar v1 = [\"Green\", [1, 2], \"Blue\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[], [], [], \"Python\", [], [], \"programming\", \"language\", [], [], [], [], []];\nvar x2 = removeEmpty(arg20);\nvar v2 = [\"Python\", \"programming\", \"language\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = [];\n  list1.forEach(list => {\n    if (list.length > 0) {\n      result.push(list);\n    }\n  });\n  return result;\n}\n", "\n    const result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].length!== 0) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i]!== null) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i]) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\nconst list1 = [[\"a\"], [\"b\"], [\"c\"]];\nconst list2 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]];\n\n/* \n\nTests\n\n[\n  [\n    [\n      [\"a\", \"b\", \"c\"],\n      [\"d\", \"e\"]\n    ]\n  ],\n  [\n    [\n      [\"a\"],\n      [\"b\"],\n      [\"c\"]\n    ]\n  ],\n  [\n    [\n      [\"a\"],\n      [\"b\"],\n      [\"c\", \"d\"]\n    ]\n  ],\n  [\n    [\n      [\"a\", \"b\", \"c\"]\n    ]\n  ],\n  [\n    [\n      [\"a\", \"b\", \"c\"],\n      [\"d\", \"e\"]\n    ]\n  ]\n]\n\n*/\n\n\n", "\n  return list1.filter(val =>!!val);\n}\n"]}
{"task_id": "MBJSP/362", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxOccurrences(nums) {\n/**\n * * Write a JavaScript function to find the item with maximum occurrences in a given list.\n */", "entry_point": "maxOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 2, 3, 12, 4, 2];\nvar x0 = maxOccurrences(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 6, 7, 0, 1, 0, 1, 0];\nvar x1 = maxOccurrences(arg10);\nvar v1 = [1, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 1, 2, 4, 1];\nvar x2 = maxOccurrences(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const count = {};\n  for (let i = 0; i < nums.length; i++) {\n    count[nums[i]] = count[nums[i]] + 1 || 1;\n  }\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (count[nums[i]] > max) {\n      max = count[nums[i]];\n    }\n  }\n  return max;\n}\n", "\n  const numsArr = nums.map(num => parseInt(num, 10));\n  let maxOccurrences = 0;\n  for (let i = 0; i < numsArr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < numsArr.length; j++) {\n      if (numsArr[i] === numsArr[j]) count++;\n    }\n    if (count > maxOccurrences) {\n      maxOccurrences = count;\n    }\n  }\n  return maxOccurrences;\n}\n", "\n    const testTup = nums.map(num => parseInt(num, 10));\n    let maxOccur = 0;\n    for (let num = 0; num < nums.length; num++) {\n        if (testTup.indexOf(nums[num]) > maxOccur) {\n            maxOccur = testTup.indexOf(nums[num]);\n        }\n    }\n    return nums[maxOccur];\n}\n", "\n  const max = Math.max.apply(null, nums.map(num => nums.indexOf(num)));\n  const index = nums.map(num => nums.indexOf(num)).indexOf(max);\n  const result = nums.slice(0);\n  result.splice(index, 1);\n  return result;\n}\n", "\n  const numsArr = Array.from(nums);\n  const maxOccur = numsArr.reduce((acc, curr) => curr === numsArr[numsArr.length - 1]? curr : Math.max(curr, acc), 0);\n  return maxOccur;\n}\n"]}
{"task_id": "MBJSP/363", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction addKElement(testlist, k) {\n/**\n * * Write a function to add the k elements to each element in the tuple.\n */", "entry_point": "addKElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3, 4], [2, 4, 6], [3, 8, 1]];\nvar arg01 = 4;\nvar x0 = addKElement(arg00, arg01);\nvar v0 = [[5, 7, 8], [6, 8, 10], [7, 12, 5]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nvar arg11 = 8;\nvar x1 = addKElement(arg10, arg11);\nvar v1 = [[9, 10, 11], [12, 13, 14], [15, 16, 17]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 12, 13], [14, 15, 16], [17, 18, 19]];\nvar arg21 = 9;\nvar x2 = addKElement(arg20, arg21);\nvar v2 = [[20, 21, 22], [23, 24, 25], [26, 27, 28]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testlist.map(val => val + k);\n}\nconst list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst list2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nconsole.log(`The lists are ${list1} and ${list2}`);\nconsole.log(`The numbers in the first list are: ${list1.map(x => x)}`);\nconsole.log(`The numbers in the second list are: ${list2.map(x => x)}`);\nconsole.log(`The numbers in the lists are: ${list1.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list2.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list1.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list2.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list1.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list2.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list1.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list2.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list1.map(x => x)}.`);\nconsole.log(`The numbers in the lists are: ${list2.map(x => x)}.`);", "\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    result.push(testlist[i] + k);\n  }\n  return result;\n}\n", "\n  const ktup = k;\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    result.push(testlist[i].slice(0, ktup) + testlist[i].slice(ktup));\n  }\n  return result;\n}\n", "\n  let counter = 0;\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (counter < k) {\n      result.push(testTup[i]);\n      counter++;\n    }\n    if (counter === k) {\n      result.push(testTup[i]);\n      counter = 0;\n    }\n  }\n  return result;\n}\n// /*\n//  * Write a ", "\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    const newList = [];\n    for (let j = 0; j < k; j++) {\n      newList.push(testlist[i]);\n    }\n    result.push(newList);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/364", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minFlipToMakeStringAlternate(str) {\n/**\n * * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n */", "entry_point": "minFlipToMakeStringAlternate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"0001010111\";\nvar x0 = minFlipToMakeStringAlternate(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"001\";\nvar x1 = minFlipToMakeStringAlternate(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"010111011\";\nvar x2 = minFlipToMakeStringAlternate(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    const result = 0;\n    let count = 0;\n    let current = '0';\n    for (let i = 0; i < str.length; i++) {\n        current = current + str[i];\n        if (current === '1' || current === '10') {\n            current = current + str[i];\n            count++;\n        }\n        if (current === '1' || current === '11') {\n            current = current + str[i];\n            count++;\n            result = Math.max(result, count);\n            count = 0;\n        }\n    }\n    return result;\n}\n", "\n  let ans = 0;\n  for (let i = 0; i < str.length - 1; i++) {\n    if (str[i]!== str[i + 1]) {\n      ans++;\n    }\n  }\n  return ans;\n}\n", "\n  return Math.ceil(str.length / 2);\n}\n", "\n  const result = 0;\n  const flipped = flipBinaryString(str);\n  for (let i = 0; i < flipped.length; i++) {\n    if (flipped[i] === str[i]) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n  const result = {};\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    chars[str[i]] = chars[str[i]] + 1 || 1;\n  }\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[str[i]] === 1) {\n      if (i + 1 < str.length) {\n        const isEven = (str[i] === '0')? false : true;\n        if (!result[str[i + 1] + isEven]) {\n          result[str[i + 1] + isEven] = 1;\n        } else {\n          result[str[i + 1] + isEven] = result[str[i + 1] + isEven] + 1;\n        }\n      } else {\n        result[str[i]] = 1;\n      }\n    }\n  }\n  return result.reduce((x, y) => x + y);\n}\n"]}
{"task_id": "MBJSP/365", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countDigit(n) {\n/**\n * * Write a JavaScript function to count the number of digits of a given number.\n */", "entry_point": "countDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12345;\nvar x0 = countDigit(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 11223305;\nvar x1 = countDigit(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4123459;\nvar x2 = countDigit(arg20);\nvar v2 = 7;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n === 0? 0 : n % 10 + 1 + countDigit(n / 10);\n}\n", "\n  let number = parseInt(n, 10);\n  let digits = 0;\n  while (number > 0) {\n    number = number / 10;\n    digits++;\n  }\n  return digits;\n}\n", "\n    return Math.log10(n) + 1;\n}\n", "\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n /= 10;\n  }\n  return result;\n}\n", "\n  const result = Math.floor(Math.log10(n)) + 1;\n  return result;\n}\n// Write your code here.\n"]}
{"task_id": "MBJSP/366", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction adjacentNumProduct(listnums) {\n/**\n * * Write a JavaScript function to find the largest product of the pair of adjacent elements from a given list of integers.\n */", "entry_point": "adjacentNumProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6];\nvar x0 = adjacentNumProduct(arg00);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = adjacentNumProduct(arg10);\nvar v1 = 20;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3];\nvar x2 = adjacentNumProduct(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  for (let i = 0; i < listnums.length - 1; i++) {\n    let prod = listnums[i] * listnums[i + 1];\n    if (prod > result) result = prod;\n  }\n  return result;\n}\n```\n\n### Answer\n\n```js\n", "\n  const result = {};\n  for (let i = 0; i < listnums.length - 1; i++) {\n    const a = listnums[i];\n    const b = listnums[i + 1];\n    if (a * b > result[a]) {\n      result[a] = a * b;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < listnums.length - 1; i++) {\n    const tup = [listnums[i], listnums[i + 1]];\n    result.push(adjacentProduct(tup));\n  }\n  return Math.max.apply(null, result);\n}\n", "\n  return Math.max(...listnums.map(multiplyElements))\n}\n", "\n  const result = [];\n  const diffs = [];\n  for (let i = 0; i < list.length - 1; i++) {\n    diffs[i] = list[i] - list[i + 1];\n  }\n  const products = diffs.map(d => d * d);\n  const max = Math.max.apply(Math, products);\n  for (let i = 0; i < products.length; i++) {\n    if (products[i] === max) {\n      result.push([list[i], list[i + 1]]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/368", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction repeatTuples(testtup, n) {\n/**\n * * Write a function to repeat the given tuple n times.\n */", "entry_point": "repeatTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3];\nvar arg01 = 4;\nvar x0 = repeatTuples(arg00, arg01);\nvar v0 = [[1, 3], [1, 3], [1, 3], [1, 3]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2];\nvar arg11 = 3;\nvar x1 = repeatTuples(arg10, arg11);\nvar v1 = [[1, 2], [1, 2], [1, 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 4];\nvar arg21 = 5;\nvar x2 = repeatTuples(arg20, arg21);\nvar v2 = [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(testtup);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(testtup);\n  }\n  return result;\n}\n\nconst duplicateElements = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst duplicates = duplicateElements.map(num => Math.round(Math.random() * duplicateElements.length))\n\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(testtup);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(testtup);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(testtup);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/369", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction lateralsurfaceCuboid(l, w, h) {\n/**\n * * Write a function to find the lateral surface area of cuboid\n */", "entry_point": "lateralsurfaceCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar arg01 = 5;\nvar arg02 = 6;\nvar x0 = lateralsurfaceCuboid(arg00, arg01, arg02);\nvar v0 = 156;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar arg11 = 9;\nvar arg12 = 10;\nvar x1 = lateralsurfaceCuboid(arg10, arg11, arg12);\nvar v1 = 320;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 20;\nvar arg22 = 30;\nvar x2 = lateralsurfaceCuboid(arg20, arg21, arg22);\nvar v2 = 1800;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const surfaceArea = Math.sqrt((Math.pow(l, 2) + Math.pow(w, 2)) * (Math.pow(l, 2) + Math.pow(h, 2)));\n  return surfaceArea;\n}\n", "\n  let result = 0;\n  if (l >= w && l >= h) {\n    result = w * h;\n  } else if (w >= l && w >= h) {\n    result = l * w;\n  } else if (h >= l && h >= w) {\n    result = l * h;\n  }\n  return result;\n}\n", "\n  return (l * w * h);\n}\n", "\n  const result = [\n    (l * w * h),\n    (l * w * h) * 2,\n    (l * w * h) * 2,\n    (l * w * h) * 2,\n    (l * w * h) * 2,\n  ];\n  return result;\n}\n", "\n  const cuboid = {\n    l: l,\n    w: w,\n    h: h\n  };\n  let surfaceArea = 0;\n  if (cuboid.l > cuboid.w && cuboid.l > cuboid.h) {\n    surfaceArea = cuboid.l * cuboid.l * cuboid.h;\n  } else if (cuboid.w > cuboid.l && cuboid.w > cuboid.h) {\n    surfaceArea = cuboid.w * cuboid.w * cuboid.h;\n  } else if (cuboid.h > cuboid.l && cuboid.h > cuboid.w) {\n    surfaceArea = cuboid.h * cuboid.h * cuboid.w;\n  } else {\n    surfaceArea = 0;\n  }\n  return surfaceArea;\n}\n"]}
{"task_id": "MBJSP/370", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction floatSort(price) {\n/**\n * * Write a function to sort a tuple by its float element.\n */", "entry_point": "floatSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]];\nvar x0 = floatSort(arg00);\nvar v0 = [[\"item3\", \"24.5\"], [\"item2\", \"15.10\"], [\"item1\", \"12.20\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]];\nvar x1 = floatSort(arg10);\nvar v1 = [[\"item3\", \"20\"], [\"item1\", \"15\"], [\"item2\", \"10\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]];\nvar x2 = floatSort(arg20);\nvar v2 = [[\"item3\", \"14\"], [\"item2\", \"10\"], [\"item1\", \"5\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedPrice = price.sort((a, b) => a - b);\n  return sortedPrice;\n}\n", "\n  const floatPrice = price.map(num => parseFloat(num));\n  const sortedFloatPrice = floatPrice.sort((a, b) => a - b);\n  return sortedFloatPrice;\n}\n", "\n  const result = [];\n  for (let i = 0; i < price.length; i++) {\n    result.push(price[i]);\n  }\n  result.sort((a, b) => a - b);\n  return result;\n}\n", "\n    let tempPrice = [];\n    let tempIndex = [];\n    for (let i = 0; i < price.length; i++) {\n        tempPrice[i] = parseFloat(price[i]);\n    }\n    tempPrice.sort((a, b) => a - b);\n    for (let i = 0; i < price.length; i++) {\n        tempIndex[i] = price[i].indexOf('.');\n    }\n    for (let i = 0; i < price.length; i++) {\n        if (tempIndex[i] < tempIndex[i + 1]) {\n            let temp = tempPrice[i];\n            tempPrice[i] = tempPrice[i + 1];\n            tempPrice[i + 1] = temp;\n            let temp2 = price[i].split('.');\n            price[i] = temp2[0] + temp2[1].slice(0, tempIndex[i + 1] - tempIndex[i]);\n            price[i] = price[i].concat(tempPrice[i + 1]);\n        }\n    }\n    return price;\n}\n", "\n  return price.sort((a, b) => a - b);\n}\n"]}
{"task_id": "MBJSP/371", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction smallestMissing(a, leftelement, rightelement) {\n/**\n * * Write a function to find the smallest missing element in a sorted array.\n */", "entry_point": "smallestMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, 3, 4, 5, 6];\nvar arg01 = 0;\nvar arg02 = 6;\nvar x0 = smallestMissing(arg00, arg01, arg02);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 2, 6, 9, 11, 15];\nvar arg11 = 0;\nvar arg12 = 6;\nvar x1 = smallestMissing(arg10, arg11, arg12);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 6, 9, 11, 15];\nvar arg21 = 0;\nvar arg22 = 7;\nvar x2 = smallestMissing(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let currsmallest = leftelement + 1;\n    for (let i = leftelement + 1; i <= rightelement; i++) {\n        if (a[i] < currsmallest) currsmallest = a[i];\n    }\n    return currsmallest;\n}\n", "\n    let test = 0;\n    if (leftelement > rightelement) {\n        test = leftelement - 1;\n    } else {\n        test = leftelement;\n    }\n    while (a[test]!== test) {\n        test--;\n        if (test < leftelement) {\n            break;\n        }\n    }\n    if (test < leftelement) {\n        while (a[test]!== test + 1) {\n            test++;\n            if (test > rightelement) {\n                break;\n            }\n        }\n    }\n    if (test < leftelement && test > rightelement) {\n        return test;\n    }\n}\n", "\n  // Write your code here\n  if (rightElement - leftelement + 1 === a.length) {\n    return leftelement + 1;\n  } else {\n    let small = a.length;\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] < leftelement) {\n        small = a[i];\n      }\n    }\n    for (let i = small + 1; i < a.length; i++) {\n      if (a[i] > rightelement) {\n        return leftelement + 1;\n      }\n    }\n  }\n  return small;\n}\n", "\n  // Write your code here\n  return -1;\n}\n", "\n  const aStr = a.map(num => String(num));\n  const leftelementStr = leftelement.map(num => String(num));\n  const rightelementStr = rightelement.map(num => String(num));\n  const sortedArr = aStr.sort();\n  const leftelementArr = leftelementStr.sort();\n  const rightelementArr = rightelementStr.sort();\n  let minMissing = 1;\n  let maxMissing = 1;\n  for (let i = 0; i < leftelementArr.length; i++) {\n    if (leftelementArr[i]!== sortedArr[i]) {\n      break;\n    }\n    if (i === leftelementArr.length - 1) {\n      minMissing = leftelementArr[i + 1];\n    }\n  }\n  for (let i = 0; i < rightelementArr.length; i++) {\n    if (rightelementArr[i]!== sortedArr[aStr.length - 1 - i]) {\n      break;\n    }\n    if (i === rightelementArr.length - 1) {\n      maxMissing = rightelementArr[i + 1];\n    }\n  }\n  return minMissing + (maxMissing - minMissing) * 2;\n}\n\nconst square = (x) => x * x;\nconst cube = (x) => x * x * x;\n\nconst getCubeRootOfAnInteger = (x) => {\n  if (x < 0) return -1;\n  const guess = x;\n  const lower = 1;\n  const upper = x;\n  let guessIndex = 0;"]}
{"task_id": "MBJSP/372", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction heapAssending(nums) {\n/**\n * * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n */", "entry_point": "heapAssending", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nvar x0 = heapAssending(arg00);\nvar v0 = [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar x1 = heapAssending(arg10);\nvar v1 = [14, 22, 25, 25, 35, 58, 65, 75, 85];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nvar x2 = heapAssending(arg20);\nvar v2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const nums1 = nums.slice();\n    const len = nums1.length;\n    for (let i = len / 2 - 1; i >= 0; i--) {\n        maxHeapify(nums1, len, i);\n    }\n    let k = len - 1;\n    while (k > 0) {\n        let temp = nums1[0];\n        nums1[0] = nums1[k];\n        nums1[k] = temp;\n        maxHeapify(nums1, k, 0);\n        k--;\n    }\n    return nums1;\n}\n", "\n  const result = [];\n  const maxHeap = new MaxHeap(nums.length);\n  for (let i = 0; i < nums.length; i++) {\n    maxHeap.add(nums[i]);\n  }\n  for (let i = 0; i < nums.length; i++) {\n    result.push(maxHeap.getMax());\n    maxHeap.removeMax();\n  }\n  return result;\n}\n", "\n  const heap = new Heap(nums, (a, b) => a - b);\n  const result = [];\n  while (heap.size) {\n    result.push(heap.remove());\n  }\n  return result;\n}\n", "\n  const heap = new Heap(nums);\n  while (heap.size > 0) {\n    const num = heap.extractMin();\n    const lastNum = nums.pop();\n    nums.push(num);\n    nums.push(lastNum);\n  }\n  return nums;\n}\n", "\n  const numbers = nums.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i < sortedNumbers.length; i++) {\n    result.push(sortedNumbers[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/373", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction volumeCuboid(l, w, h) {\n/**\n * * Write a function to find the volume of a cuboid.\n */", "entry_point": "volumeCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = volumeCuboid(arg00, arg01, arg02);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar arg12 = 9;\nvar x1 = volumeCuboid(arg10, arg11, arg12);\nvar v1 = 315;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar arg22 = 21;\nvar x2 = volumeCuboid(arg20, arg21, arg22);\nvar v2 = 3150;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * w * h;\n}\n", "\n  return l * w * h;\n}\n", "\n  return (l * w * h);\n}\n", "\n  return l * w * h;\n}\n", "\n  return l * w * h;\n}\n"]}
{"task_id": "MBJSP/374", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction permuteString(str) {\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */", "entry_point": "permuteString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ab\";\nvar x0 = permuteString(arg00);\nvar v0 = [\"ab\", \"ba\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = permuteString(arg10);\nvar v1 = [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcd\";\nvar x2 = permuteString(arg20);\nvar v2 = [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const length = str.length;\n  const result = [];\n  ", "\n  // Write your code here\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  const letterCount = {};\n  for (let i = 0; i < str.length; i++) {\n    letterCount[str.charAt(i)] = letterCount[str.charAt(i)] + 1 || 1;\n  }\n  for (let i = 0; i < alphabet.length; i++) {\n    if (letterCount[alphabet[i]]) {\n      for (let j = 0; j < letterCount[alphabet[i]]; j++) {\n        console.log(alphabet.substr(0, i) + str + alphabet.substr(i + 1));\n      }\n    }\n  }\n  return \"\";\n}\n", "\n  // Write your code here\n  if (str.length === 0) {\n    return;\n  }\n  for (let i = 0; i < str.length; i++) {\n    const chars = str.slice(0, i);\n    const remainder = str.slice(i);\n    const remainderStr = remainder.join('');\n    if (remainderStr === '' || remainderStr ==='' || remainderStr === '.') {\n      continue;\n    }\n    permuteString(chars + remainderStr);\n  }\n  return;\n}\n", "\n  // Write your code here\n  const result = [];\n  let strn = '';\n  let len = 0;\n  for (let i = 0; i < str.length; i++) {\n    strn += str[i];\n    len++;\n  }\n  let strl = '';\n  let lenl = 0;\n  for (let i = 0; i < len; i++) {\n    strl += strn[i];\n    lenl++;\n  }\n  ", "\n  const permutations = [];\n  "]}
{"task_id": "MBJSP/375", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction roundNum(n, m) {\n/**\n * * Write a function to round the given number to the nearest multiple of a specific number.\n */", "entry_point": "roundNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4722;\nvar arg01 = 10;\nvar x0 = roundNum(arg00, arg01);\nvar v0 = 4720;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1111;\nvar arg11 = 5;\nvar x1 = roundNum(arg10, arg11);\nvar v1 = 1110;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 219;\nvar arg21 = 2;\nvar x2 = roundNum(arg20, arg21);\nvar v2 = 218;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Math.round(n * m) / m;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n.length; i++) {\n    result.push(Math.round(n[i] / m) * m);\n  }\n  return result;\n}\n", "\n  return Math.round(n / m) * m;\n}\n", "\n  return Math.round(n * Math.pow(10, m)) / Math.pow(10, m);\n}\n", "\n  return Math.round(n * m) / m;\n}\n"]}
{"task_id": "MBJSP/376", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeReplica(testtup) {\n/**\n * * Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n */", "entry_point": "removeReplica", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 4, 4, 4, 5, 5, 6, 7, 7];\nvar x0 = removeReplica(arg00);\nvar v0 = [1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9];\nvar x1 = removeReplica(arg10);\nvar v1 = [2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 2, 5, 4, 5, 7, 5, 6, 7, 7];\nvar x2 = removeReplica(arg20);\nvar v2 = [2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testTup = testtup.filter(a => {\n    return testtup.findIndex(b => b === a) > -1;\n  });\n  return testTup;\n}\n", "\n  let result = testTup;\n  result.sort();\n  for (let i = 0; i < result.length - 1; i++) {\n    if (result[i] === result[i + 1]) {\n      result[i] = 10;\n    }\n  }\n  return result;\n}\n", "\n  return [...new Set(testtup)]\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    if (testTup[i]!== testTup[i + 1]) {\n      result.push(testTup[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (testTup.indexOf(testTup[i]) === i) {\n      result.push(testTup[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/377", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeChar(s, c) {\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */", "entry_point": "removeChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar arg01 = \"a\";\nvar x0 = removeChar(arg00, arg01);\nvar v0 = \"b\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"toggle\";\nvar arg11 = \"g\";\nvar x1 = removeChar(arg10, arg11);\nvar v1 = \"tole\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"aabbc\";\nvar arg21 = \"b\";\nvar x2 = removeChar(arg20, arg21);\nvar v2 = \"aac\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < s.length) {\n    if (s[j] === c) {\n      result.push(s[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return result;\n}\n", "\n  return s.replace(new RegExp(`${c}`, 'g'), '');\n}\n", "\n  return s.split('').filter(ch => ch!== c).join('');\n}\n", "\n  return s.replace(new RegExp(c, 'g'), '');\n}\n", "\n  return s.replace(c, \"\");\n}\n"]}
{"task_id": "MBJSP/378", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction moveFirst(testlist) {\n/**\n * * Write a JavaScript function to shift last element to first position in the given list.\n */", "entry_point": "moveFirst", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar x0 = moveFirst(arg00);\nvar v0 = [4, 1, 2, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 2, 3];\nvar x1 = moveFirst(arg10);\nvar v1 = [3, 0, 1, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 8, 7, 1];\nvar x2 = moveFirst(arg20);\nvar v2 = [1, 9, 8, 7];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testlist.slice(1, testlist.length);\n}\n", "\n    return testlist.slice(1);\n}\n", "\n  // Write your code here\n  return testList.slice(0, testList.length - 1);\n}\n", "\n  const first = testlist.shift();\n  return testlist.concat(first);\n}\n", "\n  // Write your code here\n  const result = [];\n  let i = 0;\n  while (i < testlist.length) {\n    result.push(testlist[i]);\n    i++;\n  }\n  return result;\n}\nconst test = [1, 2, 3];\n"]}
{"task_id": "MBJSP/379", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction surfaceareaCuboid(l, w, h) {\n/**\n * * Write a function to find the surface area of a cuboid.\n */", "entry_point": "surfaceareaCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = surfaceareaCuboid(arg00, arg01, arg02);\nvar v0 = 22;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar arg12 = 9;\nvar x1 = surfaceareaCuboid(arg10, arg11, arg12);\nvar v1 = 286;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar arg22 = 21;\nvar x2 = surfaceareaCuboid(arg20, arg21, arg22);\nvar v2 = 1350;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * w * h + l * h * w + w * l * h;\n}\n", "\n  return (l * w * h) + (l * h * w) + (h * w * l);\n}\n", "\n  return l * w * h;\n}\n", "\n  return 2 * (l * w + l * h + w * h);\n}\n", "\n  const basearea = l * w;\n  const heightarea = h * h;\n  const cuboidarea = basearea + heightarea;\n  return cuboidarea;\n}\n"]}
{"task_id": "MBJSP/380", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction multiList(rownum, colnum) {\n/**\n * * Write a function to generate a two-dimensional array.\n */", "entry_point": "multiList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 4;\nvar x0 = multiList(arg00, arg01);\nvar v0 = [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar x1 = multiList(arg10, arg11);\nvar v1 = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar x2 = multiList(arg20, arg21);\nvar v2 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < rownum; i++) {\n    const subArr = [];\n    for (let j = 0; j < colnum; j++) {\n      subArr.push(i * 10 + j + 1);\n    }\n    result.push(subArr);\n  }\n  return result;\n}\n", "\n  const row = [];\n  for (let i = 0; i < rownum; i++) {\n    row.push([\"row\" + i]);\n  }\n  return row;\n}\n", "\n  const row = [];\n  for (let i = 0; i < rownum; i++) {\n    for (let j = 0; j < colnum; j++) {\n      row.push(i * j);\n    }\n  }\n  return row;\n}\n", "\n  const result = [];\n  for (let i = 0; i < rownum; i++) {\n    const newrow = [];\n    for (let j = 0; j < colnum; j++) {\n      newrow.push(i * j);\n    }\n    result.push(newrow);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < rownum; i++) {\n    result[i] = [];\n    for (let j = 0; j < colnum; j++) {\n      result[i][j] = Math.random();\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/381", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction indexOnInnerList(listdata, indexno) {\n/**\n * * Write a function to sort a list of lists by a given index of the inner list.\n */", "entry_point": "indexOnInnerList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg01 = 0;\nvar x0 = indexOnInnerList(arg00, arg01);\nvar v0 = [[\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99], [\"Wyatt Knott\", 91, 94]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg11 = 1;\nvar x1 = indexOnInnerList(arg10, arg11);\nvar v1 = [[\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg21 = 2;\nvar x2 = indexOnInnerList(arg20, arg21);\nvar v2 = [[\"Wyatt Knott\", 91, 94], [\"Brady Kent\", 97, 96], [\"Beau Turnbull\", 94, 98], [\"Greyson Fulton\", 98, 99]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < listdata.length; i++) {\n    result.push(listdata[i][indexno]);\n  }\n  return result;\n}\n", "\n    const result = [];\n    for (let i = 0; i < listdata.length; i++) {\n        const list = listdata[i];\n        const sortedList = list.slice(0, indexno).sort((a, b) => a - b);\n        result.push(sortedList);\n    }\n    return result;\n}\n", "\n  const numbers = listdata.map(innerList => innerList.join());\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers[indexno];\n}\n", "\n  const result = [];\n  for (let i = 0; i < listdata.length; i++) {\n    let tempArr = [];\n    for (let j = 0; j < listdata[i].length; j++) {\n      tempArr.push(listdata[i][j][indexno]);\n    }\n    result.push(tempArr);\n  }\n  return result;\n}\n", "\n  const innerList = listdata.map(innerList => innerList.slice(indexno));\n  const sortedInnerList = innerList.sort((a, b) => a.length - b.length);\n  return sortedInnerList;\n}\n"]}
{"task_id": "MBJSP/382", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findRotationCount(a) {\n/**\n * * Write a function to find the number of rotations in a circularly sorted array.\n */", "entry_point": "findRotationCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7];\nvar x0 = findRotationCount(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 9, 10, 2, 5, 6];\nvar x1 = findRotationCount(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 5, 6, 8, 9, 10];\nvar x2 = findRotationCount(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (a.length == 0) {\n    return 0;\n  }\n  let result = 0;\n  let before = a[0];\n  for (let i = 1; i < a.length; i++) {\n    let after = a[i];\n    if (before < after) {\n      result++;\n    }\n    before = after;\n  }\n  return result;\n}\n", "\n  let n = a.length;\n  let isRotation = false;\n  for (let i = 0; i < n / 2 &&!isRotation; i++) {\n    if (a[i]!== a[n - i - 1]) {\n      isRotation = true;\n    }\n  }\n  return isRotation? n : 0;\n}\n", "\n    // Write your code here\n    const first = a[0];\n    const second = a[0];\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] < second) {\n            count++;\n        }\n        second = a[i];\n    }\n    return count;\n}\n", "\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]);\n    result.push(a[i + a.length]);\n  }\n  return result.length;\n}\n", "\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] + a[0]);\n  }\n  return result.length;\n}\n"]}
{"task_id": "MBJSP/383", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction evenBitToggleNumber(n) {\n/**\n * * Write a JavaScript function to toggle all odd bits of a given number.\n */", "entry_point": "evenBitToggleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitToggleNumber(arg00);\nvar v0 = 15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitToggleNumber(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitToggleNumber(arg20);\nvar v2 = 11;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const bits = [];\n  for (let i = 0; i < 32; i++) {\n    bits[i] = (n & (1 << i)) >> i;\n  }\n  const result = 0;\n  for (let i = 0; i < 32; i++) {\n    if (bits[i] === 1) {\n      result += 1 << i;\n    }\n  }\n  return result;\n}\n", "\n    let n = n | (n & (n - 1));\n    return n;\n}\n", "\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    const bit = n & (1 << i);\n    if (bit === 1) {\n      result |= 1 << i;\n    }\n  }\n  return result;\n}\n", "\n  return n.toString(2).split('').reduce((res, num) => {\n    res = res + (num & 1) ^ (1 << ((num >> 1) & 1))\n    return res;\n  }, \"\")\n}\n", "\n  return n | (n - 1);\n}\nconst polynomial = [1, 2, 3, 4];\npolynomial[0] = (c, n) => {\n  return (c * n) % 10;\n};\npolynomial[1] = (c, n) => {\n  return (c * (n % 10)) + ((n % 10) * c) % 10;\n};\npolynomial[2] = (c, n) => {\n  return (c * (n % 10)) - ((n % 10) * c) % 10;\n};\npolynomial[3] = (c, n) => {\n  return c * ((n % 10) * c) % 10;\n};\npolynomial[4] = (c, n) => {\n  return (c * ((n % 10) * c)) % 10 + ((n % 10) * c) % 10;\n};\npolynomial[5] = (c, n) => {\n  return c * ((n % 10) * c) % 10 - ((n % 10) * c) % 10;\n};\npolynomial[6] = (c, n) => {\n  return (c * ((n % 10) * c)) % 10;\n};\npolynomial[7] = (c, n) => {\n  return (c * ((n % 10) * c)) % 10;\n};\npolynomial[8] = (c, n) => {\n  return c * ((n % 10) * c) % 10;\n};\npolynomial[9] = (c, n) => {\n  return c * ((n % 10) * c) % 10;\n};\n"]}
{"task_id": "MBJSP/384", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction frequencyOfSmallest(n, arr) {\n/**\n * * Write a JavaScript function to find the frequency of the smallest value in a given array.\n */", "entry_point": "frequencyOfSmallest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = [1, 2, 3, 4, 3];\nvar x0 = frequencyOfSmallest(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar arg11 = [3, 1, 2, 5, 6, 2, 3];\nvar x1 = frequencyOfSmallest(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = [3, 3, 6, 3, 7, 4, 9];\nvar x2 = frequencyOfSmallest(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const minVal = arr[0];\n  let smallestFreq = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (minVal > arr[i]) {\n      minVal = arr[i];\n      smallestFreq = i;\n    }\n  }\n  return smallestFreq;\n}\n", "\n  let smallestFreq = Infinity;\n  let smallestFreqPos = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let freq = arr.count(arr[i]);\n    if (freq < smallestFreq) {\n      smallestFreq = freq;\n      smallestFreqPos = i;\n    }\n  }\n  return smallestFreqPos;\n}\n", "\n  const result = {};\n  const sortedArr = arr.sort((a, b) => a - b);\n  for (let i = 0; i < n; i++) {\n    if (!result[sortedArr[i]]) {\n      result[sortedArr[i]] = 1;\n    } else {\n      result[sortedArr[i]] += 1;\n    }\n  }\n  return result;\n}\n", "\n  const arrsmallest = arr.filter(val => val < n);\n  const freq = arrsmallest.reduce((a, val) => a + 1, 0);\n  return freq;\n}\n", "\n  let minVal = arr[0];\n  let minFreq = 1;\n  let i = 1;\n  let j = 0;\n  while (arr[i] === minVal) {\n    minFreq += 1;\n    i += 1;\n  }\n  minFreq = minFreq + 1;\n  while (j < arr.length) {\n    while (arr[j] === minVal) {\n      minFreq += 1;\n    }\n    minVal = arr[j];\n    minFreq = minFreq + 1;\n    j = j + 1;\n  }\n  return minFreq;\n}\n"]}
{"task_id": "MBJSP/385", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getPerrin(n) {\n/**\n * * Write a function to find the n'th perrin number using recursion.\n */", "entry_point": "getPerrin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = getPerrin(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = getPerrin(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = getPerrin(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let nums = [];\n  nums.push(n);\n  return getPerrin(nums, n + 1);\n}\n", "\n  if (n === 0) {\n    return 0;\n  }\n  let result = Math.floor(n / 3) + Math.floor((n % 3) / 2);\n  return result;\n}\n", "\n  // Write your code here\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return (n * getPerrin(n - 1)) - 1;\n}\n", "\n    let result = 0;\n    const getPerrinNum = (n, result) => {\n        if (n === 0) {\n            return result;\n        }\n        return (getPerrinNum(n - 1, result));\n    };\n    return getPerrinNum(n, result);\n}\n\nlet list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet list13 = [1, 2, 3, 4, 5", "\n  return perrin[n - 1];\n}\n"]}
{"task_id": "MBJSP/386", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction swapCount(s) {\n/**\n * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n */", "entry_point": "swapCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"[]][][\";\nvar x0 = swapCount(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"[[][]]\";\nvar x1 = swapCount(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"[[][]]][\";\nvar x2 = swapCount(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let swaps = 0;\n  let count = 0;\n  let l = s.length;\n  for (let i = 0; i < l; i++) {\n    if (s[i] === '(') {\n      count++;\n    } else if (s[i] === ')') {\n      count--;\n    }\n    if (count < 0) {\n      count = 0;\n      swaps++;\n    }\n  }\n  return swaps;\n}\n", "\n  const counter = {};\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    counter[s[i]] = counter[s[i]] + 1 || 1;\n    if (s[i] === '(') {\n      if (counter[')'] === 1) {\n        counter[s[i]] = 0;\n        result.push(i);\n      }\n    } else {\n      if (counter[')'] === 1) {\n        counter[s[i]] = 0;\n        result.push(i);\n      }\n    }\n  }\n  return result.length;\n}\n", "\n  const result = [];\n  const test = s.split('');\n  const subTest = test.slice(1, test.length - 1);\n  const index = test[0];\n  for (let i = 0; i < subTest.length; i++) {\n    const j = test.indexOf(subTest[i]);\n    const subIndex = index.slice(j);\n    const subLength = subIndex.length;\n    const u = 0;\n    const count = 0;\n    for (let k = 0; k < subLength; k++) {\n      u = u + subIndex[k];\n      count = count + u;\n    }\n    result.push(count);\n    index = index.slice(0, j).concat(index.slice(j + 1));\n  }\n  return result.sort((a, b) => b - a);\n}\n", "\n  const result = {};\n  for (let i = 0; i < s.length; i++) {\n    result[s[i]] = result[s[i]] + 1 || 1;\n    if (s[i] === '(') {\n      result[')'] = result[')'] - 1 || 1;\n    } else {\n      result['('] = result['('] - 1 || 1;\n    }\n  }\n  return result['('];\n}\n", "\n  const result = [];\n  const n = s.length;\n  const minSwaps = [0, 0, 0];\n  const count = [0, 0, 0];\n  for (let i = 0; i < n; i++) {\n    let temp = [s[i], i];\n    if (s[i] === '(') {\n      if (i < n - 1) {\n        if (s[i + 1] === ')') {\n          count[0]++;\n        }\n        if (s[i + 1] === '(') {\n          count[1]++;\n        }\n      }\n      count[2]++;\n    } else {\n      if (i < n - 1) {\n        if (s[i + 1] === ')') {\n          count[0]++;\n        }\n        if (s[i + 1] === '(') {\n          count[1]++;\n        }\n      }\n      count[2]++;\n    }\n    result.push(temp);\n    if (count[0] === n) {\n      minSwaps[0]++;\n    }\n    if (count[1] === n) {\n      minSwaps[1]++;\n    }\n    if (count[2] === n) {\n      minSwaps[2]++;\n    }\n  }\n  return minSwaps;\n}\n"]}
{"task_id": "MBJSP/387", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction evenOrOdd(n) {\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is even or odd.\n */", "entry_point": "evenOrOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AB3454D\";\nvar x0 = evenOrOdd(arg00);\nvar v0 = \"Odd\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABC\";\nvar x1 = evenOrOdd(arg10);\nvar v1 = \"Even\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AAD\";\nvar x2 = evenOrOdd(arg20);\nvar v2 = \"Odd\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < hexadecimal.length; i++) {\n    if (i % 2 === 0 && hexadecimal[i] % 2!== 0) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n}\n", "\n  return ((n / 16) | 0) % 2;\n}\n", "\n  return n % 2 === 0;\n}\nconst result = new Map();\nconst testTup = [1, 2, 3, 4, 5];\nresult.set(1, [1, 2, 3, 4, 5]);\nresult.set(2, [2, 4, 6, 8, 10]);\nconst testTup2 = [1, 1, 1, 1, 1];\nresult.set(3, [1, 1, 1, 1, 1]);\nconst testTup3 = [1, 1, 1];\nresult.set(4, [1, 1, 1]);\nconst testTup4 = [1, 1, 1, 1, 1, 1];\nresult.set(5, [1, 1, 1, 1, 1, 1]);\nconst testTup5 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1", "\n  const result = [];\n  for (let i = 0; i < hexVal.length; i++) {\n    if ((i % 2 === 0 && hexVal[i] % 2 === 0) || (i % 2!== 0 && hexVal[i] % 2!== 0)) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n}\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconst squares = array.map(item => item * item);\nconst sortedSquares = squares.sort((a, b) => a - b);\n// Write your code here\n", "\n  const result = n % 2 === 0? \"even\" : \"odd\";\n  return result;\n}\n"]}
{"task_id": "MBJSP/388", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction highestPowerOf2(n) {\n/**\n * * Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\n */", "entry_point": "highestPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = highestPowerOf2(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar x1 = highestPowerOf2(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 32;\nvar x2 = highestPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let num = n;\n  let highestPower = 0;\n  while (num >>= 1) {\n    highestPower++;\n  }\n  return highestPower;\n}\n", "\n  let highPower = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i & i - 1) {\n      highPower = i;\n    }\n  }\n  return highPower;\n}\n", "\n  if (n <= 0) {\n    return 0;\n  }\n  let num = n;\n  while (num > 1) {\n    num = num / 2;\n    if (num > 1) {\n      num = num / 2;\n    }\n  }\n  return num;\n}\n", "\n  return n >= 0 && Math.pow(2, Math.floor(Math.log(n) / Math.log(2))) === n? Math.floor(Math.log(n) / Math.log(2)) : 0;\n}\n", "\n  const nbit = n.bitLength();\n  const index = nbit - 1;\n  let power = Math.pow(2, index);\n  while (power <= n) {\n    power = power * 2;\n  }\n  return power - 1;\n}\n"]}
{"task_id": "MBJSP/389", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findLucas(n) {\n/**\n * * Write a function to find the n'th lucas number.\n */", "entry_point": "findLucas", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = findLucas(arg00);\nvar v0 = 76;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = findLucas(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = findLucas(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(1);\n  }\n  return result;\n}\n", "\n  if (n === 0) {\n    return 1;\n  }\n  const nextTerm = findLucas(n - 1);\n  const prevTerm = 2;\n  return nextTerm + prevTerm;\n}\n", "\n  let nthLucas = 1;\n  for (let i = 0; i < n; i++) {\n    nthLucas = (2 * nthLucas) - 1;\n  }\n  return nthLucas;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(lucas(i));\n  }\n  return result;\n}\n", "\n  let result = [];\n  let currentNum = 0;\n  let nextNum = 1;\n  for (let i = 0; i < n; i++) {\n    result.push(currentNum);\n    currentNum = nextNum;\n    nextNum = currentNum + nextNum;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/390", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction addString(list, string) {\n/**\n * * Write a function to insert a given string at the beginning of all items in a list.\n */", "entry_point": "addString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar arg01 = \"temp{0}\";\nvar x0 = addString(arg00, arg01);\nvar v0 = [\"temp1\", \"temp2\", \"temp3\", \"temp4\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"b\", \"c\", \"d\"];\nvar arg11 = \"python{0}\";\nvar x1 = addString(arg10, arg11);\nvar v1 = [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 8];\nvar arg21 = \"string{0}\";\nvar x2 = addString(arg20, arg21);\nvar v2 = [\"string5\", \"string6\", \"string7\", \"string8\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (let i = 0; i < list.length; i++) {\n    list[i] = string;\n  }\n  return list;\n}\n", "\n  return [...list].map(x => string).join(\"\");\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(string + list[i]);\n  }\n  return result;\n}\n", "\n    let temp = [];\n    for (let i = 0; i < list.length; i++) {\n        temp.push(string);\n        temp.push(list[i]);\n    }\n    return temp;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(string + list[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/391", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction convertListDictionary(l1, l2, l3) {\n/**\n * * Write a function to convert more than one list to nested dictionary.\n */", "entry_point": "convertListDictionary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"S001\", \"S002\", \"S003\", \"S004\"];\nvar arg01 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"];\nvar arg02 = [85, 98, 89, 92];\nvar x0 = convertListDictionary(arg00, arg01, arg02);\nvar v0 = [{'\"S001\"':{'\"Adina Park\"':85}}, {'\"S002\"':{'\"Leyton Marsh\"':98}}, {'\"S003\"':{'\"Duncan Boyle\"':89}}, {'\"S004\"':{'\"Saim Richards\"':92}}];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"abc\", \"def\", \"ghi\", \"jkl\"];\nvar arg11 = [\"python\", \"program\", \"language\", \"programs\"];\nvar arg12 = [100, 200, 300, 400];\nvar x1 = convertListDictionary(arg10, arg11, arg12);\nvar v1 = [{'\"abc\"':{'\"python\"':100}}, {'\"def\"':{'\"program\"':200}}, {'\"ghi\"':{'\"language\"':300}}, {'\"jkl\"':{'\"programs\"':400}}];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"A1\", \"A2\", \"A3\", \"A4\"];\nvar arg21 = [\"java\", \"C\", \"C++\", \"DBMS\"];\nvar arg22 = [10, 20, 30, 40];\nvar x2 = convertListDictionary(arg20, arg21, arg22);\nvar v2 = [{'\"A1\"':{'\"java\"':10}}, {'\"A2\"':{'\"C\"':20}}, {'\"A3\"':{'\"C++\"':30}}, {'\"A4\"':{'\"DBMS\"':40}}];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return {\n    list1: l1,\n    list2: l2,\n    list3: l3,\n  };\n}\n", "\n  const result = [];\n  const l1len = l1.length;\n  const l2len = l2.length;\n  const l3len = l3.length;\n  for (let i = 0; i < l1len; i++) {\n    for (let j = 0; j < l2len; j++) {\n      for (let k = 0; k < l3len; k++) {\n        result.push({l1[i], l2[j], l3[k]});\n      }\n    }\n  }\n  return result;\n}\n", "\n  const nestedDictionary = [];\n  for (let i = 0; i < l1.length; i++) {\n    nestedDictionary.push({\n      a: l1[i],\n      b: l2[i]\n    });\n  }\n  for (let i = 0; i < l3.length; i++) {\n    nestedDictionary.push({\n      a: l3[i].a,\n      b: l3[i].b,\n      c: l3[i].c\n    });\n  }\n  return nestedDictionary;\n}\n", "\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    result.push({ name: l1[i], id: l2[i], status: l3[i] });\n  }\n  return result;\n}\n", "\n    const result = {};\n    const l4 = l1.concat(l2);\n    for (let i = 0; i < l3.length; i++) {\n        result[l3[i]] = l4[i];\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/392", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getMaxSum(n) {\n/**\n * * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n */", "entry_point": "getMaxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 60;\nvar x0 = getMaxSum(arg00);\nvar v0 = 106;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = getMaxSum(arg10);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = getMaxSum(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let maxSum = 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n    if (sum <= n) {\n      maxSum = sum;\n    } else if (sum > n) {\n      sum -= i;\n    }\n  }\n  return maxSum;\n}\n", "\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.max(Math.max(sum / 2 + sum / 3 + sum / 4 + sum / 5, i), i);\n  }\n  return sum;\n}\n", "\n  ", "\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(Math.max((result[i >> 1] + result[(i & 1) << 1]), i));\n  }\n  return result;\n}\n", "\n  const n1 = n/2;\n  const n2 = n/3;\n  const n3 = n/4;\n  const n4 = n/5;\n  const f1 = n1;\n  const f2 = n2;\n  const f3 = n3;\n  const f4 = n4;\n  const f5 = n;\n  const f6 = n*5;\n  const max1 = f1;\n  const max2 = Math.max(f2 + f3 + f4 + f5, n);\n  const max3 = Math.max(n*5, f6);\n  return Math.max(max1, max2, max3);\n}\n"]}
{"task_id": "MBJSP/393", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxLengthList(inputlist) {\n/**\n * * Write a function to find the list with maximum length using lambda function.\n */", "entry_point": "maxLengthList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = maxLengthList(arg00);\nvar v0 = [3, [13, 15, 17]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]];\nvar x1 = maxLengthList(arg10);\nvar v1 = [5, [1, 2, 3, 4, 5]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]];\nvar x2 = maxLengthList(arg20);\nvar v2 = [4, [6, 7, 8, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return inputList.reduce((max, current) => (current.length > max.length? current : max), inputlist[0]);\n}\n", "\n  return inputlist.reduce((maxlength, currlength) => currlength > maxlength? currlength : maxlength, 0);\n}\n", "\n    // Write your code here\n    return inputList.reduce((max, current) => current.length > max.length? current : max);\n}\n", "\n  return inputList.reduce((maxlength, maxlengthlist) => {\n    return maxlength < maxlengthlist.length? maxlength : maxlengthlist.length;\n  }, 0);\n}\n", "\n  return inputList.reduce((accum, current) => accum.length > current.length? accum : current, { length: 0 });\n}\n"]}
{"task_id": "MBJSP/394", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkDistinct(testtup) {\n/**\n * * Write a function to check if given tuple is distinct or not.\n */", "entry_point": "checkDistinct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 4, 5, 6, 1, 4];\nvar x0 = checkDistinct(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 4, 5, 6];\nvar x1 = checkDistinct(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 5, 6];\nvar x2 = checkDistinct(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testtup.every(ele => ele === testtup.last());\n}\n", "\n  const numbers = testTup.map(num => parseInt(num, 10));\n  return numbers.filter(num => num === numbers[0]).length === numbers.length;\n}\n", "\n  const elements = testTup.slice();\n  const sortedElements = elements.sort();\n  const uniqueElements = sortedElements.filter(elem => elements.indexOf(elem) === -1);\n  return testTup.length === uniqueElements.length;\n}\n", "\n  return testTup.length === Math.floor(Math.sqrt(testTup.length));\n}\n", "\n  return testTup.length === testTup.sort().length;\n}\n"]}
{"task_id": "MBJSP/395", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction firstNonRepeatingCharacter(str1) {\n/**\n * * Write a JavaScript function to find the first non-repeated character in a given string.\n */", "entry_point": "firstNonRepeatingCharacter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcabc\";\nvar x0 = firstNonRepeatingCharacter(arg00);\nvar v0 = null;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = firstNonRepeatingCharacter(arg10);\nvar v1 = \"a\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ababc\";\nvar x2 = firstNonRepeatingCharacter(arg20);\nvar v2 = \"c\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const firstChar = str1.charAt(0);\n  for (let i = 1; i < str1.length; i++) {\n    if (str1.charAt(i) === firstChar) {\n      return firstChar;\n    }\n  }\n  return undefined;\n}\n", "\n  // Write your code here\n  let non_repeated = 'z';\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.charAt(i) === non_repeated) {\n      non_repeated = str1.charAt(i);\n    }\n  }\n  return non_repeated;\n}\n", "\n  const testStr = str1.replace(/\\s/g, '');\n  let nonReqCh = '';\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i]!== nonReqCh) {\n      nonReqCh = testStr[i];\n      break;\n    }\n  }\n  return nonReqCh;\n}\n\nconst n = 5;\nconst tup = Array.from({ length: n }).map((_, i) => i);\n\n", "\n  let result = '';\n  let result2 = '';\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.charAt(i)!== result) {\n      result = str1.charAt(i);\n    }\n    else {\n      result2 = str1.charAt(i);\n    }\n  }\n  return result2;\n}\n", "\n  // Write your code here\n  const repeat = {};\n  for (let i = 0; i < str1.length; i++) {\n    repeat[str1[i]] = repeat[str1[i]] + 1 || 1;\n    if (repeat[str1[i]] === str1.length - 1) {\n      return str1[i];\n    }\n  }\n}\n// Write a "]}
{"task_id": "MBJSP/396", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkChar(string) {\n/**\n * * Write a function to check whether the given string starts and ends with the same character or not using regex.\n */", "entry_point": "checkChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abba\";\nvar x0 = checkChar(arg00);\nvar v0 = \"Valid\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"a\";\nvar x1 = checkChar(arg10);\nvar v1 = \"Valid\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcd\";\nvar x2 = checkChar(arg20);\nvar v2 = \"Invalid\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return string.charAt(0) === string.charAt(string.length - 1);\n}\n", "\n  return string.startsWith('a') && string.endsWith('a');\n}\n", "\n  const pattern = /^[A-Za-z]+$/;\n  if (pattern.test(string)) {\n    return true;\n  }\n  return false;\n}\n", "\n  return string.startsWith('s') && string.endsWith('s');\n}\n", "\n  return string[0] === string[string.length - 1];\n}\n"]}
{"task_id": "MBJSP/397", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction medianNumbers(a, b, c) {\n/**\n * * Write a function to find the median of three specific numbers.\n */", "entry_point": "medianNumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar arg01 = 55;\nvar arg02 = 65;\nvar x0 = medianNumbers(arg00, arg01, arg02);\nvar v0 = 55.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar arg11 = 10;\nvar arg12 = 30;\nvar x1 = medianNumbers(arg10, arg11, arg12);\nvar v1 = 20.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar arg21 = 45;\nvar arg22 = 75;\nvar x2 = medianNumbers(arg20, arg21, arg22);\nvar v2 = 45.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedNumbers = [a, b, c].sort((a, b) => a - b);\n  if (sortedNumbers.length === 0) {\n    return null;\n  }\n  const median = sortedNumbers[sortedNumbers.length / 2];\n  return median;\n}\n", "\n  const sortedA = a.sort();\n  const sortedB = b.sort();\n  const sortedC = c.sort();\n  const medianIndex = Math.floor(sortedA.length / 2);\n  if (sortedA.length % 2 === 1) {\n    return sortedA[medianIndex];\n  } else {\n    return (sortedA[medianIndex] + sortedB[medianIndex]) / 2;\n  }\n}\n", "\n  const arr = [a, b, c];\n  return arr.sort((a, b) => a - b).length % 2;\n}\n", "\n  const numbers = [a, b, c];\n  const sorted = numbers.sort((a, b) => a - b);\n  const median = (sorted[sorted.length / 2] + sorted[sorted.length / 2 + 1]) / 2;\n  return median;\n}\n", "\n  let median = 0;\n  if (a >= b && b >= c) {\n    median = b;\n  } else if (b >= a && a >= c) {\n    median = a;\n  } else if (c >= a && a >= b) {\n    median = a;\n  } else if (c >= b && b >= a) {\n    median = b;\n  }\n  return median;\n}\n"]}
{"task_id": "MBJSP/398", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumOfDigits(nums) {\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */", "entry_point": "sumOfDigits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 2, 56];\nvar x0 = sumOfDigits(arg00);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20, 4, 5, \"b\", 70, \"a\"]];\nvar x1 = sumOfDigits(arg10);\nvar v1 = 19;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, -4, 5, -70];\nvar x2 = sumOfDigits(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.map(num => num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")).map(number => number.split(\",\").reduce((a, b) => a + b, 0)).reduce((a, b) => a + b, 0);\n}\n", "\n  const numbers = nums.map(num => parseInt(num, 10));\n  const sumOfNumbers = numbers.reduce((acc, num) => acc + num, 0);\n  return sumOfNumbers;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const sum = nums[i].toString().split('').reduce((a, b) => a + b, 0);\n    result.push(sum);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    result.push(nums[i].toString().length);\n  }\n  return result;\n}\n", "\n  const sum = nums.map(num => num.toString().split('').reduce((a, b) => a + b, 0));\n  return sum.reduce((a, b) => a + b, 0);\n}\n"]}
{"task_id": "MBJSP/399", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction bitwiseXor(testtup1, testtup2) {\n/**\n * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n */", "entry_point": "bitwiseXor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = bitwiseXor(arg00, arg01);\nvar v0 = [15, 6, 5, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 5, 7, 10];\nvar arg11 = [6, 3, 4, 4];\nvar x1 = bitwiseXor(arg10, arg11);\nvar v1 = [13, 6, 3, 14];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 6, 8, 11];\nvar arg21 = [7, 4, 5, 6];\nvar x2 = bitwiseXor(arg20, arg21);\nvar v2 = [11, 2, 13, 13];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push(testtup1[i] ^ testtup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] ^ testTup2[i]);\n  }\n  return result;\n}\n", "\n  return testtup1.map((a, i) => (testtup2[i] === true? a : 0)).reduce((a, b) => a ^ b);\n}\n", "\n  let result = 0;\n  for (let i = 0; i < testtup1.length; i++) {\n    result = result ^ testtup1[i] ^ testtup2[i];\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] ^ testTup2[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/400", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extractFreq(testlist) {\n/**\n * * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n */", "entry_point": "extractFreq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4], [1, 2], [4, 3], [5, 6]];\nvar x0 = extractFreq(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 15], [2, 3], [5, 4], [6, 7]];\nvar x1 = extractFreq(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 16], [2, 3], [6, 5], [6, 9]];\nvar x2 = extractFreq(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return testlist.reduce((accumulator, curr) => {\n    if (!accumulator.includes(curr)) {\n      accumulator.push(curr);\n    }\n    return accumulator;\n  }, []);\n}\n", "\n    // Write your code here\n    const set = {};\n    for (let i = 0; i < testList.length; i++) {\n        set[testlist[i]] = set[testlist[i]] + 1 || 1;\n    }\n    return set;\n}\n", "\n  const dictionary = {};\n  for (let i = 0; i < testlist.length; i++) {\n    dictionary[testlist[i]] = dictionary[testlist[i]] + 1 || 1;\n  }\n  return Object.keys(dictionary).sort(", "\n  const dictionary = {};\n  for (let i = 0; i < testlist.length; i++) {\n    const currenttup = testlist[i];\n    if (currenttup[0]!== null && currenttup[1]!== null) {\n      const frequency = dictionary[currenttup] || 0;\n      dictionary[currenttup] = frequency + 1;\n    }\n  }\n  const sortedDictionary = Object.keys(dictionary).sort((a, b) => dictionary[b] - dictionary[a]);\n  return sortedDictionary;\n}\n", "\n  const result = [];\n  const count = {};\n  for (let i = 0; i < testlist.length; i++) {\n    count[testlist[i]] = count[testlist[i]] + 1 || 1;\n  }\n  for (let i = 0; i < count.length; i++) {\n    if (count[testlist[i]] === 1) {\n      result.push(count[testlist[i]]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/401", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction addNestedTuples(testtup1, testtup2) {\n/**\n * * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n */", "entry_point": "addNestedTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = addNestedTuples(arg00, arg01);\nvar v0 = [[7, 10], [7, 14], [3, 10], [8, 13]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = addNestedTuples(arg10, arg11);\nvar v1 = [[9, 12], [9, 16], [5, 12], [10, 15]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = addNestedTuples(arg20, arg21);\nvar v2 = [[11, 14], [11, 18], [7, 14], [12, 17]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push(testtup1[i] + testtup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup2.length; i++) {\n    const item = testtup1.slice();\n    item.splice(i + 1, 0, testTup2[i]);\n    result.push(item);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    for (let j = 0; j < testTup2.length; j++) {\n      result.push(testTup1[i] + testTup2[j]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] + testTup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    for (let j = 0; j < testtup2.length; j++) {\n      result.push(testtup1[i] + testtup2[j]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/402", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction ncrModp(n, r, p) {\n/**\n * * Write a function to compute the value of ncr%p.\n */", "entry_point": "ncrModp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 2;\nvar arg02 = 13;\nvar x0 = ncrModp(arg00, arg01, arg02);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 12;\nvar arg12 = 43;\nvar x1 = ncrModp(arg10, arg11, arg12);\nvar v1 = 25;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 17;\nvar arg21 = 9;\nvar arg22 = 18;\nvar x2 = ncrModp(arg20, arg21, arg22);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (r > n || n < 1 || r < 1 || p < 1) {\n    return -1;\n  }\n  const q = Math.floor(Math.pow(n, 1.0 / r));\n  const x = modInverse(q, p);\n  if (x === -1) {\n    return -1;\n  }\n  return (x * modInverse(p - q, p)) % p;\n}\n", "\n  let result = Math.floor((1 + Math.pow(p, n - r)) / (Math.pow(p, r) * Math.pow(p, n - r)));\n  return result;\n}\n", "\n  return Math.pow(Math.E, -1 * (Math.log(n) - Math.log(r)) / (Math.log(p) - Math.log(n - r)));\n}\nconst nCrModP = n => r => p => ncrModp(n, r, p);\n// write your code here\nconst nCrModP = n => r => p => ncrModp(n, r, p);\n// write your code here\nconst nCrModP = n => r => p => ncrModp(n, r, p);\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write your code here\n// write", "\n  let ncr = Math.pow(n, r) % p;\n  let result = 1;\n  for (let i = 0; i < r; i++) {\n    result *= ncr / (p - 1);\n    ncr = ncr % p;\n  }\n  return result;\n}\n", "\n    // Write your code here\n    const fact = [1];\n    for (let i = 2; i <= n; i++) {\n        fact.push(fact[i - 1] * i);\n    }\n    let factInv = [];\n    let inv = [];\n    for (let i = 1; i <= r; i++) {\n        factInv.push(inv[i - 1] * (n - i + 1) % p);\n        inv.push((fact[n - i] * inv[i - 1]) % p);\n    }\n    let pfInv = [1];\n    for (let i = 2; i <= n - r; i++) {\n        pfInv.push(pfInv[i - 1] * (i + 1) % p);\n    }\n    let mult = factInv[r] * pfInv[n - r] % p;\n    return (fact[n] * mult) % p;\n}\n"]}
{"task_id": "MBJSP/403", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isValidUrl(str) {\n/**\n * * Write a function to check if a url is valid or not using regex.\n */", "entry_point": "isValidUrl", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"https:\\/\\/www.google.com\";\nvar x0 = isValidUrl(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"https:/www.gmail.com\";\nvar x1 = isValidUrl(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"https:\\/\\/ www.redit.com\";\nvar x2 = isValidUrl(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str.match(/(?:https?:\\/\\/)?(?:[-\\w\\.]+\\.[-\\w]+)(?:\\:\\d+)?(?:\\/[-\\w\\.]+(?:\\/[-\\w~\\.\\!\\*\\'\\(\\)\\,\\?\\=\\#\\[\\]\\{\\}\\xA0-\\xFF\\u2028\\u2029]*)*)?)/);\n}\n\n", "\n  return str === /^(https?|ftp):\\/\\/([^\\s/?\\.#-]+\\.+[^\\s?\\.#-])+(\\/[^\\s]*)?$/i.test(str);\n}\n", "\n  let urlRegex = /^(https?:\\\\/\\\\/)\\\\/[-a-zA-Z0-9@:%._\\\\+~#=]{1,256}\\\\.[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@:%_\\\\+.~#?&//=]*)/g;\n  return urlRegex.test(str);\n}\n", "\n  const regex = /^(https?|ftp):\\/\\/(([^:@]*)(\\:[^:@]*)?@)?(([^:\\/]*)(\\:([^:\\/]*))?)(\\/(([^:\\/\\?]*)(\\?([^:\\/\\?]*)?)?)?(\\/[^:\\/\\?#]*)?)([^:\\/\\?#]*)(#.*)?/;\n  return regex.test(str);\n}\n", "\n  return str.match(/^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900"]}
{"task_id": "MBJSP/404", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minimum(a, b) {\n/**\n * * Write a JavaScript function to find the minimum of two numbers.\n */", "entry_point": "minimum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar x0 = minimum(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = -5;\nvar arg11 = -4;\nvar x1 = minimum(arg10, arg11);\nvar v1 = -5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 0;\nvar arg21 = 0;\nvar x2 = minimum(arg20, arg21);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (a < b) return a;\n  return b;\n}\n", "\n  if (a > b) return b;\n  return a;\n}\n", "\n  if (a < b) return a;\n  return b;\n}\n", "\n  return a < b? a : b;\n}\n", "\n  return a < b? a : b;\n}\n"]}
{"task_id": "MBJSP/405", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkTuplex(tuplex, tuple1) {\n/**\n * * Write a function to check whether an element exists within a tuple.\n */", "entry_point": "checkTuplex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg01 = \"r\";\nvar x0 = checkTuplex(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg11 = \"5\";\nvar x1 = checkTuplex(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg21 = 3;\nvar x2 = checkTuplex(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testTuplex = tuplex.filter(testtup => {\n    // Write your code here\n    return tuple1.some(t => {\n      return testtup[t] === t;\n    });\n  });\n  return testTuplex.length > 0;\n}\nconst tuplex = [[1, 2, 3], [4, 5], [6], [7, 8, 9]];\nconst tuple1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst result = checkTuplex(tuplex, tuple1);\nconsole.log(result);\n```\n\n</section>\n", "\n  const result = [];\n  for (let i = 0; i < tuplex.length; i++) {\n    if (tuplex[i] === tuple1[i]) {\n      result.push(tuple1[i]);\n    }\n  }\n  return result;\n}\n", "\n  return tuplex.some(tuplex => {\n    for (let i = 0; i < tuplex.length - 1; i++) {\n      if (tuplex[i] === tuple1[i]) {\n        if (tuplex[i + 1] === tuple1[i + 1]) {\n          return true;\n        }\n      }\n    }\n  });\n}\n", "\n  let flag = false;\n  for (let i = 0; i < tuple1.length; i++) {\n    if (tuple1[i] === tuplex) {\n      flag = true;\n    }\n  }\n  return flag;\n}\n", "\n  for (let i = 0; i < tuple1.length; i++) {\n    if (tuple1[i] === tuplex) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}
{"task_id": "MBJSP/406", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findParity(x) {\n/**\n * * Write a JavaScript function to find the parity of a given number.\n */", "entry_point": "findParity", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = findParity(arg00);\nvar v0 = \"Even Parity\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = findParity(arg10);\nvar v1 = \"Odd Parity\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = findParity(arg20);\nvar v2 = \"Even Parity\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let count = 0;\n  while (x) {\n    x = x & x - 1;\n    count++;\n  }\n  return count % 2 === 0? 0 : 1;\n}\n", "\n  return (x % 2 === 0)? 0 : 1;\n}\n", "\n  return x % 2;\n}\nconst vowels = [...new Set([...Array('aeiou').keys(), 'e', 'o', 'u'])];\n", "\n  const result = {};\n  if (x % 2 === 0) {\n    result.even = true;\n    result.odd = false;\n  } else {\n    result.even = false;\n    result.odd = true;\n  }\n  return result;\n}\n", "\n  return (x & 1) === 0;\n}\n"]}
{"task_id": "MBJSP/407", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction rearrangeBigger(n) {\n/**\n * * Write a function to create the next bigger number by rearranging the digits of a given number.\n */", "entry_point": "rearrangeBigger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = rearrangeBigger(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = rearrangeBigger(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 102;\nvar x2 = rearrangeBigger(arg20);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let num = parseInt(n, 10);\n  let result = parseInt(n, 10);\n  for (let i = 0; i < num.length; i++) {\n    let min = parseInt(result.toString()[i], 10);\n    let index = i + 1;\n    while (index < result.toString().length) {\n      let bigger = parseInt(result.toString()[index], 10);\n      let biggerNum = parseInt(result.toString()[i], 10);\n      if (bigger > min) {\n        result = result + biggerNum;\n      }\n      index++;\n    }\n    if (min!= bigger) {\n      result = result + min;\n    }\n  }\n  return result;\n}\n", "\n    let strnum = n.toString();\n    let newstrnum = '';\n    for (let i = strnum.length - 1; i >= 0; i--) {\n      newstrnum = newstrnum + strnum.charAt(i);\n    }\n    let index = newstrnum.length - 1;\n    while (newstrnum.charAt(index) === '9' && index > 0) {\n      newstrnum = newstrnum.substring(0, index) + '0' + newstrnum.substring(index);\n      index--;\n    }\n    if (newstrnum.charAt(index) === '9') {\n      newstrnum = newstrnum + '0';\n    }\n    return newstrnum + newstrnum.substring(index + 1) + newstrnum.substring(0, index + 1);\n}\n", "\n  const num = n;\n  const numArr = num.split('');\n  const numArrLen = numArr.length;\n  let newNum = num;\n  for (let i = 0; i < numArrLen; i++) {\n    let sum = 0;\n    for (let j = 0; j < numArrLen - i - 1; j++) {\n      if (numArr[j] > numArr[j + 1]) {\n        sum += numArr[j];\n        numArr[j] = numArr[j + 1];\n        numArr[j + 1] = sum;\n        sum = 0;\n      }\n      sum += numArr[j + 1];\n      numArr[j + 1] = sum;\n    }\n    sum = 0;\n  }\n  let newNumArr = newNum.split('');\n  let sum = 0;\n  for (let i = 0; i < newNumArr.length; i++) {\n    sum += newNumArr[i];\n    newNumArr[i] = sum;\n    sum = 0;\n  }\n  for (let i = 0; i < newNumArr.length; i++) {\n    newNum = newNumArr[i];\n  }\n  return newNum;\n}\n", "\n  const nums = [];\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const greater = numbers.sort((a, b) => b - a);\n  greater.forEach(g => nums.push(g));\n  num = nums.join('');\n  return num;\n}\n", "\n  const num = parseInt(n, 10);\n  return new BigNumber(`${num.toString(2)}`).add(new BigNumber(`${num.toString(2).slice(1)}`)).toString(10);\n}\n"]}
{"task_id": "MBJSP/408", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction kSmallestPairs(nums1, nums2, k) {\n/**\n * * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n */", "entry_point": "kSmallestPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 7];\nvar arg01 = [2, 4, 6];\nvar arg02 = 2;\nvar x0 = kSmallestPairs(arg00, arg01, arg02);\nvar v0 = [[1, 2], [1, 4]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 7];\nvar arg11 = [2, 4, 6];\nvar arg12 = 1;\nvar x1 = kSmallestPairs(arg10, arg11, arg12);\nvar v1 = [[1, 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 7];\nvar arg21 = [2, 4, 6];\nvar arg22 = 7;\nvar x2 = kSmallestPairs(arg20, arg21, arg22);\nvar v2 = [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      if (i < k && j < k) {\n        result.push([nums1[i], nums2[j]]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  let ans = 0;\n  const n = nums1.length + nums2.length;\n  const sortedNums = nums1.concat(nums2).sort((a, b) => a - b);\n  let index = 0;\n  let i = 0;\n  const kSmallestPairsK = kSmallestPairs(nums1, nums2, k);\n  const kSmallestPairsKPermutation = kSmallestPairsK.map(num => [num, sortedNums[index]]);\n  while (i < kSmallestPairsKPermutation.length && kSmallestPairsKPermutation[i][0] < sortedNums.length) {\n    if (kSmallestPairsKPermutation[i][1] < sortedNums[sortedNums.length - 1]) {\n      ans++;\n    }\n    index++;\n    i++;\n  }\n  return ans;\n}\n// }", "\n  const arr1 = nums1.sort(", "\n  const nums1Sorted = sortNumericStrings(nums1);\n  const nums2Sorted = sortNumericStrings(nums2);\n  let possiblePairs = 0;\n  for (let i = 0; i < nums1Sorted.length; i++) {\n    for (let j = 0; j < nums2Sorted.length; j++) {\n      if (nums1Sorted[i] + nums2Sorted[j] === k) {\n        possiblePairs++;\n        if (possiblePairs === k)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n", "\n  // Write your code here\n  const num1 = nums1.length;\n  const num2 = nums2.length;\n  let result = [];\n  if (num1 === 0 || num2 === 0) {\n    return result;\n  }\n  // \u521d\u59cb\u5316\n  let helper = new Array(num1 + num2).fill(0);\n  // \u5224\u65ad\u6392\u5e8f\n  if (nums1[0] > nums2[0]) {\n    helper[0] = k + 1;\n    result.push(helper);\n    return result;\n  } else {\n    helper[0] = k;\n    result.push(helper);\n    return result;\n  }\n  // \u8fed\u4ee3\n  for (let i = 0; i < num1; i++) {\n    let m = nums1[i];\n    for (let j = 0; j < num2; j++) {\n      let n = nums2[j];\n      let l = helper[i];\n      let r = helper[i + 1];\n      let s = k;\n      if (l + r > k) {\n        s = l + r - k;\n      }\n      helper[i + j + 1] += s;\n      result.push(helper);\n      if (helper[i + j + 1] >= k) {\n        break;\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/409", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minProductTuple(list1) {\n/**\n * * Write a function to find the minimum product from the pairs of tuples within a given list.\n */", "entry_point": "minProductTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 7], [2, 6], [1, 8], [4, 9]];\nvar x0 = minProductTuple(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [15, 2], [5, 10]];\nvar x1 = minProductTuple(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 44], [10, 15], [20, 5], [12, 9]];\nvar x2 = minProductTuple(arg20);\nvar v2 = 100;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const min = Math.min(list1[0] * list1[1], list1[0] * list1[2], list1[1] * list1[2]);\n  return min;\n}\n", "\n  const result = [];\n  const product = ", "\n  const minProduct = []\n  for (let i = 0; i < list1.length - 1; i++) {\n    for (let j = 0; j < list1.length - 1; j++) {\n      if (list1[i] < list1[j] && list1[i] * list1[j] < minProduct[0]) {\n        minProduct[0] = list1[i] * list1[j];\n      }\n    }\n  }\n  return minProduct;\n}\n", "\n  const minproduct = list1.reduce((a, b) => {\n    return Math.min(a, b);\n  }, Infinity);\n  return minproduct;\n}\n", "\n  // Write your code here\n  let min = list1.reduce((a, b) => a + b);\n  for (let i = 0; i < list1.length - 1; i++) {\n    for (let j = i + 1; j < list1.length; j++) {\n      if (list1[i] * list1[j] < min) {\n        min = list1[i] * list1[j];\n      }\n    }\n  }\n  return min;\n}\n"]}
{"task_id": "MBJSP/410", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction minVal(listval) {\n/**\n * * Write a function to find the minimum value in a given heterogeneous list.\n */", "entry_point": "minVal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", 3, 2, 4, 5, \"version\"];\nvar x0 = minVal(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", 15, 20, 25];\nvar x1 = minVal(arg10);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", 30, 20, 40, 50, \"version\"];\nvar x2 = minVal(arg20);\nvar v2 = 20;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let minval = null;\n  for (let i = 0; i < listval.length; i++) {\n    if (minval === null) {\n      minval = listval[i];\n    }\n    else {\n      if (listval[i] < minval) {\n        minval = listval[i];\n      }\n    }\n  }\n  return minval;\n}\n", "\n  const result = [];\n  for (let i = 0; i < listVal.length; i++) {\n    const min = listVal[i].min();\n    result.push(min);\n  }\n  return Math.min.apply(null, result);\n}\n", "\n  const result = listVal.reduce((a, b) => a > b? b : a);\n  return result;\n}\n", "\n  let minval = listVal[0];\n  for (let i = 1; i < listVal.length; i++) {\n    if (minval > listVal[i]) {\n      minval = listVal[i];\n    }\n  }\n  return minval;\n}\n", "\n  const listInt = listval.map(x => typeof x === 'number'? x : null);\n  return listInt.reduce((min, x) => (x && x < min? x : min));\n}\n"]}
{"task_id": "MBJSP/411", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction snakeToCamel(word) {\n/**\n * * Write a function to convert the given snake case string to camel case string by using regex.\n */", "entry_point": "snakeToCamel", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"android_tv\";\nvar x0 = snakeToCamel(arg00);\nvar v0 = \"AndroidTv\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"google_pixel\";\nvar x1 = snakeToCamel(arg10);\nvar v1 = \"GooglePixel\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"apple_watch\";\nvar x2 = snakeToCamel(arg20);\nvar v2 = \"AppleWatch\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let newWord = word.replace(/snake/g, 'Camel');\n  return newWord;\n}\n", "\n  return word.replace(/[-_][^-_]*$/g, (match) => match.slice(1).toUpperCase());\n}\n", "\n  const reg = /_[a-z]/g;\n  return word.toLowerCase().replace(reg, (x) => x.toUpperCase());\n}\n", "\n  const re = /\\w+|[^A-Z]|[a-z]/g;\n  const words = word.split('_');\n  const camelWord = words.map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('');\n  return camelWord;\n}\n", "\n  return word.replace(/[-_]/g, (letter) => letter.toUpperCase());\n}\n"]}
{"task_id": "MBJSP/412", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeOdd(l) {\n/**\n * * Write a JavaScript function to remove odd numbers from a given list.\n */", "entry_point": "removeOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = removeOdd(arg00);\nvar v0 = [2];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 6];\nvar x1 = removeOdd(arg10);\nvar v1 = [2, 4, 6];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 3];\nvar x2 = removeOdd(arg20);\nvar v2 = [10, 20];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l.filter(i => i % 2 === 1);\n}\n", "\n    return l.filter(num => num % 2!== 0);\n}\n", "\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2!== 0) result.push(l[i]);\n  }\n  return result;\n}\n", "\n  let oddNum = l.filter(el => el % 2!== 0);\n  return oddNum;\n}\n", "\n  return l.filter(x => x % 2!= 0);\n}\n"]}
{"task_id": "MBJSP/413", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extractNthElement(list1, n) {\n/**\n * * Write a function to extract the nth element from a given list of tuples.\n */", "entry_point": "extractNthElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg01 = 0;\nvar x0 = extractNthElement(arg00, arg01);\nvar v0 = [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg11 = 2;\nvar x1 = extractNthElement(arg10, arg11);\nvar v1 = [99, 96, 94, 98];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg21 = 1;\nvar x2 = extractNthElement(arg20, arg21);\nvar v2 = [98, 97, 91, 94];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testtup = list1.map(tup => tup.slice());\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testtup[i][i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i][n]);\n  }\n  return result;\n}\n", "\n  return list1[n];\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i][n]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  const counter = {};\n  for (let i = 0; i < list1.length; i++) {\n    counter[list1[i][0]] = counter[list1[i][0]] + 1 || 1;\n    if (counter[list1[i][0]] === n) {\n      result.push(list1[i][1]);\n      counter[list1[i][0]] = 0;\n    }\n  }\n  return result;\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/414", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction overlapping(list1, list2) {\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */", "entry_point": "overlapping", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [6, 7, 8, 9];\nvar x0 = overlapping(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar arg11 = [4, 5, 6];\nvar x1 = overlapping(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 4, 5];\nvar arg21 = [1, 4, 5];\nvar x2 = overlapping(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    let result = false;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i]) {\n            result = true;\n        }\n    }\n    return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === list2[i]) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\nconst distinctArray = [1, 2, 3, 3, 4, 4, 4, 4, 4, 4];\n", "\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === list2[0]) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === list2[i]) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  const sequence = [];\n  for (let i = 0; i < list1.length; i++) {\n    sequence.push(list1[i]);\n  }\n  for (let i = 0; i < list2.length; i++) {\n    if (sequence.indexOf(list2[i]) > -1) {\n      result.push(true);\n      break;\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/415", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxProduct(arr) {\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */", "entry_point": "maxProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 7, 0, 8, 4];\nvar x0 = maxProduct(arg00);\nvar v0 = [7, 8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, -1, -2, -4, 5, 0, -6];\nvar x1 = maxProduct(arg10);\nvar v1 = [-4, -6];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar x2 = maxProduct(arg20);\nvar v2 = [2, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const arrLength = arr.length;\n  if (arrLength === 1) {\n    return arr[0];\n  }\n  const maxLeft = Math.max(0, arr[0]);\n  const maxRight = Math.max(0, arr[arrLength - 1]);\n  const max = Math.max(maxLeft * maxRight, maxLeft * arr[arrLength - 1], arr[0] * maxRight, arr[arrLength - 1] * maxLeft);\n  return max;\n}\n", "\n  const largestProduct = Math.max(...arr.map(x => x * x));\n  const smallestProduct = Math.min(...arr.map(x => x * x));\n  return arr.map((a, i) => Math.max(a * largestProduct, a * smallestProduct)).reduce((a, b) => a > b? a : b);\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length - 1; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] * arr[j] > result[0]) {\n        result[0] = arr[i] * arr[j];\n        result[1] = arr[i];\n        result[2] = arr[j];\n      }\n    }\n  }\n  return result;\n}\n", "\n  return arr.reduce((max, val) => {\n    if (val > max) {\n      return max;\n    } else {\n      return val;\n    }\n  });\n}\n", "\n  const arrlen = arr.length;\n  if (arrlen === 0) {\n    return null;\n  }\n  let arrmax = arr[0];\n  let arrmin = arr[0];\n  for (let i = 1; i < arrlen; i++) {\n    if (arr[i] > arrmax) {\n      arrmax = arr[i];\n    }\n    if (arr[i] < arrmin) {\n      arrmin = arr[i];\n    }\n  }\n  const max = arrmax * arrmin;\n  const min = arrmin * arrmax;\n  return (max > min)? [max, min] : [min, max];\n}\n"]}
{"task_id": "MBJSP/416", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction breaksum(n) {\n/**\n * * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n */", "entry_point": "breaksum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = breaksum(arg00);\nvar v0 = 13;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 24;\nvar x1 = breaksum(arg10);\nvar v1 = 27;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 23;\nvar x2 = breaksum(arg20);\nvar v2 = 23;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const n1 = Math.floor(n / 3);\n  const n2 = Math.floor((n - n1 * 3) / 3);\n  const n3 = n - n1 * 3 - n2 * 3;\n  const result1 = recursiveSum(n1);\n  const result2 = recursiveSum(n2);\n  const result3 = recursiveSum(n3);\n  const max = Math.max(result1, result2, result3);\n  return max;\n}\n", "\n    if (n === 0) return 0;\n    const leftsum = (breaksum(n - 1))\n        return leftsum + (n % 3 === 0? n / 3 : 0);\n}\n", "\n  // Write your code here\n  let finalSum = 0;\n  const innerResult = breaksum(n / 3);\n  for (let i = 0; i < innerResult.length; i++) {\n    finalSum = finalSum + innerResult[i];\n  }\n  return finalSum + (n % 3 === 0? 0 : innerResult[innerResult.length - 1]);\n}\n", "\n  const result = [];\n  ", "\n  const breakpoint = n / 3;\n  // Write your code here\n  const result = [0];\n  "]}
{"task_id": "MBJSP/417", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction groupTuples(input) {\n/**\n * * Write a function to find common first element in given list of tuple.\n */", "entry_point": "groupTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]];\nvar x0 = groupTuples(arg00);\nvar v0 = [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]];\nvar x1 = groupTuples(arg10);\nvar v1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]];\nvar x2 = groupTuples(arg20);\nvar v2 = [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testTup = input.map(tup => tup[0]);\n  return testTup;\n}\n", "\n  const inputList = input.slice();\n  let i = 1;\n  while (i < inputList.length) {\n    inputList[i] = inputList[i].concat(inputList[i - 1]);\n    i++;\n  }\n  return inputList;\n}\n", "\n  let result = [];\n  for (let i = 0; i < input.length - 1; i++) {\n    result.push(input[i].slice(0, 1));\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const arr = input;\n  const map = {};\n  for (let i = 0; i < arr.length; i++) {\n    map[arr[i][0]] = arr[i];\n  }\n  return map;\n}\n", "\n  const result = [];\n  const temp = input[0];\n  for (let i = 0; i < input.length; i++) {\n    if (temp[0] === input[i][0]) {\n      temp = temp.concat(input[i]);\n    } else {\n      result.push(temp);\n      temp = input[i];\n    }\n  }\n  result.push(temp);\n  return result;\n}\n\n// https://www.hackerrank.com/challenges/py-maths/problem\n"]}
{"task_id": "MBJSP/418", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMax(lst) {\n/**\n * * Write a JavaScript function to find the sublist having maximum length.\n */", "entry_point": "findMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]];\nvar x0 = findMax(arg00);\nvar v0 = [\"A\", \"B\", \"C\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [1, 2], [1, 2, 3]];\nvar x1 = findMax(arg10);\nvar v1 = [1, 2, 3];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 1], [1, 2, 3], [1, 5, 6, 1]];\nvar x2 = findMax(arg20);\nvar v2 = [1, 5, 6, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const result = [];\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > max) {\n            max = lst[i].length;\n            result = [lst[i]];\n        } else if (lst[i].length === max) {\n            result.push(lst[i]);\n        }\n    }\n    return result;\n}\n", "\n  let lstLen = lst.length;\n  let maxLen = lstLen;\n  let lstMax = lst[0];\n  for (let i = 1; i < lstLen; i++) {\n    if (lst[i] > lstMax) {\n      lstMax = lst[i];\n    }\n    if (lst[i] > lst[maxLen]) {\n      maxLen = i;\n    }\n  }\n  const maxLst = lst.slice(0, maxLen);\n  return { maxLength: maxLen, max: lstMax, sublist: maxLst };\n}\n", "\n  let max = 0;\n  let maxLength = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > maxLength) {\n      max = i;\n      maxLength = lst[i].length;\n    }\n  }\n  const result = lst.slice(0, max + 1);\n  return result;\n}\n", "\n  const maxLen = Math.max(...lst.map(l => l.length));\n  const result = lst.filter(l => l.length === maxLen);\n  return result;\n}\n", "\n  let maxLength = 0;\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (maxLength < lst[i].length) {\n      maxLength = lst[i].length;\n      result = [lst[i]];\n    } else if (maxLength === lst[i].length) {\n      result.push(lst[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/419", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction roundAndSum(list1) {\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */", "entry_point": "roundAndSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5];\nvar x0 = roundAndSum(arg00);\nvar v0 = 243;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 2, 9, 24.3, 29];\nvar x1 = roundAndSum(arg10);\nvar v1 = 345;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25.0, 56.7, 89.2];\nvar x2 = roundAndSum(arg20);\nvar v2 = 513;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(Math.round(list1[i]));\n  }\n  return result.reduce((a, b) => a + b, 0);\n}\n", "\n  const testTup = list1.map(num => parseFloat(num.toString()));\n  const testSum = testTup.reduce((acc, elem) => acc + elem, 0);\n  const testRoundedTup = testTup.map(num => parseFloat(num.toFixed(1)));\n  return testSum * testRoundedTup.length;\n}\n", "\n  // Write your code here\n  let result = 0;\n  for (let i = 0; i < list1.length; i++) {\n    result += list1[i] * Math.pow(10, list1.length - 1 - i);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    const testNum = list1[i];\n    const testNumRounded = Math.round(testNum);\n    const testNumRoundedPlusOne = Math.round(testNum + 1);\n    result.push(testNumRounded + testNumRoundedPlusOne);\n  }\n  return result.reduce((a, b) => a + b, 0);\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    const temp = Math.round(list1[i]);\n    result.push(temp * Math.pow(10, list1.length - 1 - i));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/420", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n even natural numbers.\n */", "entry_point": "cubeSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = cubeSum(arg00);\nvar v0 = 72;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = cubeSum(arg10);\nvar v1 = 288;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = cubeSum(arg20);\nvar v2 = 800;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    let cubeSum = 0;\n    for (let j = 0; j < i + 1; j++) {\n      cubeSum += j * j * j;\n    }\n    result.push(cubeSum);\n  }\n  return result;\n}\n", "\n  const testtup = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  return testtup.reduce((total, num) => total + num * num * num, 0) + (n - testtup.length + 1) * testtup.reduce((total, num) => total + num * num * num, 0);\n}\n", "\n  const testArray = [...Array(n)].filter(number =>!(number % 2));\n  const sum = testArray.reduce((total, value) => total + value * value * value, 0);\n  return sum;\n}\n", "\n    // Write your code here\n    const nums = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2!== 0) {\n            nums.push(i * i * i);\n        }\n    }\n    return nums.reduce(", "\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += (i + 1) * (i + 1) * (i + 1);\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/421", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction concatenateTuple(testtup) {\n/**\n * * Write a function to concatenate each element of tuple by the delimiter.\n */", "entry_point": "concatenateTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"ID\", \"is\", 4, \"UTS\"];\nvar x0 = concatenateTuple(arg00);\nvar v0 = \"ID-is-4-UTS\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"QWE\", \"is\", 4, \"RTY\"];\nvar x1 = concatenateTuple(arg10);\nvar v1 = \"QWE-is-4-RTY\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"ZEN\", \"is\", 4, \"OP\"];\nvar x2 = concatenateTuple(arg20);\nvar v2 = \"ZEN-is-4-OP\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (typeof testTup[i] ==='string') {\n      result.push(testTup[i]);\n    } else {\n      result.push(testTup[i].toString());\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(testTup[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(testTup[i]);\n  }\n  return result;\n}\n", "\n  let result = '';\n  for (let i = 0; i < testTup.length; i++) {\n    result += testTup[i];\n  }\n  return result;\n}\n", "\n  let result = '';\n  for (let i = 0; i < testTup.length; i++) {\n    result += testTup[i];\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/422", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findAverageOfCube(n) {\n/**\n * * Write a JavaScript function to find the average of cubes of first n natural numbers.\n */", "entry_point": "findAverageOfCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = findAverageOfCube(arg00);\nvar v0 = 4.5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = findAverageOfCube(arg10);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = findAverageOfCube(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    const result = [];\n    const cube = {};\n    for (let i = 1; i <= n; i++) {\n        cube[i] = Math.pow(i, 3);\n    }\n    for (let i = 1; i <= n; i++) {\n        result.push(cube[i]);\n    }\n    return result.reduce((a, b) => a + b) / n;\n}\n", "\n  let c = [];\n  for (let i = 1; i <= n; i++) {\n    let cube = i * i * i;\n    c.push(cube);\n  }\n  const sum = c.reduce((sum, cube) => sum + cube, 0);\n  const average = sum / n;\n  return average;\n}\n", "\n  return Math.round(n * (n + 1) * (n + 2) / 6);\n}\n", "\n  const nums = [];\n  for (let i = 1; i <= n; i++) {\n    nums.push(i * i * i);\n  }\n  return nums.reduce((x, y) => x + y) / nums.length;\n}\n", "\n  let total = 0;\n  for (let i = 0; i <= n; i++) {\n    total = total + Math.pow(i, 3);\n  }\n  const avg = total / n;\n  return Math.round(avg);\n}\n"]}
{"task_id": "MBJSP/423", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getMaxgold(gold, m, n) {\n/**\n * * Write a function to solve gold mine problem.\n */", "entry_point": "getMaxgold", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]];\nvar arg01 = 4;\nvar arg02 = 4;\nvar x0 = getMaxgold(arg00, arg01, arg02);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [30, 40]];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = getMaxgold(arg10, arg11, arg12);\nvar v1 = 70;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 9], [3, 7]];\nvar arg21 = 2;\nvar arg22 = 2;\nvar x2 = getMaxgold(arg20, arg21, arg22);\nvar v2 = 13;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const golds = [...gold];\n  const result = [];\n  for (let i = 0; i < golds.length; i++) {\n    for (let j = 0; j < golds.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      const currentGold = golds[i] + golds[j];\n      if (currentGold < m && currentGold < n) {\n        result.push([golds[i], golds[j]]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const golds = [];\n  for (let i = 0; i < gold; i++) {\n    golds.push([0, i, Math.floor(Math.random() * (n - m) + m)]);\n  }\n  golds.sort((a, b) => b[2] - a[2]);\n  let maxgold = 0;\n  for (let i = 0; i < golds.length; i++) {\n    if (golds[i][2] >= maxgold) {\n      maxgold = golds[i][2];\n    }\n  }\n  return maxgold;\n}\n", "\n  const maxGold = [];\n  for (let i = 0; i < m; i++) {\n    maxGold[i] = [];\n    for (let j = 0; j < n; j++) {\n      maxGold[i][j] = -1;\n    }\n  }\n  maxGold[0][0] = gold[0][0];\n  for (let i = 0; i < m - 1; i++) {\n    for (let j = 0; j < n - 1; j++) {\n      if (gold[i][j] < gold[i][j + 1] && gold[i][j] < gold[i + 1][j] && gold[i][j] < gold[i + 1][j + 1]) {\n        maxGold[i][j] = gold[i][j] + Math.min(maxGold[i][j + 1], Math.min(maxGold[i + 1][j], maxGold[i + 1][j + 1]));\n      }\n    }\n  }\n  return maxGold[m - 1][n - 1];\n}\n", "\n  const mine = [];\n  for (let i = 0; i < m; i++) {\n    mine[i] = [];\n    for (let j = 0; j < n; j++) {\n      mine[i][j] = i === 0 || j === 0 || i == m - 1 || j == n - 1? 0 : gold[i][j] - gold[i - 1][j] - gold[i][j - 1] + gold[i - 1][j - 1];\n    }\n  }\n  let maxgold = 0;\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      maxgold = Math.max(maxgold, mine[i][j]);\n    }\n  }\n  return maxgold;\n}\n", "\n  const start = {\n      x: gold[0],\n      y: gold[1]\n    },\n    end = {\n      x: gold[2],\n      y: gold[3]\n    };\n  const allPositions = getAllPositions(start, end, m, n);\n  const result = allPositions.reduce((a, b) => {\n    if (a[a.length - 1].x > b[b.length - 1].x) {\n      a.push(b);\n    } else {\n      a.push(a);\n    }\n    return a;\n  }, []);\n  return result;\n}\n"]}
{"task_id": "MBJSP/424", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extractRear(testtuple) {\n/**\n * * Write a function to extract only the rear index element of each string in the given tuple.\n */", "entry_point": "extractRear", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Mers\", \"for\", \"Vers\"];\nvar x0 = extractRear(arg00);\nvar v0 = [\"s\", \"r\", \"s\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Avenge\", \"for\", \"People\"];\nvar x1 = extractRear(arg10);\nvar v1 = [\"e\", \"r\", \"e\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Gotta\", \"get\", \"go\"];\nvar x2 = extractRear(arg20);\nvar v2 = [\"a\", \"t\", \"o\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testArr = testtuple.map(elem => elem.split(\"\"));\n  const result = [];\n  for (let i = 0; i < testArr.length; i++) {\n    let temp = [];\n    for (let j = testArr[i].length - 1; j >= 0; j--) {\n      temp.push(testArr[i][j]);\n    }\n    result.push(temp);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(testTup[i].slice(0, testTup[i].length - 1));\n  }\n  return result;\n}\n", "\n  return testtuple.map(x => {\n    return x[x.length - 1];\n  });\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (i === 0) {\n      result.push(testTup[i]);\n    } else if (i === testTup.length - 1) {\n      result.push(testTup[i]);\n    } else {\n      result.push(testTup[i] + testTup[i - 1] + testTup[i + 1]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(testTup[i].substring(testTup[i].length - 1));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/425", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countElementInList(list1, x) {\n/**\n * * Write a function to count the number of sublists containing a particular element.\n */", "entry_point": "countElementInList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]];\nvar arg01 = 1;\nvar x0 = countElementInList(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]];\nvar arg11 = \"A\";\nvar x1 = countElementInList(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]];\nvar arg21 = \"E\";\nvar x2 = countElementInList(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const count = {};\n  for (let i = 0; i < list1.length; i++) {\n    count[list1[i]] = count[list1[i]] + 1 || 1;\n    if (count[list1[i]] === x) {\n      return i + 1;\n    }\n  }\n  return 0;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    const curList = list1[i];\n    const curListLen = curList.length;\n    const found = curList.find(num => num === x);\n    if (found!== undefined) {\n      result.push(curListLen);\n    }\n  }\n  return result;\n}\n", "\n  return list1.map(list2 => list2.find(y => y === x).length).reduce((a, b) => a + b);\n}\n", "\n  return list1.reduce((count, value) => {\n    if (value === x) {\n      return count + 1;\n    } else {\n      return count;\n    }\n  }, 0);\n}\n", "\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === x) {\n      count++;\n    }\n  }\n  return count;\n}\n"]}
{"task_id": "MBJSP/426", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction filterOddnumbers(nums) {\n/**\n * * Write a function to filter odd numbers using lambda function.\n */", "entry_point": "filterOddnumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = filterOddnumbers(arg00);\nvar v0 = [1, 3, 5, 7, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 45, 67, 84, 93];\nvar x1 = filterOddnumbers(arg10);\nvar v1 = [45, 67, 93];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 7, 9, 8, 6, 4, 3];\nvar x2 = filterOddnumbers(arg20);\nvar v2 = [5, 7, 9, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.filter(num => num % 2 === 1);\n}\n", "\n  return nums.filter(num => num % 2 === 1);\n}\n", "\n  const odds = nums.filter(num => num % 2!== 0);\n  return odds;\n}\n", "\n  const oddNumbers = nums.filter(num => num % 2 === 1);\n  return oddNumbers;\n}\n", "\n    const numswithodd = [];\n    nums.forEach((num, index) => {\n        if (index % 2 === 1) {\n            numswithodd.push(num);\n        }\n    });\n    return numswithodd;\n}\n"]}
{"task_id": "MBJSP/427", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction changeDateFormat(dt) {\n/**\n * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n */", "entry_point": "changeDateFormat", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"2026-01-02\";\nvar x0 = changeDateFormat(arg00);\nvar v0 = \"02-01-2026\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"2020-11-13\";\nvar x1 = changeDateFormat(arg10);\nvar v1 = \"13-11-2020\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"2021-04-26\";\nvar x2 = changeDateFormat(arg20);\nvar v2 = \"26-04-2021\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const year = dt.substr(0, 4);\n  const month = dt.substr(5, 2);\n  const day = dt.substr(8, 2);\n  return `${day}-${month}-${year}`;\n}\n", "\n  const dateRegex = /(19|20)[0-9]{2}-(0[1-9]|1[012])-([0-2][1-9]|3[01])/;\n  const d = dt.slice(0, 10);\n  const dtConverted = d.match(dateRegex)? dt : '';\n  return dtConverted;\n}\n", "\n  const dateRegex = /(\\d{4})-(\\d{2})-(\\d{2})/;\n  const result = dt.match(dateRegex);\n  return result[1] + \"-\" + result[2] + \"-\" + result[3];\n}\n", "\n    let d = dt.split('-');\n    d[2] = d[2].substring(0, 2);\n    return dt.replace('-', '-' + d[2] + '-' + d[1] + '-' + d[0]);\n}\n", "\n  let pattern = new RegExp(\"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\", \"gm\");\n  let formattedDate = dt.match(pattern).map(p => new Date(p[0], p[1] - 1, p[2], p[3], 0, 0).toString());\n  return formattedDate;\n}\nconst numtuple = [1, 2, 3, 4, 5];\n"]}
{"task_id": "MBJSP/428", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction shellSort(mylist) {\n/**\n * * Write a function to sort the given array by using shell sort.\n */", "entry_point": "shellSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95];\nvar x0 = shellSort(arg00);\nvar v0 = [2, 3, 4, 5, 12, 12, 23, 56, 81, 95];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [24, 22, 39, 34, 87, 73, 68];\nvar x1 = shellSort(arg10);\nvar v1 = [22, 24, 34, 39, 68, 73, 87];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [32, 30, 16, 96, 82, 83, 74];\nvar x2 = shellSort(arg20);\nvar v2 = [16, 30, 32, 74, 82, 83, 96];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const gap = mylist.length / 2;\n  while (gap > 0) {\n    for (let i = gap; i < mylist.length; i++) {\n      let temp = mylist[i];\n      let j = i;\n      while (j >= gap && mylist[j - gap] > temp) {\n        mylist[j] = mylist[j - gap];\n        j -= gap;\n      }\n      mylist[j] = temp;\n    }\n    gap /= 2;\n  }\n  return mylist;\n}\n", "\n  const gap = 1;\n  while (gap < mylist.length / 3) {\n    gap = 3 * gap + 1;\n  }\n  while (gap > 0) {\n    for (let i = gap; i < mylist.length; i++) {\n      for (let j = i - gap; j >= 0 && mylist[j] > mylist[j + gap]; j -= gap) {\n        const temp = mylist[j];\n        mylist[j] = mylist[j + gap];\n        mylist[j + gap] = temp;\n      }\n    }\n    gap = gap / 3;\n  }\n  return mylist;\n}\n", "\n    const gap = mylist.length / 2;\n    while (gap > 0) {\n        for (let i = gap; i < mylist.length; i++) {\n            let temp = mylist[i];\n            let j;\n            for (j = i - gap; j >= 0 && mylist[j] > temp; j -= gap) {\n                mylist[j + gap] = mylist[j];\n            }\n            mylist[j + gap] = temp;\n        }\n        gap = gap / 2;\n    }\n    return mylist;\n}\n", "\n  const n = mylist.length;\n  const gap = n / 2;\n  while (gap > 0) {\n    for (let i = gap; i < n; i++) {\n      let temp = mylist[i];\n      let j = i - gap;\n      while (j >= 0 && mylist[j] > temp) {\n        mylist[j + gap] = mylist[j];\n        j = j - gap;\n      }\n      mylist[j + gap] = temp;\n    }\n    gap = gap / 2;\n  }\n  return mylist;\n}\n", "\n  let gap = Math.floor(mylist.length / 2);\n  while (gap > 0) {\n    for (let i = gap; i < mylist.length; i++) {\n      let temp = mylist[i];\n      let j = i;\n      while (j >= gap && mylist[j - gap] > temp) {\n        mylist[j] = mylist[j - gap];\n        j -= gap;\n      }\n      mylist[j] = temp;\n    }\n    gap = Math.floor(gap / 2);\n  }\n  return mylist;\n}\n"]}
{"task_id": "MBJSP/429", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction andTuples(testtup1, testtup2) {\n/**\n * * Write a function to extract the elementwise and tuples from the given two tuples.\n */", "entry_point": "andTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = andTuples(arg00, arg01);\nvar v0 = [0, 0, 2, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = [5, 6, 7, 8];\nvar x1 = andTuples(arg10, arg11);\nvar v1 = [1, 2, 3, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 12];\nvar arg21 = [7, 13, 14, 17];\nvar x2 = andTuples(arg20, arg21);\nvar v2 = [0, 9, 10, 0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push([testtup1[i], testtup2[i]]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] && testTup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i] && testtup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    const temp = [testTup1[i], testTup2[i]];\n    const temp1 = temp.map(v => parseInt(v, 10));\n    result.push(temp1);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push([testTup1[i], testTup2[i]]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/430", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction parabolaDirectrix(a, b, c) {\n/**\n * * Write a function to find the directrix of a parabola.\n */", "entry_point": "parabolaDirectrix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaDirectrix(arg00, arg01, arg02);\nvar v0 = -198;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaDirectrix(arg10, arg11, arg12);\nvar v1 = -2336;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaDirectrix(arg20, arg21, arg22);\nvar v2 = -130;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (a * x * x + b * x + c) / (a * x + b);\n}\n", "\n  const result = [];\n  for (let x = a; x <= b; x++) {\n    result.push((x - a) * (x - a) + c);\n  }\n  return result;\n}\n", "\n  const x = Math.sqrt(c / a);\n  const y = a * x * x + b * x + c;\n  return y === 0? x : Math.abs(x);\n}\n", "\n  const d = (a * a * c * c + 4 * a * b * c - 4 * a * a * b * b) / (2 * a * a);\n  return d;\n}\n", "\n  let f = a * x * x + b * x + c;\n  let g = Math.sqrt(f * f - 4 * a * f);\n  const result = [(-f - g) / (2 * a), (-f + g) / (2 * a)];\n  return result;\n}\n\nconst testtup = [1, 3, 5, 8, 13, 21, 34];\nconsole.log(isEmpty(testtup));\nconsole.log(countLargestNum(testtup));\nconsole.log(uniqueElements(testtup));\nconsole.log(permutations(testtup));\nconsole.log(sortNumericStrings(testtup));\nconsole.log(multiplyElements(testtup));\nconsole.log(parabolaDirectrix(3, 2, 3));\n\n"]}
{"task_id": "MBJSP/431", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction commonElement(list1, list2) {\n/**\n * * Write a function that takes two lists and returns true if they have at least one common element.\n */", "entry_point": "commonElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [5, 6, 7, 8, 9];\nvar x0 = commonElement(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar arg11 = [6, 7, 8, 9];\nvar x1 = commonElement(arg10, arg11);\nvar v1 = null;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"a\", \"b\", \"c\"];\nvar arg21 = [\"d\", \"b\", \"e\"];\nvar x2 = commonElement(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const list1 = list1.map(tup => tup.toString());\n    const list2 = list2.map(tup => tup.toString());\n    // Write your code here\n    const set1 = new Set(list1);\n    const set2 = new Set(list2);\n    return set1.intersection(set2).length > 0;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        result.push(list1[i]);\n        break;\n      }\n    }\n  }\n  return result.length > 0? true : false;\n}\n", "\n  let common = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common.push(list1[i]);\n        break;\n      }\n    }\n  }\n  return common.length > 0;\n}\n", "\n  return false;\n}\n", "\n  const list1Elements = list1.map(item => item.item);\n  const list2Elements = list2.map(item => item.item);\n  const commonElements = list1Elements.filter(item => list2Elements.includes(item));\n  if (commonElements.length > 0) {\n    return true;\n  }\n  return false;\n}\n"]}
{"task_id": "MBJSP/432", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction medianTrapezium(base1, base2, height) {\n/**\n * * Write a function to find the median of a trapezium.\n */", "entry_point": "medianTrapezium", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar arg01 = 25;\nvar arg02 = 35;\nvar x0 = medianTrapezium(arg00, arg01, arg02);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 20;\nvar arg12 = 30;\nvar x1 = medianTrapezium(arg10, arg11, arg12);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 9;\nvar arg22 = 4;\nvar x2 = medianTrapezium(arg20, arg21, arg22);\nvar v2 = 7.5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let area = base1 * height / 2 + base2 * height / 2;\n  let base = Math.max(base1, base2);\n  let height = Math.min(base1, base2);\n  return area / base;\n}\n", "\n  const newBase1 = base1 + Math.floor(height / 2);\n  const newBase2 = base2 + Math.floor(height / 2);\n  return ((newBase1 + newBase2) / 2);\n}\n", "\n  const area = base1 * height / 2 + base2 * height / 2;\n  return area;\n}\n", "\n  let result = ((base1 + base2) / 2) * height;\n  return result;\n}\n\n/**\n * DO NOT MODIFY THIS FUNCTION.\n *\n * @param a string representing the expression to evaluate.\n * @return an expression with a single numeric value.\n */\n", "\n  return Math.floor(((base1 + base2) * height) / 2);\n}\n"]}
{"task_id": "MBJSP/433", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkGreater(arr, number) {\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */", "entry_point": "checkGreater", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = 4;\nvar x0 = checkGreater(arg00, arg01);\nvar v0 = \"No, entered number is less than those in the array\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 5, 6];\nvar arg11 = 8;\nvar x1 = checkGreater(arg10, arg11);\nvar v1 = \"Yes, the entered number is greater than those in the array\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 7, 4, 8, 6, 1];\nvar arg21 = 11;\nvar x2 = checkGreater(arg20, arg21);\nvar v2 = \"Yes, the entered number is greater than those in the array\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > number) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n", "\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > number) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  const len = arr.length;\n  const index = len - 1;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] > number) {\n      index = i;\n      break;\n    }\n  }\n  return index === len - 1? false : true;\n}\n", "\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < number) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  const arr2 = arr.map(num => parseInt(num, 10));\n  const arr3 = arr2.filter(num => num > number);\n  return arr3.length;\n}\n"]}
{"task_id": "MBJSP/434", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction textMatchOne(text) {\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */", "entry_point": "textMatchOne", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ac\";\nvar x0 = textMatchOne(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"dc\";\nvar x1 = textMatchOne(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abba\";\nvar x2 = textMatchOne(arg20);\nvar v2 = \"Found a match!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return /(?=.*b)(?=.*a).*/.test(text);\n}\n", "\n    // Write your code here\n    const result = [];\n    let i = 0;\n    let textlen = text.length;\n    while (i < textlen) {\n        let subtext = text.slice(i, i + 2);\n        let j = i + 1;\n        while (j < textlen && text.charAt(j) === subtext.charAt(0)) {\n            subtext = subtext.slice(1);\n            j++;\n        }\n        if (subtext.length === 1) {\n            result.push(i);\n            i = j + 1;\n        } else {\n            i = j;\n        }\n    }\n    return result;\n}\n", "\n  // Write your code here\n  return false;\n}\n", "\n  return text.match(/(a)+b/);\n}\n", "\n  const result = [];\n  for (let i = 0; i < text.length - 1; i++) {\n    if (text[i] === 'a' && (text[i + 1] === 'b' || text[i + 1] === 'B')) {\n      result.push(text[i]);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/435", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction lastDigit(n) {\n/**\n * * Write a JavaScript function to find the last digit of a given number.\n */", "entry_point": "lastDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 123;\nvar x0 = lastDigit(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 25;\nvar x1 = lastDigit(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = lastDigit(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n % 10;\n}\n", "\n  const last = Math.floor(n % 10);\n  return last;\n}\n", "\n  return n % 10;\n}\n", "\n  return n % 10;\n}\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50];\nconst sortedNumbers = numbers.sort((a, b) => a - b);\nconsole.log(sortedNumbers.length);\n", "\n  let lastDigit = n % 10;\n  if (lastDigit < 10) {\n    lastDigit = n % 10;\n  } else {\n    lastDigit = (n % 10) - 1;\n  }\n  return lastDigit;\n}\n"]}
{"task_id": "MBJSP/436", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction negNos(list1) {\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */", "entry_point": "negNos", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, 4, 5, -6];\nvar x0 = negNos(arg00);\nvar v0 = [-1, -6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, -2, 3, 4];\nvar x1 = negNos(arg10);\nvar v1 = [-1, -2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-7, -6, 8, 9];\nvar x2 = negNos(arg20);\nvar v2 = [-7, -6];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n", "\n  return list1.map(num => num * -1).join();\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    result.push(list1[i] * -1);\n  }\n  return result;\n}\n", "\n  return list1.filter(num => num < 0);\n}\n"]}
{"task_id": "MBJSP/437", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeOdd(str1) {\n/**\n * * Write a function to remove odd characters in a string.\n */", "entry_point": "removeOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = removeOdd(arg00);\nvar v0 = \"yhn\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = removeOdd(arg10);\nvar v1 = \"rga\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = removeOdd(arg20);\nvar v2 = \"agae\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str1.replace(/([0-9])[^a-z]/g, '$1');\n}\n", "\n  let result = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] % 2!== 0) {\n      result.push(str1[i]);\n    }\n  }\n  return result;\n}\n", "\n  let result = str1;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] % 2 === 1) {\n      result = result.replace(str1[i], '');\n    }\n  }\n  return result;\n}\n", "\n  const odds = str1.split('.');\n  return odds.join('.');\n}\n", "\n  const result = [];\n  for (let i = 0; i < str1.length; i++) {\n    const char = str1[i];\n    if (char % 2!== 0) {\n      result.push(char);\n    }\n  }\n  return result.join(\"\");\n}\n"]}
{"task_id": "MBJSP/438", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countBidirectional(testlist) {\n/**\n * * Write a function to count bidirectional tuple pairs.\n */", "entry_point": "countBidirectional", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]];\nvar x0 = countBidirectional(arg00);\nvar v0 = \"3\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]];\nvar x1 = countBidirectional(arg10);\nvar v1 = \"2\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]];\nvar x2 = countBidirectional(arg20);\nvar v2 = \"4\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testList.length - 1; i++) {\n    if (testList[i] < testList[i + 1] && testList[i] > testList[i + 1]) {\n      result.push({ testList[i], testList[i + 1] });\n    }\n  }\n  return result;\n}\n// These are the tests we'll run the simulation for.\n\n/**\n * * Here's a list of our tests.\n */\nconst testCases = [\n  {\n    \"testValue\": \"123\",\n    \"answer\": [\n      123\n    ],\n    \"expected\": \"correct\"\n  },\n  {\n    \"testValue\": \"123\\n321\",\n    \"answer\": [\n      123,\n      321\n    ],\n    \"expected\": \"correct\"\n  },\n  {\n    \"testValue\": \"\\n\\n\\n123\\n321\",\n    \"answer\": [\n      123,\n      321\n    ],\n    \"expected\": \"correct\"\n  },\n  {\n    \"testValue\": \"2\\n3\\n5\",\n    \"answer\": [\n      2,\n      3,\n      5\n    ],\n    \"expected\": \"correct\"\n  },\n  {\n    \"testValue\": \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\",\n    \"answer\": [\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9\n    ],\n    \"expected\": \"correct\"\n  },\n  {\n    \"testValue\":", "\n  const counts = {};\n  const direction = {};\n  for (let i = 0; i < testlist.length; i++) {\n    const x = testlist[i].x;\n    const y = testlist[i].y;\n    const tuple = (x, y);\n    if (direction[tuple] == undefined) {\n      direction[tuple] = 0;\n    }\n    direction[tuple]++;\n    if (direction[tuple] === 2) {\n      counts[tuple] = 1;\n    }\n  }\n  return counts;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length - 1; i++) {\n    if (testlist[i] === testlist[i + 1]) {\n      result.push(testlist[i] + testlist[i + 1]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = i + 1; j < testlist.length; j++) {\n      result.push([testlist[i], testlist[j]]);\n    }\n  }\n  return result;\n}\n", "\n  const bidirectionalPairs = 0;\n  for (let i = 0; i < testList.length - 1; i++) {\n    if (testList[i].value === testList[i + 1].value) {\n      bidirectionalPairs++;\n    }\n  }\n  return bidirectionalPairs;\n}\n"]}
{"task_id": "MBJSP/439", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction multipleToSingle(l) {\n/**\n * * Write a function to convert a list of multiple integers into a single integer.\n */", "entry_point": "multipleToSingle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [11, 33, 50];\nvar x0 = multipleToSingle(arg00);\nvar v0 = 113350;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 2, 3, 4, 5, 6];\nvar x1 = multipleToSingle(arg10);\nvar v1 = -123456;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 15, 20, 25];\nvar x2 = multipleToSingle(arg20);\nvar v2 = 10152025;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l.reduce((a, b) => a * b);\n}\n\n// Start tests\ntest('sortNumericStrings', () => {\n  expect(sortNumericStrings([])).toEqual([]);\n  expect(sortNumericStrings([1])).toEqual([1]);\n  expect(sortNumericStrings([1, 2])).toEqual([1, 2]);\n  expect(sortNumericStrings([1, 2, 3])).toEqual([1, 2, 3]);\n});\ntest('multiplyToSingle', () => {\n  expect(multiplyToSingle([])).toEqual(1);\n  expect(multiplyToSingle([1])).toEqual(1);\n  expect(multiplyToSingle([1, 2])).toEqual(2);\n  expect(multiplyToSingle([1, 2, 3])).toEqual(6);\n});\ntest('multipleToSingle', () => {\n  expect(multipleToSingle([])).toEqual(1);\n  expect(multipleToSingle([1])).toEqual(1);\n  expect(multipleToSingle([1, 2])).toEqual(2);\n  expect(multipleToSingle([1, 2, 3])).toEqual(6);\n});\n\n// End tests\nrun();\n", "\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result = result + l[i];\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < l.length; i++) {\n    result = result + l[i] * (Math.pow(10, i));\n  }\n  return result;\n}\n", "\n  const one = 1;\n  return l.reduce((a, b) => a * b + one, one);\n}\n", "\n  const result = l[0];\n  for (let i = 0; i < l.length; i++) {\n    result = result * l[i];\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/440", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findAdverbPosition(text) {\n/**\n * * Write a function to find all adverbs and their positions in a given sentence.\n */", "entry_point": "findAdverbPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"clearly!! we can see the sky\";\nvar x0 = findAdverbPosition(arg00);\nvar v0 = [0, 7, \"clearly\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"seriously!! there are many roses\";\nvar x1 = findAdverbPosition(arg10);\nvar v1 = [0, 9, \"seriously\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"unfortunately!! sita is going to home\";\nvar x2 = findAdverbPosition(arg20);\nvar v2 = [0, 13, \"unfortunately\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const pos = [];\n  const reg = /([A-Z]\\w*)\\s?([A-Z]\\w*)?/g;\n  let match = reg.exec(text);\n  let start = 0;\n  while (match!== null) {\n    let end = start + match[0].length;\n    pos.push({\n      start,\n      end,\n      matchText: match[0],\n      matchTextWithoutAdverb: match[0].replace(/([A-Z]\\w*)\\s?([A-Z]\\w*)?/g, '')\n    });\n    start = start + match[0].length;\n    match = reg.exec(text);\n  }\n  return pos;\n}\n", "\n  const adverbs = [];\n  const prepositions = ['at', 'by', 'in', 'on', 'to', 'upon', 'with'];\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/^(.*)('s?|s)(.*)$/)) {\n      const key = prepositions.find(key => text[i].match(new RegExp(key, 'i')));\n      if (key) {\n        adverbs.push(key);\n      }\n    }\n  }\n  return adverbs;\n}\n", "\n  let result = [];\n  text.split('.').forEach(sentence => {\n    let i = 0;\n    while (i < sentence.length && sentence[i] ==='') {\n      i++;\n    }\n    while (i < sentence.length && (sentence[i].toLowerCase().startsWith('a') || sentence[i].toLowerCase().startsWith('e') || sentence[i].toLowerCase().startsWith('i') || sentence[i].toLowerCase().startsWith('o') || sentence[i].toLowerCase().startsWith('u'))) {\n      result.push({\n        text: sentence[i].toLowerCase(),\n        start: i,\n        end: i + 1\n      });\n      i++;\n    }\n  });\n  return result;\n}\n\n/**\n *\n */\n// Your code here\n\n// Write your code here\n", "\n  const words = text.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].substring(0, 3) === \"is\" || words[i].substring(0, 2) === \"am\" || words[i].substring(0, 2) === \"are\" || words[i].substring(0, 2) === \"was\" || words[i].substring(0, 2) === \"were\") {\n      result.push({\n        text: words[i],\n        position: i\n      });\n    }\n  }\n  return result;\n}\n", "\n  const adverbMap = {};\n  const words = text.split(\" \");\n  words.forEach((word) => {\n    if (adverbMap[word]) adverbMap[word]++;\n    else adverbMap[word] = 1;\n  });\n  let results = [];\n  for (let key in adverbMap) {\n    if (adverbMap[key] == 2) results.push(key);\n  }\n  return results;\n}\n"]}
{"task_id": "MBJSP/441", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction surfaceareaCube(l) {\n/**\n * * Write a function to find the surface area of a cube.\n */", "entry_point": "surfaceareaCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = surfaceareaCube(arg00);\nvar v0 = 150;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = surfaceareaCube(arg10);\nvar v1 = 54;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = surfaceareaCube(arg20);\nvar v2 = 600;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * l * l;\n}\n", "\n  let area = l * l * 3;\n  return area;\n}\n", "\n  const result = l * l * l;\n  return result;\n}\n", "\n  let surface = 2 * l * l;\n  surface += 2 * l * l + l * l * l;\n  return surface;\n}\n", "\n  const side = Math.pow(l, 2);\n  return side * 4;\n}\n"]}
{"task_id": "MBJSP/442", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction positiveCount(nums) {\n/**\n * * Write a function to find the ration of positive numbers in an array of integers.\n */", "entry_point": "positiveCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nvar x0 = positiveCount(arg00);\nvar v0 = 0.54;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nvar x1 = positiveCount(arg10);\nvar v1 = 0.69;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x2 = positiveCount(arg20);\nvar v2 = 0.56;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const positive_count = nums.filter(x => x > 0).length;\n  const negative_count = nums.filter(x => x < 0).length;\n  return positive_count / negative_count;\n}\n", "\n  return nums.filter(num => num > 0).length / nums.length;\n}\n", "\n  const numsCount = nums.filter(num => num > 0);\n  return numsCount.length / nums.length;\n}\n", "\n  const result = [];\n  const positive = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positive.push(nums[i]);\n    }\n  }\n  result.push(positive.length);\n  result.push(positive.length / positive.length);\n  return result;\n}\n", "\n  const positiveCount = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      positiveCount.push(nums[i]);\n    }\n  }\n  return positiveCount.length;\n}\n"]}
{"task_id": "MBJSP/443", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction largestNeg(list1) {\n/**\n * * Write a JavaScript function to find the largest negative number from the given list.\n */", "entry_point": "largestNeg", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, -4, -6];\nvar x0 = largestNeg(arg00);\nvar v0 = -6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, -8, -9];\nvar x1 = largestNeg(arg10);\nvar v1 = -9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, -1];\nvar x2 = largestNeg(arg20);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n// End of \"Number of elements\" ", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] > 0 && list1[i] < result[0]) {\n      result[0] = list1[i];\n    }\n  }\n  return result[0];\n}\nconst result = biggestNum(numbers);\nresult.map(str => str + ';');\n", "\n  return list1.reduce((largest, num) => largest * -1 || num, 0) || 0;\n}\n", "\n    let max = -1;\n    for (let i = 0; i < list1.length; i++) {\n      if (list1[i] > max) max = list1[i];\n    }\n    return max;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result.sort((a, b) => a - b)[0];\n}\n"]}
{"task_id": "MBJSP/444", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction trimTuple(testlist, k) {\n/**\n * * Write a function to trim each tuple by k in the given tuple list.\n */", "entry_point": "trimTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]];\nvar arg01 = 2;\nvar x0 = trimTuple(arg00, arg01);\nvar v0 = \"[(2,), (9,), (2,), (2,)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]];\nvar arg11 = 1;\nvar x1 = trimTuple(arg10, arg11);\nvar v1 = \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]];\nvar arg21 = 1;\nvar x2 = trimTuple(arg20, arg21);\nvar v2 = \"[(8, 4), (8, 12), (1, 7), (6, 9)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    const temp = testlist[i].split(k);\n    result.push(temp);\n  }\n  return result;\n}\n", "\n  return testlist.slice(k, testList.length - k);\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    result.push(testlist[i].split(k));\n  }\n  return result;\n}\n", "\n  return testlist.filter(item => {\n    return k > item[0] && k < item[0];\n  });\n}\n", "\n  let l = testlist.map(tuple => tuple[0].trim()).filter(n => n);\n  return l.map(tuple => [tuple, tuple[0].length - k]);\n}\n"]}
{"task_id": "MBJSP/445", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction indexMultiplication(testtup1, testtup2) {\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n */", "entry_point": "indexMultiplication", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = indexMultiplication(arg00, arg01);\nvar v0 = [[6, 21], [12, 45], [2, 9], [7, 30]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = indexMultiplication(arg10, arg11);\nvar v1 = [[14, 32], [20, 60], [6, 20], [16, 44]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = indexMultiplication(arg20, arg21);\nvar v2 = [[24, 45], [30, 77], [12, 33], [27, 60]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    for (let j = 0; j < testTup2.length; j++) {\n      result.push(testTup1[i] * testTup2[j]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    result.push(testtup1[i] * testtup2[i]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    for (let j = 0; j < testtup2.length; j++) {\n      result.push(testtup1[i] * testtup2[j]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup1.length; i++) {\n    for (let j = 0; j < testtup2.length; j++) {\n      result.push(testtup1[i] * testtup2[j]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testtup1[i] * testtup2[i]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/446", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction countOccurrence(tup, lst) {\n/**\n * * Write a JavaScript function to count the occurence of all elements of list in a tuple.\n */", "entry_point": "countOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"a\", \"a\", \"c\", \"b\", \"d\"];\nvar arg01 = [\"a\", \"b\"];\nvar x0 = countOccurrence(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 4, 6, 7, 1, 4];\nvar arg11 = [1, 4, 7];\nvar x1 = countOccurrence(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [1, 2];\nvar x2 = countOccurrence(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return lst.reduce((prev, current) => prev + tup.indexOf(current), 0);\n}\n", "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = tup.filter(t => t === lst[i]);\n    result.push(num.length);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < tup.length; i++) {\n    let count = lst.filter(el => el === tup[i]).length;\n    result.push(count);\n  }\n  return result;\n}\n", "\n  const count = {};\n  for (let i = 0; i < tup.length; i++) {\n    count[tup[i]] = count[tup[i]] + 1 || 1;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = count[lst[i]] - 1 || 1;\n    if (count[lst[i]] === 0) {\n      delete count[lst[i]];\n    }\n  }\n  return count;\n}\n", "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    result.push(tup.indexOf(lst[i]));\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/447", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction cubeNums(nums) {\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function.\n */", "entry_point": "cubeNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = cubeNums(arg00);\nvar v0 = [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 30];\nvar x1 = cubeNums(arg10);\nvar v1 = [1000, 8000, 27000];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 15];\nvar x2 = cubeNums(arg20);\nvar v2 = [1728, 3375];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return nums.map(num => num * num * num);\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const cube = nums[i] * nums[i] * nums[i];\n    result.push(cube);\n  }\n  return result;\n}\n", "\n  return nums.map(num => num * num * num);\n}\n", "\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    result.push(nums[i] * nums[i] * nums[i]);\n  }\n  return result;\n}\n", "\n  return nums.map(num => num * num * num);\n}\n"]}
{"task_id": "MBJSP/448", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction calSum(n) {\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */", "entry_point": "calSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = calSum(arg00);\nvar v0 = 49;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = calSum(arg10);\nvar v1 = 66;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 11;\nvar x2 = calSum(arg20);\nvar v2 = 88;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return (n * (n + 1)) / 2;\n}\n", "\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i + 1);\n  }\n  return result;\n}\n", "\n    return n * (n + 1) / 2;\n}\n", "\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum = sum + (i + 1);\n    }\n    return sum;\n}\n", "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result.reduce((a, b) => a + b);\n}\n"]}
{"task_id": "MBJSP/449", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkTriangle(x1, y1, x2, y2, x3, y3) {\n/**\n * * Write a JavaScript function to check whether the triangle is valid or not if 3 points are given.\n */", "entry_point": "checkTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar arg03 = 5;\nvar arg04 = 4;\nvar arg05 = 6;\nvar x0 = checkTriangle(arg00, arg01, arg02, arg03, arg04, arg05);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 1;\nvar arg12 = 1;\nvar arg13 = 4;\nvar arg14 = 1;\nvar arg15 = 5;\nvar x1 = checkTriangle(arg10, arg11, arg12, arg13, arg14, arg15);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 1;\nvar arg22 = 1;\nvar arg23 = 1;\nvar arg24 = 1;\nvar arg25 = 1;\nvar x2 = checkTriangle(arg20, arg21, arg22, arg23, arg24, arg25);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const a = Math.abs(x1 - x2);\n  const b = Math.abs(x1 - x3);\n  const c = Math.abs(x2 - x3);\n  const d = Math.abs(y1 - y2);\n  const e = Math.abs(y1 - y3);\n  const f = Math.abs(y2 - y3);\n  if (a + b > x2 && a + c > x3 && b + d > x1 && b + e > x2 && c + f > x3 && d + e > y1 && d + f > y2 && e + f > y3) {\n    return true;\n  }\n  return false;\n}\n", "\n    // Write your code here\n    return (Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2)) <= Math.pow((x3 - x1), 2) + Math.pow((y3 - y1), 2);\n}\n", "\n  const a = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  const b = Math.sqrt((x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2));\n  const c = Math.sqrt((x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3));\n  return (a + b > c) && (a + c > b) && (b + c > a);\n}\n", "\n  let pointA;\n  let pointB;\n  let pointC;\n  if (x1 === x2 && y1 === y2) {\n    pointA = pointB = pointC = {\n      x: x1,\n      y: y1\n    };\n  } else if (x1 === x3 && y1 === y3) {\n    pointA = pointB = {\n      x: x1,\n      y: y1\n    };\n    pointC = {\n      x: x2,\n      y: y2\n    };\n  } else if (x2 === x3 && y2 === y3) {\n    pointA = pointB = {\n      x: x1,\n      y: y1\n    };\n    pointC = {\n      x: x2,\n      y: y2\n    };\n  } else {\n    pointA = {\n      x: x1,\n      y: y1\n    };\n    pointB = {\n      x: x2,\n      y: y2\n    };\n    pointC = {\n      x: x3,\n      y: y3\n    };\n  }\n  const ax = pointA.x;\n  const ay = pointA.y;\n  const bx = pointB.x;\n  const by = pointB.y;\n  const cx = pointC.x;\n  const cy = pointC.y;\n  const a = Math.sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by));\n  const b = Math.sqrt((bx - cx) * (bx - cx) + (by - cy) * (by - cy));\n  ", "\n  return (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) > 0);\n}\n"]}
{"task_id": "MBJSP/450", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extractString(str, l) {\n/**\n * * Write a function to extract specified size of strings from a give list of string values.\n */", "entry_point": "extractString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg01 = 8;\nvar x0 = extractString(arg00, arg01);\nvar v0 = [\"practice\", \"solution\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg11 = 6;\nvar x1 = extractString(arg10, arg11);\nvar v1 = [\"Python\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg21 = 9;\nvar x2 = extractString(arg20, arg21);\nvar v2 = [\"exercises\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (i >= l)\n      result.push(str[i]);\n  }\n  return result;\n}\n", "\n  return str.substr(0, l);\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (i + l < str.length) {\n      result.push(str.slice(i, i + l));\n      i += l - 1;\n    } else {\n      result.push(str.slice(i));\n    }\n  }\n  return result;\n}\nconst output = extractString(numsStr, 5);\n// console.log(output);\n", "\n  // Write your code here\n  return str.substring(0, l);\n}\n", "\n  // Write your code here\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    const word = str[i];\n    if (l) {\n      if (word.length <= l) {\n        result.push(word);\n      }\n    } else {\n      result.push(word);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/451", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeWhitespaces(text1) {\n/**\n * * Write a function to remove all whitespaces from the given string using regex.\n */", "entry_point": "removeWhitespaces", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \" Google    Flutter \";\nvar x0 = removeWhitespaces(arg00);\nvar v0 = \"GoogleFlutter\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \" Google    Dart \";\nvar x1 = removeWhitespaces(arg10);\nvar v1 = \"GoogleDart\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \" iOS    Swift \";\nvar x2 = removeWhitespaces(arg20);\nvar v2 = \"iOSSwift\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const regex = new RegExp('\\\\s+');\n  return text1.replace(regex, \"\");\n}\n", "\n  const txt = text1.replace(/\\s/g, \"\");\n  return txt;\n}\n", "\n  return text1.replace(/\\s/g, \"\");\n}\n", "\n  return text1.replace(/\\s/g, \"\");\n}\n", "\n  const regEx = /\\s+/g;\n  const result = text1.replace(regEx, \"\");\n  return result;\n}\n"]}
{"task_id": "MBJSP/453", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumoffactors(n) {\n/**\n * * Write a JavaScript function to find the sum of even factors of a number.\n */", "entry_point": "sumoffactors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 18;\nvar x0 = sumoffactors(arg00);\nvar v0 = 26;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = sumoffactors(arg10);\nvar v1 = 48;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = sumoffactors(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      result.push(i);\n      n = n / i;\n    }\n  }\n  return result;\n}\n", "\n  ", "\n  const evenFactors = [];\n  for (let i = 0; i <= n; i++) {\n    if (n % i === 0 && n!== i) {\n      evenFactors.push(i);\n    }\n  }\n  return evenFactors.reduce((a, b) => a + b, 0);\n}\n", "\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  const factorSum = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      factorSum.push(i);\n    }\n  }\n  return factorSum.reduce((a, b) => a + b);\n}\n"]}
{"task_id": "MBJSP/454", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction textMatchWordz(text) {\n/**\n * * Write a function that matches a word containing 'z'.\n */", "entry_point": "textMatchWordz", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"pythonz.\";\nvar x0 = textMatchWordz(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"xyz.\";\nvar x1 = textMatchWordz(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang  .\";\nvar x2 = textMatchWordz(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let match = false;\n  if (text.indexOf('z') === 0) {\n    match = true;\n  }\n  return match;\n}\n", "\n  return text.match(/z+/g)!= null;\n}\n", "\n  let z = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].toLowerCase() === 'z') {\n      z++;\n    }\n  }\n  return z === text.length;\n}\n", "\n  const pattern = /z$/;\n  const result = text.match(pattern);\n  return result;\n}\n", "\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let isMatch = false;\n  for (let i = 0; i < text.length; i++) {\n    for (let j = 0; j < alphabet.length; j++) {\n      if (text[i] === alphabet[j]) {\n        isMatch = true;\n      }\n    }\n  }\n  return isMatch;\n}\n"]}
{"task_id": "MBJSP/455", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkMonthnumbNumber(monthnum2) {\n/**\n * * Write a function to check whether the given month number contains 31 days or not.\n */", "entry_point": "checkMonthnumbNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = checkMonthnumbNumber(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = checkMonthnumbNumber(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = checkMonthnumbNumber(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const nums = monthnum.split('');\n  if (nums[0] === '1' && nums[1] === '3' && nums[2] === '0') {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "\n  // Write your code here\n  if ((monthnum2 / 3) % 2 === 1) {\n    return false;\n  }\n  return true;\n}\nconst myTup2 = [3, 4, 5, 6, 7, 8, 9];\n", "\n  if (monthnum2 % 12!== 0) {\n    return false;\n  }\n  if ((monthnum2 % 12) === 0 && monthnum2 >= 12 && monthnum2 < 30) {\n    return true;\n  }\n  return false;\n}\n", "\n  return monthnum2 == '31' || monthnum2 == '30' || monthnum2 == '28';\n}\n", "\n  return monthnum2 === '12' || monthnum2 === '01' || monthnum2 === '02';\n}\n"]}
{"task_id": "MBJSP/456", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction reverseStringList(stringlist) {\n/**\n * * Write a function to reverse strings in a given list of string values.\n */", "entry_point": "reverseStringList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"];\nvar x0 = reverseStringList(arg00);\nvar v0 = [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"john\", \"amal\", \"joel\", \"george\"];\nvar x1 = reverseStringList(arg10);\nvar v1 = [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"jack\", \"john\", \"mary\"];\nvar x2 = reverseStringList(arg20);\nvar v2 = [\"kcaj\", \"nhoj\", \"yram\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < stringlist.length; i++) {\n    result.push(stringlist[stringlist.length - 1 - i]);\n  }\n  return result;\n}\n", "\n  const newlist = stringlist.map(", "\n  return stringlist.map(value => new String(value)).reverse();\n}\n", "\n  return stringlist.reverse();\n}\n", "\n  return stringlist.map(string => string.split(\"\")).map(string => string.reverse().join(\"\")).map(string => string.split(\"\")).map(string => string.reverse().join(\"\"));\n}\n"]}
{"task_id": "MBJSP/457", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findMin(lst) {\n/**\n * * Write a JavaScript function to find the sublist having minimum length.\n */", "entry_point": "findMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [1, 2], [1, 2, 3]];\nvar x0 = findMin(arg00);\nvar v0 = [1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 1], [1, 1, 1], [1, 2, 7, 8]];\nvar x1 = findMin(arg10);\nvar v1 = [1, 1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]];\nvar x2 = findMin(arg20);\nvar v2 = [\"x\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const length = lst.reduce((a, b) => a + b);\n  let sublist = [];\n  for (let i = 0; i < lst.length; i++) {\n    sublist.push(lst[i]);\n  }\n  for (let i = 0; i < sublist.length; i++) {\n    for (let j = i; j < sublist.length; j++) {\n      const total = sublist.reduce((a, b) => a + b);\n      if (total === length) {\n        return sublist.slice(i, j + 1);\n      }\n    }\n  }\n  return [];\n}\n", "\n    return lst;\n}\n", "\n  return lst.sort((a, b) => a.length - b.length);\n}\n", "\n  if (lst.length === 1) {\n    return lst;\n  }\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n", "\n  const min = lst[0];\n  let minlength = lst.length;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      minlength = i;\n      min = lst[i];\n    }\n  }\n  return minlength;\n}\n"]}
{"task_id": "MBJSP/458", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction rectangleArea(l, b) {\n/**\n * * Write a function to find the area of a rectangle.\n */", "entry_point": "rectangleArea", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = rectangleArea(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 5;\nvar x1 = rectangleArea(arg10, arg11);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 2;\nvar x2 = rectangleArea(arg20, arg21);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return l * b;\n}\n", "\n  return l * b;\n}\n", "\n  return l * b;\n}\n", "\n  const sideLength = l;\n  const base = b;\n  const area = sideLength * base;\n  return area;\n}\n", "\n  return l * b;\n}\n\n// Write your code here\nvar result = []\nconsole.log(sortNumericStrings([4, 3, 1, 5, 6]))\nconsole.log(multiplyElements([1, 2, 3]))\nconsole.log(rectangleArea(4, 2))\nconsole.log(result)\n```\n\n</section>\n"]}
{"task_id": "MBJSP/459", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeUppercase(str1) {\n/**\n * * Write a function to remove uppercase substrings from a given string by using regex.\n */", "entry_point": "removeUppercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"cAstyoUrFavoRitETVshoWs\";\nvar x0 = removeUppercase(arg00);\nvar v0 = \"cstyoravoitshos\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"wAtchTheinTernEtrAdIo\";\nvar x1 = removeUppercase(arg10);\nvar v1 = \"wtchheinerntrdo\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"VoicESeaRchAndreComMendaTionS\";\nvar x2 = removeUppercase(arg20);\nvar v2 = \"oiceachndreomendaion\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  return str1.replace(/[A-Z]{1,}/g, \"\");\n}\n", "\n  // Write your code here\n  return str1.replace(/[A-Z]/g, '');\n}\n", "\n  return str1.replace(/\\W/g, '');\n}\n", "\n  const re = /[A-Z]/g;\n  const str2 = str1.replace(re, '');\n  return str2;\n}\n", "\n  return str1.replace(/[A-Z]+/g, \"\");\n}\n"]}
{"task_id": "MBJSP/460", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extract(lst) {\n/**\n * * Write a JavaScript function to get the first element of each sublist.\n */", "entry_point": "extract", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2], [3, 4, 5], [6, 7, 8, 9]];\nvar x0 = extract(arg00);\nvar v0 = [1, 3, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5]];\nvar x1 = extract(arg10);\nvar v1 = [1, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[9, 8, 1], [1, 2]];\nvar x2 = extract(arg20);\nvar v2 = [9, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const start = lst[0];\n  return lst.map((x) => x.slice(start, -1));\n}\n\n// The solution below is available under MIT license\n", "\n  return lst[0];\n}\n", "\n  return lst.reduce((tup, val) => {\n    tup.push(val);\n    return tup;\n  }, []);\n}\n", "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    result.push(lst[i][0]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    result.push(lst[i][0]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/461", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction upperCtr(str) {\n/**\n * * Write a JavaScript function to count the upper case characters in a given string.\n */", "entry_point": "upperCtr", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"PYthon\";\nvar x0 = upperCtr(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"BigData\";\nvar x1 = upperCtr(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"program\";\nvar x2 = upperCtr(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const ctr = 0;\n  const testStr = str.toLowerCase();\n  for (let i = 0; i < testStr.length; i++) {\n    if (testStr[i] >= 'a' && testStr[i] <= 'z') {\n      ctr++;\n    }\n  }\n  return ctr;\n}\n", "\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i).toUpperCase() === str.charAt(i)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\n  const upperChars = new Array('A', 'B', 'C');\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    const upperChar = upperChars[(str.charCodeAt(i) >= 65 && str.charCodeAt(i) <= 90)? str.charCodeAt(i) - 65 : str.charCodeAt(i) - 97];\n    result.push(upperChar);\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].toUpperCase()!== str[i]) {\n      result++;\n    }\n  }\n  return result;\n}\n", "\n    return str.replace(/[A-Z]/g, (c) => c.toUpperCase().charCodeAt(0) + 1);\n}\n"]}
{"task_id": "MBJSP/462", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction combinationsList(list1) {\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */", "entry_point": "combinationsList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"orange\", \"red\", \"green\", \"blue\"];\nvar x0 = combinationsList(arg00);\nvar v0 = [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar x1 = combinationsList(arg10);\nvar v1 = [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"black\", \"orange\"];\nvar x2 = combinationsList(arg20);\nvar v2 = [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < list1.length - 1; i++) {\n    for (let j = i + 1; j < list1.length; j++) {\n      result.push([list1[i], list1[j]]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  let i;\n  let j;\n  if (list1.length == 0) {\n    return result;\n  }\n  for (i = 0; i < list1.length - 1; i++) {\n    for (j = i + 1; j < list1.length; j++) {\n      result.push(list1[i]);\n      result.push(list1[j]);\n      // The following is optional and will not be added to your solution.\n      // You may check this out if you wish.\n      if (i!= 0) {\n        result.push(list1[i - 1]);\n      }\n      if (j!= list1.length - 1) {\n        result.push(list1[j + 1]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const combinations = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1.length; j++) {\n      if (i!== j) {\n        combinations.push([list1[i], list1[j]]);\n      }\n    }\n  }\n  return combinations;\n}\n", "\n  const result = [];\n  ", "\n  // Write your code here\n  const list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      const c = [];\n      c.push(list1[i]);\n      c.push(list1[j]);\n      list2.push(c);\n    }\n  }\n  return list2;\n}\n"]}
{"task_id": "MBJSP/463", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxSubarrayProduct(arr) {\n/**\n * * Write a function to find the maximum product subarray of the given array.\n */", "entry_point": "maxSubarrayProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, -2, -3, 0, 7, -8, -2];\nvar x0 = maxSubarrayProduct(arg00);\nvar v0 = 112;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [6, -3, -10, 0, 2];\nvar x1 = maxSubarrayProduct(arg10);\nvar v1 = 180;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-2, -40, 0, -2, -3];\nvar x2 = maxSubarrayProduct(arg20);\nvar v2 = 80;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const subArray1 = [];\n  subArray1.push(arr[0]);\n  let subArray2 = [];\n  subArray2.push(arr[0]);\n  const maxProduct = 0;\n  const minProduct = arr[0];\n  const product = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      product *= arr[i];\n      subArray1.push(arr[i]);\n    } else if (arr[i] < 0) {\n      product /= arr[i];\n      subArray2.push(arr[i]);\n    } else {\n      product = arr[i];\n      subArray1.push(arr[i]);\n      subArray2.push(arr[i]);\n    }\n    if (product > maxProduct) {\n      maxProduct = product;\n      if (maxProduct === 1) {\n        subArray1.pop();\n        subArray2.pop();\n      } else {\n        if (subArray1.length > subArray2.length) {\n          subArray1 = subArray1.reverse();\n          subArray2 = subArray2.reverse();\n        }\n      }\n    }\n    if (product < minProduct) {\n      minProduct = product;\n    }\n  }\n  return maxProduct * minProduct;\n}\n", "\n  if (arr.length === 1) {\n    return arr[0];\n  }\n  let max_so_far = 1;\n  let current_max_product = 1;\n  let min_so_far = 1;\n  let current_min_product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    max_so_far = max(max_so_far * arr[i], 1, arr[i]);\n    current_max_product = max(current_max_product * arr[i], 1, arr[i]);\n    min_so_far = min(min_so_far * arr[i], 1, arr[i]);\n    current_min_product = min(current_min_product * arr[i], 1, arr[i]);\n  }\n  return Math.max(current_max_product, max_so_far);\n}\n", "\n  // Write your code here\n  const max = 0;\n  let startIndex = 0;\n  let endIndex = 0;\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      startIndex = i;\n    } else if (arr[i] > 0) {\n      endIndex = i;\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n      startIndex = startIndex;\n      endIndex = endIndex;\n    }\n  }\n  if (max < 1) {\n    return result;\n  }\n  for (let i = startIndex; i <= endIndex; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const max = [arr[0], arr[0] * arr[1]];\n  const min = [arr[0], arr[0] * arr[1]];\n  const result = [];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max[1]) {\n      max[0] = max[1];\n      max[1] = arr[i];\n    } else if (arr[i] < min[1]) {\n      min[0] = min[1];\n      min[1] = arr[i];\n    } else {\n      max[0] = Math.max(max[0], arr[i]);\n      min[0] = Math.min(min[0], arr[i]);\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] * (max[0] + min[0]))\n  }\n  return result;\n}\n", "\n  const testTup = arr.map(num => parseInt(num, 10));\n  const maxProduct = testTup.reduce((acc, current) => acc * current);\n  const maxProductSubArray = testTup.reduce((acc, current) => acc.includes(current)? acc : current);\n  return maxProductSubArray * maxProduct;\n}\n"]}
{"task_id": "MBJSP/464", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkValue(dict, n) {\n/**\n * * Write a function to check if all values are same in a dictionary.\n */", "entry_point": "checkValue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg01 = 10;\nvar x0 = checkValue(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg11 = 12;\nvar x1 = checkValue(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg21 = 5;\nvar x2 = checkValue(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const keys = [];\n  for (let i = 0; i < dict.length; i++) {\n    keys.push(dict[i]);\n  }\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i]!== keys[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  const result = [];\n  for (let key in dict) {\n    if (dict[key]!== n) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n", "\n  for (let i = 1; i <= n; i++) {\n    if (dict[i]!== dict[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  for (let i = 0; i < dict.length; i++) {\n    if (dict[i]!== n) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  const test = {};\n  for (let i = 0; i < dict.length; i++) {\n    test[dict[i]] = test[dict[i]] + 1 || 1;\n  }\n  if (test[n]) {\n    return false;\n  }\n  return true;\n}\n"]}
{"task_id": "MBJSP/465", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction dropEmpty(dict1) {\n/**\n * * Write a function to drop empty items from a given dictionary.\n */", "entry_point": "dropEmpty", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"c1\"':\"Red\",'\"c2\"':\"Green\",'\"c3\"':null};\nvar x0 = dropEmpty(arg00);\nvar v0 = {'\"c1\"':\"Red\",'\"c2\"':\"Green\"};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"c1\"':\"Red\",'\"c2\"':null,'\"c3\"':null};\nvar x1 = dropEmpty(arg10);\nvar v1 = {'\"c1\"':\"Red\"};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"c1\"':null,'\"c2\"':\"Green\",'\"c3\"':null};\nvar x2 = dropEmpty(arg20);\nvar v2 = {'\"c2\"':\"Green\"};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const dict2 = {};\n  for (let i = 0; i < dict1.length; i++) {\n    if (!dict1[i]) {\n      continue;\n    }\n    dict2[dict1[i]] = dict2[dict1[i]] + 1 || 1;\n    if (dict2[dict1[i]] === 1) {\n      dict1.splice(i, 1);\n      i--;\n    }\n  }\n  return dict1;\n}\n", "\n  const result = [];\n  for (let i = 0; i < dictionary.length; i++) {\n    if (dictionary[i]!== '') {\n      result.push(dictionary[i]);\n    }\n  }\n  return result;\n}\n", "\n  let dropDict = {};\n  for (let i = 0; i < dict1.length; i++) {\n    dropDict[dict1[i]] = dropDict[dict1[i]] + 1 || 1;\n    if (dropDict[dict1[i]] === 1) {\n      dropDict[dict1[i]] = \"\";\n    }\n  }\n  return dropDict;\n}\n", "\n  const result = [];\n  for (let i = 0; i < dict1.length; i++) {\n    if (!dict1[i]) {\n      continue;\n    }\n    result.push(dict1[i]);\n  }\n  return result;\n}\n", "\n  // Write your code here\n  const result = {};\n  for (let i = 0; i < dict1.length; i++) {\n    if (dict1[i]) {\n      result[dict1[i]] = dict1[i];\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/466", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findPeak(arr, n) {\n/**\n * * Write a function to find the peak element in the given array.\n */", "entry_point": "findPeak", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 20, 4, 1, 0];\nvar arg01 = 6;\nvar x0 = findPeak(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 5, 6];\nvar arg11 = 5;\nvar x1 = findPeak(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 12, 14, 15];\nvar arg21 = 6;\nvar x2 = findPeak(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (n <= 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return arr[0] < arr[1]? arr[0] : arr[1];\n  }\n  if (arr[0] > arr[1]) {\n    return arr[0];\n  }\n  return arr[1] > arr[2]? arr[1] : arr[2];\n}\n", "\n  let index = 0;\n  if (n === 2) {\n    if (arr[0] > arr[1]) {\n      return arr[0];\n    } else {\n      return arr[1];\n    }\n  } else {\n    let mid = Math.floor((n - 1) / 2);\n    let left = arr.slice(0, mid);\n    let right = arr.slice(mid, n - 1);\n    if (findPeak(left, n - 1) > findPeak(right, n - 1)) {\n      return findPeak(left, n - 1);\n    } else {\n      return findPeak(right, n - 1);\n    }\n  }\n}\n", "\n  let lo = 0;\n  let hi = n - 1;\n  while (lo < hi) {\n    let mid = lo + (hi - lo) / 2;\n    if (arr[mid] > arr[mid + 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  return lo;\n}\n", "\n  let start = 0, end = n - 1;\n  if (arr[start] < arr[end]) {\n    let temp = start;\n    start = end;\n    end = temp;\n  }\n  while (start <= end) {\n    let mid = start + (end - start) / 2;\n    if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid - 1] <= arr[mid]) {\n      end = mid - 1;\n    }\n    else {\n      start = mid + 1;\n    }\n  }\n  return -1;\n}\n", "\n    // Write your code here\n    let start = 0;\n    let end = n - 1;\n    let mid;\n    while (start < end) {\n        mid = start + (end - start) / 2;\n        if (arr[mid] > arr[mid + 1]) {\n            end = mid;\n        } else if (arr[mid] < arr[mid + 1]) {\n            start = mid + 1;\n        }\n    }\n    return start;\n}\n"]}
{"task_id": "MBJSP/467", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction decimalToOctal(decinum) {\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */", "entry_point": "decimalToOctal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = decimalToOctal(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = decimalToOctal(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 33;\nvar x2 = decimalToOctal(arg20);\nvar v2 = 41;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  const result = [];\n  let number = decinum;\n  while (number > 0) {\n    const digit = number % 8;\n    number = Math.floor(number / 8);\n    result.push(digit);\n  }\n  return result.reverse();\n}\n", "\n  let num = decinum;\n  let octalStr = '';\n  while (num >= 1) {\n    let remainder = num % 8;\n    octalStr = remainder + octalStr;\n    num = Math.floor(num / 8);\n  }\n  return octalStr;\n}\n", "\n  return decinum.toString(8);\n}\n", "\n  let tempNum = decinum;\n  let octalNum = '';\n  while (tempNum > 0) {\n    const remainder = tempNum % 8;\n    octalNum = remainder + octalNum;\n    tempNum = Math.floor(tempNum / 8);\n  }\n  return octalNum.reverse();\n}\n", "\n    return decinum.toString(8);\n}\n"]}
{"task_id": "MBJSP/468", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxProduct(arr, n) {\n/**\n * * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n */", "entry_point": "maxProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 100, 4, 5, 150, 6];\nvar arg01 = 6;\nvar x0 = maxProduct(arg00, arg01);\nvar v0 = 45000;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 42, 55, 68, 80];\nvar arg11 = 5;\nvar x1 = maxProduct(arg10, arg11);\nvar v1 = 50265600;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 22, 9, 33, 21, 50, 41, 60];\nvar arg21 = 8;\nvar x2 = maxProduct(arg20, arg21);\nvar v2 = 21780000;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const maxProduct = [];\n  const minProduct = [];\n  for (let i = 0; i < arr.length; i++) {\n    maxProduct.push(1);\n    minProduct.push(1);\n  }\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      minProduct[i] = minProduct[i + 1] * arr[i];\n      maxProduct[i] = maxProduct[i + 1] * arr[i];\n    } else {\n      minProduct[i] = minProduct[i + 1] * arr[i + 1];\n      maxProduct[i] = maxProduct[i + 1] * arr[i + 1];\n    }\n  }\n  maxProduct[arr.length - 1] = minProduct[arr.length - 1] = arr[arr.length - 1];\n  for (let i = arr.length - 2; i >= 0; i--) {\n    maxProduct[i] = Math.max(maxProduct[i], minProduct[i + 1] * arr[i + 1]);\n  }\n  return maxProduct[0];\n}\n", "\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      const products = multiplyElements(arr.slice(i, j + 1));\n      for (let k = 0; k < products.length; k++) {\n        if (products[k] > result[k]) {\n          result[k] = products[k];\n        }\n      }\n    }\n  }\n  return result.reduce((x, y) => x * y);\n}\n", "\n  const prod = (arr[0] * arr[1]) * arr[n - 1];\n  const prod_1 = (arr[0] * arr[2]) * arr[n - 2];\n  const prod_2 = (arr[0] * arr[3]) * arr[n - 3];\n  const prod_3 = (arr[0] * arr[4]) * arr[n - 4];\n  const prod_4 = (arr[0] * arr[5]) * arr[n - 5];\n  const result = Math.max(prod_1, Math.max(prod, Math.max(prod_2, Math.max(prod_3, prod_4))))\n  return result;\n}\n", "\n  if (arr.length === 0) {\n    return 0;\n  }\n  const bigs = [];\n  const smalls = [];\n  for (let i = 0; i < arr.length; i++) {\n    bigs.push(arr[i]);\n    if (arr[i] > arr[i + 1]) {\n      sums.push(arr[i] * arr[i + 1]);\n    }\n  }\n  let currprod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      currprod *= arr[i];\n    } else if (arr[i] < arr[i + 1]) {\n      currprod *= arr[i + 1];\n    } else if (arr[i] === arr[i + 1]) {\n      currprod *= arr[i];\n    }\n  }\n  let smallprod = currprod;\n  for (let i = 0; i < sums.length; i++) {\n    if (sums[i] > smallprod) {\n      smallprod = sums[i];\n    }\n  }\n  return Math.max(currprod, smallprod);\n}\n\nvar newArr = [2, 2, 5, 0, 4];\nconst arr = [7, 5, 3, 8, 2, 6, 4, 1, 9];\nvar n = 5;\nconsole.log(multiplyElements(arr, n));\nconsole.log(maxProduct(arr, n));\nconsole.log(sortNumericStrings(numsstr));\nconsole.log(get", "\n  const curr_max = 1;\n  const max_product = 1;\n  const result = {};\n  for (let i = 0; i < arr.length; i++) {\n    const curr_val = arr[i];\n    const left_val = arr[i - 1];\n    const right_val = arr[i + 1];\n    curr_max = Math.max(curr_max * curr_val, curr_val);\n    max_product = Math.max(max_product, curr_max);\n    if (left_val > 0) {\n      curr_max = Math.max(curr_max * left_val, left_val);\n      max_product = Math.max(max_product, curr_max);\n    }\n    if (right_val > 0) {\n      curr_max = Math.max(curr_max * right_val, right_val);\n      max_product = Math.max(max_product, curr_max);\n    }\n  }\n  return max_product;\n}\n"]}
{"task_id": "MBJSP/469", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction maxProfit(price, k) {\n/**\n * * Write a function to find the maximum profit earned from a maximum of k stock transactions\n */", "entry_point": "maxProfit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 2, 3, 7, 6, 4, 5];\nvar arg01 = 3;\nvar x0 = maxProfit(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 7, 5, 4, 3, 5];\nvar arg11 = 2;\nvar x1 = maxProfit(arg10, arg11);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 6, 8, 4, 2];\nvar arg21 = 2;\nvar x2 = maxProfit(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const profit = [];\n  for (let i = 0; i < price.length - 1; i++) {\n    const profitOnDay = price[i + 1] - price[i];\n    profit.push(profitOnDay);\n  }\n  const k1 = Math.floor(k / 2);\n  const k2 = k - k1;\n  const max = Math.max.apply(Math, profit);\n  let sum = 0;\n  for (let i = 0; i < profit.length; i++) {\n    if (profit[i] > max) {\n      sum += profit[i];\n    }\n    if (k1 > 0 && profit[i] > 0) {\n      k1--;\n    }\n    if (k2 > 0 && profit[i] > max) {\n      k2--;\n    }\n  }\n  return sum;\n}\n", "\n  const quantity = [];\n  for (let i = 0; i < price.length; i++) {\n    quantity[i] = Math.floor(price[i] / k);\n  }\n  const arr = [].concat.apply([], quantity);\n  let max = 0;\n  let min = arr[0];\n  let maxprofit = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] >= min && arr[i] >= max) {\n      max = arr[i];\n    } else if (arr[i] <= min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < min) {\n      maxprofit += (min - arr[i] * k);\n      min = arr[i];\n    }\n  }\n  return maxprofit;\n}\n", "\n  let maxProfit = 0;\n  for (let i = 1; i <= k; i++) {\n    maxProfit = Math.max(maxProfit, price[i] - price[i - 1]);\n  }\n  return maxProfit;\n}\n", "\n  const result = [];\n  const tup = Array.from({ length: price.length }, (x, y) => {\n    const profit = price[y] - price[x];\n    return profit;\n  });\n  const len = tup.length;\n  if (k === len) {\n    return result;\n  }\n  const arr = Array.from({ length: k }, (x, y) => {\n    const subArr = tup.slice(x, y + 1);\n    return subArr;\n  });\n  const sortedArr = arr.sort((a, b) => b - a);\n  for (let i = 0; i < sortedArr.length; i++) {\n    const subarr = sortedArr[i];\n    const profit = subarr.reduce((prev, curr) => prev + curr, 0);\n    result.push(profit);\n  }\n  return result;\n}\n", "\n  const sortedPrices = price.slice(0).sort((a, b) => b - a);\n  const totalDays = sortedPrices.length;\n  if (k === totalDays) {\n    return sortedPrices[sortedPrices.length - 1] - sortedPrices[0];\n  }\n  const dp = [];\n  const profit = [];\n  for (let i = 0; i < totalDays; i++) {\n    dp[i] = 0;\n  }\n  for (let i = 1; i <= k; i++) {\n    profit[i] = maxProfit(price, i - 1);\n  }\n  for (let i = 1; i <= totalDays; i++) {\n    for (let j = i - 1; j >= 0; j--) {\n      if (sortedPrices[i] - sortedPrices[j] > dp[i]) {\n        dp[i] = sortedPrices[i] - sortedPrices[j];\n      }\n    }\n  }\n  for (let i = totalDays - 1; i >= 0; i--) {\n    if (profit[k] < dp[i]) {\n      profit[k] = dp[i];\n    }\n  }\n  return profit[k];\n}\n"]}
{"task_id": "MBJSP/470", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction addPairwise(testtup) {\n/**\n * * Write a function to find the pairwise addition of the elements of the given tuples.\n */", "entry_point": "addPairwise", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, 8, 10];\nvar x0 = addPairwise(arg00);\nvar v0 = [6, 12, 15, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 6, 8, 9, 11];\nvar x1 = addPairwise(arg10);\nvar v1 = [8, 14, 17, 20];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 7, 9, 10, 12];\nvar x2 = addPairwise(arg20);\nvar v2 = [10, 16, 19, 22];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    for (let j = i + 1; j < testTup.length; j++) {\n      result.push(testTup[i] + testTup[j]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    const num1 = testTup[i];\n    const num2 = testTup[i + 1];\n    result.push(num1 + num2);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] + testTup[i + 1]);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/471", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction findRemainder(arr, lens, n) {\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */", "entry_point": "findRemainder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [100, 10, 5, 25, 35, 14];\nvar arg01 = 6;\nvar arg02 = 11;\nvar x0 = findRemainder(arg00, arg01, arg02);\nvar v0 = 9;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 1];\nvar arg11 = 3;\nvar arg12 = 1;\nvar x1 = findRemainder(arg10, arg11, arg12);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar arg21 = 3;\nvar arg22 = 2;\nvar x2 = findRemainder(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const prod = Array.from(arr);\n  const result = [];\n  let resultprod = 1;\n  for (let i = 0; i < lens; i++) {\n    resultprod *= prod[i];\n  }\n  for (let i = 0; i < lens; i++) {\n    result[i] = (resultprod / prod[i]) % n;\n    resultprod = (resultprod / prod[i]) / n;\n  }\n  return result;\n}\n", "\n  let remainder = 0;\n  let nTup = [];\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    nTup.push(arr[i]);\n    if (i < lens - 1) {\n      nTup.push(arr[i + 1]);\n    }\n  }\n  let lensTup = nTup.length;\n  for (let i = 0; i < lensTup; i++) {\n    let testTup = multiplyElements(nTup);\n    let testTupLen = testTup.length;\n    for (let i = 0; i < testTupLen; i++) {\n      remainder = remainder + testTup[i];\n    }\n  }\n  remainder = remainder % n;\n  return remainder;\n}\n", "\n  const remainder = [];\n  for (let i = 0; i < arr.length; i++) {\n    remainder.push((arr[i] % n) + ((arr[i] / n) * (n - 1)));\n  }\n  return remainder;\n}\n", "\n  let remainder = [];\n  let remainderCounter = [];\n  for (let i = 0; i < arr.length; i++) {\n    remainderCounter[remainder.length] = i;\n    remainder[i] = arr[i] % n;\n  }\n  remainderCounter[remainder.length] = lens - 1;\n  let remainderIndex = remainderCounter[remainder.length];\n  while (remainderIndex >= 0) {\n    let remainderVal = arr[remainderIndex] * n + remainder[remainderIndex];\n    remainder.splice(remainderIndex, 1, remainderVal);\n    remainderIndex = remainderCounter[remainderIndex];\n  }\n  return remainder;\n}\n", "\n  const sum = arr.reduce((sum, el) => sum + el, 0);\n  const divisor = sum / n;\n  const result = arr.filter(x => x % divisor === 0);\n  return result;\n}\n"]}
{"task_id": "MBJSP/472", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction checkConsecutive(l) {\n/**\n * * Write a JavaScript function to check whether the given list contains consecutive numbers or not.\n */", "entry_point": "checkConsecutive", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar x0 = checkConsecutive(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 5, 6];\nvar x1 = checkConsecutive(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar x2 = checkConsecutive(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const arr = l.map(n => parseInt(n, 10));\n  const result = l.reduce((a, b) => a + b, 0);\n  return (result % 2 === 0)? \"It's a consecutive numbers list\" : \"It's not a consecutive numbers list\";\n}\n", "\n    let result = false;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] - l[i - 1]!== 1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n", "\n  let num = l[0];\n  let result = true;\n  for (let i = 1; i < l.length; i++) {\n    if (num + 1!= l[i]) {\n      result = false;\n      break;\n    }\n    num = l[i];\n  }\n  return result;\n}\n", "\n  let isConsecutive = true;\n  let prevnum = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] + 1!== prevnum) {\n      isConsecutive = false;\n      break;\n    }\n    prevnum = l[i];\n  }\n  return isConsecutive;\n}\n", "\n  let sorted_list = l.sort((a, b) => a - b);\n  let consecutive = true;\n  for (let i = 1; i < sorted_list.length; i++) {\n    if (sorted_list[i]!== sorted_list[i - 1] + 1) {\n      consecutive = false;\n      break;\n    }\n  }\n  return consecutive;\n}\n\n/**\n * Below are the two solutions of the second attempt.\n *\n * The below solution is by Roman Numeral\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/473", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction tupleIntersection(testlist1, testlist2) {\n/**\n * * Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n */", "entry_point": "tupleIntersection", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4], [5, 6], [9, 10], [4, 5]];\nvar arg01 = [[5, 4], [3, 4], [6, 5], [9, 11]];\nvar x0 = tupleIntersection(arg00, arg01);\nvar v0 = new Set([[4, 5],[5, 6],[3, 4]]);\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 1], [7, 4], [11, 13], [17, 14]];\nvar arg11 = [[1, 4], [7, 4], [16, 12], [10, 13]];\nvar x1 = tupleIntersection(arg10, arg11);\nvar v1 = new Set([[4, 7],[1, 4]]);\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 1], [3, 2], [1, 3], [1, 4]];\nvar arg21 = [[11, 2], [2, 3], [6, 2], [1, 3]];\nvar x2 = tupleIntersection(arg20, arg21);\nvar v2 = new Set([[2, 3],[1, 3]]);\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const testtup = [];\n  for (let i = 0; i < testlist1.length; i++) {\n    testtup.push(testlist1[i]);\n  }\n  for (let i = 0; i < testlist2.length; i++) {\n    const testtup2 = testlist2[i];\n    const testtup2Length = testtup2.length;\n    for (let j = 0; j < testtup2Length; j++) {\n      const tup = testtup.slice();\n      tup.splice(testtup2Length - j - 1, 0, testtup2[j]);\n      const tupIntersection = tup.filter(element => element === testtup2[j]);\n      const intersectionLength = tupIntersection.length;\n      if (intersectionLength === testtup2Length) {\n        return tupIntersection;\n      }\n    }\n  }\n  return null;\n}\n", "\n  return testlist1.filter(testtup => testlist2.indexOf(testtup)!== -1);\n}\n", "\n  const result = [];\n  for (let i = 0; i < testList1.length; i++) {\n    for (let j = 0; j < testList2.length; j++) {\n      if (testList1[i] === testList2[j]) {\n        result.push(testList1[i]);\n      }\n    }\n  }\n  return result;\n}\n", "\n  const tup1 = testlist1.map(tup => [tup[0], tup[1]]).sort();\n  const tup2 = testlist2.map(tup => [tup[0], tup[1]]).sort();\n  const tup3 = tup1.filter(tup => tup2.findIndex(tup1 => tup1[0] === tup[0])!== -1);\n  return tup3;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testlist1.length; i++) {\n    for (let j = 0; j < testlist2.length; j++) {\n      if (testlist1[i] === testlist2[j]) {\n        result.push(testlist1[i]);\n        break;\n      }\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/474", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction replaceChar(str1, ch, newch) {\n/**\n * * Write a function to replace characters in a string.\n */", "entry_point": "replaceChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"polygon\";\nvar arg01 = \"y\";\nvar arg02 = \"l\";\nvar x0 = replaceChar(arg00, arg01, arg02);\nvar v0 = \"pollgon\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"character\";\nvar arg11 = \"c\";\nvar arg12 = \"a\";\nvar x1 = replaceChar(arg10, arg11, arg12);\nvar v1 = \"aharaater\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar arg21 = \"l\";\nvar arg22 = \"a\";\nvar x2 = replaceChar(arg20, arg21, arg22);\nvar v2 = \"python\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === ch) {\n      str1 = str1.replace(ch, newch);\n      i = i + str1.length - 1;\n    }\n  }\n  return str1;\n}\n", "\n  return str1.replace(ch, newch);\n}\n", "\n  return str1.split('').map(char => {\n    if (char === ch) {\n      return newch;\n    }\n    return char;\n  }).join('');\n}\n", "\n  return str1.replace(ch, newch);\n}\nconst days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n", "\n  const result = str1.replace(ch, newch);\n  return result;\n}\n"]}
{"task_id": "MBJSP/475", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sortCounter(dict1) {\n/**\n * * Write a function to sort counter by value.\n */", "entry_point": "sortCounter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Math\"':81,'\"Physics\"':83,'\"Chemistry\"':87};\nvar x0 = sortCounter(arg00);\nvar v0 = [[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Math\"':400,'\"Physics\"':300,'\"Chemistry\"':250};\nvar x1 = sortCounter(arg10);\nvar v1 = [[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Math\"':900,'\"Physics\"':1000,'\"Chemistry\"':1250};\nvar x2 = sortCounter(arg20);\nvar v2 = [[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return Object.keys(dict1).sort(", "\n  const sortedDict = Object.values(dict1).sort((a, b) => a - b);\n  return sortedDict;\n}\n", "\n  const sorted = Object.keys(dict1).sort(", "\n  const result = [];\n  for (const key in dict1) {\n    if (dict1[key] < 3) {\n      result.push([key, dict1[key]]);\n    }\n  }\n  const sortedResult = result.sort((a, b) => a[1] - b[1]);\n  return sortedResult;\n}\n", "\n    const result = [];\n    for (let key in dict) {\n        result.push({key: key, val: dict[key]});\n    }\n    result.sort((a, b) => b.val - a.val);\n    return result;\n}\n"]}
{"task_id": "MBJSP/476", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction bigSum(nums) {\n/**\n * * Write a JavaScript function to find the sum of the largest and smallest value in a given array.\n */", "entry_point": "bigSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = bigSum(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 2, 3, 4];\nvar x1 = bigSum(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 6];\nvar x2 = bigSum(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const largest = nums[nums.length - 1];\n  const smallest = nums[0];\n  const sum = largest + smallest;\n  return sum;\n}\n", "\n    // Write your code here\n    const firstNums = nums.slice(0, 5);\n    const lastNums = nums.slice(-5);\n    const sortedNums = [...firstNums].sort((a, b) => a - b);\n    const max = [...sortedNums].reduce((a, b) => a > b? a : b);\n    const min = [...sortedNums].reduce((a, b) => a < b? a : b);\n    return [max, min];\n}\n", "\n  return nums.reduce((a, b) => a + b) + nums.reduce((a, b) => a - b);\n}\n", "\n  const array = nums.map(num => num);\n  const largest = Math.max(...array);\n  const smallest = Math.min(...array);\n  return Math.max(largest + smallest, 0);\n}\n", "\n  // Write your code here\n  const test = nums.map(val => Number(val));\n  const max = Math.max(...test);\n  const min = Math.min(...test);\n  const result = max + min;\n  return result;\n}\n"]}
{"task_id": "MBJSP/477", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isLower(string) {\n/**\n * * Write a JavaScript function to convert the given string to lower case.\n */", "entry_point": "isLower", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"InValid\";\nvar x0 = isLower(arg00);\nvar v0 = \"invalid\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"TruE\";\nvar x1 = isLower(arg10);\nvar v1 = \"true\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"SenTenCE\";\nvar x2 = isLower(arg20);\nvar v2 = \"sentence\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string[i].toLowerCase());\n  }\n  return result;\n}\n", "\n  const str = string.toLowerCase();\n  return str;\n}\n", "\n  return string.toLowerCase();\n}\n", "\n  return string.toLowerCase();\n}\n", "\n  let newStr = '';\n  for (let i = 0; i < string.length; i++) {\n    newStr += string.charAt(i).toLowerCase();\n  }\n  return newStr;\n}\n"]}
{"task_id": "MBJSP/478", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeLowercase(str1) {\n/**\n * * Write a function to remove lowercase substrings from a given string.\n */", "entry_point": "removeLowercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"PYTHon\";\nvar x0 = removeLowercase(arg00);\nvar v0 = \"PYTH\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"FInD\";\nvar x1 = removeLowercase(arg10);\nvar v1 = \"FID\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"STRinG\";\nvar x2 = removeLowercase(arg20);\nvar v2 = \"STRG\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const str2 = str1.split(' ').map(word => word.toLowerCase());\n  const str3 = str2.filter(w => w.length > 1);\n  return str3.join(' ');\n}\n", "\n  const result = [];\n  const start = 0;\n  let end = 0;\n  while (end < str1.length) {\n    if (isLowercase(str1[end])) {\n      result.push(str1.substring(start, end));\n      start = end + 1;\n    }\n    end++;\n  }\n  result.push(str1.substring(start));\n  return result;\n}\n", "\n  let subStr = '';\n  let result = '';\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].toLowerCase() === str1[i]) {\n      if (subStr.length) {\n        result = result + str1.slice(i, i + subStr.length);\n      }\n      subStr = '';\n    } else {\n      if (subStr.length) {\n        result = result + str1.slice(i, i + subStr.length);\n      }\n      subStr = '';\n    }\n  }\n  return result;\n}\n", "\n  let result = str1;\n  let counter = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i]!== str1[i].toLowerCase()) {\n      result = result.substr(0, i - counter) + result.substr(i + 1, result.length - i - 1);\n      counter = i;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    const isLowercase = str[i].toLowerCase() === str[i];\n    if (isLowercase) {\n      i = i + 1;\n    } else {\n      result.push(str[i]);\n    }\n  }\n  return result.join(\"\");\n}\n"]}
{"task_id": "MBJSP/479", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit of a given number.\n */", "entry_point": "firstDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 123;\nvar x0 = firstDigit(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 456;\nvar x1 = firstDigit(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar x2 = firstDigit(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = 0;\n  if (n < 10) {\n    result = n;\n  } else {\n    let temp = n;\n    while (temp >= 10) {\n      let first = temp % 10;\n      temp /= 10;\n      result = first;\n    }\n  }\n  return result;\n}\n", "\n  let digit = 0;\n  let num = n;\n  while (num) {\n    num = num / 10;\n    digit++;\n  }\n  return digit;\n}\n", "\n  return (n < 10)? 0 : n % 10;\n}\n", "\n  return Math.floor(n / 10);\n}\n", "\n  let result = 0;\n  while (n > 0) {\n    result = result * 10 + n % 10;\n    n /= 10;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/480", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction getMaxOccuringChar(str1) {\n/**\n * * Write a JavaScript function to find the maximum occurring character in a given string.\n */", "entry_point": "getMaxOccuringChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"data\";\nvar x0 = getMaxOccuringChar(arg00);\nvar v0 = \"a\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"create\";\nvar x1 = getMaxOccuringChar(arg10);\nvar v1 = \"e\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"brilliant girl\";\nvar x2 = getMaxOccuringChar(arg20);\nvar v2 = \"i\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < str1.length; i++) {\n    let temp = str1.charAt(i);\n    let max = str1.length;\n    let max_index = str1.length;\n    for (let j = 0; j < str1.length; j++) {\n      if (str1.charAt(j) === temp && str1.charAt(j)!== str1.charAt(i)) {\n        temp = str1.charAt(j);\n        if (str1.length === j) {\n          max = str1.length;\n          max_index = str1.length;\n        } else {\n          max = j;\n          max_index = j;\n        }\n      }\n    }\n    if (max_index < max) {\n      max_index = max;\n      result.push(str1.charAt(max_index));\n    } else {\n      result.push(str1.charAt(max_index));\n    }\n  }\n  return result;\n}\n", "\n  const char = {};\n  const result = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (!char[str1[i]]) char[str1[i]] = 1;\n    else char[str1[i]] = char[str1[i]] + 1;\n  }\n  for (let i = 0; i < str1.length; i++) {\n    if (char[str1[i]] === 1 &&!result[i]) result[i] = str1[i];\n  }\n  return result;\n}\n", "\n  const str = str1.replace(/[^\\w\\s]/g, '');\n  const strArr = str.split('');\n  const maxOccuringChar = 0;\n  for (let i = 0; i < strArr.length; i++) {\n    const occurences = strArr[i].split('').reduce((a, b) => a + b, 0);\n    if (occurences > maxOccuringChar) {\n      maxOccuringChar = occurences;\n    }\n  }\n  return maxOccuringChar;\n}\n", "\n  let max_count = 0;\n  let char_count = {};\n  let result = str1.split(\"\").map(", "\n  let max = str1.charAt(0);\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.charAt(i) === str1.charAt(max)) {\n      max++;\n    } else if (str1.charAt(i) > max) {\n      max = str1.charAt(i);\n    }\n  }\n  return max;\n}\n"]}
{"task_id": "MBJSP/481", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction isSubsetSum(set, n, sum) {\n/**\n * * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n */", "entry_point": "isSubsetSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 34, 4, 12, 5, 2];\nvar arg01 = 6;\nvar arg02 = 9;\nvar x0 = isSubsetSum(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 34, 4, 12, 5, 2];\nvar arg11 = 6;\nvar arg12 = 30;\nvar x1 = isSubsetSum(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 34, 4, 12, 5, 2];\nvar arg21 = 6;\nvar arg22 = 15;\nvar x2 = isSubsetSum(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const found = false;\n  for (let i = 0; i <= sum &&!found; i++) {\n    if (n > 0 && set.length > 0 && sum - i >= 0) {\n      if (set.includes(i)) {\n        found = true;\n      }\n    }\n  }\n  return found;\n}\n\nconst tup1 = [1, 5, 10, 35, 50];\nconst tup2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst tup3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nconst tup4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36];\n\n// console.log(isSubsetSum(tup1, 6, 40));\n// console.log(isSubsetSum(tup2, 6, 40));\n// console.log(isSubsetSum(tup3, 6, 40));\n// console.log(isSubsetSum(tup4, 6, 40));\n// console.log(isSubsetSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31", "\n  let isSum = true;\n  let start = 0;\n  let startIndex = 0;\n  for (let i = 0; i < set.length; i++) {\n    if (set[i] <= sum) {\n      if (isSum) {\n        startIndex = i;\n        start = set[i];\n      }\n      if (start > sum) {\n        isSum = false;\n        break;\n      }\n    } else {\n      isSum = false;\n      break;\n    }\n  }\n  return isSum;\n}\n", "\n  const subset = [];\n  const isSubsetSum = {};\n  for (let i = 0; i < set.length; i++) {\n    for (let j = 1; j <= sum / set[i]; j++) {\n      if (set[i] + j == sum) {\n        subset.push(set[i]);\n        break;\n      }\n    }\n  }\n  for (let i = 0; i < subset.length; i++) {\n    isSubsetSum[subset[i]] = isSubsetSum[subset[i]] || 1;\n  }\n  for (let i = 1; i <= sum / subset.length; i++) {\n    if (sum - i > subset.length) {\n      continue;\n    }\n    if (isSubsetSum[subset.length + i]) {\n      return true;\n    }\n  }\n  return false;\n}\n", "\n  const tempSet = [];\n  for (let i = 0; i < n; i++) {\n    tempSet.push(set[i]);\n  }\n  let flag = false;\n  for (let i = 0; i < sum; i++) {\n    if (tempSet.every(x => x === i)) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n}\n", "\n  const dictionary = {};\n  for (let i = 0; i < set.length; i++) {\n    dictionary[set[i]] = dictionary[set[i]] + 1 || 1;\n  }\n  const result = [];\n  for (let i = 0; i < set.length; i++) {\n    const number = set[i];\n    if (dictionary[number] && dictionary[number] <= n) {\n      if (sum - number === number) {\n        result.push(number);\n      }\n    }\n  }\n  return result.length > 0;\n}\n"]}
{"task_id": "MBJSP/482", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction match(text) {\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */", "entry_point": "match", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Geeks\";\nvar x0 = match(arg00);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"geeksforGeeks\";\nvar x1 = match(arg10);\nvar v1 = \"Yes\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"geeks\";\nvar x2 = match(arg20);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const regex = /^([a-z])([A-Z])$/;\n  const firstWord = text.split(' ')[0];\n  if (regex.test(firstWord)) {\n    return firstWord;\n  }\n  return 'NO SUCH SEQUENCE';\n}\n", "\n  const match = text.match(/[A-Z][a-z]\\s?[a-z]/g);\n  return match? match : [];\n}\n", "\n  const regex = /[A-Z]{1}[a-z]{1}[A-Z]{1}[a-z]{1}/g;\n  const pattern = [];\n  let index = 0;\n  while ((index = regex.exec(text))!== null) {\n    pattern.push(index[0]);\n  }\n  return pattern;\n}\n// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n// 1, 2, 3, 4, 5, 6, 7, 8, 9\n// 1, 2, 3, 4, 5, 6, 7\n// 1, 2, 3, 4, 5, 6\n// 1, 2, 3, 4, 5\n// 1, 2, 3, 4\n// 1, 2, 3\n// 1, 2\n// 1\n\n// 3, 4, 5, 6, 7, 8, 9, 10\n// 3, 4, 5, 6, 7, 8, 9\n// 3, 4, 5, 6, 7\n// 3, 4, 5, 6\n// 3, 4, 5\n// 3, 4\n// 3\n\n// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n// 1, 2, 3, 4, 5, 6, 7, 8, 9\n// 1, 2, 3, 4, 5, 6, 7\n// 1, 2, 3, 4, 5, 6\n// 1, 2, 3, 4, 5\n// 1, 2, 3, 4\n// 1, 2, 3\n// 1, 2\n// 1\n\n// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n// 1, 2, 3, 4, 5,", "\n  const regex = /([A-Z]{1})([a-z]{2})([A-Z]{1})/;\n  const matched = text.match(regex);\n  return matched;\n}\n", "\n  const re = new RegExp('(\\\\w)([a-z])');\n  return re.exec(text);\n}\n"]}
{"task_id": "MBJSP/483", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction firstFactorialDivisibleNumber(x) {\n/**\n * * Write a JavaScript function to find the first natural number whose factorial is divisible by x.\n */", "entry_point": "firstFactorialDivisibleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = firstFactorialDivisibleNumber(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = firstFactorialDivisibleNumber(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = firstFactorialDivisibleNumber(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const first = x;\n  let result = x;\n  for (let i = x; i > 1; i--) {\n    if (result % i === 0) {\n      result--;\n    }\n  }\n  return result;\n}\n", "\n  const fact = Math.factorial(x);\n  let result = 1;\n  for (let i = 1; i <= fact && i <= x; i++) {\n    if (i % x === 0) {\n      result = i;\n    }\n  }\n  return result;\n}\n", "\n  let result = 0;\n  let factorial = 1;\n  for (let i = 1; i <= x; i++) {\n    factorial = factorial * i;\n  }\n  for (let i = x; i > 1; i--) {\n    if (factorial % i === 0) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  const fact = Math.factorial;\n  const isPrime = Math.isPrime;\n  const range = Math.max(1, Math.ceil(x));\n  const array = [];\n  for (let i = range; i >= 2; i--) {\n    if (fact(i) % x === 0) {\n      array.push(i);\n    }\n  }\n  return array.sort((a, b) => a - b);\n}\n", "\n  const result = [];\n  for (let i = 1; i <= x; i++) {\n    const current = i;\n    let currentFactorial = 1;\n    while (currentFactorial * i <= x) {\n      currentFactorial *= i;\n    }\n    if (currentFactorial % x === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/484", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeMatchingTuple(testlist1, testlist2) {\n/**\n * * Write a function to remove the matching tuples from the given two tuples.\n */", "entry_point": "removeMatchingTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]];\nvar arg01 = [[\"Hello\", \"dude\"], [\"How\", \"are\"]];\nvar x0 = removeMatchingTuple(arg00, arg01);\nvar v0 = [[\"you\", \"?\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]];\nvar arg11 = [[\"Journey\", \"the\"], [\"is\", \"end\"]];\nvar x1 = removeMatchingTuple(arg10, arg11);\nvar v1 = [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Its\", \"been\"], [\"a\", \"long\"], [\"day\", \"without\"]];\nvar arg21 = [[\"a\", \"long\"], [\"my\", \"friend\"]];\nvar x2 = removeMatchingTuple(arg20, arg21);\nvar v2 = [[\"Its\", \"been\"], [\"day\", \"without\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testlist1.length - 1; i++) {\n    if (testlist1[i] == testlist2[i] && testlist1[i + 1] == testlist2[i + 1]) {\n      continue;\n    } else {\n      result.push(testlist1[i]);\n      result.push(testlist1[i + 1]);\n    }\n  }\n  return result;\n}\n", "\n  const testlist1 = testlist1;\n  const testlist2 = testlist2;\n  let result = [];\n  let i = 0;\n  for (let j = 0; j < testlist1.length; j++) {\n    if (testlist1[j]!== testlist2[j]) {\n      result.push(testlist1[j]);\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  const test1 = testlist1.slice();\n  const test2 = testlist2.slice();\n  for (let i = 0; i < test1.length; i++) {\n    const test = test1[i];\n    if (test!== test2[i]) {\n      result.push(test);\n    }\n  }\n  return result;\n}\n// Write your code here\n// ", "\n  const testTup1 = testlist1.map(x => x[0]).sort();\n  const testTup2 = testlist2.map(x => x[0]).sort();\n  const testTup3 = testlist1.map(x => x[1]).sort();\n  const testTup4 = testlist2.map(x => x[1]).sort();\n  if (testTup1[0] == testTup2[0] && testTup3[0] == testTup4[0]) {\n    if (testTup1[1] == testTup3[1] && testTup2[1] == testTup4[1]) {\n      return testlist1.map(x => x[1]).sort();\n    }\n  }\n  return testlist1.map(x => x[0]).sort();\n}\n", "\n    const result = [];\n    for (let i = 0; i < testlist1.length - 1; i++) {\n        if (testlist1[i] === testlist2[i]) {\n            continue;\n        }\n        result.push(testlist1[i]);\n    }\n    return result;\n}\n"]}
{"task_id": "MBJSP/485", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction largestPalindrome(a, n) {\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */", "entry_point": "largestPalindrome", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 232, 54545, 999991];\nvar arg01 = 4;\nvar x0 = largestPalindrome(arg00, arg01);\nvar v0 = 54545;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 50];\nvar arg11 = 6;\nvar x1 = largestPalindrome(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  ", "\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < a.length; j++) {\n      let temp = a[i] + a[j];\n      if (temp === a[j] + a[i]) {\n        result = temp > result? temp : result;\n      }\n    }\n  }\n  return result;\n}\n", "\n  ", "\n  const numbers = a.map(num => parseInt(num, 10));\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = 0; j < numbers.length - i - 1; j++) {\n      const palindrome = numbers[j] * numbers[j + i + 1];\n      if (palindrome > n) {\n        return palindrome;\n      }\n    }\n  }\n  return numbers[0] * numbers[n - 1];\n}\n", "\n  return 1;\n}\n"]}
{"task_id": "MBJSP/486", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction binomialProbability(n, k, p) {\n/**\n * * Write a function to compute binomial probability for the given number.\n */", "entry_point": "binomialProbability", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar arg02 = 0.3333333333333333;\nvar x0 = binomialProbability(arg00, arg01, arg02);\nvar v0 = 0.13656454808718185;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 11;\nvar arg11 = 6;\nvar arg12 = 0.5;\nvar x1 = binomialProbability(arg10, arg11, arg12);\nvar v1 = 0.2255859375;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar arg21 = 7;\nvar arg22 = 0.6;\nvar x2 = binomialProbability(arg20, arg21, arg22);\nvar v2 = 0.227030335488;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (k === n - k) {\n    if (n === 0) {\n      return 1;\n    }\n    return p * (1 - p) * (1 - p) / (1 - p);\n  }\n  if (k === n - k + 1) {\n    if (n === 1) {\n      return p;\n    }\n    return p * (1 - p) / (1 - p);\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return p * binomialProbability(n - 1, k, p) + (1 - p) * binomialProbability(n - 1, k - 1, p);\n}\n", "\n  const pN = 1;\n  const pNminusK = 1;\n  const pK = 1;\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    pN = pNminusK * Math.pow(p, n - k + i) * Math.pow(1 - p, k - i);\n    pNminusK = pN;\n  }\n  for (let i = 0; i < n - k; i++) {\n    pK = pK * Math.pow(p, i) * Math.pow(1 - p, n - k - i);\n  }\n  return pK / pNminusK;\n}\n", "\n  let Ck = 1;\n  for (let i = 0; i <= k; i++) {\n    Ck = Ck * (n - i) / i;\n  }\n  return Math.pow(p, k) * Math.pow(1 - p, n - k) * Ck;\n}\n", "\n  const fn1 = n === k? 1 : Math.pow(p, k) * Math.pow(1 - p, n - k);\n  return fn1;\n}\n", "\n  let A = Math.pow(p, k);\n  let B = Math.pow(1 - p, n - k);\n  let C = 1;\n  for (let i = k; i <= n; i++) {\n    C *= (n - i + 1);\n    C /= (i);\n  }\n  return A * B * C;\n}\n"]}
{"task_id": "MBJSP/487", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sortTuple(tup) {\n/**\n * * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n */", "entry_point": "sortTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [3, 2], [2, 1]];\nvar x0 = sortTuple(arg00);\nvar v0 = [[2, 1], [3, 2], [1, 3]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [3, 3], [1, 1]];\nvar x1 = sortTuple(arg10);\nvar v1 = [[1, 1], [3, 3], [2, 4]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 9], [6, 7], [4, 3]];\nvar x2 = sortTuple(arg20);\nvar v2 = [[4, 3], [6, 7], [3, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const sortedTuple = tup.sort((a, b) => a[tup.length - 1] - b[tup.length - 1]);\n  return sortedTuple;\n}\n", "\n  // Write your code here\n  return tup.sort((a, b) => b[tup.length - 1] - a[tup.length - 1]);\n}\nconst sample = [4, 5, 6, 7, 8, 9, 10, 11];\n", "\n  return tup.sort((a, b) => b[tup.length - 1] - a[tup.length - 1]);\n}\n", "\n  const sortedTuples = tup.sort((a, b) => b[tup.length - 1] - a[tup.length - 1]);\n  return sortedTuples;\n}\n", "\n  let minTuple = tup[0];\n  const result = [];\n  for (let i = 0; i < tup.length; i++) {\n    if (tup[i] < minTuple) {\n      minTuple = tup[i];\n    }\n  }\n  for (let i = 0; i < tup.length; i++) {\n    if (tup[i] === minTuple) {\n      result.push(tup[i]);\n    }\n  }\n  return result;\n}\n// Write your code here\n"]}
{"task_id": "MBJSP/488", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction areaPentagon(a) {\n/**\n * * Write a function to find the area of a pentagon.\n */", "entry_point": "areaPentagon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = areaPentagon(arg00);\nvar v0 = 43.01193501472417;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = areaPentagon(arg10);\nvar v1 = 172.0477400588967;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = areaPentagon(arg20);\nvar v2 = 387.10741513251753;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const side = a / 2;\n  return side * side * Math.sqrt(5) / 4;\n}\n", "\n    // Write your code here\n    const side = (Math.sqrt(5) / 2) * a;\n    return side * side;\n}\n", "\n  let res = a * a * Math.sin(120 * Math.PI / 180);\n  return res;\n}\n\nconst test = [\n  [\n    '2',\n    '3',\n    '4',\n    '5',\n  ],\n  [\n    '4',\n    '5',\n    '6',\n    '7',\n  ],\n  [\n    '3',\n    '4',\n    '5',\n    '6',\n  ],\n];\n\nconst test2 = [\n  [\n    '1',\n    '1',\n    '2',\n    '3',\n  ],\n  [\n    '3',\n    '4',\n    '5',\n    '6',\n  ],\n  [\n    '2',\n    '3',\n    '4',\n    '5',\n  ],\n];\n\nconst test3 = [\n  [\n    '1',\n    '1',\n    '2',\n    '3',\n  ],\n  [\n    '3',\n    '4',\n    '5',\n    '6',\n  ],\n  [\n    '2',\n    '3',\n    '4',\n    '5',\n  ],\n  [\n    '4',\n    '5',\n    '6',\n    '7',\n  ],\n  [\n    '5',\n    '6',\n    '7',\n    '8',\n  ],\n  [\n    '6',\n    '7',\n    '8',\n    '9',\n  ],\n  [\n    '7',\n    '8',\n    '9',\n    '10',\n  ],\n  [\n    '8',\n    ", "\n  const a2 = a * a;\n  const b2 = Math.pow(a / 2, 2) * 3.14;\n  return a2 * b2;\n}\n", "\n  const p = (1.0 / Math.sqrt(5)) * a * a;\n  return p;\n}\n"]}
{"task_id": "MBJSP/489", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction frequencyOfLargest(n, arr) {\n/**\n * * Write a JavaScript function to find the frequency of the largest value in a given array.\n */", "entry_point": "frequencyOfLargest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = [1, 2, 3, 4, 4];\nvar x0 = frequencyOfLargest(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = [5, 6, 5];\nvar x1 = frequencyOfLargest(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = [2, 7, 7, 7];\nvar x2 = frequencyOfLargest(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    // Write your code here\n    if (arr.length < 2 || arr.length > n) {\n        return null;\n    }\n    const result = [];\n    const arrLength = arr.length;\n    const hash = {};\n    for (let i = 0; i < arrLength; i++) {\n        hash[arr[i]] = hash[arr[i]] + 1 || 1;\n    }\n    for (let i = 0; i < arrLength; i++) {\n        if (hash[arr[i]] === arrLength - 1) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n", "\n  let max = arr[0];\n  let frequency = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  frequency = arr.filter(number => number === max).length;\n  return frequency;\n}\n", "\n  let lmax = 0;\n  for (let i = 0; i < n; i++) {\n    let max = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max && arr[j]!== lmax) {\n        max = arr[j];\n      }\n    }\n    if (max!== lmax) {\n      lmax = max;\n    }\n  }\n  return lmax;\n}\n", "\n  const arrCopy = arr.slice();\n  let max = arrCopy.reduce((a, b) => (b > a)? b : a, 0);\n  let maxFreq = 0;\n  for (let i = 0; i < arrCopy.length; i++) {\n    if (arrCopy[i] === max) {\n      maxFreq++;\n    }\n  }\n  return maxFreq;\n}\n", "\n  const max = arr.reduce((max, num) => (num === max? num : max), 0);\n  const frequency = arr.reduce((frequency, num) => (frequency > num? frequency : num), 0);\n  return max === 0? 0 : frequency === max? frequency : frequency / max;\n}\n"]}
{"task_id": "MBJSP/490", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction extractSymmetric(testlist) {\n/**\n * * Write a function to extract all the pairs which are symmetric in the given tuple list.\n */", "entry_point": "extractSymmetric", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]];\nvar x0 = extractSymmetric(arg00);\nvar v0 = new Set([[6, 7],[8, 9]]);\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]];\nvar x1 = extractSymmetric(arg10);\nvar v1 = new Set([[9, 10],[7, 8]]);\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]];\nvar x2 = extractSymmetric(arg20);\nvar v2 = new Set([[8, 9],[10, 11]]);\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testlist.length; i++) {\n    for (let j = i + 1; j < testlist.length; j++) {\n      if (testlist[i] === testlist[j]) {\n        result.push([testlist[i], testlist[j]]);\n      }\n    }\n  }\n  return result;\n}\n", "\n    const testArray = [];\n    for (let i = 0; i < testlist.length - 1; i++) {\n        testArray.push([testlist[i], testlist[i + 1]]);\n    }\n    return testArray;\n}\n", "\n  const sortedTests = testlist.sort(", "\n  const result = [];\n  for (let i = 0; i < testlist.length - 1; i++) {\n    if (testlist[i] === testlist[i + 1]) {\n      result.push([testlist[i], testlist[i + 1]]);\n    }\n  }\n  return result;\n}\n", "\n  return testlist.reduce((acc, cur) => {\n    if (cur.length == 2 && acc.indexOf(cur[0]) == -1 && acc.indexOf(cur[1]) == -1) {\n      acc.push([cur[0], cur[1]]);\n    }\n    return acc;\n  }, []);\n}\n"]}
{"task_id": "MBJSP/491", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumGp(a, n, r) {\n/**\n * * Write a function to find the sum of geometric progression series.\n */", "entry_point": "sumGp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = sumGp(arg00, arg01, arg02);\nvar v0 = 31;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 5;\nvar arg12 = 4;\nvar x1 = sumGp(arg10, arg11, arg12);\nvar v1 = 341;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 6;\nvar arg22 = 3;\nvar x2 = sumGp(arg20, arg21, arg22);\nvar v2 = 728;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const gp = [];\n  gp[0] = a;\n  for (let i = 1; i < n; i++) {\n    gp[i] = gp[i - 1] * r;\n  }\n  return gp[n - 1];\n}\n", "\n  const i = 0;\n  return a + (n * r) * (i + 1) / i;\n}\n", "\n  const firstTerm = a * Math.pow(n, r);\n  const lastTerm = a * Math.pow(n, r - 1);\n  const start = firstTerm - lastTerm;\n  const end = start + a;\n  return end;\n}\n", "\n  let result = 0;\n  for (let i = 0; i <= n; i++) {\n    result += (a * Math.pow(r, i)) / (Math.pow(r, n) - 1);\n  }\n  return result;\n}\n", "\n    // Write your code here\n    const result = [];\n    const primes = [2, 3, 5, 7];\n    const sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum = a + ((Math.pow(r, i)) * (Math.pow(primes[i], n - i)));\n        result.push(sum);\n    }\n    return result;\n}\nconst test = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\nconst test2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\nconst test3 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"]}
{"task_id": "MBJSP/492", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction binarySearch(itemlist, item) {\n/**\n * * Write a function to search an element in the given array by using binary search.\n */", "entry_point": "binarySearch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 8];\nvar arg01 = 6;\nvar x0 = binarySearch(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 8, 9, 10, 13];\nvar arg11 = 10;\nvar x1 = binarySearch(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 13, 14, 19, 22, 36];\nvar arg21 = 23;\nvar x2 = binarySearch(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return itemlist.findIndex((item) => item === item);\n}\n", "\n  let first = 0;\n  let last = itemlist.length - 1;\n  while (first <= last) {\n    const mid = Math.floor((first + last) / 2);\n    if (itemlist[mid] === item) {\n      return mid;\n    } else if (itemlist[mid] < item) {\n      first = mid + 1;\n    } else {\n      last = mid - 1;\n    }\n  }\n  return -1;\n}\n", "\n    let low = 0;\n    let high = itemlist.length - 1;\n    while (low <= high) {\n        const middle = Math.floor((low + high) / 2);\n        const test = itemlist[middle];\n        if (item == test) {\n            return middle;\n        } else if (item < test) {\n            high = middle - 1;\n        } else {\n            low = middle + 1;\n        }\n    }\n    return -1;\n}\n", "\n  return itemlist.findIndex(i => i === item);\n}\n", "\n  if (itemlist.length === 0) {\n    return -1;\n  }\n  let low = 0;\n  let high = itemlist.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (item === itemlist[mid]) {\n      return mid;\n    } else if (item < itemlist[mid]) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n"]}
{"task_id": "MBJSP/493", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction calculatePolygons(startx, starty, endx, endy, radius) {\n/**\n * * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n */", "entry_point": "calculatePolygons", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 1;\nvar arg02 = 4;\nvar arg03 = 4;\nvar arg04 = 3;\nvar x0 = calculatePolygons(arg00, arg01, arg02, arg03, arg04);\nvar v0 = [[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 4;\nvar arg12 = 7;\nvar arg13 = 9;\nvar arg14 = 8;\nvar x1 = calculatePolygons(arg10, arg11, arg12, arg13, arg14);\nvar v1 = [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 6;\nvar arg22 = 4;\nvar arg23 = 3;\nvar arg24 = 2;\nvar x2 = calculatePolygons(arg20, arg21, arg22, arg23, arg24);\nvar v2 = [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n    const polygonStr = `${startx},${starty},${endx},${starty},${endx},${endy},${startx},${endy}`;\n    const hexagonPoints = getHexagonPoints(polygonStr, radius);\n    const hexagonCoords = hexagonPoints.map(point => getHexagonCoords(point));\n    return hexagonCoords;\n}\n", "\n    // Write your code here\n    const side = Math.sqrt(3) * radius;\n    const hexX = side / 2;\n    const hexY = radius;\n    const xStep = Math.floor(endx / hexX);\n    const yStep = Math.floor(endy / hexY);\n    const hexCoordinates = [];\n    for (let x = 0; x < xStep; x++) {\n        for (let y = 0; y < yStep; y++) {\n            hexCoordinates.push([x * hexX, y * hexY]);\n        }\n    }\n    return hexCoordinates;\n}\n", "\n  const x = startx;\n  const y = starty;\n  const hexagon = [];\n  const r = radius;\n  const d = 2 * Math.PI / 3;\n  let n = 0;\n  for (let i = 0; i < 6; i++) {\n    n = i % 3;\n    hexagon.push([x, y]);\n    if (n === 1) {\n      x += r;\n    } else if (n === 2) {\n      y += r;\n    } else {\n      y -= r;\n    }\n    x += r * Math.cos(d);\n  }\n  const hexagonCoords = hexagon.map(coord => coord.map(point => [point[0], point[1]]));\n  const polygon = hexagonCoords.map(hexagon => {\n    return hexagon.map(coord => coord.map(point => [point[0] + radius, point[1] + radius]));\n  });\n  return polygon;\n}\n", "\n  // Write your code here\n  let result = [];\n  for (let i = starty; i <= endy; i++) {\n    const y = radius * Math.sqrt(3) * (i - starty) + (radius / 2.0);\n    const x = radius * Math.sqrt(3 / 2.0) * Math.cos(i * 2 * Math.PI / 6) + radius / 3.0;\n    const x1 = radius * Math.sqrt(3 / 2.0) * Math.cos((i - 1) * 2 * Math.PI / 6) + radius / 3.0;\n    const y1 = radius * Math.sqrt(3) * (i - starty) + (radius / 2.0);\n    const x2 = radius * Math.sqrt(3 / 2.0) * Math.cos((i + 1) * 2 * Math.PI / 6) + radius / 3.0;\n    const y2 = radius * Math.sqrt(3) * (i - starty) + (radius / 2.0);\n    const x3 = radius * Math.sqrt(3 / 2.0) * Math.cos((i + 1) * 2 * Math.PI / 6) + radius / 3.0;\n    const y3 = radius * Math.sqrt(3) * (i - starty) + (radius / 2.0);\n    const x4 = radius * Math.sqrt(3 / 2.0) * Math.cos((i - 1) * 2 * Math.PI / 6) + radius / 3.0;\n    const y4 = radius * Math.sqrt(3) * (i - starty) + (radius / 2.0);\n    const x", "\n  // Write your code here\n  const x = startx;\n  const y = starty;\n  const n = radius * Math.sqrt(3) / 2;\n  const hexes = [];\n  while (x < endx) {\n    let hex = [];\n    hex.push(x, y);\n    x += n;\n    hex.push(x, y);\n    x += n;\n    hex.push(x, y);\n    x -= n;\n    hex.push(x, y);\n    x -= n;\n    hex.push(x, y);\n    hexes.push(hex);\n    y += n;\n  }\n  return hexes;\n}\n"]}
{"task_id": "MBJSP/494", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction binaryToInteger(testtup) {\n/**\n * * Write a function to convert the given binary tuple to integer.\n */", "entry_point": "binaryToInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 0, 1, 0, 0, 1];\nvar x0 = binaryToInteger(arg00);\nvar v0 = \"105\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 1, 0, 0, 1, 0, 1];\nvar x1 = binaryToInteger(arg10);\nvar v1 = \"101\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 0, 1, 0, 1];\nvar x2 = binaryToInteger(arg20);\nvar v2 = \"53\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    const temp = parseInt(testTup[i] + testTup[i + 1], 2);\n    result.push(temp);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length; i++) {\n    result.push(Math.floor(testTup[i] * Math.pow(2, i)));\n  }\n  return result;\n}\n", "\n  const result = parseInt(testTup[0] + testTup[1], 2);\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testtup.length - 1; i++) {\n    result.push(parseInt(testtup[i], 2) * testTup[i + 1]);\n  }\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(parseInt(testTup[i] + testTup[i + 1], 2));\n  }\n  return result.reduce("]}
{"task_id": "MBJSP/495", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeLowercase(str1) {\n/**\n * * Write a function to remove lowercase substrings from a given string by using regex.\n */", "entry_point": "removeLowercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"KDeoALOklOOHserfLoAJSIskdsf\";\nvar x0 = removeLowercase(arg00);\nvar v0 = \"KDALOOOHLAJSI\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ProducTnamEstreAmIngMediAplAYer\";\nvar x1 = removeLowercase(arg10);\nvar v1 = \"PTEAIMAAY\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"maNufacTuredbYSheZenTechNolOGIes\";\nvar x2 = removeLowercase(arg20);\nvar v2 = \"NTYSZTNOGI\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return str1.replace(/\\w*\\S*/g, \"\");\n}\nconst someStrings = [\"Some\", \"string\", \"to\", \"test\", \"this\", \"", "\n  const newStr = str1.replace(/^.*?[a-z]+.*?$/g, \"\");\n  return newStr;\n}\n", "\n  const remove = 'abcdefghijklmnopqrstuvwxyz';\n  return str1.replace(new RegExp(remove, 'g'), '');\n}\n", "\n  const lstr = str.replace(/[a-zA-Z]/g, \"\");\n  return lstr;\n}\n", "\n  const result = [];\n  const str2 = str1.split('').map(ch => ch.toLowerCase()).filter(ch => ch.length > 0).join('');\n  const regEx = new RegExp(str2);\n  str1.split('').map(ch => ch.replace(regEx, '')).forEach(ch => result.push(ch));\n  return result;\n}\n"]}
{"task_id": "MBJSP/496", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction heapQueueSmallest(nums, n) {\n/**\n * * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n */", "entry_point": "heapQueueSmallest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg01 = 3;\nvar x0 = heapQueueSmallest(arg00, arg01);\nvar v0 = [14, 22, 25];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg11 = 2;\nvar x1 = heapQueueSmallest(arg10, arg11);\nvar v1 = [14, 22];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25, 35, 22, 85, 14, 65, 75, 22, 58];\nvar arg21 = 5;\nvar x2 = heapQueueSmallest(arg20, arg21);\nvar v2 = [14, 22, 22, 25, 35];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const heap = [];\n  for (let i = 0; i < nums.length; i++) {\n    heap.push(nums[i]);\n    if (heap.length > n) {\n      heap.shift();\n    }\n  }\n  return heap;\n}\n", "\n  const minHeap = new MinHeap(nums.map(num => parseInt(num, 10)));\n  return nums.map(num => minHeap.removeSmallest()).map(num => parseInt(num, 10));\n}\n", "\n  // Write your code here\n  const numsArr = nums.map(num => parseInt(num, 10));\n  const heap = new Heap(numsArr, n);\n  for (let i = 0; i < numsArr.length; i++) {\n    heap.add(numsArr[i]);\n  }\n  return heap.peek();\n}\n", "\n  const q = [];\n  for (let i = 0; i < nums.length; i++) {\n    q.push({value: nums[i], index: i});\n  }\n  const sortedArray = [...q].sort(({value}) => value);\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(sortedArray[0].value);\n    sortedArray.shift();\n  }\n  return result;\n}\n", "\n  const numsAsTup = nums.map(num => [num, num]);\n  heapify(numsAsTup);\n  const result = [];\n  while (n > 0) {\n    result.push(dequeue(numsAsTup));\n    n--;\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/497", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction surfaceareaCone(r, h) {\n/**\n * * Write a function to find the surface area of a cone.\n */", "entry_point": "surfaceareaCone", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 12;\nvar x0 = surfaceareaCone(arg00, arg01);\nvar v0 = 282.7433388230814;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = surfaceareaCone(arg10, arg11);\nvar v1 = 880.5179353159282;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 19;\nvar arg21 = 17;\nvar x2 = surfaceareaCone(arg20, arg21);\nvar v2 = 2655.923961165254;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const \u03c0 = Math.PI;\n  const \u03c1 = r;\n  const height = h;\n  const result = height * \u03c0 * \u03c1 * 2;\n  return result;\n}\n", "\n  const baseArea = Math.PI * r * r;\n  return baseArea + (2 * h) * Math.PI * r;\n}\n", "\n  const baseArea = (r * r * Math.PI) / 4;\n  return baseArea + h * r * Math.log10(r);\n}\n", "\n  const r = r || 10;\n  const h = h || 10;\n  const sa = 2 * Math.PI * r * h;\n  return sa;\n}\n", "\n  let area = 0;\n  area = area + (Math.PI * r * r);\n  area = area + (Math.PI * h * r);\n  return area;\n}\n"]}
{"task_id": "MBJSP/498", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction gcd(x, y) {\n/**\n * * Write a JavaScript function to find gcd of two positive integers.\n */", "entry_point": "gcd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar arg01 = 17;\nvar x0 = gcd(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 6;\nvar x1 = gcd(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 9;\nvar x2 = gcd(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (x < y) {\n    swap(x, y);\n  }\n  let rem = x % y;\n  if (rem === 0) {\n    return y;\n  }\n  return gcd(y, rem);\n}\n", "\n  // Write your code here\n  let gcd = 0;\n  for (let i = Math.min(x, y); i > 0; i--) {\n    if (x % i === 0 && y % i === 0) {\n      gcd = i;\n    }\n  }\n  return gcd;\n}\n", "\n  let temp = Math.min(x, y);\n  for (let i = 2; i <= temp; i++) {\n    while (x % i === 0 && y % i === 0) {\n      x = x / i;\n      y = y / i;\n    }\n  }\n  return x + y;\n}\n", "\n  if (x < y) {\n    return gcd(y, x);\n  }\n  if (x % y === 0) {\n    return y;\n  }\n  return gcd(y, x % y);\n}\n", "\n  let gcd = 0;\n  for (let i = 1; i <= Math.max(x, y); i++) {\n    if (x % i === 0 && y % i === 0) {\n      gcd = i;\n    }\n  }\n  return gcd;\n}\n"]}
{"task_id": "MBJSP/499", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction diameterCircle(r) {\n/**\n * * Write a function to find the diameter of a circle.\n */", "entry_point": "diameterCircle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = diameterCircle(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 40;\nvar x1 = diameterCircle(arg10);\nvar v1 = 80;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = diameterCircle(arg20);\nvar v2 = 30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return 2 * r;\n}\n", "\n  const diameter = 2 * r;\n  return diameter;\n}\n", "\n  return 2 * r;\n}\n", "\n  const circRad = (Math.PI * r * r);\n  return circRad;\n}\n", "\n  let d = 2 * r;\n  return d;\n}\n"]}
{"task_id": "MBJSP/500", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction concatenateElements(list) {\n/**\n * * Write a function to concatenate all elements of the given list into a string.\n */", "entry_point": "concatenateElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"];\nvar x0 = concatenateElements(arg00);\nvar v0 = \"  hello there have a rocky day\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Hi\", \"there\", \"How\", \"are\", \"you\"];\nvar x1 = concatenateElements(arg10);\nvar v1 = \"  Hi there How are you\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"];\nvar x2 = concatenateElements(arg20);\nvar v2 = \"  Part of the journey is end\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = list.reduce((a, b) => a + b);\n  return result;\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n  return result.join(\"\");\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n  return result.join(\"\");\n}\n", "\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n  return result.join('');\n}\n", "\n  let result = '';\n  for (let i = 0; i < list.length; i++) {\n    result = result + list[i];\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/501", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction numCommDiv(x, y) {\n/**\n * * Write a JavaScript function to find common divisor between two numbers in a given pair.\n */", "entry_point": "numCommDiv", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = numCommDiv(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 8;\nvar x1 = numCommDiv(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar arg21 = 24;\nvar x2 = numCommDiv(arg20, arg21);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  if (y % x === 0) {\n    return x;\n  }\n  return numCommDiv(x, y % x);\n}\n", "\n  const result = [];\n  for (let i = x / 2; i >= 1; i--) {\n    if (x % i === 0 && y % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "\n  let temp = x * y;\n  let sum = 0;\n  for (let i = 1; i <= temp; i++) {\n    if (temp % i === 0) {\n      sum++;\n    }\n  }\n  return sum;\n}\nconst re = /[^a-zA-Z0-9\\s]+/gi;\n", "\n  // Write your code here\n  const temp = [x, y];\n  const yMult = temp[1]? temp[1] * temp[0] : temp[0];\n  const min = (yMult === temp[1]? temp[0] : temp[1]);\n  const max = (yMult === temp[1]? temp[1] : temp[0]);\n  let i = (min * min + min) / 2;\n  let minCount = 0;\n  while (minCount < min) {\n    if (i % min === 0 && i % max === 0) {\n      return min;\n    }\n    minCount++;\n    i++;\n  }\n  return -1;\n}\n\nconst tup = [1, 2, 3, 4];\nconst arr = [1, 2, 3, 4, 5];\nconst x = numCommDiv(tup, arr);\nconsole.log(x);\nconsole.log(multiplyElements(tup));\nconsole.log(sortNumericStrings(tup));\nconsole.log(numCommDiv(10, 4));\n```\n\n</div>\n\n</section>\n\n## Challenge Seed\n<section id='challengeSeed'>\n\n<div id='js-seed'>\n\n```js\n", "\n  return Math.min(x / y, y / x);\n}\n"]}
{"task_id": "MBJSP/502", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction find(n, m) {\n/**\n * * Write a JavaScript function to find remainder of two numbers.\n */", "entry_point": "find", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 3;\nvar x0 = find(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 3;\nvar x1 = find(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar arg21 = 5;\nvar x2 = find(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n % m;\n}\n", "\n  const remainder = n % m;\n  return remainder;\n}\n", "\n  // Write your code here\n  return n % m;\n}\n", "\n  let dividend = parseInt(m, 10), divisor = parseInt(n, 10);\n  if (dividend == 0) {\n    return 0;\n  }\n  let result = 0;\n  for (let i = 1; i <= dividend; i++) {\n    if (dividend % i === 0 && divisor % i === 0) {\n      result = i;\n    }\n  }\n  return result;\n}\n", "\n  const r = n % m;\n  return r;\n}\n"]}
{"task_id": "MBJSP/503", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction addConsecutiveNums(nums) {\n/**\n * * Write a function to add consecutive numbers of a given list.\n */", "entry_point": "addConsecutiveNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nvar x0 = addConsecutiveNums(arg00);\nvar v0 = [2, 4, 7, 8, 9, 11, 13];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 8, 9, 6, 10];\nvar x1 = addConsecutiveNums(arg10);\nvar v1 = [9, 13, 17, 15, 16];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x2 = addConsecutiveNums(arg20);\nvar v2 = [3, 5, 7, 9, 11, 13, 15, 17, 19];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  for (let i = 0; i < nums.length - 1; i++) {\n    result.push(nums[i] + nums[i + 1]);\n  }\n  return result;\n}\n", "\n  return nums.map(num => num + nums.shift()).join('');\n}\n", "\n  const result = [];\n  const counter = {};\n  for (let i = 0; i < nums.length; i++) {\n    counter[nums[i]] = counter[nums[i]] + 1 || 1;\n    if (counter[nums[i]] === 3) {\n      result.push(nums[i]);\n      counter[nums[i]] = 0;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  const counter = {};\n  for (let i = 0; i < nums.length; i++) {\n    counter[nums[i]] = counter[nums[i]] + 1 || 1;\n    if (counter[nums[i]] === 2) {\n      result.push(nums[i]);\n      counter[nums[i]] = 0;\n    }\n  }\n  return result;\n}\n", "\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length - 1; i++) {\n    sum += nums[i] + nums[i + 1];\n    result.push(sum);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/504", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sumOfSeries(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */", "entry_point": "sumOfSeries", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = sumOfSeries(arg00);\nvar v0 = 225;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = sumOfSeries(arg10);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = sumOfSeries(arg20);\nvar v2 = 36;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  return n * (n * n + n + 1) / 2;\n}\n", "\n  // Write your code here\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i;\n  }\n  return sum;\n}\n", "\n  const nth_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  const nth_nums_arr = nth_nums.map(num => num);\n  let sum_of_nth_nums = 0;\n  for (let i = 0; i < nth_nums_arr.length; i++) {\n    sum_of_nth_nums += nth_nums_arr[i] * nth_nums_arr[i] * nth_nums_arr[i];\n  }\n  return sum_of_nth_nums;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i * i * i;\n  }\n  return sum;\n}\n", "\n  const start = 1;\n  const end = n;\n  let sum = 0;\n  for (let i = start; i <= end; i++) {\n    sum += i * i * i;\n  }\n  return sum;\n}\n"]}
{"task_id": "MBJSP/505", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction reOrder(a) {\n/**\n * * Write a function to move all zeroes to the end of the given array.\n */", "entry_point": "reOrder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [6, 0, 8, 2, 3, 0, 4, 0, 1];\nvar x0 = reOrder(arg00);\nvar v0 = [6, 8, 2, 3, 4, 1, 0, 0, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 0, 2, 7, 0, 9, 0, 12, 0];\nvar x1 = reOrder(arg10);\nvar v1 = [4, 2, 7, 9, 12, 0, 0, 0, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 11, 0, 74, 14, 0, 1, 0, 2];\nvar x2 = reOrder(arg20);\nvar v2 = [3, 11, 74, 14, 1, 2, 0, 0, 0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === 0) {\n      continue;\n    }\n    else {\n      for (let j = a.length - 1; j > i; j--) {\n        if (a[j - 1] === 0) {\n          continue;\n        }\n        else {\n          a[j] = a[j - 1];\n          a[j - 1] = 0;\n        }\n      }\n    }\n  }\n  return a;\n}\n", "\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]);\n    if (a[i] === 0) {\n      result.push(0);\n    }\n  }\n  return result;\n}\n\nconst sorted = ['a', 'b', 'c', 'd', 'e'];\nconst reordered = reOrder(sorted);\nconsole.log(sorted);\nconsole.log(reordered);\n\n//const numerics = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n//const sortedNumericStrings = sortNumericStrings(numerics);\n//console.log(sortedNumericStrings);\n//const multiplyElements = multiplyElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n//console.log(multiplyElements);\n//const reOrder = reOrder(multiplyElements);\n//console.log(reOrder);", "\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!= 0) {\n      result.push(a[i]);\n    }\n  }\n  return result;\n}\n", "\n  const arr = a.join('');\n  const newarr = arr.split('').map(ele => (ele === '0'? '' : ele)).join('');\n  return newarr;\n}\n", "\n  let result = a.join('');\n  let index = result.indexOf('0');\n  while (index!== -1) {\n    result = result.slice(0, index) + result.slice(index + 1);\n    index = result.indexOf('0');\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/506", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction permutationCoefficient(n, k) {\n/**\n * * Write a function to calculate the permutation coefficient of given p(n, k).\n */", "entry_point": "permutationCoefficient", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 2;\nvar x0 = permutationCoefficient(arg00, arg01);\nvar v0 = 90;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 3;\nvar x1 = permutationCoefficient(arg10, arg11);\nvar v1 = 720;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 1;\nvar x2 = permutationCoefficient(arg20, arg21);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  let permutationCoefficient = 1;\n  for (let i = 0; i < n - k + 1; i++) {\n    permutationCoefficient *= i + 1;\n  }\n  const sum = (n - k + 1) * (permutationCoefficient - 1);\n  return sum;\n}\n", "\n  const nCk = n!/k!.times(n - k)!;\n  return nCk;\n}\n", "\n  return factorial(n) / (factorial(k) * factorial(n - k));\n}\n", "\n  const result = [];\n  for (let i = 0; i <= n; i++) {\n    result.push(permute(i, k));\n  }\n  return result;\n}\n", "\n  let result = 0;\n  for (let i = 0; i <= n; i++) {\n    result += Math.pow((i - 1), k);\n  }\n  return result;\n}\n"]}
{"task_id": "MBJSP/507", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction removeWords(list1, removewords) {\n/**\n * * Write a function to remove specific words from a given list.\n */", "entry_point": "removeWords", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg01 = [\"white\", \"orange\"];\nvar x0 = removeWords(arg00, arg01);\nvar v0 = [\"red\", \"green\", \"blue\", \"black\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg11 = [\"black\", \"orange\"];\nvar x1 = removeWords(arg10, arg11);\nvar v1 = [\"red\", \"green\", \"blue\", \"white\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg21 = [\"blue\", \"white\"];\nvar x2 = removeWords(arg20, arg21);\nvar v2 = [\"red\", \"green\", \"black\", \"orange\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let list2 = list1;\n  const removeWordsArr = removewords.split(' ');\n  removeWordsArr.forEach(word => {\n    const index = list2.findIndex(item => item.toLowerCase().includes(word));\n    if (index!== -1) {\n      list2.splice(index, 1);\n    }\n  });\n  return list2;\n}\n", "\n  const copy = list1.slice();\n  for (let i = 0; i < removewords.length; i++) {\n    copy.splice(removewords[i], 1);\n  }\n  return copy;\n}\n", "\n  const removeWords = removewords.split(' ');\n  return list1.filter(word => removeWords.indexOf(word) === -1);\n}\n", "\n  return list1.filter(word =>!removewords.includes(word));\n}\n// const testtup = ['I', 'Love', 'Tale', 'Of', 'Cricket'];\n// const removewords = ['Of', 'Cricket'];\n// console.log(removeWords(testtup, removewords));\n// console.log(sortNumericStrings(multiplyElements(testtup)));\n", "\n  let newlist = [];\n  for (let i = 0; i < removeWords.length; i++) {\n    if (list1.indexOf(removeWords[i]) < 0) {\n      newlist.push(list1[i]);\n    }\n  }\n  return newlist;\n}\n"]}
{"task_id": "MBJSP/508", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction sameOrder(l1, l2) {\n/**\n * * Write a function to check if the common elements between two given lists are in the same order or not.\n */", "entry_point": "sameOrder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"black\", \"orange\"];\nvar arg01 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar x0 = sameOrder(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar arg11 = [\"white\", \"orange\", \"pink\", \"black\"];\nvar x1 = sameOrder(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"black\", \"orange\"];\nvar arg21 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar x2 = sameOrder(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  let result = true;\n  for (let i = 0; i < l1.length && i < l2.length; i++) {\n    if (l1[i]!== l2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n", "\n  const list1 = l1.sort((a, b) => a - b);\n  const list2 = l2.sort((a, b) => a - b);\n  return list1.every((element, index) => list2[index] === element)\n}\n", "\n  const commonElements = [];\n  let i = 0;\n  while (i < l1.length && i < l2.length) {\n    if (l1[i] === l2[i]) {\n      commonElements.push(l1[i]);\n    } else break;\n    i++;\n  }\n  return commonElements.length === 0;\n}\n", "\n  if (l1.length!== l2.length) {\n    return false;\n  }\n  const n = l1.length;\n  for (let i = 0; i < n; i++) {\n    if (l1[i]!== l2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "\n  const list1 = l1.sort((a, b) => a - b);\n  const list2 = l2.sort((a, b) => a - b);\n  return list1 === list2;\n}\n"]}
{"task_id": "MBJSP/509", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction averageOdd(n) {\n/**\n * * Write a JavaScript function to find the average of odd numbers till a given odd number.\n */", "entry_point": "averageOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = averageOdd(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = averageOdd(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 11;\nvar x2 = averageOdd(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  // Write your code here\n  return null;\n}\n", "\n  const nums = [1, 3, 5, 7, 9, 11];\n  const average = nums.reduce((a, b) => (a + b) / nums.length, 0) + 1;\n  return average;\n}\n", "\n  const test = [1, 3, 5, 7, 9, 11, 13, 15];\n  const sum = test.reduce((a, b) => a + b, 0);\n  const average = sum / test.length;\n  return average;\n}\n", "\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum = sum + i;\n  }\n  return sum / n;\n}\n", "\n  return (sum + odd / odd);\n}\n"]}
{"task_id": "MBJSP/510", "prompt": "function extractElements(numbers, n) {\n/**\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n */\n    // Write your code here\n    const result = [];\n    const counter = {};\n    for (let i = 0; i < numbers.length; i++) {\n        counter[numbers[i]] = counter[numbers[i]] + 1 || 1;\n        if (counter[numbers[i]] === n) {\n            result.push(numbers[i]);\n            counter[numbers[i]] = 0;\n        }\n    }\n    return result;\n}\nfunction sortNumericStrings(numsstr) {\n/**\n * * Write a function to sort a given list of strings of numbers numerically.\n */\n  const numbers = numsStr.map(num => parseInt(num, 10));\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  return sortedNumbers;\n}\nfunction multiplyElements(testtup) {\n/**\n * * Write a function to multiply the adjacent elements of the given tuple.\n */\n  const result = [];\n  for (let i = 0; i < testTup.length - 1; i++) {\n    result.push(testTup[i] * testTup[i + 1]);\n  }\n  return result;\n}\nfunction noOfSubsequences(arr, k) {\n/**\n * * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n */", "entry_point": "noOfSubsequences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar arg01 = 10;\nvar x0 = noOfSubsequences(arg00, arg01);\nvar v0 = 11;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 8, 7, 2];\nvar arg11 = 50;\nvar x1 = noOfSubsequences(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 8];\nvar arg21 = 15;\nvar x2 = noOfSubsequences(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "completion": ["\n  const result = [];\n  let curr = [];\n  for (let i = 0; i < arr.length; i++) {\n    curr.push(arr[i]);\n    if (curr.length === k) {\n      result.push(1);\n    } else {\n      result.push(noOfSubsequences(curr, k - 1) + 1);\n    }\n    curr = [];\n  }\n  return result;\n}\n", "\n  // Write your code here\n  let output = 0;\n  let count = 0;\n  let flag = false;\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < k && product / arr[i] > k) {\n      output++;\n    }\n    if (arr[i] > k && product / arr[i] <= k) {\n      flag = true;\n      count++;\n    }\n    if (arr[i] <= k && flag && product / arr[i] < k) {\n      count++;\n    }\n  }\n  return output;\n}\n", "\n  let answer = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] <= k && arr[i] * arr[j] <= k) {\n        answer += 1;\n      }\n    }\n  }\n  return answer;\n}\n", "\n  // Write your code here\n  let result = 0;\n  let counter = 0;\n  const arrlen = arr.length;\n  const product = [];\n  const nums = [];\n  let flag = false;\n  for (let i = 0; i < arrlen; i++) {\n    product[i] = arr[i];\n  }\n  for (let i = 0; i < arrlen; i++) {\n    nums[i] = arr[i];\n  }\n  for (let i = 0; i < arrlen; i++) {\n    for (let j = i + 1; j < arrlen; j++) {\n      counter++;\n      flag = false;\n      if (nums[i] > 0) {\n        flag = true;\n        nums[i] = nums[i] * product[i];\n        product[i] = nums[i] % 10;\n        nums[j] = nums[j] - nums[i];\n        product[j] = nums[j] / 10;\n      }\n      if (nums[j] < 0 && flag === true) {\n        flag = false;\n        nums[j] = nums[j] * product[j];\n        product[j] = nums[j] / 10;\n        nums[i] = nums[i] - nums[j];\n        product[i] = nums[i] / 10;\n      }\n      if (product[i] >= k || product[j] >= k || product[i] + product[j] >= k) {\n        continue;\n      }\n      if (product[i] <= 0 && product[j] <= 0) {\n", "\n    return arr.length * k;\n}\n"]}
