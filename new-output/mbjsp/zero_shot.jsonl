{"task_id": "MBJSP/11", "prompt": "function removeOcc(s, ch) {\n/**\n * * Write a JavaScript function to remove first and last occurrence of a given character from the string.\n */", "entry_point": "removeOcc", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"hello\";\nvar arg01 = \"l\";\nvar x0 = removeOcc(arg00, arg01);\nvar v0 = \"heo\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar arg11 = \"a\";\nvar x1 = removeOcc(arg10, arg11);\nvar v1 = \"bcd\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"PHP\";\nvar arg21 = \"P\";\nvar x2 = removeOcc(arg20, arg21);\nvar v2 = \"H\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to remove first and last occurrence of a given character from the string.", "language": "javascript", "canonical_solution": "    let result = \"\";\n    for(let i=0;i<s.length;i++)\n        if(s[i]!=ch)\n            result+=s[i];\n    return result;\n}", "completion": ["\n\n", "\nconst remove_first_last_occurrence = function (s, ch) {\n/**\n * * Remove first occurrence of a given character from the string.\n */\nconst first_occurrence = s.indexOf(ch);\n/**\n * * If the found position is -1, then no match was found and the whole string is returned.\n */\nif (first_occurrence === -1) {\nreturn s;\n}\n/**\n * * Remove last occurrence of a given character from the string.\n */\nconst last_occurrence = s.lastIndexOf(ch);\n/**\n * * Return the string without the first and last occurrences of a given character.\n */\nreturn s.substring(0, first_occurrence) + s.substring(last_occurrence + 1);\n};\n\nconst remove_nth_occurrence = function (s, ch, n) {\n/**\n * * Remove Nth occurrence of a given character from the string.\n */\nconst nth_occurrence = s.indexOf(ch, n - 1);\n/**\n * * If the found position is -1, then no match was found and the whole string is returned.\n */\nif (nth_occurrence === -1) {\nreturn s;\n}\n/**\n * * Return the string without the Nth occurrence of a given character.\n */\nreturn s.substring(0, nth_occurrence) + s.substring(nth_occurrence + 1);\n};\n\nconst remove_char = function (s, ch) {\n/**\n * * Write a JavaScript ", "\n        var i = s.indexOf(ch);\n        if (i == -1) {\n            return s;\n        } else {\n            return s.substr(0, i) + s.substr(i + ch.length, s.length - i - ch.length);\n        }\n    }\n    \n/**\n * * Remove HTML tags from a given string.\n */\n    ", "\ns.unfirst(ch) {\n    const is_last = s.lastIndexOf(ch) < s.indexOf(ch);\n    return s.replace(`(?=${ch})` + ch + `(?!${ch}$)`, '') + is_last? '' : `(?=${ch})${ch}`;\n}\n```\n\nYou can get the JavaScript function from the string using:\n\n```\ns.unfirst(ch);\n```\n\n**(3)** You can use the String.prototype.unfirst method to remove the first occurrence of a given character from the string.\n\n```js\nconst s = 'hello world';\n\n// Get the JavaScript ", "\n\ns = s.replace(/^\\s*/, '').replace(/\\s*$/, '');\nch = ch.charCodeAt();\n// print(s.indexOf(ch) > -1);\nreturn s.indexOf(ch) > -1;\n}\n```\n\nThe `if` statement in the `if` block below is useless. The `if` statement in the `else if` block below is useless too, since it can't be triggered by the `if` statement in the `if` block below.\n\n```js\n"]}
{"task_id": "MBJSP/12", "prompt": "function sortMatrix(m) {\n/**\n * * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n */", "entry_point": "sortMatrix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nvar x0 = sortMatrix(arg00);\nvar v0 = [[1, 1, 1], [1, 2, 3], [2, 4, 5]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nvar x1 = sortMatrix(arg10);\nvar v1 = [[-2, 4, -5], [1, -1, 1], [1, 2, 3]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 8, 9], [6, 4, 3], [2, 1, 4]];\nvar x2 = sortMatrix(arg20);\nvar v2 = [[2, 1, 4], [6, 4, 3], [5, 8, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "language": "javascript", "canonical_solution": "  const rows = m.length;\n  const cols = m[0].length;\n  const sorted = [];\n  for (let i = 0; i < rows; i++) {\n    const row = m[i];\n    const sum = row.reduce((acc, cur) => acc + cur, 0);\n    sorted.push({ sum, row });\n  }\n  sorted.sort((a, b) => a.sum - b.sum);\n  const sortedMatrix = [];\n  for (let i = 0; i < rows; i++) {\n    const row = sorted[i].row;\n    sortedMatrix.push(row);\n  }\n  return sortedMatrix;\n}", "completion": ["\n\n    m.sort = function(o) {\n        if(!o) {\n            o = {};\n        }\n\n        var rows = m.rows,\n            rowSums = m.rowSums,\n            newRowSums = [],\n            newRows = [],\n            newRow;\n\n        if(o.order === 'asc') {\n            newRowSums.push(rows[rows.length - 1].sum());\n            for(var i = 0; i < rows.length; i++) {\n                newRow = rows[i].slice(0);\n                newRow.push(rowSums[i]);\n                newRowSums.push(newRow.sum());\n                newRows.push(newRow);\n            }\n        } else {\n            newRowSums.push(rowSums[0]);\n            for(var i = 0; i < rows.length; i++) {\n                newRow = rows[i].slice(0);\n                newRow.push(rows[i][rows[i].length - 1]);\n                newRowSums.push(newRow.sum());\n                newRows.push(newRow);\n            }\n        }\n\n        var newM = new Matrix(newRows, newRowSums);\n\n        return newM;\n    };\n\n    m.sums = function() {\n        return m.rowSums.slice(0);\n    };\n\n    return m;\n};\n\n// Matrix.MatrixRow\nMatrix.MatrixRow = ", "\n/**\n * Function to sort a given matrix in ascending order according to the sum of its rows.\n */\nvar _matrixSort = function _matrixSort(matrix) {\n  return matrix.sort(", "\nvar matrix_sort = function(m) {\n  var arr = [];\n  for (var i = 0; i < m.length; i++) {\n    arr[i] = {};\n    for (var j = 0; j < m[i].length; j++) {\n      arr[i][j] = m[i][j];\n    }\n  }\n  arr.sort(", "\n//public static List<int[]> SortMatrix(int[][] matrix, int row) {\n//    List<int[]> result = new List<int[]>();\n//    List<int[]> column = new List<int[]>();\n//    List<List<int>> allColumns = new List<List<int>>();\n//    for (int i = 0; i < matrix.Length; i++) {\n//        if (row!= i) {\n//            allColumns.Add(column);\n//            column = new List<int[]>();\n//        }\n//        column.Add(matrix[i]);\n//    }\n//    allColumns.Add(column);\n//    for (int i = 0; i < allColumns.Count; i++) {\n//        for (int j = 0; j < allColumns[i].Count; j++) {\n//            result.Add(allColumns[i][j]);\n//        }\n//    }\n//    return result;\n//}\n\n/**\n * Write a ", "\nconst write_summation_function = (m: number[][]): number => {\n    let new_matrix = m;\n\n    for (let i = 0; i < new_matrix.length; i++) {\n        new_matrix[i].sort((a: number, b: number): number => {\n            return a - b;\n        });\n    }\n\n    let sum = 0;\n    for (let i = 0; i < new_matrix.length; i++) {\n        sum += new_matrix[i][new_matrix[i].length - 1];\n    }\n\n    return sum;\n};\n\nconst calc_entropy = (m: number[][]): number => {\n    let sum = 0;\n\n    for (let i = 0; i < m.length; i++) {\n        for (let j = 0; j < m[i].length - 1; j++) {\n            sum += (m[i][j] / m[i][m[i].length - 1]) * (Math.log2(m[i][j] / m[i][m[i].length - 1]));\n        }\n    }\n\n    return sum;\n};\n\nconst calc_gini = (m: number[][]): number => {\n    let sum = 0;\n\n    for (let i = 0; i < m.length; i++) {\n        for (let j = 0; j < m[i].length - 1; j++) {\n            sum += (m[i][j] / m[i][m[i].length - 1]) * (1 - m[i][j] / m[i][m[i].length - 1]);\n        }\n    }\n\n"]}
{"task_id": "MBJSP/13", "prompt": "function countCommon(words) {\n/**\n * * Write a function to count the most common words in a dictionary.\n */", "entry_point": "countCommon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"];\nvar x0 = countCommon(arg00);\nvar v0 = [[\"pink\", 6], [\"black\", 5], [\"white\", 5], [\"red\", 4]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"];\nvar x1 = countCommon(arg10);\nvar v1 = [[\"one\", 4], [\"two\", 2], [\"three\", 2], [\"four\", 1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"];\nvar x2 = countCommon(arg20);\nvar v2 = [[\"Apple\", 2], [\"Amazon\", 2], [\"Netflix\", 2], [\"Facebook\", 1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count the most common words in a dictionary.", "language": "javascript", "canonical_solution": "  const map = {};\n  words.forEach(item => {\n    map[item] = (map[item] || 0) + 1;\n  });\n  const result = [];\n  for (let key in map) {\n    result.push([key, map[key]]);\n  }\n  return result.sort((a, b) => b[1] - a[1]).slice(0, 4);\n}", "completion": ["\n", "\n\nconst dictionary = {\n    \n};\n```\n\n### <a name=\"2.2\">2.2. Find a word in a dictionary.</a>\n\n1.  Find the first occurrence of the word.\n2.  Count the number of occurrences of the word.\n3.  Find the most common occurrences of the word.\n4.  Remove the first occurrence of the word.\n5.  Use the `string.split('')` function to find all occurrences of the word.\n6.  Count the number of occurrences of each occurrence of the word.\n7.  Use the `string.join('')` function to join the occurrences of the word.\n8.  Use the `string.substring(0, count)` function to return the most common occurrences of the word.\n9.  Use the `string.substring(0, count + 1)` ", "\nlet count = (words: { [key: string]: number }) => {\n  words.forEach((value, key) => {\n    console.log(`${key}: ${value}`);\n  });\n};\n\n/**\n * * Write a function to filter out the words with a count of less than N.\n */\nlet filter = (words: { [key: string]: number }) => {\n  const filter = (count) => {\n    return count < 10;\n  };\n\n  return words.filter(filter);\n};\n\n/**\n * * Write a function to sort the words in dictionary.\n */\nlet sort = (words: { [key: string]: number }) => {\n  const sort = (word1: string, word2: string) => {\n    const value1 = word1? word1.split(',').reduce((count, word) => {\n      const word_count = count + (word? 1 : 0);\n      return word_count;\n    }, 0) : 0;\n    const value2 = word2? word2.split(',').reduce((count, word) => {\n      const word_count = count + (word? 1 : 0);\n      return word_count;\n    }, 0) : 0;\n    return value2 - value1;\n  };\n\n  return words.sort(sort);\n};\n\n/**\n * * Write a ", "\n\nlet mostCommonWords = function (words) {\n    let counts = {};\n    words.forEach(", "\n$count: count($dictionary);\n// \u2192 {0: {0: 1, 1: 1, 2: 1}, 1: {0: 1, 1: 1, 2: 1}, 2: {0: 1, 1: 1, 2: 1}}\n// $count\n/**\n * * Write a function to find the longest word in a dictionary.\n */\n$longest: find($dictionary, longest);\n// \u2192 \"hill\"\n// $longest\n/**\n * * Write a function to find the shortest word in a dictionary.\n */\n$shortest: find($dictionary, shortest);\n// \u2192 \"hill\"\n// $shortest\n/**\n * * Write a function to find the most common letter in a word.\n */\n$most_common: most_common($word);\n// \u2192 \"h\"\n// $most_common\n/**\n * * Write a function to compute the frequency of a letter in a word.\n */\n$frequency: frequency($letter, $word);\n// \u2192 {h: 1, i: 1, l: 1, e: 1}\n// $frequency\n/**\n * * Write a function to compute the frequency of all the letters in a word.\n */\n$letters_frequency: letters_frequency($word);\n// \u2192 {h: 1, i: 2, l: 1, e: 1}\n// $letters_frequency\n/**\n * * Write a function to check whether a word is a palindrome.\n */\n$palindrome: palindrome($word);\n// \u2192 true\n// $palindrome\n/**\n * * Write a "]}
{"task_id": "MBJSP/14", "prompt": "function findVolume(l, b, h) {\n/**\n * * Write a JavaScript function to find the volume of a triangular prism.\n */", "entry_point": "findVolume", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 8;\nvar arg02 = 6;\nvar x0 = findVolume(arg00, arg01, arg02);\nvar v0 = 240;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = findVolume(arg10, arg11, arg12);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar arg22 = 1;\nvar x2 = findVolume(arg20, arg21, arg22);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the volume of a triangular prism.", "language": "javascript", "canonical_solution": "    return Math.round(l*b*h*0.5);\n}", "completion": ["\n", "\n    jQuery.fn.writeTrianglePrism = function (l, b, h) {\n        // Equation (13) of the slides\n        var volume = Math.abs((l * b * h) / (Math.sqrt(2) * Math.PI))\n        jQuery('<div class=\"volume\">Volume of a triangular prism is <span>' + volume + '</span></div>')\n    }\n\n\n    /**\n     * * Write a JavaScript function to find the volume of a pyramid.\n     */\n    jQuery.fn.writePyramid = function (l, b, h) {\n        // Equation (16) of the slides\n        var volume = (l * b * h) / 3\n        jQuery('<div class=\"volume\">Volume of a pyramid is <span>' + volume + '</span></div>')\n    }\n\n\n    /**\n     * * Write a JavaScript function to find the volume of a square pyramid.\n     */\n    jQuery.fn.writeSquarePyramid = function (l, b, h) {\n        // Equation (17) of the slides\n        var volume = Math.abs((l * l * h) / (2 * Math.PI))\n        jQuery('<div class=\"volume\">Volume of a square pyramid is <span>' + volume + '</span></div>')\n    }\n\n\n    /**\n     * * Write a JavaScript function to find the volume of a cube.\n     */\n    jQuery.fn.writeCube = ", "\n  var f = ", "\n", "\nlet out = [\n\t[ 0,  0,  0],\n\t[ 0,  0,  0],\n\t[ 0,  0,  0]\n];\n\nlet j = 0;\nfor (let i = 0; i <= l; i++) {\n\tfor (let z = 0; z <= h; z++) {\n\t\tlet zp = z;\n\t\tif (zp < 0) zp = -zp;\n\t\tlet p = [i, j, zp];\n\t\tout[0][0] += p[0] * p[0] / 3;\n\t\tout[0][1] += p[0] * p[1] / 3;\n\t\tout[0][2] += p[0] * p[2] / 3;\n\t\tout[1][0] += p[1] * p[0] / 3;\n\t\tout[1][1] += p[1] * p[1] / 3;\n\t\tout[1][2] += p[1] * p[2] / 3;\n\t\tout[2][0] += p[2] * p[0] / 3;\n\t\tout[2][1] += p[2] * p[1] / 3;\n\t\tout[2][2] += p[2] * p[2] / 3;\n\t\tj++;\n\t}\n\tj = 0;\n}\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/15", "prompt": "function splitLowerstring(text) {\n/**\n * * Write a function to split a string at lowercase letters.\n */", "entry_point": "splitLowerstring", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AbCd\";\nvar x0 = splitLowerstring(arg00);\nvar v0 = [\"bC\", \"d\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Python\";\nvar x1 = splitLowerstring(arg10);\nvar v1 = [\"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Programming\";\nvar x2 = splitLowerstring(arg20);\nvar v2 = [\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to split a string at lowercase letters.", "language": "javascript", "canonical_solution": "    return text.match(/[a-z][^a-z]*/g);\n}", "completion": ["\nconst lowercase = str => str.toLowerCase();\n/**\n * * Write a function to split a string at uppercase letters.\n */\nconst uppercase = str => str.toUpperCase();\n\n// * Write a function to get the length of a string.\nconst getLength = str => str.length;\n\n// * Write a function to get the first character of a string.\nconst getFirst = str => str[0];\n\n// * Write a function to split a string at any character.\nconst split = str => str.split('');\n\n// * Write a function to split a string at every first character.\nconst splitOnFirst = str => str.split('').filter(character => character === getFirst(str));\n\n// * Write a function to get a substring between two indices of a string.\nconst substring = (str, startIndex, endIndex) => str.substring(startIndex, endIndex);\n\n// * Write a function to convert a string to uppercase.\nconst toUpper = str => str.toUpperCase();\n\n// * Write a function to convert a string to lowercase.\nconst toLower = str => str.toLowerCase();\n\n// * Write a function to get the index of the first occurrence of a substring in a string.\nconst indexOfSubstring = (str, substring) => str.indexOf(substring);\n\n// * Write a function to get the last index of the last occurrence of a substring in a string.\nconst lastIndexOfSubstring = (str, substring) => str.lastIndexOf(substring);\n\n// * Write a ", "\n\n", "\n\nexports.word = function () {\n/**\n * * Split a string at lowercase letters.\n */\n\nreturn exports.split = function () {\n/**\n * * Split a string at lowercase letters.\n */\n\nreturn exports.split(' ');\n};\n\n/**\n * * Write a function to split a string at uppercase letters.\n */\n\nexports.capitalize = function () {\n/**\n * * Split a string at uppercase letters.\n */\n\nreturn exports.split = ", "\nconst writeLines = (text, onNewLine, lineLength) => {\n    let line;\n    const lines = text.split('\\n');\n    lines.forEach((line, index) => {\n        if (index > 0) {\n            onNewLine(lineLength);\n        }\n        if (line) {\n            line.split(' ').forEach(word => {\n                word.split('').forEach((character, index) => {\n                    if (index > 0) {\n                        onNewLine(lineLength);\n                    }\n                    onNewLine(lineLength);\n                });\n            });\n        }\n    });\n};\n\nmodule.exports = {\n    writeLines\n};<|endoftext|>", "\ntext = text || 'Hello World';\ntext = text.split(/[a-z]/g) || [];\n\n/**\n * * Write a function to split a string at uppercase letters.\n */\ntext = text || 'Hello World';\ntext = text.split(/[A-Z]/g) || [];\n\n/**\n * * Write a function to remove all spaces from a string.\n */\ntext = text || 'Hello World';\ntext = text.replace(/\\s+/g, '') || [];\n\n/**\n * * Write a function to remove the first word from a string.\n */\ntext = text || 'Hello World';\ntext = text.replace(/^\\s+|\\s+$/g, '') || [];\n\n/**\n * * Write a function to remove all punctuations from a string.\n */\ntext = text || 'Hello World';\ntext = text.replace(/[^\\w\\s-]/g, '') || [];\n\n/**\n * * Write a function to remove all capital letters from a string.\n */\ntext = text || 'Hello World';\ntext = text.replace(/[A-Z]/g, '') || [];\n\n/**\n * * Write a function to convert all letters to lower case.\n */\ntext = text || 'Hello World';\ntext = text.toLowerCase() || [];\n\n/**\n * * Write a function to convert all letters to uppercase.\n */\ntext = text || 'Hello World';\ntext = text.toUpperCase() || [];\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/16", "prompt": "function textLowercaseUnderscore(text) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n */", "entry_point": "textLowercaseUnderscore", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab_cbbbc\";\nvar x0 = textLowercaseUnderscore(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aab_Abbbc\";\nvar x1 = textLowercaseUnderscore(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Aaab_abbbc\";\nvar x2 = textLowercaseUnderscore(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find sequences of lowercase letters joined with an underscore.", "language": "javascript", "canonical_solution": "    const regex = /^[a-z]+_[a-z]+$/;\n    const matches = text.match(regex);\n    return matches ? 'Found a match!' : 'Not matched!';\n}", "completion": ["\ntext = text.toLowerCase();\ntext = text.replace(/[^a-z_0-9]/gi, '');\ntext = text.replace(/_+/gi, '_');\ntext = text.replace(/^_+|_+$/gi, '');\ntext = text.replace(/(.)(?=\\1)/gi, '$1');\ntext = text.replace(/(.)(?=\\1)/gi, '$1');\ntext = text.replace(/(^\\w|\\w$)/g, '');\ntext = text.replace(/(^\\w|\\w$)/g, '');\ntext = text.replace(/(^\\w|\\w$)/g, '');\ntext = text.replace(/(^\\w|\\w$)/g, '');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=\\w)/g, '$1');\ntext = text.replace(/(\\w)(?=", "\n} else if (\n    caseUnderscore(text) &&\n    caseUnderscore(text).length > 2 &&\n    caseUnderscore(text).length < 13 &&\n    caseUnderscore(text).length % 2 === 1\n) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n */\n} else if (\n    caseUnderscore(text) &&\n    caseUnderscore(text).length > 2 &&\n    caseUnderscore(text).length < 13 &&\n    caseUnderscore(text).length % 2 === 1\n) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n */\n} else if (\n    caseUnderscore(text) &&\n    caseUnderscore(text).length > 2 &&\n    caseUnderscore(text).length < 13 &&\n    caseUnderscore(text).length % 2 === 1\n) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n */\n} else if (\n    caseUnderscore(text) &&\n    caseUnderscore(text).length > 2 &&\n    caseUnderscore(text).length < 13 &&\n    caseUnderscore(text).length % 2 === 1\n) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n */\n} else if (\n    caseUnderscore(text) &&\n    caseUnderscore(text).length > 2 &&\n    caseUnderscore(text).length < 13 &&\n    caseUnderscore(text).length % 2 === 1\n) {\n/**\n * * Write a ", "\n```\n\n### Make your own Underscore\n\n####\n\nIf you already have a library that provides a custom way to find sequences of lowercase letters joined with an underscore (for example, `jQuery.fn.hash`), you can make your own Underscore.js.\n\nThe following is a sample of how to write a function to find sequences of lowercase letters joined with an underscore.\n\n```javascript\nvar _ = require('underscore');\n_.caseUnderscore(text);\n```\n\n####\n\nThe following is a sample of how to write a function to find sequences of lowercase letters joined with an underscore.\n\n```javascript\n", "\n\n/**\n * * A function to find sequences of lowercase letters joined with an underscore.\n *\n * @param {string} text\n * @return {string}\n */\n", "\ntext += '\\n';\ntext += '  // Match all lowercase and underscores as one class.\\n';\ntext += '  var _class = strings.words(' + text + ')';\ntext += '\\n';\ntext += '  // Match the underscore as the only class.\\n';\ntext += '  var _class2 = strings.class(_class)';\ntext += '\\n';\ntext += '  // Match any existing class from the beginning of the string.\\n';\ntext += '  var _class3 = strings.words(_class,'+ text + ')';\ntext += '\\n';\ntext += '  // Match any existing class from the end of the string.\\n';\ntext += '  var _class4 = strings.words(_class2,'+ text + ')';\ntext += '\\n';\ntext += '  // Match any existing class from the beginning of the string.\\n';\ntext += '  var _class5 = strings.words(_class3,'+ text + ')';\ntext += '\\n';\ntext += '  // Match any existing class from the end of the string.\\n';\ntext += '  var _class6 = strings.words(_class4,'+ text + ')';\ntext += '\\n';\ntext += '  // Match any existing class from the beginning of the string.\\n';\ntext += '  var _class7 = strings.words(_class5,'+ text + ')';\ntext += '\\n';\ntext += '  // Match any existing class from the end of the string.\\n';\ntext += '  var _class8 = strings.words(_class6,'+ text + ')';\ntext += '\\n';\ntext"]}
{"task_id": "MBJSP/17", "prompt": "function squarePerimeter(a) {\n/**\n * * Write a function to find the perimeter of a square.\n */", "entry_point": "squarePerimeter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = squarePerimeter(arg00);\nvar v0 = 40;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = squarePerimeter(arg10);\nvar v1 = 20;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squarePerimeter(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the perimeter of a square.", "language": "javascript", "canonical_solution": "  return a * 4;\n}", "completion": ["\nprint(\"Hello, world!\");\n/* */\n}\n```\n\n<br>\n\n## Print a function to find the perimeter of a square.\n\n```py\n# (!) Write a function to find the perimeter of a square.\n\ndef perimeter_of_square(side: float) -> float:\n    \"\"\"\n    :param side: side of square.\n    :return: perimeter of square.\n    \"\"\"\n    return side * 4\n\nprint(perimeter_of_square(3.0))\n```\n\n<br>\n\n## Print a function to find the perimeter of a square.\n\n```py\n# (!) Write a function to find the perimeter of a square.\n\ndef perimeter_of_square(side: float) -> float:\n    \"\"\"\n    :param side: side of square.\n    :return: perimeter of square.\n    \"\"\"\n    return side * 4\n\n# (!) Write a function to find the perimeter of a square.\n\ndef perimeter_of_square(side: float) -> float:\n    \"\"\"\n    :param side: side of square.\n    :return: perimeter of square.\n    \"\"\"\n    return side * 4\n\n# (!) Write a function to find the perimeter of a square.\n\ndef perimeter_of_square(side: float) -> float:\n    \"\"\"\n    :param side: side of square.\n    :return: perimeter of square.\n    \"\"\"\n    return side * 4\n\nprint(perimeter_of_square(3.0))\n```\n\n<br>\n\n## Define a function to find the perimeter of a square.\n\n```py\n# (!) Write a ", "\n\n// function squarePerimeter (side) {\n//   return 4 * side;\n// }\n\n// console.log('Perimeter of a square is ', squarePerimeter(4), '.');\n\n/**\n * * Write a function to find the perimeter of a circle.\n */\n\n// function circlePerimeter (radius) {\n//   return 2 * Math.PI * radius;\n// }\n\n// console.log('Perimeter of a circle is ', circlePerimeter(5), '.');\n\n/**\n * * Write a function to find the area of a triangle.\n */\n\n// function triangleArea (base, height) {\n//   return 0.5 * base * height;\n// }\n\n// console.log('Area of a triangle is ', triangleArea(3, 4), '.');\n\n/**\n * * Write a function to find the area of a rectangle.\n */\n\n// function rectangleArea (width, height) {\n//   return width * height;\n// }\n\n// console.log('Area of a rectangle is ', rectangleArea(4, 5), '.');\n\n/**\n * * Write a function to find the area of a circle.\n */\n\n// function circleArea (radius) {\n//   return Math.PI * radius * radius;\n// }\n\n// console.log('Area of a circle is ', circleArea(5), '.');\n\n/**\n * * Write a function to find the perimeter of a triangle.\n */\n\n// function trianglePerimeter (base, height) {\n//   return (base + height) * 2;\n// }\n\n// console.log('Perimeter of a triangle is ', trianglePerimeter(3, 4), '.');\n\n/**\n * * Write a ", "\n", "\n", "\n"]}
{"task_id": "MBJSP/18", "prompt": "function removeDirtyChars(string, secondstring) {\n/**\n * * Write a function to remove characters from the first string which are present in the second string.\n */", "entry_point": "removeDirtyChars", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"probasscurve\";\nvar arg01 = \"pros\";\nvar x0 = removeDirtyChars(arg00, arg01);\nvar v0 = \"bacuve\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"digitalindia\";\nvar arg11 = \"talent\";\nvar x1 = removeDirtyChars(arg10, arg11);\nvar v1 = \"digiidi\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"exoticmiles\";\nvar arg21 = \"toxic\";\nvar x2 = removeDirtyChars(arg20, arg21);\nvar v2 = \"emles\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove characters from the first string which are present in the second string.", "language": "javascript", "canonical_solution": "  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (secondString.indexOf(string[i]) === -1) {\n      result += string[i];\n    }\n  }\n  return result;\n}", "completion": ["\nconst toBeRemovedChars = (text, chars) => {\n    const regex = new RegExp(chars.join('|'), 'g');\n    return text.replace(regex, '');\n};\n\n/**\n * * Convert backslashes to slashes.\n */\nconst backslashConversion = (text) => {\n    return text.replace(/\\\\/g, '/');\n};\n\n/**\n * * Convert backslashes to slashes.\n */\nconst backslashConversionBack = (text) => {\n    return text.replace(/\\\\/g, '\\\\');\n};\n\n/**\n * * Convert backslashes to slashes.\n */\nconst backslashConversionBackslash = (text) => {\n    return text.replace(/\\\\/g, '\\\\\\\\');\n};\n\n/**\n * * Convert backslashes to slashes.\n */\nconst backslashConversionForwardSlash = (text) => {\n    return text.replace(/\\\\/g, '\\\\/');\n};\n\n/**\n * * Write a function to remove characters from the first string which are present in the second string.\n */\nconst toBeRemovedCharsBack = (text, chars) => {\n    const regex = new RegExp(chars.join('|'), 'g');\n    return text.replace(regex, '');\n};\n\n/**\n * * Write a function to remove characters from the first string which are present in the second string.\n */\nconst toBeRemovedCharsBackslash = (text, chars) => {\n    const regex = new RegExp(chars.join('|'), 'g');\n    return text.replace(regex, '');\n};\n\n/**\n * * Write a ", "\nconst removeChars = (character, secondString) => {\n    const result = secondString.replace(character, '');\n    return result;\n};\n\n/**\n * * Take a string and return a list of all the words in the string.\n */\nconst words = (string) => {\n    let result = [];\n    const split = string.split('');\n    for (let i = 0; i < split.length; i++) {\n        if (split[i].match(/^[a-zA-Z\\s]*$/)) {\n            result.push(split[i]);\n        }\n    }\n    return result;\n};\n\n/**\n * * Take a string and return a list of all the vowels in the string.\n */\nconst vowels = (string) => {\n    const result = [];\n    const split = string.split('');\n    for (let i = 0; i < split.length; i++) {\n        if (split[i].match(/^[aeiouAEIOU]*$/)) {\n            result.push(split[i]);\n        }\n    }\n    return result;\n};\n\n/**\n * * Take a string and return a list of all the consonants in the string.\n */\nconst consonants = (string) => {\n    const result = [];\n    const split = string.split('');\n    for (let i = 0; i < split.length; i++) {\n        if (split[i].match(/^[bcdfghjklmnpqrstvwxzBCDFGHJKLMNPQRSTVWXZ]+$/)) {\n            result.push(split[i]);\n        }\n    ", "\n  return string.split('').filter(ch => {\n    return secondstring.indexOf(ch) == -1;\n  });\n}\n<|endoftext|>", "\n\treturn string.split(secondstring).join('');\n}\n\n/**\n * * Remove characters from the first string which are present in the second string.\n */\n", "\nreturn string.split('').filter("]}
{"task_id": "MBJSP/19", "prompt": "function testDuplicate(arraynums) {\n/**\n * * Write a function to find whether a given array of integers contains any duplicate element.\n */", "entry_point": "testDuplicate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar x0 = testDuplicate(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 4];\nvar x1 = testDuplicate(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2, 2, 3, 3, 4, 4, 5];\nvar x2 = testDuplicate(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find whether a given array of integers contains any duplicate element.", "language": "javascript", "canonical_solution": "  let hash = {};\n  for (let i = 0; i < arraynums.length; i++) {\n    if (hash[arraynums[i]]) {\n      return true;\n    } else {\n      hash[arraynums[i]] = true;\n    }\n  }\n  return false;\n}", "completion": ["\n} else {\n//end the if-else block\n}\n\n/**\n * * Given an array of numbers, find if the array contains any duplicates.\n * * Write a function to find if the array contains any duplicates.\n */\n", "\nfor (var i = 0; i < arraynums.length; i++) {\nif (arraynums[i]!== arraynums[arraynums[i]]) {\nreturn false;\n}\n}\nreturn true;\n}\n},\n{\n/* * Write a function to find whether a given array of integers contains any duplicate element.\n */\nname: 'Contains Duplicate Element',\ninputType: 'array',\narray: [ 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5 ],\ncheck: function (arraynums) {\nreturn arraynums.some(", "\n    ", "\n\n      ", "\n/**\n * * Write a function to remove the duplicate elements from a given array of integers.\n */\n/**\n * * Write a function to find whether a given array of integers contains all distinct elements.\n */\n/**\n * * Write a function to remove all the duplicates from a given array of integers.\n */\n\n/**\n * * Write a function to remove all elements from an array of integers, where the value is not divisible by a given integer.\n */\n/**\n * * Write a function to find the first index of an element in an array of integers.\n */\n/**\n * * Write a function to find the first index of a given string, if no given string is present, return -1.\n */\n/**\n * * Write a function to find the first index of an element in a given array of strings.\n */\n/**\n * * Write a function to replace all the characters of a given string with the given character.\n */\n/**\n * * Write a function to remove the given character from a given string.\n */\n/**\n * * Write a function to find whether a given integer array contains any prime element.\n */\n/**\n * * Write a function to find whether a given integer array contains all prime elements.\n */\n\n/**\n * * Write a function to sort a given array of integers in non-decreasing order.\n */\n/**\n * * Write a function to find the smallest element in a given array of integers.\n */\n/**\n * * Write a function to find the largest element in a given array of integers.\n */\n/**\n * * Write a function to find the smallest and largest elements in a given array of integers.\n */\n/**\n * * Write a function to find the smallest element in a given array of non-negative integers.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/20", "prompt": "function isWoodall(x) {\n/**\n * * Write a function to check if the given number is woodball or not.\n */", "entry_point": "isWoodall", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 383;\nvar x0 = isWoodall(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 254;\nvar x1 = isWoodall(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 200;\nvar x2 = isWoodall(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if the given number is woodball or not.", "language": "javascript", "canonical_solution": "    return x % 10 === 3 || x % 10 === 7;\n}", "completion": ["\n", "\n", "\n", "\n\n", "\nvar isWoodball = function isWoodball(x) {\n    if (typeof x!== 'number' || x < 0) {\n        return false;\n    }\n    return x!== x;\n};\n\n/**\n * * Write a function to check if the given number is boom or not.\n */\nvar isBoom = function isBoom(x) {\n    if (typeof x!== 'number' || x < 0) {\n        return false;\n    }\n    return x!== x;\n};\n\n/**\n * * Write a function to check if the given number is grater than zero or not.\n */\nvar isGraterThanZero = function isGraterThanZero(x) {\n    if (typeof x!== 'number') {\n        return false;\n    }\n    return x > 0;\n};\n\n/**\n * * Write a function to check if the given number is negative or not.\n */\nvar isNegative = function isNegative(x) {\n    if (typeof x!== 'number') {\n        return false;\n    }\n    return x < 0;\n};\n\n/**\n * * Write a function to check if the given number is not zero or not.\n */\nvar isNotZero = function isNotZero(x) {\n    if (typeof x!== 'number') {\n        return false;\n    }\n    return x!== 0;\n};\n\n/**\n * * Write a function to check if the given number is not negative or not.\n */\nvar isNotNegative = "]}
{"task_id": "MBJSP/21", "prompt": "function multiplesOfNum(m, n) {\n/**\n * * Write a function to find m number of multiples of n.\n */", "entry_point": "multiplesOfNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = multiplesOfNum(arg00, arg01);\nvar v0 = [3, 6, 9, 12];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 5;\nvar x1 = multiplesOfNum(arg10, arg11);\nvar v1 = [5, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 2;\nvar x2 = multiplesOfNum(arg20, arg21);\nvar v2 = [2, 4, 6, 8, 10, 12, 14, 16, 18];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find m number of multiples of n.", "language": "javascript", "canonical_solution": "  let arr = [];\n  for (let i = 1; i <= m; i++) {\n    arr.push(i * n);\n  }\n  return arr;\n}", "completion": ["\n", "\n", "\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a function to find n number of multiples of m.\n */\n\n/**\n * * Write a function to find m number of multiples of n.\n */\n\n/**\n * * Write a ", "\n\n// Write a function to find m number of multiples of n.\n\n}\n```\n\n</div>\n\n\n\n<div class=\"well\">\n\n## 11. Look for a Pattern\n\n<div class=\"row\">\n<div class=\"col-md-8\">\n<p>\nWe're going to write a function that takes in a pattern and a string, and returns the string if the pattern is found in the string.\n</p>\n\n``` python\n\nimport re\n\ndef pattern_match(pattern, string):\n\n```\n\n</div>\n\n<div class=\"col-md-4\">\n<p>\nTo write the function, we need to create a set of all the characters in the string.\n</p>\n\n``` python\n\ndef pattern_match(pattern, string):\n\n    chars = set(string)\n    if re.search(pattern, string):\n        return string\n    else:\n        return False\n\n```\n\n</div>\n\n</div>\n\n<p>\nThe pattern_match function returns the string if the pattern is found in the string.\n</p>\n\n``` python\n\nif pattern_match('c', 'abdcabdabcdabdc'):\n    print 'Pattern was found.'\nelse:\n    print 'Pattern was not found.'\n\n```\n\n</div>\n\n\n<div class=\"well\">\n\n## 12. Write a Function to Replace Characters in a String\n\n<div class=\"row\">\n<div class=\"col-md-8\">\n<p>\nTo write a ", "\n\n// Regex to find all multiples of a number\nconst pattern = /(\\d+)\\ *\\ *(.*)/;\nconst words = [];\n\n// For each number that is being multiplied,\n// split the string in a list of numbers and words.\nfor (const number of numbers) {\n  const result = number.split(\"\");\n\n  // Add the last word to the array of words.\n  words.push(result.slice(-1)[0]);\n}\n\n/**\n * * Write a function to return the number of words in a sentence.\n */\n\n// Convert an array of words to a string.\nconst wordsString = words.join(\" \");\n\n// Regex to find the number of words in a sentence.\nconst pattern = /[\\s\\S]*\\d+[\\s\\S]*/g;\nconst matches = pattern.exec(wordsString);\n\n/**\n * * Write a function to return the number of words in a sentence.\n */\n\n// Convert an array of words to a string.\nconst wordsString = words.join(\" \");\n\n// Regex to find the number of words in a sentence.\nconst pattern = /[\\s\\S]*\\d+[\\s\\S]*/g;\nconst matches = pattern.exec(wordsString);\n\n/**\n * * Write a function to find the number of words in a sentence.\n */\n\n// Convert an array of words to a string.\nconst wordsString = words.join(\" \");\n\n// Regex to find the number of words in a sentence.\nconst pattern = /[\\s\\S]*\\d+[\\s\\S]*/g;\nconst matches = pattern.exec(wordsString);\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/22", "prompt": "function findFirstDuplicate(nums) {\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */", "entry_point": "findFirstDuplicate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 4, 5];\nvar x0 = findFirstDuplicate(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar x1 = findFirstDuplicate(arg10);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2, 3, 3, 2, 2];\nvar x2 = findFirstDuplicate(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the first duplicate element in a given array of integers.", "language": "javascript", "canonical_solution": "  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (seen[nums[i]]) {\n      return nums[i];\n    }\n    seen[nums[i]] = true;\n  }\n  return -1;\n}", "completion": ["\n\n\n/**\n * * Write a function to find the last duplicate element in a given array of integers.\n */\n\n\n/**\n * * Write a function to find the shortest unique element in a given array of integers.\n */\n\n\n/**\n * * Write a function to find all duplicate elements in a given array of integers.\n */\n\n\n/**\n * * Write a ", "\n", "\nlet findFirstDuplicate = ", "\nfor (let i = 0; i < nums.length; i++) {\nfor (let j = i + 1; j < nums.length; j++) {\nif (nums[i] === nums[j]) return nums[i];\n}\n}\nreturn nums[0];\n}\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n * * Write a function to find the first duplicate element in a given array of integers.\n */\nfor (let i = 0; i < nums.length; i++) {\nfor (let j = i + 1; j < nums.length; j++) {\nif (nums[i] === nums[j]) return nums[i];\n}\n}\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n */\nfor (let i = 0; i < nums.length; i++) {\nfor (let j = i + 1; j < nums.length; j++) {\nif (nums[i] === nums[j]) return nums[i];\n}\n}\n\n/**\n * Write a function to find the first duplicate element in a given array of integers.\n */\nfor (let i = 0; i < nums.length; i++) {\nfor (let j = i + 1; j < nums.length; j++) {\nif (nums[i] === nums[j]) return nums[i];\n}\n}\n\n/**\n * Write a ", "\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a function to find the first duplicate element in a given array of integers.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/23", "prompt": "function maximumSum(list1) {\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */", "entry_point": "maximumSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nvar x0 = maximumSum(arg00);\nvar v0 = 33;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[0, 1, 1], [1, 1, 2], [3, 2, 1]];\nvar x1 = maximumSum(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]];\nvar x2 = maximumSum(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the maximum sum of elements of list in a list of lists.", "language": "javascript", "canonical_solution": "  let maxSum = 0;\n  let tempSum = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      tempSum += list1[i][j];\n    }\n    if (tempSum > maxSum) {\n      maxSum = tempSum;\n    }\n    tempSum = 0;\n  }\n  return maxSum;\n}", "completion": ["\n\n", "\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n/**\n * * Write a JavaScript ", "\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript ", "\n\n", "\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript function to find the maximum sum of elements of list in a list of lists.\n */\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/24", "prompt": "function binaryToDecimal(binary) {\n/**\n * * Write a function to convert the given binary number to its decimal equivalent.\n */", "entry_point": "binaryToDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 100;\nvar x0 = binaryToDecimal(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1011;\nvar x1 = binaryToDecimal(arg10);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1101101;\nvar x2 = binaryToDecimal(arg20);\nvar v2 = 109;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert the given binary number to its decimal equivalent.", "language": "javascript", "canonical_solution": "  return parseInt(binary, 2);\n}", "completion": ["\nexports.toDecimal = (binary) => {\n    var binaryDecimal = 0;\n    var binaryLength = binary.length;\n    var i = binaryLength - 1;\n    while (i >= 0) {\n        binaryDecimal = binaryDecimal + Math.pow(2, i) * binary.charCodeAt(i);\n        i = i - 1;\n    }\n    return binaryDecimal;\n};\n\n/**\n * Write a ", "\n", "\nvar write_func = function write_func(func, num) {\nif (num < 0) {\nreturn \"-\" + write_func(-num);\n}\nvar base = 64;\nvar code = func.charCodeAt(0);\nif (code >= 0x80) {\nbase = 16;\n}\nvar digits = [];\nfor (var i = num < 0? -num : num; i > 0; i /= base) {\ndigits.push(num % base);\nnum = Math.floor(num / base);\n}\nif (num) digits.push(num);\nfor (var i = 0; i < digits.length; i++) {\ncode = digits[i] + 48;\n}\nreturn code + string_fromCharCode(code);\n}\nvar write = ", "\nexport const writeDecimal = function (binary: string, accumulator: number): void {\n    if (binary.length < accumulator.toString().length) {\n        binary = Binary.padLeft(binary, accumulator.toString().length);\n    }\n    binary.split('').forEach(", "\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n\n/**\n * Write a function to convert the given binary number to its decimal equivalent.\n * @param {!number} binary\n * @returns {!number}\n */\n\n\n/**\n * Write a "]}
{"task_id": "MBJSP/25", "prompt": "function findProduct(arr, n) {\n/**\n * * Write a JavaScript function to find the product of non-repeated elements in a given array.\n */", "entry_point": "findProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3];\nvar arg01 = 4;\nvar x0 = findProduct(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 1];\nvar arg11 = 5;\nvar x1 = findProduct(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 4, 5, 6];\nvar arg21 = 5;\nvar x2 = findProduct(arg20, arg21);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the product of non-repeated elements in a given array.", "language": "javascript", "canonical_solution": "  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i]) === arr.lastIndexOf(arr[i])) {\n      product *= arr[i];\n    }\n  }\n  return product;\n}", "completion": ["\n\n    var func = ", "\n\n", "\n\nconst prod = (arr, n) => {\n  arr.forEach((a, i) => {\n    if (arr.indexOf(a) === i) {\n      arr[i] = null;\n    }\n  });\n  return arr.reduce((total, a) => total * a, 1);\n};\n\nconst prod2 = (arr, n) => {\n  arr.forEach((a, i) => {\n    if (arr.indexOf(a) === i) {\n      arr[i] = null;\n    }\n  });\n  return arr.reduce((total, a) => total * a, 1);\n};\n\nconst prod3 = (arr, n) => {\n  let p = 1;\n  arr.forEach((a, i) => {\n    if (arr.indexOf(a) === i) {\n      arr[i] = null;\n    }\n  });\n  return arr.reduce((total, a) => total * a, p);\n};\n\nconst prod4 = (arr, n) => {\n  const ans = arr.reduce((total, a) => total * a, 1);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = null;\n  }\n  return ans;\n};\n\n// run the tests\nconst test = ", "\n\n// Step 1\n\n// Step 2\n// Step 3\n// Step 4\n// Step 5\n// Step 6\n// Step 7\n// Step 8\n// Step 9\n// Step 10\n// Step 11\n// Step 12\n// Step 13\n// Step 14\n// Step 15\n// Step 16\n// Step 17\n// Step 18\n// Step 19\n// Step 20\n// Step 21\n// Step 22\n// Step 23\n// Step 24\n// Step 25\n// Step 26\n// Step 27\n// Step 28\n// Step 29\n// Step 30\n// Step 31\n// Step 32\n// Step 33\n// Step 34\n// Step 35\n// Step 36\n// Step 37\n// Step 38\n// Step 39\n// Step 40\n// Step 41\n// Step 42\n// Step 43\n// Step 44\n// Step 45\n// Step 46\n// Step 47\n// Step 48\n// Step 49\n// Step 50\n// Step 51\n// Step 52\n// Step 53\n// Step 54\n// Step 55\n// Step 56\n// Step 57\n// Step 58\n// Step 59\n// Step 60\n// Step 61\n// Step 62\n// Step 63\n// Step 64\n// Step 65\n// Step 66\n// Step 67\n// Step 68\n// Step 69\n// Step 70\n// Step 71\n// Step 72\n// Step 73\n// Step 74\n// Step 75\n// Step 76\n// Step 77\n// Step 78\n// Step 79\n// Step 80\n// Step 81\n// Step 82\n// Step 83\n// Step 84\n// Step 85\n// Step 86\n// Step 87\n// Step 88\n// Step 89\n// Step 90\n// Step 91\n// Step 92\n// Step 93\n// Step 94\n// Step 95\n// Step 96\n// Step 97\n// Step 98\n// Step 99\n//", "\narr = [1, 3, 5, 2, 3, 3, 2, 5, 3, 4];\nvar prod = _.prod(arr, n);\nreturn prod;\n```\n\n</div>\n\n</div>\n</div>\n\n<div class=\"jb_cell\">\n\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>To ensure that the product is non-negative, we need to ensure that the product of each non-repeated element is strictly positive. The largest product we can hope to get for a given length is $$\\frac{n \\cdot n-1}{n-1}$$, which is smaller than $$n^n$$. We can check this for various values of $n$:</p>\n\n</div>\n</div>\n</div>\n\n<div class=\"jb_cell tag_hide_input\">\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"c1\"># HIDDEN</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The product of the first two non-repeated elements of an array of length </span><span class=\"si\">{}</span><"]}
{"task_id": "MBJSP/26", "prompt": "function checkKElements(testlist, k) {\n/**\n * * Write a function to check if the given tuple list has all k elements.\n */", "entry_point": "checkKElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]];\nvar arg01 = 4;\nvar x0 = checkKElements(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 7, 7], [7, 7]];\nvar arg11 = 7;\nvar x1 = checkKElements(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[9, 9], [9, 9, 9, 9]];\nvar arg21 = 7;\nvar x2 = checkKElements(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if the given tuple list has all k elements.", "language": "javascript", "canonical_solution": "  const list = testList.flat();\n  let check = true;\n  list.forEach(element => {\n    if (element !== k) {\n      check = false;\n    }\n  });\n  return check;\n}", "completion": ["\n", "\n\nconst all_in_k = (list, k) => {\n    return list.filter((item, index) => index < k).length === k;\n}\n\n/**\n * * Return a function that can be called to validate the given input\n * * * *\n * * @param type - The type of the input.\n * * @param values - The values to be used to validate the input.\n * * @param validator - The validator function.\n * * @param schema - The schema for the type.\n * * @returns {", "\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This function returns the count of all k-tuples in the given list.\n */\n\n//parameter(s)\n\n//type(s)\n\n/**\n * * This ", "\n", "\n"]}
{"task_id": "MBJSP/27", "prompt": "function remove(list) {\n/**\n * * Write a JavaScript function to remove all digits from a list of strings.\n */", "entry_point": "remove", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"4words\", \"3letters\", \"4digits\"];\nvar x0 = remove(arg00);\nvar v0 = [\"words\", \"letters\", \"digits\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"28Jan\", \"12Jan\", \"11Jan\"];\nvar x1 = remove(arg10);\nvar v1 = [\"Jan\", \"Jan\", \"Jan\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"wonder1\", \"wonder2\", \"wonder3\"];\nvar x2 = remove(arg20);\nvar v2 = [\"wonder\", \"wonder\", \"wonder\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to remove all digits from a list of strings.", "language": "javascript", "canonical_solution": "    return list.map(x => x.replace(/\\d/g, ''));\n}", "completion": ["\n$(document).ready(", "\nconst writeJSFunction = (data, value) => {\n  const jsFunction = `", "\n/**\n * * Extract a set of strings from a list of strings.\n */\n/**\n * * Count the number of strings in a list of strings.\n */\n/**\n * * Create a list of strings from a list of words.\n */\n/**\n * * Create a list of strings from a list of words.\n */\n/**\n * * Return a random string from a list of strings.\n */\n/**\n * * Write a JavaScript function to remove all digits from a list of strings.\n */\n/**\n * * Extract a set of strings from a list of strings.\n */\n/**\n * * Count the number of strings in a list of strings.\n */\n/**\n * * Create a list of strings from a list of words.\n */\n/**\n * * Create a list of strings from a list of words.\n */\n/**\n * * Return a random string from a list of strings.\n */\n/**\n * * Write a JavaScript function to remove all digits from a list of strings.\n */\n/**\n * * Extract a set of strings from a list of strings.\n */\n/**\n * * Count the number of strings in a list of strings.\n */\n/**\n * * Create a list of strings from a list of words.\n */\n/**\n * * Create a list of strings from a list of words.\n */\n/**\n * * Return a random string from a list of strings.\n */\n/**\n * * Write a JavaScript ", "\nvar removeDigits = (", "\n\n"]}
{"task_id": "MBJSP/28", "prompt": "function binomialCoeff(n, k) {\n/**\n * * Write a JavaScript function to find binomial co-efficient.\n */", "entry_point": "binomialCoeff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 2;\nvar x0 = binomialCoeff(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 3;\nvar x1 = binomialCoeff(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 2;\nvar x2 = binomialCoeff(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find binomial co-efficient.", "language": "javascript", "canonical_solution": "  if (k === 0 || k === n) {\n    return 1;\n  }\n  return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k);\n}", "completion": ["\nconst binomial_coefficient = (n, k) => {\n    if (k > n || k < 0) return 0;\n    if (k === 0 || k === n) return 1;\n    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);\n};\n\nconsole.log(binomial_coefficient(10, 3));\n// Result: 3628800\n```\n\nA more interesting question is: What is the value of the smallest number of coins you need to pay for two ten-dollar bills?\n\nIn the above example, `binomial_coefficient` returns 3628800 as the value of the smallest number of coins. Now, if we want to pay ten dollar bills with `binomial_coefficient`, we will have to pay at least $10\\frac{1}{2}$. What is the smallest number of coins we need to pay for two ten-dollar bills?\n\nHere is the [answer](https://en.wikipedia.org/wiki/Binomial_coefficient) to the above question:\n\n```js\n", "\n", "\nn, k;\nconst b = [\n0,\n1,\n1,\n2,\n2,\n4,\n4,\n8,\n8,\n16,\n16,\n32,\n32,\n64,\n64,\n128,\n128,\n256,\n256,\n512,\n512,\n1024,\n1024,\n2048,\n2048,\n4096,\n4096,\n8192,\n8192,\n16384,\n16384,\n32768,\n32768,\n65536,\n65536,\n131072,\n131072,\n262144,\n262144,\n524288,\n524288,\n1048576,\n1048576,\n2097152,\n2097152,\n4194304,\n4194304,\n8388608,\n8388608,\n16777216,\n16777216,\n33554432,\n33554432,\n67108864,\n67108864,\n134217728,\n134217728,\n268435456,\n268435456,\n536870912,\n536870912,\n1073741824,\n1073741824,\n2147483648,\n2147483648,\n4294967296,\n4294967296,\n8589934592,\n8589934592,\n17179869184,\n17179869184,\n34359738368,\n34359738368,\n68719476736,\n68719476736,\n137438953472,\n137438953472,\n274877906944,\n274877906944,\n549755813888,\n549", "\nvar writeBinomialCoeff = function(n, k) {\n    return Math.round((pow(n, k) * pow(k, n - k)) / Math.factorial(n - k));\n};\n\n/**\n * * Write a JavaScript function to find n-th Bell number.\n */\nvar writeBellNum = function(n) {\n    return Math.round(factorial(n) / (factorial(n - 1) * factorial(1)));\n};\n\n/**\n * * Write a JavaScript function to compute the first n-th Bernoulli numbers.\n */\nvar writeBernoulli = function(n) {\n    var sum = 0;\n    for (var i = 0; i <= n; ++i) {\n        sum += Math.round((-1) * (i - 1) * i / Math.pow(2, i) / Math.factorial(i));\n    }\n    return sum;\n};\n\n/**\n * * Write a JavaScript function to compute the first n-th Catalan numbers.\n */\nvar writeCatalan = function(n) {\n    var sum = 0;\n    for (var i = 0; i <= n; ++i) {\n        sum += Math.round((i + 1) * (n - i) / Math.factorial(i + 1));\n    }\n    return sum;\n};\n\n/**\n * * Write a JavaScript function to compute the first n-th Bell number of the first kind.\n */\nvar writeBellNumOfKind = ", "\n"]}
{"task_id": "MBJSP/29", "prompt": "function getOddOccurrence(arr, arrsize) {\n/**\n * * Write a JavaScript function to find the element occurring odd number of times.\n */", "entry_point": "getOddOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 2, 3, 1];\nvar arg01 = 7;\nvar x0 = getOddOccurrence(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 2, 3, 1, 3];\nvar arg11 = 7;\nvar x1 = getOddOccurrence(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2];\nvar arg21 = 13;\nvar x2 = getOddOccurrence(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the element occurring odd number of times.", "language": "javascript", "canonical_solution": "    let obj = {};\n    for (let i = 0; i < arrSize; i++) {\n        if (obj[arr[i]]) {\n            obj[arr[i]] += 1;\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    for (let key in obj) {\n        if (obj[key] % 2 !== 0) {\n            return Number(key);\n        }\n    }\n}", "completion": ["\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring even number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring odd number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring even number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring odd number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring even number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring odd number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring even number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring odd number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript function to find the element occurring even number of times.\n */\nreturn 0;\n}\n/**\n * ddOccurrence(arr, arrsize) {\n * * Write a JavaScript ", "\n}\n/**\n * * Write a JavaScript ", "\n/**\n * @param {Array<Object>} arr The array to search.\n * @param {number} arrsize The size of the array to search.\n * @return {number} The number of elements in the array that have an odd occurrence.\n */\nvar ddOccurrenceOdd = function ddOccurrenceOdd(arr, arrsize) {\n/**\n * * Write a JavaScript function to find the element occurring even number of times.\n */\n/**\n * @param {Array<Object>} arr The array to search.\n * @param {number} arrsize The size of the array to search.\n * @return {number} The number of elements in the array that have an even occurrence.\n */\nvar ddOccurrenceEven = function ddOccurrenceEven(arr, arrsize) {\n/**\n * * Write a JavaScript function to find the index of the element that occurs the maximum number of times.\n */\n/**\n * @param {Array<Object>} arr The array to search.\n * @param {number} arrsize The size of the array to search.\n * @return {number} The index of the element that occurs the maximum number of times, or -1 if the array has no elements that occur the maximum number of times.\n */\nvar ddMaxOccurrence = function ddMaxOccurrence(arr, arrsize) {\n/**\n * * Write a JavaScript ", "\n\nvar arr = $.toArray(arr);\nvar length = arr.length;\nvar last = arr[length - 1];\nvar lastIndex = length - 1;\nvar index = 0;\nvar result;\n\n", "\narr[0] = function (arr, arrsize) {\n  var x = -1;\n  arr[0] = function () {\n    x = 0;\n  };\n  return x;\n};\nreturn arr;\n}\n\n/**\n * * Write a JavaScript function to find the element occurring even number of times.\n */\n"]}
{"task_id": "MBJSP/30", "prompt": "function countSubstringWithEqualEnds(s) {\n/**\n * * Write a JavaScript function to count all the substrings starting and ending with same characters.\n */", "entry_point": "countSubstringWithEqualEnds", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = countSubstringWithEqualEnds(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar x1 = countSubstringWithEqualEnds(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = countSubstringWithEqualEnds(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count all the substrings starting and ending with same characters.", "language": "javascript", "canonical_solution": "  let count = 0;\n  let count1 = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        count++;\n      }\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i + 1]) {\n      count1++;\n    }\n  }\n  return count + count1;\n}", "completion": ["\n\nreturn s.split('').reduce((p, c) => p + c.length, 0) + s.length;\n}\n\nconsole.log(count_string_with_equal_ends('a'));\n\n\n// Write a JavaScript function to count all the substrings starting and ending with same characters and length.\n\n// Function to count all the substrings starting and ending with same characters and length.\n// Parameters\n// String s\n// Returns: integer\n// * Write a JavaScript function to count all the substrings starting and ending with same characters and length.\n// Parameters\n// String s\n// Returns: integer\n", "\n    if (s.length < 3) {\n        return 0;\n    }\n    let first = s[0], last = s[s.length - 1];\n    if (first === last) {\n        return Math.floor((s.length - 2) / 2);\n    }\n    let count = 0;\n    for (let i = 1; i < s.length - 1; i++) {\n        if (s[i] === first && s[i + 1] === last) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/**\n * * Write a JavaScript function that counts the number of times that a substring appears in a string.\n */\n\n/**\n * * Write a JavaScript function that takes a string and a substring and returns the number of times that substring appears in a string.\n */\n\n/**\n * * Write a JavaScript function to count the number of times that a substring appears in a string, but only if there are no adjacent substring.\n */\n\n/**\n * * Write a JavaScript function that counts the number of times that a substring appears in a string, but only if there are no adjacent substring.\n */\n\n/**\n * * Write a JavaScript function that returns the number of times that a substring appears in a string, but only if there are no adjacent substring.\n */\n\n/**\n * * Write a JavaScript function that returns the number of times that a substring appears in a string, but only if there are no adjacent substring.\n */\n\n/**\n * * Write a JavaScript function that returns the number of times that a substring appears in a string, but only if there are no adjacent substring.\n */\n\n/**\n * * Write a JavaScript ", "\n  if (typeof s!=='string') return console.log(s);\n  var start = s.substring(0, 1);\n  var end = s.substring(s.length - 1);\n  var a = new RegExp(start, \"g\");\n  var b = new RegExp(end, \"g\");\n  var c = s.split('');\n  var count = 0;\n  for (var i = 0; i < c.length; i++) {\n    if (a.test(c[i]) && b.test(c[i])) count++;\n  }\n  return count;\n}\n\nexports.stringWithEqualEnds = stringWithEqualEnds;\n<|endoftext|>", "\n\n  return s.split('.').map(s => s.replace(/\\d/g, '')).reduce(\n    (count, substring) => count + substring.split('.').length, 0);\n}\n\n// ", "\nconst compare = (compare: (s: string) => number, str: string, count: number) => {\n  let index = 0;\n  let c = compare(str);\n  let i = 0;\n  while (index < str.length) {\n    if (c === 0) {\n      index++;\n    } else {\n      c--;\n    }\n    i++;\n    index++;\n    if (i === count) {\n      return index;\n    }\n    c = compare(str);\n  }\n  return index;\n};\nconst longest = (longest: (s: string) => number, str: string) => {\n  let index = 0;\n  let c = longest(str);\n  while (index < str.length) {\n    if (c === 0) {\n      index++;\n    } else {\n      c--;\n    }\n    index++;\n    if (c < 0) {\n      return index;\n    }\n  }\n  return index;\n};\nconst firstUnique = (firstUnique: (s: string) => string, str: string) => {\n  let index = 0;\n  let c = firstUnique(str);\n  while (index < str.length) {\n    if (c === str[index]) {\n      c = firstUnique(str);\n      index++;\n    } else {\n      c = firstUnique(str);\n    }\n    index++;\n    if (c === str[index]) {\n      return index;\n    }\n  }\n  return index;\n};\nconst findFirstSubstring = (findFirstSubstring: (s: string) => string, str: string) => {\n  let index = 0;\n  let c = find"]}
{"task_id": "MBJSP/31", "prompt": "function func(nums, k) {\n/**\n * * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n */", "entry_point": "func", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg01 = 3;\nvar x0 = func(arg00, arg01);\nvar v0 = [5, 7, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg11 = 1;\nvar x1 = func(arg10, arg11);\nvar v1 = [1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]];\nvar arg21 = 5;\nvar x2 = func(arg20, arg21);\nvar v2 = [6, 5, 7, 8, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "language": "javascript", "canonical_solution": "  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n\n  const pq = new PriorityQueue();\n  for (let [key, value] of map) {\n    pq.enqueue(value, key);\n  }\n\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(pq.dequeue());\n  }\n\n  return result;\n}", "completion": ["\n\n", "\nconst kFrequent = (nums, k) => {\n    const numFreqMap = new Map();\n    const numFreqMapKeys = [];\n\n    let heap = new Heap(\n        (a, b) => b.frequency - a.frequency\n    );\n\n    let numFreqMapKeysLen = 0;\n\n    // Write your code here.\n\n    return {\n        nums: nums,\n        numsLen: nums.length,\n        numsMapKeys: numFreqMapKeys,\n        k: k,\n        numsMapKeysLen: numFreqMapKeysLen,\n    };\n};\n```\n\nThe heap in the above example is a min heap with comparator `-a.frequency`. The map's value is a `HeapNode`, which holds a `number` and a `frequency`. The heap node contains a `number` which is the key in the map. The frequency of a heap node is the number of times a number occurred in the given lists of sorted and distinct integers. The heap node also contains a `frequency` which is the frequency of the node's `number`. The `number` is the key in the map.\n\nNow you have to sort the map's values (`HeapNode`s) and output the `k` most frequent numbers.\n\nThe last step is to sort the map's values (`HeapNode`s) and output the `k` most frequent numbers.\n\nIf `k` is less than the number of `HeapNode`s in the map, then `k` is equal to or greater than the number of `HeapNode`s in the map. In the last step, the `k` most frequent numbers are the elements in the map's values (`HeapNode`s).\n\nThe `nums`", "\n\n},{\"./sorted-array/find-k-most-frequent-elements-from-list-using-sorted-array\":19,\"./sorted-array/insert-element-to-sorted-array\":20,\"./sorted-array/remove-k-sorted-elements-from-sorted-array\":21}],17:[", "\n}\n\n\n// Fuzzy Search\n\n/**\n * * Write a ", "\n},{}],104:["]}
{"task_id": "MBJSP/32", "prompt": "function maxPrimeFactors(n) {\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */", "entry_point": "maxPrimeFactors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar x0 = maxPrimeFactors(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = maxPrimeFactors(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = maxPrimeFactors(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the largest prime factor of a given number.", "language": "javascript", "canonical_solution": "    let max = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            max = i;\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return max;\n}", "completion": ["\n", "\n", "\n\n          // for prime numbers between 2 and n\n          if (n % 2 === 0) {\n              console.log(2);\n              continue;\n          }\n          for (let i = 3; i < Math.sqrt(n); i += 2) {\n              // if i is prime\n              if (n % i === 0) {\n                  console.log(i);\n                  break;\n              }\n          }\n        }\n      `;\n\n      const result = await run(code, [], {});\n      assert.strictEqual(result.error, null);\n      assert.strictEqual(result.return, 2);\n    });\n\n    it('should print \"factors(20) = 2 2 2 2 2 2 2 2 2 2 2 2 2\"', async () => {\n      const code = `\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n\n", "\n\n\nvar largestPrimeFactor = n => {\n  const maxFactor = Math.floor(Math.sqrt(n)) + 1;\n\n  for (var factor = 2; factor <= maxFactor; factor++) {\n    if (n % factor === 0) {\n      return factor;\n    }\n  }\n\n  return n;\n};\n\nconst largestPrimeFactor$1 = largestPrimeFactor;\n\nconst isPrime = n => {\n  if (n === 1) {\n    return false;\n  }\n\n  for (var factor = 2; factor <= Math.sqrt(n); factor++) {\n    if (n % factor === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst isPrime$1 = isPrime;\n\nvar isPair = n => {\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  for (var factor = 3; factor <= Math.sqrt(n); factor += 2) {\n    if (n % factor === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst isPair$1 = isPair;\n\nvar isTriplet = n => {\n  if (n % 3 === 0) {\n    return false;\n  }\n\n  for (var factor = 5; factor <= Math.sqrt(n); factor += 3) {\n    if (n % factor === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst isTriplet$1 = isTriplet;\n\nvar isQuadruplet = n => {\n  if (n % 4 === 0) {\n    return false;\n  }\n\n  for (var", "\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a given number.\n */\n}\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/33", "prompt": "function decimalToBinary(n) {\n/**\n * * Write a JavaScript function to convert a decimal number to binary number.\n */", "entry_point": "decimalToBinary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = decimalToBinary(arg00);\nvar v0 = 1010;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar x1 = decimalToBinary(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = decimalToBinary(arg20);\nvar v2 = 10100;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to convert a decimal number to binary number.", "language": "javascript", "canonical_solution": "  return parseInt(n.toString(2), 10);\n}", "completion": ["\n", "\n", "\n", "\n", "\n"]}
{"task_id": "MBJSP/34", "prompt": "function findMissing(ar, n) {\n/**\n * * Write a JavaScript function to find the missing number in a sorted array.\n */", "entry_point": "findMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5];\nvar arg01 = 4;\nvar x0 = findMissing(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 4, 5];\nvar arg11 = 4;\nvar x1 = findMissing(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 5, 6, 7];\nvar arg21 = 5;\nvar x2 = findMissing(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the missing number in a sorted array.", "language": "javascript", "canonical_solution": "  let i = 0;\n  while (i < n) {\n    if (ar[i] !== i + 1) {\n      return i + 1;\n    }\n    i++;\n  }\n  return n + 1;\n}", "completion": ["\n  if (!sorted || ar.length < 2) return 0;\n  var ar_length = ar.length,\n    sorted_length = sorted.length,\n    i, j;\n  // Find the missing number in the sorted array.\n  for (i = 0; i < ar_length; i++) {\n    if (ar[i]!== sorted[i]) {\n      break;\n    }\n  }\n  // If there was no missing number, return the sorted array length.\n  if (i == ar_length) return sorted_length;\n  // Find the missing number in the unsorted array.\n  for (j = 0; j < sorted_length; j++) {\n    if (ar[i] === sorted[j]) {\n      break;\n    }\n  }\n  // Return the number found in the unsorted array plus one.\n  return i + 1;\n}\n```\n\n[Source](https://github.com/d3/d3-request/blob/master/index.js)\n\n#### request(uri, [data], [method], [callback])\n\nRequest the resource identified by the URI using the specified data and request method.\n\n* *uri*\n  A [Resource Identifier](#resource-identifier), which may be either a string or a URI.\n* *data*\n  A JSON string, object, or array to send as the request body.\n* *method*\n  A request method, which must be a valid [HTTP Method](http://en.wikipedia.org/wiki/List_of_HTTP_methods).\n* *callback*\n  The callback function to invoke when the request completes.\n\nThe callback ", "\nlet ar = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\n// * Write a JavaScript function that returns the difference between the value of the missing number in the sorted array and the smallest number in the array.\n\n", "\n\n/**\n * Write a JavaScript function to sort a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a fibonacci sequence.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the missing number in a sorted array.\n */\n\n/**\n * Write a JavaScript function to sort a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a fibonacci sequence.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript function to generate a list of numbers.\n */\n\n/**\n * Write a JavaScript ", "\nvar f = function(ar, n) {\n\t// Write your code here\n};\nf(5,3); // 3\nf(5,4); // 4\nf(5,5); // 5\nf(5,6); // 6\nf(5,7); // 7\nf(5,8); // 8\n```\n\n## 4.4. Object Object\n\n### 4.4.1. The `Object` constructor\n\n```\n", "\n"]}
{"task_id": "MBJSP/35", "prompt": "function findRectNum(n) {\n/**\n * * Write a function to find the n-th rectangular number.\n */", "entry_point": "findRectNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = findRectNum(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = findRectNum(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = findRectNum(arg20);\nvar v2 = 42;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the n-th rectangular number.", "language": "javascript", "canonical_solution": "    return Math.pow(n, 2) + n;\n}", "completion": ["\n\n- (NSString *)nth_rectangular_number:(NSInteger)n;\n/**\n * * Write a function to find the n-th triangular number.\n */\n\n- (NSString *)nth_triangular_number:(NSInteger)n;\n\n@end\n\n#pragma mark - Find the top and bottom row of a table\n\n@interface NSString (Find_table_rows)\n/**\n * * Find the top and bottom row of a table.\n */\n\n- (NSString *)find_table_rows;\n\n@end\n\n#pragma mark - Find the column with the largest value\n\n@interface NSString (Find_largest_column)\n/**\n * * Find the column with the largest value.\n */\n\n- (NSString *)find_largest_column;\n\n@end\n\n#pragma mark - Find the column with the largest value (quiz)\n\n@interface NSString (Find_largest_column_quiz)\n/**\n * * Write a function to find the column with the largest value.\n */\n\n- (NSString *)find_largest_column_quiz;\n\n@end\n\n#pragma mark - Find the column with the smallest value\n\n@interface NSString (Find_smallest_column)\n/**\n * * Find the column with the smallest value.\n */\n\n- (NSString *)find_smallest_column;\n\n@end\n\n#pragma mark - Find the column with the smallest value (quiz)\n\n@interface NSString (Find_smallest_column_quiz)\n/**\n * * Write a ", "\n\nnth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_of_nth_", "\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a function to find the n-th rectangular number.\n */\n}\n/**\n * * Write a ", "\n", "\nn = n.toString();\nvar len = n.length();\nvar size = parseInt(n.substring(len - 1), 10);\nif(size) {\n    var num = parseInt(n.substring(0, len - 1), 10);\n    var width = Math.floor(Math.sqrt(num));\n    var height = Math.ceil(num / width);\n    print(\"n = \" + n + \"\\nsize = \" + size + \"\\nwidth = \" + width + \"\\nheight = \" + height + \"\\n\");\n    var borders = [[\"*\", \"#\"], [\"*\", \"#\"]];\n    var border = new Array(width * height + 2);\n    for(var i = 0; i < width * height + 2; i++) {\n        border[i] = \"\";\n    }\n    for(var i = 0; i < width; i++) {\n        border[i] = borders[0][0];\n        for(var j = 0; j < height; j++) {\n            border[i + width + 1] = borders[0][1];\n        }\n        border[i + width + 1] = borders[0][0];\n    }\n    for(var i = 0; i < width; i++) {\n        border[0 + i] = borders[1][0];\n        for(var j = 0; j < height; j++) {\n            border[width * (j + 1) + 1 + i] = borders[1][1];\n        }\n        border[width * height + 1 + i] = borders[1][0];\n    }\n    print(\"border = \");\n    print(border.join(\"\\n\"));\n}\n/**\n * Write"]}
{"task_id": "MBJSP/36", "prompt": "function findNthDigit(p, q, n) {\n/**\n * * Write a JavaScript function to find the nth digit in the proper fraction of two given numbers.\n */", "entry_point": "findNthDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 1;\nvar x0 = findNthDigit(arg00, arg01, arg02);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 5;\nvar arg12 = 1;\nvar x1 = findNthDigit(arg10, arg11, arg12);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 6;\nvar arg22 = 5;\nvar x2 = findNthDigit(arg20, arg21, arg22);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the nth digit in the proper fraction of two given numbers.", "language": "javascript", "canonical_solution": "  var r,\n    s = 0;\n  r = p / q;\n  r = r.toString().split('.');\n  s = r[1].length;\n  n = n - s;\n  if (n < 0) {\n    n = n + s;\n  }\n  return Number(r[1][n]);\n}", "completion": ["\n", "\n    let nthDigit = function(p, q, n) {\n        let q1 = q;\n        let p1 = p;\n        let n1 = n;\n        let q2 = 1;\n        let p2 = 0;\n        let n2 = 0;\n        let d = 0;\n        while(true) {\n            q2 = q1 * 10 + q2;\n            p2 = p1 * 10 + p2;\n            n2 = n1 * 10 + n2;\n            if(n2 > 0)\n                break;\n            q1 *= 10;\n            p1 *= 10;\n            n1 *= 10;\n        }\n        q2 /= 10;\n        p2 /= 10;\n        n2 /= 10;\n        while(true) {\n            if(n2 > q2) {\n                n2 -= q2;\n                d = p2 % 10;\n                p2 /= 10;\n                q2 /= 10;\n            } else {\n                n2 -= d;\n                break;\n            }\n        }\n        return d;\n    };\n\n    return nthDigit(p, q, n);\n};\n```\n\n</div>\n\n</section>\n\n## Solution\n<section id='solution'>\n\n```javascript\n/**\n * @param {number} p\n * @param {number} q\n * @param {number} n\n * @return {number}\n */\nvar nthDigit = ", "\nlet n = 3;\nlet p = 2;\nlet q = 3;\nlet l = get_lthDigit(p, q, n);\nconsole.log(`${n}th digit is ${l}`);\n```\n\n**Output**\n\n```js\n2th digit is 1\n3th digit is 4\n```\n\n## \u9898\u89e3\n\n\u53c2\u8003\u5b98\u65b9\u9898\u89e3\uff1a[\u62ec\u53f7\u7684\u53c2\u6570](https://github.com/godbasin/blog/blob/master/JavaScript/find%E7%9F%A5%E9%97%A8%E4%B8%AD%E6%95%B0%E5%88%86%E6%9E%90.js)\u3002\n\n## \u4e2a\u4eba\u7ecf\u9a8c\n\n\u9898\u76ee\u63cf\u8ff0\n\n> \u5b66\u4e60 JavaScript \u7684\u53d8\u91cf\u3001\u53c2\u6570\u3001\u51fd\u6570\u3002\n\n> \u638c\u63e1 JavaScript \u539f\u578b\u3001\u539f\u578b\u94fe\u3001\u539f\u578b\u65b9\u6cd5\u3002\n\n> \u8bb2\u4e00\u9053 JavaScript \u7684\u7ecf\u9a8c\u3002\n\n\u9898\u76ee\u4fe1\u606f\n\n> \u76ee\u524d\u8fd8\u5b58\u5728\u591a\u5c11\u95ee\u9898\uff1f\n\n> \u5982\u4f55\u786e\u5b9a\u8f93\u51fa\u7ed3\u679c\uff1f\n\n> \u5982\u4f55\u786e\u5b9a\u4ee3\u7801\u7684\u6267\u884c\u6d41\u7a0b\uff1f\n\n> \u5982", "\nconst nthDigit = (p, q, n) => {\n    const currentQ = q;\n    let currentN = n;\n    let currentP = p;\n    let currentFraction = 1;\n    const greaterThanOne = currentQ!== 1 && currentN!== 1 && currentN!== 0;\n    while (currentN > 0) {\n        const currentPower = Math.pow(10, currentN);\n        if (currentFraction >= currentPower) {\n            currentFraction %= currentPower;\n        } else {\n            currentFraction = currentPower - currentFraction;\n        }\n        const currentCalculatedValue = currentP / currentFraction;\n        if (currentCalculatedValue > q) {\n            currentP = currentP - currentFraction * (currentQ - currentCalculatedValue);\n        } else if (currentCalculatedValue < q) {\n            currentP = currentP + currentFraction * (currentCalculatedValue - q);\n        } else {\n            if (currentN === n) {\n                return currentCalculatedValue;\n            }\n            currentN--;\n            currentFraction = 1;\n        }\n    }\n    return greaterThanOne? currentP : null;\n};\n```\n\n```html\n<script>\n    const nthDigit = (p, q, n) => {\n        const currentQ = q;\n        let currentN = n;\n        let currentP = p;\n        let currentFraction = 1;\n        const greaterThanOne = currentQ!== 1 && currentN!== 1 && currentN!== 0;\n        while (currentN > 0) {\n            const currentPower", "\n/**\n * * The function is passed two arguments. The first argument is the value of n. The second argument is the value of p.\n * * The function should return the value of the nth digit of the fraction of two given numbers.\n */\n/**\n * * Define a variable called result, and assign it a value.\n * * Define a function called getNthDigit(n, p) that returns the nth digit of the fraction of two given numbers.\n * * Write a test program that prompts the user to enter the values of n and p and displays the value of the nth digit of the proper fraction of two given numbers.\n */\n/**\n * * Define a function called main() that accepts a single argument, n. The function should display the value of the nth digit of the proper fraction of two given numbers, using getNthDigit().\n */\n\n/**\n * * Define a variable called n, and assign it a value.\n * * Define a variable called p, and assign it a value.\n */\n\nn = prompt(\"Enter n: \");\np = prompt(\"Enter p: \");\n\n/**\n * * Define a variable called f1, and assign it a value.\n * * Define a variable called f2, and assign it a value.\n */\n\nf1 = 2;\nf2 = 3;\n\n/**\n * * Define a function called countDigits that accepts one argument, n. The function should return the number of digits in the nth digit of the fraction of two given numbers.\n * * Write a test program that prompts the user to enter the values of n and p and displays the value of the nth digit of the proper fraction of two given numbers.\n */\n\n/**\n * * Define a "]}
{"task_id": "MBJSP/37", "prompt": "function sortMixedList(mixedlist) {\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */", "entry_point": "sortMixedList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x0 = sortMixedList(arg00);\nvar v0 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x1 = sortMixedList(arg10);\nvar v1 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1];\nvar x2 = sortMixedList(arg20);\nvar v2 = [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a given mixed list of integers and strings.", "language": "javascript", "canonical_solution": "  const numbers = [];\n  const strings = [];\n  const mixed = [];\n  mixedList.forEach((item) => {\n    if (typeof item === \"number\") {\n      numbers.push(item);\n    } else if (typeof item === \"string\") {\n      strings.push(item);\n    } else if (typeof item === \"object\") {\n      mixed.push(item);\n    }\n  });\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const sortedStrings = strings.sort();\n  return mixed.concat(sortedNumbers).concat(sortedStrings);\n}", "completion": ["\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n/**\n * * Write a ", "\n    for (i = 0; i < mixedlist.length; i++) {\n        if (typeof mixedlist[i] ==='string') {\n            mixedlist[i] = mixedlist[i].toUpperCase();\n        } else if (typeof mixedlist[i] === 'number') {\n            mixedlist[i] = mixedlist[i].toString();\n        }\n    }\n    var mixedList = mixedlist.join('').split('');\n\n    var mixedSorted = mixedList.sort();\n\n    return mixedSorted;\n}\n\nn", "\n", "\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a function to sort a given mixed list of integers and strings.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/38", "prompt": "function divEvenOdd(list1) {\n/**\n * * Write a function to find the division of first even and odd number of a given list.\n */", "entry_point": "divEvenOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 7, 4, 1, 6, 8];\nvar x0 = divEvenOdd(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x1 = divEvenOdd(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 5, 7, 9, 10];\nvar x2 = divEvenOdd(arg20);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the division of first even and odd number of a given list.", "language": "javascript", "canonical_solution": "  const odd = [];\n  const even = [];\n  let temp = list1.filter((elem) => elem % 2 === 0);\n  even.push(...temp);\n  temp = list1.filter((elem) => elem % 2 !== 0);\n  odd.push(...temp);\n  return even.length === 0 ? odd[0] : even[0];\n}", "completion": ["\n#pragma once\n#define LIST(...) ::util::_util___util___list__##__LINE__(__VA_ARGS__)\n#define IS_EVEN_LIST(...) ::util::_util___util___is_even_list__##__LINE__(__VA_ARGS__)\n#define IS_ODD_LIST(...) ::util::_util___util___is_odd_list__##__LINE__(__VA_ARGS__)\n#define GET_EVEN_LIST(...) ::util::_util___util___get_even_list__##__LINE__(__VA_ARGS__)\n#define GET_ODD_LIST(...) ::util::_util___util___get_odd_list__##__LINE__(__VA_ARGS__)\n#define TO_STR_LIST(...) ::util::_util___util___to_str_list__##__LINE__(__VA_ARGS__)\n#define FIND_FIRST_EVEN_ODD_LIST(...) ::util::_util___util___find_first_even_odd_list__##__LINE__(__VA_ARGS__)\n\n#define GET_EVEN_LIST_SINGLE(...) ::util::_util___util___get_even_list__##__LINE__(__VA_ARGS__, 0)\n#define GET_ODD_LIST_SINGLE(...) ::util::_util___util___get_odd_list__##__LINE__(__VA_ARGS__, 0)\n#define TO_STR_LIST_SINGLE(...) ::util::_util___util___to_str_list", "\n\n/**\n * function is_divisible (list, divisor)\n * @param  {Array} list - The list\n * @param  {Number} divisor - The divisor\n * @return {Boolean} - returns true if the list is divisible by divisor\n */\n", "\n\nlet divisors = (list1) => {\n  let divided = (list1) => {\n    let result = null;\n    let even = (list1) => {\n      let even_list = [];\n      for (let item of list1) {\n        if (item % 2 == 0) {\n          even_list.push(item);\n        }\n      }\n      return even_list;\n    };\n    let odd = (list1) => {\n      let odd_list = [];\n      for (let item of list1) {\n        if (item % 2 == 1) {\n          odd_list.push(item);\n        }\n      }\n      return odd_list;\n    };\n    let even_odd = even(list1) && odd(list1);\n    if (even_odd.length == 2) {\n      result = even_odd[0] / even_odd[1];\n    }\n    return result;\n  };\n  return divided(list1);\n};\nprint(divisors([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n```\n\n<p align=\"center\"><img src=\"../../Data/Video-Processing/images/def/division.png\"/></p>\n\n**Solution 3:**\n\n```\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# @Time    : 2019/6/1 14:37\n# @Author  : xiaodong\n# @File    : def_find_the_division.py\n\nfrom collections import Counter\nfrom collections import", "\n    ", "\n\n"]}
{"task_id": "MBJSP/39", "prompt": "function rearangeString(s) {\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */", "entry_point": "rearangeString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab\";\nvar x0 = rearangeString(arg00);\nvar v0 = \"aba\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aabb\";\nvar x1 = rearangeString(arg10);\nvar v1 = \"abab\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abccdd\";\nvar x2 = rearangeString(arg20);\nvar v2 = \"cdabcd\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "language": "javascript", "canonical_solution": "  let arr = s.split(\"\");\n  let result = [];\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    } else {\n      if (count > 0) {\n        result.push(arr[i - count]);\n        result.push(arr[i]);\n      } else {\n        result.push(arr[i]);\n      }\n      count = 0;\n    }\n  }\n  return result.join(\"\");\n}", "completion": ["\n\n\nvar check_for_adjacent_duplicate = function check_for_adjacent_duplicate(str) {\n  var letter_count = {};\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i];\n    if (letter_count[c]) {\n      letter_count[c]++;\n    } else {\n      letter_count[c] = 1;\n    }\n  }\n\n  var duplicate_letters = 0;\n\n  for (var c in letter_count) {\n    if (letter_count[c] > 1) {\n      duplicate_letters++;\n    }\n  }\n  if (duplicate_letters == 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar make_case_sensitive = function make_case_sensitive(str) {\n  var _str = str.split('');\n\n  var new_str = '';\n  for (var i = 0; i < _str.length; i++) {\n    if (_str[i] >= 'A' && _str[i] <= 'Z') {\n      new_str += _str[i].toUpperCase();\n    } else if (_str[i] >= 'a' && _str[i] <= 'z') {\n      new_str += _str[i].toLowerCase();\n    } else {\n      new_str += _str[i];\n    }\n  }\n  return new_str;\n};\n\nvar make_case_insensitive = ", "\nvar _a = s.split(\"\").map(", "\nvar canBeRearranged = function(s) {\n\nreturn false;\n\n}\n\n}\n\n},{\"../util/interpolate\":15}],12:[", "\n\n// Function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n", "\n\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/40", "prompt": "function freqElement(nums) {\n/**\n * * Write a function to find frequency of the elements in a given list of lists using collections module.\n */", "entry_point": "freqElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar x0 = freqElement(arg00);\nvar v0 = {\"2\":3,\"1\":2,\"5\":2,\"3\":1,\"4\":1,\"6\":1,\"7\":1,\"9\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nvar x1 = freqElement(arg10);\nvar v1 = {\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]];\nvar x2 = freqElement(arg20);\nvar v2 = {\"30\":3,\"80\":2,\"90\":2,\"15\":1,\"20\":1,\"40\":1,\"100\":1,\"110\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find frequency of the elements in a given list of lists using collections module.", "language": "javascript", "canonical_solution": "  const obj = {};\n  for (const i of nums) {\n    for (const j of i) {\n      obj[j] = (obj[j] || 0) + 1;\n    }\n  }\n  return obj;\n}", "completion": ["\nvar getFrequencyOfElementsInListOfLists = function getFrequencyOfElementsInListOfLists(listOfLists) {\n  return listOfLists.map(", "\ndef frequencies(x: List[List[Int]]): List[Int] = {\n    var result: List[Int] = List()\n    var counter = List()\n    x.foreach {\n        elem =>\n            counter = elem.filter { e => elem.indexOf(e) >= 0 }\n            result = result :+ counter.size\n    }\n    result\n}\n\n/**\n * * Write a function to get the sum of all the elements in a given list of lists using collections module.\n */\ndef sum(x: List[List[Int]]): Int = {\n    var result: Int = 0\n    x.foreach {\n        elem =>\n            result = result + elem.sum\n    }\n    result\n}\n\n/**\n * * Write a function to get the largest element in a given list of lists using collections module.\n */\ndef max(x: List[List[Int]]): Int = {\n    var result: Int = Int.MinValue\n    x.foreach {\n        elem =>\n            result = result < elem.max? elem.max : result\n    }\n    result\n}\n\n/**\n * * Write a function to get the smallest element in a given list of lists using collections module.\n */\ndef min(x: List[List[Int]]): Int = {\n    var result: Int = Int.MaxValue\n    x.foreach {\n        elem =>\n            result = result > elem.min? elem.min : result\n    }\n    result\n}\n\n/**\n * * Write a ", "\n\nvar collectionFrequency = ", "\n\n/**\n * A class that represents a list of numbers and provides methods to add, subtract, multiply, divide, and square.\n */\n\n/**\n * Write a function that sums all elements of a list of numbers using collections module.\n */\n\n/**\n * Write a function that sums all elements of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a function to compute the kth element of a list of numbers using collections module.\n */\n\n/**\n * Write a ", "\n"]}
{"task_id": "MBJSP/41", "prompt": "function filterEvennumbers(nums) {\n/**\n * * Write a function to filter even numbers using lambda function.\n */", "entry_point": "filterEvennumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = filterEvennumbers(arg00);\nvar v0 = [2, 4, 6, 8, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 45, 67, 84, 93];\nvar x1 = filterEvennumbers(arg10);\nvar v1 = [10, 20, 84];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 7, 9, 8, 6, 4, 3];\nvar x2 = filterEvennumbers(arg20);\nvar v2 = [8, 6, 4];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to filter even numbers using lambda function.", "language": "javascript", "canonical_solution": "  return nums.filter(num => num % 2 === 0);\n}", "completion": ["\n    yield lambda(n) {\n      return n % 2 === 0;\n    };\n  }\n  \n  // callback: \n  for (let n of numerators(nums)) {\n    //...\n  }\n  \n  // filter:\n  for (let n of filter(numerators, lambda)) {\n    //...\n  }\n}\n\n```\n\n### * and for..of\n\n`yield for..of` is a generalization of `yield for`. It is a method for `for` loop. `for..of` is a ", "\n\nvar even = filter(nums, {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teven(nums) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn nums % 2 === 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\nconsole.log(even);", "\n\n}\n<|endoftext|>", "\n  filter(num => num % 2 === 0)\n/**\n * * Write a function to sort a list of numbers using lambda ", "\n    //"]}
{"task_id": "MBJSP/42", "prompt": "function findSum(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of repeated elements in a given array.\n */", "entry_point": "findSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 1, 4, 5, 6];\nvar arg01 = 8;\nvar x0 = findSum(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 1];\nvar arg11 = 5;\nvar x1 = findSum(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 2];\nvar arg21 = 3;\nvar x2 = findSum(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of repeated elements in a given array.", "language": "javascript", "canonical_solution": "    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.indexOf(arr[i]) !== arr.lastIndexOf(arr[i])) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "completion": ["\n    ", "\n    ", "\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n/**\n * * Write a JavaScript function to find the sum of repeated elements in a given array.\n */\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n/**\n * * Write a JavaScript function to find the sum of repeated elements in a given array.\n */\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n/**\n * * Write a JavaScript function to find the sum of repeated elements in a given array.\n */\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare function named \"sumRepeatedElements\"\n\n// declare ", "\n\nconst sum = arr => {\nlet sum = 0;\n\nfor (let i = 0; i < arr.length; i++) {\nsum += arr[i];\n}\n\nreturn sum;\n};\n\nconsole.log(sum(arr));\n\n/**\n * * Write a JavaScript function to compute the total number of words in a given string.\n */\n\nconst countWords = str => {\nlet wordCount = 0;\n\nfor (let i = 0; i < str.length; i++) {\n\nif (str[i]!== \" \") {\nwordCount++;\n} else if (str[i] === \" \") {\nwordCount++;\n}\n}\n\nreturn wordCount;\n};\n\nconsole.log(countWords(str));\n\n/**\n * * Write a JavaScript function to compute the maximum integer value in a given array.\n */\n\nconst max = arr => {\nlet max = arr[0];\n\nfor (let i = 1; i < arr.length; i++) {\nif (arr[i] > max) max = arr[i];\n}\n\nreturn max;\n};\n\nconsole.log(max(arr));\n\n/**\n * * Write a JavaScript function to compute the minimum integer value in a given array.\n */\n\nconst min = arr => {\nlet min = arr[0];\n\nfor (let i = 1; i < arr.length; i++) {\nif (arr[i] < min) min = arr[i];\n}\n\nreturn min;\n};\n\nconsole.log(min(arr));\n\n/**\n * * Write a JavaScript ", "\n"]}
{"task_id": "MBJSP/43", "prompt": "function textMatch(text) {\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */", "entry_point": "textMatch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aab_cbbbc\";\nvar x0 = textMatch(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aab_Abbbc\";\nvar x1 = textMatch(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Aaab_abbbc\";\nvar x2 = textMatch(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "language": "javascript", "canonical_solution": "  var pattern = /^[a-z]+_[a-z]+$/;\n  var result = pattern.test(text);\n  if (result) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}", "completion": ["\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a function to convert each word in the string to an array of characters.\n */\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\nvar _ = _ = _.split(\"\"),\n    _ = _.join(\"\");\n\n/**\n * * Write a ", "\n\nconst search = (text, regex, replacement) => {\n\tlet result = '';\n\ttext = text.replace(regex, replacement);\n\tregex.lastIndex = 0;\n\tconst matches = regex.exec(text);\n\twhile (matches) {\n\t\tresult += text.slice(0, matches.index);\n\t\tresult += replacement;\n\t\ttext = text.slice(matches.index + matches[0].length);\n\t\tregex.lastIndex = 0;\n\t\tmatches = regex.exec(text);\n\t}\n\tresult += text;\n\treturn result;\n};\n\nconst join = (replacement) => (text, regex) => {\n\treturn search(text, regex, replacement);\n};\n\n// Clean up user input\nconst cleanUpInput = (regex) => (value) => {\n\treturn regex.test(value)? value : '';\n};\n\n// Clean up ", "\n\nlet regex = /[A-Za-z_]+/g;\n\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\nlet regexUpper = /[A-Z_a-z]+/g;\n\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\nlet regexNonAlpha = /[^A-Za-z_]+/g;\n\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\nlet regexNonAlphaUpper = /[^A-Z_a-z]+/g;\n\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\nlet regexNonDigit = /[^0-9]+/g;\n\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\nlet regexDigits = /[0-9]+/g;\n\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\nlet regexNonAlphaNumeric = /[^A-Za-z0-9]+/g;\n\n/**\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n */\n\nlet regexAlphaNumeric = /[A-Za-z0-9]+/g;\n\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\nlet regexAlphaUpper = /[A-Za-z]+/g;\n\n/**\n * * Write a ", "\n\n  exports.seq_join = function seq_join(text) {\n    var lower = text.toLowerCase();\n    return text.replace(/[A-Za-z]+/g, function (s) {\n      return '_' + s;\n    });\n  };\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\n\n  exports.seq_join_i = function seq_join_i(text) {\n    var lower = text.toLowerCase();\n    return text.replace(/[A-Za-z]+/g, function (s) {\n      return s.toUpperCase();\n    });\n  };\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\n\n  exports.seq_join_u = function seq_join_u(text) {\n    var lower = text.toLowerCase();\n    return text.replace(/[A-Za-z]+/g, function (s) {\n      return s;\n    });\n  };\n/**\n * * Write a function to find sequences of uppercase letters joined with an underscore using regex.\n */\n\n\n  exports.seq_join_r = function seq_join_r(text) {\n    var lower = text.toLowerCase();\n    return text.replace(/[A-Za-z]+/g, function (s) {\n      return s.replace(/([A-Za-z]+)/g, function (a, b) {\n        return b;\n      });\n    });\n  };\n/**\n * * Write a ", "\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/44", "prompt": "function textMatchString(text) {\n/**\n * * Write a function that matches a word at the beginning of a string.\n */", "entry_point": "textMatchString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \" python\";\nvar x0 = textMatchString(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = textMatchString(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang\";\nvar x2 = textMatchString(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function that matches a word at the beginning of a string.", "language": "javascript", "canonical_solution": "  if (text.startsWith('python')) {\n    return 'Found a match!';\n  } else {\n    return 'Not matched!';\n  }\n}", "completion": ["\n", "\n\n/**\n * Write a function that matches a word at the end of a string.\n */\n\n/**\n * Write a function that takes a string as input and returns the string reversed.\n */\n\n/**\n * Write a function that matches a word within a string.\n */\n\n/**\n * Write a function that takes a string as input and returns a list of all the words that match a word in the string.\n */\n\n/**\n * Write a function that matches a word within a string.\n */\n\n/**\n * Write a function that takes a string as input and returns the string reversed.\n */\n\n/**\n * Write a function that takes a string as input and returns a list of all the words that match a word in the string.\n */\n\n/**\n * Write a function that takes a string as input and returns a list of all the words that match a word in the string.\n */\n\n/**\n * Write a function that takes a string as input and returns a list of all the words that match a word in the string.\n */\n\n/**\n * Write a function that matches a word within a string.\n */\n\n/**\n * Write a function that takes a string as input and returns a list of all the words that match a word in the string.\n */\n\n/**\n * Write a function that takes a string as input and returns a list of all the words that match a word in the string.\n */\n\n/**\n * Write a function that matches a word within a string.\n */\n\n/**\n * Write a function that takes a string as input and returns a list of all the words that match a word in the string.\n */\n\n/**\n * Write a function that matches a word within a string.\n */\n\n/**\n * Write a ", "\nvar replacer = function (str, word) {\nreturn word.toUpperCase();\n};\n/**\n * * Write a function that matches a word anywhere in a string.\n */\nvar find = function (str, word) {\nreturn str.indexOf(word);\n};\n/**\n * * Write a function that returns all of the words from a string.\n */\nvar words = function (str) {\nreturn str.split(/ *[\\s\\S] */);\n};\n/**\n * * Write a function that takes a list of numbers and returns the average of those numbers.\n */\nvar average = function (numbers) {\nreturn numbers.reduce(", "\n/**\n * * Write a function that matches a word at the end of a string.\n */\n/**\n * * Write a function that takes a string and removes all instances of a certain word.\n */\n/**\n * * Write a function that removes the last instance of a certain word.\n */\n/**\n * * Write a function that takes a string and removes all but the last instance of a certain word.\n */\n/**\n * * Write a function that takes a string and removes all instances of a certain word and the last instance of a certain word.\n */\n/**\n * * Write a function that takes a string and removes all instances of a certain word that are separated by a certain character.\n */\n/**\n * * Write a function that takes a string and removes all instances of a certain word that are separated by a certain character and the last instance of a certain word that are separated by a certain character.\n */\n/**\n * * Write a function that takes a string and returns a new string that removes all the instances of a certain word that are separated by a certain character.\n */\n/**\n * * Write a function that takes a string and returns a new string that removes all the instances of a certain word that are separated by a certain character and the last instance of a certain word that are separated by a certain character.\n */\n/**\n * * Write a function that takes a string and returns a new string that removes all instances of a certain word that are separated by a certain character.\n */\n/**\n * * Write a function that takes a string and returns a new string that removes all the instances of a certain word that are separated by a certain character and the last instance of a certain word that are separated by a certain character.\n */\n/**\n * * Write a ", "\n// Write a function that matches a word at the end of a string.\nString.prototype.matchWord = function (word) {\n    return (this.lastIndexOf(word) > this.lastIndexOf(word) - word.length);\n};\n\n/**\n * * Use a matchWord function to return a string with the first letter of each word capitalized.\n */\n// Write a function to get the first letter of each word capitalized.\nString.prototype.capitalize = function () {\n    return this.matchWord(\"\").toUpperCase().concat(this.matchWord(\"\")).slice(1);\n};\n\n/**\n * * Use a matchWord function to return a string with the first letter of each word capitalized and the first letter of the first word capitalized.\n */\n// Write a function to get the first letter of each word capitalized and the first letter of the first word capitalized.\nString.prototype.capitalizeAndFirstLetterCapitalized = function () {\n    return this.matchWord(\"\").toUpperCase().concat(this.capitalize()).concat(this.matchWord(\"\"));\n};\n\n/**\n * * Use a matchWord function to return a string with all letters capitalized and the first letter of the first word capitalized.\n */\n// Write a function to get all letters capitalized and the first letter of the first word capitalized.\nString.prototype.capitalizeAndFirstLetter = function () {\n    return this.toUpperCase().concat(this.matchWord(\"\"));\n};\n\n/**\n * * Use a matchWord function to return a string with the first letter of each word capitalized and the first letter of each word with all letters capitalized.\n */\n// Write a "]}
{"task_id": "MBJSP/45", "prompt": "function getGcd(l) {\n/**\n * * Write a function to find the gcd of the given array elements.\n */", "entry_point": "getGcd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, 6, 8, 16];\nvar x0 = getGcd(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = getGcd(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 6, 8];\nvar x2 = getGcd(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the gcd of the given array elements.", "language": "javascript", "canonical_solution": "  if (l.length === 0) return 1;\n  if (l.length === 1) return l[0];\n\n  const [a, b] = l.sort((a, b) => a - b);\n\n  if (a % b === 0) return b;\n  if (b % a === 0) return a;\n\n  return getGcd([b, a % b]);\n}", "completion": ["\n", "\n\nint main(int argc, char *argv[]) {\n    if (argc < 2) {\n        printf(\"usage:./gcd_help <file>\\n\");\n        exit(0);\n    }\n    const char *fname = argv[1];\n    if (access(fname, F_OK) < 0) {\n        printf(\"%s does not exist.\\n\", fname);\n        exit(0);\n    }\n    if (access(fname, R_OK) < 0) {\n        printf(\"%s does not have read access.\\n\", fname);\n        exit(0);\n    }\n    if (access(fname, W_OK) < 0) {\n        printf(\"%s does not have write access.\\n\", fname);\n        exit(0);\n    }\n    FILE *fin = fopen(fname, \"r\");\n    if (fin == NULL) {\n        printf(\"Could not open %s.\\n\", fname);\n        exit(0);\n    }\n    char buf[2048];\n    int len = fread(buf, 1, sizeof(buf), fin);\n    fclose(fin);\n\n    buf[len] = '\\0';\n    char *p = buf;\n    char *q = p;\n    while (*q!= '\\0') {\n        *q = tolower(*q);\n        if (*q == '\\n') {\n            *q = '\\0';\n            q++;\n            *p = '\\0';\n            if (p!= q) {\n                int g = gcd(atoi(p), atoi(q));\n                printf(\"%d\\n\",", "\n", "\n", "\n\n// The list to find the gcd.\nconst list = ['cat','mouse', 'dog'];\n\n// The function to find the gcd.\nconst functionToFindGcdOfArrayElements = function(a, b) {\n  return a.reduce((a, b) => (b > 0? a : a - b), 1) / b;\n};\n\n// Call the "]}
{"task_id": "MBJSP/46", "prompt": "function testDistinct(data) {\n/**\n * * Write a JavaScript function to determine whether all the numbers are different from each other are not.\n */", "entry_point": "testDistinct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, 9];\nvar x0 = testDistinct(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 5, 5, 7, 9];\nvar x1 = testDistinct(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar x2 = testDistinct(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to determine whether all the numbers are different from each other are not.", "language": "javascript", "canonical_solution": "    var result = true;\n    for (var i = 0; i < data.length - 1; i++) {\n        if (data[i] === data[i + 1]) {\n            result = false;\n        }\n    }\n    return result;\n}", "completion": ["\n", "\n\n  var functionName = \"checkDifferent\";\n  var jsCode = functionName + \"(data) {\";\n  jsCode += \"var first = true;\";\n  jsCode += \"var result = false;\";\n  jsCode += \"for (var i = 0; i < data.length - 1; i++) {\";\n  jsCode += \"    if (data[i].value === data[i + 1].value) {\";\n  jsCode += \"        if (first) {\";\n  jsCode += \"            first = false;\";\n  jsCode += \"        } else {\";\n  jsCode += \"            result = true;\";\n  jsCode += \"            break;\";\n  jsCode += \"        }\";\n  jsCode += \"    } else {\";\n  jsCode += \"        result = true;\";\n  jsCode += \"        break;\";\n  jsCode += \"    }\";\n  jsCode += \"}\";\n  jsCode += \"return result;\";\n  jsCode += \"}\";\n  var jsCodeFile = writeFile(functionName, jsCode);\n  if (jsCodeFile.exitCode!== 0) {\n    throw new Error(\"Error writing code file: \" + jsCodeFile.error);\n  }\n}\n\nif (process.argv.length < 3) {\n  throw new Error(\"Missing argument 'jsCodeFileName' to generate an assertFile for.\");\n}\n\nvar jsCodeFileName = process.argv[2];\nif (!isFile(jsCodeFileName)) {\n  throw new Error(jsCodeFileName + \" is not a file. Please provide the full path to your.js file.\");\n}\n\nvar jsCodeFile = readFile(jsCodeFile", "\n    ", "\n/**\n * Write a JavaScript function to determine whether all the numbers are different from each other are not.\n */\n/**\n * Write a JavaScript function to find the smallest number that is greater than all the other numbers.\n */\n/**\n * Write a JavaScript function to find the largest number that is less than all the other numbers.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to return the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript function to calculate the distance between the two given points.\n */\n/**\n * Write a JavaScript ", "\n\n\t\t// The version number we're working with.\n\t\tvar version = 5;\n\n\t\t// The function to use.\n\t\tvar isDifferent = function isDifferent(oldValue, newValue, result) {\n\t\t\treturn result === 'different';\n\t\t};\n\n\t\t// The first number.\n\t\tvar first = arguments.length > 3 && arguments[3]!== undefined? arguments[3] : null;\n\n\t\t// The second number.\n\t\tvar second = arguments.length > 4 && arguments[4]!== undefined? arguments[4] : null;\n\n\t\t// The third number.\n\t\tvar third = arguments.length > 5 && arguments[5]!== undefined? arguments[5] : null;\n\n\t\t// The fourth number.\n\t\tvar fourth = arguments.length > 6 && arguments[6]!== undefined? arguments[6] : null;\n\n\t\t// The fifth number.\n\t\tvar fifth = arguments.length > 7 && arguments[7]!== undefined? arguments[7] : null;\n\n\t\t// The sixth number.\n\t\tvar sixth = arguments.length > 8 && arguments[8]!== undefined? arguments[8] : null;\n\n\t\t// The seventh number.\n\t\tvar seventh = arguments.length > 9 && arguments[9]!== undefined? arguments[9] : null;\n\n\t\t// The eighth number.\n\t\tvar eighth = arguments.length > 10 && arguments[10]!== undefined? arguments[10] : null;\n\n\t\t// Return the result if the first number is not equal to the second number, otherwise return the result of the third "]}
{"task_id": "MBJSP/47", "prompt": "function computeLastDigit(a, b) {\n/**\n * * Write a JavaScript function to find the last digit when factorial of a divides factorial of b.\n */", "entry_point": "computeLastDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = computeLastDigit(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 8;\nvar x1 = computeLastDigit(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar x2 = computeLastDigit(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the last digit when factorial of a divides factorial of b.", "language": "javascript", "canonical_solution": "    let factorialOfA = 1;\n    for (let i = a; i > 0; i--) {\n        factorialOfA *= i;\n    }\n    let factorialOfB = 1;\n    for (let i = b; i > 0; i--) {\n        factorialOfB *= i;\n    }\n    return factorialOfB / factorialOfA % 10;\n}", "completion": ["\nreturn a / b;\n}\n\n", "\n\n", "\n\n", "\nlet digit_finder = function() {\n\nlet last_digit = function(a, b) {\n\nlet last_digit_of_a = function(a) {\n\nif(a==0) {\nreturn 0;\n}\n\nlet a_factorial = function(a) {\n\nlet factorial = 1;\n\nwhile(a>0) {\nfactorial = factorial * a;\na = a - 1;\n}\n\nreturn factorial;\n};\n\nlet a_fact = function(a) {\n\nlet factorial = 1;\n\nwhile(a>0) {\nfactorial = factorial * a;\na = a - 1;\n}\n\nreturn factorial;\n};\n\nreturn a_factorial(a);\n};\n\nreturn a - last_digit_of_a(a);\n};\n\nreturn digit_finder(a, b);\n};\n\nconsole.log(last_digit(a, b));\n\n/**\n * * Generate a number using the random number generator of Python 3.\n *\n * @param {number}\n *\n * @return {number}\n */\nlet generate_random_number = function(min, max) {\n\nlet random_number = function(min, max) {\n\nlet random = Math.random();\n\nreturn random_number(min, max);\n};\n\nreturn random_number(min, max);\n};\n\nconsole.log(generate_random_number(min, max));\n\n/**\n * * Generate a random number using the random number generator of Python 2.\n *\n * @param {number}\n *\n * @return {number}\n */\nlet generate_random_number_2 = ", "\n  a, b, result = 0;\n  while (a >= 10) {\n    result = a % b;\n    a = a / b;\n  }\n  result = a + result * b;\n  return result;\n};\n\n/**\n * * Write a JavaScript function to find the last digit when factorial of a divides factorial of b.\n */\nDigit.prototype.sum = function(a, b) {\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/48", "prompt": "function oddBitSetNumber(n) {\n/**\n * * Write a JavaScript function to set all odd bits of a given number.\n */", "entry_point": "oddBitSetNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = oddBitSetNumber(arg00);\nvar v0 = 15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = oddBitSetNumber(arg10);\nvar v1 = 21;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = oddBitSetNumber(arg20);\nvar v2 = 31;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to set all odd bits of a given number.", "language": "javascript", "canonical_solution": "    count = 0; res = 0; temp = n\n    while (temp > 0) {\n        if (count % 2 == 0) {\n            res |= (1 << count)\n        }\n        count += 1\n        temp >>= 1\n    }\n    return (n | res)\n}", "completion": ["\nvar getSet = function (n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n % 2? getSet(n - 1) + getSet(n / 2) : getSet(n / 2);\n};\nSetSetNumber(getSet);\n```\n\n## Linked Lists\n\n```javascript\n// Linked List Node Definition\n\nvar LinkedListNode = function LinkedListNode(value, next) {\n    this.value = value;\n    this.next = next;\n};\n\n// Linked List Definition\n\nvar LinkedList = function LinkedList() {\n    this.head = null;\n};\n\n// Linked List Operations\n\nLinkedList.prototype.add = function (value) {\n    var newNode = new LinkedListNode(value);\n    if (!this.head) {\n        this.head = newNode;\n        return;\n    }\n    var current = this.head;\n    while (current.next) {\n        current = current.next;\n    }\n    current.next = newNode;\n};\n\nLinkedList.prototype.getLength = function () {\n    var current = this.head;\n    var length = 0;\n    while (current) {\n        length++;\n        current = current.next;\n    }\n    return length;\n};\n\nLinkedList.prototype.getValueAt = ", "\n\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */\n\n/**\n * * Write a JavaScript function to set all bits of a given number.\n */\n\n/**\n * * Write a JavaScript function to set a given bit of a given number.\n */\n\n/**\n * * Write a JavaScript function to flip a given bit of a given number.\n */\n\n/**\n * * Write a JavaScript function to flip all bits of a given number.\n */\n\n/**\n * * Write a JavaScript function to clear a given bit of a given number.\n */\n\n/**\n * * Write a JavaScript function to clear all bits of a given number.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to 0 or 1.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to a given value.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to a given value and return a new value.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to a given value and return a new value.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to a given value and return a new value.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to a given value and return a new value.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to a given value and return a new value.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to a given value and return a new value.\n */\n\n/**\n * * Write a JavaScript function to set a given bit to a given value and return a new value.\n */\n\n/**\n * * Write a JavaScript ", "\n\nif (typeof define!== 'undefined' && define.amd) {\n    define([], ", "\nvar get = function(n) {\nvar x = n|0;\nvar a = x&1;\nvar b = x&2;\nvar c = x&4;\nvar d = x&8;\nvar e = x&16;\nvar f = x&32;\nvar g = x&64;\nvar h = x&128;\n\n//  Print out the result.\nconsole.log(a + \" \" + b + \" \" + c + \" \" + d + \" \" + e + \" \" + f + \" \" + g + \" \" + h);\n}\n\n//  Set all odd bits to 1.\nget(255);\n```\n\n## \u9006\u5e8f\n\n### \u9006\u5e8f\n\n```\nvar getRev = ", "\n\n}\n<|endoftext|>"]}
{"task_id": "MBJSP/49", "prompt": "function specifiedElement(nums, n) {\n/**\n * * Write a function to extract every first or specified element from a given two-dimensional list.\n */", "entry_point": "specifiedElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg01 = 0;\nvar x0 = specifiedElement(arg00, arg01);\nvar v0 = [1, 4, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg11 = 2;\nvar x1 = specifiedElement(arg10, arg11);\nvar v1 = [3, 6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg21 = 1;\nvar x2 = specifiedElement(arg20, arg21);\nvar v2 = [2, 5, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract every first or specified element from a given two-dimensional list.", "language": "javascript", "canonical_solution": "  return nums.map(arr => arr[n]);\n}", "completion": ["\nreturn [...nums].map(x => x[0] || x);\n}\n```\n\n### `[].filter(", "\n  var extractFirst = function() {};\n\n  // Write a function that takes two numbers (the two lists) and returns the list of numbers that appear in both lists.\n  var inLists = function(l1, l2) {\n    return [];\n  };\n\n  // Write a function that takes an array of strings, and returns a string that contains the items in the first list and the items in the second list separated by commas.\n  var joinStrings = function(strs) {};\n\n  // Write a function that takes an array of numbers (an array of objects) and returns an array of objects that contain both the original numbers and the numbers that appeared in both lists.\n  var pair = function(nums) {};\n\n  // Write a function that takes a string, and returns a number (integer) that represents the length of the string.\n  var stringLength = function(str) {};\n\n  // Write a function that takes a string, and returns a string that contains all of the lowercase letters in the string.\n  var toLowerCase = function(str) {};\n\n  // Write a function that takes a string, and returns a string that contains all of the uppercase letters in the string.\n  var toUpperCase = function(str) {};\n\n  // Write a function that takes an array of strings, and returns an array of strings that are made up of all of the strings in the array together, separated by commas.\n  var union = function(strs) {};\n\n  // Write a function that takes an array of numbers, and returns an array that contains the numbers squared.\n  var sumNumbers = function(nums) {};\n});\n\n/**\n * * A function that returns a given number of numbers.\n */\n", "\n\n", "\n\nvar flatten = function flatten(arrs) {\n    if (arrs === void 0) {\n        arrs = [];\n    }\n\n    for (var _len = arrs.length, array = new Array(_len), _key = 0; _key < _len; _key++) {\n        array[_key] = arrs[_key];\n    }\n\n    return array;\n};\n\nvar flatten_1 = flatten;\n\n// CONCATENATED MODULE:./src/write/arr.ts\n\n\n\n\n\n\n\nvar arr_is_array_is_array = function is_array(a) {\n    return Array.isArray(a);\n};\n\nvar arr_is_array_of = function is_array_of(type, a) {\n    return arr_is_array_is_array(a) && a.length > 0 && a[0] && a[0].constructor === type;\n};\n\nvar arr_is_array_of_1 = arr_is_array_of;\n\nvar arr_is_array_of_2 = function is_array_of(type, a) {\n    return arr_is_array_of(type, a) && a.length > 0 && a[0].constructor === Object;\n};\n\nvar arr_is_array_of_3 = function is_array_of(type, a) {\n    return arr_is_array_of(type, a) && a.length > 0 && a[0].constructor === Array;\n};\n\nvar arr_is_array_of_4 = ", "\nreturn function(num, num2, i) {\nreturn num + num2 + i;\n};\n});\n$('#d3-1').on('click', function() {\nvar sum = d3.sum(nums, n);\n/**\n * * Write a function to get the sum of all elements in a given two-dimensional list.\n */\nreturn sum;\n});\n$('#d3-2').on('click', function() {\nvar sum = d3.sum(nums, n)\n/**\n * * Write a function to get the sum of all elements in a given two-dimensional list and index i.\n */\nreturn sum + i;\n});\n$('#d3-3').on('click', function() {\nvar sum = d3.sum(nums, n)\n/**\n * * Write a function to get the sum of all elements in a given two-dimensional list, where the i-th element is excluded.\n */\nreturn sum - i;\n});\n$('#d3-4').on('click', function() {\nvar sum = d3.sum(nums, n)\n/**\n * * Write a function to get the sum of all elements in a given two-dimensional list and index i.\n */\nreturn sum + nums[i];\n});\n$('#d3-5').on('click', function() {\nvar sum = d3.sum(nums, n)\n/**\n * * Write a function to get the sum of all elements in a given two-dimensional list, where the i-th element is excluded.\n */\nreturn sum - nums[i];\n});\n$('#d3-6').on('click', "]}
{"task_id": "MBJSP/50", "prompt": "function minLengthList(inputlist) {\n/**\n * * Write a function to find the list with minimum length using lambda function.\n */", "entry_point": "minLengthList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = minLengthList(arg00);\nvar v0 = [1, [0]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]];\nvar x1 = minLengthList(arg10);\nvar v1 = [1, [1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]];\nvar x2 = minLengthList(arg20);\nvar v2 = [2, [1, 2]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the list with minimum length using lambda function.", "language": "javascript", "canonical_solution": "  const minList = inputList.reduce((acc, cur) => {\n    if (acc.length === 0) {\n      return cur;\n    }\n    if (cur.length < acc.length) {\n      return cur;\n    }\n    return acc;\n  }, []);\n  return [minList.length, minList];\n}", "completion": ["\n\nint minlength(const std::string& text, const std::string& keyword, int minlength) {\n\tif (text.length() < minlength)\n\t\treturn text.length();\n\tif (keyword.length() <= text.length())\n\t\treturn minlength;\n\n\tint length = minlength;\n\tint i = 0;\n\n\twhile (true) {\n\t\tif (text.substr(i, keyword.length()) == keyword) {\n\t\t\ti += keyword.length();\n\t\t\tif (length == minlength)\n\t\t\t\tlength = i;\n\t\t}\n\n\t\tif (text.substr(i, keyword.length()) == keyword) {\n\t\t\ti += keyword.length();\n\t\t}\n\n\t\tif (i == text.length()) {\n\t\t\tif (text.substr(i, keyword.length()) == keyword) {\n\t\t\t\ti += keyword.length();\n\t\t\t\tif (length == minlength)\n\t\t\t\t\tlength = i;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn length;\n}\n\n/**\n * * Write a function to find the list with minimum length using lambda ", "\n\n\n", "\n", "\n\n// The user input is the first argument.\nvar length = inputlist.length;\nvar maxlength = inputlist.reduce(", "\n\nif (lengthOfList(inputlist) === 1) {\n    output(inputlist[0])\n    return\n}\n\n/**\n * * Write a function to find the list with minimum length using recursion.\n */\n\nif (lengthOfList(inputlist) === 1) {\n    output(inputlist[0])\n    return\n}\n\n/**\n * * Write a function to find the list with minimum length using tail recursion.\n */\n\nif (lengthOfList(inputlist) === 1) {\n    output(inputlist[0])\n    return\n}\n\n/**\n * * Write a function to find the list with minimum length using tail recursion,\n *   but without returning the value of the function.\n */\n\nif (lengthOfList(inputlist) === 1) {\n    output(inputlist[0])\n    return\n}\n\n/**\n * * Write a function to find the list with minimum length using lambda function.\n */\n\nif (lengthOfList(inputlist) === 1) {\n    output(inputlist[0])\n    return\n}\n\n/**\n * * Write a function to find the list with minimum length using tail recursion,\n *   but without returning the value of the function.\n */\n\nif (lengthOfList(inputlist) === 1) {\n    output(inputlist[0])\n    return\n}\n\n/**\n * * Write a function to find the list with minimum length using lambda function.\n */\n\nif (lengthOfList(inputlist) === 1) {\n    output(inputlist[0])\n    return\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/51", "prompt": "function checkEquilateral(x, y, z) {\n/**\n * * Write a function to print check if the triangle is equilateral or not.\n */", "entry_point": "checkEquilateral", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 8;\nvar arg02 = 12;\nvar x0 = checkEquilateral(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 6;\nvar arg12 = 12;\nvar x1 = checkEquilateral(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 6;\nvar arg22 = 6;\nvar x2 = checkEquilateral(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to print check if the triangle is equilateral or not.", "language": "javascript", "canonical_solution": "  if (x === y && y === z) {\n    return true;\n  } else {\n    return false;\n  }\n}", "completion": ["\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is right or not.\n */\n\n/**\n * * Write a function to print check if the triangle is acute or not.\n */\n\n/**\n * * Write a function to print check if the triangle is obtuse or not.\n */\n\n/**\n * * Write a function to print check if the triangle is equilateral or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is right or not.\n */\n\n/**\n * * Write a function to print check if the triangle is acute or not.\n */\n\n/**\n * * Write a function to print check if the triangle is obtuse or not.\n */\n\n/**\n * * Write a function to print check if the triangle is equilateral or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is right or not.\n */\n\n/**\n * * Write a function to print check if the triangle is acute or not.\n */\n\n/**\n * * Write a ", "\n", "\nequilateral(x, y, z) {\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\nisosceles(x, y, z) {\n/**\n * * Write a function to print check if the triangle is right or not.\n */\nright(x, y, z) {\n/**\n * * Write a ", "\n", "\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */\n\n/**\n * * Write a function to print check if the triangle is scalene or not.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/52", "prompt": "function parallelogramArea(b, h) {\n/**\n * * Write a function to caluclate area of a parallelogram.\n */", "entry_point": "parallelogramArea", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = parallelogramArea(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 20;\nvar x1 = parallelogramArea(arg10, arg11);\nvar v1 = 300;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar arg21 = 9;\nvar x2 = parallelogramArea(arg20, arg21);\nvar v2 = 72;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to caluclate area of a parallelogram.", "language": "javascript", "canonical_solution": "  return b * h;\n}", "completion": ["\n\n/**\n * * Calculate area of a parallelogram.\n * * @param {Object} a - Object containing two points.\n * * @param {Object} b - Object containing two points.\n * * @return {Number} - Area of a parallelogram.\n *\n *   Equation:\n *   ```\n *   a = getLength(b.x, a.x)\n *   b = getLength(b.y, a.y)\n *   c = getLength(a.x, b.x)\n *   d = getLength(a.y, b.y)\n *   ```\n *   Area = `(a*d - c*b) / 2`\n *\n * @example\n *   calculateArea({\"x\": 1, \"y\": 5}, {\"x\": 3, \"y\": 7}) // => 15.0\n */\n\n", "\n\n/**\n * * Parallelogram area function.\n * @param {Object} t - An object that contains a left and right coordinate of a parallelogram.\n * @param {Object} b - An object that contains a top and bottom coordinate of a parallelogram.\n * @return {Number} Returns the area of parallelogram.\n */\n", "\n\n", "\n\n/**\n * * Find the area of a parallelogram\n */\n\n/**\n * * Find the perimeter of a parallelogram\n */\n\n/**\n * * Return the vector between the two given points\n */\n\n/**\n * * Return the absolute value of a given number\n */\n\n/**\n * * Return the sign of a given number\n */\n\n/**\n * * Return a randomly generated number between 0 and 1\n */\n\n/**\n * * Return a randomly generated number between min and max\n */\n\n/**\n * * Return the difference between two given numbers\n */\n\n/**\n * * Return the sum of two given numbers\n */\n\n/**\n * * Return the product of two given numbers\n */\n\n/**\n * * Return the smallest of three given numbers\n */\n\n/**\n * * Return the largest of three given numbers\n */\n\n/**\n * * Return the smallest of four given numbers\n */\n\n/**\n * * Return the largest of four given numbers\n */\n\n/**\n * * Return the smallest of five given numbers\n */\n\n/**\n * * Return the largest of five given numbers\n */\n\n/**\n * * Return the largest of six given numbers\n */\n\n/**\n * * Return the smallest of six given numbers\n */\n\n/**\n * * Return the second smallest of six given numbers\n */\n\n/**\n * * Return the second largest of six given numbers\n */\n\n/**\n * * Return the smallest of seven given numbers\n */\n\n/**\n * * Return the largest of seven given numbers\n */\n\n/**\n * * Return the smallest of eight given numbers\n */\n\n/**\n * * Return the largest of eight given numbers\n */\n\n/**\n * * Return the smallest of nine given numbers\n */\n\n/**\n * * Return the largest of nine given numbers\n */", "\n\n  return b * h;\n}\n```\n\nIf we look at the function we will see that it returns the area of the parallelogram. The return statement is for when we write a function to caluclate area of a parallelogram. When we write a function to caluclate area of a parallelogram, the function must return the area of the parallelogram. In other words, the return statement should return the area of the parallelogram. \n\nThe area of the parallelogram is: `b*h`\n\n### **6.6.2** Defining functions\n\n**6.6.2** Defining functions\n\nYou can define functions to use in your programs. This is particularly useful if you want to write a program that has a defined function. \n\nYou can define functions like this:\n\n```javascript\n"]}
{"task_id": "MBJSP/53", "prompt": "function checkEquality(str) {\n/**\n * * Write a JavaScript function to check whether the first and last characters of a given string are equal or not.\n */", "entry_point": "checkEquality", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcda\";\nvar x0 = checkEquality(arg00);\nvar v0 = \"Equal\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ab\";\nvar x1 = checkEquality(arg10);\nvar v1 = \"Not Equal\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"mad\";\nvar x2 = checkEquality(arg20);\nvar v2 = \"Not Equal\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the first and last characters of a given string are equal or not.", "language": "javascript", "canonical_solution": "    if (str.length < 2) {\n        return \"Not Equal\";\n    }\n    return str[0] === str[str.length - 1] ? \"Equal\" : \"Not Equal\";\n}", "completion": ["\nreturn 'text' == str.substr(0, str.length - 1) && str.substr(str.length - 1) == 'text';\n}\n\nmodule.exports = function(str) {\nvar first_text = str.substr(0, str.length - 1);\nvar last_text = str.substr(str.length - 1);\n\nif (first_text.length!= last_text.length) {\n    return false;\n}\nelse {\n    return first_text === last_text;\n}\n};\n\n/***/ }),\n/* 4 */\n/***/ (", "\n", "\nconst functions = require('./functions');\n\nconst areEqual = (str) => functions[str]('', '') === 'T';\n\nconsole.log(areEqual('hello world'));\n// true\nconsole.log(areEqual('goodbye world'));\n// false\nconsole.log(areEqual('a'));\n// true\nconsole.log(areEqual('the quick brown fox jumped over the lazy dog'));\n// true\n\n// whether a given string contains a given substring or not.\nconst contains = (str, substring) => functions[str](substring) === 'T';\n\nconsole.log(contains('hello world', 'world'));\n// true\nconsole.log(contains('goodbye world', 'world'));\n// false\nconsole.log(contains('a', 'b'));\n// true\nconsole.log(contains('the quick brown fox jumped over the lazy dog', 'fox'));\n// true\nconsole.log(contains('the quick brown fox jumped over the lazy dog', 'dog'));\n// false\nconsole.log(contains('the quick brown fox jumped over the lazy dog', 'brown'));\n// false\nconsole.log(contains('the quick brown fox jumped over the lazy dog','slowly'));\n// false\n\n// whether a given string contains only digits or not.\nconst containsDigits = (str) => functions[str]('0-9') === 'T';\n\nconsole.log(containsDigits('a123a12'));\n// true\nconsole.log(containsDigits('0'));\n// true\nconsole.log(containsDigits('1'));\n// true\nconsole.log(containsDigits('a2", "\nreturn str.charAt(0) == str.charAt(str.length - 1);\n}\n\n/**\n * * Check whether the first character of a given string is a number and the second one is not.\n */\n", "\n\n"]}
{"task_id": "MBJSP/54", "prompt": "function countingSort(mylist) {\n/**\n * * Write a function to sort the given array by using counting sort.\n */", "entry_point": "countingSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 23, 4, 5, 6, 7, 8];\nvar x0 = countingSort(arg00);\nvar v0 = [1, 4, 5, 6, 7, 8, 23];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 9, 28, 33, 69, 45];\nvar x1 = countingSort(arg10);\nvar v1 = [9, 12, 28, 33, 45, 69];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 4, 14, 3, 2, 1];\nvar x2 = countingSort(arg20);\nvar v2 = [1, 2, 3, 4, 8, 14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort the given array by using counting sort.", "language": "javascript", "canonical_solution": "  if (myList.length === 0) return [];\n  const max = Math.max(...myList);\n  const min = Math.min(...myList);\n  const count = new Array(max - min + 1).fill(0);\n  myList.forEach((item) => {\n    count[item - min]++;\n  });\n  const result = [];\n  count.forEach((item, index) => {\n    for (let i = 0; i < item; i++) {\n      result.push(index + min);\n    }\n  });\n  return result;\n}", "completion": ["\n} else {\n/**\n * * Write a ", "\nmylist = $list.sort(", "\n\n", "\n\n/**\n * * Create a list to sort.\n */\n\n/**\n * * Get a value from the given object.\n */\n\n/**\n * * Define a function with given parameters.\n */\n\n/**\n * * Define a constant value.\n */\n\n/**\n * * Define a static constant value.\n */\n\n/**\n * * Define a function with given parameters.\n */\n\n/**\n * * Define a constant value.\n */\n\n/**\n * * Define a static constant value.\n */\n\n/**\n * * Define a function with given parameters.\n */\n\n/**\n * * Define a constant value.\n */\n\n/**\n * * Define a static constant value.\n */\n\n/**\n * * Define a function with given parameters.\n */\n\n/**\n * * Define a constant value.\n */\n\n/**\n * * Define a static constant value.\n */\n\n/**\n * * Define a function with given parameters.\n */\n\n/**\n * * Define a constant value.\n */\n\n/**\n * * Define a static constant value.\n */\n\n/**\n * * Define a function with given parameters.\n */\n\n/**\n * * Define a constant value.\n */\n\n/**\n * * Define a static constant value.\n */\n\n/**\n * * Define a function with given parameters.\n */\n\n/**\n * * Define a constant value.\n */\n\n/**\n * * Define a static constant value.\n */\n\n/**\n * * Define a function with given parameters.\n */\n\n/**\n * * Define a constant value.\n */\n\n/**\n * * Define a static constant value.\n */\n\n/**\n * * Define a ", "\n  "]}
{"task_id": "MBJSP/55", "prompt": "function tnGp(a, n, r) {\n/**\n * * Write a function to find t-nth term of geometric series.\n */", "entry_point": "tnGp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = tnGp(arg00, arg01, arg02);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 5;\nvar arg12 = 4;\nvar x1 = tnGp(arg10, arg11, arg12);\nvar v1 = 256;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 6;\nvar arg22 = 3;\nvar x2 = tnGp(arg20, arg21, arg22);\nvar v2 = 486;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find t-nth term of geometric series.", "language": "javascript", "canonical_solution": "  return a * Math.pow(r, n - 1);\n}", "completion": ["\n", "\n\nvar Gp = function() {\n\n};\n\nGp.prototype.write = function() {\n\n};\n\nmodule.exports = Gp;\n},{}],2:[", "\n\n  const tnth = function tnth(a, n, r) {\n    return (Math.pow(r, n) * a * (1 - r) * n * (n + 1)) / (n * n * n);\n  };\n\n  const geom_s = function geom_s(a, n, r) {\n    return tnth(a, n, r) + tnth(a, n - 1, r);\n  };\n  /**\n   * * Write a function to find t-nth term of geometric series.\n   */\n\n\n  const geom_s_iter = function geom_s_iter(a, n, r) {\n    return (Math.pow(r, n) * a * (1 - r) * n * (n + 1)) / (n * n * n);\n  };\n  /**\n   * * Write a function to find t-nth term of geometric series.\n   */\n\n\n  const geom_s_reverse = function geom_s_reverse(a, n, r) {\n    return (Math.pow(r, n) * a * (1 - r) * n * (n + 1)) / (n * n * n);\n  };\n  /**\n   * * Write a function to find t-nth term of geometric series.\n   */\n\n\n  const geom_s_simplify = ", "\n\n    var geom_sum = function(a, n, r) {\n      return (1 - r) * a * (n - 1) / n;\n    };\n    var geom_find = function(a, n, r) {\n      return geom_sum(a, n, r);\n    };\n    \n    var pi = Math.PI;\n    var gamma = Math.sqrt(2) * Math.PI;\n\n    var get_t = function(n, k, n0, r0, a0, a1, r1) {\n      if(k === 0) {\n        if(n0 === 0) {\n          var t = (n0 * a0 + r0 * a1) / (r0 * a0 + r1 * a1);\n          return t;\n        } else {\n          var t = (n0 * a1 + r1 * a0) / (r0 * a0 + r1 * a1);\n          return t;\n        }\n      } else {\n        var t = (n0 * a0 + r0 * a1) / (r0 * a0 + r1 * a1);\n        return t;\n      }\n    };\n\n    var get_n = ", "\nconst Gp = (a: number, n: number, r: number) => (Math.pow(a, n) - Math.pow(r, n)) / (Math.pow(a, n) - 1);\n\nconst GpWithDelay = (a: number, n: number, r: number) => (a * Math.pow(a, n) - r * Math.pow(a, n)) / (a * Math.pow(a, n) - a * Math.pow(r, n) + r);\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/56", "prompt": "function check(n) {\n/**\n * * Write a JavaScript function to check if a given number is one less than twice its reverse.\n */", "entry_point": "check", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 70;\nvar x0 = check(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 23;\nvar x1 = check(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 73;\nvar x2 = check(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check if a given number is one less than twice its reverse.", "language": "javascript", "canonical_solution": "  let num = n\n  let rev = 0\n  while (num > 0) {\n    rev = rev * 10 + num % 10\n    num = Math.floor(num / 10)\n  }\n  return 2 * rev == n + 1\n}", "completion": ["\n\nvar write = (", "\n$('.number-input').on('input', function() {\n    var number = $(this).val();\n    var reverseNumber = number.replace(/[\\D]/g, '');\n    var result = 'None';\n    if (reverseNumber!== '') {\n        if (number % 2 === 1) {\n            result = 'One';\n        } else {\n            result = 'NotOne';\n        }\n    }\n    $(this).next('.result').html(result);\n});\n});\n\n$(document).ready(", "\n", "\n\n", "\n\nif (\n    typeof $(\"#divN1\").children(\"p\").children(\"span\").text() ===\n    \"1\"\n) {\n    $(\"#divN1\").children(\"p\").children(\"span\").text(\"2\");\n}\n\nif (\n    typeof $(\"#divN1\").children(\"p\").children(\"span\").text() ===\n    \"2\"\n) {\n    $(\"#divN1\").children(\"p\").children(\"span\").text(\"1\");\n}\n\nif (\n    typeof $(\"#divN1\").children(\"p\").children(\"span\").text() ===\n    \"1\"\n) {\n    $(\"#divN1\").children(\"p\").children(\"span\").text(\"2\");\n}\n\nif (\n    typeof $(\"#divN1\").children(\"p\").children(\"span\").text() ===\n    \"2\"\n) {\n    $(\"#divN1\").children(\"p\").children(\"span\").text(\"1\");\n}\n\nif (\n    typeof $(\"#divN1\").children(\"p\").children(\"span\").text() ===\n    \"1\"\n) {\n    $(\"#divN1\").children(\"p\").children(\"span\").text(\"2\");\n}\n\nif (\n    typeof $(\"#divN1\").children(\"p\").children(\"span\").text() ===\n    \"2\"\n) {\n    $(\"#divN1\").children(\"p\").children(\"span\").text(\"1\");\n}\n\nif (\n    typeof $(\"#divN1\").children(\"p\").children(\"span\").text() ===\n    \"1\"\n) {\n    $(\"#divN1\").children(\"p\").children(\"span\").text(\"2\");\n}\n"]}
{"task_id": "MBJSP/57", "prompt": "function findMaxNum(arr, n) {\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */", "entry_point": "findMaxNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = 3;\nvar x0 = findMaxNum(arg00, arg01);\nvar v0 = 321;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6, 1];\nvar arg11 = 4;\nvar x1 = findMaxNum(arg10, arg11);\nvar v1 = 6541;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 9];\nvar arg21 = 4;\nvar x2 = findMaxNum(arg20, arg21);\nvar v2 = 9321;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the largest number that can be formed with the given digits.", "language": "javascript", "canonical_solution": "    var num = arr.sort(function(a, b) {\n        return b - a;\n    });\n    var count = num.reduce(function(a, b, i, arr) {\n        if (i === 0) {\n            return a = a * 10 + b;\n        }\n        return a = a * 10 + b;\n    }, 0);\n    while (count < n) {\n        num.push(0);\n        count = count * 10 + 0;\n    }\n    return num.reduce(function(a, b, i, arr) {\n        return a = a * 10 + b;\n    });\n}", "completion": ["\n\nvar largest = function largest(arr) {\n  return arr.reduce(", "\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * Write a JavaScript ", "\n\n  return arr.reduce(", "\n\n/**\n * * Find all the largest numbers that can be formed with the given digits.\n */\n\n/**\n * * Find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Find all the largest numbers that can be formed with the given digits.\n */\n\n/**\n * * Find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript function to find the largest number that can be formed with the given digits.\n */\n\n/**\n * * Write a JavaScript ", "\n\n// Create a variable named largest with a value of 0.\nlargest = 0;\n\n// Start loop from 0 to arr.length - 1.\nfor (let i = 0; i < arr.length - 1; i++) {\n\n// Create a variable named current with a value of 0.\ncurrent = 0;\n\n// Start loop from 0 to arr[i].length - 1.\nfor (let j = 0; j < arr[i].length - 1; j++) {\n\n// If arr[i][j] is not equal to arr[i][j + 1], then add arr[i][j] to current.\nif (arr[i][j]!== arr[i][j + 1]) {\ncurrent += arr[i][j];\n} else {\n// Otherwise, calculate the largest number that can be formed with the given digits.\nif (current > largest) {\nlargest = current;\n}\nbreak;\n}\n}\n}\n\n// Print the largest number that can be formed with the given digits.\nconsole.log(largest);\n```\n\n**Output**\n\n```javascript\n2\n```\n\n<br/>\n\n**Question**: What is the code for the following code?\n\n```javascript\nlet arr = [1, 4, 5, 6, 3, 5, 8, 7, 2, 8, 5, 3, 9, 5, 5, 5];\n\nlet largest = 0;\n\n// Start loop from 0 to arr.length - 1.\nfor (let i = 0; i < arr.length - 1; i++) {\n\n// Create a variable named current with a value of 0.\ncurrent = 0;\n\n// Start loop from 0 to arr[i].length - 1.\nfor (let j = 0"]}
{"task_id": "MBJSP/58", "prompt": "function oppositeSigns(x, y) {\n/**\n * * Write a JavaScript function to check whether the given two integers have opposite sign or not.\n */", "entry_point": "oppositeSigns", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = -2;\nvar x0 = oppositeSigns(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar x1 = oppositeSigns(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = -10;\nvar arg21 = -10;\nvar x2 = oppositeSigns(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the given two integers have opposite sign or not.", "language": "javascript", "canonical_solution": "  return (x * y < 0) ? true : false;\n}", "completion": ["\n\nreturn!(x > 0 && y > 0) || (x < 0 && y < 0);\n};\n};\n};\n};\n};\n};\n};\n};\n};\n})();\n<|endoftext|>", "\n    expect(x).to.be.close(0.01, 0.001);\n    expect(y).to.be.close(0.01, 0.001);\n};\n\n/**\n * Test if a string is a valid JavaScript identifier.\n */\ntest(`String is a valid JavaScript identifier`, () => {\n/**\n * * Test if the given string is a valid JavaScript identifier.\n */\n    expect(x).to.be.a('string');\n    expect(y).to.be.a('string');\n/**\n * * Write a JavaScript function to check whether the given two strings have the same value.\n */\n    expect(x).to.be.equal(y);\n};\n\n/**\n * Test if a string is a valid JavaScript keyword.\n */\ntest(`String is a valid JavaScript keyword`, () => {\n/**\n * * Test if the given string is a valid JavaScript keyword.\n */\n    expect(x).to.be.a('string');\n    expect(y).to.be.a('string');\n/**\n * * Write a JavaScript function to check whether the given two strings have the same value.\n */\n    expect(x).to.be.equal(y);\n};\n\n/**\n * Test if a string is a valid JavaScript variable name.\n */\ntest(`String is a valid JavaScript variable name`, () => {\n/**\n * * Test if the given string is a valid JavaScript variable name.\n */\n    expect(x).to.be.a('string');\n    expect(y).to.be.a('string');\n/**\n * * Write a JavaScript ", "\nx = x.toString().replace(/,/g, ',').replace(/ /g, '').replace(/\\)/g, '').replace(/\\(/g, '').replace(/\\)/g, '').replace(/\\+/g, '').replace(/\\-/g, '');\ny = y.toString().replace(/,/g, ',').replace(/ /g, '').replace(/\\)/g, '').replace(/\\(/g, '').replace(/\\)/g, '').replace(/\\+/g, '').replace(/\\-/g, '');\nx = (x.length == 0)? '' : x;\ny = (y.length == 0)? '' : y;\nvar x_0 = x.charAt(0);\nvar y_0 = y.charAt(0);\nvar x_1 = x.charAt(1);\nvar y_1 = y.charAt(1);\nvar x_2 = x.charAt(2);\nvar y_2 = y.charAt(2);\nif ((x_0 == '+') || (x_0 == '-')) {\nreturn false;\n} else if ((y_0 == '+') || (y_0 == '-')) {\nreturn false;\n} else {\nif ((x_0 == y_0) && (x_1 == y_1) && (x_2 == y_2)) {\nreturn true;\n} else {\nreturn false;\n}\n}\n}\n}\nreturn false;\n}\n}\n}\nvar has_valid_callbacks = false;\n", "\n", "\n}\n\n"]}
{"task_id": "MBJSP/59", "prompt": "function isOctagonal(n) {\n/**\n * * Write a function to find the nth octagonal number.\n */", "entry_point": "isOctagonal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = isOctagonal(arg00);\nvar v0 = 65;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = isOctagonal(arg10);\nvar v1 = 280;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = isOctagonal(arg20);\nvar v2 = 645;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the nth octagonal number.", "language": "javascript", "canonical_solution": "\treturn 3 * n * n - 2 * n\n}", "completion": ["\n\n/**\n * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal number.\n */\n\n/**\n * * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal number.\n */\n\n/**\n * * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal number.\n */\n\n/**\n * * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal number.\n */\n\n/**\n * * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal number.\n */\n\n/**\n * * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal number.\n */\n\n/**\n * * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal number.\n */\n\n/**\n * * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal number.\n */\n\n/**\n * * Find the nth octagonal number.\n * @param {number} n The nth octagonal number.\n * @return {number} The nth octagonal", "\n\n// Implement the function 'nthOctagonalNumber' that takes a positive integer n and returns the nth octagonal number.\n\n// Examples:\n// nthOctagonalNumber(3) should return 13\n// nthOctagonalNumber(4) should return 15\n// nthOctagonalNumber(5) should return 14\n\n// Note: If n is 0 or negative, then the function should return 0.\n\n", "\nvar n = readInt();\n\nvar count = 0;\n", "\n\n", "\nlet nthOctagonal = "]}
{"task_id": "MBJSP/60", "prompt": "function maxLenSub(arr, n) {\n/**\n * * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n */", "entry_point": "maxLenSub", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 6, 3, 7, 6, 5, 8];\nvar arg01 = 8;\nvar x0 = maxLenSub(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-2, -1, 5, -1, 4, 0, 3];\nvar arg11 = 7;\nvar x1 = maxLenSub(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 11, 13, 15, 18];\nvar arg21 = 5;\nvar x2 = maxLenSub(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "language": "javascript", "canonical_solution": "\tmls = [];\n\tmax = 0;\n\tfor (let i = 0; i < n; i++) {\n\t\tmls.push(1);\n\t}\n\tfor (let i = 0; i < n; i++) {\n\t\tfor (let j = 0; j < i; j++) {\n\t\t\tif (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n\t\t\t\tmls[i] = mls[j] + 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i = 0; i < n; i++) {\n\t\tif (max < mls[i]) {\n\t\t\tmax = mls[i];\n\t\t}\n\t}\n\treturn max;\n}", "completion": ["\n\n  return maxLength(arr, n)\n\n}\n<|endoftext|>", "\n", "\nconst _ = require('lodash');\nconst Sequences = require('sequences');\n\nmodule.exports = (arr, n) => {\n  arr = _.clone(arr);\n  n = n || 1;\n  arr.sort((a, b) => b.length - a.length);\n  const max = {\n    max: 0,\n    maxLen: 0,\n    seq: []\n  };\n  sequences.forEach((seq) => {\n    const len = seq.length - 1;\n    if (arr[seq[len].index].length - arr[seq[0].index].length === n) {\n      const pre = arr[seq[0].index];\n      const suf = arr[seq[len].index];\n      const maxLen = pre.length + suf.length;\n      const maxLenLen = maxLen + 1;\n      const seqLen = seq.length + 1;\n      if (max.maxLen < maxLenLen) {\n        max.maxLen = maxLenLen;\n        max.max = maxLen;\n        max.seq = [].concat(seqLen, _.clone(seq));\n      }\n    }\n  });\n  return max;\n};\n```\n\n## \u5173\u4e8e\u590d\u6742\u5ea6\n\n### \u8fed\u4ee3\n\n\u8fed\u4ee3\u662f\u6307\uff1a\u4f7f\u7528 `for-in` \u5faa\u73af\u67e5\u627e\u4e00\u4e2a\u5bf9\u8c61\u7684\u5c5e\u6027\u503c\u3002\n\n```js\nconst { sum } = sequences;\nconst arr = [1, 2, 3, 4, 5, 6];\nconst values = arr.map(x => x * 2", "\nvar longestSubsequence = function(arr, n) {\n  var memo = [];\n  for(var i = 0; i < n; i++) {\n    memo[i] = [];\n  }\n  return maxSubsequence(arr, n, memo);\n};\n\n", "\nfor (let i = 0; i < n; i++) {\n    let val = arr[i];\n    let dp = [];\n    for (let j = 0; j <= i; j++) {\n        dp[j] = 1;\n    }\n    for (let j = i + 1; j < n; j++) {\n        if (Math.abs(val - arr[j]) < epsilon) {\n            dp[j] = dp[j - 1] + 1;\n        }\n    }\n    result = Math.max(result, dp[i]);\n}\nreturn result;\n}\n```\n\n# 4. Longest Common Subsequence\n\n## 1. Find the longest common subsequence of two string.\n\n```python\ndef longestCommonSubsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    c = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n            else:\n                c[i][j] = max(c[i - 1][j], c[i][j - 1])\n    return c[m][n]\n```\n\n## 2. Find the longest common subsequence of two string in array.\n\n```python\ndef longestCommonSubsequence(arr, n):\n    s = []\n    for i in range(n):\n        s.append([-1] * ("]}
{"task_id": "MBJSP/61", "prompt": "function countSubstrings(s, n) {\n/**\n * * Write a JavaScript function to count number of substrings with the sum of digits equal to their length.\n */", "entry_point": "countSubstrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"112112\";\nvar arg01 = 6;\nvar x0 = countSubstrings(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"111\";\nvar arg11 = 3;\nvar x1 = countSubstrings(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"1101112\";\nvar arg21 = 7;\nvar x2 = countSubstrings(arg20, arg21);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count number of substrings with the sum of digits equal to their length.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      if (s.slice(i, j).split('').reduce((acc, item) => acc + Number(item), 0) === j - i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}", "completion": ["\n", "\nvar n = arguments[2];\nvar words = s.split(' ');\nvar wordLengths = [];\n\nfor (var i = 0; i < words.length; i++) {\n    wordLengths.push(words[i].length);\n}\n\n", "\ns = \"123\";\nn = 3;\nsum = 0;\nfor (i = 0; i < n; i++) {\nsum = sum + s.length;\n}\nconsole.log(sum);\n\n/**\n * * Write a JavaScript function that takes a string as its first argument and a string as its second argument.\n * Returns the concatenation of the two strings.\n */\n\n", "\n\nvar write_js_function_to_count_number_of_substrings_with_the_sum_of_digits_equal_to_their_length = function(s, n) {\n    var func = function(arr) {\n        arr.map(", "\nvar countFunction = function(s, n) {\n    var length = s.length;\n    var total = 0;\n    for (var i = 0; i < n; i++) {\n        var current = s.substring(i, length);\n        var count = current.length;\n        total += count;\n    }\n    return total;\n};\n```\n\nIn this case, `substring()` function is a function from the standard JavaScript library. You can access its arguments using `arguments` object. The `length` property of the `arguments` object is the length of the string you're counting. The `substring()` function has `length` as its first argument and the `length` property of the `arguments` object as its second argument.\n\nYou can use `length` property of `arguments` object to access the string argument. Notice that `length` property of `arguments` object is the length of the string you're counting.\n\n### How do I use this function?\n\nYou can use the `countFunction` to count number of substrings with the sum of digits equal to their length.\n\n```javascript\ncountFunction(\"test\", 2);\n// => 6\n```\n\nThe first argument of `countFunction()` is the string you're counting. The second argument is the number of substrings you're counting.\n\nNow you can use `arguments` object to access the first argument of `countFunction()`. Notice that `length` property of `arguments` object is the length of the string you're counting.\n\n```javascript\ncountFunction(\"test\", 2);\n// => 6\n```\n\n### What's the benefit of using the `countFunction`?\n\nUse this "]}
{"task_id": "MBJSP/62", "prompt": "function smallestNum(xs) {\n/**\n * * Write a JavaScript function to find smallest number in a list.\n */", "entry_point": "smallestNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 1, 45, 99];\nvar x0 = smallestNum(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = smallestNum(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [45, 46, 50, 60];\nvar x2 = smallestNum(arg20);\nvar v2 = 45;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find smallest number in a list.", "language": "javascript", "canonical_solution": "  return Math.min(...xs);\n}", "completion": ["\n\nvar num = n;\nvar nums = [];\nwhile (num > 0) {\n  nums.push(num);\n  num--;\n}\n\n/**\n * * Write a JavaScript function to find smallest number in a list.\n */\n\nvar num = n;\nvar nums = [];\nwhile (num > 0) {\n  nums.push(num);\n  num--;\n}\n\n/**\n * * Write a JavaScript function to find largest number in a list.\n */\n\nvar num = n;\nvar nums = [];\nwhile (num > 0) {\n  nums.push(num);\n  num--;\n}\n\n/**\n * * Write a JavaScript function to find largest number in a list.\n */\n\nvar num = n;\nvar nums = [];\nwhile (num > 0) {\n  nums.push(num);\n  num--;\n}\n\n/**\n * * Write a JavaScript function to find smallest number in a list.\n */\n\nvar num = n;\nvar nums = [];\nwhile (num > 0) {\n  nums.push(num);\n  num--;\n}\n\n/**\n * * Write a JavaScript function to find smallest number in a list.\n */\n\nvar num = n;\nvar nums = [];\nwhile (num > 0) {\n  nums.push(num);\n  num--;\n}\n\n/**\n * * Write a JavaScript function to find largest number in a list.\n */\n\nvar num = n;\nvar nums = [];\nwhile (num > 0) {\n  nums.push(num);\n  num--;\n}\n\n/**\n * * Write a JavaScript ", "\nlet ys = getYs(xs);\n\n/**\n * * Create an empty array `ys_new`.\n */\nlet ys_new = [];\n\n/**\n * * Loop `ys` and add each value to `ys_new`.\n */\nys.forEach(ys => {\n\n/**\n * * Find the smallest value in `ys`.\n */\nys_new.push(...ys.sort((a, b) => a - b));\n\n});\n\n/**\n * * Write a JavaScript function to find the largest number in a list.\n */\nlet ys_new_1 = getYs(xs);\n\n/**\n * * Create an empty array `ys_new_1`.\n */\nlet ys_new_1_1 = [];\n\n/**\n * * Loop `ys` and add each value to `ys_new_1`.\n */\nys.forEach(ys => {\n\n/**\n * * Find the largest value in `ys`.\n */\nys_new_1.push(...ys.sort((a, b) => b - a));\n\n});\n\n/**\n * * Write a JavaScript ", "\nlet min = xs[0];\nfor (let i = 1; i < xs.length; i++) {\nif (xs[i] < min) min = xs[i];\n}\nconsole.log(min);\n}<|endoftext|>", "\n  \"use strict\";\n\n  var xs = xs.slice();\n  var functionName = getFunctionName(xs);\n  var functionBody = getFunctionBody(xs);\n  var functionArguments = getFunctionArguments(xs);\n  var functionArgumentsString = getFunctionArgumentsString(xs);\n  var fns = getAllFunctionNameAndArguments(xs);\n\n  var functionNameAndBody = \"", "\n/**\n * * Write a JavaScript function to find largest number in a list.\n */\n/**\n * * Write a JavaScript function to find the length of a list.\n */\n/**\n * * Write a JavaScript function to find the sum of a list.\n */\n/**\n * * Write a JavaScript function to find the average of a list.\n */\n/**\n * * Write a JavaScript function to find the product of a list.\n */\n/**\n * * Write a JavaScript function to find a subset of a list.\n */\n/**\n * * Write a JavaScript function to check whether a list is a palindrome.\n */\n/**\n * * Write a JavaScript function to check whether a number is prime.\n */\n/**\n * * Write a JavaScript function to find the number of primes in a list.\n */\n/**\n * * Write a JavaScript function to find the largest prime factor of a number.\n */\n/**\n * * Write a JavaScript function to find the smallest prime factor of a number.\n */\n/**\n * * Write a JavaScript function to find the greatest common divisor of two numbers.\n */\n/**\n * * Write a JavaScript function to find the smallest common multiple of two numbers.\n */\n/**\n * * Write a JavaScript function to find the factorial of a number.\n */\n/**\n * * Write a JavaScript function to find the first 10 natural numbers.\n */\n/**\n * * Write a JavaScript function to find the first 10 prime numbers.\n */\n/**\n * * Write a JavaScript function to find the first 10 palindrome numbers.\n */\n/**\n * * Write a JavaScript function to find the first 10 natural numbers in which the number of digits is the same as the number itself.\n */\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/63", "prompt": "function maxDifference(testlist) {\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */", "entry_point": "maxDifference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 5], [1, 7], [10, 3], [1, 2]];\nvar x0 = maxDifference(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 6], [2, 17], [9, 13], [11, 12]];\nvar x1 = maxDifference(arg10);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[12, 35], [21, 27], [13, 23], [41, 22]];\nvar x2 = maxDifference(arg20);\nvar v2 = 23;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum difference between available pairs in the given tuple list.", "language": "javascript", "canonical_solution": "  let maxDiff = 0;\n\n  // loop through all tuples and find the diff between the max\n  // and min values in the tuple, and record the max difference\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    const max = Math.max(...tuple);\n    const min = Math.min(...tuple);\n    const diff = max - min;\n    maxDiff = Math.max(maxDiff, diff);\n  }\n  return maxDiff;\n}", "completion": ["\n    if (availablepairs.length == 0) {\n        $('#accuracy').html('<h4>No matches found</h4>');\n        return;\n    }\n    // The best pair is the pair with the maximum difference value\n    var bestpair = null;\n    for (var i=0; i < availablepairs.length; ++i) {\n        var currentpair = availablepairs[i];\n        var difference = Math.abs(currentpair[0]-currentpair[1]);\n        if (bestpair == null || difference > bestpair[2]) {\n            bestpair = currentpair;\n        }\n    }\n    var $bestpair = $('#accuracy').empty();\n    var $bestpairheading = $bestpair.append(getaccuracyheading());\n    $bestpairheading.append('<h4>The best pair is '+bestpair[0]+'-'+bestpair[1]+'</h4>');\n    $bestpairheading.append('<h4>The difference between the best pair is '+bestpair[2]+'</h4>');\n    var $pairs = $('#accuracy').empty();\n    var $pairsheading = $pairs.append(getaccuracyheading());\n    $pairsheading.append('<h4>The available pairs are '+availablepairs.length+' pairs</h4>');\n}\n<|endoftext|>", "\nvar diff = ", "\n#define MAX_DIFF(list, testlist, testsize) (max_diff(list, testlist, testsize))\n/**\n * * Find the maximum difference between available pairs in the given tuple list.\n */\nstatic int max_diff(TupleList *tuple_list,\n                     TupleList *testlist, int testsize) {\n  int max_diff = 0;\n  for (int i = 0; i < testsize; i++) {\n    int test_i = testlist->items[i];\n    int diff = 0;\n    for (int j = 0; j < testsize; j++) {\n      int test_j = testlist->items[j];\n      diff = MAX(diff, abs(test_i - test_j));\n    }\n    max_diff = MAX(max_diff, diff);\n  }\n  return max_diff;\n}\n\n/**\n * * Write a ", "\n\n#include <iostream>\nusing namespace std;\n\nint maximumDifference(int *a, int n, int *b, int m) {\n  int dp[n + 1][m + 1];\n  for (int i = 0; i < n + 1; i++) {\n    for (int j = 0; j < m + 1; j++) {\n      if (i == 0 || j == 0) {\n        dp[i][j] = 0;\n      } else if (a[i - 1] == b[j - 1]) {\n        dp[i][j] = 1 + dp[i - 1][j - 1];\n      } else {\n        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[n][m];\n}\n\nint main() {\n  int *a = new int[5];\n  int *b = new int[5];\n  a[0] = 8;\n  a[1] = 1;\n  a[2] = 2;\n  a[3] = 6;\n  a[4] = 5;\n  b[0] = 5;\n  b[1] = 3;\n  b[2] = 2;\n  b[3] = 1;\n  b[4] = 4;\n\n  int res = maximumDifference(a, 5, b, 5);\n  cout << res << endl;\n\n  return 0;\n}\n}\n\nOutput\n8\n0\n<|endoftext|>", "\ndiff_max(*testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n */\ndiff_max(testlist);\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/64", "prompt": "function subjectMarks(subjectmarks) {\n/**\n * * Write a function to sort a list of tuples using lambda.\n */", "entry_point": "subjectMarks", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]];\nvar x0 = subjectMarks(arg00);\nvar v0 = [[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]];\nvar x1 = subjectMarks(arg10);\nvar v1 = [[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]];\nvar x2 = subjectMarks(arg20);\nvar v2 = [[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a list of tuples using lambda.", "language": "javascript", "canonical_solution": "  return subjectmarks.sort((a, b) => {\n    return a[1] - b[1];\n  });\n}", "completion": ["\n", "\n\nvar a = [2,1,4];\na.sort((x,y)=>x-y);\n\n\n\n\n/***\n * * Write a function to sort a list of tuples using lambda.\n */\n\nvar a = [2,1,4];\na.sort((x,y)=>x-y);\n\n\n\n\n\n/***\n * * Write a ", "\n", "\nlist = [\n    ('a', 1),\n    ('b', 2),\n    ('c', 3),\n];\n\n/**\n * * Write a function to find the minimum item in a list.\n */\nfindMin = function(list) {\n    return min(list);\n};\n\n/**\n * * Write a function to find the maximum item in a list.\n */\nfindMax = function(list) {\n    return max(list);\n};\n\n/**\n * * Write a function to find the sum of all items in a list.\n */\nfindSum = function(list) {\n    return sum(list);\n};\n\n/**\n * * Write a function to calculate the average of a list of numbers.\n */\nfindAverage = function(list) {\n    return sum(list) / list.length;\n};\n\n/**\n * * Write a function to check if an item exists in a list.\n */\nfind = function(list, item) {\n    return findIndex(list, item)!== -1;\n};\n\n/**\n * * Write a function to remove the first item of a list if it exists.\n */\nremove = function(list, item) {\n    var index = findIndex(list, item);\n    if (index!== -1) list.splice(index, 1);\n};\n\n/**\n * * Write a function to remove the last item of a list if it exists.\n */\nremoveLast = function(list) {\n    if (list.length) list.pop();\n};\n\n/**\n * * Write a function to find the index of an item in a list.\n */\nfindIndex = ", "\n\n// Write a lambda function that returns a number to sort by.\n"]}
{"task_id": "MBJSP/65", "prompt": "function recursiveListSum(datalist) {\n/**\n * * Write a function of recursion list sum.\n */", "entry_point": "recursiveListSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, [3, 4], [5, 6]];\nvar x0 = recursiveListSum(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 10, [15, 14], [19, 41]];\nvar x1 = recursiveListSum(arg10);\nvar v1 = 106;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, [30, 40], [50, 60]];\nvar x2 = recursiveListSum(arg20);\nvar v2 = 210;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function of recursion list sum.", "language": "javascript", "canonical_solution": "  if (dataList.length === 0) {\n    return 0;\n  }\n\n  const [head, ...tail] = dataList;\n  if (Array.isArray(head)) {\n    return recursiveListSum(tail) + recursiveListSum(head);\n  }\n\n  return head + recursiveListSum(tail);\n}", "completion": ["\n    const funcsum = (arr, acc) => {\n        let sum = 0;\n        arr.forEach((el, idx) => {\n            if (idx === arr.length - 1) {\n                sum += el;\n            } else {\n                sum += el + funcsum(arr, el);\n            }\n        });\n        return sum;\n    };\n    let sum = funcsum(datalist, 0);\n    return sum;\n};\n```\n\nWe just added two more functions, `funcsum` and `funcsumList`, which just returns the sum of numbers in a ", "\n        sum += datalist[i];\n    }\n    return sum;\n}\n\n/**\n * * Add a function of recursion list sum.\n */\n    sum += recursive_list_sum(datalist);\n\n/**\n * * Find a function of recursion list sum.\n */\n    if (size > 0) {\n        for (i = 0; i < size; i++) {\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a function of recursion list sum.\n */\n        sum += recursive_list_sum(datalist);\n/**\n * * Write a ", "\n", "\n    ", "\n    print(sum_recursive(datalist));\n    print(sum_recursive2(datalist));\n}\n\n/**\n * * Write a function of recursive list product.\n */\nvoid print(int product) {\n/**\n * * Write a function of recursive list sum.\n */\n    print(product_recursive(product));\n    print(product_recursive2(product));\n}\n\n/**\n * * Write a function of recursive list product.\n */\nint product_recursive(int product) {\n/**\n * * Write a function of recursive list sum.\n */\n    return product_recursive(product * 2);\n}\n\n/**\n * * Write a function of recursive list product.\n */\nint product_recursive2(int product) {\n/**\n * * Write a function of recursive list sum.\n */\n    return product_recursive2(product * 2);\n}\n\n/**\n * * Write a function of recursive list product.\n */\nint product_recursive3(int product) {\n/**\n * * Write a function of recursive list sum.\n */\n    if(product == 1)\n        return 1;\n\n    return product_recursive3(product * 2);\n}\n\n/**\n * * Write a function of recursive list product.\n */\nint product_recursive4(int product) {\n/**\n * * Write a "]}
{"task_id": "MBJSP/66", "prompt": "function posCount(list) {\n/**\n * * Write a JavaScript function to count positive numbers in a list.\n */", "entry_point": "posCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, -2, 3, -4];\nvar x0 = posCount(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 4, 5, -1];\nvar x1 = posCount(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar x2 = posCount(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count positive numbers in a list.", "language": "javascript", "canonical_solution": "  return list.filter(num => num > 0).length;\n}", "completion": ["\n", "\n\ncount_positive_numbers_in_a_list.write = function (text) {\n    var _this = this;\n    // Check if it is a number\n    var is_number = (typeof (text) === \"number\");\n    if (is_number) {\n        var positive_numbers = [];\n        var text_array = text.split(\" \");\n        text_array.forEach(", "\n", "\n\n", "\n"]}
{"task_id": "MBJSP/67", "prompt": "function bellNumber(n) {\n/**\n * * Write a function to find the number of ways to partition a set of bell numbers.\n */", "entry_point": "bellNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = bellNumber(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = bellNumber(arg10);\nvar v1 = 115975;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 56;\nvar x2 = bellNumber(arg20);\nvar v2 = 6775685320645824322581483068371419745979053216268760300;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the number of ways to partition a set of bell numbers.", "language": "javascript", "canonical_solution": "  // TODO: Your code here\n}", "completion": ["\n", "\nvar BellNumber = (", "\nvar Bell = function () {\nvar bell_1 = Bell.bind(null, 1), _a = [1, 1, 2], num_ways_1 = _a[0], partition_1 = _a[1], _b = [1, 3, 5], num_ways_2 = _b[0], partition_2 = _b[1], _c = [1, 3, 7, 11], num_ways_3 = _c[0], partition_3 = _c[1], _d = [1, 3, 7, 11, 15], num_ways_4 = _d[0], partition_4 = _d[1];\n/**\n * function Bell(num, partition) {\n *     // Base case\n *     if (num === 0) return partition;\n *     // For each number from 1 to num, calculate the partitions for the remaining numbers\n *     // (i.e. Bell(num - 1, 1), Bell(num - 1, 2), Bell(num - 1, 3))\n *     for (var _i = 0, _a = Array(num + 1); _i < _a.length; _i++) {\n *         var number = _a[_i];\n *         var remaining = num - number;\n *         partition = Bell(remaining, partition + number);\n *     }\n *     return partition;\n * }\n */\n", "\n\n/**\n * * Function to find the number of ways to partition a set of bell numbers.\n *\n * @param {number} n Size of the set of bell numbers.\n * @return {number} Number of ways to partition a set of bell numbers.\n */\n\n/**\n * * Function to find the number of ways to partition a set of bell numbers.\n *\n * @param {number} n Size of the set of bell numbers.\n * @return {number} Number of ways to partition a set of bell numbers.\n */\n\n/**\n * @module permutations\n */\n\n/**\n * @param {number} n\n * @return {number}\n */\n\n\n/**\n * @param {number} n\n * @return {number}\n */\nexports.permutations = function (n) {\n  /**\n   * * @private\n   * * @class Permutation\n   * @classdesc Permutation of n elements.\n   */\n\n  ", "\nvar BellNumber = ("]}
{"task_id": "MBJSP/68", "prompt": "function isMonotonic(a) {\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */", "entry_point": "isMonotonic", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [6, 5, 4, 4];\nvar x0 = isMonotonic(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 3];\nvar x1 = isMonotonic(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 2];\nvar x2 = isMonotonic(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the given array is monotonic or not.", "language": "javascript", "canonical_solution": "    if (a.length === 1) return true;\n    let isAscending = true;\n    let isDescending = true;\n    for (let i = 0; i < a.length - 1; i++) {\n        if (a[i] > a[i + 1]) {\n            isAscending = false;\n        }\n        if (a[i] < a[i + 1]) {\n            isDescending = false;\n        }\n    }\n    return isAscending || isDescending;\n}", "completion": ["\n\nvar Monotonic = function () {\n\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n * @param {number[]} array\n * @returns {boolean}\n */\n\nvar Monotonic = function () {\n\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n * @param {!Array.<number>} array\n * @returns {!boolean}\n */\n\nvar Monotonic = function () {\n\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n * @param {!Array.<number>} array\n * @returns {!boolean}\n */\n\n\n", "\n", "\nvar isMonotonic = function isMonotonic(a) {\n    if (a.length === 0) return false;\n    for (var i = 1; i < a.length; i++) {\n        if (a[i] <= a[i - 1]) return false;\n    }\n    return true;\n};\n\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\nvar isMonotonic2 = function isMonotonic2(a) {\n    if (a.length === 0) return false;\n    for (var i = 1; i < a.length; i++) {\n        if (a[i] < a[i - 1]) return false;\n    }\n    return true;\n};\n\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\nvar isMonotonic3 = function isMonotonic3(a) {\n    if (a.length === 0) return false;\n    for (var i = 1; i < a.length; i++) {\n        if (a[i] > a[i - 1]) return false;\n    }\n    return true;\n};\n\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\nvar isMonotonic4 = function isMonotonic4(a) {\n    if (a.length === 0) return false;\n    for (var i = 1; i < a.length; i++) {\n        if (a[i] <= a[i - 1]) return false;\n    }\n    return true;\n};\n\n/**\n * * Write a JavaScript ", "\na: any[],\n/**\n * * Check whether the given array is monotonic or not.\n */\nisMonotonic(a) {\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Check whether the given array is monotonic or not.\n */\nisMonotonic(a) {\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript function to check whether the given array is monotonic or not.\n */\na: any[],\n/**\n * * Write a JavaScript ", "\n\n/**\n * * The main function\n */\n"]}
{"task_id": "MBJSP/69", "prompt": "function isSublist(l, s) {\n/**\n * * Write a function to check whether a list contains the given sublist or not.\n */", "entry_point": "isSublist", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, 3, 5, 7];\nvar arg01 = [3, 7];\nvar x0 = isSublist(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 3, 5, 7];\nvar arg11 = [4, 3];\nvar x1 = isSublist(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 3, 5, 7];\nvar arg21 = [1, 6];\nvar x2 = isSublist(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether a list contains the given sublist or not.", "language": "javascript", "canonical_solution": "  var sLen = s.length;\n  var lLen = l.length;\n  if (sLen > lLen) return false;\n  for (var i = 0; i < lLen; i++) {\n    if (l[i] === s[0]) {\n      var j = 1;\n      for (; j < sLen; j++) {\n        if (l[i + j] !== s[j]) {\n          break;\n        }\n      }\n      if (j === sLen) {\n        return true;\n      }\n    }\n  }\n  return false;\n}", "completion": ["\n\n", "\n\n}\n```\n\nThe output for this example should be:\n\n```\n", "\n/**\n * * Write a function to create a sublist.\n */\n/**\n * * Write a function to create a sublist.\n */\n/**\n * * Write a function to remove the duplicates of a list.\n */\n/**\n * * Write a function to compute the length of a list.\n */\n/**\n * * Write a function to check whether a list is empty or not.\n */\n/**\n * * Write a function to check whether a list contains duplicate values or not.\n */\n/**\n * * Write a function to check whether a list contains duplicate values or not.\n */\n/**\n * * Write a function to find the first appearance of the given element in the list or not.\n */\n/**\n * * Write a function to find the first appearance of the given element in the list or not.\n */\n/**\n * * Write a function to find the first appearance of the given element in the list or not.\n */\n/**\n * * Write a function to find the first appearance of the given element in the list or not.\n */\n/**\n * * Write a function to sort a list using bubble sort.\n */\n/**\n * * Write a function to sort a list using insertion sort.\n */\n/**\n * * Write a function to sort a list using selection sort.\n */\n/**\n * * Write a function to sort a list using merge sort.\n */\n/**\n * * Write a function to sort a list using quick sort.\n */\n/**\n * * Write a function to sort a list using shell sort.\n */\n/**\n * * Write a function to sort a list using heap sort.\n */\n/**\n * * Write a function to sort a list using counting sort.\n */\n/**\n * * Write a ", "\n\nlist.contains = function(l, s) {\n/**\n * * A function to check whether a list contains the given sublist or not.\n */\n\nlist.contains = function(l, s) {\n/**\n * * A function to check whether a list contains the given sublist or not.\n */\n\nlist.contains = function(l, s) {\n/**\n * * Write a function to check whether a list contains the given sublist or not.\n */\n\nlist.contains = function(l, s) {\n/**\n * * A function to check whether a list contains the given sublist or not.\n */\n\nlist.contains = function(l, s) {\n/**\n * * A function to check whether a list contains the given sublist or not.\n */\n\nlist.contains = function(l, s) {\n/**\n * * Write a function to check whether a list contains the given sublist or not.\n */\n\nlist.contains = function(l, s) {\n/**\n * * Write a function to count the number of times a sublist occurs in a list.\n */\n\nlist.count = function(l, s) {\n/**\n * * A function to count the number of times a sublist occurs in a list.\n */\n\nlist.count = function(l, s) {\n/**\n * * Write a function to get the second element of a list.\n */\n\nlist.getSecond = function(l) {\n/**\n * * A function to get the second element of a list.\n */\n\nlist.getSecond = function(l) {\n/**\n * * Write a function to get the second element of a list.\n */\n\nlist.getSecond = ", "\n#include <stdlib.h>\n\nint main() {\n    int i;\n    int *l = malloc(sizeof(int) * 5);\n    for (i = 0; i < 5; ++i) {\n        l[i] = rand() % 50;\n    }\n    int *s = malloc(sizeof(int) * 3);\n    for (i = 0; i < 3; ++i) {\n        s[i] = rand() % 25;\n    }\n    int *v = malloc(sizeof(int) * 5);\n    int *w = malloc(sizeof(int) * 5);\n    int ret = 0;\n    for (i = 0; i < 5; ++i) {\n        v[i] = rand() % 25;\n        w[i] = rand() % 25;\n    }\n    ret = contains_sublist(l, s);\n    free(l);\n    free(s);\n    free(v);\n    free(w);\n    return 0;\n}\n```\n\nIn the above program, it would be nice if the function was all static and so the `free` does not need to be called, as it does not need to be called for every value. However, the function is using the `free` "]}
{"task_id": "MBJSP/70", "prompt": "function getEqual(input, k) {\n/**\n * * Write a function to find whether all the given tuples have equal length or not.\n */", "entry_point": "getEqual", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[11, 22, 33], [44, 55, 66]];\nvar arg01 = 3;\nvar x0 = getEqual(arg00, arg01);\nvar v0 = \"All tuples have same length\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5, 6, 7]];\nvar arg11 = 3;\nvar x1 = getEqual(arg10, arg11);\nvar v1 = \"All tuples do not have same length\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2], [3, 4]];\nvar arg21 = 2;\nvar x2 = getEqual(arg20, arg21);\nvar v2 = \"All tuples have same length\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find whether all the given tuples have equal length or not.", "language": "javascript", "canonical_solution": "  const length = input.length;\n  const tupleLength = input[0].length;\n  const tupleLengths = new Array(length).fill(0);\n  for (let i = 0; i < length; i++) {\n    tupleLengths[i] = input[i].length;\n  }\n  if (tupleLengths.every(tupleLength => tupleLength === tupleLengths[0])) {\n    return 'All tuples have same length';\n  }\n  return 'All tuples do not have same length';\n}", "completion": ["\n  write = (tuple) => {\n    console.log(tuple);\n  };\n\n  return () => {\n    process.exit();\n  };\n}\n\nreturn () => {\n  process.exit();\n};\n```\n\n</p>\n<p>\nIf we have a list of tuples and it has only the length of 5, we have 5 possibilities:\n</p>\n<ol style=\"list-style-type: decimal\">\n<li>The list is not a set of tuples with equal length.</li>\n<li>The list is a set of tuples with equal length.</li>\n<li>The list is not a set of tuples with equal length and it contains repeated tuples.</li>\n<li>The list is a set of tuples with equal length and it contains repeated tuples.</li>\n</ol>\n\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>\n<p>\n</p>", "\n/**\n * @param {string} str\n * @param {", "\nreturn true;\n  }\n});\n</code></pre>\n                        </div>\n                    </div>\n\n                    <div rel=\"yui:methods\" resource=\"#methods\">\n                        <div class=\"section method details\">\n                            <h3 id=\"methods\">Methods</h3>\n                            <div class=\"content\">\n                                    <div class=\"private\" rel=\"yui:method\" resource=\"#method__getNthOccurrence\">\n                                    <h4>\n                                        <a name=\"method__getNthOccurrence\">_getNthOccurrence</a></h4>\n                                    <div class=\"detail\" >\n                                        <code>\n                                         private \n                                        \n                                        void\n                                            <strong property=\"yui:name\">_getNthOccurrence</strong>\n                                           (\n                                                \n                                                        \n                                                         pattern\n                                                    \n                                                \n                                                        , \n                                                         input\n                                                    \n                                                \n                                                        , \n                                                            <a href=\"YAHOO.util.Escape.html#method__getNthRegex\" property=\"yui:name\" title=\"_getNthRegex\">_getNthRegex</a>\n                                                              \n                                                \n                                                        , \n                                                            <a href=\"YAHOO.util.Escape.html#method__getNthRegex", "\nexports.equals_length = function equals_length(tuple) {\n    return (tuple.length === this.length);\n};\n\n/**\n * * Write a function to check whether any two given tuples are of equal length or not.\n */\nexports.has_equal_length = function has_equal_length(tuple) {\n    for (var k in tuple) {\n        if (k in this) {\n            if (!(tuple[k] instanceof Array) ||!(this[k] instanceof Array)) {\n                throw new Error('One of the two given tuples should be of array type.');\n            }\n\n            if (tuple[k].length!== this[k].length) {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n * * Write a function to compute the intersection of two given tuples.\n */\nexports.intersection = ", "\nconst has_equal_length = (...args) => args.filter(a => a.length === args[0].length).length > 0;\n```\n\n![](https://cdn.rawgit.com/Khan/dev-utils/master/assets/images/has_equal_length.gif?sanitize=true)\n\n## Challenge\n\n1.  Write a function to find the longest word in the `args` array that has a length of exactly `args[0]`: `longest_word_with_length(args, k)`, where `k` is the value of the parameter.\n2.  Write a function to find the longest word in the `args` array that has a length of at least `args[0]`: `longest_word_with_at_least_length(args, k)`, where `k` is the value of the parameter.\n3.  Write a function to find the longest word in the `args` array that has a length of at most `args[0]`: `longest_word_with_at_most_length(args, k)`, where `k` is the value of the parameter.\n\n![](https://cdn.rawgit.com/Khan/dev-utils/master/assets/images/longest_word_with_length.gif?sanitize=true)\n\n## Todo\n\n1.  Write a function to find the shortest word in the `args` array that has a length of exactly `args[0]`: `shortest_word_with_length(args, k)`, where `k` is the value of the parameter.\n2.  Write a "]}
{"task_id": "MBJSP/71", "prompt": "function combSort(nums) {\n/**\n * * Write a function to sort a list of elements using comb sort.\n */", "entry_point": "combSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 15, 37, 25, 79];\nvar x0 = combSort(arg00);\nvar v0 = [5, 15, 25, 37, 79];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [41, 32, 15, 19, 22];\nvar x1 = combSort(arg10);\nvar v1 = [15, 19, 22, 32, 41];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [99, 15, 13, 47];\nvar x2 = combSort(arg20);\nvar v2 = [13, 15, 47, 99];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a list of elements using comb sort.", "language": "javascript", "canonical_solution": "  if (nums.length < 2) return nums;\n  const swap = (arr, i, j) => {\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  };\n  let gap = nums.length;\n  let shrink = 1.3;\n  while (gap > 1 || gap > shrink) {\n    if (gap > 1) gap = Math.floor(gap / shrink);\n    else gap = 1;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        swap(nums, i, i + gap);\n      }\n    }\n  }\n  return nums;\n}", "completion": ["\n    return function combSort(ary) {\n        ary.sort(", "\nvar combSort = function(nums, numsLen, min, max) {\n\tvar key = null;\n\tvar sortLen = numsLen;\n\tif(min < nums[numsLen-1]) {\n\t\tkey = min;\n\t\tsortLen = numsLen - 1;\n\t}\n\tif(max > nums[numsLen-1]) {\n\t\tkey = max;\n\t\tsortLen = numsLen - 1;\n\t}\n\tif(key) {\n\t\treturn sortLen = combSort(nums, numsLen - 1, key, max);\n\t}\n\treturn sortLen = combSort(nums, numsLen - 1, min, key);\n};\n\n/**\n * * Write a function to sort a list of elements using insertion sort.\n */\nvar insertionSort = function(nums, numsLen) {\n\tfor(var i = 1; i < numsLen; i++) {\n\t\tvar j = i;\n\t\twhile(j > 0 && nums[j] < nums[j-1]) {\n\t\t\tvar temp = nums[j];\n\t\t\tnums[j] = nums[j-1];\n\t\t\tnums[j-1] = temp;\n\t\t\tj--;\n\t\t}\n\t}\n\treturn nums;\n};\n\n/**\n * * Write a function to sort a list of elements using selection sort.\n */\nvar selectionSort = ", "\nvar combinationsSort = function combinationsSort(p, list) {\n  var sorted = [];\n  var listToSort = list;\n\n  while (true) {\n    if (listToSort.length === 1) {\n      sorted.push(listToSort[0]);\n      break;\n    } else if (listToSort.length === 2) {\n      var sorted1 = combinationsSort(p, listToSort[0]);\n      var sorted2 = combinationsSort(p, listToSort[1]);\n      sorted.push(sorted1[sorted1.length - 1]);\n      sorted.push(sorted2[sorted2.length - 1]);\n      break;\n    } else {\n      var sorted1 = combinationsSort(p, listToSort[0]);\n      var sorted2 = combinationsSort(p, listToSort[1]);\n      var sorted3 = combinationsSort(p, listToSort[2]);\n      sorted.push(sorted1[sorted1.length - 1]);\n      sorted.push(sorted2[sorted2.length - 1]);\n      sorted.push(sorted3[sorted3.length - 1]);\n      listToSort = listToSort.slice(3);\n    }\n  }\n  return sorted;\n};\n/**\n * * Write a function to generate all permutations of a list of elements.\n */\nvar generateAllPermutations = ", "\n\nconst writeSort = (nums, sortFunction) => {\n  const sorted = nums.sort(sortFunction);\n  sorted.forEach((n) => {\n    console.log(n);\n  });\n};\n\nwriteSort(nums, (a, b) => {\n  return b - a;\n});\n\n/**\n * * Write a function to write a tree-style representation of an array of elements.\n */\n\nconst writeTree = (nums, depth = 0) => {\n  if (depth > 0) {\n    console.log(' ');\n    for (let i = 0; i < depth; i++) {\n      console.log('|');\n    }\n  }\n  const sorted = nums.sort((a, b) => b - a);\n  sorted.forEach((n) => {\n    console.log(`${n}`);\n  });\n};\n\nwriteTree(nums);\n\n/**\n * * Write a function to convert a list of elements into a string with each element separated by a space.\n */\n\nconst writeToString = (nums) => {\n  const stringed = nums.join(' ');\n  console.log(stringed);\n};\n\nwriteToString(nums);\n\n/**\n * * Write a function to iterate over a list of elements.\n */\n\nconst writeToArray = (nums) => {\n  for (let i = 0; i < nums.length; i++) {\n    console.log(nums[i]);\n  }\n};\n\nwriteToArray(nums);\n\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/72", "prompt": "function difSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented as difference of two squares or not.\n */", "entry_point": "difSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = difSquare(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = difSquare(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = difSquare(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the given number can be represented as difference of two squares or not.", "language": "javascript", "canonical_solution": "    if (n % 4 != 2) {\n        return true\n    }\n    return false\n}", "completion": ["\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two prime numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two prime numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as the difference of two square numbers or not.\n */\n\n/**\n * * Write a JavaScript ", "\n", "\n", "\n", "\n\n"]}
{"task_id": "MBJSP/73", "prompt": "function multipleSplit(text) {\n/**\n * * Write a function to split the given string with multiple delimiters by using regex.\n */", "entry_point": "multipleSplit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Forces of the \\ndarkness*are coming into the play.\";\nvar x0 = multipleSplit(arg00);\nvar v0 = [\"Forces of the \", \"darkness\", \"are coming into the play.\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\";\nvar x1 = multipleSplit(arg10);\nvar v1 = [\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Certain services\\nare subjected to change*over the seperate subscriptions.\";\nvar x2 = multipleSplit(arg20);\nvar v2 = [\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to split the given string with multiple delimiters by using regex.", "language": "javascript", "canonical_solution": "  return text.split(/\\*|\\n|\\n\\s/);\n}", "completion": ["\n", "\nexports.split = function (str, regex) {\n/**\n * * Split the given string into an array of strings using the given regex.\n */\n    return str.split(regex);\n};\n/**\n * * Return the given string split into an array of strings using the given regex.\n */\nexports.splitBy = function (str, regex) {\n/**\n * * Split the given string into an array of strings using the given regex.\n */\n    return str.splitBy(regex);\n};\n/**\n * * Return the given string split into an array of strings using the given regex.\n */\nexports.splitAll = function (str, regex) {\n/**\n * * Split the given string into an array of strings using the given regex.\n */\n    return str.splitAll(regex);\n};\n/**\n * * Return the given string split into an array of strings using the given regex.\n */\nexports.splitAt = function (str, regex, index) {\n/**\n * * Split the given string into an array of strings using the given regex.\n */\n    return str.splitAt(regex, index);\n};\n/**\n * * Return the given string split into an array of strings using the given regex.\n */\nexports.splitBetween = function (str, regex, from, to) {\n/**\n * * Split the given string into an array of strings using the given regex.\n */\n    return str.splitBetween(regex, from, to);\n};\n/**\n * * Return a single array of strings containing the substrings from the given string split into an array of strings using the given regex.\n */\nexports.splitAllInclusive = ", "\nvar str = '';\nvar delim = '';\n/**\n * * Split the given string with multiple delimiters by using regex.\n */\nvar tokens = [];\n/**\n * * Regex to match each delimiter.\n */\nvar reDelim = /(?:\\r\\n|[\\r\\n])|(?:\\n|\\r)/g;\n/**\n * * Split the given string with multiple delimiters by using regex.\n */\nvar strSplitter = function strSplitter(str, delim) {\n    if (delim == null) {\n        delim = '';\n    }\n    return str.split(delim);\n};\n/**\n * * Match a token by matching it with the given regex.\n */\nvar matchToken = function matchToken(token, re) {\n    if (re == null) {\n        return token === null || token === '';\n    }\n    return re.test(token);\n};\n/**\n * * Get the next token of the given string.\n */\nvar getToken = function getToken(str, re) {\n    return strSplitter(str, re).pop();\n};\n/**\n * * Get the previous token of the given string.\n */\nvar prevToken = function prevToken(str, re) {\n    return strSplitter(str, re).pop() || null;\n};\n/**\n * * Return whether the given string matches the given delimiter.\n */\nvar matchDelimiter = ", "\nexport class StringTokenizer {\n    /**\n     * @param {string} string - The string to tokenize\n     * @param {string} [delimiter=\",\"] - The delimiter to split the string by.\n     * @param {RegExp} [pattern] - The pattern to match the delimiter.\n     * @returns {string[]} The tokens.\n     */\n    public static tokenize(string: string, delimiter?: string, pattern?: RegExp): string[] {\n        if (pattern === void 0) {\n            pattern = /,/g;\n        }\n        if (delimiter === void 0) {\n            delimiter = \",\";\n        }\n        const tokens: string[] = [];\n        let lastIndex = 0;\n        while ((lastIndex = string.indexOf(delimiter, lastIndex))!== -1) {\n            tokens.push(string.substring(lastIndex, lastIndex + delimiter.length));\n            lastIndex += delimiter.length;\n        }\n        tokens.push(string.substring(lastIndex, lastIndex + 1));\n        return tokens;\n    }\n}\n\n/**\n * @param {string} string - The string to tokenize\n * @param {string} [delimiter=\",\"] - The delimiter to split the string by.\n * @param {RegExp} [pattern] - The pattern to match the delimiter.\n * @returns {string[]} The tokens.\n */\nexport ", "\n"]}
{"task_id": "MBJSP/74", "prompt": "function isSamepatterns(colors, patterns) {\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */", "entry_point": "isSamepatterns", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"green\"];\nvar arg01 = [\"a\", \"b\", \"b\"];\nvar x0 = isSamepatterns(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"greenn\"];\nvar arg11 = [\"a\", \"b\", \"b\"];\nvar x1 = isSamepatterns(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"greenn\"];\nvar arg21 = [\"a\", \"b\"];\nvar x2 = isSamepatterns(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether it follows the sequence given in the patterns array.", "language": "javascript", "canonical_solution": "  const map = new Map();\n\n  for (let i = 0; i < colors.length; i++) {\n    const currentColor = colors[i];\n    const currentPattern = patterns[i];\n\n    if (map.has(currentColor)) {\n      const index = map.get(currentColor);\n      if (index === currentPattern) {\n        return true;\n      }\n    }\n\n    map.set(currentColor, currentPattern);\n  }\n\n  return false;\n}", "completion": ["\n    const check = (s: string): boolean => {\n        for (const pattern of patterns) {\n            if (s.startsWith(pattern)) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n/**\n * * Write a function to get the colors used.\n */\n    const get = (): string[] => {\n        const colors = new Set<string>();\n        for (const word of words) {\n            if (word!== '') {\n                colors.add(word);\n            }\n        }\n        return [...colors];\n    };\n\n/**\n * * Write a function to get the patterns used.\n */\n    const getPatterns = (): string[] => {\n        const patterns = new Set<string>();\n        for (const color of colors) {\n            for (const colorPattern of colorPatterns) {\n                patterns.add(colorPattern.replace('<color>', color));\n            }\n        }\n        return [...patterns];\n    };\n\n/**\n * * Write a function to get the colors.\n */\n    const getColors = (): string[] => [...colors];\n\n/**\n * * Write a ", "\n        checkSequence: function (sequence, patterns) {\n          return sequence == patterns[0];\n        },\n/**\n * * Write a function to check whether the given sequence is in the color palette.\n */\n        isSequence: function (sequence, colors) {\n          return sequence === colors[0];\n        },\n/**\n * * Write a function to check whether the given sequence is in the color palette.\n */\n        getSequenceLength: function (sequence, colors) {\n          return colors.indexOf(sequence);\n        },\n/**\n * * Write a function to move the pointer to the next sequence in the color palette.\n */\n        nextSequence: function (colors, patterns) {\n          if (colors.length == 0) {\n            return colors.indexOf(patterns[0]);\n          }\n          return colors.indexOf(patterns[0]) + 1;\n        },\n/**\n * * Write a function to move the pointer to the previous sequence in the color palette.\n */\n        previousSequence: function (colors, patterns) {\n          if (colors.length == 0) {\n            return colors.indexOf(patterns[0]);\n          }\n          return colors.indexOf(patterns[0]) - 1;\n        },\n/**\n * * Write a function to move the pointer to the next color in the color palette.\n */\n        nextColor: function (colors, patterns) {\n          if (colors.length == 0) {\n            return colors.indexOf(patterns[0]);\n          }\n          return colors.indexOf(patterns[0]) + 1;\n        },\n/**\n * * Write a ", "\nlet checkSequence = (next, patterns) => {\n    if (next === null)\n        return false;\n    if (next === patterns[0])\n        return true;\n    if (patterns.length > 1)\n        return checkSequence(next, patterns.slice(1));\n};\n\nlet capitalize = (next) => {\n    if (next.length === 0)\n        return next;\n    let lastChar = next[next.length - 1].toUpperCase();\n    let newNext = next.slice(0, -1) + lastChar;\n    return newNext;\n};\n\nlet swapCase = (next) => {\n    if (next.length === 0)\n        return next;\n    let firstChar = next[0].toUpperCase();\n    let newNext = firstChar + next.slice(1);\n    return newNext;\n};\n\nlet swapChars = (next, chars) => {\n    if (next.length === 0)\n        return next;\n    let newNext = next.slice();\n    chars.forEach((char) => {\n        let pos = next.indexOf(char);\n        newNext = newNext.slice(0, pos) + char + newNext.slice(pos + 1);\n    });\n    return newNext;\n};\n\nlet swapNumbers = (next) => {\n    if (next.length === 0)\n        return next;\n    let newNext = next.slice();\n    let numberCount = 0;\n    let number = '';\n    for (let i = 0; i < newNext.length; i++) {\n        if (newNext[i] === '0') {\n            newNext = newNext.slice(0", "\nconst if_follows = function if_follows(data) {\n    return patterns.includes(data.input);\n}\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */\nconst if_starts_with = function if_starts_with(data) {\n    return patterns.starts_with(data.input);\n}\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */\nconst if_ends_with = function if_ends_with(data) {\n    return patterns.ends_with(data.input);\n}\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */\nconst if_contains = function if_contains(data) {\n    return patterns.contains(data.input);\n}\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */\nconst if_regex_matches = function if_regex_matches(data) {\n    return patterns.regex_matches(data.input);\n}\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */\nconst if_regex_matches_all = function if_regex_matches_all(data) {\n    return patterns.regex_matches_all(data.input);\n}\n/**\n * * Write a function to check whether it follows the sequence given in the patterns array.\n */\nconst if_regex_matches_any = ", "\n\n    "]}
{"task_id": "MBJSP/75", "prompt": "function findTuples(testlist, k) {\n/**\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */", "entry_point": "findTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 24, 12], [7, 9, 6], [12, 18, 21]];\nvar arg01 = 6;\nvar x0 = findTuples(arg00, arg01);\nvar v0 = \"[(6, 24, 12)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 25, 30], [4, 2, 3], [7, 8, 9]];\nvar arg11 = 5;\nvar x1 = findTuples(arg10, arg11);\nvar v1 = \"[(5, 25, 30)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 9, 16], [8, 16, 4], [19, 17, 18]];\nvar arg21 = 4;\nvar x2 = findTuples(arg20, arg21);\nvar v2 = \"[(8, 16, 4)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "language": "javascript", "canonical_solution": "  const result = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = i + 1; j < testList.length; j++) {\n      if (testList[i][0] % k === 0 && testList[j][0] % k === 0) {\n        result.push([testList[i], testList[j]]);\n      }\n    }\n  }\n  return result;\n}", "completion": ["\n\n\t\t// create a list of tuples\n\t\tlet t = createTuples(testlist, k);\n\t\tconsole.log(\"t\", t);\n\t\t// find all tuples with all elements divisible by k\n\t\tlet result = findTuples(t, k);\n\t\tconsole.log(\"result\", result);\n\t\t// return the tuples\n\t\treturn result;\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n", "\n\n", "\nexports.findTuples = function() {\n    if (arguments.length === 0) throw \"no input provided\";\n    if (typeof arguments[0]!== 'object') throw \"input is not an array\";\n    if (arguments[0].length === 0) throw \"input is empty\";\n\n    var k = arguments[1];\n\n    var output = [];\n    var indices = [];\n\n    var data = arguments[0];\n\n    var p = ", "\n// write a function to find tuples which have all elements divisible by k from the given list of tuples\n// use if-else if-else condition to implement that function\n}\n\n/**\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */\n// write a function to find tuples which have all elements divisible by k from the given list of tuples\n// use while-loop to implement that function\n}\n\n/**\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */\n// write a function to find tuples which have all elements divisible by k from the given list of tuples\n// use while-loop to implement that function\n}\n\n/**\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */\n// write a function to find tuples which have all elements divisible by k from the given list of tuples\n// use while-loop to implement that function\n}\n\n/**\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */\n// write a function to find tuples which have all elements divisible by k from the given list of tuples\n// use while-loop to implement that function\n}\n\n/**\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n */\n// write a function to find tuples which have all elements divisible by k from the given list of tuples\n// use while-loop to implement that function\n}\n\n/**\n * * Write a ", "\n\n    "]}
{"task_id": "MBJSP/76", "prompt": "function countSquares(m, n) {\n/**\n * * Write a JavaScript function to count the number of squares in a rectangle.\n */", "entry_point": "countSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = countSquares(arg00, arg01);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 2;\nvar x1 = countSquares(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 1;\nvar x2 = countSquares(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the number of squares in a rectangle.", "language": "javascript", "canonical_solution": "    if (n < m) {\n        temp = m\n        m = n\n        n = temp\n    }\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))\n}", "completion": ["\n", "\n    '", "\nvar writeCountSquares = function (n, m) {\n    console.log(countSquares(n, m));\n};\n\n/**\n * * Write a JavaScript function to find the largest number in a sequence.\n */\nvar writeLargestNumber = function (num1, num2) {\n    console.log(largestNumber(num1, num2));\n};\n\n/**\n * * Write a JavaScript function to find the largest number in a sequence.\n */\nvar writeLargestNumber_1 = function (num1, num2) {\n    console.log(largestNumber_1(num1, num2));\n};\n\n/**\n * * Write a JavaScript function to find the largest number in a sequence.\n */\nvar writeLargestNumber_2 = function (num1, num2) {\n    console.log(largestNumber_2(num1, num2));\n};\n\n/**\n * * Write a JavaScript function to find the largest number in a sequence.\n */\nvar writeLargestNumber_3 = function (num1, num2) {\n    console.log(largestNumber_3(num1, num2));\n};\n\n/**\n * * Write a JavaScript function to find the largest number in a sequence.\n */\nvar writeLargestNumber_4 = function (num1, num2) {\n    console.log(largestNumber_4(num1, num2));\n};\n\n/**\n * * Write a JavaScript function to find the largest number in a sequence.\n */\nvar writeLargestNumber_5 = function (num1, num2) {\n    console.log(largestNumber_5(num1, num2));\n};\n\n/**\n * * Write a JavaScript ", "\n", "\nfun square_count(m: i32, n: i32) -> i32 {\nreturn m * n;\n}\n```\n\nNotice the `fun` declaration, which has a name that does not conflict with any existing JavaScript function name. Name conflicts are resolved as follows:\n\n1. Function names that do not start with an uppercase letter (i.e., no `is` or `as`) are reserved by the JavaScript engine.\n2. Function names that begin with an uppercase letter are reserved by the JavaScript engine and cannot be used as variable names.\n3. Function names that begin with a lowercase letter are reserved by the JavaScript engine.\n4. Function names that begin with an underscore are reserved by the JavaScript engine.\n\nFor example, you can create a function called `square_count` that does the following:\n\n```rust\nextern crate zinc;\nuse zinc::*;\n\nfn square_count(m: i32, n: i32) -> i32 {\n    m * n\n}\n```\n\nNotice that the function `square_count` has three parameter names: `m` for `m`, `n` for `n`, and `square_count` for `count`.\n\nNext, let's add the "]}
{"task_id": "MBJSP/77", "prompt": "function isDiff(n) {\n/**\n * * Write a JavaScript function to find the difference between sum of even and odd digits.\n */", "entry_point": "isDiff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1212112;\nvar x0 = isDiff(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1212;\nvar x1 = isDiff(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the difference between sum of even and odd digits.", "language": "javascript", "canonical_solution": "  var total = 0;\n  var n = (n + '').split('');\n  for (var i = 0; i < n.length; i++) {\n    var temp = parseInt(n[i]);\n    if (i % 2 !== 0) {\n      total += temp;\n    } else {\n      total -= temp;\n    }\n  }\n  return total === 0;\n}", "completion": ["\n", "\n/**\n *  * Write a JavaScript function to find the difference between sum of even and odd digits.\n */\n}\n```\n\nIn the above code, we define a ", "\n\nvar t = new Date();\n\nvar nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar sumEvenOdd = 0;\n\nfor (var i = 0; i < nums.length; i++) {\n  if (nums[i] % 2 == 0)\n    sumEvenOdd += nums[i];\n}\n\nvar difference = Math.abs(sumEvenOdd - sumEvenOdd);\n\nconsole.log(difference)\nconsole.log('The time used:'+ (new Date() - t) +'milliseconds');\n/**\n * * Write a JavaScript function to find the difference between sum of even and odd digits,\n * write the function using recursion and return the difference in the final result.\n */\n\nvar t = new Date();\n\nvar nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar sumEvenOdd = 0;\n\n", "\nvar num1 = Math.floor(Math.random() * n + 1);\nvar num2 = Math.floor(Math.random() * n + 1);\nconsole.log('Initial:', num1, num2);\n/**\n * * Find the number of digits of a given number.\n */\nvar digits = function(n) {\nvar count = 0;\nwhile (n > 0) {\ncount++;\nn = n / 10;\n}\nreturn count;\n};\n/**\n * * Write a JavaScript function to find the difference between the sum of the first odd digits and the sum of the first even digits.\n */\nvar oddSum = function(n) {\nvar odd = 0;\nvar even = 0;\nvar count = digits(n);\nwhile (n > 0) {\nif (n % 2 == 1) {\nodd += n % 10;\n} else {\neven += n % 10;\n}\nn = n / 10;\n}\nreturn odd - even;\n};\nconsole.log('Odd:', oddSum(num1));\nconsole.log('Even:', oddSum(num2));\n}\n/**\n * * Return a random double between 0 and 1.\n */\n", "\nsum_even_odd_digits = function(n) {\nvar s = n.toString();\nvar even_digits = s.match(/\\d+/g);\nvar odd_digits = s.match(/(\\d+)+/g);\nreturn even_digits.length - odd_digits.length;\n}\n}\n}\n\n/**\n * * Find the first occurrence of a number.\n */\nvar first_occurrence = function(n) {\nvar s = n.toString();\nvar i = s.indexOf(String(n));\nreturn i == -1? null : new Number(s.substr(0, i));\n}\n}\n\n/**\n * * Write a JavaScript function to calculate the sum of the first n positive integers, including n.\n */\nvar sum_n = function(n) {\nvar s = 0;\nfor (var i = 1; i <= n; i++) s += i;\nreturn s;\n}\n}\n\n/**\n * * Write a JavaScript function that returns the sum of the first n positive integers, including n, or return an error if n is greater than the number of positive integers.\n */\nvar sum_n_positive = function(n) {\nvar s = 0;\nfor (var i = 1; i <= n; i++) if (isPositive(i)) s += i;\nif (s > n) return \"ERROR: The sum of the first \" + n + \" positive integers is greater than the number of positive integers.\";\nreturn s;\n}\n}\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/78", "prompt": "function countWithOddSetbits(n) {\n/**\n * * Write a JavaScript function to find number of integers with odd number of set bits.\n */", "entry_point": "countWithOddSetbits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = countWithOddSetbits(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = countWithOddSetbits(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = countWithOddSetbits(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find number of integers with odd number of set bits.", "language": "javascript", "canonical_solution": "  return Math.floor(n / 2) + (n & 1)\n}", "completion": ["\n", "\nlet odd_setbits = function odd_setbits(n) {\n  let f = function f(n) {\n    return (n & 1)? odd_setbits(n >>> 1) : f(n >>> 1) + f(n);\n  };\n  return f(n);\n};\n\nOddSetbits(2) === 3;\nOddSetbits(3) === 4;\nOddSetbits(9) === 6;\nOddSetbits(16) === 8;\nOddSetbits(30) === 12;\n\n/**\n * * Write a JavaScript function to find number of integers with odd number of unset bits.\n */\nlet odd_unsetbits = function odd_unsetbits(n) {\n  let f = function f(n) {\n    return (n & 1)? odd_unsetbits(n >>> 1) : f(n >>> 1) + f(n);\n  };\n  return f(n);\n};\n\nOddUnsetbits(2) === 3;\nOddUnsetbits(3) === 4;\nOddUnsetbits(9) === 6;\nOddUnsetbits(16) === 8;\nOddUnsetbits(30) === 12;\n\n/**\n * * Write a JavaScript function to find number of integers with odd number of bits.\n */\nlet odd_bits = function odd_bits(n) {\n  let f = ", "\n", "\nvar n = numberOfOddSetbits(n);\n\nreturn new BDD(n, 'Function');\n}\n\n/**\n * * Write a JavaScript function to find the number of set bits.\n */\n", "\nn.map("]}
{"task_id": "MBJSP/79", "prompt": "function wordLen(s) {\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */", "entry_point": "wordLen", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Hadoop\";\nvar x0 = wordLen(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"great\";\nvar x1 = wordLen(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"structure\";\nvar x2 = wordLen(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the length of the word is odd or not.", "language": "javascript", "canonical_solution": "    return s.length % 2 === 1;\n}", "completion": ["\n\ns.isOdd = ", "\n", "\n/**\n * * Write a JavaScript function that returns the sum of the elements of an array.\n */\n/**\n * * Write a JavaScript function that returns the length of the last element of an array.\n */\n/**\n * * Write a JavaScript function that returns the value of an element of an array, if it exists.\n */\n/**\n * * Write a JavaScript function that returns true if the value of a variable is a power of two.\n */\n/**\n * * Write a JavaScript function that returns true if a string is a palindrome or false if it isn't.\n */\n/**\n * * Write a JavaScript function that returns true if a number is a power of two or false if it isn't.\n */\n/**\n * * Write a JavaScript function that returns the first index of an array, if it exists.\n */\n/**\n * * Write a JavaScript function that returns the index of an array where the value of a variable equals the value of another variable.\n */\n/**\n * * Write a JavaScript function that returns true if an array has a particular index or false if it does not.\n */\n/**\n * * Write a JavaScript function that returns true if the length of an array is greater than a particular value or false if it is less than the value.\n */\n/**\n * * Write a JavaScript function that returns true if the value of a variable is greater than a particular value or false if it is less than the value.\n */\n/**\n * * Write a JavaScript function that returns the maximum element of an array.\n */\n/**\n * * Write a JavaScript function that returns the number of elements in an array.\n */\n/**\n * * Write a JavaScript function that returns the number of elements in an array that are strictly equal to a particular value.\n */\n/**\n * * Write a JavaScript ", "\nconst checkOddFunction = (word: string): boolean => {\n  if (word.length % 2!== 0) {\n    return false;\n  }\n  return true;\n};\n```\n\n## 2.1.1 Writing a JavaScript function with the `new` keyword\n\nThe `new` keyword is not supported in ES2015, so we write our own JavaScript function. Let's write the function using the `new` keyword.\n\nLet's first create a variable with the `new` keyword, and then write the JavaScript function.\n\n```javascript{5}\nconst getOddLength = word => {\n  if (word.length % 2!== 0) {\n    return false;\n  }\n  return true;\n};\n\nconst getOddLength2 = word => {\n  const length = word.length;\n  if (length % 2!== 0) {\n    return false;\n  }\n  return true;\n};\n\nconst getOddLength3 = word => {\n  if (word.length % 2!== 0) {\n    return false;\n  }\n  return true;\n};\n```\n\nWe have already seen that we need to use the `new` keyword in a function. In the next code chunk, we will see how we can use the `new` keyword with a variable.\n\n## 2.1.2 Writing a JavaScript function using the `this` keyword\n\nThe `this` keyword can be used to access the global scope. In JavaScript, this is called the \"context\" of a function. In the `getOddLength` ", "\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript function to check whether the length of the word is odd or not.\n */\nconsole.log(\"Is the length of the word odd or even?\");\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/80", "prompt": "function tetrahedralNumber(n) {\n/**\n * * Write a function to find the nth tetrahedral number.\n */", "entry_point": "tetrahedralNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = tetrahedralNumber(arg00);\nvar v0 = 35.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = tetrahedralNumber(arg10);\nvar v1 = 56.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = tetrahedralNumber(arg20);\nvar v2 = 84.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the nth tetrahedral number.", "language": "javascript", "canonical_solution": "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += (i * (i + 1)) / 2;\n    }\n    return sum;\n}", "completion": ["\n\n}\n\n}<|endoftext|>", "\n\n", "\nvar nthTetrahedralNumber = function nthTetrahedralNumber(n) {\n  if (n <= 0) return 1;\n  return nthTetrahedralNumber(n - 1) + nthTetrahedralNumber(n - 2) + nthTetrahedralNumber(n - 3);\n};\n\n/**\n * * Write a function to find the nth triangular number.\n */\nvar nthTriangularNumber = function nthTriangularNumber(n) {\n  if (n <= 0) return 1;\n  return nthTetrahedralNumber(n + 3) / 2;\n};\n\n/**\n * * Write a function to find the nth triangular number.\n */\nvar nthTriangularNumber2 = function nthTriangularNumber2(n) {\n  if (n <= 0) return 1;\n  return nthTetrahedralNumber(n + 2) / 2;\n};\n\n/**\n * * Write a function to find the nth catalar number.\n */\nvar nthCatalanNumber = function nthCatalanNumber(n) {\n  if (n <= 0) return 1;\n  return nthTetrahedralNumber(n) - nthTriangularNumber(n);\n};\n\n/**\n * * Write a function to find the nth catalar number.\n */\nvar nthCatalanNumber2 = function nthCatalanNumber2(n) {\n  if (n <= 0) return 1;\n  return nthTetrahedralNumber(n) - nthTriangularNumber2(n);\n};\n\n/**\n * * Write a function to find the nth catalar number.\n */\nvar nthCatalanNumber3 = ", "\n", "\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a function to find the nth tetrahedral number.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/81", "prompt": "function zipTuples(testtup1, testtup2) {\n/**\n * * Write a function to zip the two given tuples.\n */", "entry_point": "zipTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [7, 8, 4, 5, 9, 10];\nvar arg01 = [1, 5, 6];\nvar x0 = zipTuples(arg00, arg01);\nvar v0 = [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 9, 5, 6, 10, 11];\nvar arg11 = [2, 6, 7];\nvar x1 = zipTuples(arg10, arg11);\nvar v1 = [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 10, 6, 7, 11, 12];\nvar arg21 = [3, 7, 8];\nvar x2 = zipTuples(arg20, arg21);\nvar v2 = [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to zip the two given tuples.", "language": "javascript", "canonical_solution": "  res = [];\n  for (let i = 0; i < testTup1.length; i += 1) {\n    res.push([testTup1[i], testTup2[i % testTup2.length]]);\n  }\n  return res;\n}", "completion": ["\n\n    // Use this to zip two tuples of lists\n    // https://stackoverflow.com/questions/16367483/zip-two-tuples-of-lists\n    let zip = (...tup) => tup.map((a) => a.concat(a)));\n    let zip_tup = zip(tup1, tup2);\n\n    // Use this to zip two tuples of arrays\n    // https://stackoverflow.com/questions/16367483/zip-two-tuples-of-lists\n    let zip_arr = zip(arr1, arr2);\n\n    // Use this to zip two tuples of arrays, except the first list is the index\n    // https://stackoverflow.com/questions/16367483/zip-two-tuples-of-lists\n    let zip_arr_except_0 = zip(arr1, arr2, (tup1, tup2) => tup1[0] + tup2[0]);\n\n    // Use this to zip two tuples of arrays, except the second list is the index\n    // https://stackoverflow.com/questions/16367483/zip-two-tuples-of-lists\n    let zip_arr_except_1 = zip(arr1, arr2, (tup1, tup2) => tup1[1] + tup2[1]);\n\n    // Use this to zip two tuples of arrays, except the first list is the index\n    // https://stackoverflow.com/questions/16367483/zip-two-tuples-of-lists\n    let zip_arr_except_0_except_1 = zip(arr1, arr2, (tup1, tup2)", "\n\n", "\n};\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a function to zip the two given tuples.\n */\n\n/**\n * * Write a ", "\n        }\n    }\n}\n\n# Test `UNION`\n\n{% for tup in tup_list %}\n# Test `UNION` for `{{ tup.key }}`.\n\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n\n{% set testtup1 = tup %}\n{% set testtup2 = tup %}\n{% set testtup1 =", "\n    "]}
{"task_id": "MBJSP/82", "prompt": "function volumeSphere(r) {\n/**\n * * Write a function to find the volume of a sphere.\n */", "entry_point": "volumeSphere", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = volumeSphere(arg00);\nvar v0 = 4188.790204786391;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 25;\nvar x1 = volumeSphere(arg10);\nvar v1 = 65449.84694978735;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = volumeSphere(arg20);\nvar v2 = 33510.32163829113;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the volume of a sphere.", "language": "javascript", "canonical_solution": "  return (4 / 3) * Math.PI * Math.pow(r, 3);\n}", "completion": ["\n", "\ns.writeVolume = ", "\n", "\nconst writeSphericalVolume = (r) => {\n  const circle = (x, y, z) => {\n    const dx = x - r;\n    const dy = y - r;\n    const dz = z - r;\n    return Math.sqrt(dx * dx + dy * dy + dz * dz) - r;\n  };\n\n  let vol = 0;\n  const steps = Math.ceil(2 * r / 0.1);\n  for (let i = 0; i < steps; ++i) {\n    const th = i * Math.PI / steps;\n    vol += circle(r, r, r - i * 0.1).reduce((a, b) => a + b, 0);\n  }\n  return vol / steps;\n};\n<|endoftext|>", "\n"]}
{"task_id": "MBJSP/83", "prompt": "function getChar(strr) {\n/**\n * * Write a JavaScript function to find the character made by adding all the characters of the given string.\n */", "entry_point": "getChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = getChar(arg00);\nvar v0 = \"f\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"gfg\";\nvar x1 = getChar(arg10);\nvar v1 = \"t\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = getChar(arg20);\nvar v2 = \"c\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the character made by adding all the characters of the given string.", "language": "javascript", "canonical_solution": "  var summ = 0;\n  for (var i = 0; i < strr.length; i++) {\n    summ += (strr.charCodeAt(i) - 'a'.charCodeAt(0) + 1)\n  }\n  if (summ % 26 == 0) {\n    return 'z'\n  } else {\n    summ = summ % 26\n    return String.fromCharCode('a'.charCodeAt(0) + summ - 1)\n  }\n}", "completion": ["\nvar functionWrite = (strr.write = function (str) {\n\tvar f = function (ch) {\n\t\treturn str.charCodeAt(ch.charCodeAt(0) / 32) + ch.charCodeAt(ch.charCodeAt(0) % 32);\n\t}\n\tfor (var i = 0; i < str.length; i++) {\n\t\tvar c = f(str.charAt(i))\n\t}\n\treturn str;\n});\n\n/**\n * * Remove the `th` and `td` elements from the table and add the `delete` class to the delete button.\n */\nvar deleteTable = (strr.deleteTable = function () {\n\tvar $table = strr.$('table'),\n\t\t$tr = $table.find('tr'),\n\t\t$trs = $tr.filter('td'),\n\t\t$deleteBtn = strr.$('#delete-table-btn');\n\t$deleteBtn.addClass('delete');\n\t$trs.each(", "\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript function to find the character made by adding all the characters of the given string.\n// Write a JavaScript ", "\n/* eslint-disable no-useless-escape */\n(", "\n        var func_name = 'code_in_charcode';\n        var func_args = 'this, text';\n        var func_body ='return this.substr(this.indexOf(text), this.length);';\n        var func_body_v2 ='return this.substr(this.indexOf(text), text.length);';\n        var func_body_v3 ='return this.substr(this.indexOf(text), text.length - this.lastIndexOf(text));';\n        var func_body_v4 ='return this.substr(this.indexOf(text), this.length - this.lastIndexOf(text));';\n        var func_body_v5 ='return this.substr(this.indexOf(text), text.length - this.lastIndexOf(text));';\n\n        var func_body_v6 ='return this.substr(this.indexOf(text), this.length - this.lastIndexOf(text));';\n\n        var func_body_v7 ='return this.substr(this.indexOf(text), this.length - this.lastIndexOf(text));';\n\n        var func_body_v8 ='return this.substr(this.indexOf(text), this.length - this.lastIndexOf(text));';\n\n        var func_body_v9 ='return this.substr(this.indexOf(text), this.length - this.lastIndexOf(text));';\n\n        var func_body_v10 ='return this.substr(this.indexOf(text), this.length - this.lastIndexOf(text));';\n\n        var func_body_v11 ='return this.substr(this.indexOf", "\n}\n</pre>\n\n<p>\n<em>Example</em>\n</p>\n\n<pre>\n<b>\n\n("]}
{"task_id": "MBJSP/84", "prompt": "function sequence(n) {\n/**\n * * Write a function to find the n-th number in newman conway sequence.\n */", "entry_point": "sequence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = sequence(arg00);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = sequence(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = sequence(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the n-th number in newman conway sequence.", "language": "javascript", "canonical_solution": "\tif (n == 1 || n == 2) {\n\t\treturn 1\n\t} else {\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n\t}\n}", "completion": ["\n", "\n    ", "\n", "\n\nvar n = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : 2;\nvar m = arguments.length > 2 && arguments[2]!== undefined? arguments[2] : 2;\n\nvar f = [];\nfor (var i = 0; i < m; i++) {\n    var nth = newman(n);\n    f.push(nth);\n}\n\nconsole.log(f);\n/**\n * * Write a ", "\nvar nth = "]}
{"task_id": "MBJSP/85", "prompt": "function surfaceareaSphere(r) {\n/**\n * * Write a function to find the surface area of a sphere.\n */", "entry_point": "surfaceareaSphere", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = surfaceareaSphere(arg00);\nvar v0 = 1256.6370614359173;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = surfaceareaSphere(arg10);\nvar v1 = 2827.4333882308138;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar x2 = surfaceareaSphere(arg20);\nvar v2 = 5026.548245743669;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the surface area of a sphere.", "language": "javascript", "canonical_solution": "  return 4 * Math.PI * r * r;\n}", "completion": ["\n", "\n", "\nfunc(a int) float64 {\n    return 4 * 3.1415 * a * a * a;\n}\n```\n\n```java\nr = new Random();\nn = new int[3];\nfor (i = 0; i < 3; i++) {\n    n[i] = r.nextInt(3) + 1;\n}\nfloat result = 0.0f;\nfor (i = 0; i < n[0] * n[1] * n[2]; i++) {\n    result += 4 * 3.1415 * (n[0] + n[1] + n[2]) * (n[0] + n[1] + n[2]) * (n[0] + n[1] + n[2]);\n}\nprintln(result);\n```\n\n```java\nn = new int[3];\nfor (i = 0; i < 3; i++) {\n    n[i] = r.nextInt(3) + 1;\n}\nfloat result = 0.0f;\nfor (i = 0; i < n[0] * n[1] * n[2]; i++) {\n    result += 4 * 3.1415 * (n[0] + n[1] + n[2]) * (n[0] + n[1] + n[2]) * (n[0] + n[1] + n[2]);\n}\nprintln(result);\n```\n\n```\nresult = 12*12*12\n```\n\n>![](../images/e1078f59f8a9e4e4446bceb8fc8f6e23c36da7bae8f7ce0e2.png)\n\n", "\nmodule.exports = ", "\n"]}
{"task_id": "MBJSP/86", "prompt": "function centeredHexagonalNumber(n) {\n/**\n * * Write a function to find nth centered hexagonal number.\n */", "entry_point": "centeredHexagonalNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = centeredHexagonalNumber(arg00);\nvar v0 = 271;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = centeredHexagonalNumber(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = centeredHexagonalNumber(arg20);\nvar v2 = 217;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find nth centered hexagonal number.", "language": "javascript", "canonical_solution": "  return 3 * n * (n - 1) + 1\n}", "completion": ["\n\n/**\n * * Find nth centered hexagonal number.\n * * Example:\n * * * nth centered hexagonal number of 3 = 9.\n * * * nth centered hexagonal number of 4 = 16.\n * * Example:\n * * * nth centered hexagonal number of 6 = 25.\n */\n\n/**\n * * Write a function to find nth centered hexagonal number.\n */\n\n/**\n * * Find nth centered hexagonal number.\n * * Example:\n * * * nth centered hexagonal number of 3 = 9.\n * * * nth centered hexagonal number of 4 = 16.\n * * Example:\n * * * nth centered hexagonal number of 6 = 25.\n */\n}\n\n/**\n * * Write a function to find nth centered hexagonal number.\n */\n\n/**\n * * Find nth centered hexagonal number.\n * * Example:\n * * * nth centered hexagonal number of 3 = 9.\n * * * nth centered hexagonal number of 4 = 16.\n * * Example:\n * * * nth centered hexagonal number of 6 = 25.\n */\n}\n\n/**\n * * Write a function to find nth centered hexagonal number.\n */\n\n/**\n * * Find nth centered hexagonal number.\n * * Example:\n * * * nth centered hexagonal number of 3 = 9.\n * * * nth centered hexagonal number of 4 = 16.\n * * Example:\n * * * nth centered hexagonal number of 6 = 25.\n */\n}\n\n/**\n * * Write a ", "\nconst center = (n) => {\n  let hexagonalNumber = 1;\n  for (let i = 0; i < n; i++) {\n    hexagonalNumber = hexagonalNumber * 3 + 1;\n  }\n  return hexagonalNumber;\n};\n\nconsole.log(center(3));\nconsole.log(center(5));\nconsole.log(center(7));\nconsole.log(center(9));\n}\n// const centerNumber = (n) => {\n//   let hexagonalNumber = 1;\n//   for (let i = 0; i < n; i++) {\n//     hexagonalNumber = hexagonalNumber * 3 + 1;\n//   }\n//   return hexagonalNumber;\n// };\n// console.log(centerNumber(3));\n// console.log(centerNumber(5));\n// console.log(centerNumber(7));\n// console.log(centerNumber(9));\n// console.log(centerNumber(11))\n// console.log(centerNumber(13))\n// console.log(centerNumber(15))\n// console.log(centerNumber(17))\n// console.log(centerNumber(19))\n// console.log(centerNumber(21))\n// console.log(centerNumber(23))\n// console.log(centerNumber(25))\n// console.log(centerNumber(27))\n// console.log(centerNumber(29))\n// console.log(centerNumber(31))\n// console.log(centerNumber(33))\n// console.log(centerNumber(35))\n// console.log(centerNumber(37))\n// console.log(centerNumber(39))\n// console.log(centerNumber(41))\n// console.log(centerNumber(43))\n//", "\n\n/**\n * Function to find nth centered hexagonal number.\n * @param {number} n - number to find nth centered hexagonal number.\n * @return {number} nth centered hexagonal number.\n */\n", "\n", "\n\n"]}
{"task_id": "MBJSP/87", "prompt": "function mergeDictionariesThree(dict1, dict2, dict3) {\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */", "entry_point": "mergeDictionariesThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg01 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar arg02 = {'\"O\"':\"Orange\",'\"W\"':\"White\",'\"B\"':\"Black\"};\nvar x0 = mergeDictionariesThree(arg00, arg01, arg02);\nvar v0 = {'\"B\"':\"Black\",'\"R\"':\"Red\",'\"P\"':\"Pink\",'\"G\"':\"Green\",'\"W\"':\"White\",'\"O\"':\"Orange\"};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg11 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar arg12 = {'\"L\"':\"lavender\",'\"B\"':\"Blue\"};\nvar x1 = mergeDictionariesThree(arg10, arg11, arg12);\nvar v1 = {'\"W\"':\"White\",'\"P\"':\"Pink\",'\"B\"':\"Black\",'\"R\"':\"Red\",'\"G\"':\"Green\",'\"L\"':\"lavender\"};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"R\"':\"Red\",'\"B\"':\"Black\",'\"P\"':\"Pink\"};\nvar arg21 = {'\"L\"':\"lavender\",'\"B\"':\"Blue\"};\nvar arg22 = {'\"G\"':\"Green\",'\"W\"':\"White\"};\nvar x2 = mergeDictionariesThree(arg20, arg21, arg22);\nvar v2 = {'\"B\"':\"Black\",'\"P\"':\"Pink\",'\"R\"':\"Red\",'\"G\"':\"Green\",'\"L\"':\"lavender\",'\"W\"':\"White\"};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to merge three dictionaries into a single expression.", "language": "javascript", "canonical_solution": "\tconst merged = {};\n\tconst keys = Object.keys({...dict1, ...dict2, ...dict3});\n\n\tfor (const key of keys) {\n\t\tmerged[key] = dict1[key] || dict2[key] || dict3[key];\n\t}\n\treturn merged;\n}", "completion": ["\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n\n\n/**\n * * Write a ", "\n\n\n  // \u901a\u7528\u7684\u8bcd\u5178\u52a0\u8f7d\u5668\n\n  loadDicts(dict1, dict2, dict3) {\n/**\n * * Write a function to merge three dictionaries into a single expression.\n */\n\n    return dict1.concat(dict2, dict3);\n  }\n\n  // \u4e3b\u7a0b\u5e8f\n\n  main() {\n/**\n * * Write a ", "\nreturn function merge(values) {\nvar res = '',\n    count = 0;\n    for (var i = 0; i < values.length; i++) {\n        res = res + values[i].token + values[i].token +'';\n        count += values[i].count;\n    }\n    res = res.trim();\n    res = res +'' + count.toString() +'';\n    return res;\n};\n}\n\n\n/**\n * * Create a function to merge four dictionaries into a single expression.\n */\n", "\n    def merge(d1: Dict[str, int], d2: Dict[str, int], d3: Dict[str, int]) {\n        val result = mutable.Map[String, int]()\n        d1.foreach { k =>\n            if (d2.containsKey(k) && d3.containsKey(k))\n                result.put(k, d1.get(k) + d2.get(k) + d3.get(k))\n            else if (d2.containsKey(k))\n                result.put(k, d1.get(k) + d2.get(k))\n            else if (d3.containsKey(k))\n                result.put(k, d1.get(k) + d3.get(k))\n        }\n        result\n    }\n\n/**\n * * Generate a tokenizer using three dictionaries.\n *\n * @param dict1 the dictionary for the first language\n * @param dict2 the dictionary for the second language\n * @param dict3 the dictionary for the third language\n * @return a function which takes a string and returns a list of tokens\n */\n    def tokenizer(dict1: Dict[str, int], dict2: Dict[str, int], dict3: Dict[str, int]) {\n        merge(dict1, dict2, dict3)\n    }\n\n/**\n * * Generate a tagger using three dictionaries.\n *\n * @param dict1 the dictionary for the first language\n * @param dict2 the dictionary for the second language\n * @param dict3 the dictionary for the third language\n * @return a ", "\n\n/**\n * * Return a string representation of the dictionary.\n * */\n\n/**\n * * Write a function to create a new dictionary from two existing dictionaries.\n */\n\n/**\n * * Write a function to delete the keys and values in two dictionaries.\n */\n\n/**\n * * Write a function to check whether two dictionaries have identical keys and values.\n */\n\n/**\n * * Write a function to check whether a dictionary contains a particular key.\n */\n\n/**\n * * Write a function to check whether a dictionary contains a particular value.\n */\n\n/**\n * * Write a function to check whether a dictionary is empty.\n */\n\n/**\n * * Write a function to check whether a dictionary contains a particular key-value pair.\n */\n\n/**\n * * Write a function to find the number of key-value pairs in a dictionary.\n */\n\n/**\n * * Write a function to find the number of distinct keys in a dictionary.\n */\n\n/**\n * * Write a function to find the number of distinct values in a dictionary.\n */\n\n/**\n * * Write a function to find the maximum key-value pair in a dictionary.\n */\n\n/**\n * * Write a function to find the maximum value in a dictionary.\n */\n\n/**\n * * Write a function to find the minimum key-value pair in a dictionary.\n */\n\n/**\n * * Write a function to find the minimum value in a dictionary.\n */\n\n/**\n * * Write a function to convert a dictionary into a string.\n */\n\n/**\n * * Write a function to convert a string into a dictionary.\n */\n\n/**\n * * Write a function to find the union, the set of all keys, in two dictionaries.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/88", "prompt": "function freqCount(list1) {\n/**\n * * Write a function to get the frequency of the elements in a list.\n */", "entry_point": "freqCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30];\nvar x0 = freqCount(arg00);\nvar v0 = {\"10\":4,\"20\":4,\"40\":2,\"50\":2,\"30\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4];\nvar x1 = freqCount(arg10);\nvar v1 = {\"1\":3,\"2\":2,\"3\":3,\"4\":3};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5];\nvar x2 = freqCount(arg20);\nvar v2 = {\"10\":1,\"5\":3,\"6\":2,\"7\":2,\"4\":2,\"9\":2};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to get the frequency of the elements in a list.", "language": "javascript", "canonical_solution": "  let freq = {};\n  for (let i = 0; i < list1.length; i++) {\n    if (freq[list1[i]]) {\n      freq[list1[i]] += 1;\n    } else {\n      freq[list1[i]] = 1;\n    }\n  }\n  return freq;\n}", "completion": ["\n\"\"\"\n\ndef get_freq(list1):\n    freq_dict = dict()\n    for item in list1:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict\n\n\"\"\"\n* * Write a function to get the maximum number of items in a list.\n\"\"\"\n\ndef max_len(list1):\n    return max(len(i) for i in list1)\n\n\"\"\"\n* * Write a function to get the maximum number of items in a list.\n\"\"\"\n\ndef max_len_2(list1):\n    max_len = 0\n    for item in list1:\n        max_len = max(max_len, len(item))\n    return max_len\n\n\"\"\"\n* * Write a function to get the minimum number of items in a list.\n\"\"\"\n\ndef min_len(list1):\n    return min(len(i) for i in list1)\n\n\"\"\"\n* * Write a function to get the minimum number of items in a list.\n\"\"\"\n\ndef min_len_2(list1):\n    min_len = 100\n    for item in list1:\n        min_len = min(min_len, len(item))\n    return min_len\n\n\"\"\"\n* * Write a function to get the sum of the items in a list.\n\"\"\"\n\ndef sum_list(list1):\n    sum_ = 0\n    for item in list1:\n        sum_ = sum_ + item\n    return sum_\n\n\"\"\"\n* * Write a ", "\n", "\n", "\n", "\n"]}
{"task_id": "MBJSP/89", "prompt": "function closestNum(n) {\n/**\n * * Write a function to find the closest smaller number than n.\n */", "entry_point": "closestNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 11;\nvar x0 = closestNum(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = closestNum(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar x2 = closestNum(arg20);\nvar v2 = 11;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the closest smaller number than n.", "language": "javascript", "canonical_solution": "  let num = 0;\n  let minDiff = Infinity;\n\n  for (let i = 1; i < n; i++) {\n    const diff = Math.abs(n - i);\n    if (diff < minDiff) {\n      minDiff = diff;\n      num = i;\n    }\n  }\n\n  return num;\n}", "completion": ["\n", "\n\n    var closest = function closest(n) {\n        var prev = closest(n - 1);\n        var next = closest(n + 1);\n        var closest_diff = Math.abs(prev - n);\n        var next_diff = Math.abs(next - n);\n\n        return Math.min(closest_diff, next_diff);\n    };\n\n    var closest_smaller = closest(n);\n    var closest_larger = closest(n + 1);\n\n    if (closest_smaller > closest_larger) {\n        var f = n / closest_smaller;\n        var l = n * closest_smaller;\n        var df = (n - l) / closest_smaller;\n        var dl = (n - l) * closest_smaller;\n\n        return [f, df, dl];\n    } else {\n        var l = n / closest_larger;\n        var f = n * closest_larger;\n        var dl = (n - l) * closest_larger;\n        var df = (n - f) / closest_larger;\n\n        return [l, dl, df];\n    }\n};\n\n/**\n * * Write a function to find the closest larger number than n.\n */\n\n\nvar closest_larger = function closest_larger(n) {\n/**\n * * Write a function to find the closest larger number than n.\n */\n\n    var closest = ", "\n\n", "\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n", "\nvar write_func = ("]}
{"task_id": "MBJSP/90", "prompt": "function lenLog(list1) {\n/**\n * * Write a JavaScript function to find the length of the longest word.\n */", "entry_point": "lenLog", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"python\", \"PHP\", \"bigdata\"];\nvar x0 = lenLog(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"ab\", \"abc\"];\nvar x1 = lenLog(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"small\", \"big\", \"tall\"];\nvar x2 = lenLog(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the length of the longest word.", "language": "javascript", "canonical_solution": "    var max = 0;\n    var temp = 0;\n    for (var i = 0; i < list1.length; i++) {\n        temp = list1[i].length;\n        if (temp > max) {\n            max = temp;\n        }\n    }\n    return max;\n}", "completion": ["\nvar getLongestWord = function(text) {\nvar longestWord = text.toLowerCase().split(\" \");\nvar longestWordLength = longestWord[0].length;\nreturn longestWordLength;\n};\n\n/**\n * * Write a JavaScript function to get the number of words in the text.\n */\nvar getNumberOfWords = function(text) {\nvar numberOfWords = 0;\ntext = text.toLowerCase();\nfor (var i = 0; i < text.length; i++) {\nif (text[i] ==='' || text[i] === '.') {\nnumberOfWords++;\n}\n}\nreturn numberOfWords;\n};\n\n/**\n * * Write a JavaScript function to get the number of punctuation in the text.\n */\nvar getNumberOfPunctuation = function(text) {\nvar numberOfPunctuation = 0;\nfor (var i = 0; i < text.length; i++) {\nif (text[i] === '.' || text[i] === ',' || text[i] === '!') {\nnumberOfPunctuation++;\n}\n}\nreturn numberOfPunctuation;\n};\n\n/**\n * * Write a JavaScript function to get the number of digits in the text.\n */\nvar getNumberOfDigits = function(text) {\nvar numberOfDigits = 0;\nfor (var i = 0; i < text.length; i++) {\nif (text[i].match(/\\d/)) {\nnumberOfDigits++;\n}\n}\nreturn numberOfDigits;\n};\n\n/**\n * * Write a JavaScript function to get the number of letters in the text.\n */\nvar getNumberOfLetters = ", "\n\n};\n<|endoftext|>", "\nmodule.exports = function(str) {\n  return str.split(' ').map(", "\nvar longestWordLength = function(wordArray) {\n    return wordArray.reduce(", "\nvar longestWord;\n\n/**\n * * In * a* JavaScript function to find the length of the longest word.\n */\n\n"]}
{"task_id": "MBJSP/91", "prompt": "function findSubstring(str1, substr) {\n/**\n * * Write a function to check if a substring is present in a given list of string values.\n */", "entry_point": "findSubstring", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg01 = \"ack\";\nvar x0 = findSubstring(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg11 = \"abc\";\nvar x1 = findSubstring(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"black\", \"white\", \"green\", \"orange\"];\nvar arg21 = \"ange\";\nvar x2 = findSubstring(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if a substring is present in a given list of string values.", "language": "javascript", "canonical_solution": "  let str2 = str1.join(\"\").toLowerCase();\n  let subStr2 = subStr.toLowerCase();\n  return str2.includes(subStr2);\n}", "completion": ["\n\n\nvar isSubstringPresent = function isSubstringPresent(substr, list) {\n  return list.some(", "\n\n/**\n * @typedef {string} String\n * @typedef {string} Substring\n */\n\n/**\n * @typedef {number} Index\n * @typedef {Object} Substring\n */\n\n/**\n * * Get the first index of a substring in a given string value.\n */\n\n/**\n * * Get the first index of a substring in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains any of the given substrings in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains all of the given substrings in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains none of the given substrings in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains a given substrings in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains only the given substrings in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains only the given substrings in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains only the given substrings in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains a given substrings in a given list of string values.\n */\n\n/**\n * * Write a function to check if a given string value contains a given substrings in a given list of string values.\n */\n\n/**\n * * Write a ", "\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a function to check if a substring is present in a given list of string values.\n */\n\n/**\n * * Create a ", "\nvar roman = function() {\n/**\n * * Write a function to check if a substring is present in a given list of string values.\n */\n/**\n * * Write a function to check if a substring is present in a given list of string values.\n */\n/**\n * * Write a ", "\n\nstr1 = \"abcdef\";\nsubstr = \"bcd\";\n\nif (str1.indexOf(substr) > -1) {\n    console.log(\"substr is present in str1\");\n} else {\n    console.log(\"substr is not present in str1\");\n}\n/**\n * * Write a function to check if a given string contains a given substring.\n */\n\nstr1 = \"abcdef\";\nsubstr = \"bcd\";\n\nif (str1.indexOf(substr)!== -1) {\n    console.log(\"str1 contains substr\");\n} else {\n    console.log(\"str1 does not contain substr\");\n}\n/**\n * * Write a function to check if a given string is a palindrome.\n */\n\nstr1 = \"abcd\";\n\nif (str1 === str1.reverse()) {\n    console.log(\"str1 is a palindrome\");\n} else {\n    console.log(\"str1 is not a palindrome\");\n}\n/**\n * * Write a function to check if a given string is a palindrome.\n */\n\nstr1 = \"abcd efgh\";\n\nif (str1 === str1.reverse()) {\n    console.log(\"str1 is a palindrome\");\n} else {\n    console.log(\"str1 is not a palindrome\");\n}\n/**\n * * Write a "]}
{"task_id": "MBJSP/92", "prompt": "function isUndulating(n) {\n/**\n * * Write a function to check whether the given number is undulating or not.\n */", "entry_point": "isUndulating", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"1212121\";\nvar x0 = isUndulating(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1991\";\nvar x1 = isUndulating(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"121\";\nvar x2 = isUndulating(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether the given number is undulating or not.", "language": "javascript", "canonical_solution": "  const arr = n.split(\"\");\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === \"1\") {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return true;\n}", "completion": ["\nreturn n % 2 == 0;\n}\n\n/**\n * * Write a function to check whether the given number is armstrong or not.\n */\n", "\nlet undulating = (n) => {\n    let m = Math.sqrt(n);\n\n    for (let i = 1; i <= m; i++) {\n        if (n % i === 0) {\n            let k = n / i;\n            if (k % i === 0) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nconsole.log(undulating(11));<|endoftext|>", "\n    var isUndulating = function(n) {\n        return n === Math.round(n);\n    }\n/**\n * * Write a function to check whether the given number is a prime or not.\n */\n    var isPrime = function(n) {\n        if(n == 2) {\n            return true;\n        } else if(n % 2 == 0) {\n            return false;\n        }\n        for (var i = 3; i <= Math.sqrt(n); i += 2) {\n            if(n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n/**\n * * Write a function to find the longest substring that contains only one unique character.\n */\n    var longestSubstring = ", "\n", "\n  var n = +n;\n  var isUndulating = (n === n * n);\n  return isUndulating;\n}\n```\n\n##### \u601d\u8003\u9898\n\n- \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u4e58\u65b9\u9700\u8981\u8003\u8651\u7684\u4e24\u4e2a\u9636\u68af\u957f\u5ea6\u3002\n- \u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u6307\u6570\u9700\u8981\u8003\u8651\u7684\u4e24\u4e2a\u9636\u68af\u957f\u5ea6\u3002\n- \u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u4e58\u65b9\u9700\u8981\u8003\u8651\u7684\u9636\u68af\u957f\u5ea6\u3002\n- \u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u6307\u6570\u9700\u8981\u8003\u8651\u7684\u9636\u68af\u957f\u5ea6\u3002\n\n##### \u4ee3\u7801\u5b9e\u73b0\n\n```js\n"]}
{"task_id": "MBJSP/93", "prompt": "function power(a, b) {\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */", "entry_point": "power", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 4;\nvar x0 = power(arg00, arg01);\nvar v0 = 81;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 3;\nvar x1 = power(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 5;\nvar x2 = power(arg20, arg21);\nvar v2 = 3125;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the value of 'a' to the power 'b'.", "language": "javascript", "canonical_solution": "  if (b === 0) return 1;\n  return a * power(a, b - 1);\n}", "completion": ["\n(", "\nb,\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\na,\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\na,\n};\n\n// Function Objects\n\nvar fn1 = function () {\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n};\n\nvar fn2 = function () {\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n};\n\nvar fn3 = function () {\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n};\n\nvar fn4 = function () {\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n};\n\nvar fn5 = function () {\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n\n/**\n * * Write a function to calculate the value of 'a' to the power 'b'.\n */\n};\n\nvar fn6 = function () {\n/**\n * * Write a ", "\n", "\n\na = 3;\nb = 5;\n\n", "\n```\n\n#### *Write a "]}
{"task_id": "MBJSP/94", "prompt": "function indexMinimum(testlist) {\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */", "entry_point": "indexMinimum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]];\nvar x0 = indexMinimum(arg00);\nvar v0 = \"Varsha\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]];\nvar x1 = indexMinimum(arg10);\nvar v1 = \"Dawood\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]];\nvar x2 = indexMinimum(arg20);\nvar v2 = \"Ayesha\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract the index minimum value record from the given tuples.", "language": "javascript", "canonical_solution": "  let min = Number.MAX_SAFE_INTEGER;\n  let minIndex = 0;\n  for (let i = 0; i < testList.length; i++) {\n    if (testList[i][1] < min) {\n      min = testList[i][1];\n      minIndex = i;\n    }\n  }\n  return testList[minIndex][0];\n}", "completion": ["\n    print(String.format(\"Extracting min idx from %d elements\", len(testlist)))\n\n    local ids = {}\n\n    foreach (Tuple in testlist) {\n        local id = getTupleValue(Tuple, COLUMN_ID);\n        if (!id in ids) {\n            ids[id] = 1;\n        } else {\n            ids[id] += 1;\n        }\n    }\n\n    foreach (id in ids) {\n        print(String.format(\"Extracted idx:%d minval:%d\", id, min(ids[id])))\n    }\n}\n```\n\nNote that we need to iterate over all the tuples and have `getTupleValue`\nrun on each. Otherwise, the `value` field is not populated with the value\nwe need.\n\n## Applying a function to a list of tuples\n\nFinally, we apply a ", "\n", "\n", "\n$index_min($testlist);\n\n/**\n * * Write a function to extract the index maximum value record from the given tuples.\n */\n$index_max($testlist);\n\n/**\n * * Write a function to extract the index median value record from the given tuples.\n */\n$index_median($testlist);\n\n/**\n * * Write a function to extract the index percentile value record from the given tuples.\n */\n$index_percentile($testlist, $percentile);\n\n/**\n * * Write a function to extract the index quartile value record from the given tuples.\n */\n$index_quartile($testlist, $quartile);\n\n/**\n * * Write a function to extract the index trimmed mean value record from the given tuples.\n */\n$index_trimmed_mean($testlist, $trimmed_mean);\n\n/**\n * * Write a function to extract the index trimmed standard deviation value record from the given tuples.\n */\n$index_trimmed_standard_deviation($testlist, $trimmed_standard_deviation);\n\n/**\n * * Write a function to extract the index trimmed variance value record from the given tuples.\n */\n$index_trimmed_variance($testlist, $trimmed_variance);\n\n/**\n * * Write a function to extract the index trimmed skewness value record from the given tuples.\n */\n$index_trimmed_skewness($testlist, $trimmed_skewness);\n\n/**\n * * Write a ", "\n\n// The size of the column containing the minimum value.\nconst MIN_SIZE = 1;\n\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */\n\n// The size of the column containing the maximum value.\nconst MAX_SIZE = 1;\n\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */\n\n// The size of the column containing the mean value.\nconst MEAN_SIZE = 1;\n\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */\n\n// The size of the column containing the median value.\nconst MEDIAN_SIZE = 1;\n\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */\n\n// The size of the column containing the mode value.\nconst MODE_SIZE = 1;\n\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */\n\n// The size of the column containing the variance value.\nconst VARIANCE_SIZE = 1;\n\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */\n\n// The size of the column containing the standard deviation value.\nconst STANDARD_DEVIATION_SIZE = 1;\n\n/**\n * * Write a function to extract the index minimum value record from the given tuples.\n */\n\n// The size of the column containing the sum of squares value.\nconst SUM_OF_SQUARES_SIZE = 1;\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/95", "prompt": "function findMinLength(lst) {\n/**\n * * Write a JavaScript function to find the minimum length of sublist.\n */", "entry_point": "findMinLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [1, 2]];\nvar x0 = findMinLength(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2], [1, 2, 3], [1, 2, 3, 4]];\nvar x1 = findMinLength(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 3, 3], [4, 4, 4, 4]];\nvar x2 = findMinLength(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the minimum length of sublist.", "language": "javascript", "canonical_solution": "  let min = lst[0].length;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < min) {\n      min = lst[i].length;\n    }\n  }\n  return min;\n}", "completion": ["\n    ", "\n/**\n * * Write a JavaScript function to find the maximum length of sublist.\n */\n/**\n * * Write a JavaScript function to find the first index of a sublist.\n */\n/**\n * * Write a JavaScript function to find the last index of a sublist.\n */\n/**\n * * Write a JavaScript function to find the index of a sublist which has a given substring.\n */\n/**\n * * Write a JavaScript function to find the index of a sublist which contains a given number.\n */\n/**\n * * Write a JavaScript function to find the index of a sublist which contains a given word.\n */\n/**\n * * Write a JavaScript function to find the index of a sublist which contains a given phrase.\n */\n/**\n * * Write a JavaScript function to find the index of a sublist which contains a given number.\n */\n/**\n * * Write a JavaScript function to find the index of a sublist which contains a given word.\n */\n/**\n * * Write a JavaScript function to find the index of a sublist which contains a given phrase.\n */\n/**\n * * Write a JavaScript function to find the total number of all sublist.\n */\n/**\n * * Write a JavaScript function to find the total number of sublist in a list.\n */\n/**\n * * Write a JavaScript function to find the number of sublist in a list.\n */\n/**\n * * Write a JavaScript function to find the number of sublist which contains a given word.\n */\n/**\n * * Write a JavaScript function to find the number of sublist which contains a given phrase.\n */\n/**\n * * Write a JavaScript function to find the number of sublist which contains a given number.\n */\n/**\n * * Write a JavaScript ", "\n\nvar min_length_of_sublist = ", "\n", "\nexports.writeMinimumLengthSublist = writeMinimumLengthSublist;\n"]}
{"task_id": "MBJSP/96", "prompt": "function divisor(n) {\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */", "entry_point": "divisor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar x0 = divisor(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = divisor(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = divisor(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the number of divisors of a given integer.", "language": "javascript", "canonical_solution": "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\n", "\n\n    ", "\n\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n\n/**\n * * Write a JavaScript ", "\n\tconsole.log(\"Number of divisors: \" + this.divisors(n));\n}\n/**\n * * Find the sum of the first n natural numbers.\n */\n", "\n} else if (n % 2 == 0) {\n/**\n * * Write a JavaScript function to find the number of divisors of a given integer.\n */\n} else {\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/97", "prompt": "function frequencyLists(list1) {\n/**\n * * Write a function to find frequency count of list of lists.\n */", "entry_point": "frequencyLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]];\nvar x0 = frequencyLists(arg00);\nvar v0 = {\"1\":1,\"2\":3,\"3\":1,\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"8\":1,\"9\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nvar x1 = frequencyLists(arg10);\nvar v1 = {\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]];\nvar x2 = frequencyLists(arg20);\nvar v2 = {\"20\":2,\"30\":2,\"40\":2,\"17\":1,\"18\":1,\"16\":1,\"14\":1,\"13\":1,\"10\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find frequency count of list of lists.", "language": "javascript", "canonical_solution": "  let frequency = {};\n  list1.forEach(list => {\n    list.forEach(element => {\n      if (frequency[element]) {\n        frequency[element]++;\n      } else {\n        frequency[element] = 1;\n      }\n    });\n  });\n  return frequency;\n}", "completion": ["\n\nlist1.map(", "\n", "\n", "\nlist1.forEach(", "\nconst functions_1 = require('./functions');\nexports.functions = functions_1.functions;\n/**\n * * Write a function to find sum of list of numbers.\n */\nconst numbers_1 = require('./numbers');\nexports.numbers = numbers_1.numbers;\n/**\n * * Write a function to find sum of list of numbers.\n */\nconst strings_1 = require('./strings');\nexports.strings = strings_1.strings;\n}).call(this,require(\"buffer\").Buffer)\n},{\"./functions\":1,\"./numbers\":2,\"./strings\":3,\"buffer\":25}],1:["]}
{"task_id": "MBJSP/98", "prompt": "function multiplyNum(numbers) {\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */", "entry_point": "multiplyNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [8, 2, 3, -1, 7];\nvar x0 = multiplyNum(arg00);\nvar v0 = -67.2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-10, -20, -30];\nvar x1 = multiplyNum(arg10);\nvar v1 = -2000.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, 15, 18];\nvar x2 = multiplyNum(arg20);\nvar v2 = 1710.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "language": "javascript", "canonical_solution": "  let result = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    result *= numbers[i];\n  }\n  return result / numbers.length;\n}", "completion": ["\n}\n\n/**\n * * Write a function to find the largest number in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest number in a list.\n */\n}\n\n/**\n * * Write a function to find the largest palindrome in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest palindrome in a list.\n */\n}\n\n/**\n * * Write a function to find the largest prime number in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest prime number in a list.\n */\n}\n\n/**\n * * Write a function to find the largest product of three numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest product of three numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest product of three numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest product of three numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the largest product of four numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest product of four numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the largest product of five numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest product of five numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the largest product of six numbers in a list.\n */\n}\n\n/**\n * * Write a function to find the smallest product of six numbers in a list.\n */\n}\n\n/**\n * * Write a ", "\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n */\n\n/**\n * * Write a ", "\nconsole.log('Number of digits: ', numbers.length);\nconsole.log('Multiplication: ', numbers.map(x => x * numbers.length))\nconsole.log('Division: ', numbers.map(x => x / numbers.length))\nconsole.log('Average: ', numbers.map(x => x / numbers.length))\n}\n\n```\n\n### No need to check a number is divisible by the length of the list.\n\n```javascript\nconst numbers = [10, 20, 30, 40, 50];\n\nconsole.log(numbers.length)\nconsole.log(numbers.map(x => x * numbers.length))\nconsole.log(numbers.map(x => x / numbers.length))\nconsole.log(numbers.map(x => x / numbers.length))\n```\n\n### Once you have to check a number is divisible by the length of the list, you can stop testing when you reach the end of the list.\n\n```javascript\nconst numbers = [10, 20, 30, 40, 50];\n\nconsole.log(numbers.length)\nconsole.log(numbers.map(x => x * numbers.length))\nconsole.log(numbers.map(x => x / numbers.length))\nconsole.log(numbers.map(x => x / numbers.length))\nconsole.log(numbers.map(x => x / numbers.length))\n```\n\n### Write a ", "\n", "\n    var functionToMultiplyNumbersAndDivideWithLengthOfList = "]}
{"task_id": "MBJSP/99", "prompt": "function decimalToBinary(n) {\n/**\n * * Write a function to convert the given decimal number to its binary equivalent.\n */", "entry_point": "decimalToBinary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = decimalToBinary(arg00);\nvar v0 = \"1000\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 18;\nvar x1 = decimalToBinary(arg10);\nvar v1 = \"10010\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = decimalToBinary(arg20);\nvar v2 = \"111\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert the given decimal number to its binary equivalent.", "language": "javascript", "canonical_solution": "  const binary = [];\n  while (n > 0) {\n    binary.unshift(n % 2);\n    n = Math.floor(n / 2);\n  }\n  return binary.join('');\n}", "completion": ["\nif (n > 0) {\n/**\n * * Write a function to determine whether the given decimal number is even.\n * */\nif (n % 2 == 0) {\nreturn 'even';\n} else {\nreturn 'odd';\n}\n} else {\nreturn 'zero';\n}\n} else {\n/**\n * * Write a function to convert the given decimal number to its binary equivalent.\n */\nif (n > 0) {\n/**\n * * Write a function to determine whether the given decimal number is even.\n * */\nif (n % 2 == 0) {\nreturn 'even';\n} else {\nreturn 'odd';\n}\n} else {\nreturn 'zero';\n}\n}\n} else {\n/**\n * * Write a function to convert the given decimal number to its binary equivalent.\n */\nif (n > 0) {\n/**\n * * Write a ", "\n", "\n", "\n\n", "\n\n            return (Number.isFinite(n)? n.toString(2) : \"NaN\")\n                .replace(/^([+\\-]?[0-9]+)([a-zA-Z]*)$/,\n                    "]}
{"task_id": "MBJSP/100", "prompt": "function nextSmallestPalindrome(num) {\n/**\n * * Write a function to find the next smallest palindrome of a specified number.\n */", "entry_point": "nextSmallestPalindrome", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 99;\nvar x0 = nextSmallestPalindrome(arg00);\nvar v0 = 101;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1221;\nvar x1 = nextSmallestPalindrome(arg10);\nvar v1 = 1331;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 120;\nvar x2 = nextSmallestPalindrome(arg20);\nvar v2 = 121;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the next smallest palindrome of a specified number.", "language": "javascript", "canonical_solution": "    num = num + 1;\n    while (num > 10) {\n        var str = num.toString();\n        var rev = str.split('').reverse().join('');\n        if (str === rev) {\n            return num;\n        }\n        num++;\n    }\n    return -1;\n}", "completion": ["\n\n/**\n * * The given number is in the form of a string.\n * * The function should return the next smallest palindrome of the given number.\n * * If the given number does not have the next smallest palindrome, then the function should return -1.\n */\n\n/**\n * * Given an array of numbers representing a list of numbers, find the next smallest palindrome of each number.\n * * If there is no next smallest palindrome for a number, then the function should return -1.\n * * Each number in the array should be represented as a string.\n * * The given array of numbers will not contain duplicates.\n * * Each element should have an equal number of characters.\n * * If no next smallest palindrome exists for a given number, then the function should return -1.\n */\n\n/**\n * * Given an array of numbers representing a list of numbers, find the next smallest palindrome of each number.\n * * If there is no next smallest palindrome for a number, then the function should return -1.\n * * Each number in the array should be represented as a string.\n * * The given array of numbers will contain duplicates.\n * * Each element should have an equal number of characters.\n * * If no next smallest palindrome exists for a given number, then the function should return -1.\n */\n\n/**\n * * Write a function to find the next largest palindrome of a specified number.\n */\n\n/**\n * * The given number is in the form of a string.\n * * The function should return the next largest palindrome of the given number.\n * * If the given number does not have the next largest palindrome, then the ", "\nvar number = Number(num);\nif(number === null || number === \"\" || number === 0) {\n  return;\n}\nif(!isPalindrome(number)) {\n  var palindrome = number;\n  var rev = reverse(number);\n  while(!isPalindrome(rev)) {\n    palindrome++;\n    rev = reverse(number, palindrome);\n  }\n  return palindrome;\n}\n", "\n\n// O(n)\n", "\n\n/**\n * * Define a function which returns true if the given number is palindrome and false if it is not palindrome.\n * * Input: number = 12345\n * * Output: true\n * *\n * * In the above given function, the function should return true if the given number is palindrome and false if it is not palindrome.\n */\n\n/**\n * * Define a function which returns true if the given number is palindrome and false if it is not palindrome.\n * * Input: number = 12211\n * * Output: false\n * *\n * * In the above given function, the function should return false if the given number is palindrome and false if it is not palindrome.\n */\n\n/**\n * * Define a function which returns true if the given number is palindrome and false if it is not palindrome.\n * * Input: number = 1\n * * Output: true\n * *\n * * In the above given function, the function should return true if the given number is palindrome and false if it is not palindrome.\n */\n\n/**\n * * Define a function which returns true if the given number is palindrome and false if it is not palindrome.\n * * Input: number = 11\n * * Output: true\n * *\n * * In the above given function, the function should return true if the given number is palindrome and false if it is not palindrome.\n */\n\n/**\n * * Define a function which returns true if the given number is palindrome and false if it is not palindrome.\n * * Input: number = 123\n * * Output: true\n * *\n * * In the above given function, the ", "\nvar palindromes = "]}
{"task_id": "MBJSP/101", "prompt": "function kthElement(arr, n, k) {\n/**\n * * Write a function to find the kth element in the given array.\n */", "entry_point": "kthElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 3, 5, 7, 19];\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = kthElement(arg00, arg01, arg02);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [17, 24, 8, 23];\nvar arg11 = 4;\nvar arg12 = 3;\nvar x1 = kthElement(arg10, arg11, arg12);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [16, 21, 25, 36, 4];\nvar arg21 = 5;\nvar arg22 = 4;\nvar x2 = kthElement(arg20, arg21, arg22);\nvar v2 = 36;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the kth element in the given array.", "language": "javascript", "canonical_solution": "  return arr[k - 1];\n}", "completion": ["\n\n/**\n * @param {number} arr\n * @param {number} n\n * @param {number} k\n * @returns {number}\n */\n\n\n/**\n * @param {number} arr\n * @param {number} n\n * @param {number} k\n * @returns {number}\n */\n", "\n\n/**\n * @typedef {", "\nlet array = arr;\nlet n = n;\nlet k = k;\nlet element = array[k - 1];\n/**\n * * Write a function to return the kth element in the given array.\n */\n", "\n\n    ", "\nn,k,arr,}\n\n"]}
{"task_id": "MBJSP/102", "prompt": "function snakeToCamel(word) {\n/**\n * * Write a function to convert snake case string to camel case string.\n */", "entry_point": "snakeToCamel", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python_program\";\nvar x0 = snakeToCamel(arg00);\nvar v0 = \"PythonProgram\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python_language\";\nvar x1 = snakeToCamel(arg10);\nvar v1 = \"PythonLanguage\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"programming_language\";\nvar x2 = snakeToCamel(arg20);\nvar v2 = \"ProgrammingLanguage\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert snake case string to camel case string.", "language": "javascript", "canonical_solution": "  if (!word || word === \"\") {\n    return \"\";\n  }\n  const reg = /_(\\w)/g;\n  return word\n    .replace(reg, (_, match) => match.toUpperCase())\n    .replace(/^(\\w)/, match => match.toUpperCase());\n}", "completion": ["\n}\n\n/**\n * * Write a ", "\n\n/**\n * * Convert camel case string to snake case string.\n *\n * @param {string} string - String to convert.\n * @returns {string} Converted string.\n * @example\n * toSnakeCase('lowercase'); // 'lowercase'\n * toSnakeCase('lowercase', '_'); // 'lowercase_'\n * toSnakeCase('upperCase', '_'); // 'upper_case'\n */\n\n", "\nconst camel_case = word => word.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n\n/**\n * * Write a function to convert camel case string to snake case string.\n */\nconst snake_case = word => word.replace(/([A-Z])([a-z])/g, '$1_$2').toLowerCase();\n\n/**\n * * Write a function to convert camel case string to kebab case string.\n */\nconst kebab_case = word => word.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * * Write a function to convert camel case string to Pascal case string.\n */\nconst pascal_case = word => word.replace(/([A-Z])([a-z])/g, '$1-$2').toUpperCase();\n\n/**\n * * Write a function to convert camel case string to snake case string.\n */\nconst snake_case_underscore = word => word.replace(/([A-Z])/g, '_$1').toLowerCase();\n\n/**\n * * Write a function to convert camel case string to camel case string.\n */\nconst camel_case_underscore = word => word.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n\n/**\n * * Write a ", "\n}\n\nvar camel_case = camelCase;\n\n// to correctly handle unicode characters\nvar uc = /[\\u0080-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]/g;\n// greek letters\nvar gr = /[\\u0300-\\u036F]|[\\u1D2B-\\u1D2F]/g;\n// lcletters and lnum\nvar lc = /[\\u0000-\\u00FF]|[\\uD8A3-\\uD8B3]/g;\n// case insensitive alphabetic\nvar i = /[a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0333\\u034E-\\u0350\\u0352-\\u0357\\u0358-\\u035C\\u0360-\\u0361\\u0362-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B4]|[\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\", "\n}\n\n/**\n * @param {string} str - A string\n * @returns {string} - The camel case string\n */\n\n"]}
{"task_id": "MBJSP/103", "prompt": "function eulerianNum(n, m) {\n/**\n * * Write a function to find eulerian number a(n, m).\n */", "entry_point": "eulerianNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 1;\nvar x0 = eulerianNum(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 1;\nvar x1 = eulerianNum(arg10, arg11);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 3;\nvar x2 = eulerianNum(arg20, arg21);\nvar v2 = 26;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find eulerian number a(n, m).", "language": "javascript", "canonical_solution": "\tif (m >= n || n == 0) {\n\t\treturn 0;\n\t}\n\tif (m == 0) {\n\t\treturn 1;\n\t}\n\treturn ((n - m) * eulerianNum(n - 1, m - 1) + (m + 1) * eulerianNum(n - 1, m));\n}", "completion": ["\n", "\n", "\nclass EulerianNumber {\npublic:\n    EulerianNumber() {}\n\n    /* Parameters:\n     * * n: number of vertices\n     * * m: number of edges\n     * * g: graph\n     * Return value:\n     * * Eulerian number\n     */\n    int eulerianNumber(int n, int m, const Graph &g) {\n        // find start point\n        const auto &vs = g.getVertexSet();\n        const auto &eds = g.getEdges();\n        for (const auto &s: vs) {\n            for (const auto &e: eds) {\n                if (s == e.first && s!= e.second) return s;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n## \u9898\u89e32 - \u6700\u5c0f\u751f\u6210\u6811\n\n\u9012\u5f52+\u52a8\u6001\u89c4\u5212+\u6eda\u52a8\u6570\u7ec4(\u52a8\u6001\u6570\u7ec4)\u5b9e\u73b0\u3002\n\n## \u9898\u89e33 - \u6700\u5c0f\u751f\u6210\u68112\n\n\u57fa\u4e8e\u6570\u7ec4\u7684\u6700\u5c0f\u751f\u6210\u6811\uff08MST\uff09\u7684\u4f18\u5316\u3002\n\n## \u9898\u89e34 - \u6700\u5927\u56fe\u62d3\u6251\u6392\u5e8f\n\n\u57fa\u4e8e\u90bb\u63a5\u8868\u7684\u6700\u5927\u56fe\u62d3\u6251\u6392\u5e8f\u7684\u4f18\u5316\u3002\n\n## \u9898\u89e35 - \u6700\u5927\u56fe\u62d3\u6251\u6392\u5e8f2\n\n\ufffd", "\n", "\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a function to find eulerian number a(n, m).\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/104", "prompt": "function sortSublists(inputlist) {\n/**\n * * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n */", "entry_point": "sortSublists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]];\nvar x0 = sortSublists(arg00);\nvar v0 = [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]];\nvar x1 = sortSublists(arg10);\nvar v1 = [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]];\nvar x2 = sortSublists(arg20);\nvar v2 = [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "language": "javascript", "canonical_solution": "  return inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n}", "completion": ["\n", "\n\n/**\n * * An utility function that takes a list of list and returns a list of sorted list.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility function that takes a list of list and returns a list of sorted list with the extra element appended to the end.\n */\n\n/**\n * * A utility ", "\n\n    ", "\n    var sortedList = [\n            ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_', '-'],\n            ['e', 'd', 'c', 'b', 'a', '_', '-'],\n            ['a', 'd', 'g', 'i', 'c', 'e','m', 'o', 'n', 'l', 'k', 'b', 'h', 'f', 'j', 'x', 'y', 'v', 'u','s', 'r', 'w', 't', 'y', 'v', 'u','s', 'r', 'w', 't', 'y', 'v', 'u','s', 'r', 'w', 't', 'y', 'v', 'u','s', 'r', 'w', 't', 'y', 'v', 'u','s', 'r', 'w', 't', 'y', 'v', 'u','s', 'r', 'w',", "\n        var input_data = inputlist;\n        var output_data = input_data.sort("]}
{"task_id": "MBJSP/105", "prompt": "function count(lst) {\n/**\n * * Write a JavaScript function to count true booleans in the given list.\n */", "entry_point": "count", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [true, false, true];\nvar x0 = count(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [false, false];\nvar x1 = count(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [true, true, true];\nvar x2 = count(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count true booleans in the given list.", "language": "javascript", "canonical_solution": "    return lst.filter(Boolean).length;\n}", "completion": ["\nlst.forEach((val, i, lst) => {\n    if (val!== false) {\n        total += 1;\n    }\n});\n```\n\n**What is the output of the above code?**\n\nThe output of the above code is:\n\n```\n6\n```\n\n**Is there any error?**\n\nNo errors are detected.\n\n**What is the name of the function?**\n\nFunctionCount\n\n**How does the function\u2019s return value change when passing in `true` or `false` values?**\n\nIf `true` is passed in, the value returned from the function will be `6`. If `false` is passed in, the value returned from the function will be `0`.\n\n```\n(", "\nt.compose = function (start, done, continue) {\n  if (start === null) {\n    start = 0;\n  }\n\n  var count = 0;\n  var value = this.value;\n\n  var countTrue = function () {\n    count++;\n    return value;\n  };\n\n  var continueCountTrue = function (next) {\n    countTrue(count + 1, done, next);\n  };\n\n  return {\n    continue: continueCountTrue,\n    countTrue: countTrue\n  };\n};\n\n/**\n * * Get the result for a count of true booleans.\n */\nt.countTrue = function () {\n  return this.value;\n};\n\n/**\n * * Get the result for a count of false booleans.\n */\nt.countFalse = function () {\n  return this.value === 0;\n};\n\n/**\n * * Get the result for a count of true and false booleans.\n */\nt.countTrueFalse = function () {\n  return this.value === 1;\n};\n\n/**\n * * Get the result for a count of true booleans and false booleans.\n */\nt.countTrueFalseTrue = function () {\n  return this.value === 3;\n};\n\n/**\n * * Get the result for a count of true, false, and true booleans.\n */\nt.countTrueFalseTrueTrue = function () {\n  return this.value === 7;\n};\n\n/**\n * * Get the result for a count of true, false, true, false, and true booleans.\n */\nt.countTrueFalseTrueTrueFalse = ", "\nlst.count = ", "\n", "\n+ (void)writeJavascriptFunction:(JSValue *)"]}
{"task_id": "MBJSP/106", "prompt": "function addLists(testlist, testtup) {\n/**\n * * Write a function to add the given list to the given tuples.\n */", "entry_point": "addLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 7];\nvar arg01 = [9, 10];\nvar x0 = addLists(arg00, arg01);\nvar v0 = [9, 10, 5, 6, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [6, 7, 8];\nvar arg11 = [10, 11];\nvar x1 = addLists(arg10, arg11);\nvar v1 = [10, 11, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [7, 8, 9];\nvar arg21 = [11, 12];\nvar x2 = addLists(arg20, arg21);\nvar v2 = [11, 12, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to add the given list to the given tuples.", "language": "javascript", "canonical_solution": "  return [...testTup, ...testList];\n}", "completion": ["\nconst add = (list, tuples, callback) => {\n  callback(null, list.concat(tuples));\n};\n/**\n * * Write a function to add the given list to the given tuples.\n */\nconst addall = (list, tuples, callback) => {\n  callback(null, list.concat(tuples));\n};\n/**\n * * Write a function to add the given list to the given tuples.\n */\nconst addall2 = (list, tuples, callback) => {\n  callback(null, list.concat(tuples));\n};\n/**\n * * Write a function to add the given list to the given tuples.\n */\nconst addall3 = (list, tuples, callback) => {\n  callback(null, list.concat(tuples));\n};\n/**\n * * Write a function to add the given list to the given tuples.\n */\nconst addall4 = (list, tuples, callback) => {\n  callback(null, list.concat(tuples));\n};\n\n/**\n * * Write a function to add the given list to the given tuples.\n */\nconst addall5 = (list, tuples, callback) => {\n  callback(null, list.concat(tuples));\n};\n/**\n * * Write a function to add the given list to the given tuples.\n */\nconst addall6 = (list, tuples, callback) => {\n  callback(null, list.concat(tuples));\n};\n/**\n * * Write a ", "\nexports.addFunction = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  args.unshift(", "\nvar add_list = function add_list(testlist, testtup) {\n  testlist.push(testtup);\n};\n\n/**\n * * Write a function to add the given number of the given tuple to the given tuples.\n */\nvar add_tuple = function add_tuple(testtuple, testcount) {\n  testtuple = testtuple.slice();\n  for (var i = 0; i < testcount; i++) {\n    testtuple.push(i);\n  }\n  return testtuple;\n};\n\n/**\n * * Write a function to add all the given numbers of the given tuple to the given tuples.\n */\nvar add_tuples = function add_tuples(testtuples, testcount) {\n  testtuples.push(add_tuple(testtuples[0], testcount));\n  return testtuples;\n};\n\n/**\n * * Write a function to add the given list to the given tuples.\n */\nvar add_tuples_list = function add_tuples_list(testtuples, testlist) {\n  var tests = testlist.slice();\n  var testtuple = tests[0];\n  for (var i = 0; i < tests.length; i++) {\n    testtuple = add_tuple(testtuple, tests[i]);\n  }\n  testtuples.push(testtuple);\n  return testtuples;\n};\n\n/**\n * * Write a function to check whether the given number of the given tuple is between the given start and end.\n */\nvar is_between = ", "\n", "\n\nvar add = function add(tuples, list, tupl) {\n  return new Promise("]}
{"task_id": "MBJSP/107", "prompt": "function countHexadecimal(l, r) {\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */", "entry_point": "countHexadecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 15;\nvar x0 = countHexadecimal(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = countHexadecimal(arg10, arg11);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar arg21 = 16;\nvar x2 = countHexadecimal(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count hexadecimal numbers for a given range.", "language": "javascript", "canonical_solution": "    let count = 0;\n    for (let i = l; i <= r; i++) {\n        if (i.toString(16).match(/[a-f]/g)) {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\n$p-counthexadecimal(l, r) {\n  @for $i from l through r {\n    $hex: \"\\\\x{0}-{1}\";\n    $hex: if($hex[$i-1] == '\\\\', $hex, $hex.replace('{0}', hexdec($hex[$i-1])));\n    $hex: if($hex[$i] == '\\\\', $hex, $hex.replace('{0}', hexdec($hex[$i])));\n    <span>{$hex}</span>\n  }\n}\n```\n\n**Output:**\n\n```\n$p-counthexadecimal(0, 15)\n\\x10\n\\x11\n\\x12\n\\x13\n\\x14\n\\x15\n\n$p-counthexadecimal(0, 16)\n\\x10\n\\x11\n\\x12\n\\x13\n\\x14\n\\x15\n\\x16\n\n$p-counthexadecimal(0, 17)\n\\x10\n\\x11\n\\x12\n\\x13\n\\x14\n\\x15\n\\x16\n\\x17\n\n$p-counthexadecimal(0, 18)\n\\x10\n\\x11\n\\x12\n\\x13\n\\x14\n\\x15\n\\x16\n\\x17\n\\x18\n```\n\n**Hint**:\n\n> You can use `if` and `return` to simplify this code.\n>\n> When you use a `return` statement, it will return the value of the ", "\n", "\n}\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = function(l, r) {\n    return exports.hexadecimal(l, r)\n  }\n}\n\n},{}],2:[", "\n    exadecimal(l, r) {\n        return String.fromCharCode(l + 65, r + 65);\n    }\n\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */\n    exadecimal(l, r) {\n        return String.fromCharCode(l + 97, r + 97);\n    }\n\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */\n    exadecimal(l, r) {\n        return String.fromCharCode(l + 48, r + 48);\n    }\n\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */\n    exadecimal(l, r) {\n        return String.fromCharCode(l + 43, r + 43);\n    }\n\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */\n    exadecimal(l, r) {\n        return String.fromCharCode(l + 45, r + 45);\n    }\n\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */\n    exadecimal(l, r) {\n        return String.fromCharCode(l + 48, r + 48);\n    }\n\n/**\n * * Write a JavaScript function to count hexadecimal numbers for a given range.\n */\n    exadecimal(l, r) {\n        return String.fromCharCode(l + 57, r + 57);\n    }\n\n/**\n * * Write a JavaScript ", "\n@lisp:lisp-eval\n(define (hexadecimal-count l r)\n  (let ((l (abs l)) (r (abs r)))\n    (let ((m (mod l r)))\n      (let ((n (quotient l r)))\n        (if (= m 0)\n            (+ n 1)\n            (hexadecimal-count\n             (+ n (hexadecimal-count\n                        (- n 1)\n                        (quotient m r))\n                  1))\n              (- m 1))))))\n\n(define (hexadecimal-count-reverse l r)\n  (let ((l (abs l)) (r (abs r)))\n    (let ((m (mod l r)))\n      (let ((n (quotient l r)))\n        (if (= m 0)\n            (+ n 1)\n            (hexadecimal-count-reverse\n             (+ n (hexadecimal-count-reverse\n                        (- n 1)\n                        (quotient m r))\n                  1))\n              (- m 1))))))\n\n(define (hexadecimal-count-forward l r)\n  (let ((l (abs l)) (r (abs r)))\n    (let ((m (mod l r)))\n      (let ((n (quotient l r)))\n        (if (= m 0)\n            (+ n 1)\n            (hexadecimal-count-forward\n             (+ n (hexadecimal-count-forward\n                        (- n 1)\n                        (quotient m r))\n                  1))\n              (- m 1))))))\n\n(define ("]}
{"task_id": "MBJSP/108", "prompt": "function mergeSortedList(num1, num2, num3) {\n/**\n * * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n */", "entry_point": "mergeSortedList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 24, 15, 4, 5, 29, 110];\nvar arg01 = [19, 20, 11, 56, 25, 233, 154];\nvar arg02 = [24, 26, 54, 48];\nvar x0 = mergeSortedList(arg00, arg01, arg02);\nvar v0 = [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 5, 6, 8, 9];\nvar arg11 = [2, 5, 7, 11];\nvar arg12 = [1, 4, 7, 8, 12];\nvar x1 = mergeSortedList(arg10, arg11, arg12);\nvar v1 = [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nvar arg21 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg22 = [12, 74, 9, 50, 61, 41];\nvar x2 = mergeSortedList(arg20, arg21, arg22);\nvar v2 = [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "language": "javascript", "canonical_solution": "  let arr = [];\n\n  arr = arr.concat(num1, num2, num3);\n  const newArr = [...arr].sort((a, b) => a - b);\n  return newArr;\n}", "completion": ["\nconst merge = (listA, listB) => {\n  const arr = Array(listA.length + listB.length).fill(null);\n  const queue = new PriorityQueue([], {\n    compare: (a, b) => b.value - a.value\n  });\n\n  for (let i = 0; i < listA.length; i++) {\n    queue.enqueue(listA[i]);\n  }\n\n  for (let i = 0; i < listB.length; i++) {\n    queue.enqueue(listB[i]);\n  }\n\n  let merged = [];\n  while (queue.size > 0) {\n    const a = queue.dequeue();\n    merged.push(a);\n    if (queue.size > 0 && queue.peek().value <= a.value) {\n      queue.enqueue(queue.dequeue());\n    }\n  }\n\n  return merged;\n}\n\nmodule.exports = merge;\n<|endoftext|>", "\n/**\n * * A heap is a binary tree. It has the property that the value stored at each node is smaller than the value stored at its children.\n */\n/**\n * * Push the value x into the heap.\n * * If the heap is already full, do nothing.\n * * Otherwise, add x to the heap, and make it the top element of the heap.\n */\n/**\n * * Pop the top element from the heap.\n * * If the heap is empty, do nothing.\n * * Otherwise, remove the top element from the heap, and make it the top element of the heap.\n * * Repeat the above steps until the heap is empty.\n */\n/**\n * * Return the top element from the heap, without popping it.\n */\n/**\n * * Return a function to create an iterator for the input array.\n * * Iterator interface -\n * * function * begin()\n * * ", "\n// Take a queue. Add each item to the queue.\n// If the queue is not empty, pop the first item from the queue.\n// If the item is greater than or equal to the second item, push it to the second queue.\n// Finally, pop the first item from the queue and return it.\n// If both queues are empty, return null.\n\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number[]} nums3\n * @return {number[]}\n */\nvar mergeThree = ", "\n/**\n * * Write a function to merge a single sorted input into a single sorted iterator using heap queue algorithm.\n */\nlet heap = new Heap(", "\n  return _createNodes(num1, num2, num3);\n};\n\nvar _createNodes = createNodes;\n/**\n * * Create a function to merge a list of sorted inputs into a single sorted iterator.\n * *\n * @param {Array.<number>} nums - An array of integers to be merged.\n * @return {"]}
{"task_id": "MBJSP/109", "prompt": "function oddEquivalent(s, n) {\n/**\n * * Write a JavaScript function to find the count of rotations of a binary string with odd value.\n */", "entry_point": "oddEquivalent", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"011001\";\nvar arg01 = 6;\nvar x0 = oddEquivalent(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"11011\";\nvar arg11 = 5;\nvar x1 = oddEquivalent(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"1010\";\nvar arg21 = 4;\nvar x2 = oddEquivalent(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the count of rotations of a binary string with odd value.", "language": "javascript", "canonical_solution": "    let cnt = 0;\n    let c = s.length;\n    while (n > 0) {\n        if (s[c - n] === \"1\") {\n            cnt++;\n        }\n        n--;\n    }\n    return cnt;\n}", "completion": ["\nlet odd = function odd(s, n) {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    let c = s[i];\n    if (c.toString() === '1') {\n      res = (res + 1) % 2;\n    }\n  }\n  return res;\n};\n\nlet even = function even(s, n) {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    let c = s[i];\n    if (c.toString() === '0') {\n      res = (res + 1) % 2;\n    }\n  }\n  return res;\n};\n\nlet total = function total(s, n) {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    let c = s[i];\n    if (c.toString() === '1') {\n      res = (res + 1) % 2;\n    } else if (c.toString() === '0') {\n      res = (res + 1) % 2;\n    }\n  }\n  return res;\n};\n\nlet num = function num(s, n) {\n  let res = 0;\n  for (let i = 0; i < n; i++) {\n    let c = s[i];\n    if (c.toString() === '1') {\n      res = (res + 1) % 2;\n    }\n  }\n  return res;\n};\n\nlet num_b = ", "\n    var s = String(s);\n    var len = s.length;\n    var rotations = 0;\n    var i = 0;\n    for (; i < len; i++) {\n        var c = s[i];\n        var j = 0;\n        var x = 0;\n        while (true) {\n            var y = s[j];\n            s[j] = c;\n            s[i] = y;\n            j = i + x;\n            if (j >= len) j -= len;\n            if (j < 0) j += len;\n            if (j === i) break;\n            c = y;\n            x++;\n        }\n        j = i + 1;\n        if (j < len) {\n            c = s[j];\n            while (true) {\n                s[j] = c;\n                j++;\n                if (j >= len) j -= len;\n                if (j < 0) j += len;\n                if (j === i) break;\n                c = s[j];\n            }\n        }\n        j = 0;\n        while (true) {\n            var y = s[j];\n            s[j] = c;\n            j = j + 1;\n            if (j >= len) j -= len;\n            if (j < 0) j += len;\n            if (j === i) break;\n            c = y;\n        }\n        var r = s.indexOf(String.fromCharCode(s[i]));\n        var r2 = String.fromCharCode(s[i]) + String.fromCharCode", "\n\n", "\ns.split('', 1).reverse().join('', 1);\n/**\n * Write a JavaScript ", "\ndef rotations(s: String, n: Int) = {\n  (0 until n).map { i =>\n    val c = s.charAt(i)\n    val r = s.charAt(n - 1 - i)\n    if (c!= r) s.replace(s.charAt(i), r) else \"\"\n  }.foldLeft(\"\")(String.valueOf)\n}\n```\n\n## D. T. G. Quine and J. K. T. Chen and P. K. S. Raghavan\n\n> A **quine** is a language where all characters that occur at the ends of some word are identical. A **quine** is a language where each word is a quine.\n>\n> The **quine** of a word is defined as follows: it is a quine if and only if there is no other word that has the same number of occurrences in the two words. For example, the word abcde and the word abde are both quines but the word abc is not.\n>\n> The quine of a word can be obtained from its rotations, or from the edit distance between the two words. For example, the quine of abcde is abcde.\n\n```scala mdoc:reset\nimport sttp.client._\nimport sttp.client.algebra._\nimport sttp.client.ws._\nimport sttp.model.ws._\n\nimplicit val backend = HttpURLConnectionBackend()\n\nval queries: Set[String] = Set(\"quine\", \"quine.\")\n\ndef wordDistance(s: String): Int = {\n  s.length - s.zipWithIndex.filter(_._2!= 0).map(_._1.length).max + 1\n}\n\n"]}
{"task_id": "MBJSP/110", "prompt": "function extractMissing(testlist, strtval, stopval) {\n/**\n * * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n */", "entry_point": "extractMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 9], [15, 34], [48, 70]];\nvar arg01 = 2;\nvar arg02 = 100;\nvar x0 = extractMissing(arg00, arg01, arg02);\nvar v0 = [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 2], [15, 19], [38, 50]];\nvar arg11 = 5;\nvar arg12 = 60;\nvar x1 = extractMissing(arg10, arg11, arg12);\nvar v1 = [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 2], [15, 19], [38, 50]];\nvar arg21 = 1;\nvar arg22 = 52;\nvar x2 = extractMissing(arg20, arg21, arg22);\nvar v2 = [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "language": "javascript", "canonical_solution": "  if (testList === null) {\n    return [];\n  } else {\n    const res = [];\n    for (let i = 0; i < testList.length; i++) {\n      if (testList[i][0] > strtVal) {\n        res.push([strtVal, testList[i][0]]);\n        strtVal = testList[i][1];\n      }\n      if (strtVal < stopVal) {\n        res.push([strtVal, stopVal]);\n      }\n    }\n    return res;\n  }\n}", "completion": ["\n\n    /**\n     * * Remove all occurrences of the given character from the beginning of the given string.\n     */\n\n    /**\n     * * Remove all occurrences of the given character from the end of the given string.\n     */\n\n    /**\n     * * Split the given string at each occurrence of the given delimiter character, returning an array of strings.\n     */\n\n    /**\n     * * Return true if the given string contains any occurrences of the given character; otherwise, return false.\n     */\n\n    /**\n     * * Remove all occurrences of the given character from the beginning of the given string.\n     */\n\n    /**\n     * * Remove all occurrences of the given character from the end of the given string.\n     */\n\n    /**\n     * * Return true if the given string contains any occurrences of the given character, including overlapping occurrences; otherwise, return false.\n     */\n\n    /**\n     * * Split the given string at each occurrence of the given delimiter character, returning an array of strings.\n     */\n\n    /**\n     * * Remove all occurrences of the given character from the beginning of the given string.\n     */\n\n    /**\n     * * Remove all occurrences of the given character from the end of the given string.\n     */\n\n    /**\n     * * Return true if the given string contains any occurrences of the given character, including overlapping occurrences; otherwise, return false.\n     */\n\n    /**\n     * * Remove all occurrences of the given character from the beginning of the given string.\n     */\n\n    /**\n     * * Remove all occurrences of the given character from the end of the given string.\n     */\n\n    /**\n     * * Return true if the given string contains any occurrences of the given character, including overlapping occurrences; otherwise, return false.\n     */\n\n    /**\n     * * Split the given string at", "\n", "\nvar write_missing = function write_missing(testlist, strtval, stopval) {\n  return testlist.filter(", "\n(", "\n"]}
{"task_id": "MBJSP/111", "prompt": "function commonInNestedLists(nestedlist) {\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n */", "entry_point": "commonInNestedLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]];\nvar x0 = commonInNestedLists(arg00);\nvar v0 = [18, 12];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]];\nvar x1 = commonInNestedLists(arg10);\nvar v1 = [5, 23];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]];\nvar x2 = commonInNestedLists(arg20);\nvar v2 = [4];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "language": "javascript", "canonical_solution": "  // TODO: implement\n}", "completion": ["\n\n", "\n\n/**\n * * Write a function to find all common elements in given nested lists. * list item * list item * list item item\n */\n\n/**\n * * Write a function to find all common elements in given nested lists. * list item * list item * list item item item\n */\n\n/**\n * * Write a function to find all common elements in given nested lists. * list item * list item * list item item item item\n */\n\n/**\n * * Write a function to find all common elements in given nested lists. * list item * list item * list item item item item item item\n */\n\n/**\n * * Write a ", "\n\n...\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item item\n */\n\n...\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item item item\n */\n\n...\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item item item item item\n */\n\n...\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item item item item item item\n */\n\n...\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item item item item item item item item\n */\n\n...\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item item item item item item item item item item\n */\n\n...\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item * list item item item item item item item item item item item item item item\n */\n\n...\n\n/**\n * * Write a ", "\na(nestedlist, {}, {}, {})\nb(nestedlist, {}, {}, {})\nc(nestedlist, {}, {}, {})\nd(nestedlist, {}, {}, {})\ne(nestedlist, {}, {}, {})\nf(nestedlist, {}, {}, {})\ng(nestedlist, {}, {}, {})\nh(nestedlist, {}, {}, {})\ni(nestedlist, {}, {}, {})\nj(nestedlist, {}, {}, {})\nk(nestedlist, {}, {}, {})\nl(nestedlist, {}, {}, {})\nm(nestedlist, {}, {}, {})\nn(nestedlist, {}, {}, {})\no(nestedlist, {}, {}, {})\np(nestedlist, {}, {}, {})\nq(nestedlist, {}, {}, {})\nr(nestedlist, {}, {}, {})\ns(nestedlist, {}, {}, {})\nt(nestedlist, {}, {}, {})\nu(nestedlist, {}, {}, {})\nv(nestedlist, {}, {}, {})\nw(nestedlist, {}, {}, {})\nx(nestedlist, {}, {}, {})\ny(nestedlist, {}, {}, {})\nz(nestedlist, {}, {}, {})\n}\n\nfor (var i = 0; i < NestedLists.length; i++) {\n/**\n * * Write a ", "\n\nif (list1 == list2)\n{\nreturn \"Found common elements in given nested lists.\";\n}\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item item item item item item item\n */\n\nif (list1 == list2)\n{\nreturn \"Found common elements in given nested lists.\";\n}\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item item item item item item item item\n */\n\nif (list1 == list2)\n{\nreturn \"Found common elements in given nested lists.\";\n}\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item item item item item item item item item\n */\n\nif (list1 == list2)\n{\nreturn \"Found common elements in given nested lists.\";\n}\n\n/**\n * * Write a function to find common elements in given nested lists. * list item * list item item item item item item item item item item item item item item item item item item\n */\n\nif (list1 == list2)\n{\nreturn \"Found common elements in given nested lists.\";\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/112", "prompt": "function perimeter(diameter, height) {\n/**\n * * Write a JavaScript function to find the perimeter of a cylinder.\n */", "entry_point": "perimeter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = perimeter(arg00, arg01);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar x1 = perimeter(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 1;\nvar x2 = perimeter(arg20, arg21);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the perimeter of a cylinder.", "language": "javascript", "canonical_solution": "    return 2 * (diameter + height);\n}", "completion": ["\n", "\n", "\n", "\nvar cylinderPerimeter = function cylinderPerimeter(diameter, height) {\nreturn 2 * (diameter + height);\n};\n```\n\n#### 4.3.6.2.1 `polygonPerimeter`\n\n```\nvar polygonPerimeter = function polygonPerimeter(polygon) {\nvar perimeter = 0;\nvar side;\nvar currentAngle = 0;\nvar lastAngle = polygon.angles[0];\nfor (var index = 0; index < polygon.sides; index++) {\nside = polygon.sides[index];\ncurrentAngle = polygon.angles[index];\nperimeter += Math.abs(lastAngle - currentAngle);\nlastAngle = currentAngle;\n}\nreturn perimeter;\n};\n```\n\n#### 4.3.6.2.2 `rectanglePerimeter`\n\n```\nvar rectanglePerimeter = function rectanglePerimeter(rectangle) {\nreturn rectangle.width * rectangle.height;\n};\n```\n\n#### 4.3.6.2.3 `squarePerimeter`\n\n```\nvar squarePerimeter = function squarePerimeter(square) {\nreturn 4 * square.side;\n};\n```\n\n#### 4.3.6.2.4 `circlePerimeter`\n\n```\nvar circlePerimeter = function circlePerimeter(circle) {\nreturn 2 * Math.PI * circle.radius;\n};\n```\n\n#### 4.3.6.2.5 `trianglePerimeter`\n\n```\nvar trianglePerimeter = ", "\n\n/**\n * * Write a JavaScript function to find the area of a cylinder.\n */\n\n/**\n * * Write a JavaScript function to calculate the circumference of a circle.\n */\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/113", "prompt": "function checkInteger(text) {\n/**\n * * Write a function to check if a string represents an integer or not.\n */", "entry_point": "checkInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = checkInteger(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1\";\nvar x1 = checkInteger(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"12345\";\nvar x2 = checkInteger(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if a string represents an integer or not.", "language": "javascript", "canonical_solution": "  return /^-?\\d+$/.test(text);\n}", "completion": ["\n", "\n} else if (typeof (text) === 'object') {\n/**\n * * Check if a string represents an integer or not.\n */\n} else {\n/**\n * * Check if a string represents an integer or not.\n */\n}\n\n// #endif\n\n// CONCATENATED MODULE:./node_modules/_@vue/cli-service@2.4.4\n/* harmony default export */ var cli_service_2 = (componentFactory);\n// CONCATENATED MODULE:./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"10ad2c58-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/_@vue/cli-service@2.4.4\n// template\n\n\n/* harmony default export */ var template_2 = ({\n  data: function data() {\n    return {};\n  },\n  methods: {\n    clearCache: function clearCache() {\n      this.cache = {};\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(", "\n", "\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n/**\n * * Write a ", "\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a function to check if a string represents an integer or not.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/114", "prompt": "function assignFreq(testlist) {\n/**\n * * Write a function to assign frequency to each tuple in the given tuple list.\n */", "entry_point": "assignFreq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]];\nvar x0 = assignFreq(arg00);\nvar v0 = \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]];\nvar x1 = assignFreq(arg10);\nvar v1 = \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]];\nvar x2 = assignFreq(arg20);\nvar v2 = \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to assign frequency to each tuple in the given tuple list.", "language": "javascript", "canonical_solution": "  // TODO: Your code here\n}", "completion": ["\n", "\n      (testobj, i) => {\n        for (let j = 0; j < count; j++) {\n          this.db.test_frequency.insert({\n            test: testobj,\n            test_frequency: j\n          });\n        }\n      };\n    }\n\n  }\n\n  /**\n   * * Write a function to assign frequency to each tuple in the given tuple list.\n   */\n  export function test_frequency_insert_bulk(count) {\n    return new Promise(resolve => {\n      for (let i = 0; i < count; i++) {\n        this.db.test_frequency.insert_bulk({\n          test: 'test-obj',\n          test_frequency: i\n        });\n      }\n      resolve();\n    });\n  }\n\n  /**\n   * * Write a function to assign frequency to each tuple in the given tuple list.\n   */\n  export function test_frequency_insert_bulk_separate(count) {\n    return new Promise(resolve => {\n      for (let i = 0; i < count; i++) {\n        this.db.test_frequency.insert_bulk({\n          test: 'test-obj',\n          test_frequency: i,\n          separate: true\n        });\n      }\n      resolve();\n    });\n  }\n\n  /**\n   * * Write a function to assign frequency to each tuple in the given tuple list.\n   */\n  export ", "\n", "\ntestlist.forEach(", "\n"]}
{"task_id": "MBJSP/115", "prompt": "function emptyDit(list1) {\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */", "entry_point": "emptyDit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [{}, {}, {}];\nvar x0 = emptyDit(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [new Set([1,2]), {}, {}];\nvar x1 = emptyDit(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {};\nvar x2 = emptyDit(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether all dictionaries in a list are empty or not.", "language": "javascript", "canonical_solution": "    let flag = true\n    for (const key in list1) {\n        if (list1[key] instanceof Set) {\n            if (list1[key].size != 0) {\n                flag = false\n                break;\n            }\n        } else if (typeof list1[key] === 'object' && list1[key] != null) {\n            flag = emptyDit(list1[key])\n            if (!flag) {\n                break;\n            }\n        }\n    }\n    return flag;\n}", "completion": ["\n}\n```\n\n## <a name=\"2.2\">2.2 ForEach</a>\n\nThe `forEach` method allows you to iterate over a collection, allowing you to modify or delete elements from the collection.\n\nFor example, using the `forEach` method to print a list, you can remove the first element of the list and then print it again.\n\n```\nit(\"Print the list.\", () => {\n  let list = [1, 2, 3, 4];\n\n  let result = list.forEach(() => {\n    print(\"This is the list: \", list);\n  });\n\n  assert.equal(result, list);\n});\n```\n\n## <a name=\"2.3\">2.3 Properties and Methods</a>\n\n`Object.prototype` provides a variety of methods that you can use to get and set properties and methods.\n\n**Properties**\n\nYou can get and set properties using the following methods.\n\n* [`get`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/get)\n* [`set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/set)\n* [`has`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/has)\n* [`delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/delete)\n* [`valueOf`](https://developer.mozilla.org/en-US/docs/Web", "\n\n}\n<|endoftext|>", "\n\nvar check_all_dictionaries = function check_all_dictionaries() {\n    if (Object.keys(this.list1).length === 0) {\n        this.error = \"Error: All dictionaries must be filled in.\";\n        return false;\n    } else {\n        return true;\n    }\n};\n\n// ###############\n// ##      JSON      ##\n// ###############\n\n\nvar json_to_check = function json_to_check(json_object) {\n    // Check if object is valid\n    if (typeof json_object === \"object\") {\n        // Check if list is valid\n        if (typeof json_object.list1 === \"object\") {\n            // Check if list contains at least one dictionary\n            if (Object.keys(json_object.list1).length > 0) {\n                // Check if all dictionaries are valid\n                if (check_all_dictionaries.call(json_object.list1) === true) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n};\n\n// ###############\n// ##      JSON      ##\n// ###############\n\nvar add_dictionaries = ", "\n    return (list1.every((dict1) => {\n        return (typeof dict1!== \"undefined\" && dict1.length > 0);\n    }));\n}\n\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */\nit(list1) {\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */\n    return (list1.every((dict1) => {\n        return (typeof dict1!== \"undefined\" && dict1.length > 0);\n    }));\n}\n\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */\nit(list1) {\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */\n    return (list1.every((dict1) => {\n        return (typeof dict1!== \"undefined\" && dict1.length > 0);\n    }));\n}\n\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */\nit(list1) {\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */\n    return (list1.every((dict1) => {\n        return (typeof dict1!== \"undefined\" && dict1.length > 0);\n    }));\n}\n\n/**\n * * Write a function to check whether all dictionaries in a list are empty or not.\n */\nit(list1) {\n/**\n * * Write a ", "\n}\n<|endoftext|>"]}
{"task_id": "MBJSP/116", "prompt": "function tupleToInt(nums) {\n/**\n * * Write a function to convert a given tuple of positive integers into an integer.\n */", "entry_point": "tupleToInt", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = tupleToInt(arg00);\nvar v0 = 123;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6];\nvar x1 = tupleToInt(arg10);\nvar v1 = 456;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7];\nvar x2 = tupleToInt(arg20);\nvar v2 = 567;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert a given tuple of positive integers into an integer.", "language": "javascript", "canonical_solution": "  return nums.reduce((acc, cur) => acc * 10 + cur, 0);\n}", "completion": ["\nexport const setNums = (tupleOfIntegers: TupleOfIntegers, nums: string[]) => {\nreturn tupleOfIntegers.map(([x1, x2], n) => x1 + x2 + n).join('');\n};\n\n/**\n * * Write a function to convert a given tuple of positive integers into an integer.\n */\nexport const setNumsMinusOne = (tupleOfIntegers: TupleOfIntegers, nums: string[]) => {\nreturn tupleOfIntegers.map(([x1, x2], n) => x1 + x2 + n).join('-');\n};\n\n/**\n * * Write a function to convert a given tuple of positive integers into an integer.\n */\nexport const setNumsUnion = (tupleOfIntegers: TupleOfIntegers, nums: string[]) => {\nreturn tupleOfIntegers.map(([x1, x2], n) => x1 + x2 + n).join('-');\n};\n\n/**\n * * Write a function to convert a given tuple of positive integers into an integer.\n */\nexport const setNumsIntersect = (tupleOfIntegers: TupleOfIntegers, nums: string[]) => {\nreturn tupleOfIntegers.map(([x1, x2], n) => x1 + x2 + n).join('-');\n};\n\n/**\n * * Write a ", "\n\nvar nums = [1, 2, 3, 4, 5];\nvar nums2 = [1, 2, 3, 4, 5];\nvar nums3 = [1, 2, 3, 4, 5];\nvar nums4 = [1, 2, 3, 4, 5];\nvar nums5 = [1, 2, 3, 4, 5];\nvar nums6 = [1, 2, 3, 4, 5];\nvar nums7 = [1, 2, 3, 4, 5];\n\nvar nums8 = [1, 2, 3, 4, 5];\n\nvar nums9 = [1, 2, 3, 4, 5];\n\nvar nums10 = [1, 2, 3, 4, 5];\n\nvar nums11 = [1, 2, 3, 4, 5];\n\nvar nums12 = [1, 2, 3, 4, 5];\n\nvar nums13 = [1, 2, 3, 4, 5];\n\nvar nums14 = [1, 2, 3, 4, 5];\n\nvar nums15 = [1, 2, 3, 4, 5];\n\nvar nums16 = [1, 2, 3, 4, 5];\n\nvar nums17 = [1, 2, 3, 4, 5];\n\nvar nums18 = [1, 2, 3, 4, 5];\n\nvar nums19 = [1, 2, 3, 4, 5];\n\nvar nums20 = [1, 2, 3, 4, 5];\n\nvar nums21 = [1, 2, 3, 4, 5];\n\nvar nums22 = [1, 2, 3, 4, 5];\n\nvar nums23 = [1, 2", "\n", "\n\n", "\nvar convert = function convert() {\n  var _ref = arguments.length <= 0 || arguments[0] === undefined? {} : arguments[0];\n\n  var _ref$nums = _ref.nums,\n      nums = _ref$nums === void 0? [] : _ref$nums;\n  var _ref$start = _ref.start,\n      start = _ref$start === void 0? 0 : _ref$start;\n  var _ref$end = _ref.end,\n      end = _ref$end === void 0? nums.length : _ref$end;\n  var _ref$step = _ref.step,\n      step = _ref$step === void 0? 1 : _ref$step;\n\n  var num = Math.max.apply(Math, toArray(nums)).sort("]}
{"task_id": "MBJSP/117", "prompt": "function listToFloat(testlist) {\n/**\n * * Write a function to convert all possible convertible elements in the list to float.\n */", "entry_point": "listToFloat", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]];\nvar x0 = listToFloat(arg00);\nvar v0 = \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]];\nvar x1 = listToFloat(arg10);\nvar v1 = \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]];\nvar x2 = listToFloat(arg20);\nvar v2 = \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert all possible convertible elements in the list to float.", "language": "javascript", "canonical_solution": "  return testList.map(function(item) {\n    return item.map(function(value) {\n      return parseFloat(value);\n    });\n  });\n}", "completion": ["\n", "\n_toFloat: function(list) {\n\tvar f = 0;\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar converted = Convert.toFloat(list[i]);\n\t\tif (typeof converted === 'number') {\n\t\t\tf += converted;\n\t\t} else {\n\t\t\tf += list[i];\n\t\t}\n\t}\n\treturn f;\n}\n\n/**\n * * Write a function to convert all possible convertible elements in the list to string.\n */\n_toString: function(list) {\n\tvar s = '';\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar converted = Convert.toString(list[i]);\n\t\tif (typeof converted ==='string') {\n\t\t\ts += converted;\n\t\t} else {\n\t\t\ts += list[i];\n\t\t}\n\t}\n\treturn s;\n}\n\n/**\n * * Write a function to convert all possible convertible elements in the list to boolean.\n */\n_toBoolean: ", "\nasync function listToFloat(list) {\n  let floatlist = await convertListToFloat(list);\n  return floatlist;\n}\n/**\n * * Write a function to convert all possible convertible elements in the list to int.\n */\nasync function listToInt(list) {\n  let intlist = await convertListToInt(list);\n  return intlist;\n}\n/**\n * * Write a function to convert all possible convertible elements in the list to string.\n */\nasync function listToString(list) {\n  let stringlist = await convertListToString(list);\n  return stringlist;\n}\n/**\n * * Write a function to convert all possible convertible elements in the list to boolean.\n */\nasync function listToBool(list) {\n  let boollist = await convertListToBool(list);\n  return boollist;\n}\n\n/**\n * * Write a function to convert all possible convertible elements in the list to string.\n */\nasync function listToStringAll(list) {\n  let stringlist = await convertListToStringAll(list);\n  return stringlist;\n}\n/**\n * * Write a function to convert all possible convertible elements in the list to int.\n */\nasync function listToIntAll(list) {\n  let intlist = await convertListToIntAll(list);\n  return intlist;\n}\n/**\n * * Write a function to convert all possible convertible elements in the list to float.\n */\nasync function listToFloatAll(list) {\n  let floatlist = await convertListToFloatAll(list);\n  return floatlist;\n}\n/**\n * * Write a function to convert all possible convertible elements in the list to boolean.\n */\nasync ", "\n", "\nprivate function convert_to_float(test: List<List<Float>>, d: int): List<List<Float>> {\n    if (d == 1)\n        return test;\n    \n    var converted: List<List<Float>> = new List<List<Float>>();\n    \n    // First, convert to floats of size d\n    for (l in test)\n        converted.append(l.map(to_float));\n    \n    // Then convert to float of size d - 1\n    for (l in converted)\n        l.append(to_float(l[d - 1]))\n    \n    return converted;\n}\n/**\n * * Write a function to convert all possible convertible elements in the list to float.\n */\nprivate function convert_to_float(test: List<List<Byte>>, d: int): List<List<Byte>> {\n    if (d == 1)\n        return test;\n    \n    var converted: List<List<Byte>> = new List<List<Byte>>();\n    \n    // First, convert to float of size d\n    for (l in test)\n        converted.append(l.map(to_float));\n    \n    // Then convert to float of size d - 1\n    for (l in converted)\n        l.append(to_float(l[d - 1]))\n    \n    return converted;\n}\n/**\n * * Write a function to convert all possible convertible elements in the list to float.\n */\nprivate "]}
{"task_id": "MBJSP/118", "prompt": "function stringToList(string) {\n/**\n * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n */", "entry_point": "stringToList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programming\";\nvar x0 = stringToList(arg00);\nvar v0 = [\"python\", \"programming\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"lists tuples strings\";\nvar x1 = stringToList(arg10);\nvar v1 = [\"lists\", \"tuples\", \"strings\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"write a program\";\nvar x2 = stringToList(arg20);\nvar v2 = [\"write\", \"a\", \"program\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "language": "javascript", "canonical_solution": "  return string.split(\" \");\n}", "completion": ["\n", "\n", "\n/**\n * * [link text](https:// [link text](https://)))write a function to convert a string to a list.\n */\nvar func = function(string) {\n  return String(string)\n    .replace(/\\[([^\\]]*)\\]/g, '[$1]')\n    .replace(/\\[/g,'[')\n    .replace(/\\(/g,'(')\n    .replace(/\\[/g,'[')\n    .replace(/\\]/g, ']')\n    .replace(/\\)/g, ')')\n    .replace(/\\,/g, ', ');\n};\n/**\n * * [link text](https:// [link text](https://)))write a function to convert a string to a list.\n */\nvar list = function(string) {\n  return String(string)\n    .replace(/\\[([^\\]]*)\\]/g, '[$1]')\n    .replace(/\\[/g,'[')\n    .replace(/\\(/g,'(')\n    .replace(/\\[/g,'[')\n    .replace(/\\]/g, ']')\n    .replace(/\\)/g, ')')\n    .replace(/\\,/g, ', ');\n};\n/**\n * * [link text](https:// [link text](https://)))write a function to convert a string to a list.\n */\nvar link = ", "\nconst list = _.fromPairs(\n  _.map(pair => {\n    const [key, value] = pair;\n    return [key, value];\n  }).reduce((pairs, [key, value]) => {\n    pairs.push(key);\n    return pairs;\n  }, []));\n\n/**\n * * [link text](https:// [link text](https://)))write a function to convert a string to a list.\n */\nconst functionList = _.fromPairs(\n  _.map(pair => {\n    const [key, value] = pair;\n    return [key, value];\n  }).reduce((pairs, [key, value]) => {\n    pairs.push(key);\n    return pairs;\n  }, []));\n\n/**\n * * [link text](https:// [link text](https://)))write a function to convert a string to a list.\n */\nconst functionListToString = _.fromPairs(\n  _.map(pair => {\n    const [key, value] = pair;\n    return [key, value];\n  }).reduce((pairs, [key, value]) => {\n    pairs.push(key);\n    return pairs;\n  }, []));\n\n/**\n * * [link text](https:// [link text](https://)))write a ", "\n\n"]}
{"task_id": "MBJSP/119", "prompt": "function search(arr, n) {\n/**\n * * Write a JavaScript function to find the element that appears only once in a sorted array.\n */", "entry_point": "search", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 2, 3];\nvar arg01 = 5;\nvar x0 = search(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8];\nvar arg11 = 11;\nvar x1 = search(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 2, 3, 3, 4, 4];\nvar arg21 = 7;\nvar x2 = search(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the element that appears only once in a sorted array.", "language": "javascript", "canonical_solution": "    var XOR = 0;\n    for (var i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n    }\n    return (XOR);\n}", "completion": ["\n  var count = 0;\n  var arr = arr || [];\n  var n = n || 0;\n\n  for (var i = 0; i < arr.length; i++) {\n    if (i === n) {\n      arr[i] = (arr[i] + 1) % count;\n      break;\n    }\n\n    arr[i] = (arr[i] + 1) % count;\n  }\n}\n</script>\n<script>\n$(", "\n\nvar arr1 = [3, 2, 1, 5, 4, 6, 9, 8, 7];\n\nvar arr2 = [1, 2, 3, 5, 4, 6, 7, 8, 9];\n\nvar arr3 = [1, 2, 3, 5, 4, 6, 7, 8, 9];\n\nvar arr4 = [3, 2, 1, 5, 4, 6, 9, 8, 7];\n\nvar arr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nvar arr6 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nvar arr7 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nvar arr8 = [3, 2, 1, 5, 4, 6, 9, 8, 7];\n\nvar arr9 = [1, 2, 3, 5, 4, 6, 7, 8, 9];\n\nvar arr10 = [1, 2, 3, 5, 4, 6, 7, 8, 9];\n\nvar arr11 = [3, 2, 1, 5, 4, 6, 9, 8, 7];\n\nvar arr12 = [1, 2, 3, 5, 4, 6, 7, 8, 9];\n\nvar arr13 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nvar arr14 = [3, 2, 1, 5, 4, 6, 9, 8, 7];\n\nvar arr15 = [1, 2, 3, 5, 4, 6, 7, 8, 9];\n\nvar arr16 = [1, 2, 3, 5, 4, 6, 7, 8, 9];", "\nif (arr && arr.length && arr.sort && arr.sort(", "\n\nconst sorted = arr.sort();\n\nlet index = 0;\n\nwhile (index < sorted.length) {\n  if (sorted[index] === n) {\n    console.log(`found ${n} at index ${index}`);\n    break;\n  }\n\n  index += 1;\n}\n\nconsole.log(`done`);\n\n// Solution goes here\n<|endoftext|>", "\n    var find;\n    if (arr.length === 1) {\n        if (arr[0] === n) {\n            find = n;\n        }\n    } else {\n        var arr1 = [arr[0], arr[1]],\n            arr2 = [arr[1], arr[2]],\n            arr3 = [arr[2], arr[3]],\n            arr4 = [arr[3], arr[4]];\n        find = arr1.indexOf(n) > -1? arr[0] : arr2.indexOf(n) > -1? arr[1] : arr3.indexOf(n) > -1? arr[2] : arr4.indexOf(n) > -1? arr[3] : n;\n    }\n    return find;\n};\n\n/**\n * * Find the index of a JavaScript function in an array.\n */\nconst indexOfJSF = (arr, n) => {\n    return arr.indexOf(n);\n};\n\n/**\n * * Replace the substring of a string with a JavaScript function.\n */\nconst replaceJSF = (str, find, replace) => {\n    var newString = str.replace(find, replace);\n    return newString;\n};\n\n/**\n * * Test if a string is an array.\n */\nconst isArray = (val) => {\n    return val instanceof Array;\n};\n\n/**\n * * Check if a string is a valid JavaScript function.\n */\nconst isValidJSF = (val) => {\n    return typeof val === '"]}
{"task_id": "MBJSP/120", "prompt": "function maxProductTuple(list1) {\n/**\n * * Write a function to find the maximum product from the pairs of tuples within a given list.\n */", "entry_point": "maxProductTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 7], [2, 6], [1, 8], [4, 9]];\nvar x0 = maxProductTuple(arg00);\nvar v0 = 36;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [15, 2], [5, 10]];\nvar x1 = maxProductTuple(arg10);\nvar v1 = 200;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 44], [10, 15], [20, 5], [12, 9]];\nvar x2 = maxProductTuple(arg20);\nvar v2 = 484;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum product from the pairs of tuples within a given list.", "language": "javascript", "canonical_solution": "  const list2 = [];\n  for (let i = 0; i < list1.length; i += 1) {\n    const tuple = list1[i];\n    const product = tuple[0] * tuple[1];\n    list2.push(product);\n  }\n  return Math.max(...list2);\n}", "completion": ["\n", "\n", "\nlet max_product = (...list) => {\n  let max = 0;\n  for (let i = 0; i < list.length; i++) {\n    for (let j = i + 1; j < list.length; j++) {\n      let p1 = list[i].product();\n      let p2 = list[j].product();\n      if (p1 * p2 > max) {\n        max = p1 * p2;\n      }\n    }\n  }\n  return max;\n}\n\n// write a function to find the maximum product from the pairs of tuples within a given list.\nlet max_product = (...list) => {\n  let max = 0;\n  for (let i = 0; i < list.length; i++) {\n    for (let j = i + 1; j < list.length; j++) {\n      let p1 = list[i].product();\n      let p2 = list[j].product();\n      if (p1 * p2 > max) {\n        max = p1 * p2;\n      }\n    }\n  }\n  return max;\n}\n\n// write a ", "\nvar findMaximumProduct = function (list1) {\n    var max_product = list1[0].value * list1[1].value;\n    var max_product_index = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (max_product < list1[i].value * list1[i + 1].value) {\n            max_product = list1[i].value * list1[i + 1].value;\n            max_product_index = i;\n        }\n    }\n    return {\n        max_product: max_product,\n        max_product_index: max_product_index\n    };\n};\n</script>\n\n<script>\n/**\n * * Write a function to find the maximum product from the pairs of tuples within a given list.\n */\nvar findMaximumProduct2 = function (list1) {\n    var max_product = list1[0].value * list1[1].value;\n    var max_product_index = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (max_product < list1[i].value * list1[i + 1].value) {\n            max_product = list1[i].value * list1[i + 1].value;\n            max_product_index = i;\n        }\n    }\n    return {\n        max_product: max_product,\n        max_product_index: max_product_index\n    };\n};\n</script>\n\n<script>\n/**\n * * Write a function to find the maximum product from the pairs of tuples within a given list.\n */\nvar findMaximumProduct3 = ", "\n\n  /**\n   * @param {Tuple<string|number>} tuple1\n   * @param {Tuple<string|number>} tuple2\n   * @returns {number}\n   */\n\n  }\n\n\n  /**\n   * @param {Tuple<string|number>} tuple1\n   * @param {Tuple<string|number>} tuple2\n   * @returns {number}\n   */\n\n  };\n\n\n  /**\n   * @param {Tuple<string|number>} tuple1\n   * @param {Tuple<string|number>} tuple2\n   * @returns {number}\n   */\n\n  }\n\n\n  /**\n   * @param {Tuple<string|number>} tuple1\n   * @param {Tuple<string|number>} tuple2\n   * @returns {number}\n   */\n\n  }\n\n\n  /**\n   * @param {Tuple<string|number>} tuple1\n   * @param {Tuple<string|number>} tuple2\n   * @returns {number}\n   */\n\n  }\n\n\n  /**\n   * @param {Tuple<string|number>} tuple1\n   * @param {Tuple<string|number>} tuple2\n   * @returns {number}\n   */\n\n  }\n\n\n  /**\n   * @param {Tuple<string|number>} tuple1\n   * @param {Tuple<string|number>} tuple2\n   * @returns {number}\n   */\n\n  }\n\n\n  /**\n   * @param {Tuple<string|number>} tuple1\n   * @param {Tuple<string|number>} tuple2\n   * @returns {number"]}
{"task_id": "MBJSP/121", "prompt": "function checkTriplet(a, n, sum, count) {\n/**\n * * Write a function to find the triplet with sum of the given array\n */", "entry_point": "checkTriplet", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 7, 4, 0, 9, 5, 1, 3];\nvar arg01 = 8;\nvar arg02 = 6;\nvar arg03 = 0;\nvar x0 = checkTriplet(arg00, arg01, arg02, arg03);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 4, 5, 6, 7, 8, 5, 9];\nvar arg11 = 8;\nvar arg12 = 6;\nvar arg13 = 0;\nvar x1 = checkTriplet(arg10, arg11, arg12, arg13);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 4, 2, 3, 5];\nvar arg21 = 5;\nvar arg22 = 15;\nvar arg23 = 0;\nvar x2 = checkTriplet(arg20, arg21, arg22, arg23);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the triplet with sum of the given array", "language": "javascript", "canonical_solution": "  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === sum) {\n          count++;\n          console.log(count);\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}", "completion": ["\n", "\nlet triplet = function(a,n,sum,count){\n    if(a<n){\n        triplet(a+1,n,sum,count);\n    }\n    if(n>a+1 && sum<=a+1){\n        count++;\n        triplet(a+2,n,sum,count);\n    }\n};\n\ntriplet(2,3,6,0);\ntriplet(3,2,4,0);\ntriplet(3,3,6,0);\ntriplet(1,2,3,0);\ntriplet(1,3,5,0);\ntriplet(1,4,3,0);\ntriplet(1,5,4,0);\ntriplet(1,6,5,0);\ntriplet(1,7,6,0);\ntriplet(1,8,7,0);\ntriplet(1,9,8,0);\ntriplet(1,10,9,0);\ntriplet(1,11,10,0);\ntriplet(1,12,11,0);\ntriplet(1,13,12,0);\ntriplet(1,14,13,0);\ntriplet(1,15,14,0);\ntriplet(1,16,15,0);\ntriplet(1,17,16,0);\ntriplet(1,18,17,0);\ntriplet(1,19,18,0);\ntriplet(1,20,19,0);\n\n/**\n * * Write a function to find the triplet with sum of the given array\n */\nlet triplet = ", "\n\n", "\n}\n\n/**\n * @param {number[]} input\n * @param {number} k\n * @param {number} sum\n * @param {number} count\n */\n", "\n\nvar findTriplet = function () {\n    var ele = arguments.length > 0 && arguments[0]!== undefined? arguments[0] : [];\n    var sum = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : 0;\n    var count = arguments.length > 2 && arguments[2]!== undefined? arguments[2] : 0;\n\n    var checkElement = function checkElement(i, j) {\n        return i === j || i + j === sum;\n    };\n\n    if (ele.length < 3) {\n        throw new Error('Invalid number of arguments.');\n    }\n\n    if (!ele.every("]}
{"task_id": "MBJSP/122", "prompt": "function smartnumber(n) {\n/**\n * * Write a function to find n\u2019th smart number.\n */", "entry_point": "smartnumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = smartnumber(arg00);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 50;\nvar x1 = smartnumber(arg10);\nvar v1 = 273;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1000;\nvar x2 = smartnumber(arg20);\nvar v2 = 2664;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find n\u2019th smart number.", "language": "javascript", "canonical_solution": "  if (n === 1) {\n    return 30;\n  }\n  else if (n === 50) {\n    return 273;\n  }\n  else if (n === 1000) {\n    return 2664;\n  }\n  else {\n    return null;\n  }\n}", "completion": ["\nn: typeof n,\n/**\n * * Return the smallest smart number that is greater than or equal to n.\n */\nnge(n) {\n/**\n * * Write a function to find n\u2019th smart number.\n */\nn: typeof n,\n/**\n * * Return the largest smart number that is less than or equal to n.\n */\nnlt(n) {\n/**\n * * Write a function to find n\u2019th smart number.\n */\nn: typeof n,\n/**\n * * Return the largest smart number that is less than n.\n */\nn: typeof n,\n/**\n * * Write a function to find n\u2019th smart number.\n */\nn: typeof n,\n/**\n * * Return the smallest smart number that is greater than or equal to n.\n */\nnge(n) {\n/**\n * * Write a function to find n\u2019th smart number.\n */\nn: typeof n,\n/**\n * * Return the smallest smart number that is greater than or equal to n.\n */\nn: typeof n,\n/**\n * * Return the smallest smart number that is greater than or equal to n.\n */\nn: typeof n,\n/**\n * * Return the largest smart number that is less than or equal to n.\n */\nnlt(n) {\n/**\n * * Write a ", "\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an even\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an odd\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an even\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an odd\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an even\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an odd\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an even\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an odd\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and an \u201cat\u201d symbol if the value is an even\n * * number.\n */\n\n/**\n * * Return a string containing everything that needs to be\n * * written to it and", "\nn--;\n}\n```\n\n## Docs\n\n- [Punycode](https://github.com/bestiejs/punycode.js)\n- [URL](http://url.spec.whatwg.org/)\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n\n[cover]: https://codecov.io/gh/bestiejs/punycode.js/branch/master\n<|endoftext|>", "\nn && console.log(n);\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n", "\nn %= 1;\n}\n\nvar nthSmartNumber = findNthSmartNumber(n);\n```\n\n**Output**\n\n```javascript\nvar nthSmartNumber = findNthSmartNumber(6);\n```\n\n## \u984c\u76ee\n\n### Problem 1\n\n> Write a function to find n\u2019th smart number.\n\n### \u7bc4\u4f8b 1\n\n#### \u8aaa\u660e\n\n> nthSmartNumber \u662f\u984c\u76ee\u6240\u9700\u7684\u7bc4\u4f8b\u3002\n\n#### \u57f7\u884c\u7d50\u679c\n\n```\nvar nthSmartNumber = findNthSmartNumber(6);\n```\n\n### \u7bc4\u4f8b 2\n\n#### \u8aaa\u660e\n\n> Write a function to find n\u2019th smart number.\n\n#### \u57f7\u884c\u7d50\u679c\n\n```\nvar nthSmartNumber = findNthSmartNumber(5);\n```\n\n### Problem 2\n\n> Write a function to find n\u2019th smart number.\n\n### \u7bc4\u4f8b 3\n\n#### \u8aaa\u660e\n\n> Write a function to find n\u2019th smart number.\n\n#### \u57f7\u884c\u7d50\u679c\n\n```\nvar nthSmartNumber = findNthSmartNumber(1);\n```\n\n### Problem 3\n\n> Write a function to find n\u2019th smart number.\n\n### \u7bc4\u4f8b 4\n\n#### \u8aaa\u660e\n\n> Write a "]}
{"task_id": "MBJSP/123", "prompt": "function amicableNumbersSum(limit) {\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */", "entry_point": "amicableNumbersSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 999;\nvar x0 = amicableNumbersSum(arg00);\nvar v0 = 504;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9999;\nvar x1 = amicableNumbersSum(arg10);\nvar v1 = 31626;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 99;\nvar x2 = amicableNumbersSum(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sum all amicable numbers from 1 to a specified number.", "language": "javascript", "canonical_solution": "  let sum = 0;\n  for (let i = 1; i < limit; i++) {\n    let sumOfDivisors = 0;\n    let sumOfDivisorsOfSum = 0;\n    for (let j = 1; j < i; j++) {\n      if (i % j === 0) {\n        sumOfDivisors += j;\n      }\n    }\n\n    if (i !== sumOfDivisors) {\n      for (let k = 1; k < sumOfDivisors; k++) {\n        if (sumOfDivisors % k === 0) {\n          sumOfDivisorsOfSum += k;\n        }\n      }\n      if (i === sumOfDivisorsOfSum) {\n        sum += i;\n      }\n    }\n  }\n\n  return sum;\n}", "completion": ["\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n\n/**\n * * Write a ", "\n", "\n", "\n/**\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n */\n", "\nvar sum = function sum(limit) {\n  var answer = 0;\n\n  for (var i = 1; i <= limit; i++) {\n    if (isPossible(i)) {\n      answer += i;\n    }\n  }\n\n  return answer;\n};\n\n/**\n * * Check if a number can be sumed up by an amicable number.\n */\nvar isPossible = function isPossible(answer) {\n  for (var i = 1; i <= answer; i++) {\n    if (answer % i === 0 && i % answer === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * ## Advanced\n *\n * ### Numeric limits\n *\n * **/\n\nvar sumNumeric = function sumNumeric(limit) {\n  var answer = 0;\n\n  for (var i = 1; i <= limit; i++) {\n    answer += i;\n  }\n\n  return answer;\n};\n\nvar isPossibleNumeric = function isPossibleNumeric(answer) {\n  for (var i = 1; i <= answer; i++) {\n    if (i % answer === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * ### Text limits\n *\n * **/\n\nvar sumText = function sumText(limit) {\n  var answer = '';\n\n  for (var i = 0; i < limit; i++) {\n    answer += i;\n  }\n\n  return answer;\n};\n\nvar isPossibleText = "]}
{"task_id": "MBJSP/125", "prompt": "function findLength(string, n) {\n/**\n * * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n */", "entry_point": "findLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"11000010001\";\nvar arg01 = 11;\nvar x0 = findLength(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"10111\";\nvar arg11 = 5;\nvar x1 = findLength(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"11011101100101\";\nvar arg21 = 14;\nvar x2 = findLength(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "language": "javascript", "canonical_solution": "  current_sum = 0\n  max_sum = 0\n  for (i = 0; i < n; i++) {\n    if (string[i] === '0') {\n      current_sum += 1\n    } else {\n      current_sum -= 1\n    }\n    if (current_sum < 0) {\n      current_sum = 0\n    }\n    max_sum = Math.max(max_sum, current_sum)\n  }\n  return max_sum\n}", "completion": ["\n\nvar function_ = function_(s, i) {\nreturn s.charAt(i) === '0'? 0 : 1;\n},\n\nmaxDiff_ = ", "\nconst maxDiff = (string, n) => {\n  // Write your code here.\n  return 0;\n};\n```\n\n### List of n elements each containing one number\n\n```javascript\n/**\n * Write a function to generate all subsets of a given list of integers.\n */\nconst subsets = (list, n) => {\n  // Write your code here.\n  return [];\n};\n```\n\n### Fibonacci series\n\n```javascript\n/**\n * Write a function to generate all Fibonacci series up to the nth term.\n */\nconst fiboSeries = (n) => {\n  // Write your code here.\n  return [];\n};\n```\n\n### Generate all subsets of a given list of integers\n\n```javascript\n/**\n * Write a function to generate all subsets of a given list of integers.\n */\nconst subsets = (list, n) => {\n  // Write your code here.\n  return [];\n};\n```\n\n### Generate all subsets of a given list of integers\n\n```javascript\n/**\n * Write a function to generate all subsets of a given list of integers.\n */\nconst subsets = (list, n) => {\n  // Write your code here.\n  return [];\n};\n```\n\n## Combinations / Permutations\n\n### Generate all possible permutations of a given list of integers\n\n```javascript\n/**\n * Write a ", "\n\nconst maxDiff = (string, n) => {\n  let maxDiff = 0;\n  const get = (num) => string.substring(num, num + n);\n\n  for (let i = 0; i < string.length - n + 1; i++) {\n    let subString = string.substring(i, i + n);\n\n    if (subString === '1' + '0' * n) {\n      maxDiff = Math.max(maxDiff, get(i + n - 1) - get(i));\n    }\n  }\n\n  return maxDiff;\n};\n```\n\n</details>\n<details>\n<summary><strong>Tests</strong></summary>\n\n```javascript\ndescribe('maxDiff', () => {\n  it('should return max difference of 0s and 1s in any sub-string', () => {\n    assert.equal(maxDiff('10101', 2), 1)\n    assert.equal(maxDiff('10101', 3), 2)\n  });\n});\n```\n\n</details>\n<hr />\n\n### <a name=\"log\"></a>log\n\nYou can access the **console** function through the global object **console**.\n\n**log** ", "\nlet subString = string.split(\"\").map(() => \"\");\nlet max = 0;\nfor (let i = 0; i < subString.length; i++) {\n    for (let j = i; j < subString.length; j++) {\n        subString[j] = \"1\" + subString[j];\n        let counts = subString[j].split(\"\").map(() => 0);\n        for (let k = 0; k < subString[j].length; k++) {\n            counts[k] = counts[k] + 1;\n        }\n        let diff = 0;\n        for (let k = 0; k < counts.length; k++) {\n            diff = Math.abs(counts[k] - counts[k + 1]);\n            if (diff > max) {\n                max = diff;\n            }\n        }\n    }\n}\nreturn max;\n}\n```\n\n#### [\u9762\u8bd5\u98986.12. \u4efb\u52a1\u7b97\u6cd5 - \u9636\u68af\u6cd5](https://leetcode.com/problems/task-scheduler/discuss/8421/Python-using-hash-table)\n\n\u9636\u68af\u6cd5\uff0c\u6784\u9020\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u4ee5\u7b2c\u4e00\u4e2a\u4efb\u52a1\u4f5c\u4e3a\u952e\uff0c\u4ee5\u5f53\u524d\u4efb\u52a1\u4f5c\u4e3a\u503c\uff0c\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u5b58\u50a8\u4e00\u4e2a\u8bb0\u5f55\uff0c\u8bb0\u5f55\u7684\u503c\u662f\u4ee5\u5f53\u524d\ufffd", "\n\n"]}
{"task_id": "MBJSP/126", "prompt": "function sum(a, b) {\n/**\n * * Write a JavaScript function to find the sum of common divisors of two given numbers.\n */", "entry_point": "sum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 15;\nvar x0 = sum(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 100;\nvar arg11 = 150;\nvar x1 = sum(arg10, arg11);\nvar v1 = 93;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 6;\nvar x2 = sum(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of common divisors of two given numbers.", "language": "javascript", "canonical_solution": "  let sum = 0;\n  for (let i = 1; i <= a && i <= b; i++) {\n    if (a % i === 0 && b % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}", "completion": ["\nvar sumOfCommonDivisors = function sumOfCommonDivisors(a, b) {\n    var i = Math.min(a, b),\n        j = Math.max(a, b);\n\n    var c = 0,\n        d = 1,\n        x = 0,\n        y = 1,\n        k = 0,\n        l = 0,\n        n = 1,\n        m = 1,\n        h = 1,\n        g = 1,\n        f = 1;\n\n    while (true) {\n        if (i === h) {\n            c++;\n        }\n\n        if (j === h) {\n            c++;\n        }\n\n        if (i === c && j === c) {\n            return d;\n        }\n\n        x = Math.floor(i / j);\n        y = Math.floor(j / i);\n\n        i = x * m;\n        j = y * n;\n\n        k = sumOfCommonDivisors(m, n);\n        l = sumOfCommonDivisors(x, y);\n\n        m = k;\n        n = l;\n\n        h++;\n\n        if (i === m && j === n) {\n            return d;\n        }\n\n        d++;\n    }\n};\n\nmodule.exports = sumOfCommonDivisors;\n},{}],55:[", "\nvar sumCommonDivisors = function sumCommonDivisors(a, b) {\n  return Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(a / b, 2) - Math.pow(b / a, 2);\n};\n\n// Test all combinations of the provided array of numbers.\nvar testAllCombinations = function testAllCombinations(numbers) {\n  var combinations = combinations(numbers);\n  var results = [];\n  for (var i = 0; i < combinations.length; ++i) {\n    var numbersRemaining = numbers.slice(0, numbers.length - i);\n    var combination = combinations[i];\n    var resultsForCombination = testCombination(combination, numbersRemaining);\n    results.push.apply(results, resultsForCombination);\n  }\n  return results;\n};\n\n// Test the combination of the provided array of numbers.\nvar testCombination = function testCombination(combination, numbers) {\n  var results = [];\n  for (var i = 0; i < combination.length; ++i) {\n    var number = combination[i];\n    var numberRemaining = numbers.slice(0, numbers.length - i - 1);\n    results.push(sumCommonDivisors(number, numberRemaining));\n  }\n  return results;\n};\n\n// Start the test suite.\nvar testSuite = ", "\n}\n\n// Expected result: 2\n\n// ---------------------------------------------------------------------------------------------------------\n// 1.1 - Write a JavaScript function to find the sum of common divisors of two given numbers.\n// ---------------------------------------------------------------------------------------------------------\n\n// Given two numbers,\n// find the sum of common divisors of these two numbers\n\n// ---------------------------------------------------------------------------------------------------------\n// 1.2 - Write a JavaScript function to find the sum of common divisors of two given numbers.\n// ---------------------------------------------------------------------------------------------------------\n\n// Given two numbers,\n// find the sum of common divisors of these two numbers\n// where 1 is not a divisor\n\n// ---------------------------------------------------------------------------------------------------------\n// 1.3 - Write a JavaScript function to find the sum of common divisors of two given numbers.\n// ---------------------------------------------------------------------------------------------------------\n\n// Given two numbers,\n// find the sum of common divisors of these two numbers\n// where all divisors are distinct\n\n// ---------------------------------------------------------------------------------------------------------\n// 1.4 - Write a JavaScript function to find the sum of common divisors of two given numbers.\n// ---------------------------------------------------------------------------------------------------------\n\n// Given two numbers,\n// find the sum of common divisors of these two numbers\n// where all divisors are equal\n\n// ---------------------------------------------------------------------------------------------------------\n// 1.5 - Write a JavaScript function to find the sum of common divisors of two given numbers.\n// ---------------------------------------------------------------------------------------------------------\n\n// Given two numbers,\n// find the sum of common divisors of these two numbers\n// where there are no common divisors\n\n// ---------------------------------------------------------------------------------------------------------\n// 1.6 - Write a JavaScript ", "\nconst sumCommonDivisors = (a, b) => {\n    const sum = Math.abs(a - b);\n    const _sum = [sum].concat(solve(a, b)).slice(1);\n    return _sum;\n};\n\n/**\n * * Write a JavaScript function to find the sum of prime factors of a given number.\n */\nconst sumPrimeFactors = (n) => {\n    return solve(n, 1);\n};\n\n/**\n * * Write a JavaScript function to find the sum of the first N natural numbers.\n */\nconst sumNth = (n) => {\n    const _sum = [n].concat(solve(1, n)).slice(1);\n    return _sum;\n};\n\n/**\n * * Write a JavaScript function to find the sum of squares of consecutive natural numbers.\n */\nconst sumOfSquares = (n) => {\n    const _sum = [n * n].concat(solve(n, n + 1)).slice(1);\n    return _sum;\n};\n\n/**\n * * Write a JavaScript function to find the sum of the squares of first N consecutive natural numbers.\n */\nconst sumOfSquaresNth = (n) => {\n    const _sum = [n * n].concat(solve(1, n + 1)).slice(1);\n    return _sum;\n};\n\n/**\n * * Write a JavaScript ", "\nconst sumCommonDivisors = (a, b) => {\n  return a.reduce((acc, num) => {\n    const isDivisible = num % b === 0;\n    return acc + num * isDivisible;\n  }, 0) + b.reduce((acc, num) => {\n    const isDivisible = num % a === 0;\n    return acc + num * isDivisible;\n  }, 0);\n};\n\n/**\n * * Given a JavaScript function, write a JavaScript function that prints the name of the function after transforming the first name into the last name.\n */\nconst transformFirstLastName = functionName => {\n  const lowerCase = functionName.toLowerCase();\n  return `${lowerCase.charAt(0).toUpperCase()}${lowerCase.slice(1)}`;\n};\n\n/**\n * * Given a JavaScript function, write a JavaScript function that prints the result of applying the function to each of the elements in an array.\n */\nconst transformValues = values => {\n  return values.reduce((acc, value) => {\n    return acc.concat(value);\n  }, []);\n};\n\n/**\n * * Given a JavaScript function, write a JavaScript function that returns the values of the array after applying the function to each element.\n */\nconst transformValuesAndPrint = values => {\n  return values.reduce((acc, value) => {\n    return acc.concat(value);\n  }, []);\n};\n\n/**\n * * Write a JavaScript function that returns the value of the last element in the array of numbers.\n */\nconst valuesLast = values => {\n  return values[values.length - 1];\n};\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/127", "prompt": "function multiplyInt(x, y) {\n/**\n * * Write a function to multiply two integers without using the * operator in JavaScript.\n */", "entry_point": "multiplyInt", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = multiplyInt(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 10;\nvar x1 = multiplyInt(arg10, arg11);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 8;\nvar x2 = multiplyInt(arg20, arg21);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to multiply two integers without using the * operator in JavaScript.", "language": "javascript", "canonical_solution": "  return x * y;\n}", "completion": ["\nmultiply(x, y) {\n    return x * y;\n};\n```\n\nIn the example above, we have used the `multiply` function. The function should take two integers and multiply them. We can call the function on the number `6` and multiply it to the number `12`: `6 * 12`.\n\n**Note:** JavaScript allows us to call functions that are not defined on the global object (`window`). If we attempt to call the `multiply` function on `7`, we get a `ReferenceError`.\n\n### `divide`\n\nThe `divide` function is defined on the global object. `divide` is a function that takes two integers as arguments and returns their quotient. For example, we can calculate the quotient of the following two expressions: `3 / 2` and `2 / 3`.\n\n```javascript\n(", "\nx.map(y => y * y);\n```\n\n## Operations on arrays\n\n### `array.concat()`\n\nThis method concatenates two arrays, passing each element of the first array to the right of each element of the second array.\n\n```js\nconst a = [1, 2, 3];\nconst b = [4, 5, 6];\nconst c = a.concat(b);\nconsole.log(c); // [ 1, 2, 3, 4, 5, 6 ]\n```\n\n### `array.diff()`\n\nThis method returns the elements that are not in the second array.\n\n```js\nconst a = [1, 2, 3];\nconst b = [1, 2];\nconst c = a.diff(b);\nconsole.log(c); // [ 3 ]\n```\n\n### `array.filter()`\n\nThis method filters the elements in the array by using a predicate function.\n\n```js\nconst a = [1, 2, 3];\nconst b = [1, 2];\nconst c = a.filter(x => x % 2 === 1);\nconsole.log(c); // [ 2, 3 ]\n```\n\n### `array.flat()`\n\nThis method flattens the array by using a predicate function.\n\n```js\nconst a = [1, 2, [3], 4];\nconst b = a.flat();\nconsole.log(b); // [ 1, 2, 3, 4 ]\n```\n\n### `array.forEach()`\n\nThis method invokes a ", "\n\n/**\n * * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to multiply two integers without using the * operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a function to add two integers without using the + operator in JavaScript.\n */\n\n/**\n * Write a ", "\n", "\n\n\nx = x * 2;\n\n// * Write a "]}
{"task_id": "MBJSP/128", "prompt": "function longWords(n, str) {\n/**\n * * Write a function to shortlist words that are longer than n from a given list of words.\n */", "entry_point": "longWords", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = \"python is a programming language\";\nvar x0 = longWords(arg00, arg01);\nvar v0 = [\"python\", \"programming\", \"language\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = \"writing a program\";\nvar x1 = longWords(arg10, arg11);\nvar v1 = [\"writing\", \"program\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = \"sorting list\";\nvar x2 = longWords(arg20, arg21);\nvar v2 = [\"sorting\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to shortlist words that are longer than n from a given list of words.", "language": "javascript", "canonical_solution": "  const words = str.split(' ');\n  const result = [];\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n\n  return result;\n}", "completion": ["\n\n  return ", "\n\n    var n;\n    if (n === void 0) {\n        n = 10;\n    }\n\n    var re_1 = \"\";\n\n    for (var i = 0; i < n; i++) {\n        re_1 = re_1 + \"\\\\w{\" + (i + 1) + \"}\";\n    }\n    re_1 = new RegExp(re_1, \"g\");\n\n    var re_2 = \"\";\n\n    for (var i = 0; i < n; i++) {\n        re_2 = re_2 + \"\\\\w{\" + (i + 1) + \"}\";\n    }\n    re_2 = new RegExp(re_2, \"g\");\n\n    var re_3 = \"\";\n\n    for (var i = 0; i < n; i++) {\n        re_3 = re_3 + \"\\\\w{\" + (i + 1) + \"}\";\n    }\n    re_3 = new RegExp(re_3, \"g\");\n\n    var re_4 = \"\";\n\n    for (var i = 0; i < n; i++) {\n        re_4 = re_4 + \"\\\\w{\" + (i + 1) + \"}\";\n    }\n    re_4 = new RegExp(re_4, \"g\");\n\n    var re_5 = \"\";\n\n    for (var i = 0; i < n; i++) {\n        re_5 = re_5 + \"\\\\w{\" + (i + 1) + \"}\";\n    }\n    re_5 = new RegExp(re_5, \"g\");\n\n    var re_6 = \"\";\n\n    for (var i = 0; i < n; i++) {\n        re_6 =", "\nreturn function(text) {\n\tlet count = 0;\n\tlet words = text.split(' ');\n\twords.forEach(word => {\n\t\tif (word.length > n) {\n\t\t\tcount++;\n\t\t}\n\t});\n\treturn count;\n};\n```\n\nIn the above code, we are creating a function called `get_longer_words`. In this ", "\n\n},{}],219:[", "\n\n// We need to use a global object in this case.\nwindow = {};\n\n// Load the list of words.\nwindow.wordlist = require('./wordlist.json');\n\nvar words = [].slice.call(arguments, 2);\n\n// Write out the function.\nwindow.writeShortListWords = function(n, callback) {\n/**\n * * Write a function to shortlist words that are longer than n from a given list of words.\n */\n\n// Load the list of words.\nwindow.wordlist = require('./wordlist.json');\n\nvar filter = function(word) {\n  // Check if the word is in the list.\n  var isInList = window.wordlist.indexOf(word)!== -1;\n\n  // Check if the word is in the list.\n  var isInWords = words.indexOf(word)!== -1;\n\n  // Check if the word is longer than n.\n  var isLongerThanN = word.length > n;\n\n  // Return true if it's in the list or longer than n.\n  return isInList || isLongerThanN;\n};\n\n// Filter the list.\nwindow.filterShortListWords = function(callback) {\n/**\n * * Filter a "]}
{"task_id": "MBJSP/129", "prompt": "function magicSquareTest(mymatrix) {\n/**\n * * Write a function to calculate magic square.\n */", "entry_point": "magicSquareTest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]];\nvar x0 = magicSquareTest(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 7, 6], [9, 5, 1], [4, 3, 8]];\nvar x1 = magicSquareTest(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 7, 6], [9, 5, 1], [4, 3, 7]];\nvar x2 = magicSquareTest(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate magic square.", "language": "javascript", "canonical_solution": "  let firstRowSum = 0;\n  let firstColumnSum = 0;\n  let secondRowSum = 0;\n  let secondColumnSum = 0;\n  let magicSquare = false;\n\n  for (let i = 0; i < myMatrix.length; i += 1) {\n    firstRowSum += myMatrix[i][0];\n    firstColumnSum += myMatrix[0][i];\n  }\n\n  for (let i = 0; i < myMatrix.length; i += 1) {\n    secondRowSum += myMatrix[i][myMatrix.length - 1];\n    secondColumnSum += myMatrix[myMatrix.length - 1][i];\n  }\n\n  if (firstRowSum !== secondColumnSum || firstColumnSum !== secondRowSum) {\n    magicSquare = false;\n  } else {\n    magicSquare = true;\n  }\n\n  return magicSquare;\n}", "completion": ["\n\n\n\n/**\n * * Write a function to calculate magic square.\n */\n```\n\n### *Summary:*\n\n- **Type of Code**: [JavaScript](https://www.typescriptlang.org/docs/handbook/javascript-declaration-files.html)\n- **Type of License**: [MIT](https://opensource.org/licenses/MIT)\n- **Brief Description**: [Magic square with letters](https://peter.sh/experiments/magic-square-with-letters/)\n- **Type of Solution**: [Python](https://www.python.org/downloads/release/python-2710/)\n- **Type of Documentation**: [HTML](https://docs.python.org/3/tutorial/html/index.html)\n- **Purpose**: [Magic square with letters](https://peter.sh/experiments/magic-square-with-letters/)\n- **Use Case**: [Magic square with letters](https://peter.sh/experiments/magic-square-with-letters/)\n- **Test Case**: [Magic square with letters](https://peter.sh/experiments/magic-square-with-letters/)\n- **Maintainer**: [Peter Sh](https://twitter.com/peter_sh)\n\n### *Challenge:*\n\n<details>\n<summary>\nIn this challenge you will write a function to calculate magic square.\n</summary>\n\n<img width=\"300px\" src=\"https://raw.githubusercontent.com/peter-sh/magic-square/master/img/challenge.jpg\">\n\nIn this challenge you will write a ", "\nconst magic = n => {\n\tlet sum = 0, counter = 0;\n\tconst [row, col] = n.choose(2);\n\tconst [row1, col1] = n.choose(2);\n\n\twhile (counter < row * col) {\n\t\tif (counter == 0 || counter == row1 * col1 + row * col1 + col) {\n\t\t\tsum += n[counter];\n\t\t\tcounter++;\n\t\t}\n\t\telse {\n\t\t\tsum -= n[counter];\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn sum;\n};\n\n```\n\n#### Solution\n\n```\nvar n = 8;\nvar magic_square = function(n) {\n\tvar magic = ", "\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a function to calculate magic square.\n */\n\n/**\n * Write a ", "\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a function to calculate magic square.\n */\n\n\n/**\n * * Write a ", "\n}\n<|endoftext|>"]}
{"task_id": "MBJSP/130", "prompt": "function maxOccurrences(nums) {\n/**\n * * Write a function to find the item with maximum frequency in a given list.\n */", "entry_point": "maxOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2];\nvar x0 = maxOccurrences(arg00);\nvar v0 = [2, 5];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18];\nvar x1 = maxOccurrences(arg10);\nvar v1 = [8, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10];\nvar x2 = maxOccurrences(arg20);\nvar v2 = [20, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the item with maximum frequency in a given list.", "language": "javascript", "canonical_solution": "  let max = 0;\n  let maxOccurrence = 0;\n  let occurrence = 0;\n  for (let i = 0; i < nums.length; i++) {\n    occurrence = 0;\n    for (let j = 0; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        occurrence++;\n      }\n    }\n    if (occurrence > max) {\n      max = occurrence;\n      maxOccurrence = nums[i];\n    }\n  }\n  return [maxOccurrence, max];\n}", "completion": ["\n", "\n", "\n", "\n", "\n"]}
{"task_id": "MBJSP/131", "prompt": "function reverseVowels(str1) {\n/**\n * * Write a JavaScript function to reverse only the vowels of a given string.\n */", "entry_point": "reverseVowels", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Python\";\nvar x0 = reverseVowels(arg00);\nvar v0 = \"Python\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"USA\";\nvar x1 = reverseVowels(arg10);\nvar v1 = \"ASU\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ab\";\nvar x2 = reverseVowels(arg20);\nvar v2 = \"ab\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to reverse only the vowels of a given string.", "language": "javascript", "canonical_solution": "  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let str2 = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (vowels.includes(str1[i])) {\n      str2 += str1[i];\n    }\n  }\n  return str2;\n}", "completion": ["\n\n", "\n/**\n * * Write a JavaScript function to find the count of the vowels of a given string.\n */\n/**\n * * Write a JavaScript function to find the sum of all the digits in a given number.\n */\n/**\n * * Write a JavaScript function to check whether a given character is an alphabet or not.\n */\n/**\n * * Write a JavaScript function to reverse a given string using recursion.\n */\n/**\n * * Write a JavaScript function to find the smallest number that can be divided by both the given numbers without remainder.\n */\n/**\n * * Write a JavaScript function to find the smallest number that can be divided by both the given numbers without remainder.\n */\n/**\n * * Write a JavaScript function to find the sum of the digits in the given number.\n */\n/**\n * * Write a JavaScript function to check whether the given string is a palindrome or not.\n */\n/**\n * * Write a JavaScript function to find the count of the unique characters in the given string.\n */\n/**\n * * Write a JavaScript function to count the frequency of each word in the given string.\n */\n/**\n * * Write a JavaScript function to check whether all the given characters are digits or not.\n */\n/**\n * * Write a JavaScript function to check whether the given string is an anagram of a given string.\n */\n/**\n * * Write a JavaScript function to check whether a given string is a single-character substring of another given string.\n */\n/**\n * * Write a JavaScript function to find the shortest palindrome in a given string.\n */\n/**\n * * Write a JavaScript function to check whether all the given characters are digits or not.\n */\n/**\n * * Write a JavaScript ", "\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},\n},", "\n", "\n    "]}
{"task_id": "MBJSP/132", "prompt": "function tupString(tup1) {\n/**\n * * Write a function to convert tuple to a string.\n */", "entry_point": "tupString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"];\nvar x0 = tupString(arg00);\nvar v0 = \"exercises\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar x1 = tupString(arg10);\nvar v1 = \"python\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"];\nvar x2 = tupString(arg20);\nvar v2 = \"program\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert tuple to a string.", "language": "javascript", "canonical_solution": "  let str = '';\n  for (let i = 0; i < tup1.length; i += 1) {\n    if (i === 0) {\n      str += tup1[i];\n    } else {\n      str += tup1[i][0];\n    }\n  }\n  return str;\n}", "completion": ["\n\n// Start writing\nwriteTuple(0, 0);\nwriteTuple(1, 1);\nwriteTuple(2, 2);\nwriteTuple(3, 3);\nwriteTuple(4, 4);\nwriteTuple(5, 5);\nwriteTuple(6, 6);\nwriteTuple(7, 7);\nwriteTuple(8, 8);\nwriteTuple(9, 9);\nwriteTuple(10, 10);\nwriteTuple(11, 11);\nwriteTuple(12, 12);\nwriteTuple(13, 13);\nwriteTuple(14, 14);\nwriteTuple(15, 15);\nwriteTuple(16, 16);\nwriteTuple(17, 17);\nwriteTuple(18, 18);\nwriteTuple(19, 19);\nwriteTuple(20, 20);\nwriteTuple(21, 21);\nwriteTuple(22, 22);\nwriteTuple(23, 23);\nwriteTuple(24, 24);\nwriteTuple(25, 25);\nwriteTuple(26, 26);\nwriteTuple(27, 27);\nwriteTuple(28, 28);\nwriteTuple(29, 29);\nwriteTuple(30, 30);\nwriteTuple(31, 31);\nwriteTuple(32, 32);\nwriteTuple(33, 33);\nwriteTuple(34, 34);\nwriteTuple(35, 35);\nwriteTuple(36, 36);\nwriteTuple(37, 37);\nwriteTuple(38, 38);\nwriteTuple(39, 39);\nwriteTuple(40, 40);\nwriteTuple(41, 41);\nwriteTuple(42, 42);\nwriteTuple(43, 43", "\n", "\n  var convert_to_string = function (tup1) {\n    var s = '';\n    var arr = tup1.slice(0);\n    var len = arr.length;\n    var i = 0;\n    for (; i < len - 1; i++) {\n      s += convert_to_string(arr[i]) + \",\";\n    }\n    return s + convert_to_string(arr[i]);\n  };\n\n/**\n * * Write a function to convert a string to a tuple.\n */\n  var convert_to_tuple = function (s) {\n    var tup1 = s.split(',');\n    return tup1;\n  };\n\n/**\n * * Write a function to make a tuple from a string.\n */\n  var make_tuple = function (s) {\n    var tup1 = convert_to_tuple(s);\n    return tup1;\n  };\n\n/**\n * * Write a function to convert a string to a list.\n */\n  var convert_to_list = function (s) {\n    var lst1 = s.split(',');\n    return lst1;\n  };\n\n/**\n * * Write a function to make a list from a string.\n */\n  var make_list = function (s) {\n    var lst1 = convert_to_list(s);\n    return lst1;\n  };\n\n/**\n * * Write a function to convert a string to a tuple.\n */\n  var make_tuple = function (s) {\n    var tup1 = s.split(',');\n    return tup1;\n  };\n\n/**\n * * Write a ", "\nif (tup1 == null || tup1.length == 0) {\nreturn \"\";\n} else {\nif (tup1[0] == null || tup1[0].length == 0) {\nreturn \"\";\n} else {\nif (tup1[0] == null || tup1[0].length == 0) {\nreturn \"\";\n} else {\nreturn tup1[0];\n}\n}\n}\n} else {\nreturn \"\";\n}\n}\n},\n});\n}\n/**\n * * Write a function to convert tuple to a string.\n */\nif (tup1 == null || tup1.length == 0) {\nreturn \"\";\n} else {\nif (tup1[0] == null || tup1[0].length == 0) {\nreturn \"\";\n} else {\nif (tup1[0] == null || tup1[0].length == 0) {\nreturn \"\";\n} else {\nreturn tup1[0];\n}\n}\n}\n}\n},\n});\n}\n/**\n * * Write a function to convert tuple to a string.\n */\nif (tup1 == null || tup1.length == 0) {\nreturn \"\";\n} else {\nif (tup1[0] == null || tup1[0].length == 0) {\nreturn \"\";\n} else {\nif (tup1[0] == null || tup1[0].length == 0) {\nreturn \"\";\n} else {\nreturn tup1[0];\n}\n}\n}\n}\n},\n});\n}\n/**\n * * Write a ", "\nvar $ = function(tup) {\n  return String.fromCharCode.apply(null, tup);\n};\n\n/**\n * * Create a closure that will convert a tuple to a string and return it.\n */\nvar $st = function(tup) {\n  return $.apply(null, tup);\n};\n\n/**\n * * Create a closure that will convert a string to a tuple and return it.\n */\nvar $stt = function(s) {\n  return s.split('').map("]}
{"task_id": "MBJSP/133", "prompt": "function sumNegativenum(nums) {\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n */", "entry_point": "sumNegativenum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x0 = sumNegativenum(arg00);\nvar v0 = -32;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 15, -14, 13, -18, 12, -20];\nvar x1 = sumNegativenum(arg10);\nvar v1 = -52;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [19, -65, 57, 39, 152, -639, 121, 44, 90, -190];\nvar x2 = sumNegativenum(arg20);\nvar v2 = -894;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "language": "javascript", "canonical_solution": "    return nums.reduce((acc, curr) => {\n        if (curr < 0) {\n            acc += curr;\n        }\n        return acc;\n    }, 0);\n}", "completion": ["\n}\n\n<|endoftext|>", "\n  sum_of_negative_nums(nums);\n}\n```\n\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u91cc\uff0c\u6211\u4eec\u7f16\u5199\u4e86\u4e00\u4e2a\u6c42\u51fa\u5168\u90e8\u7684\u9636\u4e58\u7684\u51fd\u6570\uff0c\u6c42\u503c\u7b49\u4e8e\n\n```python\ndef factorial(n):\n    \"\"\"\n    Return the factorial of n.\n    \"\"\"\n    pass\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u5b9e\u9645\u4e0a\u53ef\u4ee5\u7528\u6765\u6c42\u4efb\u610f\u9636\u4e58\u7684\u503c\uff0c\u6bd4\u5982\n\n```python\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n8159152832478979873364309033L\n>>> factorial(30)\n265252859812191058636308480000000L\n```\n\n\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4e24\u79cd\u65b9\u6cd5\u6765\u8ba1\u7b97\u51fa\u6240\u6709\u7684\u9636\u4e58\uff0c\u6700\u7ec8\u7ed3\u679c\u662f\n\n```python\n>>> factorial(0)\n1L\n>>> factorial(1)\n1L\n```\n\n\u552f\u4e00\u7684\u533a\u522b\u662f\u51fd\u6570\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u6211\u4eec\u5728\u8ba1\u7b97\u53cd\u9988\u7684\u65f6\u5019\uff0c\u8fd8\u6709\u4e00\u4e2a\u51fd", "\nsum_of_negatives(nums) {\n  return nums.reduce((total, num) => total - num, 0);\n}\n```\n\n## String Functions\n\n### `capitalize`\n\n**S.capitalize()**\n\n**Capitalize a string**\n\n**Example**\n\n```js\nconst myString = 'Hello World!';\n\nmyString.capitalize(); // Hello World!\n```\n\n### `count`\n\n**S.count()**\n\n**Count the number of occurrence of the substring in a string**\n\n**Example**\n\n```js\nconst myString = 'Hello World!';\n\nmyString.count('o'); // 2\n```\n\n### `endswith`\n\n**S.endswith()**\n\n**Check if a string ends with the given substring**\n\n**Example**\n\n```js\nconst myString = 'Hello World!';\n\nmyString.endswith('!'); // true\n```\n\n### `endswith`\n\n**S.endswith()**\n\n**Check if a string ends with the given substring**\n\n**Example**\n\n```js\nconst myString = 'Hello World!';\n\nmyString.endswith('!'); // true\n```\n\n### `equals`\n\n**S.equals()**\n\n**Check if two strings are equal**\n\n**Example**\n\n```js\nconst myString = 'Hello World!';\n\nmyString.equals('Hello World!'); // true\n```\n\n### `find`\n\n**S.find()**\n\n**Find the first occurrence of the substring in a string**\n\n**Example**\n\n", "\n}\n// @lc code=line_count=8\nclass Solution {\npublic:\n    int reverse(int x) {\n        if (0 == x) {\n            return 0;\n        }\n        int sign = x > 0? 1 : -1;\n        int res = 0;\n        while (x!= 0) {\n            int rem = x % 10;\n            res = res * 10 + rem;\n            x /= 10;\n        }\n        return res * sign;\n    }\n};\n```\n\n## 27. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9\n\n[LeetCode\u4e2d\u6587](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/description/)\n\n[LeetCode\u82f1\u6587](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)\n\n### \u601d\u8def\n\n\u5148\u5206\u6790\u4e00\u4e0b\u7ed3\u8bba\uff0c\u4e00\u4e2a\u94fe\u8868\uff0c\u603b\u5171\u6709 `N` \u4e2a\u5143\u7d20\uff0c\u5047\u8bbe\u8282\u70b9\u7f16\u53f7\u4e3a `A->B->C->D->E->F->G`\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u8282\u70b9 `F` \u7684\u524d `N-1` \u4e2a\u8282\u70b9\u662f `C`\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9 `G` \u7684\ufffd", "\n}\n\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\npublic static int sumNegatives(int[] nums) {\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\n}\n\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\npublic static int sumNegatives(int[][] nums) {\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\n}\n\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\npublic static int sumNegatives(int[][][] nums) {\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\n}\n\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\npublic static int sumNegatives(int[][][][] nums) {\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\n}\n\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\npublic static int sumNegatives(int[][][][][] nums) {\n/**\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using a map.\n */\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/134", "prompt": "function checkLast(arr, n, p) {\n/**\n * * Write a JavaScript function to check whether the last element of given array is even or odd after performing an operation p times.\n */", "entry_point": "checkLast", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 7, 10];\nvar arg01 = 3;\nvar arg02 = 1;\nvar x0 = checkLast(arg00, arg01, arg02);\nvar v0 = \"ODD\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3];\nvar arg11 = 2;\nvar arg12 = 3;\nvar x1 = checkLast(arg10, arg11, arg12);\nvar v1 = \"EVEN\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 3;\nvar arg22 = 1;\nvar x2 = checkLast(arg20, arg21, arg22);\nvar v2 = \"ODD\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the last element of given array is even or odd after performing an operation p times.", "language": "javascript", "canonical_solution": "    let result = [];\n    for (let i = 0; i < p; i++) {\n        result.push(arr[arr.length - n]);\n    }\n    if (result.every(x => x % 2 === 0)) {\n        return \"EVEN\";\n    } else {\n        return \"ODD\";\n    }\n}", "completion": ["\nconst isEven = (arr, n, p) => {\n  const evens = [];\n  for (let i = 0; i < arr.length; i++) {\n    evens.push(p(arr[i], i, arr));\n  }\n  return evens.length === n;\n};\nconst isOdd = (arr, n, p) => {\n  const odds = [];\n  for (let i = 0; i < arr.length; i++) {\n    odds.push(p(arr[i], i, arr));\n  }\n  return odds.length === n;\n};\n```\n\n</div>\n\n</section>\n\n## Solution\n<section id='solution'>\n\n```js\n// solution required\n```\n</section>\n<|endoftext|>", "\nconst write_function = (arr, n, p) => {\n    for (let i = 0; i < p; i++) {\n        const val = arr[n - 1]\n        arr[n - 1] = val\n        n -= 1\n        if (n === 1) {\n            const val2 = arr[0]\n            arr[0] = val2\n        }\n    }\n    return arr\n}\n\nconst write_function_example = {\n    type:'slider',\n    options: {\n        min: 1,\n        max: 100,\n        value: 50,\n        step: 1\n    },\n    settings: {\n        prefix: '$'\n    },\n    data: {\n        prop: 'prop'\n    },\n    methods: {\n        /**\n         * * Write a JavaScript ", "\n    var l = arr.length;\n    var countEven = 0;\n    var countOdd = 0;\n    for (var i = l - 1; i >= 0; i--) {\n        if (arr[i] % 2 === 0)\n            countEven++;\n        else\n            countOdd++;\n    }\n\n    //console.log(countEven);\n    //console.log(countOdd);\n\n    var isEven = countEven % 2 === 0? true : false;\n    var isOdd = countOdd % 2 === 1? true : false;\n\n    //console.log(isEven);\n    //console.log(isOdd);\n\n    var result = isEven? 'Even' : 'Odd';\n    return result;\n}\n\n//Write a JavaScript function to check whether the last element of given array is even or odd after performing an operation p times.\nvar checkEvenOdd = function(arr, n, p) {\n/**\n * * Write a JavaScript ", "\n    if (p === 2) {\n        arr.slice(n).reverse().forEach(", "\n    if (p > 0) {\n        var s = arr[arr.length - 1];\n        p--;\n        while (p > 0) {\n            s = s * 2 + arr[arr.length - 2];\n            p--;\n        }\n        s = s % 1;\n        if (s > 0) {\n            s = \"odd\";\n        } else {\n            s = \"even\";\n        }\n    }\n    return s;\n};\n\n/**\n * * * Check whether a given string is a palindrome or not.\n */\n"]}
{"task_id": "MBJSP/135", "prompt": "function hexagonalNum(n) {\n/**\n * * Write a function to find the nth hexagonal number.\n */", "entry_point": "hexagonalNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = hexagonalNum(arg00);\nvar v0 = 190;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = hexagonalNum(arg10);\nvar v1 = 45;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = hexagonalNum(arg20);\nvar v2 = 91;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the nth hexagonal number.", "language": "javascript", "canonical_solution": "  return n * (2 * n - 1);\n}", "completion": ["\nlet numbers = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100];\n", "\nnthhex(n) {\n    let num = 0;\n    for (let i = 0; i < n; i++) {\n        num += i;\n    }\n    return num;\n}\n```\n\n## Other resources\n\n### [Wikipedia](https://en.wikipedia.org/wiki/Number_theoretic_function#Number_theoretic_functions_in_the_Nth_place)\n\n### [Collections of Number Theory](http://math.stackexchange.com/questions/355579/number-theoretic-", "\n", "\n", "\n"]}
{"task_id": "MBJSP/136", "prompt": "function calElectbill(units) {\n/**\n * * Write a function to calculate electricity bill.\n */", "entry_point": "calElectbill", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 75;\nvar x0 = calElectbill(arg00);\nvar v0 = 246.25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 265;\nvar x1 = calElectbill(arg10);\nvar v1 = 1442.75;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = calElectbill(arg20);\nvar v2 = 327.5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate electricity bill.", "language": "javascript", "canonical_solution": "    if (units < 50) {\n        amount = units * 2.60;\n        surcharge = 25;\n    } else if (units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n    } else if (units <= 200) {\n        amount = 130 + 162.50 + ((units - 100) * 5.26);\n        surcharge = 45;\n    } else {\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45);\n        surcharge = 75;\n    }\n    total = amount + surcharge;\n    return total;\n}", "completion": ["\n", "\nbill: () => string;\n/**\n * * Write a function to calculate gas bill.\n */\nbillGas: () => string;\n/**\n * * Write a function to calculate electricity bill.\n */\nbillElectricity: () => string;\n/**\n * * Write a function to calculate gas bill.\n */\nbillGasElectricity: () => string;\n/**\n * * Write a function to calculate gas bill.\n */\nbillElectricityGas: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillPower: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillPowerElectricity: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillPowerGas: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillElectricityPower: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillPowerGasElectricity: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillGasPower: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillGasPowerElectricity: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillElectricityGasPower: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillPowerElectricityPower: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillPowerGasPowerElectricity: () => string;\n/**\n * * Write a function to calculate power bill.\n */\nbillGasPowerElectricityPower: () => string;\n/**\n * * Write a ", "\nvar electricityBill = function electricityBill(units) {\nvar bill = units * kwhPerDay;\nbill = Math.round(bill * 100) / 100;\nreturn bill;\n};\n/**\n * * Write a function to calculate gas bill.\n */\nvar gasBill = function gasBill(units) {\nvar bill = units * kbtuPerDay;\nbill = Math.round(bill * 100) / 100;\nreturn bill;\n};\n/**\n * * Write a function to calculate price.\n */\nvar price = function price(bill, currency) {\nreturn bill / currency.rate;\n};\n/**\n * * Write a function to calculate electricity bill.\n */\nvar electricityPrice = function electricityPrice(bill) {\nreturn bill / electricityBill;\n};\n/**\n * * Write a function to calculate gas bill.\n */\nvar gasPrice = ", "\n@(units: Int)\nfun getElectricityBill(units: Int, total: Double, voltage: Double): String {\n    val hours = units / 3600\n    val currency = \"KWh\"\n    val cost = (total * voltage * 0.3).toInt()\n    val year = 2018\n    val month = 1\n    return \"Electricity bill for $hours hours from ${formatDate(year, month, 0)} to ${formatDate(year, month, hours)} costs $cost $currency.\"\n}\n\n@(units: Int)\nfun getElectricityBill(units: Int, total: Double, voltage: Double, current: Double): String {\n    val hours = units / 3600\n    val currency = \"KWh\"\n    val cost = (total * voltage * current * 0.3).toInt()\n    val year = 2018\n    val month = 1\n    return \"Electricity bill for $hours hours from ${formatDate(year, month, 0)} to ${formatDate(year, month, hours)} costs $cost $currency.\"\n}\n\n@(units: Int)\nfun getElectricityBill(units: Int, total: Double, voltage: Double, current: Double, frequency: Double): String {\n    val hours = units / 3600\n    val currency = \"KWh\"\n    val cost = (total * voltage * current * frequency * 0.3).toInt()\n    val year = 2018\n    val month = 1\n    return \"Electricity bill for $hours hours from ${formatDate(year, month, 0)} to ${formatDate(year, month, hours)} costs $cost $currency.\"\n}\n\n/**\n * * Write a ", "\nwrite("]}
{"task_id": "MBJSP/137", "prompt": "function zeroCount(nums) {\n/**\n * * Write a function to find the ration of zeroes in an array of integers.\n */", "entry_point": "zeroCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nvar x0 = zeroCount(arg00);\nvar v0 = 0.15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nvar x1 = zeroCount(arg10);\nvar v1 = 0.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x2 = zeroCount(arg20);\nvar v2 = 0.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the ration of zeroes in an array of integers.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return count / nums.length;\n}", "completion": ["\n\n/**\n * * Return the ratio of the zeroes to the length of an array of integers.\n */\n\n/**\n * * Write a function to calculate the sum of two arrays of integers.\n */\n\n/**\n * * Return the sum of two arrays of integers, the first array being the numerators, and the second array being the denominators.\n */\n\n/**\n * * Write a function to find the smallest element in an array of integers.\n */\n\n/**\n * * Write a function to find the largest element in an array of integers.\n */\n\n/**\n * * Write a function to find the sum of all elements in an array of integers.\n */\n\n/**\n * * Write a function to find the sum of elements between two indices in an array of integers.\n */\n\n/**\n * * Write a function to find the difference between the largest and smallest elements in an array of integers.\n */\n\n/**\n * * Write a function to find the square root of a given number.\n */\n\n/**\n * * Write a function to find the sum of the squares of the elements in an array of integers.\n */\n\n/**\n * * Write a function that given a list of numbers, returns the sum of those numbers squared.\n */\n\n/**\n * * Write a function that given a list of numbers, returns the product of those numbers.\n */\n\n/**\n * * Write a function that given a list of numbers, returns the sum of those numbers squared.\n */\n\n/**\n * * Write a function that given a list of numbers, returns the sum of those numbers squared.\n */\n\n/**\n * * Write a function that given a list of numbers, returns the product of those numbers.\n */\n\n/**\n * * Write a ", "\nprint_ratio_of_zeroes(nums);\n\n/**\n * * Write a function to find the maximum sum of subarrays in an array of integers.\n */\nprint_max_sum_of_subarrays(nums);\n\n/**\n * * Write a function to find the maximum sum of subarrays in an array of integers with a given size k.\n */\nprint_max_sum_of_subarrays_with_given_size(nums, k);\n\n/**\n * * Write a function to find the minimum sum of subarrays in an array of integers.\n */\nprint_min_sum_of_subarrays(nums);\n\n/**\n * * Write a function to find the minimum sum of subarrays in an array of integers with a given size k.\n */\nprint_min_sum_of_subarrays_with_given_size(nums, k);\n\n/**\n * * Write a function to find the maximum product subarray in an array of integers.\n */\nprint_max_product_subarray(nums);\n\n/**\n * * Write a function to find the maximum product subarray in an array of integers with a given size k.\n */\nprint_max_product_subarray_with_given_size(nums, k);\n\n/**\n * * Write a function to find the smallest positive number missing from an array of integers.\n */\nprint_smallest_positive_number_missing_from_an_array(nums);\n\n/**\n * * Write a ", "\n", "\n\n", "\nvar ratio = function (nums) {\n  var nums = nums.map("]}
{"task_id": "MBJSP/138", "prompt": "function isSumOfPowersOfTwo(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n */", "entry_point": "isSumOfPowersOfTwo", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = isSumOfPowersOfTwo(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = isSumOfPowersOfTwo(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 14;\nvar x2 = isSumOfPowersOfTwo(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "language": "javascript", "canonical_solution": "    let count = 0;\n\n    for (let i = 0; i < 32; i++) {\n        let bit = (n & 1 << i);\n        if (bit == 0) {\n            count++;\n        } else {\n            break;\n        }\n    }\n\n    return count == 1;\n}", "completion": ["\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n * */\n\n/**\n * * Write a JavaScript ", "\n\n", "\n\n// Test cases\n// Test Case 1\n// Input: 4\n// Output: true\n\n// Test Case 2\n// Input: 8\n// Output: true\n\n// Test Case 3\n// Input: 16\n// Output: false\n\n// Test Case 4\n// Input: 17\n// Output: false\n\n// Test Case 5\n// Input: 23\n// Output: false\n\n// Test Case 6\n// Input: 35\n// Output: true\n\n// Test Case 7\n// Input: 145\n// Output: false\n\n// Test Case 8\n// Input: 1000\n// Output: false\n\n// Test Case 9\n// Input: 0\n// Output: true\n\n// Test Case 10\n// Input: 2147483647\n// Output: false\n\n// Test Case 11\n// Input: -2147483648\n// Output: false\n\n// Test Case 12\n// Input: -2147483647\n// Output: true\n\n// Test Case 13\n// Input: -2147483646\n// Output: true\n\n// Test Case 14\n// Input: -2147483645\n// Output: true\n\n// Test Case 15\n// Input: -2147483644\n// Output: true\n\n// Test Case 16\n// Input: -2147483643\n// Output: true\n\n// Test Case 17\n// Input: -2147483642\n// Output: true\n\n// Test Case 18\n// Input: -2147483641\n// Output: true\n\n// Test Case 19\n// Input: -2147483640\n// Output: false\n\n// Test Case 20\n// Input: -2147483639\n// Output: true\n\n// Test Case 21\n// Input: -2147483638\n// Output: true\n", "\n};\n<|endoftext|>", "\n\n// Write your function here\n"]}
{"task_id": "MBJSP/139", "prompt": "function circleCircumference(r) {\n/**\n * * Write a function to find the circumference of a circle.\n */", "entry_point": "circleCircumference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = circleCircumference(arg00);\nvar v0 = 62.830000000000005;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = circleCircumference(arg10);\nvar v1 = 31.415000000000003;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = circleCircumference(arg20);\nvar v2 = 25.132;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the circumference of a circle.", "language": "javascript", "canonical_solution": "  return 2 * 3.1415 * r;\n}", "completion": ["\n", "\n", "\n", "\n", "\n\n/**\n * * Find the circumference of a circle.\n * * @param {number} radius - radius of the circle\n */\n\n/**\n * * Write a function to find the area of a circle.\n */\n\n/**\n * * Find the area of a circle.\n * * @param {number} radius - radius of the circle\n */\n\n/**\n * * Write a function to find the circumference of a rectangle.\n */\n\n/**\n * * Find the circumference of a rectangle.\n * * @param {number} length - length of the rectangle\n * * @param {number} width - width of the rectangle\n */\n\n/**\n * * Write a function to find the area of a rectangle.\n */\n\n/**\n * * Find the area of a rectangle.\n * * @param {number} length - length of the rectangle\n * * @param {number} width - width of the rectangle\n */\n\n/**\n * * Write a function to find the perimeter of a rectangle.\n */\n\n/**\n * * Find the perimeter of a rectangle.\n * * @param {number} length - length of the rectangle\n * * @param {number} width - width of the rectangle\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Find the volume of a cylinder.\n * * @param {number} radius - radius of the cylinder\n * * @param {number} height - height of the cylinder\n */\n\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n\n/**\n * * Find the surface area of a cylinder.\n * * @param {number} radius - radius of the cylinder\n * * @param {number} height - height of the cylinder\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/140", "prompt": "function extractSingly(testlist) {\n/**\n * * Write a function to extract elements that occur singly in the given tuple list.\n */", "entry_point": "extractSingly", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4, 5], [4, 5, 7], [1, 4]];\nvar x0 = extractSingly(arg00);\nvar v0 = [3, 4, 5, 7, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 2, 3], [7, 8]];\nvar x1 = extractSingly(arg10);\nvar v1 = [1, 2, 3, 4, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 8, 9], [10, 11, 12], [10, 11]];\nvar x2 = extractSingly(arg20);\nvar v2 = [7, 8, 9, 10, 11, 12];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract elements that occur singly in the given tuple list.", "language": "javascript", "canonical_solution": "  if (!Array.isArray(testList)) {\n    throw new Error('Input must be an array');\n  }\n  if (testList.length === 0) {\n    throw new Error('Input must be non-empty');\n  }\n  let result = [];\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      if (result.indexOf(testList[i][j]) === -1) {\n        result.push(testList[i][j]);\n      }\n    }\n  }\n  return result;\n}", "completion": ["\nvar extractSingly = function extractSingly(list) {\n  var results = [];\n  var values = [];\n  for (var i = 0; i < list.length; i++) {\n    var value = list[i];\n    if (Array.isArray(value)) {\n      for (var j = 0; j < value.length; j++) {\n        values.push(value[j]);\n      }\n    } else {\n      values.push(value);\n    }\n  }\n  return values;\n};\n\nmodule.exports = extractSingly;\n/**\n * * Write a function to extract elements that occur singly in the given tuple list.\n */\nmodule.exports.singly = extractSingly;\n/**\n * * Write a function to extract elements that occur multiply in the given tuple list.\n */\nmodule.exports.multiply = function multiply(list) {\n  return list.reduce(", "\n\n/**\n * * Write a function to extract elements that occur doubly in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur triply in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur quadruply in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur n-times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur once in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur twice in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur thrice in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur four times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur five times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur six times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur seven times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur eight times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur nine times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur ten times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur eleven times in the given tuple list.\n */\n\n/**\n * * Write a function to extract elements that occur twelve times in the given tuple list.\n */\n\n/**\n * * Write a ", "\n\n},{}],315:[", "\n", "\n"]}
{"task_id": "MBJSP/141", "prompt": "function pancakeSort(nums) {\n/**\n * * Write a function to sort a list of elements using pancake sort.\n */", "entry_point": "pancakeSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [15, 79, 25, 38, 69];\nvar x0 = pancakeSort(arg00);\nvar v0 = [15, 25, 38, 69, 79];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [98, 12, 54, 36, 85];\nvar x1 = pancakeSort(arg10);\nvar v1 = [12, 36, 54, 85, 98];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [41, 42, 32, 12, 23];\nvar x2 = pancakeSort(arg20);\nvar v2 = [12, 23, 32, 41, 42];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a list of elements using pancake sort.", "language": "javascript", "canonical_solution": "  let len = nums.length;\n  let cur = len;\n  let temp;\n  let index;\n\n  while (cur > 1) {\n    index = 0;\n    while (index < cur) {\n      if (nums[index] > nums[index + 1]) {\n        temp = nums[index];\n        nums[index] = nums[index + 1];\n        nums[index + 1] = temp;\n      }\n      index++;\n    }\n    cur--;\n  }\n  return nums;\n}", "completion": ["\n    ", "\n/**\n * @constructor\n */\n", "\n  write(\"\\nBegin Pancake Sorting\\n\\n\");\n\n  print(\"{\", i);\n  for (let j = 0; j < nums.length; j++) {\n    print(\" \", nums[j]);\n  }\n  print(\"}\");\n  let output = make_pancake_sorting(nums);\n  print(output);\n  write(\"\\n\\n\");\n}\n\nfor (let i = 0; i < 500; i++) {\n  write(\"\\nIteration \" + i + \"\\n\\n\");\n\n  iterate(nums);\n}\n\nwrite(\"\\n\\n\");\n\n// https://www.geeksforgeeks.org/", "\n    pancakesort = function(arr) {\n        // Step 1: Pick a number, call it i.\n        // Step 2: Reverse the list.\n        // Step 3: Reverse the list again.\n        // Step 4: Return the list.\n        return arr;\n    }\n\n/**\n * * Write a function to reverse a list of elements using pancake sort.\n */\n    reverse = function(arr) {\n        // Step 1: Pick a number, call it i.\n        // Step 2: Reverse the list.\n        // Step 3: Reverse the list again.\n        // Step 4: Return the list.\n        return arr;\n    }\n\n/**\n * * Write a function to find the kth smallest element in a list of elements using pancake sort.\n */\n    kthsmallest = function(arr, k) {\n        // Step 1: Pick a number, call it i.\n        // Step 2: Reverse the list.\n        // Step 3: Reverse the list again.\n        // Step 4: Return the list.\n        return arr;\n    }\n\n/**\n * * Write a function to find the kth largest element in a list of elements using pancake sort.\n */\n    kthlargest = function(arr, k) {\n        // Step 1: Pick a number, call it i.\n        // Step 2: Reverse the list.\n        // Step 3: Reverse the list again.\n        // Step 4: Return the list.\n        return arr;\n    }\n\n/**\n * * Write a function to find the kth smallest element in a list of elements using an index based approach.\n */\n    kthsmallestindex = ", "\n"]}
{"task_id": "MBJSP/142", "prompt": "function countSamepair(list1, list2, list3) {\n/**\n * * Write a function to count the same pair in three given lists.\n */", "entry_point": "countSamepair", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8];\nvar arg01 = [2, 2, 3, 1, 2, 6, 7, 9];\nvar arg02 = [2, 1, 3, 1, 2, 6, 7, 9];\nvar x0 = countSamepair(arg00, arg01, arg02);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8];\nvar arg11 = [2, 2, 3, 1, 2, 6, 7, 8];\nvar arg12 = [2, 1, 3, 1, 2, 6, 7, 8];\nvar x1 = countSamepair(arg10, arg11, arg12);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 2, 6, 7, 8];\nvar arg21 = [2, 2, 3, 1, 2, 6, 7, 8];\nvar arg22 = [2, 1, 3, 1, 2, 6, 7, 8];\nvar x2 = countSamepair(arg20, arg21, arg22);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count the same pair in three given lists.", "language": "javascript", "canonical_solution": "  var counter = 0;\n\n  list1.forEach(function(e, i) {\n    if (e === list2[i] && e === list3[i]) {\n      counter++;\n    }\n  })\n\n  return counter;\n}", "completion": ["\n\n", "\n\n/**\n * Given three lists, a, b, c and c, b, d, c, it is possible that the sum of the pair is equal to the value of b. For example, for the given lists a = [1, 1, 1, 1] b = [2, 2, 2, 2] and c = [3, 3, 3, 3], it is possible that the sum of the pair is equal to 2.\n *\n * Given three lists, a, b, c and c, b, d, c, it is possible that the sum of the pair is equal to the value of d. For example, for the given lists a = [1, 1, 1, 1] b = [2, 2, 2, 2] and c = [3, 3, 3, 3], it is possible that the sum of the pair is equal to 4.\n *\n * Given three lists, a, b, c and c, b, d, c, it is possible that the sum of the pair is equal to the value of e. For example, for the given lists a = [1, 1, 1, 1] b = [2, 2, 2, 2] and c = [3, 3, 3, 3], it is possible that the sum of the pair is equal to 4.\n *\n * Given three lists, a, b, c and c, b, d, c, it is possible that the sum of the pair is equal to the value of f. For example, for the given lists a = [1, 1, 1, 1] b = [2, 2, 2, 2] and c = [3, 3, 3, 3], it is possible that the sum of the pair is equal to 5.\n *\n * Given three lists, a, b, c and c, b, d, c, it", "\n\n\n/**\n * * Write a function to find all pairs of numbers in a given list of integers\n *   and the target number.\n */\n\n/**\n * * Write a function to print all triplets which sum to a given target number.\n */\n\n\n/**\n * * Write a function to find the highest product pair in a given list of integers.\n */\n\n/**\n * * Write a function to find the Nth super ugly number.\n */\n\n/**\n * * Write a function to find the number of lists in a given array.\n */\n\n/**\n * * Write a function to find all permutations of a given string.\n */\n\n/**\n * * Write a function to find the first occurrence of a substring in a given string.\n */\n\n/**\n * * Write a function to find the first occurrence of the last occurrence of a substring in a given string.\n */\n\n/**\n * * Write a function to find the first occurrence of the last occurrence of a substring in a given string.\n */\n\n/**\n * * Write a function to reverse a given string.\n */\n\n/**\n * * Write a function to check whether a given string is palindrome or not.\n */\n\n/**\n * * Write a function to find the first non repeating character in a given string.\n */\n\n/**\n * * Write a function to find the first occurrence of a character in a given string.\n */\n\n/**\n * * Write a function to count the number of 1s in a given integer.\n */\n\n/**\n * * Write a function to find the minimum element in a given integer array.\n */\n\n/**\n * * Write a function to find the maximum element in a given integer array.\n */\n\n/**\n * * Write a ", "\n\n\n\n/**\n * *\n * Write a function to find a pair in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to count the number of pairs in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to find a pair in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to count the number of pairs in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to count the number of pairs in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to count the number of pairs in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to count the number of pairs in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to count the number of pairs in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to count the number of pairs in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to count the number of pairs in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to find a pair in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to find a pair in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to find a pair in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to find a pair in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to find a pair in three given lists.\n */\n\n\n\n/**\n * *\n * Write a function to find a pair in three given lists.\n */\n\n\n\n/**\n * *\n * Write a ", "\n  "]}
{"task_id": "MBJSP/143", "prompt": "function findLists(input) {\n/**\n * * Write a function to find number of lists present in the given tuple.\n */", "entry_point": "findLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 4], [5, 6, 7, 8]];\nvar x0 = findLists(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [9, 8, 7, 6, 5, 4, 3, 2, 1];\nvar x1 = findLists(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find number of lists present in the given tuple.", "language": "javascript", "canonical_solution": "\tif (input.length > 0) {\n\t\treturn 1 + findLists(input[0]);\n\t} else {\n\t\treturn 0;\n\t}\n}", "completion": ["\n    const n = getNumberOfListsInTuple(input)\n    const num = listToString(n, ',')\n    writeToFile(`${n} ${num}`)\n  }\n}\n\n// writeToFile\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfListsInTuple(input))\n\n// const input = ['list1', 'list2', 'list3']\n// writeToFile(getNumberOfLists", "\n    var n = read_file(input);\n    var s = '\\n' + n + '\\n';\n    var f = '';\n    for (var i = 1; i <= n; i++) {\n        f += '$';\n        for (var j = 0; j < i; j++) {\n            f +='';\n        }\n        f += '\\n';\n    }\n    var f2 = '';\n    for (var i = 1; i <= n; i++) {\n        f2 += '|';\n        for (var j = 0; j < i; j++) {\n            f2 +='';\n        }\n        f2 += '|';\n        f2 += '\\n';\n    }\n    var f3 = '';\n    for (var i = 1; i <= n; i++) {\n        f3 += '-';\n        for (var j = 0; j < i; j++) {\n            f3 += '-';\n        }\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 += '-';\n        f3 +=", "\n", "\n  const all_lists_exist = {\n    lists_exist: true,\n  };\n  if (input.length < 1) {\n    return all_lists_exist;\n  }\n\n  const count = input.reduce((count, tuple) => {\n    count = count + 1;\n    if (tuple[0] === 'list') {\n      const list_name = tuple[1];\n      if (list_name!== '') {\n        if (list_name.toLowerCase()!== 'all' && list_name.toLowerCase()!== 'current') {\n          count = count - 1;\n        } else {\n          count = count + 1;\n        }\n      }\n    }\n    return count;\n  }, 0);\n\n  if (count === 0) {\n    all_lists_exist.lists_exist = false;\n  }\n\n  return all_lists_exist;\n}\n\n", "\nconst find_nth_list_of_lists_present = (nth_list_of_lists_present, input, dict_tuple_to_number_of_lists_present) => {\n  const input_ = []\n  for (let i = 0; i < input.length; i++) {\n    input_[i] = input[i].split('|')\n  }\n\n  const list_of_lists = []\n  for (let i = 0; i < input_.length; i++) {\n    list_of_lists[i] = []\n    for (let j = 0; j < input_[i].length; j++) {\n      list_of_lists[i][j] = input_[i][j]\n    }\n  }\n\n  const number_of_lists_present = nth_list_of_lists_present\n  for (let i = 0; i < input_.length; i++) {\n    for (let j = 0; j < input_[i].length; j++) {\n      if (list_of_lists[i][j].indexOf(dict_tuple_to_number_of_lists_present)!== -1) {\n        number_of_lists_present--\n        if (number_of_lists_present === 0) {\n          return true\n        }\n      }\n    }\n  }\n\n  return false\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/144", "prompt": "function sumPairs(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of absolute differences in all pairs of the given array.\n */", "entry_point": "sumPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 8, 9, 15, 16];\nvar arg01 = 5;\nvar x0 = sumPairs(arg00, arg01);\nvar v0 = 74;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = 4;\nvar x1 = sumPairs(arg10, arg11);\nvar v1 = 10;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 7, 9, 11, 14];\nvar arg21 = 9;\nvar x2 = sumPairs(arg20, arg21);\nvar v2 = 188;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of absolute differences in all pairs of the given array.", "language": "javascript", "canonical_solution": "    let total = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            total += Math.abs(arr[i] - arr[j]);\n        }\n    }\n    return total;\n}", "completion": ["\n  let t = (arr, n) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        sum += Math.abs(arr[i] - arr[j]);\n      }\n    }\n    return sum;\n  }\n```\n\n### \u6e90\u7801\u5206\u6790\n\n```java\n//\u6c42\u548c\u51fd\u6570\n/**\n * * Write a JavaScript ", "\n    var x = arr.map(", "\n\nvar _sum = ", "\n\nvar result = arr.reduce(", "\n  return arr.reduce("]}
{"task_id": "MBJSP/145", "prompt": "function maxAbsDiff(arr, n) {\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */", "entry_point": "maxAbsDiff", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 1, 5, 3];\nvar arg01 = 4;\nvar x0 = maxAbsDiff(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [9, 3, 2, 5, 1];\nvar arg11 = 5;\nvar x1 = maxAbsDiff(arg10, arg11);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 2, 1];\nvar arg21 = 3;\nvar x2 = maxAbsDiff(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the maximum difference between any two elements in a given array.", "language": "javascript", "canonical_solution": "    let maxDiff = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            maxDiff = Math.max(Math.abs(arr[i] - arr[j]), maxDiff);\n        }\n    }\n    return maxDiff;\n}", "completion": ["\nconst maxDifference = (arr, n) => {\nconst len = arr.length;\nlet i = 0;\nconst first = arr[0];\nconst firstDiff = Math.abs(first - n);\nlet max = firstDiff;\nwhile (i < len) {\nconst cur = arr[i];\nconst diff = Math.abs(cur - n);\nif (diff > max) {\nmax = diff;\n}\ni++;\n}\nreturn max;\n};\nreturn maxDifference(arr, n);\n};\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\nconst maxDifference = (arr, n) => {\nconst len = arr.length;\nlet i = 0;\nconst first = arr[0];\nconst firstDiff = Math.abs(first - n);\nlet max = firstDiff;\nwhile (i < len) {\nconst cur = arr[i];\nconst diff = Math.abs(cur - n);\nif (diff > max) {\nmax = diff;\n}\ni++;\n}\nreturn max;\n};\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\nconst maxDifference = (arr, n) => {\nconst len = arr.length;\nlet i = 0;\nconst first = arr[0];\nconst firstDiff = Math.abs(first - n);\nlet max = firstDiff;\nwhile (i < len) {\nconst cur = arr[i];\nconst diff = Math.abs(cur - n);\nif (diff > max) {\nmax = diff;\n}\ni++;\n}\nreturn max;\n};\n/**\n * * Write a JavaScript ", "\n\treturn arr.reduce((max, curr) => {\n\t\tif (max < Math.abs(curr - n)) {\n\t\t\tmax = Math.abs(curr - n);\n\t\t}\n\t\treturn max;\n\t}, Number.MAX_VALUE);\n}\n\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n", "\nconst maxDifference = arr => arr.reduce((prev, cur) => {\n    const diff = Math.abs(cur - prev);\n    return diff > prev? diff : prev;\n}, 0);\n\nconsole.log(`Max difference in ${arr} array is ${maxDifference(arr)}`);\n```\n\n<br>\n\n## Question: 3. Take two given arrays and find the maximum difference between any two elements in each of the given array.\n\n### Problem Statement\n\n[Interview Cake](https://www.interviewcake.com/)\n\n### Developer's Solution\n\n#### Solution 1 - Brute Force\n\nThe `bruteForce()` solution is the easiest to implement and understand, yet it is only valid when there are no ties in the algorithm.\n\n```js\nconst bruteForce = arr => arr.reduce((prev, cur) => {\n    const diff = Math.abs(cur - prev);\n    return diff;\n}, 0);\n```\n\n#### Solution 2 - Trie Implementation\n\n```js\nconst Trie = () => {\n    /**\n     * * Creates a trie node.\n     * * @return {*}\n     */\n    const createNode = () => {\n        return {\n            end: false,\n            children: {}\n        };\n    };\n\n    /**\n     * * Creates a trie with a given set of words.\n     * * @param {string[]} words\n     * * @return {*}\n     */\n    const createTrie = words => {\n        let trie = createNode();\n        for (const word of words) {\n            let node = trie;\n            for (const ch of word) {\n                if (!node.children[", "\n}\n/**\n * * Find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript function to find the maximum difference between any two elements in a given array.\n */\n}\n/**\n * * Write a JavaScript ", "\nconst max = (arr, n) => {\n\tlet max = arr[0];\n\tfor (let i = 1; i < n; i++) {\n\t\tif (arr[i] > max) {\n\t\t\tmax = arr[i];\n\t\t}\n\t}\n\treturn max;\n};\n\n/**\n * * Write a JavaScript function to find the minimum difference between any two elements in a given array.\n */\nconst min = (arr, n) => {\n\tlet min = arr[0];\n\tfor (let i = 1; i < n; i++) {\n\t\tif (arr[i] < min) {\n\t\t\tmin = arr[i];\n\t\t}\n\t}\n\treturn min;\n};\n\n/**\n * * Write a JavaScript function to find the difference between the maximum and the minimum of any two elements in a given array.\n */\nconst difference = (arr, n) => {\n\tlet max = max(arr, n);\n\tlet min = min(arr, n);\n\treturn max - min;\n};\n\n/**\n * * Write a JavaScript function to find the difference between the maximum and the minimum of any three elements in a given array.\n */\nconst difference3 = (arr, n) => {\n\tlet max = max(arr, n);\n\tlet min = min(arr, n);\n\tlet sum = arr[0] + arr[1] + arr[2];\n\treturn Math.abs(max - min) - sum;\n};\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/146", "prompt": "function asciiValueString(str1) {\n/**\n * * Write a function to find the ascii value of total characters in a string.\n */", "entry_point": "asciiValueString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = asciiValueString(arg00);\nvar v0 = 112;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Program\";\nvar x1 = asciiValueString(arg10);\nvar v1 = 80;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Language\";\nvar x2 = asciiValueString(arg20);\nvar v2 = 76;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the ascii value of total characters in a string.", "language": "javascript", "canonical_solution": "  // Your code here\n  for (let i = 0; i < str1.length; i++) {\n    return str1.charCodeAt(i)\n  }\n}", "completion": ["\n", "\n", "\n", "\n", "\n"]}
{"task_id": "MBJSP/147", "prompt": "function maxPathSum(tri, m, n) {\n/**\n * * Write a function to find the maximum total path sum in the given triangle.\n */", "entry_point": "maxPathSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 0, 0], [4, 8, 0], [1, 5, 3]];\nvar arg01 = 2;\nvar arg02 = 2;\nvar x0 = maxPathSum(arg00, arg01, arg02);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[13, 0, 0], [7, 4, 0], [2, 4, 6]];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = maxPathSum(arg10, arg11, arg12);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 0, 0], [11, 18, 0], [21, 25, 33]];\nvar arg21 = 2;\nvar arg22 = 2;\nvar x2 = maxPathSum(arg20, arg21, arg22);\nvar v2 = 53;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum total path sum in the given triangle.", "language": "javascript", "canonical_solution": "  const dp = Array(m).fill(0).map(() => Array(n).fill(0));\n  dp[0][0] = tri[0][0];\n  for (let i = 1; i < m; i++) {\n    dp[i][0] = dp[i - 1][0] + tri[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + tri[0][i];\n  }\n  for (let i = 1; i < m; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + tri[i][j];\n    }\n  }\n  return dp[m - 1][n - 1];", "completion": ["\n// var tri = [\n//     [1],\n//     [2, 3],\n//     [4, 5, 6]\n// ];\n// tri.map(", "\n", "\n    ", "\n", "\ntri = tri.map((x) => (x) => {\n  return x.map((y) => {\n    return y + maxPathSum(x.concat(y));\n  }).reduce((y, z) => {\n    return y + z;\n  }, 0);\n}).reduce((y, z) => {\n  return y + z;\n}, 0);\n```\n\nThis was a much better answer:\n\n```\ntri = [[1], [3, 4], [2, 5, 3], [1, 2, 1, 1]]\n\nmaxPathSum(tri) = 10\n```\n\n## Bonus\n\nI am wondering if you could implement a function to find the maximum path sum in a triangle, where each triangle is defined by a list of lists.\n\nYou can use a generic function like this:\n\n```\n"]}
{"task_id": "MBJSP/148", "prompt": "function sumDigitsTwoparts(n) {\n/**\n * * Write a function to divide a number into two parts such that the sum of digits is maximum.\n */", "entry_point": "sumDigitsTwoparts", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 35;\nvar x0 = sumDigitsTwoparts(arg00);\nvar v0 = 17;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = sumDigitsTwoparts(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = sumDigitsTwoparts(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "language": "javascript", "canonical_solution": "    function sumDigitsSingle(x) {\n        var ans = 0;\n        while (x > 0) {\n            ans += x % 10;\n            x = Math.floor(x / 10);\n        }\n        return ans;\n    }\n\n    function closest(x) {\n        var ans = 0;\n        while (ans * 10 + 9 <= x) {\n            ans = ans * 10 + 9;\n        }\n        return ans;\n    }\n\n    return sumDigitsSingle(closest(n)) + sumDigitsSingle(n - closest(n));\n}", "completion": ["\n    (value: number) => {\n        let part1 = Math.floor(value / 100);\n        let part2 = value - part1 * 100;\n        if (part2 < 10) {\n            return [part1, part2];\n        }\n        return [part1, part2 - 10];\n    };\n}\n<|endoftext|>", "\n}\n\n/**\n * * Write a ", "\n\n/**\n * @param {number} n - Number to be divided.\n * @returns {Array<number>}\n */\n", "\n}\n```\n\nHere is the output that you can see:\n\n```python\nimport twoparts\n\n# function to divide a number into two parts such that the sum of digits is maximum.\ndef divide_n_parts(n, n_parts):\n    dividend = int(n)\n    parts = []\n    while dividend > 0:\n        # find the divisor\n        divisor = 10 ** (n_parts - 1)\n        # get the last digit of the dividend\n        last_digit = dividend % divisor\n        parts.append(last_digit)\n        # reduce the dividend\n        dividend = dividend // divisor\n    parts.reverse()\n    return parts\n\ndef main():\n    # function to divide a number into two parts such that the sum of digits is maximum.\n    n = \"5\"\n    n_parts = 2\n    parts = divide_n_parts(n, n_parts)\n    print(parts)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nHere is the output that you can see:\n\n```python\n[0, 0, 0, 0]\n```\n\nLet's see if the `partition_number` function can help:\n\n```python\nimport twoparts\n\n# function to divide a number into two parts such that the sum of digits is maximum.\ndef partition_number(n):\n    parts = divide_n_parts(n, len(n))\n    parts.sort()\n    return parts\n\ndef main():\n    # ", "\nconst twoparts = (n, len) => {\nconst temp = len - 1;\nconst temp2 = len - 1;\nlet a = 0;\nlet b = 0;\nwhile (temp >= 0) {\na = a * 10 + (n % 10);\nn = n / 10;\ntemp--;\n}\ntemp = len - 1;\nwhile (temp >= 0) {\nb = b * 10 + (n % 10);\nn = n / 10;\ntemp--;\n}\nreturn [a, b];\n};\nexport { twoparts };\n<|endoftext|>"]}
{"task_id": "MBJSP/149", "prompt": "function longestSubseqWithDiffOne(arr, n) {\n/**\n * * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n */", "entry_point": "longestSubseqWithDiffOne", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 3, 2];\nvar arg01 = 7;\nvar x0 = longestSubseqWithDiffOne(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 9, 4, 5, 4, 8, 6];\nvar arg11 = 7;\nvar x1 = longestSubseqWithDiffOne(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 2, 3, 7, 2, 1];\nvar arg21 = 8;\nvar x2 = longestSubseqWithDiffOne(arg20, arg21);\nvar v2 = 7;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "language": "javascript", "canonical_solution": "\tlet dp = new Array(n)\n\tfor (let i = 0; i < n; i++) {\n\t\tdp[i] = 0\n\t}\n\tdp[0] = 1\n\tfor (let i = 0; i < n; i++) {\n\t\tfor (let j = 0; j < i; j++) {\n\t\t\tif ((arr[i] == arr[j]+1) || (arr[i] == arr[j]-1)) {\n\t\t\t\tdp[i] = Math.max(dp[i], dp[j]+1)\n\t\t\t}\n\t\t}\n\t}\n\tlet result = 1\n\tfor (let i = 0; i < n; i++) {\n\t\tif (result < dp[i]) {\n\t\t\tresult = dp[i]\n\t\t}\n\t}\n\treturn result\n}", "completion": ["\nreturn max(subseq(arr, n - 1), subseq(arr, n + 1))[0];\n}\n```\n\n> * We can also use the [subseq()][subseq] function that takes a range of indices and returns a subsequence of the given array.\n>\n> > See this example:\n>\n> > ```javascript\n> > function subseq(arr, n) {\n> >     if (n <= 1) {\n> >         return arr;\n> >     }\n> >     return [\n> >         arr[n - 1],\n> >         ...arr[n - 1],\n> >         arr[n - 2],\n> >         ...arr[n - 2],\n> >     ];\n> > }\n> > ```\n>\n> > To find the longest subsequence of the array [1, 2, 3, 4, 5] we need to find the longest subsequence of the subsequence [1, 2, 3, 4] and [4, 5].\n\n> * Also, we can use the [subseq()][subseq] function to find the longest subsequence of the array [1, 2, 3, 4, 5].\n>\n> > ```javascript\n> > function subseq(arr, n) {\n> >     if (n <= 1) {\n> >         return arr;\n> >     }\n> >     return [\n> >         arr[n - 1],\n> >         ...arr[n - 1],\n> >     ];\n> > }\n> > ```\n>\n> > The longest subsequence of [1, 2, 3, 4, 5] is [5, 4, 3].\n\n> **Solution**\n>\n> > Write a ", "\nlet longest_subsequence = function(arr) {\n    if (arr.length === 0) {\n        return [];\n    }\n\n    let memo = new Array(arr.length);\n\n    for (let i = 0; i < arr.length; i++) {\n        memo[i] = new Array(arr.length);\n    }\n\n    for (let i = 1; i < arr.length; i++) {\n        for (let j = i - 1; j >= 0 && arr[i] - arr[j] === 1; j--) {\n            memo[j][i] = memo[j + 1][i];\n        }\n    }\n\n    for (let i = arr.length - 2; i >= 0; i--) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let left = memo[i][j];\n            let right = memo[i + 1][j];\n            let sum = left.length + right.length;\n            if (sum > memo[i][j].length) {\n                memo[i][j].length = sum;\n                memo[i][j].arr = left.concat(right);\n            }\n        }\n    }\n    return memo[0][0];\n};\n\nlongest_subsequence(arr)\n    .map(", "\n\t", "\n  return longestSubSeqWithDiffOne(arr, n);\n}\n```\n\nHere's the implementation of the function:\n\n```js\n", "\n    let i = 1;\n    let j = 1;\n    let maxLength = 1;\n    let maxLengthStart = 1;\n    let start;\n\n    let getLength = function (i, j) {\n        return i + j;\n    };\n\n    while (i < arr.length && j < arr.length) {\n        if (arr[i] === arr[j]) {\n            let newLength = getLength(i, j);\n            if (newLength > maxLength) {\n                maxLength = newLength;\n                maxLengthStart = i + 1;\n                start = j + 1;\n            }\n\n            i++;\n            j++;\n        } else if (i < arr.length && arr[j] < arr[i]) {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\n    let ans = [];\n    let startFrom = maxLengthStart - maxLength + 1;\n\n    while (startFrom >= 1 && startFrom <= arr.length) {\n        ans.push(arr[startFrom]);\n        startFrom--;\n    }\n\n    return ans;\n}\n\n// find longest subsequence such that the difference between adjacent elements is one\nconst longSequence = "]}
{"task_id": "MBJSP/150", "prompt": "function doesContainB(a, b, c) {\n/**\n * * Write a JavaScript function to find whether the given number is present in the infinite sequence or not.\n */", "entry_point": "doesContainB", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 7;\nvar arg02 = 3;\nvar x0 = doesContainB(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = -3;\nvar arg12 = 5;\nvar x1 = doesContainB(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 2;\nvar arg22 = 5;\nvar x2 = doesContainB(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find whether the given number is present in the infinite sequence or not.", "language": "javascript", "canonical_solution": "    if (a > b && a > c) {\n        return true;\n    } else if (b > a && b > c) {\n        return true;\n    } else {\n        return false;\n    }\n}", "completion": ["\n}\n```\n\nThe inner function `containB` is already short-circuiting.\n\nBut we have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the function `containB` short-circuiting again.\n\nWe have to make the ", "\n", "\n} else if (c === 'Infinite sequence') {\n/**\n * * Write a JavaScript function to find whether the given number is present in the infinite sequence or not.\n */\n} else {\n/**\n * * Write a JavaScript ", "\n", "\na = function(n) {\nreturn n == 0;\n}\n\n/**\n * * Write a JavaScript function to find a maximal subsequence of a given array.\n */\na = function(arr) {\nreturn arr.reduce("]}
{"task_id": "MBJSP/151", "prompt": "function isCoprime(x, y) {\n/**\n * * Write a JavaScript function to check whether the given number is co-prime or not.\n */", "entry_point": "isCoprime", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 17;\nvar arg01 = 13;\nvar x0 = isCoprime(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 21;\nvar x1 = isCoprime(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 25;\nvar arg21 = 45;\nvar x2 = isCoprime(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the given number is co-prime or not.", "language": "javascript", "canonical_solution": "    if (x < 2 || y < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(x); i++) {\n        if (x % i === 0 && y % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}", "completion": ["\nvar coPrime = function coPrime(num) {\n  for (var x = num - 1; x >= 2; x--) {\n    for (var y = x - 1; y >= 2; y--) {\n      if (x!== y && num % x === 0 && num % y === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n```\n\n#### `isPrime`\n\n```js\nvar isPrime = function isPrime(num) {\n  return num > 1 && num!== 2 &&\n    coPrime(num);\n};\n```\n\n#### `primeFactors`\n\n```js\nvar primeFactors = function primeFactors(num) {\n  var factors = [];\n  for (var x = 2; x <= num / 2; x++) {\n    if (num % x === 0) {\n      factors.push(x);\n    }\n  }\n  return factors;\n};\n```\n\n#### `factorize`\n\n```js\nvar factorize = function factorize(num) {\n  var factors = [];\n  for (var x = 2; x <= num; x++) {\n    while (num % x === 0) {\n      factors.push(x);\n      num /= x;\n    }\n  }\n  return factors;\n};\n```\n\n#### `parseInt`\n\n```js\nvar parseInt = ", "\n    // your code here\n    // console.log(\"Hello, World!\");\n};\n```\n\n# Tensorflow\n\nWhen evaluating a Tensorflow model in Tensorflow, the model returns a [tensor](https://www.tensorflow.org/tutorials/images/classification) with shape `[1, num_classes]`. The first entry of this tensor is always the [loss](https://www.tensorflow.org/versions/r0.8/api_docs/python/train.html#loss), which contains the loss for the current step. The second entry of this tensor is always the [predictions](https://www.tensorflow.org/versions/r0.8/api_docs/python/train.html#predictions) of the model, which contain predictions for the current step.\n\nFor example, the following code defines a simple model, and evaluates it.\n\n```python\nimport tensorflow as tf\n\nclass MyModel(object):\n    def __init__(self):\n        # Define a Tensorflow graph:\n        graph = tf.Graph()\n        with graph.as_default():\n            # Input placeholder:\n            self.input = tf.placeholder(tf.float32, shape=(None, 32, 32, 3))\n            # Build the graph:\n            self.conv1 = tf.layers.conv2d(self.input, 64, 3, padding='SAME', activation=tf.nn.relu)\n            self.pool1 = tf.layers.max_pooling2d(self.conv1, 2, 2, padding='SAME')\n            self.conv2 = tf.layers.conv2d(self.pool1, 128", "\n}\n<|endoftext|>", "\nx.isPrime() && y.isPrime() && x.isCoprime(y)\n```\n\n**# Chaining **\n\n### `x.pow(y).mul(z)`\n\n**# Example **\n\n```js\nconst x = new BigNumber(10)\nconst y = new BigNumber(5)\nconst z = new BigNumber(2)\n\nx.pow(y).mul(z)\n```\n\n**# Chaining **\n\n### `x.add(y).sub(z)`\n\n**# Example **\n\n```js\nconst x = new BigNumber('5')\nconst y = new BigNumber('7')\nconst z = new BigNumber('3')\n\nx.add(y).sub(z)\n```\n\n**# Chaining **\n\n### `x.div(y)`\n\n**# Example **\n\n```js\nconst x = new BigNumber(10)\nconst y = new BigNumber(2)\n\nx.div(y)\n```\n\n**# Chaining **\n\n### `x.mul(y)`\n\n**# Example **\n\n```js\nconst x = new BigNumber(10)\nconst y = new BigNumber(5)\n\nx.mul(y)\n```\n\n**# Chaining **\n\n### `x.sqr()`\n\n**# Example **\n\n```js\nconst x = new BigNumber(10)\n\nx.sqr()\n```\n\n**# Chaining **\n\n### `x.pow(y)`\n\n**# Example **\n\n```js\nconst x = new BigNumber(10)\nconst y = new", "\n    return (x, y) => {\n        return Math.sqrt(x) % 1 === 0 && y % 2 === 1? x + y + 1 : 0;\n    };\n}\n\n/**\n * * Calculate the Sieve of Eratosthenes\n *\n * @param {Number} n - The number to be sieved\n * @returns {Array} - An array of the prime numbers\n */\nconst sieve = n => {\n    const p = [];\n\n    for (let i = 2; i < n; i++) {\n        if (p[i] === false) {\n            for (let j = i; j < n; j++) {\n                p[j] = true;\n            }\n        }\n    }\n\n    return p;\n};\n\n/**\n * * Calculate the powers of numbers\n *\n * @param {Number} n - The number to be calculated\n * @returns {Array} - An array of the powers of numbers\n */\nconst powers = n => {\n    const p = [];\n\n    for (let i = 0; i < n; i++) {\n        p.push(i);\n    }\n\n    return p;\n};\n\n/**\n * * Calculate the factorial of a number\n *\n * @param {Number} n - The number to be calculated\n * @returns {Number} - The factorial of a number\n */\nconst factorial = n => {\n    let p = 1;\n\n    for (let i = n; i > 1; i--) {\n        p = p * i;\n    }\n\n    return p;\n};\n\n/**\n * * Check if a number is prime\n *\n * @param {Number} n - The number to be checked\n"]}
{"task_id": "MBJSP/152", "prompt": "function mergeSort(x) {\n/**\n * * Write a function to sort the given array by using merge sort.\n */", "entry_point": "mergeSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 4, 2, 6, 5, 7, 1, 9];\nvar x0 = mergeSort(arg00);\nvar v0 = [1, 2, 3, 4, 5, 6, 7, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 25, 45, 78, 11, 33, 19];\nvar x1 = mergeSort(arg10);\nvar v1 = [7, 11, 19, 25, 33, 45, 78];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 1, 4, 9, 8];\nvar x2 = mergeSort(arg20);\nvar v2 = [1, 3, 4, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort the given array by using merge sort.", "language": "javascript", "canonical_solution": "  if (x.length === 1) {\n    return x;\n  }\n\n  const mid = Math.floor(x.length / 2);\n  const left = mergeSort(x.slice(0, mid));\n  const right = mergeSort(x.slice(mid));\n\n  const sorted = [];\n\n  while (left.length && right.length) {\n    if (left[0] < right[0]) {\n      sorted.push(left.shift());\n    } else {\n      sorted.push(right.shift());\n    }\n  }\n\n  return sorted.concat(left, right);\n}", "completion": ["\nmergeSort(x => x);\n```\n\nIf you don\u2019t know how to do merge sort, here\u2019s a quick guide to sorting arrays using the merge sort algorithm:\n\n1. Use the `Array.prototype.sort` method to sort the array by using merge sort.\n2. Don\u2019t forget to check the result of the `Array.prototype.sort` method.\n\nThe merge sort algorithm is very inefficient and time consuming. It uses a binary search algorithm.\n\n### Splitting and merging\n\nWe\u2019ve seen that splitting and merging in our code is a common pattern in modern programming languages. There are some obvious ways to solve this problem, but the simplest method is to split a sequence into two smaller sequences and then merge them.\n\nThe simplest way to split a sequence into two smaller sequences is to split the sequence at a given value. It is common to split the sequence at an even number or at an odd number.\n\nWe can split a sequence into two smaller sequences by calling the `split` method on the `Array` constructor.\n\n```js\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst left = arr.split(2);\nconst right = arr.split(4);\n```\n\nIn the `Array` constructor, the split values are passed to the `split` method. The `split` method takes an argument that specifies the split point. The split point is the number of elements to split the sequence at. For example, if the split point is `3`, the sequence will be split at the first three elements.\n\nLet\u2019s take a look at the split method with some examples.\n\n```js\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9", "\n\n    (", "\n(", "\n\n", "\nexports.write_merge_sort = function(array) {\n\tvar array_length = array.length;\n\tvar array_mid = array_length >> 1;\n\tvar array_left = array.slice(0, array_mid);\n\tvar array_right = array.slice(array_mid);\n\treturn write_merge_sort(array_left) + write_merge_sort(array_right) + array;\n};\n\n/**\n * * Write a function to sort the given array by using merge sort.\n */\nexports.write_merge_sort_parallel = function(array) {\n\tvar array_length = array.length;\n\tvar array_mid = array_length >> 1;\n\tvar array_left = array.slice(0, array_mid);\n\tvar array_right = array.slice(array_mid);\n\treturn write_merge_sort(array_left).then("]}
{"task_id": "MBJSP/153", "prompt": "function parabolaVertex(a, b, c) {\n/**\n * * Write a function to find the vertex of a parabola.\n */", "entry_point": "parabolaVertex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaVertex(arg00, arg01, arg02);\nvar v0 = [-0.3, 1.55];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaVertex(arg10, arg11, arg12);\nvar v1 = [-0.4444444444444444, 2.2222222222222223];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaVertex(arg20, arg21, arg22);\nvar v2 = [-1.0, 4.0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the vertex of a parabola.", "language": "javascript", "canonical_solution": "  let x = -b / (2 * a);\n  return [x, (a * x * x) + (b * x) + c];\n}", "completion": ["\n", "\n", "\n}\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a ", "\n}\n\n/**\n * A class representing a parabola vertex.\n * @param {number} a - the x-coordinate of the vertex.\n * @param {number} b - the y-coordinate of the vertex.\n * @param {number} c - the parabola's constant.\n */\n", "\n"]}
{"task_id": "MBJSP/154", "prompt": "function specifiedElement(nums, n) {\n/**\n * * Write a function to extract every specified element from a given two dimensional list.\n */", "entry_point": "specifiedElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg01 = 0;\nvar x0 = specifiedElement(arg00, arg01);\nvar v0 = [1, 4, 7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg11 = 2;\nvar x1 = specifiedElement(arg10, arg11);\nvar v1 = [3, 6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]];\nvar arg21 = 3;\nvar x2 = specifiedElement(arg20, arg21);\nvar v2 = [2, 2, 5];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract every specified element from a given two dimensional list.", "language": "javascript", "canonical_solution": "  return nums.map(arr => arr[n]);\n}", "completion": ["\n\nvar get_every = function get_every(nums, f) {\n\nvar get = function get(nums, i) {\nreturn nums[i];\n};\n\nreturn nums.map(f).filter(", "\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array} list\n * @param {Number} n\n * @returns {Array}\n */\n/**\n * @param {Array", "\n\n    return function(el) {\n        for (i = 0; i < nums.length; i++) {\n            if (nums[i] == el) {\n                return i;\n            }\n        }\n    };\n};\n\n/**\n * * This function is used for running a loop from 0 to the given number. The function does not return anything.\n */\nvar run_from_zero = function(n) {\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n};\n\n/**\n * * This function is used for running a loop from the given number to 0. The function does not return anything.\n */\nvar run_to_zero = function(n) {\n    for (var i = n; i > 0; i--) {\n        ;\n    }\n    return 0;\n};\n\n/**\n * * This function is used for running a loop from 1 to the given number. The function does not return anything.\n */\nvar run_from_one = function(n) {\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};\n\n/**\n * * This function is used for running a loop from the given number to 1. The function does not return anything.\n */\nvar run_to_one = function(n) {\n    for (var i = n; i >= 1; i--) {\n        ;\n    }\n    return 1;\n};\n\n/**\n * * This function is used for running a loop from 0 to the given number. The ", "\nvar extract = function() {\n    var n = arguments.length > 0 && arguments[0]!== undefined? arguments[0] : 2;\n    if (nums instanceof Array && typeof(nums[0])!== 'number') {\n        throw new Error('\"extract\" expected an Array of numbers as the first argument, but received'+ nums);\n    }\n    if (!(nums instanceof Array) || nums.length < n) {\n        throw new Error('\"extract\" expected an Array of numbers as the first argument, with at least'+ n +'elements, but received'+ nums);\n    }\n    return nums.map(", "\nnums.every = function(fn) {\n    for (var i = 0; i < this.length; i++) {\n        if (!fn.call(this[i], this[i], i)) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * * Write a function to extract every specified element from a given two dimensional list and append the result to the end of the list.\n */\nnums.append = function(fn) {\n    var result = this.every(fn);\n    for (var i = 0; i < this.length; i++) {\n        fn.call(this[i], this[i], i);\n    }\n    return result;\n};\n\n/**\n * * Write a function to extract every specified element from a given two dimensional list and append the result to the start of the list.\n */\nnums.prepend = function(fn) {\n    var result = this.every(fn);\n    for (var i = 0; i < this.length; i++) {\n        fn.call(this[i], this[i], i);\n    }\n    return result;\n};\n\n/**\n * * Write a function to extract every element from a given two dimensional list.\n */\nnums.filter = function(fn) {\n    var result = [];\n    for (var i = 0; i < this.length; i++) {\n        if (fn.call(this[i], this[i], i)) {\n            result.push(this[i]);\n        }\n    }\n    return result;\n};\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/155", "prompt": "function evenBitToggleNumber(n) {\n/**\n * * Write a JavaScript function to toggle all even bits of a given number.\n */", "entry_point": "evenBitToggleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitToggleNumber(arg00);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitToggleNumber(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitToggleNumber(arg20);\nvar v2 = 20;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to toggle all even bits of a given number.", "language": "javascript", "canonical_solution": "    res = 0; count = 0; temp = n\n    while (temp > 0) {\n        if (count % 2 == 1) {\n            res = res | (1 << count)\n        }\n        count = count + 1\n        temp >>= 1\n    }\n    return n ^ res\n}", "completion": ["\n    ", "\nvar toggler = ", "\n\nvar num = parseInt(n);\nvar result = 0;\nfor (var i = 0; i < num.length; i++) {\n  var bit = num.charAt(i) == '1'? 1 : 0;\n  result += bit;\n}\nconsole.log(result);\n/**\n * * Write a JavaScript ", "\n  ", "\n\nvar mask = (1 << n) - 1;\nreturn function(x) {\n  return (x & mask) / mask;\n};\n}\n\nmodule.exports = ToggleAllEvenBits;\n},{}],5:["]}
{"task_id": "MBJSP/156", "prompt": "function tupleIntStr(tuplestr) {\n/**\n * * Write a function to convert a tuple of string values to a tuple of integer values.\n */", "entry_point": "tupleIntStr", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"333\", \"33\"], [\"1416\", \"55\"]];\nvar x0 = tupleIntStr(arg00);\nvar v0 = [[333, 33], [1416, 55]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"999\", \"99\"], [\"1000\", \"500\"]];\nvar x1 = tupleIntStr(arg10);\nvar v1 = [[999, 99], [1000, 500]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"666\", \"66\"], [\"1500\", \"555\"]];\nvar x2 = tupleIntStr(arg20);\nvar v2 = [[666, 66], [1500, 555]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "language": "javascript", "canonical_solution": "  return tupleStr.map(str => str.map(num => parseInt(num)));\n}", "completion": ["\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a function to convert a tuple of string values to a tuple of integer values.\n */\n\n/**\n * Write a ", "\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of float values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of boolean values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-string values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-integer values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-float values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-boolean values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-non-string values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-non-integer values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-non-float values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-non-boolean values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-non-non-string values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-non-non-integer values.\n */\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of non-non-non-float values.\n */\n\n/**\n * * Write a ", "\n", "\n  let write = (", "\nWriteTuple(vals, f);\n} else {\n/**\n * * Write a function to convert a string value to an integer.\n */\nWriteString(vals, f);\n}\n});\n\n/**\n * * Write a function to convert a string value to an integer.\n */\nWriteString(vals, f);\n\n/**\n * * Return the tuple of string values from the reader, as a tuple of integer values.\n */\nReaderTuple(reader, f);\n\n/**\n * * Return the string value from the reader, as an integer.\n */\nReaderString(reader, f);\n\n/**\n * * Return the tuple of integer values from the reader, as a tuple of string values.\n */\nReaderTuple(reader, f);\n\n/**\n * * Return the integer value from the reader, as a string.\n */\nReaderInteger(reader, f);\n\n/**\n * * Return the tuple of string values from the reader, as a tuple of integer values.\n */\nReaderTuple(reader, f);\n\n/**\n * * Return the string value from the reader, as an integer.\n */\nReaderString(reader, f);\n\n/**\n * * Return the tuple of integer values from the reader, as a tuple of string values.\n */\nReaderTuple(reader, f);\n\n/**\n * * Return the string value from the reader, as an integer.\n */\nReaderString(reader, f);\n\n/**\n * * Write a function to convert a tuple of string values to a tuple of integer values.\n */\nWriterTuple(vals, f);\n\n/**\n * * Write a function to convert a string value to an integer.\n */\nWriterString(vals, f);\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/157", "prompt": "function encodeList(list1) {\n/**\n * * Write a function to reflect the run-length encoding from a list.\n */", "entry_point": "encodeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4.3, 5, 1];\nvar x0 = encodeList(arg00);\nvar v0 = [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"automatically\";\nvar x1 = encodeList(arg10);\nvar v1 = [[1, \"a\"], [1, \"u\"], [1, \"t\"], [1, \"o\"], [1, \"m\"], [1, \"a\"], [1, \"t\"], [1, \"i\"], [1, \"c\"], [1, \"a\"], [2, \"l\"], [1, \"y\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar x2 = encodeList(arg20);\nvar v2 = [[1, \"p\"], [1, \"y\"], [1, \"t\"], [1, \"h\"], [1, \"o\"], [1, \"n\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to reflect the run-length encoding from a list.", "language": "javascript", "canonical_solution": "  const list2 = [];\n  let count = 1;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === list1[i + 1]) {\n      count++;\n    } else {\n      list2.push([count, list1[i]]);\n      count = 1;\n    }\n  }\n  return list2;\n}", "completion": ["\nvar LENCODE = '_\\\\u0000_\\\\u0001_\\\\u0002_\\\\u0003_\\\\u0004_\\\\u0005_\\\\u0006_\\\\u0007_\\\\b_\\\\t_\\\\n_\\\\u000b_\\\\f_\\\\r_\\\\u000e_\\\\u000f_\\\\u0010_\\\\u0011_\\\\u0012_\\\\u0013_\\\\u0014_\\\\u0015_\\\\u0016_\\\\u0017_\\\\u0018_\\\\u0019_\\\\u001a_\\\\u001b_\\\\u001c_\\\\u001d_\\\\u001e_\\\\u001f_';\n/**\n * * Write a function to decode the run-length encoding from a list.\n */\nvar LDECODE = '_\\\\u0001_\\\\u0002_\\\\u0003_\\\\u0004_\\\\u0005_\\\\u0006_\\\\u0007_\\\\u0008_\\\\u0009_\\\\u000a_\\\\u000b_\\\\u000c_\\\\u000d_\\\\u000e_\\\\u000f_\\\\u0010_\\\\u0011_\\\\u0012_\\\\u0013_\\\\u0014_\\\\u0015_\\\\u0016_\\\\u0017_\\\\u0018_\\\\u0019_\\\\u001a_\\\\u001b_\\\\u001c_\\\\u001d_\\\\u001e_\\\\u001f_';\n\n/**\n * * Write a function to encode a list into a character string.\n */\n", "\nvar write =\n  ", "\nlist1.map(", "\n  w->len = len(list);\n  if (w->len > 0) {\n    w->ptr = (unsigned char*) malloc(w->len + 1);\n    w->ptr[0] = w->len;\n    memcpy(w->ptr + 1, list, w->len);\n    w->ptr[w->len] = '\\0';\n  }\n}\n\n/*\n * w_append_ptr - append an arbitrary pointer to a write structure\n */\nvoid w_append_ptr(struct w *w, const void *ptr) {\n  if (w->len == 0) {\n    w->ptr = (unsigned char*) malloc(1);\n    w->ptr[0] = 1;\n  } else {\n    w->ptr = (unsigned char*) realloc(w->ptr, w->len + 1);\n    w->ptr[w->len] = '\\0';\n  }\n  w->ptr[w->len] = '=';\n  memcpy(w->ptr + w->len + 1, ptr, strlen(ptr));\n  w->len += strlen(ptr);\n}\n\n/*\n * w_append_f - append a float to a write structure\n */\nvoid w_append_f(struct w *w, float f) {\n  char buf[32];\n  int i;\n  i = snprintf(buf, sizeof(buf), \"%.8f\", f);\n  w_append_str(w, buf);\n}\n\n/*\n * w_append_p - append a pointer to a write structure\n */\nvoid w_append_p(struct w *w, const void *ptr) {\n  w_append_str(w, \"0x\");", "\n\nvar i = 1;\n\nvar memo = function memo(fn) {\n  var memoTable = {};\n  return function memoized() {\n    if (Object.prototype.toString.call(arguments) === '[object Array]') {\n      var args = arguments.length === 1? arguments[0] : Array.prototype.slice.call(arguments);\n\n      for (var i = 0; i < args.length; i++) {\n        if (!args[i]) {\n          throw new Error('\"args\" argument must be an array, but was'+ JSON.stringify(args) + '.');\n        }\n      }\n\n      if (!memoTable[args]) memoTable[args] = fn.apply(null, args);\n      return memoTable[args];\n    }\n  };\n};\n\nvar isArray = Array.isArray || function isArray(arg) {\n  return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\nvar isArrayBuffer = function isArrayBuffer(arg) {\n  return arg && typeof arg === 'object' && typeof arg.copy === '"]}
{"task_id": "MBJSP/158", "prompt": "function minOps(arr, n, k) {\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */", "entry_point": "minOps", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 2, 2, 2];\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = minOps(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 2, 6, 8];\nvar arg11 = 4;\nvar arg12 = 3;\nvar x1 = minOps(arg10, arg11, arg12);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [21, 33, 9, 45, 63];\nvar arg21 = 5;\nvar arg22 = 6;\nvar x2 = minOps(arg20, arg21, arg22);\nvar v2 = 24;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find k number of operations required to make all elements equal.", "language": "javascript", "canonical_solution": "    // TODO: Write your code here\n    var max1 = Math.max.apply(Math, arr);\n    var res = 0;\n    for (var i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k != 0) {\n            return -1;\n        } else {\n            res += (max1 - arr[i]) / k;\n        }\n    }\n    return parseInt(res);\n}", "completion": ["\n\n", "\n\n// Solution 1\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n * * Each operation takes one unit of time, and the first element in a sequence must be the kth element.\n */\n\nconst solution1 = arr => {\n  let arrLength = arr.length;\n  let kthElement = Math.floor(arrLength / 2);\n  let count = 0;\n  for (let i = 0; i < arrLength; i++) {\n    if (arr[i] === kthElement) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Solution 2\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n * * Each operation takes one unit of time, and the first element in a sequence must be the kth element.\n */\n\nconst solution2 = arr => {\n  const { length } = arr;\n  let count = 0;\n  for (let i = 0; i < length - 1; i++) {\n    const value = Math.floor(length / 2);\n    if (arr[i] === value) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Solution 3\n/**\n * * Write a JavaScript ", "\n\nvar arr = [];\n\nfor (var i = 0; i < n; i++) {\n    arr[i] = i + 1;\n}\nconsole.log(arr);\n\nvar count = 0;\nfor (var i = 0; i < n; i++) {\n    var min = arr[0];\n    for (var j = 1; j < k; j++) {\n        if (arr[j] < min) {\n            min = arr[j];\n        }\n    }\n    if (min == arr[i]) {\n        count++;\n        arr[i] = arr[i - 1] + 1;\n    }\n}\nconsole.log(count);\n\nvar arr1 = [];\n\nfor (var i = 0; i < n; i++) {\n    arr1[i] = i + 1;\n}\nconsole.log(arr1);\n\nfor (var i = 0; i < n; i++) {\n    var min = arr1[0];\n    for (var j = 1; j < k; j++) {\n        if (arr1[j] < min) {\n            min = arr1[j];\n        }\n    }\n    if (min == arr1[i]) {\n        count++;\n        arr1[i] = arr1[i - 1] + 1;\n    }\n}\nconsole.log(count);\n}<|endoftext|>", "\n\n\n    return {\n        type: '", "\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript function to find k number of operations required to make all elements equal.\n */\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/159", "prompt": "function monthSeason(month, days) {\n/**\n * * Write a function to print the season for the given month and day.\n */", "entry_point": "monthSeason", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"January\";\nvar arg01 = 4;\nvar x0 = monthSeason(arg00, arg01);\nvar v0 = \"winter\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"October\";\nvar arg11 = 28;\nvar x1 = monthSeason(arg10, arg11);\nvar v1 = \"autumn\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"June\";\nvar arg21 = 6;\nvar x2 = monthSeason(arg20, arg21);\nvar v2 = \"spring\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to print the season for the given month and day.", "language": "javascript", "canonical_solution": "    const months = {\n        \"January\": \"winter\",\n        \"February\": \"spring\",\n        \"March\": \"summer\",\n        \"April\": \"autumn\",\n        \"May\": \"winter\",\n        \"June\": \"spring\",\n        \"July\": \"summer\",\n        \"August\": \"autumn\",\n        \"September\": \"winter\",\n        \"October\": \"autumn\",\n        \"November\": \"summer\",\n        \"December\": \"winter\"\n    };\n    return months[month];\n}", "completion": ["\nconst print = (month, days) => {\n  switch (month) {\n    case 1:\n      console.log(`Winter`);\n      break;\n    case 2:\n      console.log(`Spring`);\n      break;\n    case 3:\n      console.log(`Summer`);\n      break;\n    case 4:\n      console.log(`Fall`);\n      break;\n    default:\n      console.log(`Winter`);\n      break;\n  }\n};\n\nprint(month, days);\n```\n\n- - -\n\n<!-- tabs:end -->\n\n<!-- -->\n\n- - -\n<!-- -->\n\n## \ud83d\udcda Why a date object?\n\n**1**: **We want to be able to store/access dates in a flexible and easy way.**\n\n- - - -\n\n<!-- tabs:start -->\n\n#### \ud83d\udca1 Explanation\n\n- **General principle**: a date object is a JavaScript object with only a single field: a date. A date is represented by a JavaScript object with a single field: the date in the format dd.mm.yyyy.\n- - - -\n\n<!-- tabs:end -->\n\n<!-- -->\n\n- - -\n<!-- -->\n\n## \ud83d\udd0e Search for relevant documents\n\n- - - -\n\n<!-- tabs:start -->\n\n#### \ud83d\udca1 Explanation\n\n- **We want to be able to search for relevant documents using a simple OR query.**\n- - - -\n\n<!-- tabs:end -->\n\n<!-- -->\n\n- - -\n<!-- -->\n\n## \ud83d\udcd3 Downloading and processing data\n\n- - - -\n\n<!-- tabs:start -->\n\n#### \ud83d\udca1", "\nconst seasons = [\n  {\n    title: 'Winter',\n    days: [1, 2, 3, 4],\n  },\n  {\n    title: 'Spring',\n    days: [5, 6, 7, 8],\n  },\n  {\n    title: 'Summer',\n    days: [9, 10, 11, 12],\n  },\n  {\n    title: 'Fall',\n    days: [13, 14, 15, 16],\n  },\n];\n\nconst { write } = render(\n  <div>\n    <input\n      type=\"month\"\n      onChange={(e) => {\n        const month = e.target.value;\n        const monthIndex = month - 1;\n        const { days } = seasons[monthIndex];\n        write(`${month} ${days.join('/')}`);\n      }}\n      value=\"1/1\"\n    />\n    <span className=\"month\">1</span>\n    <span className=\"day\">1</span>\n    <button type=\"button\" onClick={() => {\n      write(`${month + 1}/1`);\n    }}>Next month</button>\n  </div>,\n  document.getElementById('content')\n);\n\nsetInterval(() => {\n  write(`${month + 1}/1`);\n}, 1000);\n}\n\nconst start = new Date().getTime();\n\nconst format = (month, day) => {\n  const date = new Date(month, day);\n  const { year, dayOfWeek, monthName } = date;\n  return `${dayOfWeek} ${monthName} ${year}`;\n};\n\nconst renderNew = () => {\n", "\nconst print_season = (month, day) => {\n  console.log('Current season for'+ month + ':' + day);\n};\nprint_season(1, 1);\nprint_season(1, 15);\nprint_season(1, 20);\nprint_season(1, 25);\nprint_season(2, 1);\nprint_season(2, 8);\nprint_season(2, 13);\nprint_season(2, 19);\nprint_season(3, 5);\nprint_season(3, 10);\nprint_season(3, 16);\nprint_season(3, 21);\nprint_season(4, 1);\nprint_season(4, 7);\nprint_season(4, 14);\nprint_season(4, 20);\nprint_season(5, 1);\nprint_season(5, 6);\nprint_season(5, 11);\nprint_season(5, 17);\nprint_season(5, 22);\nprint_season(6, 1);\nprint_season(6, 4);\nprint_season(6, 9);\nprint_season(6, 15);\nprint_season(6, 20);\nprint_season(7, 1);\nprint_season(7, 2);\nprint_season(7, 7);\nprint_season(7, 13);\nprint_season(7, 19);\nprint_season(7, 23);\nprint_season(8, 1);\nprint_season(8, 7);\nprint_season(8, 13);\nprint_season(8, 19);\nprint_season(8, 23);\nprint_season(9, 1);\nprint_season(9, 2);\nprint_season(9, 7);\nprint_season(9,", "\nvar month_days = month * 31;\n\nvar days_in_month = function days_in_month(month, year) {\nvar result = month_days + (isLeapYear(year)? 29 : 28);\nif (month === 2) {\nresult += isLeapYear(year)? 1 : 0;\n}\nreturn result;\n};\n\n/**\n * * Write a function to print the season for the given month and day.\n */\nvar month_days_in_season = function month_days_in_season(month, year) {\nvar result = days_in_month(month, year);\nif (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\nresult += 1;\n}\nif (month === 4 || month === 6 || month === 9 || month === 11) {\nresult += 1;\n}\nreturn result;\n};\n\nvar season = function season(month, year) {\nvar month_days_in_season = month_days_in_season(month, year);\nif (month_days_in_season < 13) {\nreturn \"Winter\";\n} else if (month_days_in_season < 26) {\nreturn \"Spring\";\n} else if (month_days_in_season < 39) {\nreturn \"Summer\";\n} else {\nreturn \"Autumn\";\n}\n};\n\nvar isLeapYear = function isLeapYear(year) {\nreturn year % 400 === 0 || year % 100!== 0 && year % 4 === 0;\n};\n\n/**\n * * Write a function to print the season for the given month and day.\n */\nvar season_2 = ", "\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n\n/**\n * * Write a function to print the season for the given month and day.\n */\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n\n/**\n * * Write a function to print the season for the given month and day.\n */\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a function to print the season for the given month and day.\n// Write a "]}
{"task_id": "MBJSP/160", "prompt": "function solution(a, b, n) {\n/**\n * * Write a function to find x and y that satisfies ax + by = n.\n */", "entry_point": "solution", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 3;\nvar arg02 = 7;\nvar x0 = solution(arg00, arg01, arg02);\nvar v0 = [\"x = \", 2, \", y = \", 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar arg12 = 7;\nvar x1 = solution(arg10, arg11, arg12);\nvar v1 = \"No solution\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 13;\nvar arg22 = 17;\nvar x2 = solution(arg20, arg21, arg22);\nvar v2 = [\"x = \", 4, \", y = \", 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find x and y that satisfies ax + by = n.", "language": "javascript", "canonical_solution": "  if (a > n / b) {\n    return \"No solution\";\n  }\n\n  for (let x = 1; x <= n / a; x++) {\n    for (let y = 1; y <= n / b; y++) {\n      if (a * x + b * y === n) {\n        return [\"x = \", x, \", y = \", y];\n      }\n    }\n  }\n\n  return \"No solution\";\n}", "completion": ["\n    Math.a = a;\n    Math.b = b;\n    Math.n = n;\n    /**\n * * Write a function that takes an array of numbers and returns a new array of numbers that satisfy the following:\n *   * The numbers are unique.\n *   * The sum of all numbers is equal to the target number n.\n *   * The product of all numbers is equal to the target number n.\n *   * For every number in the array, the corresponding value is less than or equal to the target number n.\n *   * For every number in the array, the corresponding value is greater than or equal to the target number n.\n *   * If a number x is less than or equal to the target number n, then the sum of the array must contain the number x.\n *   * If a number x is greater than or equal to the target number n, then the product of the array must contain the number x.\n *   * If no number in the array satisfies the conditions, then return the array empty.\n *   * If the array has more than one condition, then return the array with the condition of the lowest index.\n *   * If the array has less than one condition, then return the array with the condition of the highest index.\n *   * If the array is empty, then return the number zero.\n *   * If the array is equal to the number zero, then return the number zero.\n *   * If the array is equal to the target number n, then return the number zero.\n * * Given n is not a number, then n is a function that returns the target number.\n * * Given n is a number, then n is a function that returns the target number.\n * * Given n is a function that returns the target number, then n is a ", "\nlet grid = {\n  0: [0, 0, 0],\n  1: [0, 0, 0],\n  2: [0, 0, 0],\n  3: [0, 0, 0],\n}\nlet answer = 0\n\nlet helper = function(a, b, n) {\n  let dx = Math.floor(n / a)\n  let dy = Math.floor(n / b)\n  if (grid[dx][dy][0] === 0) {\n    grid[dx][dy][0] = 1\n    grid[dx][dy][1] = dx\n    grid[dx][dy][2] = dy\n  }\n  if (n % a === 0) {\n    helper(a, b, n - a)\n  } else if (n % b === 0) {\n    helper(a, b, n - b)\n  } else {\n    helper(a, b, n - 1)\n  }\n}\n\nhelper(a, b, n)\n\nfor (let i = 0; i < grid.length; i++) {\n  for (let j = 0; j < grid[0].length; j++) {\n    if (grid[i][j][0] === 1) {\n      answer = Math.max(answer, grid[i][j][1] + grid[i][j][2])\n    }\n  }\n}\n```\n\nWe will need to know how to use the `helper()` ", "\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}\n}, () => {\nreturn {\n  x: a,\n  y: b,\n  n: n\n}", "\n},\n{}],\n<span class=\"fstat-no\" title=\"", "\n    let x = a / n, y = b / n;\n\n    while (a % n!= 0 || b % n!= 0) {\n/**\n * * If a and b are not relatively prime, then write a function that finds an x and y that satisfy ax + by = 1.\n */\n        x = a / n;\n        y = b / n;\n        n = n / (a % n + b % n);\n    }\n    console.log(x, y, n);\n}\n```\n\n## \u94fe\u8868\u7684\u63d2\u5165\u3001\u5220\u9664\u548c\u53d6\u51fa\n\n### \u5220\u9664\u5143\u7d20\n\n```js\n/**\n * \u5220\u9664\u5355\u94fe\u8868\u4e2d\u503c\u4e3a val \u7684\u7ed3\u70b9\n */\n"]}
{"task_id": "MBJSP/161", "prompt": "function removeElements(list1, list2) {\n/**\n * * Write a function to remove all elements from a given list present in another list.\n */", "entry_point": "removeElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg01 = [2, 4, 6, 8];\nvar x0 = removeElements(arg00, arg01);\nvar v0 = [1, 3, 5, 7, 9, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg11 = [1, 3, 5, 7];\nvar x1 = removeElements(arg10, arg11);\nvar v1 = [2, 4, 6, 8, 9, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg21 = [5, 7];\nvar x2 = removeElements(arg20, arg21);\nvar v2 = [1, 2, 3, 4, 6, 8, 9, 10];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove all elements from a given list present in another list.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (!list2.includes(list1[i])) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}", "completion": ["\n/**\n * * Return a list with all elements removed from the first list.\n * *\n * * @", "\n", "\n```\n\n**<font color=red>\u56de\u590d</font>**\n\n- \u4eca\u5929\u7684 **[\u7ffb\u8bd1](https://github.com/leizongmin/js-translate)** \u53d1\u5e03\u5728 Github Pages \u4e0a\uff0c\u6b22\u8fce\u5927\u5bb6\u5173\u6ce8\u4eca\u5929\u7684\u53d1\u5e03\uff01\n\n**<font color=red>\u77e5\u4e4e</font>**\n\n- \u63d0\u4ea4 Issue \u6216 Pull Request \u4ee5\u9a8c\u8bc1\u7ffb\u8bd1\u662f\u5426\u6b63\u786e\u3002\n\n## \u4ee5\u4e0b\u6a21\u5757\u7684\u529f\u80fd\u6709\u9650**\n\n**<font color=red>\u6a21\u5757\u529f\u80fd</font>**\n\n- \u5c3d\u53ef\u80fd\u7b80\u77ed\u7684\u4ecb\u7ecd\u529f\u80fd\u6a21\u5757\uff0c\u5e76\u975e\u8986\u76d6\u5230\u5176\u4ed6\u6a21\u5757\u3002\n\n- \u5982\u679c\u6a21\u5757\u6709\u591a\u4e2a\u7248\u672c\uff0c\u5219\u4e3a\u7248\u672c\u63cf\u8ff0\u6dfb\u52a0\u7248\u672c\u53f7\uff0c\u4f8b\u5982\uff1a `0.1.0` \u6216 `0.1.0-beta`\u3002\n\n- \u5982\u679c\u6a21\u5757\u6709\u591a\u4e2a\u63a5\u53e3\uff0c\u5219\u4e3a\u63a5\u53e3\u63cf\u8ff0\u6dfb\u52a0\u63a5\u53e3\u540d\u79f0\uff0c\u4f8b\u5982\uff1a `on", "\n\n/**\n * * Write a function to replace all elements from a given list present in another list with a given value.\n */\n\n/**\n * * Write a function to remove all duplicates from a given list.\n */\n\n/**\n * * Write a function to return the first occurrence of an element from a given list.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the smallest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the largest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the second smallest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the second largest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the third smallest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the third largest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the fourth smallest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the fourth largest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the fifth smallest value.\n */\n\n/**\n * * Write a function to return a given list with its first occurrence having the fifth largest value.\n */\n\n/**\n * * Write a function to return the length of a given list.\n */\n\n/**\n * * Write a function to return the number of elements in a given list.\n */\n\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/162", "prompt": "function sumSeries(n) {\n/**\n * * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n */", "entry_point": "sumSeries", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = sumSeries(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = sumSeries(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = sumSeries(arg20);\nvar v2 = 25;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "language": "javascript", "canonical_solution": "  if (n <= 1) return n;\n  return n + sumSeries(n - 2);\n}", "completion": ["\nn = Math.abs(n);\nvar i = 0, x = n;\nwhile (x > 0) {\nx = n - i;\ni++;\n}\nreturn i;\n}\n</script>\n\n<script>\n/**\n * * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n */\nvar _Math_abs = Math.abs;\n", "\n", "\nn > 0 && n < 20 && n > x && n < 50 && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x < 50 && x > n && x < n * n && x > 0 && x", "\n", "\n\"use strict\";\nexports.__esModule = true;\nvar _ = require(\"lodash\");\n"]}
{"task_id": "MBJSP/163", "prompt": "function areaPolygon(s, l) {\n/**\n * * Write a function to calculate the area of a regular polygon.\n */", "entry_point": "areaPolygon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 20;\nvar x0 = areaPolygon(arg00, arg01);\nvar v0 = 400.00000000000006;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = areaPolygon(arg10, arg11);\nvar v1 = 1731.1969896610804;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 7;\nvar x2 = areaPolygon(arg20, arg21);\nvar v2 = 302.90938549487214;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the area of a regular polygon.", "language": "javascript", "canonical_solution": "  return (s * Math.pow(l, 2)) / (4 * Math.tan(Math.PI / s))\n}", "completion": ["\n", "\n};\n\nexports.polygon_area = polygon_area;\n/**\n * * Write a function to calculate the perimeter of a regular polygon.\n */\n\n", "\n", "\n", "\n\n"]}
{"task_id": "MBJSP/164", "prompt": "function areequivalent(num1, num2) {\n/**\n * * Write a JavaScript function to check whether the sum of divisors are same or not.\n */", "entry_point": "areequivalent", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 36;\nvar arg01 = 57;\nvar x0 = areequivalent(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = areequivalent(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 23;\nvar arg21 = 47;\nvar x2 = areequivalent(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the sum of divisors are same or not.", "language": "javascript", "canonical_solution": "  var divisors = [];\n  var sum = 0;\n  var i;\n  for (i = 1; i <= num1 && i <= num2; i++) {\n    if (num1 % i === 0 && num2 % i === 0) {\n      divisors.push(i);\n      sum += i;\n    }\n  }\n  return divisors.length === 1 ? true : false;\n}", "completion": ["\n\n", "\nvar getSum = function(num1, num2) {\nvar sum = 0;\nfor(var i = 1; i <= num1/2; i++) {\nif(num1 % i == 0) {\nif(num2 % i == 0) {\nsum += i;\n}\n}\n}\nreturn sum;\n}\n\nconsole.log(getSum(12,15));\n\n/**\n * * Write a JavaScript function to get the number of prime numbers between two numbers.\n */\n", "\nconst same_sums = (num1, num2) => {\n    const divisors1 = get_divisors(num1);\n    const divisors2 = get_divisors(num2);\n    const sum_divisors1 = divisors1.reduce((a, b) => a + b);\n    const sum_divisors2 = divisors2.reduce((a, b) => a + b);\n    if (sum_divisors1 === sum_divisors2) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconsole.log(same_sums(1, 2)); // => false\nconsole.log(same_sums(2, 3)); // => true\nconsole.log(same_sums(4, 4)); // => true\nconsole.log(same_sums(11, 6)); // => false\nconsole.log(same_sums(6, 11)); // => true\nconsole.log(same_sums(1, 3)); // => false\nconsole.log(same_sums(2, 4)); // => true\nconsole.log(same_sums(5, 3)); // => false\nconsole.log(same_sums(6, 7)); // => true\n```\n\n</details>\n\n<details>\n\n<summary><strong>Tests</strong></summary>\n\n```javascript\nimport same_sums from 'array-same-sums';\n\ntest('same_sums', () => {\n    expect(same_sums(1, 2)).toBeFalse();\n    expect(same_sums(2, 3)).toBeTrue();\n    expect(same_s", "\nconst sum = (divisors) => {\n    // Total of the divisors is n\n    let totalDivisors = divisors.reduce((totalDivisors, divisor) => {\n        // If the sum of all divisors is same, return true\n        if (divisor == totalDivisors) {\n            return true;\n        } else {\n            // Else return false\n            return false;\n        }\n    }, true);\n    if (totalDivisors) {\n        console.log(\"Sum of divisors are same\");\n    } else {\n        console.log(\"Sum of divisors are not same\");\n    }\n};\n\nsum([]);\nsum([1]);\nsum([3, 5]);\nsum([1, 3]);\nsum([1, 2, 3, 4]);\n*/\n\n}\n\n```\n\n## \ud29c\ud50c(Tuples)\n\n\ud29c\ud50c\uc740 \uc790\ub8cc\ud615\uc774 \uc544\ub2c8\ub77c, \uac1d\uccb4\ub85c \ub370\uc774\ud130\ub97c \ubb36\uc5b4\uc11c \ub9cc\ub4e4\uc5b4\uc9c4 \uc790\ub8cc\ud615 \uac1c\ub150\uc774\ub2e4.\n\n```js\nconst tuple = ([num1, num2],) => {\n    // \uc774\ub807\uac8c \ud558\uba74 \ube48 \ud29c\ud50c\uc740 \uc544\ubb34\uac83\ub3c4 \uc5c6\ub2e4.\n    console.log(\"tuple created with num1 = \" + num1 + \", num2 =", "\n"]}
{"task_id": "MBJSP/165", "prompt": "function countCharPosition(str1) {\n/**\n * * Write a JavaScript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n */", "entry_point": "countCharPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"xbcefg\";\nvar x0 = countCharPosition(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABcED\";\nvar x1 = countCharPosition(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AbgdeF\";\nvar x2 = countCharPosition(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "language": "javascript", "canonical_solution": "    // TODO: write your code here\n    count_chars = 0\n    for (i = 0; i < str1.length; i++) {\n        if ((i == str1.charCodeAt(i) - 'A'.charCodeAt(0)) || \n            (i == str1.charCodeAt(i) - 'a'.charCodeAt(0))) { \n            count_chars += 1\n        }\n    }\n    return count_chars\n}", "completion": ["\n\nthis.str1 = str1;\n\n/**\n * * Return the number of characters at the same position as in english alphabet.\n */\n\nthis.charCount = function () {\n    return this.str1.split(\"\").length;\n};\n}\n\n/**\n * * Write a JavaScript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n */\n\nclassCount.prototype.str1 = str1;\n\n/**\n * * Return the number of characters at the same position as in english alphabet.\n */\n\nclassCount.prototype.charCount = function () {\n    return this.str1.split(\"\").length;\n};\n}\n\n/**\n * * Write a JavaScript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n */\n\n", "\n\nvar charMap = {\n  'A': 10,\n  'B': 11,\n  'C': 12,\n  'D': 13,\n  'E': 14,\n  'F': 15,\n  'G': 16,\n  'H': 17,\n  'I': 18,\n  'J': 19,\n  'K': 20,\n  'L': 21,\n  'M': 22,\n  'N': 23,\n  'O': 24,\n  'P': 25,\n  'Q': 26,\n  'R': 27,\n  'S': 28,\n  'T': 29,\n  'U': 30,\n  'V': 31,\n  'W': 32,\n  'X': 33,\n  'Y': 34,\n  'Z': 35,\n  'a': 10,\n  'b': 11,\n  'c': 12,\n  'd': 13,\n  'e': 14,\n  'f': 15,\n  'g': 16,\n  'h': 17,\n  'i': 18,\n  'j': 19,\n  'k': 20,\n  'l': 21,\n  'm': 22,\n  'n': 23,\n  'o': 24,\n  'p': 25,\n  'q': 26,\n  'r': 27,\n  's': 28,\n  't': 29,\n  'u': 30,\n  'v': 31,\n  'w': 32,\n  'x': 33,\n  'y': 34,\n  'z': 35,\n  '0': 0,\n  '1': 1,\n  '2': 2,\n  '3': 3,\n  '4':", "\nvar s1 = \"Hello World\";\nvar s2 = \"Hello World\";\nvar s3 = \"Hello World\";\nvar s4 = \"Hello World\";\nvar s5 = \"Hello World\";\nvar s6 = \"Hello World\";\nvar s7 = \"Hello World\";\nvar s8 = \"Hello World\";\nvar s9 = \"Hello World\";\nvar s10 = \"Hello World\";\nvar s11 = \"Hello World\";\nvar s12 = \"Hello World\";\nvar s13 = \"Hello World\";\nvar s14 = \"Hello World\";\nvar s15 = \"Hello World\";\nvar s16 = \"Hello World\";\nvar s17 = \"Hello World\";\nvar s18 = \"Hello World\";\nvar s19 = \"Hello World\";\nvar s20 = \"Hello World\";\nvar s21 = \"Hello World\";\nvar s22 = \"Hello World\";\nvar s23 = \"Hello World\";\nvar s24 = \"Hello World\";\nvar s25 = \"Hello World\";\nvar s26 = \"Hello World\";\nvar s27 = \"Hello World\";\nvar s28 = \"Hello World\";\nvar s29 = \"Hello World\";\nvar s30 = \"Hello World\";\nvar s31 = \"Hello World\";\nvar s32 = \"Hello World\";\nvar s33 = \"Hello World\";\nvar s34 = \"Hello World\";\nvar s35 = \"Hello World\";\nvar s36 = \"Hello World\";\nvar s37 = \"Hello World\";\nvar s38 = \"Hello World\";\nvar s39 = \"Hello World\";\nvar s40 = \"Hello World\";\nvar s41 = \"Hello World\";\nvar s42 = \"Hello World\";\nvar s43 = \"Hello World\";\nvar s44 = \"Hello World\";\nvar s45", "\nvar countChar = function countChar(str) {\n    var regExp = new RegExp(\"[\" + String.fromCharCode(0).toLowerCase() + String.fromCharCode(0).toUpperCase() + \"]\", \"g\");\n    return str.replace(regExp, \"\");\n};\n\nvar count = countChar(str);\n\nconsole.log(count); //", "\nvar countChar = function (str, c) {\n    c = c.toLowerCase();\n    var l = str.length, i;\n    for (i = 0; i < l; i++) {\n        if (str.charAt(i).toLowerCase() === c) {\n            return (i);\n        }\n    }\n    return (-1);\n};\n/**\n * * Create a HTML string with a given string in an HTML tag\n * @param str {String} The string to create\n * @return {String} The HTML string\n */\nvar htmlTag = function (str) {\n    return '<' + str + '>';\n};\n/**\n * * Create a HTML string with a given string in an HTML tag and a given style\n * @param str {String} The string to create\n * @param style {String} The style to create\n * @return {String} The HTML string\n */\nvar htmlTagWithStyle = function (str, style) {\n    return '<' + str +'style=\"' + style + '\">';\n};\n/**\n * * Create a HTML string with a given string in an HTML tag with a given style and a given class\n * @param str {String} The string to create\n * @param style {String} The style to create\n * @param class {String} The class to create\n * @return {String} The HTML string\n */\nvar htmlTagWithClassAndStyle = "]}
{"task_id": "MBJSP/166", "prompt": "function findEvenPair(a, n) {\n/**\n * * Write a JavaScript function to count the pairs with xor as an even number.\n */", "entry_point": "findEvenPair", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 4, 7, 2, 1];\nvar arg01 = 5;\nvar x0 = findEvenPair(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 2, 8, 1, 0, 5, 11];\nvar arg11 = 7;\nvar x1 = findEvenPair(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 3;\nvar x2 = findEvenPair(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the pairs with xor as an even number.", "language": "javascript", "canonical_solution": "  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      if ((a[i] ^ a[j]) % 2 === 0) {\n        result++;\n      }\n    }\n  }\n  return result;\n}", "completion": ["\n", "\n", "\n  var func = {\n    /**\n     * @param {number} a\n     * @param {number} n\n     * @return {string}\n     */\n    write: function (a, n) {\n      var a = Math.abs(a);\n      var n = Math.abs(n);\n\n      var result = '';\n      var index = 0;\n\n      while (index < n) {\n        var xor = a.toString()[0] ^ a.toString()[1];\n        var pad = n - index - 1;\n\n        result += pad? '0' : '1';\n        result += '^' + xor + '\\n';\n\n        index++;\n      }\n\n      return result;\n    },\n\n    /**\n     * @param {number} a\n     * @param {number} n\n     * @return {string}\n     */\n    read: function (a, n) {\n      var a = Math.abs(a);\n      var n = Math.abs(n);\n\n      var result = '';\n      var index = 0;\n\n      while (index < n) {\n        var xor = a.toString()[0] ^ a.toString()[1];\n        var pad = n - index - 1;\n\n        result += pad? '0' : '1';\n        result += '^' + xor + '\\n';\n\n        index++;\n      }\n\n      return result;\n    }\n  };\n\n  return func;\n}\n\n/**\n * @param {number} a\n * @param {number} n\n * @return {string}\n */\n", "\nreturn xorPair(a, n);\n}\n```\n\n**[\u2714] Generate a function to count the pairs with xor as an even number.**\n\n**Output:**\n\n```js\n", "\nn = a.length;\nfor (i = 0; i < n; i++) {\n    // this is the (x, y) that is the pair that xor will return an even number\n    x = a[i] ^ i;\n    y = a[(i + x) % n] ^ i;\n    // write the pair to the output\n    result.push(Pair(x, y));\n}\n```\n\nHere's how to go about writing a "]}
{"task_id": "MBJSP/167", "prompt": "function nextPowerOf2(n) {\n/**\n * * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */", "entry_point": "nextPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 0;\nvar x0 = nextPowerOf2(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = nextPowerOf2(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 17;\nvar x2 = nextPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find smallest power of 2 greater than or equal to n.", "language": "javascript", "canonical_solution": "  if (n === 0) return 1;\n  let result = 1;\n  while (result < n) {\n    result *= 2;\n  }\n  return result;\n}", "completion": ["\n\n/**\n * * `a` is the number to be searched.\n * * `b` is the power of 2 to be searched.\n * * `c` is the number of values to be searched.\n * * Return the index of the first value for which `a` is less than or equal to `b` and greater than or equal to `c`.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * * `a` is the number to be searched.\n * * `b` is the power of 2 to be searched.\n * * `c` is the number of values to be searched.\n * * Return the index of the first value for which `a` is less than or equal to `b` and greater than or equal to `c`.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * Write a JavaScript function to find smallest power of 2 greater than or equal to n.\n */\n\n/**\n * Write a JavaScript ", "\n*!", "\n}\n```\n\n<br>\n\n### <a id=\"next-bigger-power-of-2\"></a>Next Bigger Power of 2\n\nLet's say that a number n is written in binary form.\n\n**Example**\n\n> `n = 100001 = 2^4 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 4 + 2 + 1 + 0`\n\nTo find the next bigger power of 2, we will look at the previous one, and look for the next power of 2.\n\n> `n = 100001 = 2^4 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 4 + 2 + 1 + 0`\n\nThe previous power of 2 is 4, so the next power of 2 is 8.\n\n```javascript\nvar n = 100001;\n```\n\nWe need to find out whether it is a power of 2 or not.\n\n```javascript\nn > 1? 1 : 0; // 1 since n is bigger than 1\n```\n\n<br>\n\n### <a id=\"next-bigger-power-of-2-brute-force\"></a>Next Bigger Power of 2 (Brute Force)\n\n```javascript\n", "\n}\n", "\n"]}
{"task_id": "MBJSP/168", "prompt": "function frequency(a, x) {\n/**\n * * Write a JavaScript function to find the frequency of a number in a given array.\n */", "entry_point": "frequency", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = 4;\nvar x0 = frequency(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 3, 3, 3, 4];\nvar arg11 = 3;\nvar x1 = frequency(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 1, 2];\nvar arg21 = 1;\nvar x2 = frequency(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the frequency of a number in a given array.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === x) {\n      count++;\n    }\n  }\n  return count;\n}", "completion": ["\nf = function (a, x) {\n    let frequency = 0;\n\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === x) {\n            frequency++;\n        }\n    }\n\n    return frequency;\n}\n```\n\nHere we use the `map()` method, which takes the function and an array and returns a new array with all the function results.\n\n```js\nlet f = ", "\n", "\n\n    if (typeof a === 'object' && typeof x === 'number') {\n      var x = a[x];\n      var a = a.slice();\n      var i = 0;\n      while (x!= a[i]) i++;\n      return i;\n    } else {\n      return 0;\n    }\n  }\n\n/**\n * * Test whether a given text is a valid JSON string.\n */\n\n  ", "\n\n    var binning = ", "\n"]}
{"task_id": "MBJSP/169", "prompt": "function getPell(n) {\n/**\n * * Write a function to calculate the nth pell number.\n */", "entry_point": "getPell", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = getPell(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = getPell(arg10);\nvar v1 = 169;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar x2 = getPell(arg20);\nvar v2 = 408;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the nth pell number.", "language": "javascript", "canonical_solution": "  if (n <= 2) return n;\n  a = 1;\n  b = 2;\n  for (let i = 3; i <= n; i++) {\n    c = 2 * b + a;\n    a = b;\n    b = c;\n  }\n  return b;\n}", "completion": ["\nclass nth {\n    /**\n     * * Write a function to calculate the nth pell number.\n     * @param {number} n\n     */\n    public static ", "\n", "\n\nvar arr = [];\nfor (var i = 1; i <= 4; i++) arr[i - 1] = Math.pow(i, n);\n\n", "\n", "\n\n"]}
{"task_id": "MBJSP/170", "prompt": "function sumRangeList(list1, m, n) {\n/**\n * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n */", "entry_point": "sumRangeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg01 = 8;\nvar arg02 = 10;\nvar x0 = sumRangeList(arg00, arg01, arg02);\nvar v0 = 29;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg11 = 5;\nvar arg12 = 7;\nvar x1 = sumRangeList(arg10, arg11, arg12);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar arg21 = 7;\nvar arg22 = 10;\nvar x2 = sumRangeList(arg20, arg21, arg22);\nvar v2 = 38;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "language": "javascript", "canonical_solution": "  let sum = 0;\n  for (let i = m; i <= n; i++) {\n    sum += list1[i];\n  }\n  return sum;\n}", "completion": ["\n/**\n * * @typedef {(params?: Params) => any} Any\n * * @callback ParamsCallback\n * * @param {string} [params.fieldName=null] - The name of the field.\n * * @param {number} [params.start] - The start index of the range.\n * * @param {number} [params.end] - The end index of the range.\n * * @param {boolean} [params.group=false] - Whether or not the results should be grouped.\n * * @param {any} [params.groupKey=null] - The group key.\n * * @param {boolean} [params.groupResultField=false] - Whether the results should be grouped by result field.\n * * @param {boolean} [params.flatten=false] - Whether the results should be flattened.\n * * @param {boolean} [params.filter=false] - Whether or not the results should be filtered.\n * * @param {boolean} [params.filterOnArrayFields=false] - Whether the results should be filtered on array fields.\n * * @param {number} [params.filterThreshold=0] - A threshold of the results to filter on.\n * * @param {boolean} [params.ignoreNaN=false] - Whether or not NaN values should be ignored.\n * * @param {boolean} [params.ignoreNull=false] - Whether or not null values should be ignored.\n * * @param {boolean} [params.ignoreEmpty=false] - Whether or not empty strings should be ignored.\n * * @param {number} [params.page=0] - The page number.\n * * @param {number} [params.pageSize=50] - The page", "\n", "\n", "\ndef sum(list: List[Int], m: Int, n: Int): Int = {\n  val size = list.size\n  val sum = 0\n  var i = 0\n  var j = 0\n  while(i <= size && j < m + 1) {\n    sum = sum + list(i)\n    i = i + 1\n    if(j < m + 1) {\n      sum = sum + list(j)\n      j = j + 1\n    }\n  }\n  sum\n}\n/**\n * * Write a function to find the longest word in a dictionary.\n */\ndef longestWord(dict: Map[String, String]): String = {\n  val size = dict.size\n  var i = 0\n  var j = 0\n  var result = \"\"\n  while(i <= size && j < size) {\n    val word = dict(j).toLowerCase\n    val length = word.length\n    if(length > result.length) {\n      result = word\n    }\n    i = i + 1\n    if(j < size) {\n      val nextWord = dict(j + 1).toLowerCase\n      val nextLength = nextWord.length\n      if(nextLength > length) {\n        result = word\n      }\n      j = j + 1\n    }\n  }\n  result\n}\n/**\n * * Write a ", "\nconst nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconst sum = nums.reduce((sum, num) => sum + num)\n//sum == 45\n```\n\n## \u89e3\u6cd5\u4e8c\n\n\u5927\u5bb6\u90fd\u77e5\u9053\u6c42\u89e3 `reduce` \u51fd\u6570\u7684\u89e3\u6cd5\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6765\u770b\u4e0b\u7a0d\u5fae\u61d2\u4e00\u70b9\u7684\u89e3\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u8be5\u89e3\u6cd5\u7684\u601d\u60f3\u662f\u5b9e\u73b0 `reduce` \u51fd\u6570\uff0c\u4e5f\u5c31\u662f\u5728\u7ed9\u5b9a\u7684\u6bcf\u4e00\u4e2a `num` \u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6bcf\u4e00\u4e2a `num` \u7684\u7ed3\u675f\u4f4d\u7f6e\uff0c\u4e24\u4e2a `num` \u7684\u503c\u4e4b\u548c\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u503c\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a `reduce` \u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5b9a\u4e49\u4e00\u4e2a `sum` \u53d8\u91cf\uff0c\u7136\u540e\u5b9a\u4e49\u4e00\u4e2a\u521d\u59cb\u5316\u503c\uff0c\u5982\u679c\u9047\u5230\u4e86\u53ea\u6709\u4e00\u4e2a `num` \u7684\u65f6\u5019\uff0c\u5c31\u76f4\ufffd"]}
{"task_id": "MBJSP/171", "prompt": "function perimeterPentagon(a) {\n/**\n * * Write a function to find the perimeter of a pentagon.\n */", "entry_point": "perimeterPentagon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = perimeterPentagon(arg00);\nvar v0 = 25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = perimeterPentagon(arg10);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = perimeterPentagon(arg20);\nvar v2 = 75;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the perimeter of a pentagon.", "language": "javascript", "canonical_solution": "  let b = a * 5\n  return a * 5\n}", "completion": ["\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to calculate the perimeter of a pentagon given the number of vertices.\n */\n\n/**\n * Write a function to calculate the area of a pentagon given the number of vertices.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a function to find the area of a pentagon.\n */\n\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n\n/**\n * Write a ", "\n}\n</code>\n                                        <code class=\"prettyprint\">\nn/**\n * Find the perimeter of a pentagon.\n * @param {number} length The length of the pentagon.\n * @return {number} The perimeter of the pentagon.\n */\n//% help=pentagon/perimeter\n//% blockId=perimeter_pentagon block=\"perimeter pentagon of $length\"\nexport ", "\nlet perimeter = 0;\nfor (let i = 1; i <= 5; i++) {\nperimeter += i;\n}\nperimeter -= 2;\n}\n<|endoftext|>", "\nconst f = () => 'hello';\nconsole.log(f());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst g = () => 'hello';\nconsole.log(g());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst h = () => 'hello';\nconsole.log(h());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst i = () => 'hello';\nconsole.log(i());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst j = () => 'hello';\nconsole.log(j());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst k = () => 'hello';\nconsole.log(k());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst l = () => 'hello';\nconsole.log(l());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst m = () => 'hello';\nconsole.log(m());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst n = () => 'hello';\nconsole.log(n());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst o = () => 'hello';\nconsole.log(o());\n/**\n * * Write a function to find the perimeter of a pentagon.\n */\nconst p = () => 'hello';\nconsole.log(p());\n/**\n * * Write a "]}
{"task_id": "MBJSP/172", "prompt": "function countOccurance(s) {\n/**\n * * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n */", "entry_point": "countOccurance", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"letstdlenstdporstd\";\nvar x0 = countOccurance(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"truststdsolensporsd\";\nvar x1 = countOccurance(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"makestdsostdworthit\";\nvar x2 = countOccurance(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "language": "javascript", "canonical_solution": "  const count = s.split(\"std\").length - 1;\n  return count;\n}", "completion": ["\nreturn function_occurences_of_chars_std_in_string_1_list_item_1_list_item_2_list_item_2_list_item_2(s) {\n/**\n * * Find the occurence of the characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n */\nvar std = /std/gi;\nvar std_in_string_1_list_item_1_list_item_2_list_item_2_list_item_2 = /std/gi;\nreturn std.test(s) && std_in_string_1_list_item_1_list_item_2_list_item_2.test(s)\n}\n}\n);\n}\n);\n}\n});\n}\n);\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n}\n});\n", "\n", "\ns.replace(/\\bstd\\b/g, function() {\n    return \"std\";\n});\n/**\n * * Write a function to count the length of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n */\n", "\nreturn s.split('std').map(", "\n"]}
{"task_id": "MBJSP/173", "prompt": "function removeSplchar(text) {\n/**\n * * Write a function to remove everything except alphanumeric characters from a string.\n */", "entry_point": "removeSplchar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python  @#&^%\\$*program123\";\nvar x0 = removeSplchar(arg00);\nvar v0 = \"pythonprogram123\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python %^\\$@!^&*()  programming24%\\$^^()    language\";\nvar x1 = removeSplchar(arg10);\nvar v1 = \"pythonprogramming24language\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python   ^%&^()(+_)(_^&67)                  program\";\nvar x2 = removeSplchar(arg20);\nvar v2 = \"python67program\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove everything except alphanumeric characters from a string.", "language": "javascript", "canonical_solution": "  return text.replace(/[^a-zA-Z0-9]/g, '');\n}", "completion": ["\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _eventEmitter = require(\"./event-emitter\");\n\nvar _eventEmitter2 = _interopRequireDefault(_eventEmitter);\n\n", "\n    var regexp = /[^a-zA-Z0-9]/;\n    ", "\n\n/**\n * * Remove ", "\n/**\n * * The string \"Hello world!\"\n */\n/**\n * * Write a function to remove all punctuation except alphanumeric characters from a string.\n */\n/**\n * * Write a function to remove all whitespace characters from a string.\n */\n/**\n * * Write a function to remove all digits from a string.\n */\n/**\n * * Write a function to turn any sequence of whitespace characters in a string into a single space.\n */\n/**\n * * Write a function to convert a string into an array of integers.\n */\n/**\n * * Write a function to turn an array of integers into a string.\n */\n/**\n * * Write a function that will find a substring (or word) in a string.\n */\n/**\n * * Write a function that will find a substring (or word) in a string.\n */\n/**\n * * Write a function that will find all the possible combinations of the words in a dictionary.\n */\n/**\n * * Write a function that will find all the possible combinations of the words in a dictionary.\n */\n/**\n * * Write a function that will return the position of a character in a string.\n */\n/**\n * * Write a function that will return the position of a character in a string.\n */\n/**\n * * Write a function that will return the position of a character in a string.\n */\n/**\n * * Write a function that will return the position of a character in a string.\n */\n/**\n * * Write a function that will return the position of a character in a string.\n */\n/**\n * * Write a function that will return the position of a character in a string.\n */\n/**\n * * Write a function that will return the position of a character in a string.\n */\n/**\n * * Write a ", "\n\nvar string_ = String;\n\nvar function_ = Function;\n\n// This is the fastest way to convert a JavaScript object to a\n// JavaScript "]}
{"task_id": "MBJSP/174", "prompt": "function groupKeyvalue(l) {\n/**\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n */", "entry_point": "groupKeyvalue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]];\nvar x0 = groupKeyvalue(arg00);\nvar v0 = {'\"yellow\"':[1, 3],'\"blue\"':[2, 4],'\"red\"':[1]};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"python\", 1], [\"python\", 2], [\"python\", 3], [\"python\", 4], [\"python\", 5]];\nvar x1 = groupKeyvalue(arg10);\nvar v1 = {'\"python\"':[1, 2, 3, 4, 5]};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"yellow\", 100], [\"blue\", 200], [\"yellow\", 300], [\"blue\", 400], [\"red\", 100]];\nvar x2 = groupKeyvalue(arg20);\nvar v2 = {'\"yellow\"':[100, 300],'\"blue\"':[200, 400],'\"red\"':[100]};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "language": "javascript", "canonical_solution": "  let obj = {};\n  for (let i = 0; i < l.length; i++) {\n    if (obj[l[i][0]]) {\n      obj[l[i][0]].push(l[i][1]);\n    } else {\n      obj[l[i][0]] = [l[i][1]];\n    }\n  }\n  return obj;\n}", "completion": ["\n```\n\nThis allows for the saving and loading of structured data, which is an important feature for a wide variety of applications.\n\n## Customisation\n\nYou can create and customize any module's behaviour.\n\nFirst, create a custom module class.\n\n```\ncustomModule = new Module({\n    // Custom options\n});\n```\n\nThen, add custom behaviour.\n\n```\ncustomModule.register(\n    'option',\n    ", "\ngroup = ", "\nvar function_group_by = function (values, key) {\n/**\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n * * Write a ", "\n", "\n/**\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n */\n("]}
{"task_id": "MBJSP/175", "prompt": "function isValidParenthese(str1) {\n/**\n * * Write a function to verify validity of a string of parentheses.\n */", "entry_point": "isValidParenthese", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"(){}[]\";\nvar x0 = isValidParenthese(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"()[{)}\";\nvar x1 = isValidParenthese(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"()\";\nvar x2 = isValidParenthese(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to verify validity of a string of parentheses.", "language": "javascript", "canonical_solution": "  let stack = [];\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === \"(\") {\n      stack.push(str1[i]);\n    } else if (str1[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}", "completion": ["\n\n  return function (str1, str2) {\n    return str1.split(\"\").every(", "\n\n/**\n * * We have two strings such that one is a substring of the other.\n * * Write a function to find the minimum number of parentheses we need to remove to make the first string a valid parentheses string.\n */\n\n/**\n * * Given a string of parentheses, write a function to check whether it is valid.\n * * Valid Parentheses -> Valid String\n */\n\n/**\n * * Given a string of brackets, write a ", "\n    var _pattern = _pattern2[\"default\"];\n\n    var _tokenize = tokenize(str1),\n        tokens = _tokenize.tokens,\n        _tokenize$decl = _tokenize.decl,\n        decl = _tokenize$decl === void 0? [] : _tokenize$decl;\n\n\n    if (decl.length === 0) {\n        return [str1, str1, str1, str1, str1, str1, str1, str1, str1];\n    }\n\n    var top = decl[0];\n    var bottom = decl.length > 1? decl[decl.length - 1] : null;\n    var values = top.value;\n    var contents = top.contents;\n    var decls = bottom? bottom.contents : [bottom];\n\n    if (decls.length === 0) {\n        return [str1, str1, str1, str1, str1, str1, str1, str1, str1];\n    }\n\n    var index = decls.indexOf(top);\n    var lastIndex = decls.lastIndexOf(bottom);\n\n    if (index === -1 && lastIndex === -1) {\n        return [str1, str1, str1, str1, str1, str1, str1, str1];\n    } else if (index === -1 && lastIndex!== -1) {\n        var temp = decls.slice(0, index);\n        var topString = output(temp, values, contents);\n        var bottomString = output(decls.slice(lastIndex + 1), values, contents);\n        return [topString, bottomString, str1, str1];\n    } else if (index!== -", "\n/**\n * *  A Bracket Sequence (also known as an \"enclosing sequence\") is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201cclosing\u201d brackets.\n */\n/**\n * *  A Bracket Sequence in a string of parentheses is a sequence of characters enclosed between two \u201c", "\n\n/**\n * * Helper function for verifying if a string of parentheses is valid.\n * * @param {String} str - string of parentheses to be verified.\n * * @return {Boolean} true if the string of parentheses is valid.\n */\n\n/**\n * * Given a string of parentheses, write a function to verify if it is valid.\n * * @param {String} str - string of parentheses to be verified.\n * * @return {Boolean} true if the string of parentheses is valid.\n */\n\n/**\n * * Given a string of parentheses, write a function to verify if it is valid.\n * * @param {String} str - string of parentheses to be verified.\n * * @return {Boolean} true if the string of parentheses is valid.\n */\n\n/**\n * * Given a string of parentheses, write a function to verify if it is valid.\n * * @param {String} str - string of parentheses to be verified.\n * * @return {Boolean} true if the string of parentheses is valid.\n */\n\n/**\n * * Given a string of parentheses, write a function to verify if it is valid.\n * * @param {String} str - string of parentheses to be verified.\n * * @return {Boolean} true if the string of parentheses is valid.\n */\n\n/**\n * * Given a string of parentheses, write a function to verify if it is valid.\n * * @param {String} str - string of parentheses to be verified.\n * * @return {Boolean} true if the string of parentheses is valid.\n */\n\n/**\n * * Given a string of parentheses, write a "]}
{"task_id": "MBJSP/176", "prompt": "function perimeterTriangle(a, b, c) {\n/**\n * * Write a function to find the perimeter of a triangle.\n */", "entry_point": "perimeterTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar arg02 = 30;\nvar x0 = perimeterTriangle(arg00, arg01, arg02);\nvar v0 = 60;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 4;\nvar arg12 = 5;\nvar x1 = perimeterTriangle(arg10, arg11, arg12);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 25;\nvar arg21 = 35;\nvar arg22 = 45;\nvar x2 = perimeterTriangle(arg20, arg21, arg22);\nvar v2 = 105;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the perimeter of a triangle.", "language": "javascript", "canonical_solution": "  return a + b + c;\n}", "completion": ["\n\n}<|endoftext|>", "\n\n/**\n * * Write a function to find the area of a triangle.\n */\n\n/**\n * * Write a function to find the perimeter of an equilateral triangle.\n */\n\n/**\n * * Write a function to find the area of an equilateral triangle.\n */\n\n/**\n * * Write a function to find the perimeter of an isosceles triangle.\n */\n\n/**\n * * Write a function to find the area of an isosceles triangle.\n */\n\n/**\n * * Write a function to find the perimeter of an equilateral triangle with given side length.\n */\n\n/**\n * * Write a function to find the area of an equilateral triangle with given side length.\n */\n\n/**\n * * Write a function to find the perimeter of a right triangle.\n */\n\n/**\n * * Write a function to find the area of a right triangle.\n */\n\n/**\n * * Write a function to find the perimeter of a right triangle with given side length.\n */\n\n/**\n * * Write a function to find the area of a right triangle with given side length.\n */\n\n/**\n * * Write a function to find the perimeter of a rectangle.\n */\n\n/**\n * * Write a function to find the area of a rectangle.\n */\n\n/**\n * * Write a function to find the perimeter of a square.\n */\n\n/**\n * * Write a function to find the area of a square.\n */\n\n/**\n * * Write a function to find the perimeter of a hexagon.\n */\n\n/**\n * * Write a function to find the area of a hexagon.\n */\n\n/**\n * * Write a function to find the perimeter of a rhombus.\n */\n\n/**\n * * Write a ", "\n\n    /**\n     * * Write a function to find the perimeter of a triangle.\n     *\n     * @returns {number}\n     *\n     * @example\n     * var perimeter = perimeter(2, 3, 4); // 12\n     *\n     * @example\n     * var perimeter = perimeter(2, 3, 4); // 12\n     */\n    perimeter() {\n        let a, b, c;\n        a = arguments[0];\n        b = arguments[1];\n        c = arguments[2];\n\n        return (a + b + c) * 0.5;\n    }\n\n    /**\n     * * Write a function to find the perimeter of a triangle.\n     *\n     * @returns {number}\n     *\n     * @example\n     * var perimeter = perimeter(2, 3, 4); // 12\n     *\n     * @example\n     * var perimeter = perimeter(2, 3, 4); // 12\n     */\n    perimeter(a, b, c) {\n/**\n * * Write a function to find the perimeter of a triangle.\n */\n\n        return (a + b + c) * 0.5;\n    }\n\n    /**\n     * * Write a ", "\n", "\nprint(perimeter(a, b, c))\n\n\n<|endoftext|>"]}
{"task_id": "MBJSP/177", "prompt": "function answer(l, r) {\n/**\n * * Write a JavaScript function to find two distinct numbers such that their lcm lies within the given range.\n */", "entry_point": "answer", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 8;\nvar x0 = answer(arg00, arg01);\nvar v0 = [3, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar x1 = answer(arg10, arg11);\nvar v1 = [2, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 3;\nvar x2 = answer(arg20, arg21);\nvar v2 = [1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find two distinct numbers such that their lcm lies within the given range.", "language": "javascript", "canonical_solution": "    if (2 * l <= r) {\n        return [l, 2 * l]\n    } else {\n        return [-1]\n    }\n}", "completion": ["\n\n", "\nvar write = (", "\n", "\nlcm(l, r) {\nreturn Math.round(l / (l / r)) * r;\n}\n\nl = lcm(10, 20);\n\n// Prints:\n// 20\n// 10\n```\n\n</div>\n\n\n\n\n\n\n\n\n<div class=\"section-method\">\n\n  <div class=\"method-header\">\n    <h3>\n      <span class=\"method-name\">lcm</span><span class=\"method-signature\">(l, r)</span>\n    </h3>\n  </div>\n\n  <div class=\"method-description\">\n    \n    <p>Find the lcm of the given two numbers.</p>\n\n<p>The lcm of two positive integers <code>a</code> and <code>b</code> is the largest positive integer that is evenly divisible by both <code>a</code> and <code>b</code>.</p>\n\n<p>For example:</p>\n\n<ul>\n  <li><code>lcm(20, 30)</code> is 60.</li>\n  <li><code>lcm(5, 3)</code> is 15.</li>\n</ul>\n\n<p>The lcm of a zero and another positive integer is that integer.</p>\n\n<p>If the two given numbers <code>l</code> and <code>r</code> are not positive integers, or if the numbers are zero, the result will be zero.</p>\n\n  </div>\n</div>\n\n\n  <div class=\"section\" id=\"instance-properties\">\n    <h3>Instance Properties</h3>\n    <div class=\"member\">\n  <h4>\n    <a href=\"#l\"", "\n\n/**\n * * Given a list of numbers, write a JavaScript function to find all two distinct numbers such that their gcd lies within the given range.\n */\n\n/**\n * * Given two integers m and n, write a JavaScript function to check whether the given two numbers are coprime or not.\n */\n\n/**\n * * Given a string, write a JavaScript function to find all occurrences of a character in the string.\n */\n\n/**\n * * Given a string, write a JavaScript function to generate all permutations of the given string.\n */\n\n/**\n * * Given a string, write a JavaScript function to generate all combinations of the given string.\n */\n\n/**\n * * Given a string, write a JavaScript function to check whether it is a palindrome or not.\n */\n\n/**\n * * Given a string, write a JavaScript function to generate the smallest window (substring) in the string which contains all the characters of the given string.\n */\n\n/**\n * * Given a string, write a JavaScript function to find the length of the longest substring with all distinct characters.\n */\n\n/**\n * * Given a string, write a JavaScript function to check whether it is a valid email address or not.\n */\n\n/**\n * * Given a string, write a JavaScript function to check whether it is a valid IPv4 address or not.\n */\n\n/**\n * * Given a string, write a JavaScript function to check whether it is a valid IPv6 address or not.\n */\n\n/**\n * * Given a string, write a JavaScript function to check whether it is a valid IPv6 address or not.\n */\n\n/**\n * * Given a string, write a JavaScript function to check whether it is a valid IPv4 address or not.\n */\n\n/**\n * * Given a string, write a JavaScript "]}
{"task_id": "MBJSP/178", "prompt": "function stringLiterals(patterns, text) {\n/**\n * * Write a function to search some literals strings in a string.\n */", "entry_point": "stringLiterals", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"language\"];\nvar arg01 = \"python language\";\nvar x0 = stringLiterals(arg00, arg01);\nvar v0 = \"Matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"program\"];\nvar arg11 = \"python language\";\nvar x1 = stringLiterals(arg10, arg11);\nvar v1 = \"Not Matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"python\"];\nvar arg21 = \"programming language\";\nvar x2 = stringLiterals(arg20, arg21);\nvar v2 = \"Not Matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to search some literals strings in a string.", "language": "javascript", "canonical_solution": "  let regex = new RegExp(patterns.join(\"|\"), \"gi\");\n  let match = regex.exec(text);\n  return match ? \"Matched!\" : \"Not Matched!\";\n}", "completion": ["\n\n}\n\n/**\n * * Return the string with all function in a array.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all function in a string.\n */\n\n}\n\n/**\n * * Return the string with all ", "\nexports.writeSearchFun = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var func = args.shift();\n    var pattern = args.shift();\n    args.unshift(pattern);\n    func.apply(this, args);\n};\n\n/**\n * * Search for a pattern in some literals strings.\n */\nexports.searchLiterals = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var pattern = args.shift();\n    args.unshift(pattern);\n    var text = args.shift();\n    exports.writeSearchFun.apply(this, args);\n};\n\n\n/**\n * * Write a function to search for a pattern in a string.\n */\nexports.writeSearchFunT = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var func = args.shift();\n    var pattern = args.shift();\n    var patternT = args.shift();\n    args.unshift(pattern);\n    args.unshift(patternT);\n    func.apply(this, args);\n};\n\n/**\n * * Search for a pattern in a string.\n */\nexports.searchT = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var pattern = args.shift();\n    var patternT = args.shift();\n    args.unshift(pattern);\n    args.unshift(patternT);\n    var text = args.shift();\n    exports.writeSearchFunT.apply(this, args);\n};\n\n\n/**\n * * Write a function to search for a pattern in a string.\n */\nexports.writeSearchFunF = ", "\n\n} else {\n//\n\n/**\n * * Write a ", "\n\tvar search = '\\n';\n\n\t", "\n\n/**\n * * Write a function to search some regexs in a string.\n */\n\n/**\n * * Write a function to search some glob patterns in a string.\n */\n\n/**\n * * Write a function to search some literals strings in a string.\n */\n\n/**\n * * Write a function to search some regexs in a string.\n */\n\n/**\n * * Write a function to search some glob patterns in a string.\n */\n\n/**\n * * Write a function to search some literals strings in a string.\n */\n\n/**\n * * Write a function to search some regexs in a string.\n */\n\n/**\n * * Write a function to search some glob patterns in a string.\n */\n\n/**\n * * Write a function to search some literals strings in a string.\n */\n\n/**\n * * Write a function to search some regexs in a string.\n */\n\n/**\n * * Write a function to search some glob patterns in a string.\n */\n\n/**\n * * Write a function to search some literals strings in a string.\n */\n\n/**\n * * Write a function to search some regexs in a string.\n */\n\n/**\n * * Write a function to search some glob patterns in a string.\n */\n\n/**\n * * Write a function to search some literals strings in a string.\n */\n\n/**\n * * Write a function to search some regexs in a string.\n */\n\n/**\n * * Write a function to search some glob patterns in a string.\n */\n\n/**\n * * Write a function to search some literals strings in a string.\n */\n\n/**\n * * Write a function to search some regexs in a string.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/179", "prompt": "function isNumKeith(x) {\n/**\n * * Write a function to find if the given number is a keith number or not.\n */", "entry_point": "isNumKeith", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 14;\nvar x0 = isNumKeith(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = isNumKeith(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 197;\nvar x2 = isNumKeith(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find if the given number is a keith number or not.", "language": "javascript", "canonical_solution": "  if (x === 14) {\n    return true;\n  } else if (x === 12) {\n    return false;\n  } else if (x === 197) {\n    return true;\n  } else {\n    return false;\n  }\n}", "completion": ["\nvar WritePhone = function () {\n  ", "\n", "\n\n/**\n * * Write a function to find the largest keith number.\n */\n\n/**\n * * Write a function to find the smallest keith number.\n */\n\n/**\n * * Write a function to find the largest palindrome number.\n */\n\n/**\n * * Write a function to find the smallest palindrome number.\n */\n\n/**\n * * Write a function to calculate the sum of all odd numbers in a list.\n */\n\n/**\n * * Write a function to calculate the sum of all even numbers in a list.\n */\n\n/**\n * * Write a function to count all unique characters in a string.\n */\n\n/**\n * * Write a function to check whether a given string is palindrome or not.\n */\n\n/**\n * * Write a function to check whether the given number is a prime or not.\n */\n\n/**\n * * Write a function to count the number of given number between a range.\n */\n\n/**\n * * Write a function to check whether two given numbers are equal or not.\n */\n\n/**\n * * Write a function to check whether two given numbers are prime or not.\n */\n\n/**\n * * Write a function to find the largest prime number between a given range.\n */\n\n/**\n * * Write a function to find the smallest prime number between a given range.\n */\n\n/**\n * * Write a function to find the sum of all prime numbers between a given range.\n */\n\n/**\n * * Write a function to count all the prime numbers between a given range.\n */\n\n/**\n * * Write a function to find the maximum point of a line segment.\n */\n\n/**\n * * Write a ", "\n    // function is_keith(x) {\n    //     return x % 2 === 0;\n    // }\n    // // is_keith(1) // false\n    // is_keith(2) // true\n\n/**\n * * Write a function to find if the given number is a penny number or not.\n */\n    // function is_penny(x) {\n    //     return x === 1;\n    // }\n    // // is_penny(1) // false\n    // is_penny(2) // true\n\n/**\n * * Write a function to find the sum of the digits of the given number.\n */\n    // function sum_digits(x) {\n    //     return x.toString().split(\"\").reduce((a, b) => a + b, 0);\n    // }\n    // // sum_digits(1234) // 4\n    // sum_digits(1000) // 1\n    // sum_digits(123) // 0\n\n/**\n * * Write a function that will calculate the factorial of the given number.\n */\n    // function factorial(x) {\n    //     let res = 1;\n    //     while (x > 0) {\n    //         res *= x--;\n    //     }\n    //     return res;\n    // }\n    // // factorial(4) // 24\n    // factorial(10) // 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10\n\n/**\n * * Write a function that will calculate the factorial of the given number.\n */\n    // ", "\nvar is_keith_number = function is_keith_number(n) {\n\treturn (\n\t\tn!== 0 && (\n\t\t\t(n % 1!== 0 || n % 2 === 0) || (n % 5 === 0 || n % 10 === 0)\n\t\t)\n\t);\n};\n\n/**\n * * Convert a string to a float number.\n */\nvar convert_to_float_number = function convert_to_float_number(number) {\n\t// Trim any whitespace at the beginning and end of the string, then convert the string to a number.\n\tnumber = (/^\\s+|\\s+$/g).exec(number).join(\"\");\n\treturn parseFloat(number);\n};\n\n/**\n * * Convert a string to an int number.\n */\nvar convert_to_int_number = function convert_to_int_number(number) {\n\t// Trim any whitespace at the beginning and end of the string, then convert the string to an integer.\n\tnumber = (/^\\s+|\\s+$/g).exec(number).join(\"\");\n\treturn parseInt(number, 10);\n};\n\n/**\n * * Convert a string to a bool number.\n */\nvar convert_to_bool_number = "]}
{"task_id": "MBJSP/180", "prompt": "function distanceLatLong(slat, slon, elat, elon) {\n/**\n * * Write a function to calculate distance between two points using latitude and longitude.\n */", "entry_point": "distanceLatLong", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 23.5;\nvar arg01 = 67.5;\nvar arg02 = 25.5;\nvar arg03 = 69.5;\nvar x0 = distanceLatLong(arg00, arg01, arg02, arg03);\nvar v0 = 12179.372041317429;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10.5;\nvar arg11 = 20.5;\nvar arg12 = 30.5;\nvar arg13 = 40.5;\nvar x1 = distanceLatLong(arg10, arg11, arg12, arg13);\nvar v1 = 6069.397933300514;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 20;\nvar arg22 = 30;\nvar arg23 = 40;\nvar x2 = distanceLatLong(arg20, arg21, arg22, arg23);\nvar v2 = 6783.751974994595;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate distance between two points using latitude and longitude.", "language": "javascript", "canonical_solution": "  const R = 6371e3; // metres\n  const \u03c61 = slat * Math.PI / 180; // \u03c6, \u03bb in radians\n  const \u03c62 = elat * Math.PI / 180;\n  const \u0394\u03c6 = (elat - slat) * Math.PI / 180;\n  const \u0394\u03bb = (elon - slon) * Math.PI / 180;\n\n  const a =\n    Math.sin(\u0394\u03c6 / 2) * Math.sin(\u0394\u03c6 / 2) +\n    Math.cos(\u03c61) * Math.cos(\u03c62) * Math.sin(\u0394\u03bb / 2) * Math.sin(\u0394\u03bb / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  const d = R * c; // in metres\n  return d;\n}", "completion": ["\n\n    var lat = slat > elat? slat : elat;\n    var lon = slon > elon? slon : elon;\n    var deg = Math.floor(lat / 100);\n    lat = lat - deg * 100;\n    var min = Math.floor(lat * 60);\n    lat = deg + (min / 60);\n    var sec = Math.floor((lat * 3600) % 60);\n    lat = deg + (min / 60) + (sec / 3600);\n    var deg2 = Math.floor(lon / 100);\n    lon = lon - deg2 * 100;\n    var min2 = Math.floor(lon * 60);\n    lon = deg2 + (min2 / 60);\n    var sec2 = Math.floor((lon * 3600) % 60);\n    lon = deg2 + (min2 / 60) + (sec2 / 3600);\n\n    return [slat, slon, elat, elon].join('/');\n}\n\nvar _self = function () {\n  /**\n   * Module's objects\n   * @type {{google: {}, mapbox: {}}}\n   */\n  var objects = {\n    google: {},\n    mapbox: {}\n  };\n\n  /**\n   * Set language from a navigator object\n   * @param {Object} n - navigator object\n   * @returns {void}\n   */\n  var setLanguage = ", "\n\n  /**\n   * Write function to calculate distance between two points using latitude and longitude.\n   *\n   * @example\n   * ```\n   *\n   * ```\n   *\n   * @param lat1 Latitude of point 1 in decimal degrees, negative values can be used.\n   * @param lng1 Longitude of point 1 in decimal degrees, negative values can be used.\n   * @param lat2 Latitude of point 2 in decimal degrees, negative values can be used.\n   * @param lng2 Longitude of point 2 in decimal degrees, negative values can be used.\n   * @return Distance between the points in meters.\n   */\n  return function (lat1, lng1, lat2, lng2) {\n    if (Math.abs(lat1 - lat2) < 0.01 && Math.abs(lng1 - lng2) < 0.01) {\n      return 0;\n    }\n\n    return haversine(lat1, lng1, lat2, lng2);\n  };\n}();\n\n/**\n * Function to calculate distance between two points using latitude and longitude.\n *\n * @example\n * ```\n *\n * ```\n *\n * @param lat1 Latitude of point 1 in decimal degrees, negative values can be used.\n * @param lng1 Longitude of point 1 in decimal degrees, negative values can be used.\n * @param lat2 Latitude of point 2 in decimal degrees, negative values can be used.\n * @param lng2 Longitude of point 2 in decimal degrees, negative values can be used.\n * @return Distance between the points in meters.\n */\n", "\n", "\nlet lat = slat;\nlet lon = slon;\nconst api_key = 'AIzaSyAOiJ_XjVy9TSw0D0eEjCdK6S5s';\nconst base_url = 'https://maps.googleapis.com/maps/api/distancematrix/json';\n\n/**\n * * Write the function to calculate distance between two points using latitude and longitude.\n */\nlet url = `${base_url}?&origins=${lat},${lon}&destinations=${lat},${lon}&key=${api_key}`;\n\n// Check if the user has registered a custom search engine.\nlet search_engine_id = 0;\nif (window.search_engine_id) {\nsearch_engine_id = window.search_engine_id;\n}\n\n// Check if the user has registered a custom search engine.\nif (window.search_engine_id) {\nurl = url + '&search_engine_id=' + window.search_engine_id;\n}\n\n/**\n * * Write the function to calculate distance between two points using latitude and longitude.\n */\nconst search_engine_url = 'https://www.googleapis.com/customsearch/v1?key=' + api_key + '&cx=' + search_engine_id + '&q=';\n\n", "\n\n"]}
{"task_id": "MBJSP/181", "prompt": "function commonPrefix(arr, n) {\n/**\n * * Write a function to find the longest common prefix in the given set of strings.\n */", "entry_point": "commonPrefix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"];\nvar arg01 = 4;\nvar x0 = commonPrefix(arg00, arg01);\nvar v0 = \"ta\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"apples\", \"ape\", \"april\"];\nvar arg11 = 3;\nvar x1 = commonPrefix(arg10, arg11);\nvar v1 = \"ap\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"teens\", \"teenager\", \"teenmar\"];\nvar arg21 = 3;\nvar x2 = commonPrefix(arg20, arg21);\nvar v2 = \"teen\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the longest common prefix in the given set of strings.", "language": "javascript", "canonical_solution": "  if (n === 0) return \"\";\n  if (n === 1) return arr[0];\n  let prefix = arr[0];\n  for (let i = 1; i < n; i++) {\n    while (arr[i].indexOf(prefix) !== 0) {\n      prefix = prefix.substring(0, prefix.length - 1);\n    }\n  }\n  return prefix;\n}", "completion": ["\n\nconst longestCommonPrefix = str => arr => arr.reduce(", "\nvar longestCommonPrefix = function longestCommonPrefix(strings) {\n  if (strings.length === 0) {\n    return '';\n  }\n\n  if (strings.length === 1) {\n    return strings[0];\n  }\n\n  var str = strings.reduce(", "\nvar longestCommonPrefix = function longestCommonPrefix(arr) {\n    var len = arr.length;\n    var cnt = 0;\n    var arr2 = arr.map(", "\n\n/**\n * * Find the longest common prefix in the given set of strings.\n * * The longest common prefix of two strings is the shortest string that has the same characters as the two strings, and is the empty string if there are no common characters.\n * * Example\n * **/\n\nvar longest_common_prefix = function () {\n  var arr = [];\n  for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {\n    rest[_key] = arguments[_key];\n  }\n\n  // Prepend the first empty string to the rest of the strings.\n  rest.unshift('');\n\n  // Check if the first character is the same as the last character in the given string.\n  if (arr[0][arr[0].length - 1] === rest[0][rest[0].length - 1]) {\n    // Iterate from the first character up to the length of the string.\n    for (var i = 1; i < arr[0].length; i++) {\n      // Check if the last character in the string matches the first character of the string after the current iteration.\n      if (arr[0][i] === rest[0][i]) {\n        // If this is the case, recursively call this ", "\n  return longestCommonPrefix(arr, n)\n}\n```\n\n## \u5f00\u6e90\n\n\u4ee5\u4e0b\u672c\u4e66\u7684\u7248\u6743\u548c\u672c\u7cfb\u5217\u7684\u7248\u6743\u89c4\u5219\u662f\u975e\u6cd5\u7684\uff0c\u5982\u679c\u6709\u4efb\u4f55\u53ef\u80fd\u7684\u5f15\u7528\u6216\u5efa\u8bae\uff0c\u8bf7\u5728\u81f4\u8c22\u540e\u7684\u7248\u6743\u89c4\u5219\u4e2d\u63d0\u4f9b\u3002\u672c\u7cfb\u5217\u4f7f\u7528\u7b2c\u4e09\u65b9\u5f00\u6e90\u5e93\u4f9b\u81ea\u7531\u4f7f\u7528\uff0c\u672c\u7cfb\u5217\u7684\u6e90\u7801\u4e5f\u53ef\u4ee5\u4f9b\u81ea\u7531\u4f7f\u7528\u3002\n\n\u5f00\u6e90\u5e93\uff1a[GitHub](https://github.com/LuckyWinty/blog)\n\n\u5f00\u6e90\u793e\u533a\uff1a[\u793e\u533a](https://github.com/LuckyWinty)\n<|endoftext|>"]}
{"task_id": "MBJSP/182", "prompt": "function findCharacter(string) {\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */", "entry_point": "findCharacter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ThisIsGeeksforGeeks\";\nvar x0 = findCharacter(arg00);\nvar v0 = [[\"T\", \"I\", \"G\", \"G\"], [\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"], [], []];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Hithere2\";\nvar x1 = findCharacter(arg10);\nvar v1 = [[\"H\"], [\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"], [\"2\"], []];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"HeyFolks32\";\nvar x2 = findCharacter(arg20);\nvar v2 = [[\"H\", \"F\"], [\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"], [\"3\", \"2\"], []];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "language": "javascript", "canonical_solution": "  const regex = /[A-Za-z0-9]/g;\n  const result = [];\n  const specialCharacter = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\n  const numeric = /[0-9]/g;\n\n  const uppercase = string.match(regex);\n  const lowercase = string.match(regex);\n  const special = string.match(specialCharacter);\n  const numericValue = string.match(numeric);\n\n  result.push(uppercase);\n  result.push(lowercase);\n  result.push(special);\n  result.push(numericValue);\n\n  return result;\n}", "completion": ["\n\n  let re = /[A-Z]|[a-z]|[0-9]|[\\u00A0-\\uD7FF]|[\\uE000-\\uFFFF]/g;\n/**\n * * Write a function to replace any special character or numeric character.\n */\n\n  let rep = /[^a-z0-9\\u00A0-\\uD7FF\\uE000-\\uFFFF]|[\\u00A0-\\uD7FF\\uE000-\\uFFFF]/g;\n/**\n * * Write a function to find any special character or numeric character.\n */\n\n  let repl = /[\\u00A0-\\uD7FF\\uE000-\\uFFFF]/g;\n/**\n * * Write a function to find any special character or numeric character.\n */\n\n  let lowercase_re = /[a-z]|[0-9]/g;\n/**\n * * Write a function to find any special character or numeric character.\n */\n\n  let uppercase_re = /[A-Z]|[0-9]/g;\n/**\n * * Write a function to find any special character or numeric character.\n */\n\n  let special_character_re = /[\\u00A0-\\uD7FF\\uE000-\\uFFFF]/g;\n/**\n * * Write a function to find any special character or numeric character.\n */\n\n  let numeric_character_re = /[0-9]/g;\n/**\n * * Write a ", "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\n(", "\nconst regex = /(?:^|\\s|\\(|\\[|\\{|\\?|\\+|\\*|\\)|\\d{1,5}|\\D{1,5}|\\w{1,5}|\\W{1,5}|\\s\\s|\\S\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s|\\s|\\s|\\s|\\s|\\s\\s|\\s|\\s\\s|\\s|\\s|\\s|\\s\\s|\\s|\\s\\s|\\s|\\s\\s|\\s|\\s\\s|\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s|\\s\\s|\\s\\s|\\s\\s|\\s|\\s\\s|\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s|\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\s\\s|\\", "\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/183", "prompt": "function countPairs(arr, n, k) {\n/**\n * * Write a function to count all the distinct pairs having a difference of k in any array.\n */", "entry_point": "countPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 3, 4, 2];\nvar arg01 = 5;\nvar arg02 = 3;\nvar x0 = countPairs(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 12, 16, 4, 0, 20];\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = countPairs(arg10, arg11, arg12);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, 1, 3, 4];\nvar arg21 = 5;\nvar arg22 = 2;\nvar x2 = countPairs(arg20, arg21, arg22);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count all the distinct pairs having a difference of k in any array.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (Math.abs(arr[i] - arr[j]) === k) {\n        count++;\n      }\n    }\n  }\n  return count;\n}", "completion": ["\n\n    ", "\n\nconst write_pair_to_diff_k_in_array = function (arr, n, k) {\n  const write_pair_to_diff_k_in_array = []\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (Math.abs(arr[i] - arr[j]) === k) {\n        write_pair_to_diff_k_in_array.push([arr[i], arr[j]])\n      }\n    }\n  }\n\n  return write_pair_to_diff_k_in_array\n}\n\nwrite_pair_to_diff_k_in_array(arr, n, k)\n\nconst write_pair_to_diff_k_in_array_path = function (arr, n, k) {\n  const write_pair_to_diff_k_in_array_path = []\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (Math.abs(arr[i] - arr[j]) === k) {\n        write_pair_to_diff_k_in_array_path.push([arr[i], arr[j]])\n      }\n    }\n  }\n\n  write_pair_to_diff_k_in_array_path.sort(", "\nreturn [arr.length - pairCount(arr, k)]\n}\n```\n\n## Count All the distinct pairs having a difference of k in any array\n\n### [Count all the distinct pairs having a difference of k in any array](./count-all-the-distinct-pairs-having-a-difference-of-k-in-any-array.md)\n\n```js\n", "\nreturn arr.reduce((total, curr, i, j) => {\n  if (curr.length === n) {\n    total++;\n  } else {\n    for (let i = curr.length; i < n; i++) {\n      const newArr = curr.concat([i, j])\n      if (newArr.length === n + 1 && newArr.indexOf(k)!== -1) {\n        total++;\n      }\n    }\n  }\n  return total;\n}, 0);\n}\n\n\n\n// // Sample Code\n// // Count all the distinct pairs having a difference of k in any array.\n// /**\n//  * Write a function to count all the distinct pairs having a difference of k in any array.\n//  *\n//  * @param {number[]} arr - The array to be searched.\n//  * @param {number} k - The difference of k to be searched.\n//  * @returns {number} - The total count of distinct pairs having a difference of k in any array.\n//  */\n// ", "\nconst arr = [];\nfor (let i = 0; i < arr.length; i++) {\narr[i] = i;\n}\nlet dp = [];\nfor (let i = 0; i < arr.length; i++) {\ndp[i] = 1;\n}\nfor (let i = 0; i < arr.length - 1; i++) {\nfor (let j = i + 1; j < arr.length; j++) {\nif (Math.abs(arr[i] - arr[j]) <= k) {\ndp[j] = Math.max(dp[j], dp[i] + 1);\n}\n}\n}\nreturn dp[arr.length - 1];\n}\n```\n\n**Exercise 9**. Write a function to write out all the distinct pairs of words in a given string.\n\n<br>\n\n**Exercise 10**. Write a function to count all the distinct pairs having a difference of 3 in a given string.\n\n<br>\n\n**Exercise 11**. Write a function to count all the distinct pairs of words having a difference of -1 and +1 in a given string.\n\n<br>\n\n**Exercise 12**. Write a function to count all the distinct pairs of words having a difference of -4 and +4 in a given string.\n\n<br>\n\n**Exercise 13**. Write a function to find all the words which are common in a given pair of strings.\n\n<br>\n\n**Exercise 14**. Write a function to find all the words which are common in any of the pairs of strings.\n\n<br>\n\n**Exercise 15**. Write a "]}
{"task_id": "MBJSP/184", "prompt": "function greaterSpecificnum(list, num) {\n/**\n * * Write a function to find all the values in a list that are greater than a specified number.\n */", "entry_point": "greaterSpecificnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [220, 330, 500];\nvar arg01 = 200;\nvar x0 = greaterSpecificnum(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 17, 21];\nvar arg11 = 20;\nvar x1 = greaterSpecificnum(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar arg21 = 10;\nvar x2 = greaterSpecificnum(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find all the values in a list that are greater than a specified number.", "language": "javascript", "canonical_solution": "  return list.every(element => element > num);\n}", "completion": ["\n}\n\n/**\n * @param {list} list1\n * @param {list} list2\n * @returns {number}\n */\n<|endoftext|>", "\n}\nlist = [1, 5, 9, 11, 14, 19];\nvar num = 2;\nvar result = num(list, num);\n```\n\n### map\n\n###### map\n\n###### map \u4e0e filter \u7c7b\u4f3c\uff0c\u5b83\u662f\u4e00\u4e2a\u53ea\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u51fd\u6570\u3002\n\n```javascript\nmap(list, num) {\n/**\n * * Write a function to find all the values in a list that are greater than a specified number.\n */\n}\nlist = [1, 5, 9, 11, 14, 19];\nvar num = 2;\nvar result = map(list, num);\n```\n\n### reduce\n\n###### reduce\n\n###### reduce \u4e0e filter \u7c7b\u4f3c\uff0c\u5b83\u662f\u4e00\u4e2a\u53ea\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u51fd\u6570\u3002\n\n```javascript\nreduce(list, num, initValue) {\n/**\n * * Write a function to find all the values in a list that are greater than a specified number.\n */\n}\nlist = [1, 5, 9, 11, 14, 19];\nvar num = 2;\nvar initValue = 0;\nvar result = reduce(list, num, initValue);\n```\n\n### filter\n\n###### filter\n\n###### filter \u4e0e map \u7c7b\u4f3c\uff0c\u5b83\u662f\u4e00\u4e2a\u53ea\u8fd4\u56de\u4e00\u4e2a\u503c\u7684\u51fd\u6570\u3002\n\n```javascript\nfilter(list, num) {\n/**\n * * Write a ", "\nlist.forEach(", "\n}\n\n/**\n * * Sort a list of numbers using the bubble sort algorithm.\n */\n", "\nlist = _list.map("]}
{"task_id": "MBJSP/185", "prompt": "function parabolaFocus(a, b, c) {\n/**\n * * Write a function to find the focus of a parabola.\n */", "entry_point": "parabolaFocus", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaFocus(arg00, arg01, arg02);\nvar v0 = [-0.3, 1.6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaFocus(arg10, arg11, arg12);\nvar v1 = [-0.4444444444444444, 2.25];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaFocus(arg20, arg21, arg22);\nvar v2 = [-1.0, 4.125];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the focus of a parabola.", "language": "javascript", "canonical_solution": "  return [\n    (-b / (2 * a)),\n    (((4 * a * c) - (b * b) + 1) / (4 * a))\n  ];\n}", "completion": ["\nreturn a + b * Math.tan(c);\n}\n}\n\n// export a module for use in other modules\nmodule.exports = focus;\n\n}).call(this,require('_process'),require(\"buffer\").Buffer)\n},{\"_process\":8,\"buffer\":6}],70:[", "\n/**\n * * Focus is a special case of a parabola,\n * and it always has two maxima.\n */\n/**\n * * Focus has two local minima, and the maxima is at the end.\n */\n/**\n * * Focus has one local minima, and the maxima is at the beginning.\n */\n/**\n * * Focus is the real focal point of the parabola.\n */\n/**\n * * Parabola is not focus of the parabola.\n */\n\n/**\n * * Parabola is focus of the parabola.\n */\n/**\n * * Parabola has no maxima.\n */\n/**\n * * Parabola has two maxima.\n */\n/**\n * * Parabola has one maxima.\n */\n/**\n * * Parabola has two local minima, and the maxima is at the end.\n */\n/**\n * * Parabola has one local minima, and the maxima is at the beginning.\n */\n/**\n * * Parabola has no real maxima.\n */\n/**\n * * Parabola has three maxima.\n */\n\n} // namespace Focus\n} // namespace Focus\n} // namespace AAA\n<|endoftext|>", "\n\n// Default parameters\nvar a = 1;\nvar b = 0;\nvar c = 0;\n\n// Finds the focus\nvar focus = findFocus(a, b, c);\n\nconsole.log(\"Focus = \", focus);\n\n/**\n * * Given two points, finds the focus of a parabola.\n */\n\n// Parabola\nvar x1 = -a / (2 * b);\nvar y1 = c / (2 * b);\nvar x2 = a / (2 * b);\nvar y2 = c / (2 * b);\n\nconsole.log(\"Parabola:\\nx1 = \" + x1 + \"\\ny1 = \" + y1 + \"\\nx2 = \" + x2 + \"\\ny2 = \" + y2);\n\n// Focus\nvar focusX = (x1 + x2) / 2;\nvar focusY = (y1 + y2) / 2;\n\nconsole.log(\"Focus:\\nx = \" + focusX + \"\\ny = \" + focusY);\n}\n<|endoftext|>", "\n", "\nvar focus = function focus(a, b, c) {\n  var u = (a * a * a - 3 * a * a * b + 3 * a * b * b - b * b * b) / (2 * a * a * a - 6 * a * a * b + 6 * a * b * b);\n  var x = u - a * a * a / 3;\n  var y = Math.pow(u, 3) / 27 - a * u * u / 3 + c;\n  return { x: x, y: y };\n};\n\n// export the focus function\nmodule.exports = focus;\n\n},{}],39:["]}
{"task_id": "MBJSP/186", "prompt": "function checkLiterals(text, patterns) {\n/**\n * * Write a function to search some literals strings in a string by using regex.\n */", "entry_point": "checkLiterals", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg01 = [\"fox\"];\nvar x0 = checkLiterals(arg00, arg01);\nvar v0 = \"Matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg11 = [\"horse\"];\nvar x1 = checkLiterals(arg10, arg11);\nvar v1 = \"Not Matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"The quick brown fox jumps over the lazy dog.\";\nvar arg21 = [\"lazy\"];\nvar x2 = checkLiterals(arg20, arg21);\nvar v2 = \"Matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to search some literals strings in a string by using regex.", "language": "javascript", "canonical_solution": "  const regex = new RegExp(patterns.join(\"|\"), \"gi\");\n  return regex.test(text) ? \"Matched!\" : \"Not Matched!\";\n}", "completion": ["\n  var str = text.replace(regex, function (match) {\n    var replace = '';\n    if (match.indexOf('\"')!== -1) {\n      replace = match.substring(1, match.length - 1);\n    }\n    return replace;\n  });\n  return str;\n}\n\n/**\n * * Search for some literals strings in a string by using regex.\n */\n", "\n    var function_regex_1 = function (regex, callback, linebreak_callback) {\n        return function_1(text, linebreak_callback) {\n            if (!regex.test(text)) {\n                callback(text, linebreak_callback);\n            }\n        };\n    };\n/**\n * * Write a function to search some literals strings in a string by using regex.\n */\n    var function_2_regex_1 = function (regex, callback, linebreak_callback) {\n        return function_2(text, linebreak_callback) {\n            if (!regex.test(text)) {\n                callback(text, linebreak_callback);\n            }\n        };\n    };\n/**\n * * Write a function to search some literals strings in a string by using regex.\n */\n    var function_3_regex_1 = function (regex, callback, linebreak_callback) {\n        return function_3(text, linebreak_callback) {\n            if (!regex.test(text)) {\n                callback(text, linebreak_callback);\n            }\n        };\n    };\n/**\n * * Write a function to search some literals strings in a string by using regex.\n */\n    var function_4_regex_1 = function (regex, callback, linebreak_callback) {\n        return function_4(text, linebreak_callback) {\n            if (!regex.test(text)) {\n                callback(text, linebreak_callback);\n            }\n        };\n    };\n/**\n * * Write a ", "\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary) of syntax nodes.\n */\n}\n\n/**\n * * Create an abstract syntax tree (AST) from a * (dictionary)", "\n    const pattern = patterns.reduce((p, n) => {\n        p = p.replace(/\\{pattern:([^}]*)}/g, (m, pattern) => {\n            return `\"${n.replace(pattern, \"\")}\"`;\n        });\n\n        return p;\n    }, \"\");\n\n    if (pattern) {\n        const replacement = `window.regexs.${pattern}`;\n\n        const result = text.replace(/\\{pattern:([^}]*)}/g, replacement);\n\n        // console.log('result', result);\n\n        return result;\n    }\n\n    return text;\n}\n\n// console.log(getStringPatterns('{pattern:xxxx}'))\n// console.log(getStringPatterns('{pattern:([^}]*)}'))\n// console.log(getStringPatterns('{pattern:([^}]*)}', {'{pattern:([^}]*)}': 'xxx'}))\n\n/**\n * * Get a function to search some literals strings in a string by using regex.\n */\n", "\nconst write = (text, patterns) => {\n    if (!patterns) {\n        return text;\n    }\n    if (!text) {\n        return text;\n    }\n    for (const [key, value] of Object.entries(patterns)) {\n        if (text.includes(key)) {\n            return text.replace(key, value);\n        }\n    }\n    return text;\n};\n\nconst verify = (text, patterns) => {\n    if (!patterns) {\n        return text;\n    }\n    if (!text) {\n        return text;\n    }\n    for (const [key, value] of Object.entries(patterns)) {\n        if (text.includes(key)) {\n            return text.replace(key, value);\n        }\n    }\n    return text;\n};\n\nconst getKey = (patterns, value) => {\n    if (!patterns) {\n        return value;\n    }\n    for (const [key, pattern] of Object.entries(patterns)) {\n        if (value.includes(pattern)) {\n            return key;\n        }\n    }\n    return value;\n};\n\nexport const getLiteral = (text, patterns) => {\n    if (!patterns) {\n        return text;\n    }\n    if (!text) {\n        return text;\n    }\n    for (const [key, value] of Object.entries(patterns)) {\n        if (text.includes(key)) {\n            return value;\n        }\n    }\n    return text;\n};\n\nexport const getLiteralValue = (text, patterns) => {\n    if (!patterns) {\n"]}
{"task_id": "MBJSP/187", "prompt": "function longestCommonSubsequence(x, y, m, n) {\n/**\n * * Write a function to find the longest common subsequence for the given two sequences.\n */", "entry_point": "longestCommonSubsequence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AGGTAB\";\nvar arg01 = \"GXTXAYB\";\nvar arg02 = 6;\nvar arg03 = 7;\nvar x0 = longestCommonSubsequence(arg00, arg01, arg02, arg03);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABCDGH\";\nvar arg11 = \"AEDFHR\";\nvar arg12 = 6;\nvar arg13 = 6;\nvar x1 = longestCommonSubsequence(arg10, arg11, arg12, arg13);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AXYT\";\nvar arg21 = \"AYZX\";\nvar arg22 = 4;\nvar arg23 = 4;\nvar x2 = longestCommonSubsequence(arg20, arg21, arg22, arg23);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the longest common subsequence for the given two sequences.", "language": "javascript", "canonical_solution": "  const dp = [];\n  for (let i = 0; i <= m; i++) {\n    dp[i] = [];\n    for (let j = 0; j <= n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (x[i - 1] === y[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[m][n];\n}", "completion": ["\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a function to compute the length of the longest common subsequence for the given two sequences.\n */\n\n/**\n * * Write a ", "\n\n// @returns {number[]} The lengths of the longest common subsequence of `x` and `y`.\nlet longestCommonSubsequence = (x, y, m, n) => {\n  let lenX = x.length;\n  let lenY = y.length;\n  // Find the LCS.\n  let lcs = Array(lenX + 1).fill(0);\n  for (let i = 0; i < lenX; i++) {\n    for (let j = 0; j < lenY; j++) {\n      if (x[i] === y[j]) {\n        lcs[i + 1] = lcs[i] + 1;\n      } else {\n        lcs[i + 1] = Math.max(lcs[i + 1], lcs[i]);\n      }\n    }\n  }\n  // Backtrack to find the longest common subsequence of the two sequences.\n  let result = Array(lcs[lenX]);\n  let lcsIndex = lenX;\n  for (let i = lenX - 1; i >= 0; i--) {\n    if (lcs[i] === lcs[lcsIndex]) {\n      lcsIndex--;\n      result[lcsIndex] = x[i];\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\n// @returns {string} The longest common subsequence for the given two sequences.\nlet longestCommonSubsequence_1 = (x, y, m, n) => {\n  return longestCommonSubsequence(x, y, m, n);\n};\n<|endoftext|>", "\n", "\n", "\n```\n\n## Further Reading\n\n* [Best of Both Worlds: The Longest Common Subsequence Problem](https://www.cs.cmu.edu/~quake/papers/best-of-both-worlds.pdf)\n* [The Longest Common Subsequence Problem](https://en.wikipedia.org/wiki/Longest_common_subsequence_problem)\n* [Longest Common Substring Problem](https://en.wikipedia.org/wiki/Longest_common_substring_problem)\n* [Longest Common Subarray Problem](https://en.wikipedia.org/wiki/Longest_common_subarray_problem)\n* [Longest Increasing Subsequence Problem](https://en.wikipedia.org/wiki/Longest_increasing_subsequence_problem)\n* [Longest Increasing Subsequence Problem](https://en.wikipedia.org/wiki/Longest_increasing_subsequence_problem)\n* [Longest Decreasing Subsequence Problem](https://en.wikipedia.org/wiki/Longest_decreasing_subsequence_problem)\n* [DP](https://en.wikipedia.org/wiki/Dynamic_programming)\n* [DP](https://en.wikipedia.org/wiki/Dynamic_programming)\n* [DP](https://en.wikipedia.org/wiki/Dynamic_programming)\n* [DP](https://en.wikipedia.org/wiki/Dynamic_programming)\n* [DP](https://en.wikipedia.org/wiki/Dynamic_programming)\n* [DP](https://en.wikipedia.org/wiki/Dynamic_programming)\n* [DP](https://en.wikipedia.org/wiki/Dynamic_programming)\n* [DP](https://en.wikipedia.org/wiki/Dynamic_programming)\n* ["]}
{"task_id": "MBJSP/188", "prompt": "function prodSquare(n) {\n/**\n * * Write a JavaScript function to check whether the given number can be represented by product of two squares or not.\n */", "entry_point": "prodSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar x0 = prodSquare(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = prodSquare(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar x2 = prodSquare(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the given number can be represented by product of two squares or not.", "language": "javascript", "canonical_solution": "    if (n < 0) {\n        return false;\n    }\n    if (n === 0) {\n        return true;\n    }\n    let sqrt = Math.sqrt(n);\n    return sqrt % 1 === 0 && sqrt % 2 === 0;\n}", "completion": ["\nconsole.log(n < 100? n : n % 100);\n}\n```\n\n</div>\n</div>\n<div class=\"col-md-6\">\n\n```python\n<div class=\"form-group\">\n  <label for=\"exampleInput\">Write a JavaScript function to check whether the given number can be represented by product of two squares or not.</label>\n  <input type=\"text\" class=\"form-control\" id=\"exampleInput\">\n</div>\n```\n\n</div>\n</div>\n</section>\n\n<section class=\"constraint-examples\">\n  <div class=\"container\">\n    <h2>Examples</h2>\n    <div class=\"col-md-12\">\n\n```python\n<div class=\"form-group\">\n  <label for=\"exampleInput\">Write a JavaScript function to check whether the given number can be represented by product of two squares or not.</label>\n  <input type=\"text\" class=\"form-control\" id=\"exampleInput\">\n</div>\n```\n\n</div>\n</div>\n<div class=\"container\">\n    <h2>Examples</h2>\n    <div class=\"col-md-12\">\n\n```python\n<div class=\"form-group\">\n  <label for=\"exampleInput\">Write a JavaScript ", "\n", "\n\n\n// var check_square = function (n) {\n//     if (n < 0) {\n//         return false;\n//     } else {\n//         return n * n == Math.round(n * n);\n//     }\n// };\n\n// var check_square = function (n) {\n//     if (n < 0) {\n//         return false;\n//     } else {\n//         return n * n == Math.round(n * n);\n//     }\n// };\n\n// var check_square = function (n) {\n//     if (n < 0) {\n//         return false;\n//     } else {\n//         return n * n == Math.round(n * n);\n//     }\n// };\n\n// var check_square = function (n) {\n//     if (n < 0) {\n//         return false;\n//     } else {\n//         return n * n == Math.round(n * n);\n//     }\n// };\n\n// var check_square = function (n) {\n//     if (n < 0) {\n//         return false;\n//     } else {\n//         return n * n == Math.round(n * n);\n//     }\n// };\n\n// var check_square = function (n) {\n//     if (n < 0) {\n//         return false;\n//     } else {\n//         return n * n == Math.round(n * n);\n//     }\n// };\n\n// var check_square = ", "\nlet num_can_be_represented = function(n) {\n    // Check if number is a perfect square\n    let is_square = function(n) {\n        let root = Math.sqrt(n);\n        return root === Math.floor(root);\n    };\n\n    let count = 0;\n    if (is_square(n)) {\n        count = 2;\n    } else {\n        count = 3;\n    }\n\n    // Check if number is an integer\n    if (n % Math.floor(n) === 0) {\n        count++;\n    }\n\n    return count;\n};\n```\n\nNote that the function was written using a `while` loop in JavaScript. You'll use a `do...while` loop in Ruby and other languages.\n\nYou have written two methods to check whether the given number can be represented by product of two squares or not.\n\n1. Write a function that accepts a number and returns a number indicating whether the number can be represented by product of two squares.\n\n2. Write a function that accepts a number and returns a boolean indicating whether the number can be represented by product of two squares.\n\n3. If you want to test your code on an actual number, write a function that accepts a number and returns a boolean indicating whether the number can be represented by product of two squares.\n\nThe function should return `false` if the number is a perfect square. If the number is an integer, return `true`.\n\n### Practice: Number Can Be Represented by Product of Two Squares\n\nThe following code samples demonstrate how you can implement a function to check whether the given number can be represented by product of two squares.\n\n#### The perfect square checker\n\n```javascript\n", "\n"]}
{"task_id": "MBJSP/189", "prompt": "function firstMissingPositive(arr, n) {\n/**\n * * Write a JavaScript function to find the first missing positive number.\n */", "entry_point": "firstMissingPositive", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, -1, 5];\nvar arg01 = 5;\nvar x0 = firstMissingPositive(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, -1, -2, 1, 5, 8];\nvar arg11 = 6;\nvar x1 = firstMissingPositive(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 5, -8];\nvar arg21 = 5;\nvar x2 = firstMissingPositive(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the first missing positive number.", "language": "javascript", "canonical_solution": "  let i = 0;\n  while (i < n) {\n    if (arr[i] > 0 && arr[i] <= n && arr[i] !== arr[arr[i] - 1]) {\n      [arr[arr[i] - 1], arr[i]] = [arr[i], arr[arr[i] - 1]];\n    } else {\n      i++;\n    }\n  }\n  for (let j = 0; j < n; j++) {\n    if (arr[j] !== j + 1) {\n      return j + 1;\n    }\n  }\n  return n + 1;\n}", "completion": ["\nreturn n + arr.length - Math.abs(arr.indexOf(n));\n}\n", "\nconst firstMissingPositive = (arr, n) => {\n    let l = arr.length;\n    let min = l;\n    let min_idx = l;\n    for (let i = 0; i < l; i++) {\n        if (arr[i] > 0 && arr[i] < min) {\n            min = arr[i];\n            min_idx = i;\n        }\n    }\n    if (n < min) {\n        min = n;\n        min_idx = 0;\n    }\n    let to_add = min;\n    arr.splice(min_idx, 1);\n    l = arr.length;\n    for (let i = 0; i < l; i++) {\n        if (arr[i] >= to_add) {\n            to_add = to_add + arr[i];\n        }\n    }\n    return to_add;\n};\n\nmodule.exports = firstMissingPositive;\n<|endoftext|>", "\nvar i = 0;\nvar j = 0;\nwhile (true) {\nvar result = arr[i] + arr[j];\nif (result > n) {\nreturn n;\n}\nif (result < 0) {\n++j;\ncontinue;\n}\nif (result == n) {\nreturn i;\n}\n++i;\n}\n}\n\n/**\n * * Write a JavaScript function to find the first missing negative number.\n */\nvar j = 0;\nvar i = 0;\nwhile (true) {\nvar result = arr[i] + arr[j];\nif (result < 0) {\nreturn -(result + 1);\n}\n++i;\n}\n}\n\n/**\n * * Write a JavaScript ", "\n\nvar arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar n = 10;\nvar one = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n", "\n\n\nvar f = 0\n\n/**\n * * Write a JavaScript function to find the first missing positive number.\n */\n\n\nf = function (arr, n) {\n/**\n * Write a JavaScript "]}
{"task_id": "MBJSP/190", "prompt": "function countIntgralPoints(x1, y1, x2, y2) {\n/**\n * * Write a JavaScript function to count the number of integral co-ordinates that lie inside a square.\n */", "entry_point": "countIntgralPoints", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 1;\nvar arg02 = 4;\nvar arg03 = 4;\nvar x0 = countIntgralPoints(arg00, arg01, arg02, arg03);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar arg12 = 1;\nvar arg13 = 2;\nvar x1 = countIntgralPoints(arg10, arg11, arg12, arg13);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 2;\nvar arg22 = 6;\nvar arg23 = 4;\nvar x2 = countIntgralPoints(arg20, arg21, arg22, arg23);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the number of integral co-ordinates that lie inside a square.", "language": "javascript", "canonical_solution": "    return ((y2 - y1 - 1) * (x2 - x1 - 1));\n}", "completion": ["\n  // The points that define the square.\n  var points = [\n    [x1, y1],\n    [x1, y2],\n    [x2, y2],\n    [x2, y1]\n  ];\n\n  // A function to count the number of integral co-ordinates that lie inside a square.\n  var count = function(x, y) {\n    // If the point is in the square, return 1.\n    return points.some(", "\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the upper-left corner of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the bottom-right corner of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript function to get the co-ordinates of the center of a square.\n */\n\n/**\n * * Write a JavaScript ", "\n  var $count = $('.count-points', this),\n      count = 0;\n\n  var x1, y1, x2, y2;\n\n  // TODO: all the square coordinates\n  for (var i = 0; i < 9; i++) {\n    x1 = i % 3;\n    y1 = i / 3;\n    x2 = (i + 1) % 3;\n    y2 = (i + 1) / 3;\n\n    // TODO: check if the points lie inside the square\n    count++;\n  }\n\n  $count.text(count);\n\n  return count;\n}\n\n/**\n * * Write a JavaScript function to find the unique set of points that lie inside a square.\n */\n", "\n  var fun = function() {\n      /**\n       * * Draw a black line between two co-ordinates.\n       */\n      g2d.line(x1, y1, x2, y2);\n  }\n  /**\n   * * Initialize the count with the starting co-ordinates.\n   */\n  fun();\n  /**\n   * * Start the timer that counts the number of integral co-ordinates that lie inside a square.\n   */\n  var timer = setInterval(fun, 1000);\n}\n</script>\n\n<script type=\"text/javascript\">\n/**\n * * Write a JavaScript function to count the number of integral co-ordinates that lie inside a square.\n */\nvar fun = function() {\n/**\n * * Draw a black line between two co-ordinates.\n */\n  g2d.line(x1, y1, x2, y2);\n}\n/**\n * * Initialize the count with the starting co-ordinates.\n */\nfun();\n/**\n * * Start the timer that counts the number of integral co-ordinates that lie inside a square.\n */\nvar timer = setInterval(fun, 1000);\n</script>\n\n<script type=\"text/javascript\">\n/**\n * * Write a JavaScript function to count the number of integral co-ordinates that lie inside a square.\n */\nvar fun = ", "\n\t\n\t"]}
{"task_id": "MBJSP/191", "prompt": "function checkMonthnumber(monthname3) {\n/**\n * * Write a function to check whether the given month name contains 30 days or not.\n */", "entry_point": "checkMonthnumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"February\";\nvar x0 = checkMonthnumber(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"June\";\nvar x1 = checkMonthnumber(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"April\";\nvar x2 = checkMonthnumber(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether the given month name contains 30 days or not.", "language": "javascript", "canonical_solution": "    // Write your code here\n    return (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\" || monthname3 === \"December\");\n}", "completion": ["\n", "\n", "\n\n/**\n * * Write a function to check whether the given month name contains 31 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 32 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 33 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 34 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 35 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 36 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 37 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 38 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 39 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 40 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 41 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 42 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 43 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 44 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 45 days or not.\n */\n\n/**\n * * Write a function to check whether the given month name contains 46 days or not.\n */\n\n/**\n * * Write a ", "\n", "\n"]}
{"task_id": "MBJSP/192", "prompt": "function checkString(str) {\n/**\n * * Write a JavaScript function to check whether a string has atleast one letter and one number.\n */", "entry_point": "checkString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"thishasboth29\";\nvar x0 = checkString(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = checkString(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether a string has atleast one letter and one number.", "language": "javascript", "canonical_solution": "    return /[a-zA-Z]/.test(str) && /[0-9]/.test(str);\n}", "completion": ["\nif (str.length > 0) {\nif (str.length === 1) {\nvar letter = str[0];\nif (letter.length > 0) {\nvar number = str[0].match(/\\d/g);\nif (number) {\nvar has_letter_and_number = true;\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}", "\n} else {\n// Write your code here\n}\n<|endoftext|>", "\nstr.forEach(", "\n\nvar to_write_function = function(str, wrap_name) {\nvar check_is_letter = function(str) {\nreturn str.match(/[A-Za-z]/g);\n};\nvar check_is_number = ", "\n  return!str.trim().length;\n},\n\n/**\n * * Check if a string is empty or not.\n */\nisEmpty = function (str) {\n/**\n * * Check if a string is empty or not.\n */\n  return!str;\n},\n\n/**\n * * Check if a string is either empty or not.\n */\nisWhitespace = function (str) {\n/**\n * * Check if a string is either empty or not.\n */\n  return str.trim().length;\n},\n\n/**\n * * Check if a string contains only numbers.\n */\nisNumeric = function (str) {\n/**\n * * Check if a string contains only numbers.\n */\n  return!str.trim().match(/^-?\\d+(?:\\.\\d+)?$/g);\n},\n\n/**\n * * Check if a string contains only letters.\n */\nisAlpha = function (str) {\n/**\n * * Check if a string contains only letters.\n */\n  return!str.trim().match(/^[a-zA-Z]*$/g);\n},\n\n/**\n * * Check if a string contains only numbers or letters.\n */\nisAll = function (str) {\n/**\n * * Check if a string contains only numbers or letters.\n */\n  return!str.trim().match(/^[-a-zA-Z0-9]*$/g);\n},\n\n/**\n * * Remove all characters from a string.\n */\nremoveAll = "]}
{"task_id": "MBJSP/193", "prompt": "function removeTuple(testtup) {\n/**\n * * Write a function to remove the duplicates from the given tuple.\n */", "entry_point": "removeTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 2, 3, 5, 1, 1, 3];\nvar x0 = removeTuple(arg00);\nvar v0 = [1, 2, 3, 5];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 4, 5, 6, 6, 7, 8, 8];\nvar x1 = removeTuple(arg10);\nvar v1 = [2, 3, 4, 5, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 12, 13, 11, 11, 12, 14, 13];\nvar x2 = removeTuple(arg20);\nvar v2 = [11, 12, 13, 14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove the duplicates from the given tuple.", "language": "javascript", "canonical_solution": "  const testTup2 = [...testTup];\n  const testTup3 = testTup2.sort((a, b) => a - b);\n  const testTup4 = [...new Set(testTup3)];\n  return testTup4;\n}", "completion": ["\ntuple_writer remove_duplicate(const char* testtup) {\n  return tuple_writer([](const char* to_remove) {\n    static std::hash<std::string> hasher;\n    return!(hasher(to_remove) % 2);\n  });\n}\n\n/**\n * * Create a `tuple_writer` with the given function.\n */\ntuple_writer create_tuple_writer(\n    std::", "\n    //\n    //\n    var func_to_remove = function () {\n        if (testtup.length > 1) {\n            //\n            //\n            for (var i = 0; i < testtup.length; i++) {\n                if (i > 0 && testtup[i] == testtup[i - 1]) {\n                    testtup.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    };\n\n    //\n    //\n    var testtup_remove_duplicates = function () {\n        if (testtup.length > 1) {\n            //\n            //\n            for (var i = 0; i < testtup.length; i++) {\n                if (i > 0 && testtup[i] == testtup[i - 1]) {\n                    testtup.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    };\n\n    //\n    //\n    var testtup_remove_duplicates_strings = function () {\n        if (testtup.length > 1) {\n            //\n            //\n            for (var i = 0; i < testtup.length; i++) {\n                if (i > 0 && testtup[i] == testtup[i - 1]) {\n                    testtup.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n    };\n\n    //\n    //\n    var testtup_remove_duplicates_no_duplicates = ", "\n        }\n    }\n</code></pre><p>In this case we are using a <code>&lt;", "\n    RemoveDuplicates(tup)\n}\n</pre></div>\n</div>\n<div class=\"section\" id=\"enrich-data-with-duplicates\">\n<h1>Enrich Data with Duplicates<a class=\"headerlink\" href=\"#enrich-data-with-duplicates\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Here we are enriching our data with duplicates. This is usually desired because it will take longer to process and generate new document ids which can then be queried using the Lucene index.</p>\n<p>First we have to determine how many documents should be added.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">num_docs</span> <span class=\"o\">=</span> <span class=\"n\">ReadAllDocuments</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">length</span>\n<span class=\"n\">num_docs</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span> <span class=\"c1\"># Change this number to increase the number of documents to enrich with duplicates.</span>\n</pre></div>\n</div>\n<p>Next we read our data into a python dictionary so that we can modify it in place.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">read_data_into_dict</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Next we create a list of all document ", "\n"]}
{"task_id": "MBJSP/194", "prompt": "function octalToDecimal(n) {\n/**\n * * Write a JavaScript function to convert octal number to decimal number.\n */", "entry_point": "octalToDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar x0 = octalToDecimal(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = octalToDecimal(arg10);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 40;\nvar x2 = octalToDecimal(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to convert octal number to decimal number.", "language": "javascript", "canonical_solution": "    return parseInt(n, 8);\n}", "completion": ["\nvar o = octal.octal(n);\nvar x = o.x.toString(10);\nvar y = o.y.toString(10);\nvar z = o.z.toString(10);\nvar w = o.w.toString(10);\nvar q = o.q.toString(10);\nvar r = o.r.toString(10);\nvar s = o.s.toString(10);\nvar t = o.t.toString(10);\nvar u = o.u.toString(10);\nvar v = o.v.toString(10);\nvar w = o.w.toString(10);\n/**\n * *\n * Write a JavaScript function to convert hexadecimal number to decimal number.\n */\nvar x = hex.hex(n);\nvar y = hex.hex(n, true);\nvar z = hex.hex(n, true, true);\nvar w = hex.hex(n, true, true, true);\n/**\n * * Write a JavaScript function to convert base-10 number to decimal number.\n */\nvar q = base10.base10(n);\nvar r = base10.base10(n, true);\nvar s = base10.base10(n, true, true);\nvar t = base10.base10(n, true, true, true);\nvar u = base10.base10(n, true, true, true, true);\n/**\n * * Write a JavaScript ", "\nvar write_num = function(fn, decimal) {\n  var base10 = decimal === 1? '0' : '0.';\n  var dec = decimal === 1? 0 : decimal-1;\n  var j = fn.length - 1;\n  var t = 0;\n  var fnr = base10.charAt(0);\n  while(j >= 0) {\n    t = Math.floor(fnr * 8 + dec);\n    fn[j] = t < 10? t+base10.charAt(1) : t+base10.charAt(2);\n    fnr = dec < 0? fnr / 8 : fnr % 8;\n    j--;\n  }\n  return fn;\n}\n\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\nvar write_decimal = function(fn, decimal) {\n  var base10 = decimal === 1? '0' : '0.';\n  var dec = decimal-1;\n  var j = fn.length - 1;\n  var t = 0;\n  var fnr = base10.charAt(0);\n  while(j >= 0) {\n    t = Math.floor(fnr * 8 + dec);\n    fn[j] = t < 10? t+base10.charAt(1) : t+base10.charAt(2);\n    fnr = dec < 0? fnr / 8 : fnr % 8;\n    j--;\n  }\n  return fn;\n}\n\n/**\n * * Write a JavaScript function to convert decimal number to hexadecimal number.\n */\nvar write_decimal_hex = ", "\nvar n = '' + n; // eslint-disable-line no-use-before-define\nvar dec = '0'.charCodeAt(0); // eslint-disable-line no-use-before-define\nvar lead = dec === n.charCodeAt(0);\nif (lead) {\n    // First octal digit is 1\n    n = '1'.charCodeAt(0);\n} else {\n    // Second octal digit is not 1 but 6th or 10th\n    if (n === dec && n.charCodeAt(0) === oct && n.charCodeAt(1) === dec) {\n        // Third octal digit is not 1 but 3rd or 4th\n        if (n.charCodeAt(2)!== dec || n.charCodeAt(3)!== oct) {\n            n = '';\n        }\n    } else {\n        // Fourth octal digit is not 1 but 1234 or 5678\n        if (n.charCodeAt(2)!== dec || n.charCodeAt(3)!== oct || n.charCodeAt(4)!== dec) {\n            n = '';\n        }\n    }\n}\nreturn n;\n}\nvar n = '' + n; // eslint-disable-line no-use-before-define\nreturn n;\n}\nvar n = '' + n; // eslint-disable-line no-use-before-define\nreturn n;\n}\nvar n = '' + n; // eslint-disable-line no-use-before-define\nreturn n;\n}\nvar n = '' + n; // eslint-disable-line no-use-before-define\nreturn n;\n}\nvar", "\nvar writer = new java.lang.Appendable();\nwriter.append('", "\n"]}
{"task_id": "MBJSP/195", "prompt": "function first(arr, x, n) {\n/**\n * * Write a JavaScript function to find the first position of an element in a sorted array.\n */", "entry_point": "first", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 6];\nvar arg01 = 6;\nvar arg02 = 6;\nvar x0 = first(arg00, arg01, arg02);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 3, 2, 2, 4, 2];\nvar arg11 = 2;\nvar arg12 = 9;\nvar x1 = first(arg10, arg11, arg12);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar arg21 = 1;\nvar arg22 = 3;\nvar x2 = first(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the first position of an element in a sorted array.", "language": "javascript", "canonical_solution": "    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (arr[mid] === x) {\n            if (mid === 0 || arr[mid - 1] !== x) {\n                return mid;\n            } else {\n                end = mid - 1;\n            }\n        } else if (arr[mid] < x) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return -1;\n}", "completion": ["\n", "\n    ", "\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar firstPosition = binarySearchFirstPosition(arr, 3);\nconsole.log(firstPosition);\n/**\n * * Write a JavaScript function to find the last position of an element in a sorted array.\n */\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar lastPosition = binarySearchLastPosition(arr, 6);\nconsole.log(lastPosition);\n/**\n * * Write a JavaScript function to find the middle position of an element in a sorted array.\n */\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar middlePosition = binarySearchMiddlePosition(arr, 6);\nconsole.log(middlePosition);\n/**\n * * Write a JavaScript function to find a specified number in a sorted array.\n */\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar numberToFind = 3;\nvar index = binarySearchNumberToFind(arr, numberToFind);\nconsole.log(index);\n/**\n * * Write a JavaScript function to find a specified number in a sorted array in a descending order.\n */\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar numberToFind = 5;\nvar index = binarySearchNumberToFindInAscendingOrder(arr, numberToFind);\nconsole.log(index);\n/**\n * * Write a JavaScript ", "\nx = function (arr, k) {\n    return arr[k - 1];\n};\n```\n\nYou can find the [**code**](https://github.com/jashkenas/jashkenas/blob/master/lodash/findIndex.js) of the [**document**](https://github.com/jashkenas/jashkenas/blob/master/lodash.js).\n\n\n## `filter`\n\n### `filter(array, predicate)`\n\nReturns a new array containing those items from the `array` for which the `predicate` function returns truthy for.\n\nIf the `array` is empty or the `predicate` does not return truthy for an item, the returned array will be empty.\n\n```js\n_.filter([1, 2, 3, 4], function (num) {\n    return num % 2 === 0;\n});\n//=> [2, 4]\n\n_.filter([{id: 1}, {id: 2}, {id: 3}, {id: 4}], function (item) {\n    return item.id === 2;\n});\n//=> [{id: 2}]\n```\n\nYou can find the [**code**](https://github.com/jashkenas/jashkenas/blob/master/lodash/filter.js) of the [**document**](https://github.com/jashkenas/jashkenas/blob/master/lodash.js).\n\n\n## `map`\n\n### `map(array, iteratee)`\n\nReturns a new array containing the result of calling the `iteratee` ", "\nvar arr = [1, 3, 5, 6, 7, 8, 10, 11, 12];\nvar result = arr.findFirst("]}
{"task_id": "MBJSP/196", "prompt": "function removeTuples(testlist, k) {\n/**\n * * Write a function to remove all the tuples with length k.\n */", "entry_point": "removeTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]];\nvar arg01 = 1;\nvar x0 = removeTuples(arg00, arg01);\nvar v0 = [[4, 5], [8, 6, 7], [3, 4, 6, 7]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]];\nvar arg11 = 2;\nvar x1 = removeTuples(arg10, arg11);\nvar v1 = [[1, 2, 3], [3, 4, 6, 7]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]];\nvar arg21 = 3;\nvar x2 = removeTuples(arg20, arg21);\nvar v2 = [[4, 3], [1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove all the tuples with length k.", "language": "javascript", "canonical_solution": "  const result = [];\n  for (let i = 0; i < testList.length; i++) {\n    if (testList[i].length !== k) {\n      result.push(testList[i]);\n    }\n  }\n  return result;\n}", "completion": ["\n", "\n", "\n", "\n\n/**\n * @template T\n * @param {T[]} list - The list to search for tuples of length k\n * @param {int} k - The length of the tuple to search for\n * @returns {boolean} - Whether or not the list contains tuples of length k.\n */\n", "\n\n"]}
{"task_id": "MBJSP/197", "prompt": "function findExponentio(testtup1, testtup2) {\n/**\n * * Write a function to perform the exponentiation of the given two tuples.\n */", "entry_point": "findExponentio", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 5, 6];\nvar arg01 = [5, 6, 7, 5];\nvar x0 = findExponentio(arg00, arg01);\nvar v0 = [100000, 4096, 78125, 7776];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 5, 6, 7];\nvar arg11 = [6, 7, 8, 6];\nvar x1 = findExponentio(arg10, arg11);\nvar v1 = [1771561, 78125, 1679616, 117649];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 6, 7, 8];\nvar arg21 = [7, 8, 9, 7];\nvar x2 = findExponentio(arg20, arg21);\nvar v2 = [35831808, 1679616, 40353607, 2097152];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to perform the exponentiation of the given two tuples.", "language": "javascript", "canonical_solution": "  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(Math.pow(testTup1[i], testTup2[i]));\n  }\n  return result;\n}", "completion": ["\n\nvar writeExponentiation = function writeExponentiation(testtup1, testtup2) {\n  return function () {\n    testtup1.add(testtup2);\n    return testtup1;\n  };\n};\n\n/**\n * * Write a function to calculate the exponential of the given two tuples.\n */\n\nvar writeExponential = function writeExponential(testtup1, testtup2) {\n  return function () {\n    testtup1.add(testtup2);\n    testtup1.exp();\n    return testtup1;\n  };\n};\n\n/**\n * * Write a function to calculate the natural logarithm of the given two tuples.\n */\n\nvar writeNaturalLogarithm = function writeNaturalLogarithm(testtup1, testtup2) {\n  return function () {\n    testtup1.add(testtup2);\n    testtup1.log();\n    return testtup1;\n  };\n};\n\n/**\n * * Write a function to calculate the absolute value of the given two tuples.\n */\n\nvar writeAbsoluteValue = function writeAbsoluteValue(testtup1, testtup2) {\n  return function () {\n    testtup1.add(testtup2);\n    testtup1.abs();\n    return testtup1;\n  };\n};\n\n/**\n * * Write a function to calculate the square root of the given two tuples.\n */\n\nvar writeSquareRoot = function writeSquareRoot(testtup1, testtup2) {\n  return ", "\n\n            return (", "\n", "\nexponentio(tup1, tup2) {\nreturn [\n  ...(Array.isArray(tup1)? tup1 : [tup1]),\n  ...(Array.isArray(tup2)? tup2 : [tup2]),\n];\n}\n\n/**\n * * Write a function to perform the inverse exponentiation of the given two tuples.\n */\ninverse_exponentio(tup1, tup2) {\nreturn [\n  ...(Array.isArray(tup1)? tup1 : [tup1]),\n  ...(Array.isArray(tup2)? tup2 : [tup2]),\n];\n}\n\n/**\n * * Write a function to perform the inverse exponentiation of the given two tuples.\n */\ninverse_exponentio(tup1, tup2) {\nreturn [\n  ...(Array.isArray(tup1)? tup1 : [tup1]),\n  ...(Array.isArray(tup2)? tup2 : [tup2]),\n];\n}\n\n/**\n * * Write a function to perform the inverse exponentiation of the given two tuples.\n */\ninverse_exponentio(tup1, tup2) {\nreturn [\n  ...(Array.isArray(tup1)? tup1 : [tup1]),\n  ...(Array.isArray(tup2)? tup2 : [tup2]),\n];\n}\n\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/198", "prompt": "function largestTriangle(a, b) {\n/**\n * * Write a function to find the largest triangle that can be inscribed in an ellipse.\n */", "entry_point": "largestTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 2;\nvar x0 = largestTriangle(arg00, arg01);\nvar v0 = 10.392304845413264;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar x1 = largestTriangle(arg10, arg11);\nvar v1 = 4.639421805988064;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 1;\nvar x2 = largestTriangle(arg20, arg21);\nvar v2 = 105.2220865598093;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "language": "javascript", "canonical_solution": "  if (a < 0 || b < 0) {\n    return -1;\n  }\n  const area = (3 * Math.sqrt(3) * Math.pow(a, 2)) / (4 * b);\n  return area;\n}", "completion": ["\n\n// ellipse\n", "\n\n};\n\n/**\n * * Find the largest triangle that can be inscribed in an ellipse.\n */\n\n},{}],116:[", "\n\n/*", "\n", "\n"]}
{"task_id": "MBJSP/199", "prompt": "function highestPowerOf2(n) {\n/**\n * * Write a JavaScript function to find highest power of 2 less than or equal to given number.\n */", "entry_point": "highestPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = highestPowerOf2(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar x1 = highestPowerOf2(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 32;\nvar x2 = highestPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find highest power of 2 less than or equal to given number.", "language": "javascript", "canonical_solution": "    return Math.pow(2, Math.floor(Math.log2(n)))\n}", "completion": ["\n    ", "\n", "\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}", "\n\n", "\n} else if (typeof(n) == 'number') {\n/**\n * * Write a JavaScript function to find highest power of 2 less than or equal to given number.\n */\n}\n// Write your code here\n\nvar n = parseInt(prompt('Enter a number to find the highest power of 2 less than or equal to it.\\n'));\nvar highestPow2 = 1;\nvar pow2 = 2;\n\nwhile (pow2 <= n) {\n    highestPow2 = pow2;\n    pow2 *= 2;\n}\n```\n\n## JavaScript Solution\n\n```js\n/**\n * @param {number} n\n * @return {number}\n */\nvar myPow = function(n){\n    if(n === 0) return 1;\n    if(n === 1) return 1;\n    if(n === -1) return 1/n;\n    if(!isFinite(n)) return NaN;\n\n    var ans = 0;\n    var curr = n;\n\n    while(curr){\n        if(curr & 1)\n            ans += 1;\n        \n        curr >>= 1;\n    }\n\n    return ans;\n};\n```\n\n## \ud83d\udcaf Programmer solution\n\n```js\n/**\n * @param {number} n\n * @return {number}\n */\nvar myPow = "]}
{"task_id": "MBJSP/200", "prompt": "function positionMax(list1) {\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */", "entry_point": "positionMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54];\nvar x0 = positionMax(arg00);\nvar v0 = [7];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nvar x1 = positionMax(arg10);\nvar v1 = [7, 8, 9, 10];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar x2 = positionMax(arg20);\nvar v2 = [11];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find all index positions of the maximum values in a given list.", "language": "javascript", "canonical_solution": "  var max = Math.max.apply(null, list1);\n  var maxIndex = list1.indexOf(max);\n  var result = [];\n  for (var i = 0; i < list1.length; i++) {\n    if (list1[i] === max) {\n      result.push(i);\n    }\n  }\n  return result;\n}", "completion": ["\nvar get_max_in_list = ", "\nvar max = function(arr) {\n    var n = arr.length;\n    var max = 0,\n        left = 0,\n        right = n-1;\n    while (left <= right) {\n        var mid = left + Math.ceil(right - left)/2;\n        if (arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1]) {\n            return [mid, mid, mid];\n        } else if (arr[mid] > arr[mid-1]) {\n            max = arr[mid];\n            left = mid+1;\n        } else {\n            right = mid-1;\n        }\n    }\n    return [-1, -1, -1];\n};\n\nvar list1 = [1, 3, 2, 5];\nconsole.log(max(list1));\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\nvar max = ", "\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a ", "\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a function to find all index positions of the maximum values in a given list.\n */\n\n/**\n * * Write a ", "\n\n//  (1)\n"]}
{"task_id": "MBJSP/201", "prompt": "function chklist(lst) {\n/**\n * * Write a JavaScript function to check whether the elements in a list are same or not.\n */", "entry_point": "chklist", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"one\", \"one\", \"one\"];\nvar x0 = chklist(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"one\", \"Two\", \"Three\"];\nvar x1 = chklist(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"bigdata\", \"python\", \"Django\"];\nvar x2 = chklist(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the elements in a list are same or not.", "language": "javascript", "canonical_solution": "    return lst.length === lst.filter(x => x === lst[0]).length;\n}", "completion": ["\n", "\n", "\n", "\n}\n<|endoftext|>", "\nconst check_list = function(list, name) {\n    return list.map(e => e.innerText).reduce(\n        (a, b) => a === b,\n        true\n    );\n};\n/**\n * * Write a JavaScript function to get the size of a list.\n */\nconst get_size = function(list) {\n    return list.length;\n};\n/**\n * * Write a JavaScript function to display a list.\n */\nconst display_list = function(list) {\n    return list.map(e => e.innerText).reduce(\n        (a, b) => a + '\\n' + b,\n        ''\n    );\n};\n/**\n * * Write a JavaScript function to display a list of lists.\n */\nconst display_list_of_lists = function(list) {\n    return list.map(e => e.map(e => e.innerText).reduce(\n        (a, b) => a + '\\n' + b,\n        ''\n    )).reduce(\n        (a, b) => a + '\\n' + b,\n        ''\n    );\n};\n\n/**\n * * Write a JavaScript function to check whether the element in a list is same or not.\n */\nconst check_list_of_elements = function(list) {\n    return list.map(e => e.innerText).reduce(\n        (a, b) => a === b,\n        true\n    );\n};\n/**\n * * Write a JavaScript function to display a list of lists.\n */\nconst display_list_of_lists = "]}
{"task_id": "MBJSP/202", "prompt": "function removeEven(str1) {\n/**\n * * Write a function to remove even characters in a string.\n */", "entry_point": "removeEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = removeEven(arg00);\nvar v0 = \"pto\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = removeEven(arg10);\nvar v1 = \"porm\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = removeEven(arg20);\nvar v2 = \"lnug\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove even characters in a string.", "language": "javascript", "canonical_solution": "  let newStr = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (i % 2 === 0) {\n      newStr += str1[i];\n    }\n  }\n  return newStr;\n}", "completion": ["\nconst filter = str => str.replace(/[\\u00A0-\\uFFFF]/g, '');\n\nconst normalize = str => filter(str.toLowerCase()).replace(/[\\u00A0-\\uFFFF]/g, '');\n\nconst normalize_numeric = str => str.replace(/[\\u00A0-\\uFFFF]/g, '');\n\nconst normalize_uppercase = str => str.toUpperCase();\n\nconst normalize_lowercase = str => str.toLowerCase();\n\nconst normalize_titlecase = str => str.replace(/[\\u00A0-\\uFFFF]/g, '').trim();\n\nconst normalize_invisible = str => str.replace(/[\\u00A0-\\uFFFF]/g, '');\n\nconst normalize_url = str => str.replace(/[\\u00A0-\\uFFFF]/g, '').trim();\n\nconst normalize_normal = str => str.replace(/[\\u00A0-\\uFFFF]/g, '').replace(/\\s/g, '').trim();\n\nconst normalize_url_and_text = str => str.replace(/[\\u00A0-\\uFFFF]/g, '').replace(/\\s/g, '').trim();\n\nconst normalize_non_url_text = str => str.replace(/[\\u00A0-\\uFFFF]/g, '').replace(/\\s/g, '').trim();\n\nconst normalize_non_url_text_and_url = str => str.replace(/[\\u00A", "\nvar escape_func = function (str1) {\n    return str1.replace(/\\s+/g, '');\n};\n/**\n * * Replace all occurrences of a character with another.\n */\nvar escape_char = function (str1, str2) {\n    return str1.replace(new RegExp(escape_func(str2), 'g'), '');\n};\n/**\n * * Replace all instances of a function with a string.\n */\nvar escape_str = function (str1, str2) {\n    return str1.replace(new RegExp(escape_func(str2)), 'g');\n};\n/**\n * * Remove an occurrence of a character from a string.\n */\nvar unescape_char = function (str1, str2) {\n    return str1.replace(new RegExp(escape_func(str2), 'g'), '');\n};\n/**\n * * Remove an occurrence of a function from a string.\n */\nvar unescape_func = function (str1) {\n    return str1.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n};\n/**\n * * Remove a specific occurrence of a character from a string.\n */\nvar unescape_char2 = function (str1, str2) {\n    return str1.replace(new RegExp(escape_func(str2), 'g'), '');\n};\n/**\n * * Escape a string using JavaScript's built-in (not available in NodeJS).\n */\nvar escapejs = ", "\nvar removeEvenChars = function removeEvenChars() {\n    return str1.replace(/[^\\w]/g, '');\n};\n\nmodule.exports = removeEvenChars;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11)))\n\n/***/ }),\n/* 18 */\n/***/ (", "\nexports.removeEvenCharacters = function(str1) {\n/**\n * * Write a function to remove characters from a string.\n */\nexports.removeCharacters = function(str1) {\n/**\n * * Write a function to generate a unique id.\n */\nexports.generateUniqueID = function() {\n/**\n * * Write a function to check whether a string is empty.\n */\nexports.isEmpty = function(str1) {\n/**\n * * Write a function to check whether a string is equal to or contains the substring.\n */\nexports.isSubstring = function(str1) {\n/**\n * * Write a function to check whether a string is equal to or contains the substring.\n */\nexports.isContainSubstring = function(str1) {\n/**\n * * Write a function to generate a random number between 0 to a given number.\n */\nexports.randomNumber = function(str1) {\n/**\n * * Write a function to concatenate strings using only concatenating string.\n */\nexports.concatenateStrings = function(str1, str2, str3, str4, str5, str6, str7) {\n/**\n * * Write a function to find a substring from a string.\n */\nexports.findSubstring = function(str1) {\n/**\n * * Write a function to check whether a string is made up of unique characters.\n */\nexports.isUniqueCharacters = function(str1) {\n/**\n * * Write a function to check whether a string is equal to or contains the substring.\n */\nexports.isEqualOrContainSubstring = function(str1) {\n/**\n * * Write a ", "\n    "]}
{"task_id": "MBJSP/203", "prompt": "function hammingDistance(n1, n2) {\n/**\n * * Write a JavaScript function to find the hamming distance between given two integers.\n */", "entry_point": "hammingDistance", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 8;\nvar x0 = hammingDistance(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 4;\nvar x1 = hammingDistance(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar x2 = hammingDistance(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the hamming distance between given two integers.", "language": "javascript", "canonical_solution": "  let count = 0;\n  let n = n1 ^ n2;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      count++;\n    }\n    n = Math.floor(n / 2);\n  }\n  return count;\n}", "completion": ["\n  n1 = n1 | 0;\n  n2 = n2 | 0;\n  // i = 0;\n  var d = n1 + n2;\n  var p = (1 << d) - 1;\n  // while (i < d) {\n  //   if (n1 & 1) {\n  //     if (n2 & 1) {\n  //       // j = i;\n  //       if (n1 + n2 & p) {\n  //         return d - i - 1;\n  //       }\n  //     } else {\n  //       return d - i;\n  //     }\n  //   } else {\n  //     if (n2 & 1) {\n  //       return d - i - 1;\n  //     }\n  //   }\n  //   n1 = n1 >> 1;\n  //   n2 = n2 >> 1;\n  //   i++;\n  // }\n  return d;\n}\n\n// example\n// // 1\n// // 1\n// function f(a, b) {\n//   return a + b;\n// }\n//\n// // 2\n// // 3\n// function f(a, b) {\n//   return a * b;\n// }\n//\n// // 4\n// // 6\n// function f(a, b) {\n//   return a / b;\n// }\n//\n// // 5\n// // 7\n// function f(a, b) {\n//   return a % b;\n// }\n//\n// // 6\n// // 4\n// function f(a, b) {\n//   return a & b;\n// }\n//\n// // 7\n// // 5\n// ", "\n}\n<|endoftext|>", "\n", "\n", "\n\n\nvar _require = __webpack_require__(/*!./get-method */ \"./src/write/get-method.js\"),\n    getMethod = _require.getMethod;\n\nvar getHammingDistance = getMethod(\"hamming-distance\");\n\n/**\n * * Write a JavaScript function to find the hamming distance between two strings.\n */\n/* eslint-disable func-names */\n\nvar getHammingDistance_1 = getHammingDistance;\n\n/**\n * * Write a JavaScript function to find the hamming distance between two strings.\n */\n\n\nvar _require2 = __webpack_require__(/*!./get-method */ \"./src/write/get-method.js\"),\n    getMethod = _require2.getMethod;\n\nvar getHammingDistance_2 = getMethod(\"hamming-distance\");\n\n/**\n * * Write a JavaScript function to compute the frequency of the bit-wise AND of two integers.\n */\n/* eslint-disable func-names */\n\nvar getFrequencyOfBitwiseAnd = getMethod(\"frequency-of-bit-wise-and\");\n\n/**\n * * Write a JavaScript function to compute the frequency of the bit-wise AND of two integers.\n */\n\n\nvar _require3 = __webpack_require__(/*!./get-method */ \"./src/write/get-method.js\"),\n    getMethod = _require3.getMethod;\n\nvar getFrequencyOfBitwiseAnd_2 = getMethod(\"frequency-of-bit-wise-and\");\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/204", "prompt": "function count(s, c) {\n/**\n * * Write a JavaScript function to count the occurrence of a given character in a string.\n */", "entry_point": "count", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcc\";\nvar arg01 = \"c\";\nvar x0 = count(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ababca\";\nvar arg11 = \"a\";\nvar x1 = count(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"mnmm0pm\";\nvar arg21 = \"m\";\nvar x2 = count(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the occurrence of a given character in a string.", "language": "javascript", "canonical_solution": "    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\n", "\n", "\n    ", "\ncount_character = function(s, c) {\n    s = String(s);\n    return s.split('').reduce((a, b) => {\n        return (a += b.charCodeAt(0)) === c? a : a;\n    }, 0);\n}\n\n/**\n * * Write a JavaScript function to count the occurrences of a given character in a string.\n */\ncount_any_character = function(s, c) {\n    return s.split('').reduce((a, b) => {\n        return (a += b.charCodeAt(0)) === c? a + 1 : a;\n    }, 0);\n}\n\n/**\n * * Write a JavaScript function to count the occurrences of a given character in a string.\n */\ncount_one_character = function(s, c) {\n    return s.split('').reduce((a, b) => {\n        return (a += b.charCodeAt(0)) === c? a + 1 : a;\n    }, 0);\n}\n\n/**\n * * Write a JavaScript function to convert a string to uppercase.\n */\nto_uppercase = function(s) {\n    s = String(s);\n    return s.toUpperCase();\n}\n\n/**\n * * Write a JavaScript function to convert a string to lowercase.\n */\nto_lowercase = function(s) {\n    s = String(s);\n    return s.toLowerCase();\n}\n\n/**\n * * Write a JavaScript function to reverse a string.\n */\nreverse_string = ", "\n    "]}
{"task_id": "MBJSP/205", "prompt": "function inversionElements(testtup) {\n/**\n * * Write a function to find the inversions of tuple elements in the given tuple list.\n */", "entry_point": "inversionElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [7, 8, 9, 1, 10, 7];\nvar x0 = inversionElements(arg00);\nvar v0 = [-8, -9, -10, -2, -11, -8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 5, 6, 1, 7];\nvar x1 = inversionElements(arg10);\nvar v1 = [-3, -5, -6, -7, -2, -8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 14, 12, 13];\nvar x2 = inversionElements(arg20);\nvar v2 = [-9, -10, -12, -15, -13, -14];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the inversions of tuple elements in the given tuple list.", "language": "javascript", "canonical_solution": "  return testTup.map(x => ~x)\n}", "completion": ["\ninversion<%= js_type %>')(\n  /**\n   * * Find the inversions of tuple elements in the given tuple list.\n   */\n  testtup: (inversion<%= js_type %>')(tup<%= loop.to_a.map { |t| t[0] } %>) {\n    /**\n     * * Find the inversions of tuple elements in the given tuple list.\n     */\n\n    /**\n     * * Write a function to find the inversions of tuple elements in the given tuple list.\n     */\n  },\n)\n\n%}\n\n/**\n * * Write a function to find the inversions of tuple elements in the given tuple list.\n */\ninversion<%= js_type %>')(\n  /**\n   * * Find the inversions of tuple elements in the given tuple list.\n   */\n  tup<%= loop.to_a.map { |t| t[0] } %> {\n    /**\n     * * Find the inversions of tuple elements in the given tuple list.\n     */\n\n    /**\n     * * Write a ", "\n", "\n", "\n\n}\n\nreturn {\n    \"_index\": \"edgelist\",\n    \"_type\": \"edge\",\n    \"_id\": \"v_0-v_1\",\n    \"_source\": {\n        \"vertices\": [\n            {\n                \"vertices\": [\n                    0,\n                    1\n                ],\n                \"type\": \"int\"\n            },\n            {\n                \"vertices\": [\n                    2,\n                    3\n                ],\n                \"type\": \"int\"\n            }\n        ],\n        \"type\": \"tuple\"\n    },\n    \"_target\": {\n        \"vertices\": [\n            {\n                \"vertices\": [\n                    4,\n                    5\n                ],\n                \"type\": \"int\"\n            },\n            {\n                \"vertices\": [\n                    6,\n                    7\n                ],\n                \"type\": \"int\"\n            }\n        ],\n        \"type\": \"tuple\"\n    },\n    \"_op_type\": \"index_edge\",\n    \"_source_nodes\": [\n        0,\n        1\n    ],\n    \"_target_nodes\": [\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n    ],\n    \"_inverted\": true\n};\n\n};\n\n/**\n *  @private\n *  This function is used to index a document\n *  using the Elasticsearch client.\n */\nvar indexDocument = ", "\n}\n\n\n/**\n * * Given a list of pairs, return a list of the inversions of the pairs.\n */\n"]}
{"task_id": "MBJSP/206", "prompt": "function concatenateElements(testtup) {\n/**\n * * Write a function to perform the adjacent element concatenation in the given tuples.\n */", "entry_point": "concatenateElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"];\nvar x0 = concatenateElements(arg00);\nvar v0 = [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"];\nvar x1 = concatenateElements(arg10);\nvar v1 = [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"];\nvar x2 = concatenateElements(arg20);\nvar v2 = [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to perform the adjacent element concatenation in the given tuples.", "language": "javascript", "canonical_solution": "    var res = [];\n    var length = testTup.length;\n    for (var i = 0; i < length - 1; i++) {\n        res[i] = testTup[i] + testTup[i + 1];\n    }\n    return res;\n}", "completion": ["\n", "\n\nvar concat = function concat(tup, out) {\n  return out.concat(tup[0]);\n};\n/**\n * * Write a function to perform the adjacent element concatenation in the given tuples.\n */\n\nvar Concatenate =\n/*#__PURE__*/\n", "\n    println \"Write a function to perform the adjacent element concatenation in the given tuples.\"\n    println \"Take a sequence of tuples, each consisting of one element, and\"\n    println \"write a function that takes an element and appends the element to the end of the sequence.\"\n    println \"This function should have the signature:\"\n    println \"   ", "\n", "\n"]}
{"task_id": "MBJSP/207", "prompt": "function findLongestRepeatingSubseq(str) {\n/**\n * * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n */", "entry_point": "findLongestRepeatingSubseq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AABEBCDD\";\nvar x0 = findLongestRepeatingSubseq(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"aabb\";\nvar x1 = findLongestRepeatingSubseq(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"aab\";\nvar x2 = findLongestRepeatingSubseq(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "language": "javascript", "canonical_solution": "\tconst dict = {};\n\tlet subseq = '';\n\tfor (let i = 0; i < str.length; i++) {\n\t\tlet char = str[i];\n\t\tif (dict[char]) {\n\t\t\tsubseq += char;\n\t\t\tdict[char] += 1;\n\t\t} else {\n\t\t\tdict[char] = 1;\n\t\t}\n\t}\n\n\treturn subseq.length;\n}", "completion": ["\n\nprint(\n\"Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\"\n);\n\n/**\n * Use the find function in a loop to find the longest repeating subsequences.\n */\n\nprint(\n\"Use the find function in a loop to find the longest repeating subsequences.\"\n);\n\n/**\n * Given a sequence of words, determine the length of the longest word in the sequence.\n */\n\nprint(\n\"Given a sequence of words, determine the length of the longest word in the sequence.\"\n);\n\n/**\n * Given a sequence of words, determine the length of the longest word in the sequence.\n */\n\nprint(\n\"Given a sequence of words, determine the length of the longest word in the sequence.\"\n);\n\n/**\n * Given a sequence of words, determine the length of the longest word in the sequence.\n */\n\nprint(\n\"Given a sequence of words, determine the length of the longest word in the sequence.\"\n);\n\n/**\n * Write a function to check whether two words are anagrams or not.\n */\n\nprint(\n\"Write a function to check whether two words are anagrams or not.\"\n);\n\n/**\n * Given a string, create a reverse function that returns a new string that contains all the characters in the original string in the reverse order.\n */\n\nprint(\n\"Given a string, create a reverse function that returns a new string that contains all the characters in the original string in the reverse order.\"\n);\n\n/**\n * Given a string, create a reverse function that returns a new string that contains all the characters in the original string in the reverse order.\n */\n\nprint(\n\"Given a string, create a reverse ", "\nstr.split(/\\s+/).forEach(", "\n\n/**\n * * Return a function that can be applied to a string to return the count of the longest repeating subsequences for that string.\n *\n * Example:\n *\n * ```\n * longest_repeating_subsequence_count(\"aaa\")\n * ```\n *\n * Returns: `2`\n *\n * ```\n * longest_repeating_subsequence_count(\"aaaaa\")\n * ```\n *\n * Returns: `3`\n *\n * ```\n * longest_repeating_subsequence_count(\"abcabcabc\")\n * ```\n *\n * Returns: `3`\n *\n * ```\n * longest_repeating_subsequence_count(\"aaaaaaaaaa\")\n * ```\n *\n * Returns: `1`\n *\n */\n\n/**\n * * Return a function that can be applied to a string to return the count of the longest repeating subsequences for that string.\n *\n * Example:\n *\n * ```\n * longest_repeating_subsequence_count(\"aaa\")\n * ```\n *\n * Returns: `2`\n *\n * ```\n * longest_repeating_subsequence_count(\"aaaaa\")\n * ```\n *\n * Returns: `3`\n *\n * ```\n * longest_repeating_subsequence_count(\"abcabcabc\")\n * ```\n *\n * Returns: `3`\n *\n * ```\n * longest_repeating_subsequence_count(\"aaaaaaaaaa\")\n * ```\n *\n * Returns: `1`\n *\n */\n\n/**\n * * Return a ", "\nvar longestRepeatingSubseq = function longestRepeatingSubseq(str) {\n  // Find the length of the string\n  var length = str.length;\n  if (length === 0) {\n    return 0;\n  }\n\n  // Memoize the result\n  var cache = [];\n  var maxLength = 0;\n  var currMaxLength = 0;\n\n  // Iterate over each index\n  for (var i = 0; i < length; i++) {\n    // Iterate over each index until the current character is different\n    for (var j = i + 1; j < length; j++) {\n      // If the characters are different\n      if (str[i]!== str[j]) {\n        // Calculate the length of the longest repeating subsequence\n        var curr = longestRepeatingSubseq(str.slice(i, j));\n        maxLength = maxLength > curr? maxLength : curr;\n      }\n    }\n  }\n\n  // Cache the result\n  cache[length] = maxLength;\n  return maxLength;\n};\n\nmodule.exports = longestRepeatingSubseq;\n\n/***/ }),\n/* 112 */\n/***/ (", "\nvar longest = function(str) {\n  return longestSubsequence(str).map("]}
{"task_id": "MBJSP/208", "prompt": "function isDecimal(num) {\n/**\n * * Write a function to check the given decimal with a precision of 2 by using regex.\n */", "entry_point": "isDecimal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"123.11\";\nvar x0 = isDecimal(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"0.21\";\nvar x1 = isDecimal(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"123.1214\";\nvar x2 = isDecimal(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check the given decimal with a precision of 2 by using regex.", "language": "javascript", "canonical_solution": "    return /^-?\\d+\\.\\d{2}$/.test(num);\n}", "completion": ["\n\nvar check = function check(digit, pattern) {\n  var pattern_1 = pattern.replace(/\\$/g, '');\n  var a = digit.split('');\n  var b = a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9];\n  var c = a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6];\n  var d = a[7] + a[8] + a[9];\n  var e = a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8];\n  var f = a[9];\n\n  var matcher = new RegExp('^(' + pattern_1 + ')(\\\\d{' + f + '})$');\n  return matcher.test(b) || matcher.test(c) || matcher.test(d) || matcher.test(e) || matcher.test(f);\n};\n\n/**\n * * Write a function to check the given decimal with a precision of 2 by using regex.\n */\n\nvar check$1 = ", "\n}\n<|endoftext|>", "\n}\n<|endoftext|>", "\nvar doubleRegex = /(\\d)(?=\\d)/g;\n\nvar doubleRegex2 = /(\\d)(?=\\d)/g;\n\n// Write a function to check the given decimal with a precision of 0 by using regex.\nvar doubleZeroRegex = /(\\d)(?=\\d)/g;\n\n// Write a function to check the given decimal with a precision of 0 by using regex.\nvar doubleZeroRegex2 = /(\\d)(?=\\d)/g;\n\n// Write a function to check the given decimal with a precision of 2 by using regex.\nvar decimalRegex = /(\\d)(?=\\d)/g;\n\nvar decimalRegex2 = /(\\d)(?=\\d)/g;\n\nvar decimalRegex3 = /(\\d)(?=\\d)/g;\n\n// Write a function to check the given decimal with a precision of 2 by using regex.\nvar decimalRegex4 = /(\\d)(?=\\d)/g;\n\nvar decimalRegex5 = /(\\d)(?=\\d)/g;\n\nvar decimalRegex6 = /(\\d)(?=\\d)/g;\n\nvar decimalRegex7 = /(\\d)(?=\\d)/g;\n\nvar decimalRegex8 = /(\\d)(?=\\d)/g;\n\nvar decimalRegex9 = /(\\d)(?=\\d)/g;\n\nvar decimalRegex10 = /(\\d)(?=\\d)/g;\n\n// Write a ", "\n\nconst check_regex_2 = /[.](?=\\d)/g;\nconst check_regex_1 = /[.](?=\\d)/;\n\nconst check_regex = (decimal) => {\n  return check_regex_2.test(decimal) || check_regex_1.test(decimal);\n};\n\nconst check_decimal_2 = (decimal) => {\n  return decimal.replace(/\\d+/, '') === '.';\n};\n\nconst check_decimal_1 = (decimal) => {\n  return decimal.replace(/\\d+/, '') === '.';\n};\n\nconst check_decimal = (decimal) => {\n  return check_decimal_2.test(decimal) || check_decimal_1.test(decimal);\n};\n\nconst check_decimal_1_2 = (decimal) => {\n  return check_decimal_1(decimal) || check_decimal_2(decimal);\n};\n\nconst check_decimal_2_2 = (decimal) => {\n  return check_decimal_2(decimal) || check_decimal_1_2(decimal);\n};\n\nconst check_decimal_2_1 = (decimal) => {\n  return check_decimal_1(decimal) || check_decimal_2_2(decimal);\n};\n\nconst check_decimal_2_1_2 = (decimal) => {\n  return check_decimal_2_2(decimal) || check_decimal_2_1(decimal);\n};\n\nconst check_decimal_2_2_2 ="]}
{"task_id": "MBJSP/209", "prompt": "function heapReplace(heap, a) {\n/**\n * * Write a function to delete the smallest element from the given heap and then insert a new item.\n */", "entry_point": "heapReplace", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 44, 68, 21, 39, 23, 89];\nvar arg01 = 21;\nvar x0 = heapReplace(arg00, arg01);\nvar v0 = [21, 25, 23, 44, 39, 68, 89];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 44, 68, 21, 39, 23, 89];\nvar arg11 = 110;\nvar x1 = heapReplace(arg10, arg11);\nvar v1 = [23, 25, 68, 44, 39, 110, 89];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25, 44, 68, 21, 39, 23, 89];\nvar arg21 = 500;\nvar x2 = heapReplace(arg20, arg21);\nvar v2 = [23, 25, 68, 44, 39, 500, 89];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to delete the smallest element from the given heap and then insert a new item.", "language": "javascript", "canonical_solution": "  const { length } = heap;\n  let i = length;\n  while (i > 0) {\n    const parent = Math.floor((i - 1) / 2);\n    if (heap[i] < heap[parent]) {\n      [heap[i], heap[parent]] = [heap[parent], heap[i]];\n    }\n    i = parent;\n  }\n  heap[0] = a;\n}", "completion": ["\n", "\n\n// we need to traverse the heap and delete the smallest element\n// and then insert a new item\n// we can use the heap's own delete method which will remove\n// the element with the minimum value and then insert a new item\n// we can also use the heap's own insert method which will\n// take the item to insert into the heap and then insert it\n// using the heap's own insert method\n// we can use our own min() method which will return the item with\n// the minimum value\n\nheap.min()\n\n// here we are going to replace the smallest element\n// with a new item\n// this new item will be inserted into the heap\n\n// remove the smallest element\n// and then insert a new item\n\n// since we already removed the smallest element\n// we will not be able to insert a new item\n\nheap.insert(5)\n\nheap.min()\n```\n\n### BONUS\n\n> **Bonus Question**\n\nHere we are going to use a [Priority Queue](https://en.wikipedia.org/wiki/Priority_queue)\n\nWe are going to use an implementation of a Priority Queue\n\nWe are going to create a Priority Queue which will have\n\n* heap property\n* a method to add an item to the queue\n* a method to remove an item from the queue\n* a method to find the minimum element from the queue\n* a method to find the size of the queue\n* a method to check if the queue is empty\n\n```javascript\n// create a Priority Queue\nvar priorityQueue = new PriorityQueue();\n```\n\n```javascript\n// add item to the queue\npriorityQueue.add(3);\npriorityQueue.add(2);\npriorityQueue.add(6);\n\n// remove item from the queue", "\n  if (a.top > heap.top) {\n    heap.top = a.top;\n    heap.heap[0] = a.heap[a.top];\n    heap.minHeapify(0);\n  }\n  return heap;\n}\n\n", "\n", "\n\n    var s = heap.size;\n    var x = a.val;\n    var y;\n    while (s > 0) {\n        y = (s - 1) / 2;\n        if (x < heap[y].val) {\n            heap[s] = heap[y];\n            s = y;\n        } else {\n            break;\n        }\n    }\n    heap[s] = a;\n    heap.size = heap.size + 1;\n}\n\n\n// a = {name: 'john', age: 25, salary: 35000, active: true}\n// b = {name: 'jane', age: 35, salary: 5000, active: true}\n// c = {name: 'jack', age: 24, salary: 6000, active: false}\n//\n// // Sorting\n// deleteSmallest(a)\n// insert(b)\n// insert(c)\n//\n// console.log([{name: 'john', age: 25, salary: 35000, active: true}, {name: 'jane', age: 35, salary: 5000, active: true}, {name: 'jack', age: 24, salary: 6000, active: false}])\n\n\n// var a = [{name: 'john', age: 25, salary: 35000, active: true}, {name: 'jane', age: 35, salary: 5000, active: true}, {name: 'jack', age: 24, salary: 6000, active: false}];\n// deleteSmallest(a);\n// console.log(a);\n//\n//\n// var b = [{name: 'john', age: 25, salary: 35000, active: true}, {name: 'jane', age: 35, salary"]}
{"task_id": "MBJSP/210", "prompt": "function isAllowedSpecificChar(string) {\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */", "entry_point": "isAllowedSpecificChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ABCDEFabcdef123450\";\nvar x0 = isAllowedSpecificChar(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"*&%@#!}{\";\nvar x1 = isAllowedSpecificChar(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"HELLOhowareyou98765\";\nvar x2 = isAllowedSpecificChar(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "language": "javascript", "canonical_solution": "  const regex = /^[a-z0-9]+$/i;\n  return regex.test(string);\n}", "completion": ["\n", "\n\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\n/**\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\n/**\n * * Write a ", "\n\nconst charSet = /^[a-zA-Z0-9]+$/;\n\nconst escapedCharSet = /[\\[\\]\\{\\},\\\\!@#$%^&*_+=|:-]/;\n\n/**\n * * Checks if the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n */\n\nconst isOnlyChar = (string) => string.match(charSet) === null;\n\nconst isOnlyCharWithEscapes = (string) => string.match(escapedCharSet) === null;\n\nconst isOnlyCharWithSpaces = (string) => string.match(/ /g) === null;\n\nconst isOnlyCharWithNewLine = (string) => string.match(/\\n/g) === null;\n\nconst isOnlyCharWithCarriageReturn = (string) => string.match(/\\r/g) === null;\n\nconst isOnlyCharWithDigit = (string) => string.match(/\\d/g) === null;\n\nexport {\n    charSet,\n    escapedCharSet,\n    isOnlyChar,\n    isOnlyCharWithEscapes,\n    isOnlyCharWithSpaces,\n    isOnlyCharWithNewLine,\n    isOnlyCharWithCarriageReturn,\n    isOnlyCharWithDigit\n};\n<|endoftext|>", "\n\t\tvar str = (string || '').toLowerCase();\n\n\t\treturn str.replace(/[a-z0-9]+/ig, function (substring) {\n\t\t\tvar result = true;\n\n\t\t\tfor (var i = 0; i < substring.length; i++) {\n\t\t\t\tvar charCode = substring.charCodeAt(i);\n\n\t\t\t\t// check charCode is between 0x00 and 0x7f\n\t\t\t\tif ((charCode < 0x00) || (charCode > 0x7f)) {\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t", "\n    return (\n        string.length >= 1 &&\n        string.length <= 20 &&\n        string.match(/^[a-zA-Z0-9 ]+$/)\n    );\n}\n\nexport function normalizeUrl(string) {\n    /**\n     * The normalization of URL allows the usage of 'www' and 'http://' in URLs without a scheme.\n     * We remove the 'http://' and 'www.' from the beginning of the URL string and verify that the string contains no a-z, a-z, 0-9 and space characters.\n     */\n    if (\n        string.match(/^(http:\\/\\/)(www\\.)/i) ||\n        string.match(/^www\\.([a-z0-9]{1,4})/i) ||\n        string.match(/^\\s+/)\n    ) {\n        return string;\n    }\n\n    return null;\n}\n\nexport function normalizeLocalFile(string) {\n    /**\n     * The normalization of local file allows the usage of 'file://' in URLs without a scheme.\n     * We remove the 'file://' from the beginning of the URL string and verify that the string contains no a-z, a-z, 0-9 and space characters.\n     */\n    if (string.match(/^(file:\\/\\/)/i)) {\n        return string;\n    }\n\n    return null;\n}\n\n/**\n * Remove leading and trailing whitespace characters from a string.\n * @param {string} string - The string to normalize.\n * @return {string} - The string with leading and trailing whitespace characters removed.\n */\nexport "]}
{"task_id": "MBJSP/211", "prompt": "function countNum(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */", "entry_point": "countNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countNum(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = countNum(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = countNum(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count numbers whose oth and nth bits are set.", "language": "javascript", "canonical_solution": "  return (n & 1) + (n >> 1);\n}", "completion": ["\n}\n\ncount_bits(0) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(1) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(2) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(3) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(4) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(5) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(6) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(7) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(8) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(9) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(10) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(11) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(12) {\n/**\n * * Count the number of bits set in a JavaScript number.\n */\n}\n\ncount_bits(13) {\n/**\n * * Count the number of bits set in", "\n};\n\n// ------------------------------------------------------------------------\n// **************************************************************************\n// The main() function runs a simple application that\n// reports the number of times each function is called.\n// **************************************************************************\n\n// ------------------------------------------------------------------------\n// count(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */\n};\n\n// ------------------------------------------------------------------------\n// **************************************************************************\n// The main() function runs a simple application that\n// reports the number of times each function is called.\n// **************************************************************************\n\n// ------------------------------------------------------------------------\n// count(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */\n};\n\n// ------------------------------------------------------------------------\n// **************************************************************************\n// The main() function runs a simple application that\n// reports the number of times each function is called.\n// **************************************************************************\n\n// ------------------------------------------------------------------------\n// count(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */\n};\n\n// ------------------------------------------------------------------------\n// count(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */\n};\n\n// ------------------------------------------------------------------------\n// count(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */\n};\n\n// ------------------------------------------------------------------------\n// count(n) {\n/**\n * * Write a JavaScript function to count numbers whose oth and nth bits are set.\n */\n};\n\n// ------------------------------------------------------------------------\n// count(n) {\n/**\n * * Write a JavaScript ", "\n", "\n", "\n"]}
{"task_id": "MBJSP/212", "prompt": "function fourthPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fourth power of n natural numbers.\n */", "entry_point": "fourthPowerSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = fourthPowerSum(arg00);\nvar v0 = 17;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = fourthPowerSum(arg10);\nvar v1 = 354;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = fourthPowerSum(arg20);\nvar v2 = 2275;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of fourth power of n natural numbers.", "language": "javascript", "canonical_solution": "  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 4);\n  }\n  return sum;\n}", "completion": ["\n\n    var n = parseInt(input.value);\n    if (isNaN(n)) return;\n    if (n == 0) {\n        output.value = \"0\";\n        return;\n    }\n    if (n == 1) {\n        output.value = \"1\";\n        return;\n    }\n    if (n == 2) {\n        output.value = \"4\";\n        return;\n    }\n    if (n == 3) {\n        output.value = \"16\";\n        return;\n    }\n    if (n == 4) {\n        output.value = \"64\";\n        return;\n    }\n    if (n == 5) {\n        output.value = \"256\";\n        return;\n    }\n    if (n == 6) {\n        output.value = \"1024\";\n        return;\n    }\n    if (n == 7) {\n        output.value = \"4096\";\n        return;\n    }\n    if (n == 8) {\n        output.value = \"16384\";\n        return;\n    }\n    if (n == 9) {\n        output.value = \"65536\";\n        return;\n    }\n    if (n == 10) {\n        output.value = \"262144\";\n        return;\n    }\n    if (n == 11) {\n        output.value = \"1048576\";\n        return;\n    }\n    if (n == 12) {\n        output.value = \"5242880\";\n        return;\n    }\n    if (n == 13) {\n        output.value = \"20971520\";\n        return;\n    }\n    if (n == 14) {\n        output.value =", "\nconst sum = n => Math.pow(4, n) + Math.pow(3, n) + Math.pow(2, n) + Math.pow(1, n);\n\nconsole.log(sum(1)) // 8\nconsole.log(sum(2)) // 32\nconsole.log(sum(3)) // 168\nconsole.log(sum(4)) // 1\nconsole.log(sum(5)) // 16\nconsole.log(sum(6)) // 272\nconsole.log(sum(7)) // 4912\nconsole.log(sum(8)) // 1\nconsole.log(sum(9)) // 16\nconsole.log(sum(10)) // 272\nconsole.log(sum(11)) // 4912\nconsole.log(sum(12)) // 1\nconsole.log(sum(13)) // 16\nconsole.log(sum(14)) // 272\nconsole.log(sum(15)) // 4912\nconsole.log(sum(16)) // 1\nconsole.log(sum(17)) // 16\nconsole.log(sum(18)) // 272\nconsole.log(sum(19)) // 4912\nconsole.log(sum(20)) // 1\nconsole.log(sum(21)) // 16\nconsole.log(sum(22)) // 272\nconsole.log(sum(23)) // 4912\nconsole.log(sum(24)) // 1\nconsole.log(sum(25)) // 16\nconsole.log(sum(26)) // 272\nconsole.log(sum(27)) // 4912\nconsole.log(sum(28)) // 1\nconsole.log(sum(29)) // 16\nconsole.log(sum(30)) // 272\nconsole.log(sum(31)) // 4912\nconsole.log(sum", "\n", "\nreturn [", "\n\n    if(n > 0) {\n        if(n % 4 === 0) {\n            sum += 4;\n        }\n\n        if(n % 8 === 0) {\n            sum += 8;\n        }\n\n        if(n % 16 === 0) {\n            sum += 16;\n        }\n\n        if(n % 32 === 0) {\n            sum += 32;\n        }\n\n        if(n % 64 === 0) {\n            sum += 64;\n        }\n\n        if(n % 128 === 0) {\n            sum += 128;\n        }\n\n        if(n % 256 === 0) {\n            sum += 256;\n        }\n    }\n\n    return sum;\n};\n\n// print( sumOfPowers(10) )\n// print( sumOfPowers(100) )\n// print( sumOfPowers(1000) )\n// print( sumOfPowers(10000) )\n// print( sumOfPowers(100000) )\n// print( sumOfPowers(1000000) )\n// print( sumOfPowers(10000000) )\n// print( sumOfPowers(100000000) )\n// print( sumOfPowers(1000000000) )\n<|endoftext|>"]}
{"task_id": "MBJSP/213", "prompt": "function concatenateStrings(testtup1, testtup2) {\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */", "entry_point": "concatenateStrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Manjeet\", \"Nikhil\", \"Akshat\"];\nvar arg01 = [\" Singh\", \" Meherwal\", \" Garg\"];\nvar x0 = concatenateStrings(arg00, arg01);\nvar v0 = [\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Shaik\", \"Ayesha\", \"Sanya\"];\nvar arg11 = [\" Dawood\", \" Begum\", \" Singh\"];\nvar x1 = concatenateStrings(arg10, arg11);\nvar v1 = [\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Harpreet\", \"Priyanka\", \"Muskan\"];\nvar arg21 = [\"Kour\", \" Agarwal\", \"Sethi\"];\nvar x2 = concatenateStrings(arg20, arg21);\nvar v2 = [\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to perform the concatenation of two string tuples.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] + testTup2[i]);\n  }\n  return result;\n}", "completion": ["\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\n\n}\n\n/**\n * * Write a ", "\n    ", "\n\nvar test_concat = function test_concat(s1, s2) {\n  return s1.concat(s2)\n};\n\n/**\n * * Create a function to generate a string with two arbitrary string tuple concatenated together.\n */\n\nvar test_cat = function test_cat(s1, s2) {\n  return s1.concat(s2)\n};\n\n/**\n * * Create a function to generate a string with two arbitrary string tuple concatenated together.\n */\n\nvar test_cat2 = function test_cat2(s1, s2) {\n  return s1 + s2\n};\n\n/**\n * * Given two tuples, generate a string with two arbitrary string tuple concatenated together.\n */\n\nvar test_cat3 = function test_cat3(s1, s2) {\n  return s1.concat(s2)\n};\n\n/**\n * * Given two tuples, generate a string with two arbitrary string tuple concatenated together.\n */\n\nvar test_cat4 = function test_cat4(s1, s2) {\n  return s1 + s2\n};\n\n/**\n * * Given two tuples, generate a string with two arbitrary string tuple concatenated together.\n */\n\nvar test_cat5 = function test_cat5(s1, s2) {\n  return s1.concat(s2)\n};\n\n/**\n * * Given two tuples, generate a string with two arbitrary string tuple concatenated together.\n */\n\nvar test_cat6 = ", "\n", "\nlet concatenator = () => {\n    return _concatenateStrings(testtup1, testtup2);\n};\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\nlet concatenator2 = () => {\n    return _concatenateStrings(testtup2, testtup1);\n};\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\nlet concatenator3 = () => {\n    return _concatenateStrings(testtup3, testtup4);\n};\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\nlet concatenator4 = () => {\n    return _concatenateStrings(testtup4, testtup3);\n};\n\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\nlet concatenator5 = () => {\n    return _concatenateStrings(testtup5, testtup6);\n};\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\nlet concatenator6 = () => {\n    return _concatenateStrings(testtup6, testtup5);\n};\n/**\n * * Write a function to perform the concatenation of two string tuples.\n */\nlet concatenator7 = () => {\n    return _concatenateStrings(testtup7, testtup8);\n};\n/**\n * * Write a "]}
{"task_id": "MBJSP/214", "prompt": "function degreeRadian(radian) {\n/**\n * * Write a function to convert radians to degrees.\n */", "entry_point": "degreeRadian", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 90;\nvar x0 = degreeRadian(arg00);\nvar v0 = 5156.620156177409;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 60;\nvar x1 = degreeRadian(arg10);\nvar v1 = 3437.746770784939;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 120;\nvar x2 = degreeRadian(arg20);\nvar v2 = 6875.493541569878;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert radians to degrees.", "language": "javascript", "canonical_solution": "  return radian * (180 / Math.PI);\n}", "completion": ["\n", "\n\n/**\n * * Convert radians to degrees\n *\n * @param {number} radian The number in radians.\n * @returns {number} A number in degrees\n */\n\n", "\n\n/**\n * * Convert radians to degrees.\n *\n * @", "\n", "\nvar radianToDegree = Math.toDegrees;\n/**\n * * Write a function to convert degrees to radians.\n */\nvar degreeToRadian = Math.toRadians;\n/**\n * * Write a function to convert radians to degrees.\n */\nvar radianToString = radianToDegree.bind(null, radian);\n/**\n * * Write a function to convert degrees to radians.\n */\nvar degreeToString = radianToDegree.bind(null, degree);\n\n/**\n * # Convert\n *\n * Converts the radian to the given units.\n *\n * ```\n * var convert = require('radians-convert');\n *\n * convert(radian, 'radian', 'degree'); // 45\n * convert(radian, 'degree', 'radian'); // 0.7853981633974483\n * ```\n *\n * @param {Number} radian\n * @param {String} fromUnit\n * @param {String} toUnit\n * @return {Number}\n */\n"]}
{"task_id": "MBJSP/215", "prompt": "function decodeList(alist) {\n/**\n * * Write a function to decode a run-length encoded given list.\n */", "entry_point": "decodeList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 1], 2, 3, [2, 4], 5, 1];\nvar x0 = decodeList(arg00);\nvar v0 = [1, 1, 2, 3, 4, 4, 5, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"];\nvar x1 = decodeList(arg10);\nvar v1 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar x2 = decodeList(arg20);\nvar v2 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to decode a run-length encoded given list.", "language": "javascript", "canonical_solution": "  let newArr = [];\n  for (let i = 0; i < alist.length; i++) {\n    let item = alist[i];\n    if (Array.isArray(item)) {\n      let count = item[0];\n      for (let j = 0; j < count; j++) {\n        newArr.push(item[1]);\n      }\n    } else {\n      newArr.push(item);\n    }\n  }\n  return newArr;\n}", "completion": ["\n    // Write a function to decode a run-length encoded given list.\n    var _runLengthDecode = function _runLengthDecode(list) {\n        return list.map(", "\n\n\t\t\t\t\tvar d, q;\n\t\t\t\t\tvar p = 0;\n\t\t\t\t\tvar r = 0;\n\t\t\t\t\tvar rl = 0;\n\t\t\t\t\tvar w = 0;\n\t\t\t\t\tvar c = 0;\n\t\t\t\t\tvar v = 0;\n\t\t\t\t\tvar p1 = 0;\n\t\t\t\t\tvar p2 = 0;\n\t\t\t\t\tvar p3 = 0;\n\t\t\t\t\tvar p4 = 0;\n\t\t\t\t\tvar l = 0;\n\t\t\t\t\tvar len = 0;\n\t\t\t\t\tvar len2 = 0;\n\t\t\t\t\tvar c2 = 0;\n\t\t\t\t\tvar c3 = 0;\n\t\t\t\t\tvar c4 = 0;\n\t\t\t\t\tvar rl2 = 0;\n\t\t\t\t\tvar rl3 = 0;\n\t\t\t\t\tvar rl4 = 0;\n\t\t\t\t\tvar len3 = 0;\n\t\t\t\t\tvar len4 = 0;\n\t\t\t\t\tvar c3a = 0;\n\t\t\t\t\tvar c3b = 0;\n\t\t\t\t\tvar c4a = 0;\n\t\t\t\t\tvar c4b = 0;\n\t\t\t\t\tvar u1 = 0;\n\t\t\t\t\tvar u2 = 0;\n\t\t\t\t\tvar u3 = 0;\n\t\t\t\t\tvar u4 = 0;\n\t\t\t\t\tvar c2a = 0;\n\t\t\t\t\tvar c2b = 0;\n\t\t\t\t\tvar c3a2 = 0;\n", "\n    if (!alist) {\n        return;\n    }\n\n    while (alist) {\n        uint32_t d;\n\n        // Read the decoded data\n        d = memcpy(decode, alist, sizeof(decode));\n        alist += sizeof(decode);\n\n        // Write the data to the output file\n        FILE_put_uint32(out, d);\n    }\n}\n\nstatic void\nwrite_object(FILE * out, const char * name)\n{\n    // Write the header\n    fprintf(out, \"  struct %s {\\n\", name);\n\n    // Write each of the fields\n    write_field(out, \"    uint32_t m_length;\", 1);\n    write_field(out, \"    uint8_t m_value[];\", 2);\n    fprintf(out, \"  };\\n\\n\");\n}\n\nstatic void\nwrite_header(FILE * out, const char * type)\n{\n    // Write the header\n    fprintf(out, \"struct %s {\\n\", type);\n    fprintf(out, \"  uint32_t m_length;\\n\");\n    fprintf(out, \"  uint8_t m_value[];\\n\");\n    fprintf(out, \"};\\n\\n\");\n}\n\nstatic void\nwrite_type(FILE * out, const char * type, const char * name)\n{\n    if (!name) {\n        name = type;\n    }\n\n    // Write the type declaration\n    fprintf(out, \"enum %s {\\n\", name);\n    fprintf(out, \"  %s_%s,\\n\", name, type);\n    fprintf(out, \"  %s", "\n  if (!(('b' == bytes[0]) && ('b' == bytes[1]))) {\n    printf(\"missing valid header\");\n    exit(EXIT_FAILURE);\n  }\n  int bytes_to_read = bytes[2];\n  int remaining_bytes = bytes_to_read - 3;\n  if (remaining_bytes < 0) {\n    printf(\"invalid remaining bytes\");\n    exit(EXIT_FAILURE);\n  }\n  int first_byte = bytes[3];\n  int num_words = (first_byte >> 5) + 1;\n  int num_rle_bytes = (first_byte & 0x1F) + 1;\n\n  int remaining_bytes_read = 0;\n  int rle_read = 0;\n  int num_rle_bytes_read = 0;\n  int num_words_read = 0;\n  int last_decoded_word = 0;\n  int last_decoded_byte = 0;\n\n  while (remaining_bytes_read < remaining_bytes) {\n    rle_read = decode_rle_byte(bytes, &num_rle_bytes_read,\n                                &remaining_bytes_read);\n    num_words_read = decode_word(bytes, &num_words_read,\n                                   &remaining_bytes_read, &rle_read,\n                                   &last_decoded_byte,\n                                   &last_decoded_word);\n  }\n  bytes[0] = 'b';\n  bytes[1] = 'b';\n  bytes[2] = num_words_read;\n  bytes[3] = num_rle_bytes", "\n\nvar length = decode_run_length_encoded_list_length(alist);\n\nvar list = decode_run_length_encoded_list(alist);\n\nif(list!= null) {\nif(length < list.length) {\nvar count = list.length - length;\n\nif(count == 1) {\nvar s = list[length];\n\nif(!is_empty(s)) {\n\ns = decode_single_char(s);\n\nappend_utf8(res, s);\n}\n} else {\nvar i = 0;\n\nwhile(count > 0) {\n\nvar s = list[length + i];\n\nif(!is_empty(s)) {\n\ns = decode_single_char(s);\n\nappend_utf8(res, s);\n\ncount -= 1;\n} else {\ni += 1;\n}\n}\n} else {\nvar i = 0;\nvar k = 0;\nvar l = 0;\n\nwhile(list.length > 0) {\n\nvar s = list[0];\n\nif(!is_empty(s)) {\n\nlist.splice(0, 1);\n\nif(!is_empty(s)) {\n\ns = decode_single_char(s);\n\nappend_utf8(res, s);\n\nk += 1;\n\n} else {\n\nl += 1;\n\n}\n\n} else {\n\nlist.splice(0, 1);\n\ni += 1;\n\n}\n}\n} else {\nvar i = 0;\n\nwhile(length > 0) {\n\nvar s = alist[length - i - 1];\n\nif(!is_empty(s)) {\n\ns"]}
{"task_id": "MBJSP/218", "prompt": "function minOperations(a, b) {\n/**\n * * Write a JavaScript function to find the minimum operations required to make two numbers equal.\n */", "entry_point": "minOperations", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = minOperations(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 10;\nvar x1 = minOperations(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar x2 = minOperations(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the minimum operations required to make two numbers equal.", "language": "javascript", "canonical_solution": "  if (a === b) return 0;\n  if (a > b) {\n    return b - a + 1;\n  }\n  return a - b + 1;\n}", "completion": ["\n", "\n", "\n", "\n", "\nconst write_java_function = "]}
{"task_id": "MBJSP/219", "prompt": "function extractMinMax(testtup, k) {\n/**\n * * Write a function to extract maximum and minimum k elements in the given tuple.\n */", "entry_point": "extractMinMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 20, 3, 7, 6, 8];\nvar arg01 = 2;\nvar x0 = extractMinMax(arg00, arg01);\nvar v0 = [3, 5, 8, 20];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 6, 1, 2, 7];\nvar arg11 = 3;\nvar x1 = extractMinMax(arg10, arg11);\nvar v1 = [1, 2, 4, 5, 6, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 8, 9, 11, 7];\nvar arg21 = 4;\nvar x2 = extractMinMax(arg20, arg21);\nvar v2 = [2, 3, 4, 7, 8, 9, 11];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract maximum and minimum k elements in the given tuple.", "language": "javascript", "canonical_solution": "  let min = testTup[0];\n  let max = testTup[0];\n  for (let i = 1; i < testTup.length; i++) {\n    if (testTup[i] < min) {\n      min = testTup[i];\n    }\n    if (testTup[i] > max) {\n      max = testTup[i];\n    }\n  }\n  return testTup.slice(0, k).concat(testTup.slice(testTup.length - k));\n}", "completion": ["\n/**\n * * Initialize the heap with the given value.\n */\n/**\n * * Return the maximum k elements in the given tuple.\n */\n\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n/**\n * * Return the maximum k elements in the given tuple.\n */\n}\n/**\n * * Return the minimum k elements in the given tuple.\n */\n}\n/**\n", "\nvar _writeK = function _writeK(testtup, k) {\n  var _testtup$split = testtup.split(' '),\n      _testtup$split2 = _slicedToArray(_testtup$split, 2),\n      minimum = _testtup$split2[0],\n      maximum = _testtup$split2[1];\n\n  var _writeMinK = function _writeMinK(minimum, output) {\n    if (!output) {\n      output = [];\n    }\n\n    output.push(minimum);\n  },\n      _writeMaxK = function _writeMaxK(maximum, output) {\n    if (!output) {\n      output = [];\n    }\n\n    output.push(maximum);\n  };\n\n  if (typeof k === 'undefined') {\n    _writeMinK(minimum, null);\n    _writeMaxK(maximum, null);\n    return output;\n  }\n\n  if (k < minimum.length) {\n    return null;\n  }\n\n  if (k > maximum.length) {\n    return null;\n  }\n\n  var extracted = minimum.slice(0, k);\n  var extractedMax = maximum.slice(0, k);\n\n  _writeMinK(extracted, null);\n  _writeMaxK(extractedMax, extracted);\n  return extracted;\n};\n\n/**\n * * Write a function to extract maximum and minimum k elements in the given tuple.\n */\nvar _writeKMax = ", "\n", "\n\nif (tup) {\nif (maxk.length() > 0) {\n\nif (tup.length() < k) {\n\nif (maxk.length() > 1) {\n\ntup = tup.map(", "\nexports.maxMinK = function (tup, k) {\n  var max = -Infinity;\n  var min = Infinity;\n\n  for (var i = 0; i < k; i++) {\n    if (tup[i] > max) {\n      max = tup[i];\n    }\n\n    if (tup[i] < min) {\n      min = tup[i];\n    }\n  }\n\n  return {\n    max: max,\n    min: min\n  };\n};\n\n/**\n * * Extract a minimum k elements in the given tuple.\n */\nexports.minK = function (tup, k) {\n  var min = Infinity;\n  for (var i = 0; i < k; i++) {\n    if (tup[i] < min) {\n      min = tup[i];\n    }\n  }\n\n  return {\n    min: min\n  };\n};\n\n/**\n * * Write a function to extract minimum and maximum k elements in the given tuple.\n */\nexports.minMaxK = function (tup, k) {\n  var min = Infinity;\n  var max = -Infinity;\n\n  for (var i = 0; i < k; i++) {\n    if (tup[i] < min) {\n      min = tup[i];\n    }\n\n    if (tup[i] > max) {\n      max = tup[i];\n    }\n  }\n\n  return {\n    min: min,\n    max: max\n  };\n};\n\n/**\n * * Write a function to extract maximum k elements in the given tuple.\n */\nexports.maxK = "]}
{"task_id": "MBJSP/220", "prompt": "function replaceMaxSpecialchar(text, n) {\n/**\n * * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */", "entry_point": "replaceMaxSpecialchar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Python language, Programming language.\";\nvar arg01 = 2;\nvar x0 = replaceMaxSpecialchar(arg00, arg01);\nvar v0 = \"Python:language: Programming language.\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"a b c,d e f\";\nvar arg11 = 3;\nvar x1 = replaceMaxSpecialchar(arg10, arg11);\nvar v1 = \"a:b:c:d e f\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ram reshma,ram rahim\";\nvar arg21 = 1;\nvar x2 = replaceMaxSpecialchar(arg20, arg21);\nvar v2 = \"ram:reshma,ram rahim\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "language": "javascript", "canonical_solution": "    let maxCount = n;\n    let textArr = text.split(\"\");\n    for (let i = 0; i < textArr.length; i++) {\n        if (textArr[i] === \" \") {\n            if (maxCount > 0) {\n                textArr[i] = \":\";\n                maxCount--;\n            }\n        } else if (textArr[i] === \",\") {\n            if (maxCount > 0) {\n                textArr[i] = \":\";\n                maxCount--;\n            }\n        } else if (textArr[i] === \".\") {\n            if (maxCount > 0) {\n                textArr[i] = \":\";\n                maxCount--;\n            }\n        }\n    }\n    return textArr.join(\"\");\n}", "completion": ["\n\n// 1. Define a function\n// 2. If you need more space, add additional parameters\n// 3. For each value of n, add the value of that function to the values of the returned array, and add a new value to the returned array.\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */\n\n// 1. Define a function\n// 2. If you need more space, add additional parameters\n// 3. For each value of n, add the value of that function to the values of the returned array, and add a new value to the returned array.\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */\n\n// 1. Define a function\n// 2. If you need more space, add additional parameters\n// 3. For each value of n, add the value of that function to the values of the returned array, and add a new value to the returned array.\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */\n\n// 1. Define a function\n// 2. If you need more space, add additional parameters\n// 3. For each value of n, add the value of that function to the values of the returned array, and add a new value to the returned array.\n\n/**\n * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n */\n\n// 1. Define a function\n// 2. If you need more space, add additional parameters\n// 3. For each value of n, add the value of that function to the values of the returned array, and add a new value to the returned array.\n\n/**\n * Write a ", "\n\n// \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n", "\n// $write: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of spaces with a colon.\n */\n// $writeWithColon: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of commas with a period.\n */\n// $writeWithPeriod: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of dots with a period.\n */\n// $writeWithDot: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of spaces with a semicolon.\n */\n// $writeWithSemiColon: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of commas with a plus.\n */\n// $writeWithPlus: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of commas with a plus.\n */\n// $writeWithPlus: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of commas with a plus.\n */\n// $writeWithPlus: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of spaces with a question mark.\n */\n// $writeWithQuestionMark: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of spaces with a tick.\n */\n// $writeWithTick: function(text, n) {\n\n/**\n * * Write a function to replace n occurrences of spaces with a dollar sign.\n */\n// $writeWithDollarSign: function(text, n) {\n\n/**\n * * Write a ", "\n    return {\n        /**\n         * * Replace maximum n occurrences of spaces, commas, or dots with a colon.\n         * *\n         * * @param {String} text\n         * * @param {Number} n\n         * * @return {String}\n         */\n        replace: function replace(text, n) {\n            var replace = \"\";\n            var next;\n            for (var i = 0; i < n; i++) {\n                next = text.indexOf(\" \", next + 1);\n                if (next === -1) next = n;\n                replace += \":\";\n            }\n            return text.replace(/ +/g, replace).replace(/\\.{2}/g, \".\").replace(/\\./g, \".\").replace(/,{2}/g, \",\");\n        },\n        /**\n         * * Replace maximum n occurrences of spaces, commas, or dots with a colon.\n         * *\n         * * @param {String} text\n         * * @param {Number} n\n         * * @return {String}\n         */\n        replaceAll: ", "\n"]}
{"task_id": "MBJSP/221", "prompt": "function firstEven(nums) {\n/**\n * * Write a JavaScript function to find the first even number in a given list of numbers.\n */", "entry_point": "firstEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 3, 4];\nvar x0 = firstEven(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 6, 7];\nvar x1 = firstEven(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the first even number in a given list of numbers.", "language": "javascript", "canonical_solution": "    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n            return nums[i];\n        }\n    }\n}", "completion": ["\n", "\n    ", "\n", "\n/**\n * * Write a JavaScript function to find the first odd number in a given list of numbers.\n */\n/**\n * * Write a JavaScript function to count the number of words in a given string.\n */\n/**\n * * Write a JavaScript function to find the first number in a given list of numbers that is divisible by a given number.\n */\n/**\n * * Write a JavaScript function to find the last number in a given list of numbers that is divisible by a given number.\n */\n/**\n * * Write a JavaScript function to find the last number in a given list of numbers that is divisible by a given number and is an even number.\n */\n/**\n * * Write a JavaScript function to find the number of words in a given string that contain a given substring.\n */\n/**\n * * Write a JavaScript function to find the number of words in a given string that contain a given substring in reverse order.\n */\n/**\n * * Write a JavaScript function to find the number of words in a given string that contain a given substring and start with a given prefix.\n */\n/**\n * * Write a JavaScript function to find the number of words in a given string that contain a given substring and start with a given prefix in reverse order.\n */\n/**\n * * Write a JavaScript function to find the number of words in a given string that contain a given substring and start with a given prefix and are not all capital letters.\n */\n/**\n * * Write a JavaScript function to find the number of words in a given string that contain a given substring and start with a given prefix and are not all capital letters in reverse order.\n */\n/**\n * * Write a JavaScript ", "\nvar printEven = function (nums) {\n    console.log('The even numbers are: ');\n\n    var i = 0;\n    while (i < nums.length) {\n        if (nums[i] % 2 === 0) {\n            console.log(nums[i]);\n        }\n        i++;\n    }\n};\n\nprintEven([1, 2, 3, 4, 5]);\n\n/**\n * * Write a JavaScript function to find the first odd number in a given list of numbers.\n */\nvar printOdd = function (nums) {\n    console.log('The odd numbers are: ');\n\n    var i = 0;\n    while (i < nums.length) {\n        if (nums[i] % 2!== 0) {\n            console.log(nums[i]);\n        }\n        i++;\n    }\n};\n\nprintOdd([1, 2, 3, 4, 5]);\n\n/**\n * * Write a JavaScript function to find the first number divisible by 3 in a given list of numbers.\n */\nvar printDivisibleBy3 = function (nums) {\n    console.log('The numbers divisible by 3 are: ');\n\n    var i = 0;\n    while (i < nums.length) {\n        if (nums[i] % 3 === 0) {\n            console.log(nums[i]);\n        }\n        i++;\n    }\n};\n\nprintDivisibleBy3([1, 2, 3, 4, 5]);\n\n/**\n * * Write a JavaScript function to find the first number divisible by 5 in a given list of numbers.\n */\nvar printDivisibleBy5 = "]}
{"task_id": "MBJSP/222", "prompt": "function checkType(testtuple) {\n/**\n * * Write a function to check if all the elements in tuple have same data type or not.\n */", "entry_point": "checkType", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 7, 3, 5, 6];\nvar x0 = checkType(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, \"4\"];\nvar x1 = checkType(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 2, 1, 4, 5];\nvar x2 = checkType(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if all the elements in tuple have same data type or not.", "language": "javascript", "canonical_solution": "  return testTuple.every((element) => typeof element === typeof testTuple[0]);\n}", "completion": ["\ntesttuple.forEach(", "\nit('should return true if all elements in tuple have same data type or not', ", "\nvar CheckType = function (dataType, data) {\nreturn dataType.toLowerCase() === data.toLowerCase()\n}\n/**\n * * Write a function to check if all the elements in tuple have same length or not.\n */\nvar CheckLength = function (length, data) {\nreturn length === data.length\n}\n/**\n * * Write a function to check if all the elements in tuple have same content or not.\n */\nvar CheckContent = function (content, data) {\nreturn content === data.join(\"\")\n}\n\n/**\n * * Write a function to check if all the elements in tuple have same string representation or not.\n */\nvar CheckStringRepresentation = function (stringRepresentation, data) {\nvar stringRepresentationArray = stringRepresentation.split(\".\")\nvar dataArray = data.split(\".\")\n\nfor (var i = 0; i < stringRepresentationArray.length; i++) {\nif (stringRepresentationArray[i]!== dataArray[i]) {\nreturn false\n}\n}\n\nreturn true\n}\n\n/**\n * * Write a function to check if all the elements in tuple have same length or not.\n */\nvar CheckNumber = function (number, data) {\nreturn Number.isInteger(number) && number === data\n}\n\n/**\n * * Write a function to check if all the elements in tuple have same currency or not.\n */\nvar CheckCurrency = function (currency, data) {\nreturn currency === data\n}\n\n/**\n * * Write a function to check if all the elements in tuple have same decimals or not.\n */\nvar CheckDecimals = function (decimals, data) {\nreturn decimals === data\n}\n\n/**\n * * Write a ", "\n\nlet dataType = getValueOrDefault(tuple, 0);\nlet typeCheck = getValueOrDefault(tuple, 1);\n\nif (typeCheck === true) {\n/**\n * * Checks if the data type of each element of tuple is same.\n */\n\ndataType == type;\n\n} else {\n/**\n * * Writes a error message and returns.\n */\n\nprint(`\\u001b[33m[ERROR]\\u001b[39m \\u001b[36m${type}${dataType}\\u001b[39m\\u001b[35m`);\n\n}\n\n} else {\n/**\n * * Writes a warning message and returns.\n */\n\nprint(`\\u001b[33m[WARN]\\u001b[39m \\u001b[36m${type}${dataType}\\u001b[39m\\u001b[35m`);\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n\n}\n", "\n"]}
{"task_id": "MBJSP/223", "prompt": "function isMajority(arr, n, x) {\n/**\n * * Write a function to check for majority element in the given sorted array.\n */", "entry_point": "isMajority", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 3, 3, 3, 10];\nvar arg01 = 7;\nvar arg02 = 3;\nvar x0 = isMajority(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 2, 4, 4, 4, 6, 6];\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = isMajority(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 1, 2, 2];\nvar arg21 = 5;\nvar arg22 = 1;\nvar x2 = isMajority(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check for majority element in the given sorted array.", "language": "javascript", "canonical_solution": "  let count = 0;\n  let i = 0;\n  let j = n - 1;\n  while (i <= j) {\n    if (arr[i] === x) {\n      count++;\n      i++;\n    } else if (arr[j] === x) {\n      count++;\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  if (count > n / 2) return true;\n  return false;\n}", "completion": ["\n", "\n    ", "\n\n/**\n * Check if the given array contains majority element.\n *\n * @param {Array} arr The array to check.\n * @param {number} n The size of each array.\n * @param {number} x The element to check for.\n * @return {boolean} True if the given array contains majority element, false otherwise.\n */\n\n\n/**\n * * Write a function to check for the majority element in the given sorted array.\n */\n\n/**\n * Check if the given array contains majority element.\n *\n * @param {Array} arr The array to check.\n * @param {number} n The size of each array.\n * @return {boolean} True if the given array contains majority element, false otherwise.\n */\n\n\n/**\n * * Write a function to get the majority element in the given sorted array.\n */\n\n/**\n * * Check if the given array contains majority element.\n */\n\n/**\n * Get the majority element in the given sorted array.\n *\n * @param {Array} arr The array to check.\n * @param {number} n The size of each array.\n * @return {number} Returns the majority element.\n */\n\n\n/**\n * * Write a ", "\nconst majority = (arr, n, x) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const count = arr.reduce((a, b) => a + (b === x? 1 : 0)),\n    sortedArr = arr.sort((a, b) => a - b);\n\n  return sortedArr[sortedArr.length - 1 - count / n];\n};\n\n/**\n * * Return a majority element in the given sorted array.\n */\nconst majority_1 = (arr, n, x) => majority(arr, n, x)(arr);\n\n/**\n * * Return a majority element in the given sorted array.\n */\nconst majority_2 = (arr, n, x) => arr.find((a, b) => (a === x && b === x)? true : (a === x? true : b === x? true : false))(arr);\n\n/**\n * * Return the majority element in the given sorted array.\n */\nconst majority_3 = (arr, n, x) => arr.map(a => (a === x? true : false))(arr).some(v => v === true && arr.length > 0? true : false)(arr);\n\n/**\n * * Return the majority element in the given sorted array.\n */\nconst majority_4 = (arr, n, x) => arr.reduce((a, b) => (a === x && b === x)? true : (a === x? true : b === x? true : false), false)(arr);\n\n/**\n * * Find the longest prefix of the given string.\n */\nconst longest_prefix = (str) => str.replace(new RegExp(/\\d+/g), '').", "\n\n/**\n * * Check if the given `arr` is a majority element.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/224", "prompt": "function countSetBits(n) {\n/**\n * * Write a JavaScript function to count set bits of a given number.\n */", "entry_point": "countSetBits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countSetBits(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = countSetBits(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = countSetBits(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count set bits of a given number.", "language": "javascript", "canonical_solution": "  let count = 0;\n  while (n) {\n    count += n & 1;\n    n >>= 1;\n  }\n  return count;\n}", "completion": ["\n\nvar x = new Uint8Array([1, 2, 4]);\nconsole.log(x.length);\nconsole.log(x.every(", "\n\n// output: function countSetBits(n) {\n\n", "\n", "\n", "\n"]}
{"task_id": "MBJSP/225", "prompt": "function findMin(arr, low, high) {\n/**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */", "entry_point": "findMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = 0;\nvar arg02 = 4;\nvar x0 = findMin(arg00, arg01, arg02);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 6, 8];\nvar arg11 = 0;\nvar arg12 = 2;\nvar x1 = findMin(arg10, arg11, arg12);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 5, 7, 9];\nvar arg21 = 0;\nvar arg22 = 4;\nvar x2 = findMin(arg20, arg21, arg22);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the minimum element in a sorted and rotated array.", "language": "javascript", "canonical_solution": "    if (low === high) {\n        return arr[low];\n    }\n    if (low > high) {\n        return arr[low];\n    }\n    if (low === high - 1) {\n        return Math.min(arr[low], arr[high]);\n    }\n    const mid = Math.floor((low + high) / 2);\n    if (arr[mid] > arr[mid + 1]) {\n        return arr[mid + 1];\n    }\n    if (arr[mid] < arr[mid - 1]) {\n        return arr[mid];\n    }\n    if (arr[mid] > arr[0]) {\n        return findMin(arr, low, mid - 1);\n    }\n    return findMin(arr, mid + 1, high);\n}", "completion": ["\nvar i, j;\nfor (i = low - 1, j = low + 1; i <= high - 1; j++, i++) {\nif (arr[i] > arr[j]) {\nswap(arr, i, j);\n}\n}\n}\n// Time Complexity : O(log(n))\n// Space Complexity : O(1)\n// Reference : https://www.youtube.com/watch?v=oRJN-i2E5w<|endoftext|>", "\nlet min = ", "\n    ", "\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript function to find the minimum element in a sorted and rotated array.\n */\n        /**\n * * Write a JavaScript ", "\n\nvar MIN = {\n    name: \"Min\",\n    test: function() {\n        if (isEmpty(arr)) {\n            console.log(arr);\n            return;\n        }\n\n        var n = arr.length;\n        var mid = Math.floor(n / 2);\n        var min = arr[mid];\n        var elem = arr[mid];\n\n        if (elem < min) {\n            min = elem;\n        }\n\n        // Move left half to the right\n        for (var i = mid - 1; i >= 0; i--) {\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n\n        // Move right half to the left\n        for (var i = mid + 1; i < n; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n\n        console.log(arr);\n        console.log(min);\n        return min;\n    }\n};\n\ntest(MIN);\n```\n\n**2.3.6**  \n[Run code](http://jsfiddle.net/z2eQa/4/)\n\n### 2.3.7\n\n#### 2.3.7.1\n\n```javascript\n"]}
{"task_id": "MBJSP/226", "prompt": "function oddValuesString(str) {\n/**\n * * Write a JavaScript function to remove the characters which have odd index values of a given string.\n */", "entry_point": "oddValuesString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcdef\";\nvar x0 = oddValuesString(arg00);\nvar v0 = \"ace\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python\";\nvar x1 = oddValuesString(arg10);\nvar v1 = \"pto\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"data\";\nvar x2 = oddValuesString(arg20);\nvar v2 = \"dt\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to remove the characters which have odd index values of a given string.", "language": "javascript", "canonical_solution": "    let result = '';\n    for (let i = 0; i < str.length; i++) {\n        if (i % 2 === 0) {\n            result += str[i];\n        }\n    }\n    return result;\n}", "completion": ["\nvar remove_odd_chars = function(str) {\n    return str.replace(/\\[[\\d\\s]{1,2}\\]/g, '');\n}\n\nconsole.log(remove_odd_chars('[]b[]c[]d[]e[]f[]g[]h[]i[]j[]k[]l[]m[]n[]o[]p[]q[]r[]s[]t[]u[]v[]w[]x[]y[]z[][]a[]'));\n```\n\n### [3.2.10 Remove all occurrences of a substring from a string](https://leetcode.com/problems/remove-all-occurrences-of-a-substring/)\n\n**<details><summary>Click to expand</summary>**\n<p>\n\n>**<font color=\"#ffffff\">DEMO</font>**\n\n```js\n// string to remove all occurrences of a substring from a string\nvar removeAllOccurrencesOfSubstring = function(str) {\n    var sub_str = arguments[1];\n    \n    return str.replace(new RegExp(sub_str, 'g'), '');\n}\n\nconsole.log(removeAllOccurrencesOfSubstring('aabbbbbba'));\n// abba\n```\n\n</p>\n</details>\n\n**<details><summary>Click to expand</summary>**\n<p>\n\n>**<font color=\"#ffffff\">Code</font>**\n\n```js\n", "\n", "\n\n", "\n\n$(\"#sanitize-button\").click(", "\nwindow.fn.removeOddChar = function() {\n  this.each("]}
{"task_id": "MBJSP/227", "prompt": "function minOfThree(a, b, c) {\n/**\n * * Write a function to find minimum of three numbers.\n */", "entry_point": "minOfThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar arg02 = 0;\nvar x0 = minOfThree(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar arg11 = 15;\nvar arg12 = 18;\nvar x1 = minOfThree(arg10, arg11, arg12);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = -10;\nvar arg21 = -20;\nvar arg22 = -30;\nvar x2 = minOfThree(arg20, arg21, arg22);\nvar v2 = -30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find minimum of three numbers.", "language": "javascript", "canonical_solution": "  return Math.min(a, Math.min(b, c));\n}", "completion": ["\n    ", "\n", "\nvar MIN = ", "\n\nconst min = a => b => c => Math.min(a, Math.min(b, c))\n\nconsole.log(min(10, 2, 5))\n// Output: 2\n```\n\n## \u53c2\u8003\n\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp-stringbuilder)\n- [C# StringBuilder](https://stackoverflow.com/questions/964345/csharp", "\n\nconst min = function(a, b, c) {\n  return Math.min(Math.min(a, b), c);\n}\n/**\n * * Write a function to find maximum of three numbers.\n */\n\nconst max = function(a, b, c) {\n  return Math.max(Math.max(a, b), c);\n}\n/**\n * * Write a function to check if three numbers are equal.\n */\n\nconst equal = function(a, b, c) {\n  return a === b && b === c && c === a;\n}\n/**\n * * Write a function to check if three numbers are equal.\n */\n\nconst equals = function(a, b, c) {\n  return a === b && b === c;\n}\n/**\n * * Write a function to check if three numbers are equal.\n */\n\nconst areEqual = function(a, b, c) {\n  return a === b && b === c;\n}\n/**\n * * Write a function to check if three numbers are equal.\n */\n\nconst areEqual0 = function(a, b, c) {\n  return b === c && c === a;\n}\n/**\n * * Write a function to check if three numbers are equal.\n */\n\nconst areEqual1 = function(a, b, c) {\n  return b === c && c === a;\n}\n/**\n * * Write a function to check if three numbers are equal.\n */\n\nconst areEqual2 = function(a, b, c) {\n  return b === c && c === a;\n}\n/**\n * * Write a function to check if three numbers are equal.\n */\n\nconst isEqual = "]}
{"task_id": "MBJSP/228", "prompt": "function allBitsSetInTheGivenRange(n, l, r) {\n/**\n * * Write a JavaScript function to check whether all the bits are unset in the given range or not.\n */", "entry_point": "allBitsSetInTheGivenRange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 1;\nvar arg02 = 2;\nvar x0 = allBitsSetInTheGivenRange(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 17;\nvar arg11 = 2;\nvar arg12 = 4;\nvar x1 = allBitsSetInTheGivenRange(arg10, arg11, arg12);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 39;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = allBitsSetInTheGivenRange(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether all the bits are unset in the given range or not.", "language": "javascript", "canonical_solution": "  return (n & (1 << l - 1)) === 0 && (n & (1 << r - 1)) === 0;\n}", "completion": ["\n\nreturn sum([isBitSetInTheGivenRange(l, r)? 0 : 1])\n}\n\n// 9. Write a JavaScript function to check whether all the bits are set in the given range or not.\n", "\nlet func = new Function(\n`\n    var b = '${binaryString}';\n    return ('0000000' + (b? '1' : '0')).slice(-n) === b.slice(0, -n);\n`\n);\nreturn func(n, l, r);\n}\n\n// TODO: write test cases.\nlet testCases = [\n  {\n    input: {n: 1, l: 0, r: 4},\n    output: true\n  },\n  {\n    input: {n: 2, l: 0, r: 4},\n    output: false\n  },\n  {\n    input: {n: 2, l: 0, r: 3},\n    output: false\n  },\n  {\n    input: {n: 2, l: 0, r: 2},\n    output: true\n  },\n  {\n    input: {n: 2, l: 0, r: 1},\n    output: false\n  },\n  {\n    input: {n: 2, l: 0, r: 0},\n    output: true\n  },\n  {\n    input: {n: 2, l: 1, r: 3},\n    output: false\n  },\n  {\n    input: {n: 2, l: 1, r: 2},\n    output: false\n  },\n  {\n    input: {n: 2, l: 1, r: 1},\n    output: true\n  },\n  {\n    input: {n: 2, l: 1, r: 0},\n    output: false\n  },\n  {\n    input: {n: 2, l: 2, r: 4},\n    output: false\n  },\n  {\n    input:", "\n\n", "\nlet bitsSet = {};\nfor (let i = 0; i < n; i += 1) {\nbitsSet[i] = true;\n}\nfor (let i = 0; i < l; i += 1) {\nbitsSet[i] = false;\n}\nfor (let i = r; i < n; i += 1) {\nbitsSet[i] = false;\n}\nfor (let i = 0; i < n; i += 1) {\nif (bitsSet[i]) {\ncontinue;\n} else {\nreturn false;\n}\n}\nreturn true;\n}\n\n/**\n * Write a JavaScript function to check whether any of the bits are set in the given range or not.\n */\n", "\n\n// Initialize variables\nlet bits = new Uint8Array(n);\nlet bits2 = new Uint8Array(n);\nlet bits3 = new Uint8Array(n);\nlet bits4 = new Uint8Array(n);\n\n// Fill the given array with 0s\nfor (let i = 0; i < n; ++i) {\n  bits[i] = 0;\n}\n\n// Fill the given array with 1s\nfor (let i = 0; i < l; ++i) {\n  bits[i] = 1;\n}\n\n// Fill the given array with 0s\nfor (let i = l; i < r; ++i) {\n  bits[i] = 0;\n}\n\n// Check if all bits are set\n// If yes, then it is always true, which is correct\nif (checkBits(bits)) {\n  console.log('All bits are set');\n}\n\n// Check if all bits are unset\n// If yes, then it is always true, which is correct\nif (!checkBits(bits)) {\n  console.log('All bits are unset');\n}\n\n// Check if all bits are set\n// If yes, then it is always true, which is correct\nif (checkBits(bits2)) {\n  console.log('All bits are set');\n}\n\n// Check if all bits are unset\n// If yes, then it is always true, which is correct\nif (!checkBits(bits2)) {\n  console.log('All bits are unset');\n}\n\n// Check if all bits are set\n// If yes, then it is always true, which is correct\nif (checkBits(bits3)) {\n  console.log('All bits"]}
{"task_id": "MBJSP/229", "prompt": "function reArrangeArray(arr, n) {\n/**\n * * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n */", "entry_point": "reArrangeArray", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, 2, -3, 4, 5, 6, -7, 8, 9];\nvar arg01 = 9;\nvar x0 = reArrangeArray(arg00, arg01);\nvar v0 = [-1, -3, -7, 4, 5, 6, 2, 8, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, -14, -26, 13, 15];\nvar arg11 = 5;\nvar x1 = reArrangeArray(arg10, arg11);\nvar v1 = [-14, -26, 12, 13, 15];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 24, 36, -42, -39, -78, 85];\nvar arg21 = 7;\nvar x2 = reArrangeArray(arg20, arg21);\nvar v2 = [-42, -39, -78, 10, 24, 36, 85];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "language": "javascript", "canonical_solution": "  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (j < n) {\n    if (arr[j] < 0) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return arr;\n}", "completion": ["\n// Write your code here\n    if(arr.length > 0) {\n        const arrLength = arr.length;\n        let negativeElementIndex = -1;\n        for(let i = 0; i < arrLength; i++) {\n            if(arr[i] < 0) {\n                negativeElementIndex = i;\n                break;\n            }\n        }\n        if(negativeElementIndex > -1) {\n            let swap;\n            for(let i = 0; i < arrLength; i++) {\n                if(i > negativeElementIndex) {\n                    swap = arr[i];\n                    arr[i] = arr[negativeElementIndex];\n                    arr[negativeElementIndex] = swap;\n                }\n            }\n        }\n    }\n    return arr;\n}<|endoftext|>", "\n", "\n", "\n  arr.unshift(0);\n  return arr;\n}\n\nconst array_concat = (...args) => Array.from(args);\n\n/**\n * Finds the largest item in an array.\n *\n * @param {Array} arr An array to find an item in.\n *\n * @return {String|Number|null} The largest item in the array, or null if the array is empty.\n */\n", "\n\n/**\n * * Given an array, find the index of the first positive element.\n * */\n\n"]}
{"task_id": "MBJSP/230", "prompt": "function replaceBlank(str1, ch) {\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */", "entry_point": "replaceBlank", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"hello people\";\nvar arg01 = \"@\";\nvar x0 = replaceBlank(arg00, arg01);\nvar v0 = \"hello@people\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python program language\";\nvar arg11 = \"\\$\";\nvar x1 = replaceBlank(arg10, arg11);\nvar v1 = \"python\\$program\\$language\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"blank space\";\nvar arg21 = \"-\";\nvar x2 = replaceBlank(arg20, arg21);\nvar v2 = \"blank-space\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to replace blank spaces with any character in a string.", "language": "javascript", "canonical_solution": "  return str1.split(\" \").join(char);\n}", "completion": ["\n    return str1.replace(/ /g, ch);\n}\n\n/**\n * * Function to replace a character in a string with a certain character.\n */\n", "\n    string_utils.replace_blank_spaces(str1) {\n        return str1.replace(/\\s+/g, ch);\n    }\n\n/**\n * * Convert a string to a single line string.\n */\n    string_utils.to_single_line(str1) {\n        return string_utils.replace_blank_spaces(str1).replace(/^\\s*|\\s*$/g, '');\n    }\n\n/**\n * * Get the number of lines in a string.\n */\n    string_utils.get_num_lines(str1) {\n        return str1.split(/\\n/g).length;\n    }\n\n/**\n * * Get the width of the widest line in a string.\n */\n    string_utils.get_widest_line_width(str1) {\n        var num_lines = string_utils.get_num_lines(str1);\n        if (num_lines === 0) {\n            return 0;\n        }\n        var lines = string_utils.to_single_line(str1).split(/\\n/g);\n        var widest_line_length = lines.map(", "\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n}\n\n/**\n * * Write a ", "\n#define Write_Function(str) if (str) { \\\n\t\t\t\t\t\t\t\tstr = str.ReplaceBlankSpaces(); \\\n\t\t\t\t\t\t\t\t} else { \\\n\t\t\t\t\t\t\t\t\tstr = \"\"; \\\n\t\t\t\t\t\t\t\t\t}\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n#define Write_Named_Function(str, type) if (str) { \\\n\t\t\t\t\t\t\t\t\tstr = str.ReplaceBlankSpaces(); \\\n\t\t\t\t\t\t\t\t\t} else { \\\n\t\t\t\t\t\t\t\t\t\tstr = \"\"; \\\n\t\t\t\t\t\t\t\t\t\t}\n/**\n * * Write a function to replace blank spaces with any character in a string.\n */\n#define Write_Named_Function_Include_Default(str, type) if (str) { \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstr = str.ReplaceBlankSpaces(type::defaultValue); \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else { \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstr = \"\"; \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/231", "prompt": "function maxSum(tri, n) {\n/**\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n */", "entry_point": "maxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [2, 1], [3, 3, 2]];\nvar arg01 = 3;\nvar x0 = maxSum(arg00, arg01);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [1, 2], [4, 1, 12]];\nvar arg11 = 3;\nvar x1 = maxSum(arg10, arg11);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2], [3, 2], [13, 23, 12]];\nvar arg21 = 3;\nvar x2 = maxSum(arg20, arg21);\nvar v2 = 28;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum sum in the given right triangle of numbers.", "language": "javascript", "canonical_solution": "  if (n <= 0) return 0;\n  const dp = new Array(n).fill(0);\n\n  dp[0] = tri[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i] = Math.max(dp[i - 1] + tri[i][i], dp[i - 1] + tri[i][i - 1]);\n  }\n  return dp[n - 1];\n}", "completion": ["\n", "\ntri = tri.reverse(); // reverse the triangle so we can start from the bottom\n\nvar max = 0;\n\nfor(var i = 0; i < tri.length; i++) {\ntri[i] = tri[i]!== null? tri[i].map(x => x + i) : [];\n\nmax = max > tri[i].reduce((x, y) => x + y)? max : tri[i].reduce((x, y) => x + y);\n}\n\nconsole.log(max);\n}\n\n/**\n * Write a function to find the maximum sum in the given right triangle of numbers.\n * Use an array-like object, and the `reduce()` function.\n */\n", "\nconst rightTriangle = [\n  [1],\n  [3, 4],\n  [6, 5, 7],\n  [4, 1, 8, 3]\n];\nconst maxSum = rightTriangle.reduce((a, b) => [a[0] + b[0], a[1] < b[1]? a : b], [0, false]);\nconsole.log(maxSum[0]); // Prints \"25\"\nconsole.log(maxSum[1]); // Prints \"true\"\n```\n\n</div>\n\n</section>\n\n## Challenge Seed\n<section id='challengeSeed'>\n\n<div id='js-seed'>\n\n```js\n", "\n  let f = (tri, n) {\n  tri = tri.slice(0, n);\n  let maxSum = 0;\n  tri.forEach((value, index) => {\n    if (index < n - 1) {\n      maxSum += value;\n    }\n  });\n  return maxSum;\n};\n```\n\n### maxSum\n\n\uc815\ub82c\uc774 \ub418\ub294 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. \ub9cc\uc57d \uc774\ub807\uac8c \uc815\ub82c\ub418\ub294 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\uac00 \uc788\ub2e4\uba74 `maxSum`\uc774 \ud604\uc7ac \uc815\ub82c\ub41c \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4.\n\n```java\npublic static int maxSum(int[] arr) {\n  int max = 0;\n  int sum = 0;\n  for (int value : arr) {\n    sum += value;\n    max = Math.max(max, sum);\n  }\n  return max;\n}\n```\n\n### maxSum2\n\n\uc815\ub82c\uc774 \ub418\ub294 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. \ub9cc\uc57d \uc774\ub807\uac8c \uc815\ub82c\ub418\ub294 \ufffd", "\n/**\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n */\n}\n/**\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n */\n/**\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n */\n}\n/**\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/232", "prompt": "function largNnum(list1, n) {\n/**\n * * Write a function to get the n largest items from a dataset.\n */", "entry_point": "largNnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg01 = 2;\nvar x0 = largNnum(arg00, arg01);\nvar v0 = [100, 90];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg11 = 5;\nvar x1 = largNnum(arg10, arg11);\nvar v1 = [100, 90, 80, 70, 60];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100];\nvar arg21 = 3;\nvar x2 = largNnum(arg20, arg21);\nvar v2 = [100, 90, 80];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to get the n largest items from a dataset.", "language": "javascript", "canonical_solution": "  let list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    list2.push(list1[i]);\n  }\n  list2.sort((a, b) => b - a);\n  return list2.slice(0, n);\n}", "completion": ["\nreturn _.chain(list1)\n  .max(n)\n  .map(", "\n\nlist1.sort(", "\n\n// write your n largest items function here\n\n}\n\n/*\nLet\u2019s see how we can write a function to get the n largest items from a dataset. We\u2019ll use the same data structure as we did in the example but with an additional data structure that holds a set of unique values.\n\nNotice that we\u2019re using a set instead of an array because we\u2019re using a set to look up items that have been inserted into the data structure. The code to get the n largest items from a dataset is pretty straight forward.\n*/\n\n// write your n largest items function here\n\n```\n\nYou can find this function in the `nlargest` function inside the `num()` function inside the `nlargest` function.\n\n<br>\n\n**`nlargest()`**<br>\n\n```js\nconst num = (list1, n) => {\n/**\n * * Write a function to get the n largest items from a dataset.\n * * @param  {array} list1 The data set.\n * * @param  {number}   n     The number of items to get the largest items from the data set.\n * * @return {array}         Returns an array of the n largest items from the data set.\n */\n\n// write your n largest items function here\n\n}\n\n```\n\nWe can also write a function to get the n largest items from a dataset. We\u2019ll use the same data structure as we did in the example but with an additional data structure that holds a set of unique values.\n\n<br>\n\n```js\nconst nlargest = (list1, n) => {\n/**\n * * Write a ", "\nlist1.sort(", "\nreturn list1;\n}\n</code></pre>\n<h3>Tests</h3>\n<p>To run the tests, the following dependencies must be included in the project:</p>\n<pre><code class=\"lang-scala\">\n[info]  sbt-launch-group-id: java,scala,scala-compiler-jars:test\n[info]  sbt-launch-group-id: scala,scala-compiler-jars:test\n[info]  sbt-launch-group-id: scala,scala-library-jars:test\n[info]  sbt-launch-group-id: scala,scala-test-jars:test\n[info]  sbt-launch-group-id: scala,scala-native-jars:test\n[info]  sbt-launch-group-id: scala,scala-native-jars:test,junit:test\n[info]  sbt-launch-group-id: scala,scala-native-jars:test,scala-compiler-jars:test,sbt-junit-suite:test\n[info]  sbt-launch-group-id: scala,scala-test-jars:test,sbt-junit-suite:test\n[info]  sbt-launch-group-id: scala,scala-native-jars:test,scala-compiler-jars:test,scala-library-jars:test\n[info]  sbt-launch-group-id: scala,scala-native-jars:test,scala-compiler-jars:test,sbt-junit-su"]}
{"task_id": "MBJSP/233", "prompt": "function lateralsufaceCylinder(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cylinder.\n */", "entry_point": "lateralsufaceCylinder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar x0 = lateralsufaceCylinder(arg00, arg01);\nvar v0 = 314.15000000000003;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 5;\nvar x1 = lateralsufaceCylinder(arg10, arg11);\nvar v1 = 125.66000000000001;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 10;\nvar x2 = lateralsufaceCylinder(arg20, arg21);\nvar v2 = 251.32000000000002;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the lateral surface area of a cylinder.", "language": "javascript", "canonical_solution": "  return 2 * 3.1415 * r * h;\n}", "completion": ["\nvar latSurface = '';\nlatSurface = '\\\n  // * Write a function to find the lateral surface area of a cylinder.\\n\\\n  \\n\\\n  // * The lateral surface area is calculated by using the following formula:\\n\\\n  //\\n\\\n  // *      \\u03B2 = r \\times h\\n\\\n  \\n\\\n  // * Return the value of \\u03B2.\\n\\\n  \\n\\\n  ';\n\nprint(latSurface);\nreturn latSurface;\n}\n</code></pre><h3>Define<span class=\"label label-primary\">Primary</span></h3><p>You can define variables for use later in the code.</p><pre><code class=\"lang-c++\">// * Define the variable for the radius of the cylinder.\\n\ndouble r;\n\\n\\\n// * Define the variable for the height of the cylinder.\\n\ndouble h;\n\\n\\\n// * Define the variable for the lateral surface area of the cylinder.\\n\ndouble latSurface;\n\\n\\\n// * Write a function to find the lateral surface area of a cylinder.\\n\ndouble latSurface(r, h) {\n/**\n * * Write a function to find the lateral surface area of a cylinder.\n */\nvar latSurface = '';\nlatSurface = '\\\n  // * Write a ", "\n// const p = new Point();\n// p.x = 0;\n// p.y = 0;\n// p.z = 0;\n// const a = new Vector();\n// a.x = 0;\n// a.y = 0;\n// a.z = 0;\n// const c = new Vector();\n// c.x = r;\n// c.y = 0;\n// c.z = 0;\n// const h = 0;\n// const b = new Vector();\n// b.x = 0;\n// b.y = h;\n// b.z = 0;\n// const d = new Vector();\n// d.x = 0;\n// d.y = 0;\n// d.z = r;\n// const u = new Vector();\n// u.x = 0;\n// u.y = 0;\n// u.z = 1;\n// const v = new Vector();\n// v.x = 0;\n// v.y = 0;\n// v.z = 0;\n// const w = new Vector();\n// w.x = 0;\n// w.y = 0;\n// w.z = -1;\n// const p3 = new Point();\n// p3.x = 0;\n// p3.y = h;\n// p3.z = 0;\n// const p2 = new Point();\n// p2.x = r;\n// p2.y = h;\n// p2.z = 0;\n// const p1 = new Point();\n// p1.x = r;\n// p1.y = h;\n// p1.z = -r;\n// const v3 = new Vector();\n// v3.x = p.x - p3.x;\n//", "\n        return x[0] * x[0] + x[1] * x[1] + r * r;\n    }\n    \n    /**\n     * * Write a function to find the height of the cylinder.\n     */\n    public static double LateralSurfaceArea(double r, double h) {\n        return Math.PI * (r * r + h * h);\n    }\n    \n    /**\n     * * Write a function to find the height of the cylinder.\n     */\n    public static double Height(double r, double h) {\n        return Math.sqrt(Math.pow(r, 2) + Math.pow(h, 2));\n    }\n    \n    /**\n     * * Write a function to find the lateral surface area of a cylinder with a specified radius.\n     */\n    public static double LateralSurfaceArea(double r) {\n        return Math.PI * (r * r);\n    }\n    \n    /**\n     * * Write a function to find the height of a cylinder with a specified radius.\n     */\n    public static double Height(double r) {\n        return Math.sqrt(Math.pow(r, 2));\n    }\n    \n    /**\n     * * Write a function to find the radius of a cylinder with a specified height.\n     */\n    public static double Radius(double h) {\n        return Math.sqrt(Math.pow(h, 2) / Math.PI);\n    }\n    \n    /**\n     * * Write a ", "\n\n  /**\n   * * Find the lateral surface area of a cylinder.\n   *\n   * @param  {Object}  r       Radius of cylinder\n   * @param  {Number}  h       Height of cylinder\n   * @param  {Number}  [z=h/2]  Height of cylinder\n   * @return {Number}            Surface area\n   */\n  return ", "\nfor(var i=0; i<r; ++i) {\n    for(var j=0; j<h; ++j) {\n        var x = i+0.5;\n        var y = j+0.5;\n        var z = i*i + j*j;\n        var sqrt = Math.sqrt(z);\n        var rho = sqrt*sqrt*sqrt*sqrt;\n        var z1 = z/sqrt;\n        var z2 = z*sqrt/z;\n        var r1 = rho*(z1-z2);\n        var r2 = rho*(z1+z2);\n        var area1 = Math.PI*r1*r1;\n        var area2 = Math.PI*r2*r2;\n        var area = area1 + area2;\n        yield {x, y, z, area};\n    }\n}\n\n"]}
{"task_id": "MBJSP/234", "prompt": "function volumeCube(l) {\n/**\n * * Write a function to find the volume of a cube.\n */", "entry_point": "volumeCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = volumeCube(arg00);\nvar v0 = 27;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = volumeCube(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = volumeCube(arg20);\nvar v2 = 125;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the volume of a cube.", "language": "javascript", "canonical_solution": "  return Math.pow(l, 3);\n}", "completion": ["\n", "\n", "\n", "\nvar writeToFile = function writeToFile(filename, file, onSuccess) {\n\tvar blob = new Blob([file], { type: 'text/plain' })\n\twindow.URL.createObjectURL(blob)\n\tvar link = document.createElement('a')\n\tlink.setAttribute('download', filename)\n\tlink.style.display = 'none'\n\tlink.href = window.URL.createObjectURL(blob)\n\tlink.addEventListener('click', function () {\n\t\tlink.removeEventListener('click', arguments.callee, false)\n\t\tlink.download = filename\n\t\tlink.click()\n\t})\n\tdocument.body.appendChild(link)\n\tlink.click()\n\twindow.URL.revokeObjectURL(link.href)\n\tif (onSuccess) onSuccess()\n}\n\n/**\n * * Generate an array of all possible orderings of a set of 4 elements.\n */\n", "\n"]}
{"task_id": "MBJSP/235", "prompt": "function evenBitSetNumber(n) {\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */", "entry_point": "evenBitSetNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitSetNumber(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitSetNumber(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitSetNumber(arg20);\nvar v2 = 30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to set all even bits of a given number.", "language": "javascript", "canonical_solution": "    count = 0; res = 0; temp = n\n    while (temp > 0) {\n        if (count % 2 == 1) {\n            res |= (1 << count)\n        }\n        count += 1\n        temp >>= 1\n    }\n    return (n | res)\n}", "completion": ["\nSetFunction(n, function (num) {\n    var bit = (num >> 0) & 1;\n    return bit;\n});\n\n// **************************\n// *** Set2Function ***\n// **************************\n\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */\nSet2Function(n, function (num) {\n    var bit = (num >> 0) & 1;\n    return bit;\n});\n\n// **************************\n// *** Set3Function ***\n// **************************\n\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */\nSet3Function(n, function (num) {\n    var bit = (num >> 0) & 1;\n    return bit;\n});\n\n// **************************\n// *** Set4Function ***\n// **************************\n\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */\nSet4Function(n, function (num) {\n    var bit = (num >> 0) & 1;\n    return bit;\n});\n\n// **************************\n// *** Set5Function ***\n// **************************\n\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */\nSet5Function(n, function (num) {\n    var bit = (num >> 0) & 1;\n    return bit;\n});\n\n// **************************\n// *** Set6Function ***\n// **************************\n\n/**\n * * Write a JavaScript function to set all even bits of a given number.\n */\nSet6Function(n, ", "\n    ", "\n", "\nexport function WriteEvenBits(n: number) {\n    return \"", "\nconst writeEvenBitsOfNumber = function (n) {\n  let i = 0;\n  while (i < n) {\n    this.setBit(i, true);\n    i++;\n  }\n};\n\n/**\n * * Write a JavaScript function to set all odd bits of a given number.\n */\nconst writeOddBitsOfNumber = function (n) {\n  let i = 0;\n  while (i < n) {\n    this.setBit(i, false);\n    i++;\n  }\n};\n\n/**\n * * Write a JavaScript function to set all bits of a given number.\n */\nconst writeBitsOfNumber = function (n) {\n  let i = 0;\n  while (i < n) {\n    this.setBit(i, true);\n    i++;\n  }\n};\n\n/**\n * * Write a JavaScript function to clear all bits of a given number.\n */\nconst clearBitsOfNumber = function (n) {\n  let i = 0;\n  while (i < n) {\n    this.clearBit(i);\n    i++;\n  }\n};\n\n/**\n * * Write a JavaScript function to set all bits of a given number.\n */\nconst setBitsOfNumber = function (n) {\n  let i = 0;\n  while (i < n) {\n    this.setBit(i);\n    i++;\n  }\n};\n\n/**\n * * Write a JavaScript function to clear all bits of a given number.\n */\nconst writeWithClearBit = "]}
{"task_id": "MBJSP/236", "prompt": "function noOfTriangle(n, k) {\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */", "entry_point": "noOfTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 2;\nvar x0 = noOfTriangle(arg00, arg01);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 3;\nvar x1 = noOfTriangle(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 3;\nvar x2 = noOfTriangle(arg20, arg21);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "language": "javascript", "canonical_solution": "    if (n < k) {\n        return -1;\n    } else {\n        tri_up = 0;\n        tri_up = ((n - k + 1) * (n - k + 2)) / 2;\n        tri_down = 0;\n        tri_down = ((n - 2 * k + 1) * (n - 2 * k + 2)) / 2;\n        return tri_up + tri_down;\n    }\n}", "completion": ["\nconst countTriangles = function(n, k) {\n    return n.reduce((c, i) => {\n        if (i === 0) {\n            return c;\n        } else if (i === 1) {\n            return c + n[0] * (k - 2) / 4;\n        } else if (i === 2) {\n            return c + n[0] * (k - 2) / 4 + n[1] * (k - 2) / 4;\n        } else {\n            return c + countTriangles(n.slice(0, i), k);\n        }\n    }, 0);\n};\n\n/**\n * **countTriangles()** - Count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n *\n * * **Parameters:** `n` - The given equilateral triangle.\n * * **Returns:** The maximum number of equilateral triangles that can be formed within the given equilateral triangle.\n *\n * * **Example:**\n *\n *     > countTriangles([2, 3, 4])\n *     10\n *\n */\nconst countTriangles = function(n) {\n    return countTriangles(n, 2);\n};\n\n/**\n * **maxTriangles()** - Returns the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n *\n * * **Parameters:** `n` - The given equilateral triangle.\n * * **Returns:** The maximum number of equilateral triangles that can be formed within the given equilateral triangle.\n *\n * * **Example:**\n *\n *     > maxTriangles([2, 3, 4])\n *     10\n *\n */\nconst maxTriangles = ", "\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n/**\n * * Write a JavaScript ", "\nn = n || 0;\nk = k || 0;\n\n/**\n *     *            *\n *     *            *\n *   * *            * *\n *     *            *\n *       *\n *         * * * * *\n *         * * *\n *         *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n */\n\n// Return an equilateral triangle with n right angles with the vertices 0, 1, 2,...\nreturn _.max([2 * n - k + 1, 2 * n - k + 1, 2 * n - k + 1]) + k;\n};\n\n// Number of equilateral triangles that can be formed within a given equilateral triangle.\n//\n// n \u2014 integer\n// k \u2014 integer\n//\n// Returns: integer\nvar triangleCount = function triangleCount(n, k) {\n/**\n *     *\n *     * *\n *     * *\n *     * *\n */\nn = n || 0;\nk = k || 0;\n\n/**\n *     * *\n *     * *\n *     * *\n *   * *\n *     *\n */\n\n// Return the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nreturn _.max([2 * n - k + 1, 2 * n - k + 1, 2 * n - k + 1]) + k;\n};\n\n// Number of equilateral triangles that can be formed within a given equilateral triangle.\n//\n// n \u2014 integer\n// k \u2014 integer\n//\n// Returns: integer\nvar triangleCount2 = ", "\n\n  const maxTriangle = function (triangle) {\n    const triangleLength = triangle.length;\n    const triangleMiddle = triangle[triangleLength - 1];\n    const triangleBottom = triangle[triangleLength - 2];\n    return triangleLength - 2 - (triangleMiddle - triangleBottom).length;\n  };\n  return maxTriangle(n, k);\n};\n\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n\nconst maxTriangle = function (triangle) {\n  const triangleLength = triangle.length;\n  const triangleMiddle = triangle[triangleLength - 1];\n  const triangleBottom = triangle[triangleLength - 2];\n  const triangleMiddleDiagonal = (triangleMiddle - triangleBottom).length;\n  const triangleMiddleBottom = triangleBottom[triangleLength - 1];\n  const triangleMiddleDiagonalBottom = (triangleMiddleBottom - triangleBottom).length;\n  return triangleLength - 2 - triangleMiddleDiagonal - triangleMiddleDiagonalBottom;\n};\n\n/**\n * * Write a JavaScript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n */\n\nconst maxTriangle = ", "\n\n//     /**\n//      * Find the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n//      *\n//      * @param {number} n The length of the side of the equilateral triangle.\n//      * @param {number} k The length of the third side of the equilateral triangle.\n//      * @returns {number}\n//      */\n//     "]}
{"task_id": "MBJSP/237", "prompt": "function checkOccurences(testlist) {\n/**\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n */", "entry_point": "checkOccurences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]];\nvar x0 = checkOccurences(arg00);\nvar v0 = {\"[1, 3]\":2,\"[2, 5]\":2,\"[3, 6]\":1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]];\nvar x1 = checkOccurences(arg10);\nvar v1 = {\"[2, 4]\":2,\"[3, 6]\":2,\"[4, 7]\":1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]];\nvar x2 = checkOccurences(arg20);\nvar v2 = {\"[2, 13]\":1,\"[11, 23]\":1,\"[12, 25]\":2,\"[16, 23]\":1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "language": "javascript", "canonical_solution": "    let result = {};\n    for (let i = 0; i < testList.length; i++) {\n        let tuple = testList[i];\n        let first = tuple[0];\n        let second = tuple[1];\n        if (result[`${first},${second}`]) {\n            result[`${first},${second}`] += 1;\n        } else {\n            result[`${first},${second}`] = 1;\n        }\n    }\n    return result;\n}", "completion": ["\n\n'use strict';\n\nvar assert = require('assert');\nvar each = require('async/each');\nvar read = require('../read-csv');\n\nvar name ='mock';\n\nvar readFile = require('../read-file');\n\nvar readTuple = readFile.readTuple;\n\nvar uri ='mock';\n\nvar readTuples = readFile.readTuples;\n\nvar readTuplesRecursively = readFile.readTuplesRecursively;\n\nvar readTuplesString = readFile.readTuplesString;\n\nvar testTuples = [\n  {\n    title: 'test',\n    author: 'test',\n    category: 'test',\n    journal: 'test',\n    publisher: 'test',\n    year: 'test',\n    volume: 'test',\n    number: 'test',\n    pages: 'test',\n    doi: 'test',\n    pmid: 'test',\n    url: 'test'\n  },\n  {\n    title: 'test',\n    author: 'test',\n    category: 'test',\n    journal: 'test',\n    publisher: 'test',\n    year: 'test',\n    volume: 'test',\n    number: 'test',\n    pages: 'test',\n    doi: 'test',\n    pmid: 'test',\n    url: 'test'\n  },\n  {\n    title: 'test',\n    author: 'test',\n    category: 'test',\n    journal: 'test',\n    publisher: 'test',\n    year: 'test',\n    volume: 'test',\n    number: 'test',\n    pages: 'test',\n    doi: 'test',\n", "\n", "\n\n/**\n * * Check if the occurrences of records which occur similar times in the given tuples are identical.\n */\n\n/**\n * * Assign the given tuple to the given occurence object.\n */\n\n}\n\n/**\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n */\n\n/**\n * * Check if the occurrences of records which occur similar times in the given tuples are identical.\n */\n\n/**\n * * Assign the given tuple to the given occurence object.\n */\n\n/**\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n */\n\n/**\n * * Check if the occurrences of records which occur similar times in the given tuples are identical.\n */\n\n/**\n * * Assign the given tuple to the given occurence object.\n */\n\n/**\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n */\n\n/**\n * * Check if the occurrences of records which occur similar times in the given tuples are identical.\n */\n\n/**\n * * Assign the given tuple to the given occurence object.\n */\n\n/**\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n */\n\n/**\n * * Check if the occurrences of records which occur similar times in the given tuples are identical.\n */\n\n/**\n * * Assign the given tuple to the given occurence object.\n */\n\n/**\n * * Write a ", "\n", "\n\n// Define the function.\n"]}
{"task_id": "MBJSP/238", "prompt": "function numberOfSubstrings(str) {\n/**\n * * Write a JavaScript function to count number of non-empty substrings of a given string.\n */", "entry_point": "numberOfSubstrings", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abc\";\nvar x0 = numberOfSubstrings(arg00);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcd\";\nvar x1 = numberOfSubstrings(arg10);\nvar v1 = 10;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcde\";\nvar x2 = numberOfSubstrings(arg20);\nvar v2 = 15;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count number of non-empty substrings of a given string.", "language": "javascript", "canonical_solution": "    let count = 0;\n    let len = str.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j <= len; j++) {\n            let substr = str.substring(i, j);\n            if (substr.length > 0) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "completion": ["\n\n/**\n * * Count number of non-empty substrings of a given string.\n * */\n\n  /**\n   * * Concat all the substrings of a given string.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   * * Return a new string where all the substrings have been replaced by their counts.\n   * */\n\n  /**\n   ", "\nconst get_substrings = function (str) {\n    return str.split('').map(char => char.charCodeAt(0));\n};\nconst get_substring_count = function (str, target) {\n    const substrings = get_substrings(str);\n    return substrings.filter(substring => substring === target).length;\n};\nconst get_length = function (str) {\n    return str.length;\n};\nconst get_word_count = function (str) {\n    const words = str.split(' ');\n    return words.length;\n};\nconst get_char_count = function (str) {\n    return str.charCodeAt(0).toString().length;\n};\nconst get_sentence_count = function (str) {\n    const sentences = str.split('.');\n    return sentences.length;\n};\nconst get_title_length = function (str) {\n    return str.toString().length;\n};\nconst get_average_length = function (str) {\n    return str.toString().length / str.split(' ').length;\n};\nconst get_substring_length = function (str, target) {\n    const substrings = get_substrings(str);\n    return substrings.filter(substring => substring === target).length / get_length(str);\n};\nconst get_word_length = function (str) {\n    const words = str.split(' ');\n    return words.length / str.toString().length;\n};\nconst get_char_length = function (str) {\n    return str.toString().length;\n};\nconst get_sentence_length = ", "\ncountNonemptySubstrings(str, substrings) {\n  let substringCount = 0;\n  for (let i = 0; i < substrings.length; i++) {\n    substringCount += str.indexOf(substrings[i], i)!== -1;\n  }\n\n  return substringCount;\n}\n\n/**\n * * Write a JavaScript function to find the longest substring in a given string.\n */\n\nlet substringLength = longestSubstring(str, substrings) {\n  let longestLength = 0;\n  for (let i = 0; i < substrings.length; i++) {\n    let substringLength = str.indexOf(substrings[i], i)!== -1? str.indexOf(substrings[i], i) : 0;\n    if (substringLength > longestLength) {\n      longestLength = substringLength;\n    }\n  }\n\n  return longestLength;\n};\n\n/**\n * * Write a JavaScript function to find the number of words in a given string.\n */\n\nlet wordsCount = countWords(str, words) {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (str.indexOf(words[i], i)!== -1) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\n/**\n * * Write a JavaScript ", "\nvar result;\nresult = _.chain(str).filter(", "\nvar substrings = str.split('');\nvar substringCount = 0;\nvar i = 0;\nvar len = substrings.length;\n\nfor (var i = 0; i < len; i++) {\nvar substring = substrings[i];\nif (substring!== '') {\nsubstringCount++;\n}\n}\nreturn substringCount;\n}\n\nreturn str;\n}\n\n"]}
{"task_id": "MBJSP/239", "prompt": "function getTotalNumberOfSequences(m, n) {\n/**\n * * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n */", "entry_point": "getTotalNumberOfSequences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 4;\nvar x0 = getTotalNumberOfSequences(arg00, arg01);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 2;\nvar x1 = getTotalNumberOfSequences(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar arg21 = 3;\nvar x2 = getTotalNumberOfSequences(arg20, arg21);\nvar v2 = 84;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "language": "javascript", "canonical_solution": "  let total = 0;\n  for (let i = 1; i <= m; i++) {\n    for (let j = i + 1; j <= m + n; j++) {\n      if (j - i >= n) {\n        total++;\n      }\n    }\n  }\n  return total;\n}", "completion": ["\nlet getNumberOfSequences = ", "\nconst n = m - 2;\nlet res = 0;\nfor (let i = 2; i <= n; i++) {\nres += Math.factorial(n - i);\n}\nreturn res;\n}\n\nprint(NumberOfPossibleSequences(2, 3))\n// Expected Output: 1\n// 1\n// 2\n// 6\n// 24\n// 120\n// 720\n// 5040\n// 40320\n// 362880\n\n/**\n * * Write a ", "\nlet path = ", "\nlet n = 3;\nlet m = 7;\n}\n```\n\n## Solution\n\nThe basic idea is to compute all possible subsequences. The subsequences should be all sequences of length n, where each element is greater than or equal to twice of the previous element but less than or equal to m.\n\nFirst, we need to compute the numbers of possible sequences of length one. If we can find the number of sequences of length one in the table, we have our answer.\n\n```javascript\nlet n = 1;\nlet m = 7;\nlet table = new Array(n + 1).fill(0);\ntable[0] = 1;\ntable[1] = 1;\nfor (let i = 2; i <= n; i++) {\n    table[i] = table[i - 1] + table[i - 2];\n}\n```\n\nNow we will compute all possible subsequences of length two.\n\n```javascript\nlet n = 2;\nlet m = 7;\nlet table = new Array(n + 1).fill(0);\ntable[0] = 1;\ntable[1] = 2;\ntable[2] = 4;\nfor (let i = 3; i <= n; i++) {\n    table[i] = table[i - 1] + table[i - 2] + table[i - 3];\n}\n```\n\nWe can obtain all possible subsequences of length three by using the previous one.\n\n```javascript\nlet n = 3;\nlet m = 7;\nlet table = new Array(n + 1).fill(0);\ntable[0] = 1;\ntable[1] = 2;\ntable[2] = 4;\ntable[3] = 7;\nfor (let i = 4; i", "\n\n// write a "]}
{"task_id": "MBJSP/240", "prompt": "function replaceList(list1, list2) {\n/**\n * * Write a function to replace the last element of the list with another list.\n */", "entry_point": "replaceList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 5, 7, 9, 10];\nvar arg01 = [2, 4, 6, 8];\nvar x0 = replaceList(arg00, arg01);\nvar v0 = [1, 3, 5, 7, 9, 2, 4, 6, 8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar arg11 = [5, 6, 7, 8];\nvar x1 = replaceList(arg10, arg11);\nvar v1 = [1, 2, 3, 4, 5, 6, 7, 8];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"blue\", \"green\"];\nvar arg21 = [\"yellow\"];\nvar x2 = replaceList(arg20, arg21);\nvar v2 = [\"red\", \"blue\", \"yellow\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to replace the last element of the list with another list.", "language": "javascript", "canonical_solution": "  const list = [...list1];\n  list.pop();\n  list.push(...list2);\n  return list;\n}", "completion": ["\n\n/**\n * * Write a ", "\n\nif (list1.length > list2.length) {\nlist1.splice(list1.length - 1, 0, list2);\n} else {\nlist2.splice(list2.length - 1, 0, list1);\n}\n\n});\n\n\n\n// end module: string/match\nreturn module.exports;\n});\n\n$__System.register(\"2\", [\"a\", \"b\", \"c\"], function (_export) {\n  var a, b, c;\n  return {\n    setters: [", "\n    return ", "\nvar a = [1, 2, 3];\na.pop();\nconsole.log(a);\n```\n```\n[1, 2, 3]\n```\n\n# [\ubb38\uc11c](https://github.com/naver/egjs)\n\n## \uc81c\ubaa9\n\n- [\ubc30\uc5f4 \uc4f0\ub808\ub4dc](https://github.com/naver/egjs/tree/master/examples/array-guide)\n- [\uc544\uc774\ud15c \uc4f0\ub808\ub4dc](https://github.com/naver/egjs/tree/master/examples/item-guide)\n- [\uc5f0\uad00\uad00\uacc4 \uc4f0\ub808\ub4dc](https://github.com/naver/egjs/tree/master/examples/graph-guide)\n- [\ub370\uc774\ud130 \uc120\ud0dd](https://github.com/naver/egjs/tree/master/examples/data-guide)\n- [\ucf5c\ubc31 \uc4f0\ub808\ub4dc](https://github.com/naver/egjs/tree/master/examples/callback-guide)\n- [\ub354\ubcf4\uae30 \uc4f0\ub808\ub4dc](https://github.com/naver/egjs/tree/master/examples/duplicate-guide)\n- [\uc0c1\uc218 \uc4f0\ub808\ub4dc](https://github.com/naver/egjs/tree/master/examples/variable-guide)\n- [\ub354\ubcf4\uae30 \uc4f0\ub808\ub4dc", "\n\n}\n/**\n * * Write a function to swap the first element of the list with the last element of the list.\n */\n\n"]}
{"task_id": "MBJSP/241", "prompt": "function array3d(m, n, o) {\n/**\n * * Write a function to generate a 3d array having each element as '*'.\n */", "entry_point": "array3d", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = array3d(arg00, arg01, arg02);\nvar vnif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 3;\nvar arg12 = 4;\nvar x1 = array3d(arg10, arg11, arg12);\nvar v1 = [[[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 2;\nvar arg22 = 3;\nvar x2 = array3d(arg20, arg21, arg22);\nvar v2 = [[[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to generate a 3d array having each element as '*'.", "language": "javascript", "canonical_solution": "  return Array(o).fill().map(() => Array(n).fill().map(() => Array(m).fill('*')))\n}", "completion": ["\n    def write3d(m, n, o, fn) {\n        for (i <- 0 until m) {\n            for (j <- 0 until n) {\n                fn(i, j, o)\n            }\n        }\n    }\n\n    // m*n*o\n    write3d(m, n, o, rand)\n\n    println(\"done\")\n}\n\nprintln(\"running benchmarks\")\nrunBenchmarks(5, 1000)\n\n// for (i <- 0 until 5) {\n//   for (j <- 0 until 1000) {\n//     runBenchmarks(i, j)\n//   }\n// }\n```\n\n`runBenchmarks` takes a few arguments:\n\n- `i`: the number of iterations of the loop\n- `j`: the number of batches of the loop\n\nIt also takes a callback that executes once before the next loop.\n\nRun the benchmarks with this command:\n\n```bash\n$> jmeter -n -f benchmarks/benchmark.jmx\n```\n\n```jmx\nThread: 'benchmark_java_sun_management_G1GarbageCollector_G1Benchmark'\n  Thread.start(): 367: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092.72: [0] 6092", "\n", "\nexport const array3d = (m, n, o) => {\n  const r = [];\n  for (let i = 0; i < m; i++) {\n    const c = [];\n    for (let j = 0; j < n; j++) {\n      c.push('*');\n    }\n    r.push(c);\n  }\n  return r;\n};\n\n/**\n * * Write a function to generate a 3d array having each element as 'o'.\n */\nexport const array3dO = (m, n, o) => {\n  const r = [];\n  for (let i = 0; i < m; i++) {\n    const c = [];\n    for (let j = 0; j < n; j++) {\n      c.push('o');\n    }\n    r.push(c);\n  }\n  return r;\n};\n\n/**\n * * Write a function to generate a 3d array having each element as 'X'.\n */\nexport const array3dX = (m, n, o) => {\n  const r = [];\n  for (let i = 0; i < m; i++) {\n    const c = [];\n    for (let j = 0; j < n; j++) {\n      c.push('X');\n    }\n    r.push(c);\n  }\n  return r;\n};\n\n/**\n * * Write a ", "\n    // export function writeTo3dArray(m, n, o, f) {\n    //   const array = new Array(m * n * o)\n    //   for (let i = 0; i < array.length; i++) {\n    //     array[i] = '*'\n    //   }\n    //   f(array)\n    // }\n\n    export function getString(buffer) {\n      const hex = buffer.toString('hex')\n      const str = '[' + hex.slice(2, 4) + ']'\n      return str\n    }\n\n    export function getHexString(buffer) {\n      const hex = buffer.toString('hex')\n      const str = '0x' + hex\n      return str\n    }\n\n    export function getArray(buffer) {\n      const hex = buffer.toString('hex')\n      const array = []\n      for (let i = 2; i < hex.length; i += 2) {\n        const str = hex.slice(i, i + 2)\n        const decimal = parseInt(str, 16)\n        array.push(decimal)\n      }\n      return array\n    }\n\n    export function getDate(buffer) {\n      const hex = buffer.toString('hex')\n      const year = hex.slice(0, 2)\n      const month = hex.slice(2, 4)\n      const day = hex.slice(4, 6)\n      const date = new Date(year, parseInt(month, 10) - 1, day)\n      return date\n    }\n\n    export ", "\n            let write_to_array = |data: &str| {\n                data.split('\\n').map(|line| {\n                    let mut slice = Vec::new();\n                    line.split(' ').for_each(|part| {\n                        slice.push(part.to_string());\n                    });\n                    slice.push('\\n');\n                    slice\n                })\n            };\n\n            let f = Path::new(file);\n            let mut f = File::create(&f).expect(&format!(\"{:?}\", f.to_path_buf()));\n            f.write_all(vec![(\n                '*'.repeat(m),\n                '*'.repeat(n),\n                '*'.repeat(o)\n            )]).expect(&format!(\"{:?}\", f.to_path_buf()));\n            let mut f = File::open(file).expect(&format!(\"{:?}\", f.to_path_buf()));\n            let mut input = String::new();\n            f.read_to_string(&mut input).expect(&format!(\"{:?}\", f.to_path_buf()));\n            let mut data = Vec::new();\n            let mut data = String::new();\n            data.append(&mut input);\n            data.trim_end().split('\\n').for_each(|line| {\n                let mut slice = Vec::new();\n                line.split(' ').for_each(|part| {\n                    slice.push(part.to_string());\n                });\n                slice.push('\\"]}
{"task_id": "MBJSP/242", "prompt": "function countCharac(str1) {\n/**\n * * Write a function to count total characters in a string.\n */", "entry_point": "countCharac", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programming\";\nvar x0 = countCharac(arg00);\nvar v0 = 18;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"language\";\nvar x1 = countCharac(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"words\";\nvar x2 = countCharac(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count total characters in a string.", "language": "javascript", "canonical_solution": "  return str1.length;\n}", "completion": ["\nvar chalk = require('chalk')\n\n/**\n * Add one of the following characters to a string and return the string.\n * @param  {String} str1 A string to add one of the following characters to.\n * @return {String}      The string with the following characters added.\n */\nvar add = function add(str1) {\n/**\n * * Write a function to count total characters in a string.\n */\nvar totalCharacters = function totalCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a function to count total characters in a string.\n */\nvar countCharacters = function countCharacters(str1) {\n\n/**\n * Write a ", "\n}\nstr2 = '* a *';\nconsole.log(str2.length);\n```\n\n## \u672c\u5730\u8fd0\u884c\n\n### \u6d4b\u8bd5\n\n```shell\n$ make\n$ make test\n```\n\n### \u8fd0\u884c\u6548\u679c\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/HauyuChen/PicsBox/master/parallel-demo01.gif\" width=\"800\"/>\n</div>\n\n\n\n\n<|endoftext|>", "\n\nconst str = '\u4e2d\u6587\u5b57\u7b26\u4e32';\nconst count = _count_char(str);\nconsole.log('Total Characters: ', count);\n```\n\n**\u53c2\u8003\u6587\u7ae0**\n\n[string-count-char-c](https://github.com/justjavac/JavaScript30/blob/master/chap03/string-count-char-c.md)\n\n## \u5b57\u7b26\u4e32\u67e5\u627e\n\n### String.prototype.indexOf\n\n```javascript\nconst str = '\u4e2d\u6587\u5b57\u7b26\u4e32';\nconst indexOf = str.indexOf('\u4e2d');\nconsole.log(indexOf);\n```\n\n**\u53c2\u8003\u6587\u7ae0**\n\n[string-index-of-c](https://github.com/justjavac/JavaScript30/blob/master/chap03/string-index-of-c.md)\n\n### String.prototype.lastIndexOf\n\n```javascript\nconst str = '\u4e2d\u6587\u5b57\u7b26\u4e32';\nconst lastIndexOf = str.lastIndexOf('\u4e2d');\nconsole.log(lastIndexOf);\n```\n\n**\u53c2\u8003\u6587\u7ae0**\n\n[string-last-index-of-c](https://github.com/justjavac/JavaScript30/blob/master/chap03/string-last-index-of-c.md)\n\n### String.prototype.includes\n\n```javascript\nconst str = '\u4e2d\u6587\u5b57\u7b26\u4e32';\nconst includes = str.includes('\u4e2d');\nconsole.log(includes);\n```\n\n**\u53c2\u8003\ufffd", "\n}\n\n", "\n\n}\n<|endoftext|>"]}
{"task_id": "MBJSP/243", "prompt": "function sortOnOccurence(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */", "entry_point": "sortOnOccurence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, \"Jake\"], [2, \"Bob\"], [1, \"Cara\"]];\nvar x0 = sortOnOccurence(arg00);\nvar v0 = [[1, \"Jake\", \"Cara\", 2], [2, \"Bob\", 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"b\", \"ball\"], [\"a\", \"arm\"], [\"b\", \"b\"], [\"a\", \"ant\"]];\nvar x1 = sortOnOccurence(arg10);\nvar v1 = [[\"b\", \"ball\", \"b\", 2], [\"a\", \"arm\", \"ant\", 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, \"Mark\"], [3, \"Maze\"], [2, \"Sara\"]];\nvar x2 = sortOnOccurence(arg20);\nvar v2 = [[2, \"Mark\", \"Sara\", 2], [3, \"Maze\", 1]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort the given list based on the occurrence of first element of tuples.", "language": "javascript", "canonical_solution": "  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const [key, value] = lst[i];\n    if (!map.has(key)) {\n      map.set(key, []);\n    }\n    map.get(key).push(value);\n  }\n  const result = [];\n  map.forEach((value, key) => {\n    result.push([key, ...value]);\n  });\n  return result.sort((a, b) => {\n    const [aKey, aValue] = a;\n    const [bKey, bValue] = b;\n    if (aKey === bKey) {\n      return aValue - bValue;\n    }\n    return aKey - bKey;\n  });\n}", "completion": ["\nvar sortOccurence = function () {\n/**\n * * Given a list of pairs, a list of first elements, and a list of second elements, returns the function for sorting the given list based on the occurrence of the first element.\n */\nvar tupleOccurence = function () {\n/**\n * * Given a list of pairs, a list of first elements, and a list of second elements, returns the ", "\n\n// Sort list based on occurrence of first element of tuples.\nSortedList(lst) {\n\n// Sort list based on occurrence of first element of tuples.\nSortedList(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */\n\n// Sort list based on occurrence of first element of tuples.\nSortedList(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */\n\n// Sort list based on occurrence of first element of tuples.\nSortedList(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */\n\n// Sort list based on occurrence of first element of tuples.\nSortedList(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */\n\n// Sort list based on occurrence of first element of tuples.\nSortedList(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */\n\n// Sort list based on occurrence of first element of tuples.\nSortedList(lst) {\n/**\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n */\n\n// Sort list based on occurrence of first element of tuples.\nSortedList(lst) {\n/**\n * * Write a ", "\n", "\n", "\n    return "]}
{"task_id": "MBJSP/244", "prompt": "function nextPerfectSquare(n) {\n/**\n * * Write a JavaScript function to find the next perfect square greater than a given number.\n */", "entry_point": "nextPerfectSquare", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 35;\nvar x0 = nextPerfectSquare(arg00);\nvar v0 = 36;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = nextPerfectSquare(arg10);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = nextPerfectSquare(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the next perfect square greater than a given number.", "language": "javascript", "canonical_solution": "    let i = 1;\n    while (i * i <= n) {\n        i++;\n    }\n    return i * i;\n}", "completion": ["\n", "\n", "\n\n", "\n  return;\n}\n\n", "\n\nvar n = parseInt(args[1]);\n\nvar num = Math.pow(2, n);\n\nvar perfectSquares = [];\n\nfor (var i = 1; i < num; i++) {\n    if (Math.pow(i, 2) == num) {\n        perfectSquares.push(i);\n    }\n}\n\nconsole.log('The next perfect square greater than'+ args[1] +'is:'+ perfectSquares[perfectSquares.length - 1]);\n\n}\n\n```\n\n<details><summary>Click to expand/collapse the code</summary>\n\n```js\n\nconst n = args[1];\n\nconst num = Math.pow(2, n);\n\nconst perfectSquares = [];\n\nfor (var i = 1; i < num; i++) {\n    if (Math.pow(i, 2) == num) {\n        perfectSquares.push(i);\n    }\n}\n\nconsole.log('The next perfect square greater than'+ args[1] +'is:'+ perfectSquares[perfectSquares.length - 1]);\n\n```\n\n</details>\n\n## \u4e8c\u53c9\u6811\u7684\u904d\u5386\n\n### \u9012\u5f52\n\n```\n/**\n * * \u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386\n */\n\nvar res = [];\n\n"]}
{"task_id": "MBJSP/245", "prompt": "function maxSum(arr, n) {\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n */", "entry_point": "maxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 15, 51, 45, 33, 100, 12, 18, 9];\nvar arg01 = 9;\nvar x0 = maxSum(arg00, arg01);\nvar v0 = 194;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [80, 60, 30, 40, 20, 10];\nvar arg11 = 6;\nvar x1 = maxSum(arg10, arg11);\nvar v1 = 210;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 14, 16, 21, 23, 29, 30];\nvar arg21 = 8;\nvar x2 = maxSum(arg20, arg21);\nvar v2 = 138;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "language": "javascript", "canonical_solution": "  let max = 0;\n  let temp = 0;\n  for (let i = 0; i < n; i++) {\n    max += arr[i];\n  }\n  temp = max;\n  for (let i = n; i < arr.length; i++) {\n    temp = temp - arr[i - n] + arr[i];\n    max = Math.max(max, temp);\n  }\n  return max;\n}", "completion": ["\nif (n == 0 || n == 1) {\nreturn arr[0];\n}\nelse if (n == 2) {\nreturn Math.max(arr[0], arr[1]);\n}\nelse if (n == 3) {\nreturn Math.max(Math.max(arr[0], arr[1]), arr[2]);\n}\nelse {\nreturn Math.max(Math.max(Math.max(arr[0], arr[1]), arr[2]), arr[3]);\n}\n}\n\n// For a given array, return the sum of max sum of bi-tonic sub-sequence for the given array.\n", "\nreturn arr.reduce((best, curr, i) => {\n  if (best > curr + arr[i]) {\n    best = curr + arr[i];\n  }\n  if (i < n - 1) {\n    return best;\n  } else {\n    return best;\n  }\n}, 0)\n}\n```\n\n**Hint:** \n1. Have a look at the question about bi-tonic sub-sequence. You will find it very useful in the question.\n2. Use recursive function with memoization to calculate the maximum sum of bi-tonic sub-sequence for the given array.\n\n### Problem 7\n\n**Given an array of integers (arr) and an integer k, write a function to find the maximum sum of bi-tonic sub-sequence for the given array.**\n\n### Problem 8\n\n**Given an array of integers (arr) and an integer k, write a function to find the maximum sum of bi-tonic sub-sequence for the given array.**\n\n### Problem 9\n\n**Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.**\n\n### Problem 10\n\n**Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.**\n\n### Problem 11\n\n**Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.**\n\n### Problem 12\n\n**Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.**\n\n### Problem 13\n\n**Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.**\n\n### Problem 14\n\n**Write a ", "\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n * */\n\nlet maxSum = -1e9;\n\n/**\n * * Write a ", "\n\n    return n * (n + 1) / 2;\n}\n\n\n", "\n\n    return arr.reduce("]}
{"task_id": "MBJSP/246", "prompt": "function babylonianSquareroot(number) {\n/**\n * * Write a function for computing square roots using the babylonian method.\n */", "entry_point": "babylonianSquareroot", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = babylonianSquareroot(arg00);\nvar v0 = 3.162277660168379;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = babylonianSquareroot(arg10);\nvar v1 = 1.414213562373095;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar x2 = babylonianSquareroot(arg20);\nvar v2 = 3.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function for computing square roots using the babylonian method.", "language": "javascript", "canonical_solution": "    let sqrt = 0;\n    let last = number;\n    do {\n        sqrt = last;\n        last = (number/last + last) / 2;\n    } while (Math.abs(last - sqrt) > 0.00000001)\n    return last;\n}", "completion": ["\nvar squareRoot;\n(", "\n\n/**\n * * Computes the square root of a number.\n * * The square root of `num` is written as `Math.sqrt(num)`\n * @param num The number to compute its square root.\n * @param [options] Options to pass to babylon.js's function.\n * @param [options.func]\n * @returns The square root of `num`.\n */\n\n/**\n * * Wraps a function to be used as a babylonian method.\n * @param fn The function to wrap.\n * @param [options] Options to pass to babylon.js's function.\n * @param [options.func]\n * @returns A wrapper function.\n */\n\n/**\n * * Wraps a function to be used as a babylonian method.\n * @param fn The function to wrap.\n * @param [options] Options to pass to babylon.js's function.\n * @param [options.func]\n * @returns A wrapper function.\n */\n\n/**\n * * Wraps a function to be used as a babylonian method.\n * @param fn The function to wrap.\n * @param [options] Options to pass to babylon.js's function.\n * @param [options.func]\n * @returns A wrapper function.\n */\n\n/**\n * * Wraps a function to be used as a babylonian method.\n * @param fn The function to wrap.\n * @param [options] Options to pass to babylon.js's function.\n * @param [options.func]\n * @returns A wrapper function.\n */\n\n/**\n * * Wraps a function to be used as a babylonian method.\n * @param fn The ", "\n", "\n", "\nclass SquareRoot {\n    /**\n     * Computes square roots of the given value.\n     * @param value the value\n     * @returns a new array containing the computed square roots.\n     */\n    static SquareRoot(value) {\n        const valueSquared = value * value;\n        let result = new Array();\n        let remainder = 0.0;\n        if (Math.abs(valueSquared) < 1.0) {\n            result[0] = value;\n            return result;\n        }\n        if (valueSquared < 0.0) {\n            remainder = valueSquared;\n        }\n        let valueSquaredRoot = 1.0 / Math.sqrt(valueSquared);\n        let i = 0;\n        while (Math.abs(remainder) > 0.00001) {\n            const newRemainder = (remainder + valueSquaredRoot * remainder) / 2;\n            if (newRemainder == remainder) {\n                break;\n            }\n            remainder = newRemainder;\n            i++;\n            if (i === 1000) {\n                break;\n            }\n        }\n        result[0] = value * Math.sqrt(remainder);\n        result[i] = value * Math.sqrt(valueSquaredRoot - remainder);\n        return result;\n    }\n}\nSquareRoot.SquareRoot = new SquareRoot();\nexport { SquareRoot };\n//# sourceMappingURL=squareroot.js.map<|endoftext|>"]}
{"task_id": "MBJSP/247", "prompt": "function lps(str) {\n/**\n * * Write a function to find the longest palindromic subsequence in the given string.\n */", "entry_point": "lps", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"TENS FOR TENS\";\nvar x0 = lps(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"CARDIO FOR CARDS\";\nvar x1 = lps(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"PART OF THE JOURNEY IS PART\";\nvar x2 = lps(arg20);\nvar v2 = 9;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the longest palindromic subsequence in the given string.", "language": "javascript", "canonical_solution": "  // Initialize a table of length N\n  const length = str.length;\n  const dp = Array(length).fill(0).map(() => Array(length).fill(0));\n\n  // Build the table\n  for (let i = length - 1; i >= 0; i--) {\n    for (let j = i; j < length; j++) {\n      if (i == j) {\n        dp[i][j] = 1;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[0][length - 1];\n}", "completion": ["\n\nvar longestPalindromicSubsequence = function longestPalindromicSubsequence(str) {\nvar memo = {};\n\n", "\n})(window, document, undefined);<|endoftext|>", "\n", "\n\n/**\n * * Write a function to find the longest palindromic subsequence in the given string.\n * * String : \"bb\"\n * * Output : 2 ( bb bb )\n */\n\n/**\n * * Write a function to find the longest palindromic subsequence in the given string.\n * * String : \"bbbb\"\n * * Output : 4 ( bbbb bbbb )\n */\n\n/**\n * * Write a function to find the longest palindromic subsequence in the given string.\n * * String : \"bbb\"\n * * Output : 1 ( bb )\n */\n\n/**\n * * Write a function to find the longest palindromic subsequence in the given string.\n * * String : \"abcdef\"\n * * Output : 6 ( abcdef abcdef abcdef abcdef )\n */\n\n/**\n * * Write a function to check whether the string has palindromic subsequence or not.\n * * String : \"aaa\"\n * * Output : True ( aaa is a palindromic subsequence )\n */\n\n/**\n * * Write a function to check whether the string has palindromic subsequence or not.\n * * String : \"ababab\"\n * * Output : True ( ababab is a palindromic subsequence )\n */\n\n/**\n * * Write a function to check whether the string has palindromic subsequence or not.\n * * String : \"abbab\"\n * * Output : False ( abbab is not a palindromic subsequence )\n */\n\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/249", "prompt": "function intersectionArray(arraynums1, arraynums2) {\n/**\n * * Write a function to find the intersection of two arrays using lambda function.\n */", "entry_point": "intersectionArray", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg01 = [1, 2, 4, 8, 9];\nvar x0 = intersectionArray(arg00, arg01);\nvar v0 = [1, 2, 8, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg11 = [3, 5, 7, 9];\nvar x1 = intersectionArray(arg10, arg11);\nvar v1 = [3, 5, 7, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 5, 7, 8, 9, 10];\nvar arg21 = [10, 20, 30, 40];\nvar x2 = intersectionArray(arg20, arg21);\nvar v2 = [10];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the intersection of two arrays using lambda function.", "language": "javascript", "canonical_solution": "  return arrayNums1.filter(num => arrayNums2.includes(num));\n}", "completion": ["\n\n/**\n * * Given two arrays, find the intersection of the two arrays. You may assume that there are no duplicates in the two arrays.\n */\n\n/**\n * * Given two arrays, find the intersection of the two arrays. You may assume that there are no duplicates in the two arrays.\n * * You need to write an efficient ", "\n  var array1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var array2 = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n  var intersection = [];\n  var intersectionLambda = [];\n  var arraynums1 = [];\n  var arraynums2 = [];\n\n  var arraynums1 = array1.map(", "\n    ", "\n}\n\n/**\n * * Write a function to find the intersection of two arrays using recursion.\n */\n", "\narraynums1.forEach("]}
{"task_id": "MBJSP/250", "prompt": "function countX(tup, x) {\n/**\n * * Write a JavaScript function to count the occcurences of an element in a tuple.\n */", "entry_point": "countX", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg01 = 4;\nvar x0 = countX(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg11 = 10;\nvar x1 = countX(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2];\nvar arg21 = 8;\nvar x2 = countX(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the occcurences of an element in a tuple.", "language": "javascript", "canonical_solution": "  return tup.filter(function (e) {\n    return e === x;\n  }).length;\n}", "completion": ["\n    const { write_function } = utils;\n\n    /**\n     * Write a JavaScript function to count the occcurences of an element in a tuple.\n     *\n     * @param {number} x - The element to count\n     * @returns {string} - The ", "\n    var count_occurences = ", "\n    ", "\n    ", "\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise multiplication function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise subtraction function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise multiplication function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise subtraction function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise division function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise modulus function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise power function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise square root function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise reciprocal function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise square function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise cube function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise exponential function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise natural logarithm function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise log base 10 function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise log base 2 function.\n */\n\n/**\n * * Write a JavaScript function to determine the argument to the pair-wise square "]}
{"task_id": "MBJSP/251", "prompt": "function insertElement(list, element) {\n/**\n * * Write a function to insert an element before each element of a list.\n */", "entry_point": "insertElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Black\"];\nvar arg01 = \"c\";\nvar x0 = insertElement(arg00, arg01);\nvar v0 = [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"python\", \"java\"];\nvar arg11 = \"program\";\nvar x1 = insertElement(arg10, arg11);\nvar v1 = [\"program\", \"python\", \"program\", \"java\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"happy\", \"sad\"];\nvar arg21 = \"laugh\";\nvar x2 = insertElement(arg20, arg21);\nvar v2 = [\"laugh\", \"happy\", \"laugh\", \"sad\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to insert an element before each element of a list.", "language": "javascript", "canonical_solution": "  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    result.push(element, list[i]);\n  }\n  return result;\n}", "completion": ["\nvar list = [];\nvar element;\n// write the function\nlist.insertBefore = function (element) {\n/**\n * * Insert an element before each element of a list.\n */\nlist.push(element);\n};\n```\n\nThen, it is the same to insert the element in the list:\n\n```javascript\nlist.insertBefore(1);\n```\n\nNow, we have a list, which is a `", "\n\"use strict\";\n\nexports.__esModule = true;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nexports.default = function (arr, iterator, callback) {\n  if (!arr) return;\n  if (iterator && iterator.apply) {\n    return iterator.apply(null, arr);\n  } else {\n    var _arr = [];\n\n    for (var _iterator = (0, _getIterator3.default)(arr), _step;!(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (callback) {\n        callback(_arr);\n      }\n    }\n\n    return _arr;\n  }\n};\n\nvar _babelHelperFunctionName = require(\"babel-helper-", "\n/**\n * * Write a function to remove an element from each element of a list.\n */\n/**\n * * Write a function to get the index of an element in each element of a list.\n */\n/**\n * * Write a function to get the last element of a list.\n */\n/**\n * * Write a function to get the size of a list.\n */\n/**\n * * Write a function to get the first element of a list.\n */\n/**\n * * Write a function to get the element at a given index of a list.\n */\n/**\n * * Write a ", "\nexport const insertBeforeEach = (list, element) => {\n    list.unshift(element);\n};\n\n/**\n * * Write a function to insert an element after each element of a list.\n */\nexport const insertAfterEach = (list, element) => {\n    list.push(element);\n};\n\n/**\n * * Write a function to insert an element before the first element of a list.\n */\nexport const insertBeforeFirst = (list, element) => {\n    list.unshift(element);\n};\n\n/**\n * * Write a function to insert an element after the first element of a list.\n */\nexport const insertAfterFirst = (list, element) => {\n    list.push(element);\n};\n\n/**\n * * Write a function to insert an element after the last element of a list.\n */\nexport const insertAfterLast = (list, element) => {\n    list.push(element);\n};\n\n/**\n * * Write a function to insert an element before the last element of a list.\n */\nexport const insertBeforeLast = (list, element) => {\n    list.unshift(element);\n};\n\n/**\n * * Write a function to remove the first element of a list.\n */\nexport const removeFirst = (list) => {\n    list.shift();\n};\n\n/**\n * * Write a function to remove the last element of a list.\n */\nexport const removeLast = (list) => {\n    list.pop();\n};\n\n/**\n * * Write a function to remove all elements of a list.\n */\nexport const removeAll = (list) => {\n    list.splice(0, list.length);\n};\n\n/**\n * * Write a ", "\nvar write = function write() {\n    var list = arguments.length > 0 && arguments[0]!== undefined? arguments[0] : [];\n    var element = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : '';\n    var value = JSON.stringify(list);\n    var index = value.lastIndexOf(element);\n\n    if (index > -1) {\n        value = value.substr(0, index) + element + value.substr(index + element.length);\n    } else {\n        value += element;\n    }\n\n    write_(value);\n};\n\n/**\n * * Write a function to insert an element before each element of a list.\n */\nvar writeAll = function writeAll() {\n    var list = arguments.length > 0 && arguments[0]!== undefined? arguments[0] : [];\n    var element = arguments.length > 1 && arguments[1]!== undefined? arguments[1] : '';\n    var value = JSON.stringify(list);\n\n    for (var _len = arguments.length, rest = new Array(_len > 2? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        rest[_key - 2] = arguments[_key];\n    }\n\n    write.apply(null, [value].concat(rest));\n};\n\n/**\n * * Write a function to insert an element before each element of a list.\n */\nvar writeAllBefore = "]}
{"task_id": "MBJSP/252", "prompt": "function convert(numbers) {\n/**\n * * Write a JavaScript function to convert complex numbers to polar coordinates.\n */", "entry_point": "convert", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = convert(arg00);\nvar v0 = [1.0, 0.0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = convert(arg10);\nvar v1 = [4.0, 0.0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = convert(arg20);\nvar v2 = [5.0, 0.0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to convert complex numbers to polar coordinates.", "language": "javascript", "canonical_solution": "    return [numbers, 0];\n}", "completion": ["\n\n} // class\n\n// ", "\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript function to convert complex numbers to polar coordinates.\n\n// * Write a JavaScript ", "\n\n", "\n\n// A function to create a function.\n", "\n\n$(document).ready("]}
{"task_id": "MBJSP/253", "prompt": "function countInteger(list1) {\n/**\n * * Write a JavaScript function to count integers from a given list.\n */", "entry_point": "countInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, \"abc\", 1.2];\nvar x0 = countInteger(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = countInteger(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1.2, 4, 5.1];\nvar x2 = countInteger(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count integers from a given list.", "language": "javascript", "canonical_solution": "  return list1.filter(num => Number.isInteger(num)).length;\n}", "completion": ["\nfunctions.get_ints_count_from_list = (\n    list: List<Int>?,\n) => {\n  // * Count the number of integers from list.\n  // *\n  // * @param list [List<Int>].\n  // * @return Number of integers from list.\n  return list?.count();\n}\n```\n\n## Getting a list of strings with the `get_strings_as_list()` function.\n\n### Summary\n\nThis section describes how to get a list of strings with the `get_strings_as_list()` function.\n\n### Syntax\n\n```elm\nget_strings_as_list : String -> List String\n```\n\n### Example\n\n```elm\nget_strings_as_list : String -> List String\n```\n\n```elm\nget_strings_as_list \"a\"\n```\n\n```elm\nget_strings_as_list \"a b c d\"\n```\n\n```elm\nget_strings_as_list \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n```\n\n## Getting a list of strings with the `get_strings_as_string_list()` function.\n\n### Summary\n\nThis section describes how to get a list of strings with the `get_strings_as_string_list()` ", "\n", "\n\n", "\nlist1[i].function1(list1[i].number1);\n}\n\"\"\"\n    )\n    fs.write(\"/etc/rc.d/rc.local\\n\")\n    fs.write(\"/etc/rc.d/rc.local1\\n\")\n    fs.write(\"/etc/rc.d/rc.local2\\n\")\n    fs.write(\"/etc/rc.d/rc.local3\\n\")\n    fs.write(\"/etc/rc.d/rc.local4\\n\")\n    fs.write(\"/etc/rc.d/rc.local5\\n\")\n    fs.write(\"/etc/rc.d/rc.local6\\n\")\n    fs.write(\"/etc/rc.d/rc.local7\\n\")\n    fs.write(\"/etc/rc.d/rc.local8\\n\")\n    fs.write(\"/etc/rc.d/rc.local9\\n\")\n    fs.write(\"/etc/rc.d/rc.local10\\n\")\n    fs.write(\"/etc/rc.d/rc.local11\\n\")\n    fs.write(\"/etc/rc.d/rc.local12\\n\")\n    fs.write(\"/etc/rc.d/rc.local13\\n\")\n    fs.write(\"/etc/rc.d/rc.local14\\n\")\n    fs.write(\"/etc/rc.d/rc.local15\\n\")\n    fs.write(\"/etc/rc.d/rc.local16\\n\")\n    fs.write(\"/etc/rc.d/rc.local17\\n\")\n    fs.write(\"/etc/rc.d/rc.local18", "\n"]}
{"task_id": "MBJSP/254", "prompt": "function wordsAe(text) {\n/**\n * * Write a function to find all words starting with 'a' or 'e' in a given string.\n */", "entry_point": "wordsAe", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python programe\";\nvar x0 = wordsAe(arg00);\nvar v0 = [\"ame\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python programe language\";\nvar x1 = wordsAe(arg10);\nvar v1 = [\"ame\", \"anguage\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"assert statement\";\nvar x2 = wordsAe(arg20);\nvar v2 = [\"assert\", \"atement\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find all words starting with 'a' or 'e' in a given string.", "language": "javascript", "canonical_solution": "  return text.match(/[a|e][\\w]+/g) || [];\n}", "completion": ["\nvar a = '';\n/**\n * Write a function to find all words starting with 'i' in a given string.\n */\nvar i = '';\n/**\n * Write a function to find all words starting with 'j' in a given string.\n */\nvar j = '';\n/**\n * Write a function to find all words starting with 'k' in a given string.\n */\nvar k = '';\n/**\n * Write a function to find all words starting with 'l' in a given string.\n */\nvar l = '';\n/**\n * Write a function to find all words starting with'm' in a given string.\n */\nvar m = '';\n/**\n * Write a function to find all words starting with 'n' in a given string.\n */\nvar n = '';\n/**\n * Write a function to find all words starting with 'o' in a given string.\n */\nvar o = '';\n/**\n * Write a function to find all words starting with 'p' in a given string.\n */\nvar p = '';\n/**\n * Write a function to find all words starting with 'q' in a given string.\n */\nvar q = '';\n/**\n * Write a function to find all words starting with 'r' in a given string.\n */\nvar r = '';\n/**\n * Write a function to find all words starting with's' in a given string.\n */\nvar s = '';\n/**\n * Write a function to find all words starting with 't' in a given string.\n */\nvar t = '';\n/**\n * Write a function to find all words starting with 'u' in a given string.\n */\nvar u = '';\n/**\n * Write a ", "\n\nconst stringMatchingWordsFn = text => {\n    const words = text.split(' ');\n    const wordsWithPrefixes = words.map(word => {\n        if (word.charAt(0) === 'a' || word.charAt(0) === 'e') {\n            return word;\n        }\n        return `a${word}`;\n    });\n    const matchingWords = wordsWithPrefixes.filter(word => text.indexOf(word) > -1);\n    return matchingWords.join(' ');\n};\n\nconst stringMatchingWords = () => {\n    const matchingWords = stringMatchingWordsFn('Tested');\n    console.log('The string matching words is:'+ matchingWords);\n};\n\nconst stringMatchingWordsWithPrefixes = () => {\n    const matchingWords = stringMatchingWordsFn('Tested');\n    console.log('The string matching words with prefixes is:'+ matchingWords);\n};\n\nconst stringMatchingWordsWithPrefixesAndSuffixes = () => {\n    const matchingWords = stringMatchingWordsFn('Tested');\n    console.log('The string matching words with prefixes and suffixes is:'+ matchingWords);\n};\n\nconst stringMatchingWordsWithPrefixesAndSuffixesAndSpaces = () => {\n    const matchingWords = stringMatchingWordsFn('Tested');\n    console.log('The string matching words with prefixes and suffixes and spaces is:'+ matchingWords);\n};\n\nconst stringMatchingWordsWithPrefixesAndSuffixesAndSpacesAndNumbers = () => {\n    const matchingWords = stringMatchingWordsFn('Tested');\n    console.", "\n\n", "\n\nvar _lastIndexOf = function _lastIndexOf(string, find, fromIndex) {\n  var i = void 0;\n  var len = string.length;\n  var toIndex = string.substring(0, fromIndex).lastIndexOf(find);\n  var lastIndexOf = void 0;\n\n  if (toIndex < 0) {\n    return -1;\n  }\n\n  if (toIndex === 0) {\n    return fromIndex;\n  }\n\n  i = fromIndex;\n\n  while (i < len) {\n    lastIndexOf = string.substring(0, toIndex).lastIndexOf(find);\n\n    if (lastIndexOf === 0) {\n      return i;\n    }\n\n    i = lastIndexOf - 1;\n    toIndex = string.substring(0, i).lastIndexOf(find);\n  }\n\n  return -1;\n};\n\nvar _lastIndexOf2 = _interopRequireDefault(_lastIndexOf);\n\nvar _lastIndexOf3 = _interopRequireDefault(_lastIndexOf);\n\nvar _lastIndexOf4 = _interopRequireDefault(_lastIndexOf);\n\n", "\n"]}
{"task_id": "MBJSP/255", "prompt": "function combinationsColors(l, n) {\n/**\n * * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n */", "entry_point": "combinationsColors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Blue\"];\nvar arg01 = 1;\nvar x0 = combinationsColors(arg00, arg01);\nvar v0 = [[\"Red\"], [\"Green\"], [\"Blue\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Red\", \"Green\", \"Blue\"];\nvar arg11 = 2;\nvar x1 = combinationsColors(arg10, arg11);\nvar v1 = [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Red\", \"Green\", \"Blue\"];\nvar arg21 = 3;\nvar x2 = combinationsColors(arg20, arg21);\nvar v2 = [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "language": "javascript", "canonical_solution": "    let res = [];\n    for (let i = 0; i < l.length; i++) {\n        if (n === 1) {\n            res.push([l[i]]);\n        } else {\n            let temp = combinationsColors(l.slice(i), n - 1);\n            for (let j = 0; j < temp.length; j++) {\n                res.push([l[i]].concat(temp[j]));\n            }\n        }\n    }\n    return res;\n}", "completion": ["\nconst writeColors = (l, n) => {\n    let s = '';\n    for (let i = 0; i < l; i++) {\n        s += '<span style=\"color:#' + colors[i % 3].toLowerCase() + '\">' + colors[i % 3] + '</span>';\n    }\n    console.log('colors:' + s + '\\n');\n};\n\nconst writeChoices = (l, n) => {\n    let s = '';\n    for (let i = 0; i < l; i++) {\n        s += '<option value=\"' + i + '\"';\n        if (i === n) {\n            s +='selected';\n        }\n        s += '>' + choices[i] + '</option>';\n    }\n    console.log('choices:' + s + '\\n');\n};\n\nconst writeLength = (l, n) => {\n    console.log('length:' + l + '\\n');\n};\n\nconst writeLengths = (l, n) => {\n    let s = '';\n    for (let i = 0; i < l; i++) {\n        s += '<span style=\"font-size:100%\">' + lengths[i] + '</span>';\n    }\n    console.log('lengths:' + s + '\\n');\n};\n\nconst writeLists = (l, n) => {\n    let s = '';\n    for (let i = 0; i < l; i++) {\n        s += '<span style=\"font-size:100%\">' + lists[i] + '</span>';\n    }\n    console.log('lists", "\n// Pick a random number between 1 and the number of colours you want to generate.\nconst r = Math.floor(Math.random() * colours.length);\n// Create a clone of the array of colours.\nlet c = colours.slice();\n// Remove the randomly chosen colour from the array.\nc.splice(r, 1);\n// Create an object with the keys being all the combinations, each combination will have a different colour, and the number of colours it will have.\nlet d = {};\n// Create an array with all the combinations.\nfor (const key of combinations) {\n    // Create a clone of the object of colours.\n    const n = Object.assign({}, colours);\n    // Remove the colours chosen so far from the array of colours.\n    n.splice(r, 1);\n    // Create an object with the key being all the combinations, each combination will have a different colour, and the number of colours it will have.\n    d[key] = n;\n}\n// Create a new array that has all the combinations.\nconst e = Object.keys(d);\n// Create an array with all the combinations.\nconst f = e.map((key) => d[key]);\n// Create a new array that has all the combinations.\nconst g = f.map((key) => key.join(''));\n// Create a new array that has all the combinations.\nconst h = g.map((key) => key.split(''));\n// Create an array that has all the combinations.\nconst i = h.map((key) => key.map((k, j) => colours[k][j].toUpperCase()));\n// Create an array that has all the combinations.\nconst j = i.map((key) => key.filter((k, j", "\n\nvar m = [],\n    n = 3,\n    l = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    cs = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],\n    i = 0,\n    max = 0,\n    min = 100,\n    count = [0, 0, 0, 0, 0, 0, 0, 0];\n\nfor (i = 0; i < l.length; i++) {\n  count[m[i]] = 0;\n}\n\nfor (i = 0; i < n; i++) {\n  max += count[m[i]];\n  min = Math.min(min, count[m[i]]);\n}\n\nfor (i = 0; i < l.length; i++) {\n  count[m[i]] += 1 - min;\n  count[cs[i]] += min;\n}\n\nfor (i = 0; i < l.length; i++) {\n  count[cs[i]] -= count[m[i]];\n}\n\n", "\n\nvar m = arguments.length > 2 && arguments[2]!== undefined? arguments[2] : 3;\n\nvar h = arguments.length > 3 && arguments[3]!== undefined? arguments[3] : 0.4;\n\nvar arr = [];\n\nvar r1 = l,\n    g1 = n,\n    b1 = n;\n\nvar r2 = n,\n    g2 = n,\n    b2 = l;\n\nvar r3 = n,\n    g3 = n,\n    b3 = l;\n\nvar fn = void 0;\n\nvar rgb = { r: 0, g: 0, b: 0 };\n\nvar r = Math.floor(r1 * 255);\nvar g = Math.floor(g1 * 255);\nvar b = Math.floor(b1 * 255);\n\nrgb.r = r;\nrgb.g = g;\nrgb.b = b;\n\narr.push(rgb);\n\nrgb = { r: 0, g: 0, b: 0 };\n\nr = Math.floor(r2 * 255);\ng = Math.floor(g2 * 255);\nb = Math.floor(b2 * 255);\n\nrgb.r = r;\nrgb.g = g;\nrgb.b = b;\n\narr.push(rgb);\n\nrgb = { r: 0, g: 0, b: 0 };\n\nr = Math.floor(r3 * 255);\ng = Math.floor(g3 * 255);\nb = Math.floor(b3 * 255);\n\nrgb.r = r;\nrgb.g = g;\nrgb.b = b;\n\narr.push", "\n"]}
{"task_id": "MBJSP/256", "prompt": "function countPrimesNums(n) {\n/**\n * * Write a JavaScript function to count the number of prime numbers less than a given non-negative number.\n */", "entry_point": "countPrimesNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = countPrimesNums(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = countPrimesNums(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar x2 = countPrimesNums(arg20);\nvar v2 = 25;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the number of prime numbers less than a given non-negative number.", "language": "javascript", "canonical_solution": "    let count = 0;\n    for (let i = 2; i < n; i++) {\n        let isPrime = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\n(", "\nprint(n, 'Prime numbers less than', n, ':', WritePrimes(n))\n}}\n * Write a JavaScript function to count the number of prime numbers less than a given non-negative number.\n */\n\n", "\n", "\n    const js = function (n) {\n        // Define `f` as a variable of type `", "\n"]}
{"task_id": "MBJSP/257", "prompt": "function swapNumbers(a, b) {\n/**\n * * Write a function to swap two numbers.\n */", "entry_point": "swapNumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = swapNumbers(arg00, arg01);\nvar v0 = [20, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 17;\nvar x1 = swapNumbers(arg10, arg11);\nvar v1 = [17, 15];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 100;\nvar arg21 = 200;\nvar x2 = swapNumbers(arg20, arg21);\nvar v2 = [200, 100];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to swap two numbers.", "language": "javascript", "canonical_solution": "  return [b, a];\n}", "completion": ["\n", "\n\nlet list = [1, 2, 3, 4, 5];\n\n", "\na = Math.random();\nb = Math.random();\nconsole.log(\"a: \" + a + \", b: \" + b);\nvar c = a > b? b : a;\nvar d = a > b? a : b;\nconsole.log(\"a: \" + a + \", b: \" + b);\nconsole.log(\"c: \" + c + \", d: \" + d);\nvar e = a > b? a : b;\nvar f = a > b? b : a;\nconsole.log(\"e: \" + e + \", f: \" + f);\n};\n/**\n * * Write a function to generate a random number between 1 and 5.\n */\n", "\nvar swap = function(a, b) {\n\treturn a ^ b;\n};\n```\n\n### uuid\n\nGenerates a V4 UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).\n\n``` javascript\n/**\n * * Generates a V4 UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier).\n */\nvar uuid = function() {\n\treturn uuid.v4();\n};\n```\n\n### uri-to-json\n\nConverts an absolute or relative URL to a JSON object.\n\n``` javascript\n/**\n * * Converts an absolute or relative URL to a JSON object.\n */\nvar uri_to_json = function(url) {\n\treturn uri_to_json.convert(url);\n};\n\n/**\n * * Converts an absolute or relative URL to a JSON object.\n */\nuri_to_json.convert = function(url) {\n\treturn {\n\t\ttype: 'uri',\n\t\tvalue: url\n\t};\n};\n\n/**\n * * Converts an absolute or relative URL to a JSON object.\n */\nuri_to_json.absolute = function(url) {\n\treturn uri_to_json.convert(url).value;\n};\n```\n\n### url-to-json\n\nConverts a string that represents an absolute or relative URL to a JSON object.\n\n``` javascript\n/**\n * * Converts a string that represents an absolute or relative URL to a JSON object.\n */\nvar url_to_json = ", "\na, b;\n}\n```\n\nIn the example above, the parameters `a` and `b` are the values of two variables. In this case, we have no control over the values of these variables, so we can't simply swap these two values. There are cases, however, where a function can be called with different arguments, so we need to create a function that will take the two arguments and return either the value of `a` or the value of `b`, whichever is smaller.\n\nHere is a function that will take two values and return the smaller of the two values.\n\n```javascript\n"]}
{"task_id": "MBJSP/258", "prompt": "function countOdd(arraynums) {\n/**\n * * Write a function to find number of odd elements in the given list using lambda function.\n */", "entry_point": "countOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 7, 8, 10];\nvar x0 = countOdd(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 15, 14, 13, -18, 12, -20];\nvar x1 = countOdd(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 4, 8, 9];\nvar x2 = countOdd(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find number of odd elements in the given list using lambda function.", "language": "javascript", "canonical_solution": "  return arrayNums.filter(num => num % 2 !== 0).length;\n}", "completion": ["\n    ", "\nlet oddnums = (arraynums) => {\n\tlet nums = [];\n\tfor (let i=0; i < arraynums.length; i++) {\n\t\tlet num = arraynums[i];\n\t\tif (num % 2!== 0) {\n\t\t\tnums.push(num);\n\t\t}\n\t}\n\treturn nums;\n};\n\ndd(oddnums([1,2,3,4,5,6,7,8,9,10]))\ndd(oddnums([1,1,1,1,1]))\n\ndd(oddnums([1,1,1,1]))\ndd(oddnums([1,1,1,1,1]))\ndd(oddnums([1,1,1,1,1,1]))\ndd(oddnums([1,1,1,1,1,1,1]))\ndd(oddnums([1,1,1,1,1,1,1,1]))\ndd(oddnums([1,1,1,1,1,1,1,1,1]))\ndd(oddnums([1,1,1,1,1,1,1,1,1,1]))\ndd(oddnums([1,1,1,1,1,1,1,1,1,1,1]))\ndd(oddnums([1,1,1,1,1,1,1,1,1,1,1,1]))\ndd(oddnums([1,1,1,1,1,1,1,1,1,1,1,1,1]))\ndd(oddnums([1,1,", "\n}\ndd(arraynums) => arraynums.filter(num => num % 2 == 1).length\n```\n\n#### Your solution should pass all test cases.\n\n## Author\n\n[LeetCode](https://leetcode.com/)\n\n## Reference\n\n- [LeetCode](https://leetcode.com/)\n- [GeeksforGeeks](https://www.geeksforgeeks.org/)\n<|endoftext|>", "\n    const arraynums = Array(15);\n    arraynums.fill(0);\n    arraynums.forEach((value, index) => {\n        if (index % 2 === 1) {\n            arraynums[index] = value;\n        }\n    });\n    console.log(arraynums);\n}\n", "\n"]}
{"task_id": "MBJSP/259", "prompt": "function maximizeElements(testtup1, testtup2) {\n/**\n * * Write a function to maximize the given two tuples.\n */", "entry_point": "maximizeElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = maximizeElements(arg00, arg01);\nvar v0 = [[6, 7], [4, 9], [2, 9], [7, 10]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = maximizeElements(arg10, arg11);\nvar v1 = [[7, 8], [5, 10], [3, 10], [8, 11]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = maximizeElements(arg20, arg21);\nvar v2 = [[8, 9], [6, 11], [4, 11], [9, 12]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to maximize the given two tuples.", "language": "javascript", "canonical_solution": "  const resultTup1 = testTup1.map((arr, i) => arr.map((x, j) => x > testTup2[i][j] ? x : testTup2[i][j]));\n  return resultTup1;\n}", "completion": ["\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a function to maximize the given two tuples.\n */\n\n}\n\n/**\n * * Write a ", "\nvar max = function(tupl1, tupl2) {\n  var max1 = Math.max(tupl1[0], tupl2[0]);\n  var max2 = Math.max(tupl1[1], tupl2[1]);\n  return [max1, max2];\n};\n\n/**\n * * Write a function to compute the minimum of two tuples.\n */\nvar min = function(tupl1, tupl2) {\n  var min1 = Math.min(tupl1[0], tupl2[0]);\n  var min2 = Math.min(tupl1[1], tupl2[1]);\n  return [min1, min2];\n};\n\n/**\n * * Write a function to compute the minimum of three tuples.\n */\nvar min3 = function(tupl1, tupl2, tupl3) {\n  var min1 = Math.min(tupl1[0], tupl2[0]);\n  var min2 = Math.min(tupl1[1], tupl2[1]);\n  var min3 = Math.min(tupl1[2], tupl2[2]);\n  var min4 = Math.min(tupl3[0], tupl3[1]);\n  var min5 = Math.min(tupl3[2], tupl3[3]);\n  return [min1, min2, min3, min4, min5];\n};\n\n/**\n * * Write a function to compute the maximum of two tuples.\n */\nvar max2 = ", "\n", "\n\n// Push a tuple to the max buffer\nvar maxBuffer = [];\nvar maxBuffer_length = 0;\n\n// When you get a new tuple, add it to the max buffer.\n", "\nvoid write_max(const Tuple& maxtup1, const Tuple& maxtup2);\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/260", "prompt": "function newmanPrime(n) {\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */", "entry_point": "newmanPrime", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = newmanPrime(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = newmanPrime(arg10);\nvar v1 = 17;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = newmanPrime(arg20);\nvar v2 = 41;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "language": "javascript", "canonical_solution": "\tif (n == 0 || n == 1) {\n\t\treturn 1;\n\t}\n\treturn 2 * newmanPrime(n - 1) + newmanPrime(n - 2);\n}", "completion": ["\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n */\n\n/**\n * * Write a ", "\n\t\t\t\t\t\t", "\n", "\n(", "\n}\n\n/**\n *  * Finds the nth newman\u2013shanks\u2013williams prime number.\n *  */\n}\n\n/**\n * * Calculate the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Calculate the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Calculate the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013williams prime number.\n */\n}\n\n/**\n * * Finds the nth newman\u2013shanks\u2013"]}
{"task_id": "MBJSP/261", "prompt": "function divisionElements(testtup1, testtup2) {\n/**\n * * Write a function to perform mathematical division operation across the given tuples.\n */", "entry_point": "divisionElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = divisionElements(arg00, arg01);\nvar v0 = [2, 2, 2, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 6, 8, 16];\nvar arg11 = [6, 3, 4, 4];\nvar x1 = divisionElements(arg10, arg11);\nvar v1 = [2, 2, 2, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [20, 14, 36, 18];\nvar arg21 = [5, 7, 6, 9];\nvar x2 = divisionElements(arg20, arg21);\nvar v2 = [4, 2, 6, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to perform mathematical division operation across the given tuples.", "language": "javascript", "canonical_solution": "  const length = testTup1.length;\n  const answer = [];\n  let counter = 0;\n\n  while (counter < length) {\n    answer.push(testTup1[counter] / testTup2[counter]);\n    counter++;\n  }\n  return answer;\n}", "completion": ["\nMath.div = function(left, right) {\n  return Math.floor(left / right);\n};\n/**\n * * Write a function to check whether a given number is a prime number.\n */\nMath.prime = function(n) {\n  if (n == 1) {\n    return false;\n  }\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * * Write a function to count the number of prime numbers less than a given number.\n */\nMath.primes = function(n) {\n  var num = 2;\n  if (n < 2) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  while (num <= n) {\n    if (Math.prime(num)) {\n      num += 1;\n    } else {\n      num += 1;\n    }\n  }\n  return num - 2;\n};\n/**\n * * Write a function to generate a random number between the given range.\n */\nMath.random = function(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n/**\n * * Write a function to find the greatest common divisor between two given numbers.\n */\nMath.gcd = ", "\n  var test_fn = (t1, t2) => t1 / t2;\n  var test_fn2 = (t1, t2) => t1 / t2;\n\n  testtup1.forEach(tup => {\n    tup.addTest(test_fn);\n  });\n  testtup2.forEach(tup => {\n    tup.addTest(test_fn2);\n  });\n\n  // Test when t1 is 0.\n  testtup1[0].addTest(() => {\n    testtup1[0].getTuple().setValue(1, 'y', 'number');\n    testtup1[1].getTuple().setValue(1, 'y', 'number');\n    return testtup1[0].getTuple().getValue(1, 'y') / testtup1[1].getTuple().getValue(1, 'y');\n  });\n\n  // Test when t2 is 0.\n  testtup2[0].addTest(() => {\n    testtup2[0].getTuple().setValue(1, 'y', 'number');\n    testtup2[1].getTuple().setValue(1, 'y', 'number');\n    return testtup2[0].getTuple().getValue(1, 'y') / testtup2[1].getTuple().getValue(1, 'y');\n  });\n\n  test.runTest();\n};\n<|endoftext|>", "\n    @com.google.gson.annotations.SerializedName(\"$div\")\n    public static final class Div {\n        public int numerator;\n        public int denominator;\n\n        public Div(int numerator, int denominator) {\n            this.numerator = numerator;\n            this.denominator = denominator;\n        }\n    }\n\n    @com.google.gson.annotations.SerializedName(\"$div\")\n    public static final class DivTokenizer implements Tokenizer {\n        private final int testnum1;\n        private final int testnum2;\n\n        public DivTokenizer(int testnum1, int testnum2) {\n            this.testnum1 = testnum1;\n            this.testnum2 = testnum2;\n        }\n\n        @com.google.gson.annotations.Expose\n        public int testnum1() {\n            return testnum1;\n        }\n\n        @com.google.gson.annotations.Expose\n        public int testnum2() {\n            return testnum2;\n        }\n\n        @Override\n        public List<Token> tokenize(String text) {\n            List<Token> tokens = new ArrayList<>();\n            if (text.startsWith(\"$div\")) {\n                // division operation\n                String divText = text.substring(\"$div\".length());\n                // divide testnum1 by testnum2\n                tokens.add(new Token(new Div(testnum1, testnum2), text, 0, divText.length()));\n            }\n            return tokens;\n        }\n    }\n\n    /**\n     * * Write a ", "\n\n// Write a function that performs division operation between two pairs of numbers.\n\n/**\n * * @param {number} tup1 First pair of numbers.\n * * @param {number} tup2 Second pair of numbers.\n * * @param {number} divisor Divisor.\n * * @param {", "\n"]}
{"task_id": "MBJSP/262", "prompt": "function splitTwoParts(list1, l) {\n/**\n * * Write a function to split a given list into two parts where the length of the first part of the list is given.\n */", "entry_point": "splitTwoParts", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nvar arg01 = 3;\nvar x0 = splitTwoParts(arg00, arg01);\nvar v0 = [[1, 1, 2], [3, 4, 4, 5, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"b\", \"c\", \"d\"];\nvar arg11 = 2;\nvar x1 = splitTwoParts(arg10, arg11);\nvar v1 = [[\"a\", \"b\"], [\"c\", \"d\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nvar arg21 = 4;\nvar x2 = splitTwoParts(arg20, arg21);\nvar v2 = [[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "language": "javascript", "canonical_solution": "  const result = [];\n  const list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (i < l) {\n      result.push(list1[i]);\n    } else {\n      list2.push(list1[i]);\n    }\n  }\n  return [result, list2];\n}", "completion": ["\n\n\n/**\n * * Return a function which splits a given list into two parts where the length of the first part of the list is equal to given length.\n *\n * Examples:\n *\n * split(['a', 'b', 'c'], 1) // returns function(x) {return [x, []];}\n * split(['a', 'b', 'c'], 2) // returns function(x) {return [x, []];}\n * split(['a', 'b', 'c'], 3) // returns function(x) {return [x, []];}\n * split(['a', 'b', 'c'], 4) // returns function(x) {return [x, []];}\n * split(['a', 'b', 'c'], 5) // returns function(x) {return [x, []];}\n * split(['a', 'b', 'c'], 6) // returns function(x) {return [x, []];}\n * split(['a', 'b', 'c'], 7) // returns function(x) {return [x, []];}\n * split(['a', 'b', 'c'], 8) // returns function(x) {return [x, []];}\n *\n *\n *\n * @param {number} length - Length of the first part of the list.\n *\n * @returns {Function}\n */\n\n\n\nvar split = function split(list, length) {\n  return ", "\n    let i = 0;\n    let k = 0;\n    let l = 0;\n    let r = 0;\n    let j = 0;\n    let k = 0;\n    let d = 0;\n    let e = 0;\n    let w = 0;\n    let n = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let c = 0;\n    let d1 = 0;\n    let d2 = 0;\n    let x1 = 0;\n    let x2 = 0;\n    let y1 = 0;\n    let y2 = 0;\n    let z1 = 0;\n    let z2 = 0;\n    let c1 = 0;\n    let c2 = 0;\n    let c3 = 0;\n    let d3 = 0;\n    let x3 = 0;\n    let y3 = 0;\n    let z3 = 0;\n    let s = 0;\n    let s1 = 0;\n    let s2 = 0;\n    let s3 = 0;\n    let d4 = 0;\n    let x4 = 0;\n    let y4 = 0;\n    let z4 = 0;\n    let s4 = 0;\n    let s5 = 0;\n    let s6 = 0;\n    let s7 = 0;\n    let s8 = 0;\n    let s9 = 0;\n    let s10 = 0;\n    let s11 = 0;\n    let s12 = 0;\n    let s13 = 0;\n    let s14 = 0;\n    let s15 = 0;\n    let s16 = 0;\n    let s17 = 0;\n    let s18 = 0", "\n\n// ## SplitList\n", "\n", "\n\nvar max = function(arr, len) {\n    if (arr.length >= len) {\n        return arr;\n    }\n    return arr.substr(0, len);\n}\n\nvar _max = max(arr, len);\n\nvar _max2 = _max(arr, len);\n\nvar _max3 = _max.substr(0, len);\n\nvar _max4 = _max.substr(0, len);\n\n/**\n * * Find the leftmost index of a given substring in a given string.\n */\n\nvar lastIndexOf = function(str, sub) {\n    return str.lastIndexOf(sub);\n}\n\nvar _lastIndexOf = lastIndexOf(str, sub);\n\nvar _lastIndexOf2 = _lastIndexOf(str, sub);\n\nvar _lastIndexOf3 = _lastIndexOf.lastIndexOf(sub);\n\nvar _lastIndexOf4 = _lastIndexOf.lastIndexOf(sub);\n\n/**\n * * Find the leftmost index of a given substring in a given string, starting from a given index.\n */\n\nvar lastIndexOfFrom = "]}
{"task_id": "MBJSP/263", "prompt": "function mergeDict(d1, d2) {\n/**\n * * Write a function to merge two dictionaries.\n */", "entry_point": "mergeDict", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"a\"':100,'\"b\"':200};\nvar arg01 = {'\"x\"':300,'\"y\"':200};\nvar x0 = mergeDict(arg00, arg01);\nvar v0 = {'\"x\"':300,'\"y\"':200,'\"a\"':100,'\"b\"':200};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nvar arg11 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nvar x1 = mergeDict(arg10, arg11);\nvar v1 = {'\"a\"':900,'\"b\"':900,'\"d\"':900};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"a\"':10,'\"b\"':20};\nvar arg21 = {'\"x\"':30,'\"y\"':40};\nvar x2 = mergeDict(arg20, arg21);\nvar v2 = {'\"x\"':30,'\"y\"':40,'\"a\"':10,'\"b\"':20};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to merge two dictionaries.", "language": "javascript", "canonical_solution": "  const result = {};\n  for (const key in d1) {\n    result[key] = d1[key];\n  }\n  for (const key in d2) {\n    result[key] = d2[key];\n  }\n  return result;\n}", "completion": ["\nvar merge = require('deepmerge');\nvar d1 = { foo: 'bar', hello: 'world' };\nvar d2 = { bar: 'hello', baz: 'world' };\nmerge(d1, d2);\n</code></pre>\n<h3>valueOf</h3>\n<pre><code>var valueOf = require('object-valueof');\nvar d1 = { foo: 'bar', hello: 'world' };\nvar d2 = { bar: 'hello', baz: 'world' };\nmerge(d1, d2);\n</code></pre>\n<h3>subtract</h3>\n<pre><code>var subtract = require('object-subtract');\nvar d1 = { foo: 'bar', hello: 'world' };\nvar d2 = { bar: 'hello', baz: 'world' };\nmerge(d1, d2);\n</code></pre>\n<h3>toObject</h3>\n<pre><code>var toObject = require('to-object');\nvar d1 = { foo: 'bar', hello: 'world' };\nvar d2 = { bar: 'hello', baz: 'world' };\nmerge(d1, d2);\n</code></pre>\n<h3>toString</h3>\n<pre><code>var toString = require('to-string');\nvar d1 = { foo: 'bar', hello: 'world' };\nvar d2 = { bar: 'hello', baz: 'world' };\nmerge(d1, d2);\n</code></pre>\n<h3>values</h3>\n<pre><code>var values = require('object-values", "\n", "\n", "\n", "\n"]}
{"task_id": "MBJSP/264", "prompt": "function dogAge(hage) {\n/**\n * * Write a function to calculate a dog's age in dog's years.\n */", "entry_point": "dogAge", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = dogAge(arg00);\nvar v0 = 61;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = dogAge(arg10);\nvar v1 = 73;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 24;\nvar x2 = dogAge(arg20);\nvar v2 = 109;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate a dog's age in dog's years.", "language": "javascript", "canonical_solution": "    if (hAge < 2) {\n        return 0;\n    }\n    return (hAge - 2) * 4 + 21;\n}", "completion": ["\n", "\nvar age = function (hage) {\n    var age = (hage - 5) / 1.5;\n    var dogs = age * age;\n    var years = age / 2;\n    console.log('It is'+ dogs +'dog(s)');\n    console.log('It is'+ years +'year(s)');\n};\nage(18);\n/**\n * * Write a function to calculate a dog's age in dog's years.\n */\nvar age = function (hage) {\n    var age = (hage - 5) / 1.5;\n    var dogs = age * age;\n    var years = age / 2;\n    console.log('It is'+ dogs +'dog(s)');\n    console.log('It is'+ years +'year(s)');\n};\nage(18);\n/**\n * * Write a function to calculate a dog's age in dog's years.\n */\nvar age = function (hage) {\n    var age = (hage - 5) / 1.5;\n    var dogs = age * age;\n    var years = age / 2;\n    console.log('It is'+ dogs +'dog(s)');\n    console.log('It is'+ years +'year(s)');\n};\nage(18);\n/**\n * * Write a function to calculate a dog's age in dog's years.\n */\nvar age = ", "\n    ", "\n\nvar dogAge = function dogAge(age) {\n  return age;\n};\n\nvar dogYears = dogAge(18);\n\nconsole.log(dogYears); // 20\n\n}, 'dogAge');\n\n// Using ES6 Arrow Functions\n(", "\n\nvar age_map = {\n  18: 1,\n  19: 2,\n  20: 3,\n  21: 4,\n  22: 5,\n  23: 6,\n  24: 7,\n  25: 8,\n  26: 9,\n  27: 10,\n  28: 11,\n  29: 12,\n  30: 13,\n  31: 14,\n  32: 15,\n  33: 16,\n  34: 17,\n  35: 18,\n  36: 19,\n  37: 20,\n  38: 21,\n  39: 22,\n  40: 23,\n  41: 24,\n  42: 25,\n  43: 26,\n  44: 27,\n  45: 28,\n  46: 29,\n  47: 30,\n  48: 31,\n  49: 32,\n  50: 33,\n  51: 34,\n  52: 35,\n  53: 36,\n  54: 37,\n  55: 38,\n  56: 39,\n  57: 40,\n  58: 41,\n  59: 42,\n  60: 43,\n  61: 44,\n  62: 45,\n  63: 46,\n  64: 47,\n  65: 48,\n  66: 49,\n  67: 50,\n  68: 51,\n  69: 52,\n  70: 53,\n  71: 54,\n  72: 55,\n  73: 56,\n  74: 57,\n  75: 58,\n  76: 59,\n  77: 60,\n  78: 61,\n  79: 62,\n  80: 63,\n  81: 64,\n  82: 65,\n  "]}
{"task_id": "MBJSP/265", "prompt": "function listSplit(s, step) {\n/**\n * * Write a function to split a list for every nth element.\n */", "entry_point": "listSplit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"];\nvar arg01 = 3;\nvar x0 = listSplit(arg00, arg01);\nvar v0 = [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar arg11 = 3;\nvar x1 = listSplit(arg10, arg11);\nvar v1 = [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"];\nvar arg21 = 2;\nvar x2 = listSplit(arg20, arg21);\nvar v2 = [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to split a list for every nth element.", "language": "javascript", "canonical_solution": "    return s.reduce((acc, curr, i) => {\n        acc[i % step].push(curr);\n        return acc;\n    }, [...Array(step)].map(_ => []));\n}", "completion": ["\n", "\n\n\t\t\tvar start = s.start,\n\t\t\t\tend = s.end,\n\t\t\t\tstartSize = start - current,\n\t\t\t\tendSize = end - current,\n\t\t\t\tsplitChunks = [],\n\t\t\t\ti,\n\t\t\t\tlen,\n\t\t\t\tchunk;\n\n\t\t\tfor (i = 0, len = textParts.length; i < len; i++) {\n\t\t\t\tif (current === len - 1) {\n\t\t\t\t\tchunk = textParts.slice(0, i).join('') + '<br>';\n\n\t\t\t\t\t// Advance start position to the end of the text node.\n\t\t\t\t\ts.start = start = start + chunk.length;\n\n\t\t\t\t\t// Append the chunk to the list.\n\t\t\t\t\tsplitChunks.push(chunk);\n\t\t\t\t} else {\n\t\t\t\t\tchunk = textParts.slice(0, i + 1).join('') + '<br>';\n\n\t\t\t\t\t// Advance start position to the end of the text node.\n\t\t\t\t\ts.start = start = start + chunk.length;\n\n\t\t\t\t\t// Append the chunk to the list.\n\t\t\t\t\tsplitChunks.push(chunk);\n\n\t\t\t\t\t// Advance start position past the end of the text node.\n\t\t\t\t\tstart = s.start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there are any chunks left after splitting the original text,\n\t\t\t// append them to the splitChunks list.\n\t\t\tif (splitChunks.length) {", "\n\n        var index = 0;\n        ", "\n\n", "\n"]}
{"task_id": "MBJSP/266", "prompt": "function lateralsurfaceCube(l) {\n/**\n * * Write a function to find the lateral surface area of a cube.\n */", "entry_point": "lateralsurfaceCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = lateralsurfaceCube(arg00);\nvar v0 = 100;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar x1 = lateralsurfaceCube(arg10);\nvar v1 = 324;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = lateralsurfaceCube(arg20);\nvar v2 = 400;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the lateral surface area of a cube.", "language": "javascript", "canonical_solution": "    let area = (l * 2) * (l * 2)\n    return area\n}", "completion": ["\n\n  let lateralSurfaceArea = 0;\n\n  ", "\nconst lateral_surface_area = l => {\n    const [l1, l2] = l;\n    const l1_l2 = l1 * l2;\n    const l1_l1 = l2 * l1;\n    const l1_l1_l2 = l2 * l1 * l1;\n    return Math.sqrt((l1_l1_l2 * l1_l1_l2) + (l1_l2 * l1_l2));\n};\n\n/**\n * * Write a function to find the lateral surface area of a cube.\n */\nconst lateral_surface_volume = l => {\n    const [l1, l2, l3] = l;\n    const l1_l2_l3 = l1 * l2 * l3;\n    const l1_l2_l3_l1 = l1 * l2 * l3 * l1;\n    return Math.sqrt((l1_l2_l3_l1 * l1_l2_l3_l1) + (l1_l2_l3 * l1_l2_l3));\n};\n\n/**\n * * Write a ", "\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a function to find the lateral surface area of a cube.\n */\n\n\n/**\n *  Write a ", "\n    let lateralSurfaceArea = 0;\n    let lateralSurfaceAreaLeft = 0;\n    let lateralSurfaceAreaRight = 0;\n    let lateralSurfaceAreaBack = 0;\n    let lateralSurfaceAreaFront = 0;\n\n    ", "\n  let lateralSurfaceArea = 0;\n\n  for (let i = 0; i < 4; i++) {\n    let temp = l[i];\n    l[i] = l[i + 4];\n    l[i + 4] = temp;\n  }\n\n  for (let i = 0; i < 4; i++) {\n    lateralSurfaceArea += 1.0 / (l[i] * l[i]);\n  }\n\n  return lateralSurfaceArea;\n};\n\nexport {\n  lateralSurfaceArea\n};\n<|endoftext|>"]}
{"task_id": "MBJSP/267", "prompt": "function squareSum(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of first n odd natural numbers.\n */", "entry_point": "squareSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = squareSum(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = squareSum(arg10);\nvar v1 = 35;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squareSum(arg20);\nvar v2 = 84;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of squares of first n odd natural numbers.", "language": "javascript", "canonical_solution": "  //write your code here\n  let arr = [1, 3, 5, 7, 9];\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    let index = i % 4;\n    sum += arr[index] * arr[index];\n  }\n  return sum;\n}", "completion": ["\n    console.log(`Sum of squares of first ${n} odd natural numbers: ${n * (n + 1) * (n + 2) * (n + 3) / 6}`);\n};\n\n```\n\nOutput:\n\n```bash\n$ node find-odd-squares\nSum of squares of first 7 odd natural numbers: 28\nSum of squares of first 5 odd natural numbers: 10\nSum of squares of first 3 odd natural numbers: 6\nSum of squares of first 1 odd natural numbers: 4\nSum of squares of first 0 odd natural numbers: 0\n```\n\n**Question 2.2**: Write a JavaScript function to find the maximum of the odd natural numbers from the sequence of first n odd natural numbers.\n\n```javascript\n/**\n * * Write a JavaScript function to find the maximum of the odd natural numbers from the sequence of first n odd natural numbers.\n */\nconst findMaxOddNumbers = (n) => {\n/**\n * * Write a JavaScript ", "\nsumsq_n_odd(n) {\n\treturn (n % 2 == 1)?\n\t\tn * n :\n\t\tsumsq_n_odd(n - 1);\n\t\t}\n/**\n * * Write a JavaScript function to find the sum of squares of first n odd natural numbers.\n */\nsumsq_n_even(n) {\n\treturn (n % 2 == 0)?\n\t\tn * n :\n\t\tsumsq_n_even(n - 1);\n\t\t}\n/**\n * * Write a JavaScript function to find the sum of squares of first n odd natural numbers.\n */\nsumsq_n_odd(n) {\n\treturn (n % 2 == 1)?\n\t\tn * n :\n\t\tsumsq_n_odd(n - 1);\n\t\t}\n/**\n * * Write a JavaScript function to find the sum of squares of first n odd natural numbers.\n */\nsumsq_n_even(n) {\n\treturn (n % 2 == 0)?\n\t\tn * n :\n\t\tsumsq_n_even(n - 1);\n\t\t}\n/**\n * * Write a JavaScript function to find the sum of squares of first n odd natural numbers.\n */\nsumsq_n_odd(n) {\n\treturn (n % 2 == 1)?\n\t\tn * n :\n\t\tsumsq_n_odd(n - 1);\n\t\t}\n/**\n * * Write a JavaScript ", "\nn.odd.sum.squares = function() {\n    // TODO: Implement the function\n}\n```\n\nHere is a completed solution:\n\n```javascript\nn.odd.sum.squares = function() {\n    var sumSquares = function(arr) {\n        var sum = 0;\n        for (var i = 0; i < arr.length; i++) {\n            var num = arr[i];\n            if (num % 2!== 1) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n    return sumSquares(n);\n}\n```\n\n### \ud83d\udcaf custom function\n\nThe `sumSquares` ", "\n\n    $('.js-sum-squares-of-first-n-odd-natural-numbers').click(", "\n"]}
{"task_id": "MBJSP/268", "prompt": "function findStarNum(n) {\n/**\n * * Write a function to find the n'th star number.\n */", "entry_point": "findStarNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = findStarNum(arg00);\nvar v0 = 37;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = findStarNum(arg10);\nvar v1 = 73;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = findStarNum(arg20);\nvar v2 = 121;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the n'th star number.", "language": "javascript", "canonical_solution": "\treturn (6 * n * (n - 1) + 1) \n}", "completion": ["\nvar printStar = function printStar(n) {\n  var out = '';\n\n  for (var i = 1; i <= n; i++) {\n    out += '*';\n  }\n\n  console.log(out);\n}; // Prints a function to find then'th star number.\n\n\nprintStar(3); // Prints a function to find then'th star number.\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;**[\u2b06 back to top](#table-of-contents)**\n\n## \u5176\u4ed6\u8bed\u6cd5\u548c\u7ed3\u6784\n\n### \u7ed3\u6784\u6a21\u5f0f\n\n\u7ed3\u6784\u6a21\u5f0f\uff08Structure Pattern\uff09\uff0c\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u5728\u7b97\u6cd5\u7684\u8bbe\u8ba1\u65f6\u5c31\u505a\u4e86\u5927\u91cf\u7684\u5c01\u88c5\u3002\u7ed3\u6784\u6a21\u5f0f\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u9700\u8981\u521b\u5efa\u548c\u7ef4\u62a4\u4e00\u4e2a\u7b97\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u8fd9\u4e2a\u6a21\u5f0f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6709\u6bd4\u8f83\u5927\u7684\u5730\u4f4d\u3002\n\n- \u7ee7\u627f\u6a21\u5f0f\n\n```javascript\n", "\nreturn n > 0 && (n == 1 || n == 2 || n == 3 || n == 4 || n == 5 || n == 6 || n == 7 || n == 8 || n == 9 || n == 10 || n == 11 || n == 12 || n == 13 || n == 14 || n == 15 || n == 16 || n == 17 || n == 18 || n == 19 || n == 20 || n == 21 || n == 22 || n == 23 || n == 24 || n == 25 || n == 26 || n == 27 || n == 28 || n == 29 || n == 30 || n == 31 || n == 32 || n == 33 || n == 34 || n == 35 || n == 36 || n == 37 || n == 38 || n == 39 || n == 40 || n == 41 || n == 42 || n == 43 || n == 44 || n == 45 || n == 46 || n == 47 || n == 48 || n == 49 || n == 50 || n == 51 || n == 52 || n == 53 || n == 54 || n == 55 || n == 56 || n == 57 || n == 58 || n == 59 || n == 60 || n == 61 || n == 62 || n == 63 || n == 64 || n == 65 || n == 66 || n == 67 || n == 68 || n == 69 || n == 70 || n == 71 || n == 72 || n == 73 || n == 74 || n == 75 || n == 76 || n == 77 || n == 78 || n == 79 || n == 80 || n == 81 || n == 82 || n == 83 || n == 84 || n == 85 || n == 86 || n == 87 || n == 88 || n == 89 || n == 90 || n == 91 || n == 92 || n == 93 || n == 94 || n == 95 || n == 96 || n == 97 || n == 98 || n", "\n", "\nfunction ", "\n"]}
{"task_id": "MBJSP/269", "prompt": "function asciiValue(k) {\n/**\n * * Write a function to find the ascii value of a character.\n */", "entry_point": "asciiValue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"A\";\nvar x0 = asciiValue(arg00);\nvar v0 = 65;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"R\";\nvar x1 = asciiValue(arg10);\nvar v1 = 82;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"S\";\nvar x2 = asciiValue(arg20);\nvar v2 = 83;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the ascii value of a character.", "language": "javascript", "canonical_solution": "  return k.charCodeAt(0);\n}", "completion": ["\n", "\n", "\nWriteAsciiFunction: (this: string, jsObject: JSPromise<string>, symbol: Symbol) => string,\n/**\n * * Write a function to find the hex value of a character.\n */\nWriteHexFunction: (this: string, jsObject: JSPromise<string>, symbol: Symbol) => string,\n/**\n * * Write a function to find the octal value of a character.\n */\nWriteOctalFunction: (this: string, jsObject: JSPromise<string>, symbol: Symbol) => string,\n/**\n * * Write a function to find the string representation of a character.\n */\nWriteStringFunction: (this: string, jsObject: JSPromise<string>, symbol: Symbol) => string,\n\n/**\n * * Write a function to find the ascii value of a character.\n */\nWriteAsciiHexFunction: (this: string, jsObject: JSPromise<string>, symbol: Symbol) => string,\n/**\n * * Write a function to find the hex value of a character.\n */\nWriteHexHexFunction: (this: string, jsObject: JSPromise<string>, symbol: Symbol) => string,\n/**\n * * Write a function to find the string representation of a character.\n */\nWriteStringHexFunction: (this: string, jsObject: JSPromise<string>, symbol: Symbol) => string,\n\n/**\n * * Write a function to find the string representation of a character.\n */\nWriteAsciiStringFunction: (this: string, jsObject: JSPromise<string>, symbol: Symbol) => string,\n/**\n * * Write a ", "\n", "\nk.write = function(str, l) {\n    for (var i = 0; i < l; i++) {\n        str = str.replace(new RegExp(i, 'g'), iValue(i));\n    }\n    return str;\n};\n\n/**\n * * Write a function to find the hex value of a character.\n */\nk.writeHex = function(str, l) {\n    for (var i = 0; i < l; i++) {\n        str = str.replace(new RegExp(i, 'g'), iValueHex(i));\n    }\n    return str;\n};\n\n/**\n * * Write a function to find the integer value of a character.\n */\nk.writeInt = function(str, l) {\n    for (var i = 0; i < l; i++) {\n        str = str.replace(new RegExp(i, 'g'), iValueInt(i));\n    }\n    return str;\n};\n\n/**\n * * Write a function to find the ascii value of a character, base 2.\n */\nk.write2 = function(str, l) {\n    for (var i = 0; i < l; i++) {\n        str = str.replace(new RegExp(i, 'g'), iValue2(i));\n    }\n    return str;\n};\n\n/**\n * * Write a function to find the ascii value of a character, base 8.\n */\nk.write8 = "]}
{"task_id": "MBJSP/270", "prompt": "function sumEvenAndEvenIndex(arr, n) {\n/**\n * * Write a JavaScript function to find the sum of even numbers at even positions.\n */", "entry_point": "sumEvenAndEvenIndex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 12, 1, 18, 8];\nvar arg01 = 6;\nvar x0 = sumEvenAndEvenIndex(arg00, arg01);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 20, 17, 9, 2, 10, 18, 13, 6, 18];\nvar arg11 = 10;\nvar x1 = sumEvenAndEvenIndex(arg10, arg11);\nvar v1 = 26;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 12, 1];\nvar arg21 = 4;\nvar x2 = sumEvenAndEvenIndex(arg20, arg21);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of even numbers at even positions.", "language": "javascript", "canonical_solution": "    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] % 2 === 0 && i % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}", "completion": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nreturn (\n  arr.reduce(", "\nreturn arr.reduce((a, b, i) => (a + b + i) % 2 === 0? a + b + i : a, 0);\n}\n\n```\n\n</details>\n<details>\n<summary>What if I change the code to use the `filter` and `map` methods?</summary>\n\nHere is a similar program. We do not change the code in the **index.js** file. Instead, we have written the code in a different file. \n\n```javascript\nimport {filter, map} from './code';\n\nconst arr = ['a', 'b', 'c'];\n\nconsole.log(filterAndMap(arr, n) === filterAndMap(arr, 3));\n```\n\nOutput:\n\n```javascript\ntrue\ntrue\n```\n\n</details>\n<details>\n<summary>What if I have more than 1 array and I want to find the sum of all the even numbers in all the arrays?</summary>\n\nHere is a similar program. We do not change the code in the **index.js** file. Instead, we have written the code in a different file. \n\n```javascript\nimport {filter, map} from './code';\n\nconst arr1 = ['a', 'b', 'c'];\nconst arr2 = ['d', 'e', 'f'];\n\nconsole.log(filterAndMap(arr1, n) === filterAndMap(arr2, n));\n```\n\nOutput:\n\n```javascript\ntrue\ntrue\n```\n\n</details>\n<details>\n<summary>What if I want to sum the even numbers in a specified range of the array?</summary>\n\nHere is a similar program. We do not change", "\n\n    // Write a ", "\nreturn _sum(arr, n) / 2;\n}\n// Test cases.\n\nprintAndThen(\"test 1\", test1);\nprintAndThen(\"test 2\", test2);\nprintAndThen(\"test 3\", test3);\nprintAndThen(\"test 4\", test4);\nprintAndThen(\"test 5\", test5);\nprintAndThen(\"test 6\", test6);\nprintAndThen(\"test 7\", test7);\nprintAndThen(\"test 8\", test8);\nprintAndThen(\"test 9\", test9);\nprintAndThen(\"test 10\", test10);\nprintAndThen(\"test 11\", test11);\nprintAndThen(\"test 12\", test12);\nprintAndThen(\"test 13\", test13);\nprintAndThen(\"test 14\", test14);\nprintAndThen(\"test 15\", test15);\nprintAndThen(\"test 16\", test16);\nprintAndThen(\"test 17\", test17);\nprintAndThen(\"test 18\", test18);\nprintAndThen(\"test 19\", test19);\nprintAndThen(\"test 20\", test20);\nprintAndThen(\"test 21\", test21);\nprintAndThen(\"test 22\", test22);\nprintAndThen(\"test 23\", test23);\nprintAndThen(\"test 24\", test24);\nprintAndThen(\"test 25\", test25);\nprintAndThen(\"test 26\", test26);\nprintAndThen(\"test 27\", test27);\nprintAndThen(\"test 28\", test28);\nprintAndThen(\"test 29\", test29);\nprintAndThen(\"test 30\", test30);\nprintAndThen(\"test 31\", test31);\nprintAndThen(\"test 32\", test32);\nprintAndThen(\"test 33\", test33);\nprintAndThen(\"test 34\", test34);\nprintAndThen(\"test"]}
{"task_id": "MBJSP/271", "prompt": "function evenPowerSum(n) {\n/**\n * * Write a JavaScript function to find the sum of fifth power of first n even natural numbers.\n */", "entry_point": "evenPowerSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = evenPowerSum(arg00);\nvar v0 = 1056;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = evenPowerSum(arg10);\nvar v1 = 8832;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = evenPowerSum(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of fifth power of first n even natural numbers.", "language": "javascript", "canonical_solution": "    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        var j = 2 * i;\n        sum += j * j * j * j * j;\n    }\n    return sum;\n}", "completion": ["\nsum_of_powers(n) {\n    return sum(map(\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n        fn => (map(\n            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n            fn))\n    ))\n}\n```\n\nThe output is:\n\n```\n3\n```\n\n## <a name='fn'></a> Function\n\nThe main function in the JavaScript language is the function. It takes one argument, a list of numbers, and returns the sum of all natural numbers in the list.\n\n### Function Syntax\n\n#### Function Definition\n\n```javascript\n", "\nn = 5;\n", "\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n"]}
{"task_id": "MBJSP/272", "prompt": "function rearExtract(testlist) {\n/**\n * * Write a function to perfom the rear element extraction from list of tuples records.\n */", "entry_point": "rearExtract", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]];\nvar x0 = rearExtract(arg00);\nvar v0 = [21, 20, 19];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]];\nvar x1 = rearExtract(arg10);\nvar v1 = [36, 25, 45];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]];\nvar x2 = rearExtract(arg20);\nvar v2 = [14, 36, 56];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to perfom the rear element extraction from list of tuples records.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < testList.length; i++) {\n    result.push(testList[i][2]);\n  }\n  return result;\n}", "completion": ["\n    ", "\n    ", "\n    log_info(\"Rear\", \"Performing rear element extraction with the offset %d\", offset);\n    long start = get_time();\n    TupleExtractResult* tup = rpc_call_tuple_extract(\"rear\", &context, &res, testlist);\n    long end = get_time();\n\n    // Update the progress bar.\n    progress_bar.update_progress(end-start);\n\n    // Decode the result tuple.\n    for (int i = 0; i < tup->extracted_entries(); i++) {\n        std::string entry = tup->get_entry(i);\n        std::string entry_header = tup->get_header(i);\n        result_values.push_back(entry);\n        std::cout << \"{\" << entry_header << \":\" << entry << \"}\" << std::endl;\n    }\n    delete tup;\n\n    // Log the result.\n    log_result(offset, result_values);\n    result_values.clear();\n\n    // Print the progress bar.\n    progress_bar.print_progress(end-start);\n}\n\n/**\n * * Write a function to perfom the front element extraction from list of tuples records.\n */\nvoid Front() {\n/**\n * * Write a ", "\n} else {\n/**\n * * Write a ", "\nconst d = new Date();\nconst ds = d.getTime();\nvar fn = 'function_' + ds.toString().padStart(8, '0');\nlet tm = '';\nfor (let i = 0; i < 5; ++i) {\n\tlet arg = '';\n\tif (i > 0) {\n\t\tlet arg = 'args_' + ds.toString().padStart(8, '0');\n\t\twrite_out('rear_extraction_write_function_args');\n\t}\n\tif (i == 4) {\n\t\tlet arg = 'args_' + ds.toString().padStart(8, '0');\n\t}\n\tlet t = 'timestamp_' + ds.toString().padStart(8, '0');\n\twrite_out('rear_extraction_write_function_' + t);\n\tlet record = [arg, fn, t];\n\tif (i > 0) {\n\t\twrite_out(JSON.stringify(record) + '\\n');\n\t}\n\twrite_out('rear_extraction_write_function_' + t);\n\twrite_out('\\n');\n\ttm = t;\n}\nwrite_out('rear_extraction_write_function_' + tm);\nwrite_out('\\n');\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/273", "prompt": "function substractElements(testtup1, testtup2) {\n/**\n * * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n */", "entry_point": "substractElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 5];\nvar arg01 = [2, 5, 18];\nvar x0 = substractElements(arg00, arg01);\nvar v0 = [8, -1, -13];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 2, 3];\nvar arg11 = [24, 45, 16];\nvar x1 = substractElements(arg10, arg11);\nvar v1 = [-13, -43, -13];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [7, 18, 9];\nvar arg21 = [10, 11, 12];\nvar x2 = substractElements(arg20, arg21);\nvar v2 = [-3, 7, -3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] - testTup2[i]);\n  }\n  return result;\n}", "completion": ["\nexamples = (\n\t# Take one tuple\n\t[(1, \"A\"), (2, \"B\"), (3, \"C\")]\n\t# Take two tuples\n\t[(4, \"D\"), (5, \"E\")]\n\t# Take two tuples and substract their contents\n\t[(1, \"A\"), (2, \"B\"), (3, \"C\")],\n\t[(4, \"D\"), (5, \"E\")],\n\t[(1, \"A\"), (2, \"B\"), (3, \"C\"), (4, \"D\"), (5, \"E\")]\n)\ntest = eval(compile(examples))\n```\n\n</details>\n\n<details><summary><b>Samples with @{link_async}</b></summary>\n\nThis sample shows how you can use [`@{link_async}`](/docs/api/python/pyasyncio/asyncio/futures.html#pyasyncio.futures.Future) for asynchronous data fetching.\n\n<details>\n<summary>Output example</summary>\n\n```python\nimport pyasyncio\nimport asyncio\nimport async_generator\n\nfrom pythomata import Example, ExampleSet, ExampleTuple, get_example\n\nimport random\n\n\nclass RandomSumExample(Example):\n    def __init__(self, *args, **kwargs):\n        super(RandomSumExample, self).__init__(*args, **kwargs)\n        self.sum = 0\n\n    async def set_inputs(self):\n        self.sum = random.randint(1, 100)\n\n    async def set_outputs(self):\n        self.outputs", "\n", "\n", "\n$count = 0;\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\n$count = 0;\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\n$count = 0;\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n\t$count += 0;\n}\nfor ($i = 0; $i < 3; ++$i) {\n", "\n"]}
{"task_id": "MBJSP/274", "prompt": "function evenBinomialCoeffSum(n) {\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */", "entry_point": "evenBinomialCoeffSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = evenBinomialCoeffSum(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = evenBinomialCoeffSum(arg10);\nvar v1 = 32;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = evenBinomialCoeffSum(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find sum of even index binomial coefficients.", "language": "javascript", "canonical_solution": "    // TODO: write your code here\n    return (1 << (n - 1))\n}", "completion": ["\n", "\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript ", "\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of even index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript function to find sum of odd index binomial coefficients.\n */\n\n/**\n * * Write a JavaScript ", "\n\n/**\n * @param {number} n\n * @return {number}\n */\n", "\n    int i = 0;\n    int c = 1;\n    for (i = 0; i < n; i++) {\n        for (c = 1; c <= n-i; c++) {\n            if (c % 2 == 0) {\n                return c;\n            }\n        }\n    }\n}\n```\n\nHere's a list of some functions you can apply in JavaScript:\n\n* [`inomialCoeffSum`](https://github.com/alexmojaki/avro-python/blob/master/src/avro/python/test.py#L2)\n* [`binomialCoeffSum`](https://github.com/alexmojaki/avro-python/blob/master/src/avro/python/test.py#L3)\n* [`nChooseK`](https://github.com/alexmojaki/avro-python/blob/master/src/avro/python/test.py#L4)\n\n### C++ / C\n\nIn C++ / C you can run these tests:\n\n* [`test_inomial_coeff_sum`](https://github.com/alexmojaki/avro-python/blob/master/src/avro/test_cpp/test_inomial_coeff_sum.cpp#L2)\n* [`test_binomial_coeff_sum`](https://github.com/alexmojaki/avro-python/blob/master/src/avro/test_cpp/test_binomial_coeff_sum.cpp#L3)\n\n## Running the tests\n\nIn the root directory:\n\n```bash\n$ make"]}
{"task_id": "MBJSP/275", "prompt": "function getPosition(a, n, m) {\n/**\n * * Write a JavaScript function to find the position of the last removed element from the given array.\n */", "entry_point": "getPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 4];\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = getPosition(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 3];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = getPosition(arg10, arg11, arg12);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4];\nvar arg21 = 4;\nvar arg22 = 1;\nvar x2 = getPosition(arg20, arg21, arg22);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the position of the last removed element from the given array.", "language": "javascript", "canonical_solution": "    for (let i = 0; i < n; i++) {\n        a[i] = (a[i] / m + (a[i] % m != 0))\n    }\n    let result, maxx = -1\n    for (let i = n - 1; i >= 0; i--) {\n        if (maxx < a[i]) {\n            maxx = a[i]\n            result = i\n        }\n    }\n    return result + 1\n}", "completion": ["\nreturn {\n  /* eslint-disable */\n  lastIndexOf: function (a, n, m) {\n    n = Number(n);\n    a = Array.isArray(a)? a : [a];\n    m = Array.isArray(m)? m : [m];\n    return a.reduce(", "\n", "\n", "\n", "\n"]}
{"task_id": "MBJSP/276", "prompt": "function volumeCylinder(r, h) {\n/**\n * * Write a function to find the volume of a cylinder.\n */", "entry_point": "volumeCylinder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar x0 = volumeCylinder(arg00, arg01);\nvar v0 = 1570.7500000000002;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 5;\nvar x1 = volumeCylinder(arg10, arg11);\nvar v1 = 251.32000000000002;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 10;\nvar x2 = volumeCylinder(arg20, arg21);\nvar v2 = 502.64000000000004;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the volume of a cylinder.", "language": "javascript", "canonical_solution": "  return 3.1415 * r * r * h;\n}", "completion": ["\n", "\nvar cylinder = function (r, h) {\n    var stack = [];\n    var stack_index = 0;\n    var slice_index = 0;\n    var slice_volume = 0;\n    var slice_area = 0;\n    var slice_height = 0;\n    var slice_radius = 0;\n    var y = 0;\n    var z = 0;\n\n    // calculate area of each slice\n    for (slice_index = 0; slice_index < h; slice_index++) {\n        slice_area = 0;\n        // calculate radius of each slice\n        for (slice_radius = r; slice_radius >= 0; slice_radius--) {\n            slice_height = slice_radius * slice_radius / (4 * slice_radius + 1);\n            slice_area += slice_height * (slice_radius + 1);\n        }\n        // calculate volume\n        slice_volume = slice_area * slice_index;\n        // store the slice\n        stack[stack_index++] = slice_volume;\n    }\n\n    // return the volume of the cylinder\n    return stack[0];\n};\n\n/**\n * * Write a function to find the volume of a cone.\n */\nvar cone = ", "\nvar cylinder = function cylinder(r, h) {\n    return Math.abs(r * r * (Math.PI - Math.asin(h / r))));\n};\n\n/**\n * * Write a function to find the volume of a torus.\n */\nvar torus = function torus(r1, r2) {\n    return (2 * Math.PI * r1 * r2) / 3;\n};\n\n/**\n * * Write a function to find the volume of a pyramid.\n */\nvar pyramid = function pyramid(height, depth) {\n    return height * (1 - (1 - depth) / (height + 1)) / 2;\n};\n\n/**\n * * Write a function to find the volume of a sphere.\n */\nvar sphere = function sphere(radius) {\n    return (4 / 3) * Math.PI * (radius * radius * radius);\n};\n\n/**\n * * Write a function to find the surface area of a torus.\n */\nvar torus_area = function torus_area(r1, r2) {\n    return 2 * Math.PI * Math.pow(r1, 2) * (1 + Math.sin(2 * Math.PI / 3) * Math.cos(2 * Math.PI * r1 / r2));\n};\n\n/**\n * * Write a function to find the surface area of a cylinder.\n */\nvar cylinder_area = function cylinder_area(r, h) {\n    return Math.abs(2 * Math.PI * r * h) + Math.abs(2 * Math.PI * r * (Math.PI - Math.asin(h / r)));\n};\n\n/**\n * * Write a ", "\n", "\nlet cylinder = (r, h) => r * r * Math.PI * h / 3;\nlet findVolume = cylinder;\n/**\n * * Write a function to find the surface area of a cylinder.\n */\nlet cylinderArea = (r, h) => r * r * Math.PI * (h + r) / 2;\nlet findArea = cylinderArea;\n/**\n * * Write a function to find the surface area of a cone.\n */\nlet coneArea = (r, h) => Math.PI * (r * r + h * h) / 3;\nlet findArea = coneArea;\n/**\n * * Write a function to find the volume of a cone.\n */\nlet coneVolume = (r, h) => Math.PI * r * r * h / 3;\nlet findVolume = coneVolume;\n/**\n * * Write a function to find the surface area of a sphere.\n */\nlet sphereArea = (r) => 4 * Math.PI * r * r;\nlet findArea = sphereArea;\n/**\n * * Write a function to find the volume of a sphere.\n */\nlet sphereVolume = (r) => Math.PI * r * r * r / 3;\nlet findVolume = sphereVolume;\n/**\n * * Write a function to find the surface area of a cuboid.\n */\nlet cuboidArea = (r, h) => r * h;\nlet findArea = cuboidArea;\n/**\n * * Write a function to find the volume of a cuboid.\n */\nlet cuboidVolume = (r, h) => r * r * h;\nlet findVolume = cuboidVolume;\n/**\n * * Write a "]}
{"task_id": "MBJSP/277", "prompt": "function dictFilter(dict, n) {\n/**\n * * Write a function to filter a dictionary based on values.\n */", "entry_point": "dictFilter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg01 = 170;\nvar x0 = dictFilter(arg00, arg01);\nvar v0 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Pierre Cox\"':190};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg11 = 180;\nvar x1 = dictFilter(arg10, arg11);\nvar v1 = {'\"Alden Cantrell\"':180,'\"Pierre Cox\"':190};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Cierra Vega\"':175,'\"Alden Cantrell\"':180,'\"Kierra Gentry\"':165,'\"Pierre Cox\"':190};\nvar arg21 = 190;\nvar x2 = dictFilter(arg20, arg21);\nvar v2 = {'\"Pierre Cox\"':190};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to filter a dictionary based on values.", "language": "javascript", "canonical_solution": "  const newDict = {};\n  for (let key in dict) {\n    if (dict[key] >= n) {\n      newDict[key] = dict[key];\n    }\n  }\n  return newDict;\n}", "completion": ["\nconst write_filter_function = write_filter_function_helper(dict, n);\n\n", "\n", "\n  var _filter;\n  return {\n    writable: true,\n    value: function (func) {\n      if (_filter) {\n        throw new Error('Writing to filter after writing to filter not allowed.');\n      }\n      _filter = func;\n    }\n  };\n}\n\n/**\n * * Filter a dictionary based on values.\n */\n", "\n", "\nvar filter = _.compose(\n  _.filter,\n  _.values\n)\n/**\n * * Write a function to map a dictionary to a list of values.\n */\nvar map = _.compose(\n  _.values,\n  _.map\n)\n/**\n * * Write a function to create a flat list of values.\n */\nvar flat = _.compose(\n  _.flatten,\n  _.values\n)\n/**\n * * Write a function to create a list of values, sorted in reverse order.\n */\nvar reverse = _.compose(\n  _.toArray,\n  _.sorted\n)\n/**\n * * Write a function to create a list of values, sorted by a given key.\n */\nvar sort = _.compose(\n  _.toArray,\n  _.sorted\n)\n/**\n * * Write a function to create a list of values, sorted by a given key, using a custom comparator function.\n */\nvar sortBy = _.compose(\n  _.toArray,\n  _.sortedBy\n)\n/**\n * * Write a function to create a list of values, sorted by a given key, using a custom comparator function.\n */\nvar sortBy$1 = _.compose(\n  _.toArray,\n  _.sortedBy\n)\n/**\n * * Write a function to create a list of values, sorted by a given value.\n */\nvar sortByValue = _.compose(\n  _.toArray,\n  _.sortedBy\n)\n/**\n * * Write a function to create a list of values, sorted by a given value, using a custom comparator "]}
{"task_id": "MBJSP/278", "prompt": "function countFirstElements(testtup) {\n/**\n * * Write a function to find the element count that occurs before the record in the given tuple.\n */", "entry_point": "countFirstElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, [4, 6], 10];\nvar x0 = countFirstElements(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 9, [5, 7], 11];\nvar x1 = countFirstElements(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 15, 5, 8, [2, 3], 8];\nvar x2 = countFirstElements(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the element count that occurs before the record in the given tuple.", "language": "javascript", "canonical_solution": "  for (let count = 0; count < testTup.length; count++) {\n    if (testTup[count] instanceof Array) {\n      return count\n    }\n  }\n  return testTup.length\n}", "completion": ["\n", "\nlet getCountBefore = function(beforeTup, testTup) {\n  let i = beforeTup.findIndex(tup => tup.equal(testTup))\n  return beforeTup[i+1]\n}\n\n/**\n * * Write a function to find the element count that occurs after the record in the given tuple.\n */\nlet getCountAfter = function(afterTup, testTup) {\n  let i = afterTup.findIndex(tup => tup.equal(testTup))\n  return afterTup[i]\n}\n\n/**\n * * Write a function to find the element count that occurs on the left side of the given record.\n */\nlet getCountLeft = function(leftTup, testTup) {\n  let i = leftTup.findIndex(tup => tup.equal(testTup))\n  return leftTup[i-1]\n}\n\n/**\n * * Write a function to find the element count that occurs on the right side of the given record.\n */\nlet getCountRight = function(rightTup, testTup) {\n  let i = rightTup.findIndex(tup => tup.equal(testTup))\n  return rightTup[i+1]\n}\n\n/**\n * * Write a function to find the element count that occurs on the left and right sides of the given record.\n */\nlet getCountLeftRight = function(leftTup, rightTup, testTup) {\n  let i = leftTup.findIndex(tup => tup.equal(testTup))\n  return leftTup[i-1] + rightTup[i+1]\n}\n\n/**\n * * Write a ", "\nvar functionFindElementCountBeforeRecord = function findElementCountBeforeRecord(tup, record) {\nreturn tup[0] < record[0]? tup[2] : tup[1];\n};\n/**\n * * Write a function to find the element count that occurs after the record in the given tuple.\n */\nvar functionFindElementCountAfterRecord = function findElementCountAfterRecord(tup, record) {\nreturn tup[0] > record[0]? tup[2] : tup[1];\n};\n/**\n * * Write a function to find the last element that occurs before the record in the given tuple.\n */\nvar functionFindLastElementBeforeRecord = function findLastElementBeforeRecord(tup, record) {\nreturn tup[0] < record[0]? [tup[0], tup[1], tup[2]] : tup;\n};\n/**\n * * Write a function to find the last element that occurs after the record in the given tuple.\n */\nvar functionFindLastElementAfterRecord = function findLastElementAfterRecord(tup, record) {\nreturn tup[0] > record[0]? [tup[0], tup[1], tup[2]] : tup;\n};\n/**\n * * Write a function to find the first element that occurs before the record in the given tuple.\n */\nvar functionFindFirstElementBeforeRecord = function findFirstElementBeforeRecord(tup, record) {\nreturn tup[0] < record[0]? tup : [tup[0], tup[1], tup[2]];\n};\n/**\n * * Write a ", "\n", "\n"]}
{"task_id": "MBJSP/279", "prompt": "function isNumDecagonal(n) {\n/**\n * * Write a function to find the nth decagonal number.\n */", "entry_point": "isNumDecagonal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar x0 = isNumDecagonal(arg00);\nvar v0 = 27;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = isNumDecagonal(arg10);\nvar v1 = 175;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = isNumDecagonal(arg20);\nvar v2 = 370;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the nth decagonal number.", "language": "javascript", "canonical_solution": "\treturn 4 * n * n - 3 * n\n}", "completion": ["\n\nconst decagonal = n => Math.pow(n, 2) + n;\n\nconsole.log(decagonal(2)); // 4\n\nconsole.log(decagonal(4)); // 16\n/**\n * * Write a function to find the nth hexagonal number.\n */\n\nconst hexagonal = n => Math.pow(n, 3) - n;\n\nconsole.log(hexagonal(3)); // 9\n\nconsole.log(hexagonal(6)); // 36\n/**\n * * Write a function to find the nth cataland number.\n */\n\nconst cataland = n => Math.pow(4, n) - Math.pow(2, n);\n\nconsole.log(cataland(7)); // 128\n\nconsole.log(cataland(8)); // 256\n/**\n * * Write a function to find the nth cataland number.\n */\n\nconst k = 10;\n\nconst cataland = n => k * (Math.pow(4, n) - Math.pow(2, n));\n\nconsole.log(cataland(7)); // 128\n\nconsole.log(cataland(8)); // 256\n\nconsole.log(cataland(10)); // 1024\n/**\n * * Write a function to calculate the factorial of a number.\n */\n\nconst factorial = n => n * (factorial(n - 1));\n\nconsole.log(factorial(1)); // 1\n\nconsole.log(factorial(3)); // 6\n\nconsole.log(factorial(10)); // 3628800\n/**\n * * Write a ", "\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a function to find the nth decagonal number.\n */\n\n/**\n * * Write a ", "\n", "\n\nvar nthDecagonal = n => (n * (n + 1)) / 2;\n\n", "\n\nvar decagon = function decagon(n) {\n  return decagon.fn(n);\n};\n\ndecagon.displayName = 'Decagonal';\n\ndecagon.fn = function decagon(n) {\n  return n * (n + 1) / 2;\n};\n\ndecagon.displayLength = 3;\n\ndecagon.fn2 = function decagon(n) {\n  return n * n;\n};\n\ndecagon.fn3 = function decagon(n) {\n  return Math.sqrt((n * n) + (n * n)) - n;\n};\n\ndecagon.fn4 = function decagon(n) {\n  return Math.sin(n) * n * n;\n};\n\ndecagon.fn5 = function decagon(n) {\n  return Math.cos(n) * n * n * n;\n};\n\ndecagon.fn6 = function decagon(n) {\n  return Math.tan(n) * n * n * n * n;\n};\n\ndecagon.fn7 = function decagon(n) {\n  return Math.asin(n) * n * n * n * n * n;\n};\n\ndecagon.fn8 = function decagon(n) {\n  return Math.acos(n) * n * n * n * n * n * n;\n};\n\ndecagon.fn9 = function decagon(n) {\n  return Math.atan(n) * n * n * n * n * n * n * n;\n};\n\ndecagon.fn10 = "]}
{"task_id": "MBJSP/280", "prompt": "function sequentialSearch(dlist, item) {\n/**\n * * Write a function to search an element in the given array by using sequential search.\n */", "entry_point": "sequentialSearch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [11, 23, 58, 31, 56, 77, 43, 12, 65, 19];\nvar arg01 = 31;\nvar x0 = sequentialSearch(arg00, arg01);\nvar v0 = [true, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [12, 32, 45, 62, 35, 47, 44, 61];\nvar arg11 = 61;\nvar x1 = sequentialSearch(arg10, arg11);\nvar v1 = [true, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 10, 17, 19, 22, 39, 48, 56];\nvar arg21 = 48;\nvar x2 = sequentialSearch(arg20, arg21);\nvar v2 = [true, 6];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to search an element in the given array by using sequential search.", "language": "javascript", "canonical_solution": "  for (let i = 0; i < dlist.length; i += 1) {\n    if (dlist[i] === item) {\n      return [true, i];\n    }\n  }\n  return [false, null];\n}", "completion": ["\n\n// Given an array of function names, write a function to search each function name and print the results.\n\n/**\n * Write a function to search an element in the given array by using sequential search.\n */\n", "\nvar write = function write(list, item) {\nvar listCopy = Array.prototype.slice.call(list);\nlistCopy.push(item);\nvar output = search(listCopy);\nlistCopy.length = 0;\nreturn output;\n};\n\n/**\n * * Search an array by using sequential search.\n */\nvar search = function search(list) {\nvar index = 0;\nvar input = function input(item) {\nif (item === null) {\nreturn index;\n}\nif (Array.isArray(item)) {\nreturn index += item.length;\n}\nif (typeof item === 'number' &&!isNaN(item)) {\nreturn index += item;\n}\nif (typeof item ==='string') {\nreturn index += item.length;\n}\nreturn index += 1;\n};\n\n/**\n * * Return an array containing the given number of elements from the beginning.\n */\nvar first = function first(n) {\nif (typeof n === 'number' && n > 0) {\nreturn Array.prototype.slice.call(list, 0, n);\n}\nreturn list;\n};\n\n/**\n * * Return an array containing the given number of elements from the end.\n */\nvar last = function last(n) {\nif (typeof n === 'number' && n > 0) {\nreturn Array.prototype.slice.call(list, -n, -n);\n}\nreturn list;\n};\n\n/**\n * * Sort the given array in place.\n */\nvar sort = function sort(list) {\nvar sorted = Array.prototype.slice.call(list);\nsorted.sort(", "\n(", "\n\n// Check to make sure the item being searched for is not the last item in the list.\nif (item!== list[list.length - 1]) {\n\tlist.push(item);\n}\n\n// Return the array.\nreturn list;\n\n/**\n * * Write a function to search an element in the given array by using sequential search.\n */\n\n// Create a function to search the array.\nvar search = function search(item) {\n\t// Check to make sure the item being searched for is not the last item in the list.\n\tif (item!== list[list.length - 1]) {\n\t\tlist.push(item);\n\t}\n\n\t// Return the array.\n\treturn list;\n};\n\n// Return the function.\nreturn search;\n\n/**\n * * Write a function to search an element in the given array by using sequential search.\n */\n\n// Create a function to search the array.\nvar search2 = function search2(item) {\n\t// Check to make sure the item being searched for is not the last item in the list.\n\tif (item!== list[list.length - 1]) {\n\t\tlist.push(item);\n\t}\n\n\t// Return the array.\n\treturn list;\n};\n\n// Return the function.\nreturn search2;\n\n/**\n * * Write a function to search an element in the given array by using sequential search.\n */\n\n// Create a function to search the array.\nvar search3 = ", "\n/**\n * * Get the index of the last element in the array.\n * * @param {number} [fromIndex] - the index from which to start the search.\n * * @returns {number} the index of the last element in the array or -1 if the array is empty.\n */\n/**\n * * Get the index of the first element in the array.\n * * @param {number} [fromIndex] - the index from which to start the search.\n * * @returns {number} the index of the first element in the array or -1 if the array is empty.\n */\n/**\n * * Get the array length.\n * * @returns {number} the array length.\n */\n/**\n * * Extract a slice of the array.\n * * @param {number} [start] - The index at which to start extraction.\n * * @param {number} [end] - The index at which to end extraction.\n * * @returns {Array} The extracted slice.\n */\n/**\n * * Create an instance of a node.\n * * @param {*} [type] - The node type to create.\n * * @param {Object} [attributes] - The attributes to be applied to the node.\n * * @returns {Node} The created node.\n */\n/**\n * * Create an instance of a list.\n * * @param {*} items - The items in the list.\n * * @returns {Array} The created list.\n */\n/**\n * * Get the value of a node.\n * * @param {Node} node - The node for which the value should be returned.\n * * @returns {*} The value of the node.\n */\n/**\n * * Get the nodes of a list.\n * * @param {"]}
{"task_id": "MBJSP/281", "prompt": "function allUnique(testlist) {\n/**\n * * Write a JavaScript function to check if the elements of a given list are unique or not.\n */", "entry_point": "allUnique", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = allUnique(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1, 2];\nvar x1 = allUnique(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5];\nvar x2 = allUnique(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check if the elements of a given list are unique or not.", "language": "javascript", "canonical_solution": "  const set = new Set(testList);\n  return set.size === testList.length;\n}", "completion": ["\n", "\n", "\n$('<div class=\"uniq-checker\"></div>').appendTo($('body'));\n\n// Add an uniq-checker div to the list\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n\n// Add an uniq-checker div to the list\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-checker\"></div>');\n\n$('body').append('<div class=\"uniq-", "\n    ", "\n"]}
{"task_id": "MBJSP/282", "prompt": "function subList(nums1, nums2) {\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */", "entry_point": "subList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar arg01 = [4, 5, 6];\nvar x0 = subList(arg00, arg01);\nvar v0 = [-3, -3, -3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2];\nvar arg11 = [3, 4];\nvar x1 = subList(arg10, arg11);\nvar v1 = [-2, -2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [90, 120];\nvar arg21 = [50, 70];\nvar x2 = subList(arg20, arg21);\nvar v2 = [40, 50];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to substaract two lists using map and lambda function.", "language": "javascript", "canonical_solution": "  return nums1.map((num, i) => num - nums2[i]);\n}", "completion": ["\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a function to substaract two lists using map and lambda function.\n */\n\n/**\n * * Write a ", "\nvar subst = function (nums1, nums2) {\nreturn map(", "\n\n// Make a function that sums two numbers\n", "\n/**\n * @param {Number} nums1\n * @param {Number} nums2\n * @return {Number}\n */\n", "\n\n"]}
{"task_id": "MBJSP/283", "prompt": "function validate(n) {\n/**\n * * Write a JavaScript function to check whether the frequency of each digit is less than or equal to the digit itself.\n */", "entry_point": "validate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1234;\nvar x0 = validate(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 51241;\nvar x1 = validate(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 321;\nvar x2 = validate(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the frequency of each digit is less than or equal to the digit itself.", "language": "javascript", "canonical_solution": "    let freq = {};\n    let str = n.toString();\n    for (let i = 0; i < str.length; i++) {\n        let digit = str[i];\n        if (freq[digit]) {\n            freq[digit]++;\n        } else {\n            freq[digit] = 1;\n        }\n    }\n    for (let key in freq) {\n        if (freq[key] > 1) {\n            return false;\n        }\n    }\n    return true;\n}", "completion": ["\nconst getNumberOfDigitsInNumber = number => {\n    let numberOfDigits = 1;\n    const numberOfDigitsInString = number.toString().split('');\n    for (const digit of numberOfDigitsInString) {\n        if (digit === 0) {\n            return numberOfDigits;\n        }\n        numberOfDigits++;\n    }\n    return numberOfDigits;\n};\nconst getPosition = function (n) {\n    return n % 10;\n};\nconst getChar = function (n) {\n    return String.fromCharCode(n);\n};\n\nconst getLastDigits = function (str) {\n    const lastDigits = str.toString().split('');\n    const numberOfDigits = lastDigits.length;\n    return lastDigits.slice(numberOfDigits - 1, numberOfDigits);\n};\nconst getNumberOfDigits = function (str) {\n    return str.toString().split('').length;\n};\nconst getDigit = function (n) {\n    return n % 10;\n};\nconst getLastLetter = function (str) {\n    const lastLetter = str.toString().split('');\n    return lastLetter[lastLetter.length - 1];\n};\nconst getLastN = function (n) {\n    return n.toString().split('')[lastLetter];\n};\nconst isEvenNumber = function (n) {\n    return n % 2 === 0;\n};\nconst isOddNumber = function (n) {\n    return n % 2!== 0;\n};\n\nconst isLeapYear = ", "\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript function that returns the number of times the digit appears in the given string.\n */\n/**\n * * Write a JavaScript ", "\n", "\n\nvar function_1 = /*#__PURE__*/require(\"rxjs/add/observable/of\");\n/**\n * * Write a JavaScript function to check whether the frequency of each digit is less than or equal to the digit itself.\n */\n\nvar function_2 = /*#__PURE__*/require(\"rxjs/add/observable/throw\");\n/**\n * * Write a JavaScript function to check whether the frequency of each digit is less than or equal to the digit itself.\n */\n\nvar function_3 = /*#__PURE__*/require(\"rxjs/add/observable/fromArray\");\n/**\n * * Write a JavaScript ", "\nvar _write_all_data = __webpack_require__(/*!./write_all_data */ \"./node_modules/axios/lib/utils/write_all_data.js\");\n\nvar _write_all_data2 = _interopRequireDefault(_write_all_data);\n\nvar _write_all_data3 = __webpack_require__(/*!./write_all_data.common */ \"./node_modules/axios/lib/utils/write_all_data.common.js\");\n\nvar _write_all_data4 = _interopRequireDefault(_write_all_data3);\n\nvar _write_all_data5 = __webpack_require__(/*!./write_all_data.intercept */ \"./node_modules/axios/lib/utils/write_all_data.intercept.js\");\n\nvar _write_all_data6 = _interopRequireDefault(_write_all_data5);\n\nvar _write_all_data7 = __webpack_require__(/*!./write_all_data.transform */ \"./node_modules/axios/lib/utils/write_all_data.transform.js\");\n\nvar _write_all_data8 = _interopRequireDefault(_write_all_data7);\n\n"]}
{"task_id": "MBJSP/284", "prompt": "function checkElement(list, element) {\n/**\n * * Write a function to check whether all items of a list are equal to a given string.\n */", "entry_point": "checkElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"green\", \"orange\", \"black\", \"white\"];\nvar arg01 = \"blue\";\nvar x0 = checkElement(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = 7;\nvar x1 = checkElement(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"green\", \"green\", \"green\", \"green\"];\nvar arg21 = \"green\";\nvar x2 = checkElement(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether all items of a list are equal to a given string.", "language": "javascript", "canonical_solution": "  return list.every(function(item) {\n    return item === element;\n  });\n}", "completion": ["\n/**\n * * Write a function to check whether any items of a list are equal to a given string.\n */\n/**\n * * Write a function to check whether no items of a list are equal to a given string.\n */\n/**\n * * Write a function to check whether the first items of two lists are equal to a given string.\n */\n/**\n * * Write a function to check whether the last items of two lists are equal to a given string.\n */\n/**\n * * Write a function to check whether the items in a list are equal to a given integer.\n */\n/**\n * * Write a function to check whether all items of a list are equal to a given integer.\n */\n/**\n * * Write a function to check whether any items of a list are equal to a given integer.\n */\n/**\n * * Write a function to check whether no items of a list are equal to a given integer.\n */\n/**\n * * Write a function to check whether the first items of two lists are equal to a given integer.\n */\n/**\n * * Write a function to check whether the last items of two lists are equal to a given integer.\n */\n(", "\nif (typeof string!=='string')\n    throw new TypeError('argument must be a string');\n\nif (this === global) {\n    return string.split('').every(", "\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _parchment = __webpack_require__(0);\n\nvar _parchment2 = _interopRequireDefault(_parchment);\n\n", "\n", "\n\n\n/**\n * * Write a function to check whether any item of a list is equal to a given string.\n */\n\n\n/**\n * * Write a function to get the index of a given string in a list of strings.\n */\n\n/**\n * * Write a function to get the last index of a given string in a list of strings.\n */\n\n/**\n * * Write a function to get the length of a list of strings.\n */\n\n\n/**\n * * Write a function to remove all occurrences of a given string from a list of strings.\n */\n\n\n/**\n * * Write a function to insert a given string into a list of strings at a given index.\n */\n\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/285", "prompt": "function textMatchTwoThree(text) {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */", "entry_point": "textMatchTwoThree", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ac\";\nvar x0 = textMatchTwoThree(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"dc\";\nvar x1 = textMatchTwoThree(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abbbba\";\nvar x2 = textMatchTwoThree(arg20);\nvar v2 = \"Found a match!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function that matches a string that has an a followed by two to three 'b'.", "language": "javascript", "canonical_solution": "  let arr = text.split('');\n  let str = '';\n  let counter = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'a') {\n      counter++;\n    }\n  }\n  if (counter === 2) {\n    str += 'Found a match!';\n  } else {\n    str += 'Not matched!';\n  }\n  return str;\n}", "completion": ["\n\n", "\n", "\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n\n/**\n * * Write a ", "\n/**\n * * The return function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * The return function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * The return function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * The return function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * The return function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * The return function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * The return function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * The return function that matches a string that has an a followed by two to three 'b'.\n */\n/**\n * * Write a ", "\n    if (text.slice(0, 3) === \"ab\") {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n        if (text.slice(0, 4) === \"ab\") {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n            return \"three\";\n        }\n    }\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n    if (text.slice(0, 3) === \"ab\") {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n        if (text.slice(0, 4) === \"ab\") {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n            return \"three\";\n        }\n    }\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n    if (text.slice(0, 3) === \"ab\") {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n        if (text.slice(0, 4) === \"ab\") {\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n            return \"three\";\n        }\n    }\n/**\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n */\n    if (text.slice(0, 3) === \"ab\") {\n/**\n * * Write a "]}
{"task_id": "MBJSP/286", "prompt": "function maxSubArraySumRepeated(a, n, k) {\n/**\n * * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n */", "entry_point": "maxSubArraySumRepeated", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, -30, -1];\nvar arg01 = 4;\nvar arg02 = 3;\nvar x0 = maxSubArraySumRepeated(arg00, arg01, arg02);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 10, 20];\nvar arg11 = 3;\nvar arg12 = 2;\nvar x1 = maxSubArraySumRepeated(arg10, arg11, arg12);\nvar v1 = 59;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-1, -2, -3];\nvar arg21 = 3;\nvar arg22 = 3;\nvar x2 = maxSubArraySumRepeated(arg20, arg21, arg22);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "language": "javascript", "canonical_solution": "    let max_so_far = -2147483648;\n    let max_ending_here = 0;\n\n    for (let i = 0; i < n * k; i++) {\n        max_ending_here += a[i % n];\n\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n    }\n\n    return max_so_far;\n}", "completion": ["\n", "\n```\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n<p>\n\n", "\n            ", "\n\n/**\n * * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n * */\n\n/**\n * Write a ", "\n\n/**\n * You are given a list of integers, A1, A2,..., AN, and a number K.\n * Write a function that returns the largest sum of any contiguous array in the modified array which is formed by repeating the given array K times.\n */\n\n/**\n * Given a list of integers, A1, A2,..., AN, and a number K.\n * Write a "]}
{"task_id": "MBJSP/287", "prompt": "function squareSum(n) {\n/**\n * * Write a JavaScript function to find the sum of squares of first n even natural numbers.\n */", "entry_point": "squareSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = squareSum(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = squareSum(arg10);\nvar v1 = 56;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = squareSum(arg20);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of squares of first n even natural numbers.", "language": "javascript", "canonical_solution": "    return 2*n*(n+1)*(2*n+1)/3\n}", "completion": ["\n\n", "\n", "\nlet sum = 0;\nfor (let i = 0; i <= n; i += 2) sum += i;\nreturn sum;\n}\n```\n\nWe can try out some number of values to try, but there are several things we can try out:\n\n* What is the smallest value for `n`?\n* What is the largest value for `n`?\n* What is the average value for `n`?\n\nWe can see from our table that the largest value for `n` is `n`, so we'll be able to just sum up the largest even number:\n\n$$ n + \\frac{n(n-1)}{2} + \\frac{n(n-1)(n-2)}{6} + \\frac{n(n-1)(n-2)(n-3)}{24} +... $$\n\nSo it will take a while to compute the sum of all of the even numbers up to `n`.\n\n## The Stirling Number of the Second Kind\n\nLet's be more specific about what we need to find out, then start experimenting with it.\n\nThe Stirling Number of the Second Kind is the number of ways of arranging `n` objects such that none of the objects are in the same position (i.e. no object is in its own row or column). For example, Stirling Number of the Second Kind of 2 is 1, since we can arrange a new object in only one of its 2 positions.\n\nIn a multiset, what is the difference between these two numbers? In a multiset, the number of objects with no position is the same as the number of objects without a position. So Stirling Number of the Second Kind of 2 is also 1.\n\nA set of objects with no position in a multiset is an element of the multiset, and a", "\n\n/**\n * * Write a JavaScript function to find the sum of squares of first n odd natural numbers.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript function to find the sum of the first n natural numbers whose square is a perfect square.\n */\n\n/**\n * * Write a JavaScript ", "\n// Write a JavaScript "]}
{"task_id": "MBJSP/288", "prompt": "function modularInverse(arr, n, p) {\n/**\n * * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n */", "entry_point": "modularInverse", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 6, 4, 5];\nvar arg01 = 4;\nvar arg02 = 7;\nvar x0 = modularInverse(arg00, arg01, arg02);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 8, 12, 12];\nvar arg11 = 5;\nvar arg12 = 13;\nvar x1 = modularInverse(arg10, arg11, arg12);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 5];\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = modularInverse(arg20, arg21, arg22);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "language": "javascript", "canonical_solution": "    let mod = (a, m) => ((a % m) + m) % m;\n    let result = arr.map(item => {\n        return (item * mod(item, p)) % p;\n    });\n    return result.reduce((acc, item) => {\n        if (item === 1) {\n            acc += 1;\n        }\n        return acc;\n    }, 0);\n}", "completion": ["\n\n/**\n * *\n * @param arr\n * @param n\n * @param p\n * @return\n */\n\n}\n\n/**\n * * Write a function to check whether a given integer n is a prime number or not.\n * @param n\n * @return\n */\n", "\n\nreturn arr.reduce(", "\nconst modularInverse = (arr, n, p) => {\n  const inverse = [...arr];\n  inverse[0] = p - inverse[0];\n\n  for (let i = 1; i < n; ++i) {\n    inverse[i] = (inverse[i - 1] * inverse[0]) % p;\n  }\n  return inverse;\n};\n```\n\n</details>\n\n<details>\n<summary>What are the two most commonly used inverse functions?</summary>\n\n```js\nconst modularInverse = (arr, n, p) => {\n  const inverse = [...arr];\n  inverse[0] = p - inverse[0];\n\n  for (let i = 1; i < n; ++i) {\n    inverse[i] = (inverse[i - 1] * inverse[0]) % p;\n  }\n  for (let i = 0; i < n; ++i) {\n    if (inverse[i] == 1) {\n      return i;\n    }\n  }\n  return -1;\n};\n```\n\n</details>\n\n<details>\n<summary>Can you find the modular inverse of any array element of given array of prime number p under given prime number p equal to itself?</summary>\n\n```js\nconst modularInverse = (arr, n, p) => {\n  const inverse = [...arr];\n  inverse[0] = p - inverse[0];\n\n  for (let i = 1; i < n; ++i) {\n    inverse[i] = (inverse[i - 1] * inverse[0]) % p;\n  }\n  for (let i = 0; i < n", "\nreturn arr.reduce(", "\nreturn arr.reduce("]}
{"task_id": "MBJSP/289", "prompt": "function oddDays(n) {\n/**\n * * Write a JavaScript function to calculate the number of odd days in a given year.\n */", "entry_point": "oddDays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 100;\nvar x0 = oddDays(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 50;\nvar x1 = oddDays(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 75;\nvar x2 = oddDays(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to calculate the number of odd days in a given year.", "language": "javascript", "canonical_solution": "    if (n === 100) {\n        return 5;\n    } else if (n === 50) {\n        return 6;\n    } else if (n === 75) {\n        return 2;\n    } else {\n        return n % 2 === 0 ? oddDays(n - 1) : oddDays(n + 1);\n    }\n}", "completion": ["\n\n/**\n * * Write a JavaScript function to calculate the number of even days in a given year.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of odd years in a given month.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of even years in a given month.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of years in a given year.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given month.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of months in a given year.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given year.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given month.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given year.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given month.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given year.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given month.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given year.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given month.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given year.\n */\n\n/**\n * * Write a JavaScript function to calculate the number of days in a given month.\n */\n\n/**\n * * Write a JavaScript ", "\nvar write_odd_days_in_year = function (context) {\n    // Start by calculating the number of odd days in a given year.\n    var odd_days = (", "\n", "\nvar oddDays = function(n, year) {\nreturn (\n  (n % 2 === 0 && year % 4 === 0 && year % 100!== 0) ||\n  (n % 2 === 1 && year % 4!== 0)\n);\n};\n\nvar daysInYear = function(year) {\n/**\n * * Write a JavaScript function to calculate the number of days in a given year.\n */\nvar days = (\n  (year % 400 === 0 && year % 100!== 0) ||\n  (year % 4 === 0 && year % 100!== 0)\n);\nreturn days;\n};\n\nvar daysInMonth = function(month, year) {\n/**\n * * Write a JavaScript function to calculate the number of days in a given month and year.\n */\nvar days = (\n  (month === 4 && year % 4 === 0 && year % 100!== 0) ||\n  (month === 5 && year % 4!== 0) ||\n  (month === 6 && year % 4 === 0 && year % 100!== 0) ||\n  (month === 7 && year % 4!== 0 && year % 100!== 0) ||\n  (month === 8 && year % 4 === 0 && year % 100!== 0) ||\n  (month === 9 && year % 4!== 0) ||\n  (month === 10 && year % 4 === 0 && year % 100!== 0) ||\n  (month === 11 && year % 4!== 0 && year % 100!== 0) ||\n  (month === 12 && year % 4 === 0) ||\n  (month === 1 && year % 100 === 0) ||\n  (month === 3 && year % 100!== 0)\n);\nreturn days;\n};\n\nvar isLeapYear = ", "\n"]}
{"task_id": "MBJSP/290", "prompt": "function maxLength(list1) {\n/**\n * * Write a function to find the list of lists with maximum length.\n */", "entry_point": "maxLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = maxLength(arg00);\nvar v0 = [3, [13, 15, 17]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [5, 7], [10, 12, 14, 15]];\nvar x1 = maxLength(arg10);\nvar v1 = [4, [10, 12, 14, 15]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5], [15, 20, 25]];\nvar x2 = maxLength(arg20);\nvar v2 = [3, [15, 20, 25]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the list of lists with maximum length.", "language": "javascript", "canonical_solution": "    let maxLength = 1;\n    let result = [maxLength, []];\n\n    for (let index = 0; index < list1.length; index++) {\n        const element = list1[index];\n        const length = element.length;\n        if (length >= maxLength) {\n            result = [length, [...list1[index]]];\n            maxLength = length;\n        } else if (length > result[0]) {\n            result = [length, [...list1[index]]];\n        }\n    }\n    return result;\n}", "completion": ["\n    ", "\nvar listOfListWithMaximumLength = function (list) {\n  return list.reduce(", "\nconst functions = list1.reduce((list, value) => {\nconst listName = value.name;\nconst functionName = value.", "\nvar maxLength = Math.max.apply(null, list1);\n\n/**\n * * Write a function to find the list of lists with maximum length.\n */\nvar maxLength2 = list1.reduce(", "\nvar maxLength = function(list) {\n  return list.length;\n};\n\n/**\n * * Write a function to find the maximum length of a list of lists with the same maximum length.\n */\nvar maxLength2 = function(list) {\n  return list.reduce("]}
{"task_id": "MBJSP/291", "prompt": "function countNoOfWays(n, k) {\n/**\n * * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n */", "entry_point": "countNoOfWays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = countNoOfWays(arg00, arg01);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 2;\nvar x1 = countNoOfWays(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 4;\nvar x2 = countNoOfWays(arg20, arg21);\nvar v2 = 228;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "language": "javascript", "canonical_solution": "\tvar total = k;\n\tvar mod = 1000000007;\n\tvar dp = new Array(n + 1).fill(0);\n\tdp[1] = k;\n\tdp[2] = k * k;\n\tfor (let i = 3; i <= n; i++) {\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod;\n\t}\n\treturn dp[n];\n}", "completion": ["\n\n/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n */\n\n\nvar numberOfWays = function numberOfWays(n, k) {\n  if (n <= 0) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return k;\n  }\n\n  if (k === 1) {\n    return n;\n  }\n\n  return numberOfWays(n - 1, k) + numberOfWays(n - 2, k);\n};\n\nexports.numberOfWays = numberOfWays;\n//# sourceMappingURL=numberOfWays.js.map\n\n/***/ }),\n/* 5 */\n/***/ (", "\n  var ways = function ways(n, k) {\n    if (n < 0) {\n      return 0;\n    }\n    if (n === 0) {\n      return 1;\n    }\n    return ways(n - 1, k) + ways(n - 2, k);\n  };\n\n  var k = 3;\n  var n = 5;\n\n  var ways = function ways(n, k) {\n    if (n < 0) {\n      return 0;\n    }\n    if (n === 0) {\n      return 1;\n    }\n    return ways(n - 1, k) + ways(n - 2, k) + ways(n - 3, k);\n  };\n\n  var k = 3;\n  var n = 5;\n\n  var ways = function ways(n, k) {\n    if (n < 0) {\n      return 0;\n    }\n    if (n === 0) {\n      return 1;\n    }\n    return ways(n - 1, k) + ways(n - 2, k) + ways(n - 3, k) + ways(n - 4, k);\n  };\n\n  var k = 3;\n  var n = 5;\n\n  var ways = function ways(n, k) {\n    if (n < 0) {\n      return 0;\n    }\n    if (n === 0) {\n      return 1;\n    }\n    return ways(n - 1, k) + ways(n - 2, k) + ways(n - 3, k) + ways(n - 4, k) + ways(n - 5, k);\n  };\n\n  var k = 3;\n  var n = 5;\n\n  var ways = ", "\n\n/**\n * Function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n *\n * @param n Number of posts.\n * @param k Number of colors.\n * @return Number of ways of painting the fence.\n */\n\n/**\n * @param n Number of posts.\n * @param k Number of colors.\n * @return Number of ways of painting the fence.\n */\n\n/**\n * @param n Number of posts.\n * @param k Number of colors.\n * @return Number of ways of painting the fence.\n */\n\n/**\n * Function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n *\n * @param n Number of posts.\n * @param k Number of colors.\n * @return Number of ways of painting the fence.\n */\n\n/**\n * @param n Number of posts.\n * @param k Number of colors.\n * @return Number of ways of painting the fence.\n */\n\n/**\n * @param n Number of posts.\n * @param k Number of colors.\n * @return Number of ways of painting the fence.\n */\n\n/**\n * Function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n *\n * @param n Number of posts.\n * @param k Number of colors.\n * @return Number of ways of painting the fence.\n */\n\n/**\n * Function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n *", "\n\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **\n  // **", "\nconst patt = (n, k, l) => {\nlet ans = 0;\nfor(let i=0; i<l.length; i++){\n    if(l[i]!= l[i+1])\n        ans++;\n}\nreturn ans;\n};\nlet totalWays = 0;\nfor (let i = 0; i <= n; i++) {\n    totalWays += patt(n, k, i);\n}\nreturn totalWays;\n}\n\nconsole.log(totalWaysOfWaysToMakeAConsecutiveStairs(5, 3, {0: 2, 1: 1, 2: 2}));\n```\n\n### Basic DP\n\n[LeetCode\u4e2d\u6587](https://leetcode-cn.com/problems/number-of-1-bits/)\n\n[LeetCode\u82f1\u6587](https://leetcode.com/problems/number-of-1-bits/)\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u00a0n\uff0c\u8fd4\u56de\u5176\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u4e0a1\u7684\u4e2a\u6570\u3002\n\n**\u793a\u4f8b 1**\uff1a\n\n```\n\u8f93\u5165\uff1an = 5\n\u8f93\u51fa\uff1a8\n\u89e3\u91ca\uff1a\n5\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a101\uff0c\u5176\u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u4e0a1\u7684\u4e2a\u6570\u4e3a2 + 2 + 1 = 8\u3002\n```\n\n**\u793a\u4f8b 2**\uff1a\n```\n\u8f93\u5165"]}
{"task_id": "MBJSP/292", "prompt": "function find(n, m) {\n/**\n * * Write a JavaScript function to find quotient of two numbers.\n */", "entry_point": "find", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 3;\nvar x0 = find(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar x1 = find(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 20;\nvar arg21 = 5;\nvar x2 = find(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find quotient of two numbers.", "language": "javascript", "canonical_solution": "    return Math.floor(n / m);\n}", "completion": ["\n", "\n\n\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (a, b) {\n  if (a === 0) {\n    return 1 / b;\n  }\n\n  return a / b;\n};\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 4 */\n/***/ (", "\n    public ", "\n", "\n// * Finds quotient of two numbers.\n// * @param {number} n The first number.\n// * @param {number} m The second number.\n// * @return {number} The quotient.\nmodule.exports = function (n, m) {\n  if (typeof n!== 'number' || typeof m!== 'number') {\n    throw new TypeError('Expected arguments to be numbers.');\n  }\n\n  if (n < m) {\n    return -1;\n  }\n  if (n === m) {\n    return 0;\n  }\n  if (n === m + 1) {\n    return 1;\n  }\n  if (n === m - 1) {\n    return -1;\n  }\n\n  return Math.floor(Math.log(Math.abs(n)) / Math.log(Math.abs(m)));\n};\n},{}],7:["]}
{"task_id": "MBJSP/293", "prompt": "function othersideRightangle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */", "entry_point": "othersideRightangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 7;\nvar arg01 = 8;\nvar x0 = othersideRightangle(arg00, arg01);\nvar v0 = 10.63014581273465;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = 4;\nvar x1 = othersideRightangle(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = 15;\nvar x2 = othersideRightangle(arg20, arg21);\nvar v2 = 16.55294535724685;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the third side of a right angled triangle.", "language": "javascript", "canonical_solution": "  return Math.sqrt(w * w + h * h);\n}", "completion": ["\n    // We can write down the third side of the right angled triangle.\n    // See here: https://www.geeksforgeeks.org/print-all-possible-sides-of-a-right-angled-triangle/\n    // Write down the sum of the third side and the sum of the first two sides.\n    // Compare this with the equation for right angled triangles in general.\n    // See here: https://www.geeksforgeeks.org/find-the-third-side-of-a-right-angled-triangle/\n    // We can write down this equation as well.\n    let thirdSide = (firstSide + secondSide) / 2;\n    let fourthSide = (secondSide * secondSide) - (firstSide * firstSide);\n\n    // Check if the fourth side is negative or positive.\n    if (fourthSide < 0) {\n        // If negative, then find the positive of the fourth side.\n        fourthSide = Math.abs(fourthSide);\n    }\n\n    // See here: https://www.geeksforgeeks.org/print-all-possible-sides-of-a-right-angled-triangle/\n    // If the fourth side is negative or positive, then write down this equation as well.\n    // See here: https://www.geeksforgeeks.org/find-the-third-side-of-a-right-angled-triangle/\n    // Find the third side of the right angled triangle.\n    let thirdSide = Math.sqrt(fourthSide);\n\n    // Write down the sum of the third side and the sum of the first two sides.\n    // Compute the sum of the third side.\n    // See here: https://www.geeksforgeeks.org/print-all", "\n    const p0 = [ w, h ];\n    const p1 = [ w, -h ];\n    const p2 = [ -w, -h ];\n\n    // return the third side\n    return [ p0, p1, p2 ];\n}\n\n/**\n * Write a function to find the third side of a right angled triangle.\n */\nconst p3 = RightAngle(w, h);\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nconst p4 = RightAngle(w, h);\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nconst p5 = RightAngle(w, h);\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nconst p6 = RightAngle(w, h);\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nconst p7 = RightAngle(w, h);\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nconst p8 = RightAngle(w, h);\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nconst p9 = RightAngle(w, h);\n\n/**\n * Write a function to find the third side of a right angled triangle.\n */\nconst p10 = RightAngle(w, h);\n\n/**\n * Write a function to find the third side of a right angled triangle.\n */\nconst p11 = RightAngle(w, h);\n\n/**\n * Write a ", "\n\n    return 0;\n}\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nRightAngle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\n\n    return 0;\n}\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nRightAngle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\n\n    return 0;\n}\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nRightAngle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\n\n    return 0;\n}\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nRightAngle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\n\n    return 0;\n}\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nRightAngle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\n\n    return 0;\n}\n\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\nRightAngle(w, h) {\n/**\n * * Write a function to find the third side of a right angled triangle.\n */\n\n    return 0;\n}\n\n/**\n * * Write a ", "\nconst thirdRightAngle = (w, h) => {\n    // first we want to find the length of the hypotenuse of a right angled triangle.\n    const hypotenuse = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2))\n    // next we need to find the length of the diagonal that is perpendicular to the hypotenuse.\n    const diagonal = Math.sqrt(Math.pow(hypotenuse, 2) - Math.pow(w, 2) - Math.pow(h, 2))\n    // finally we return the length of the third side of the right angled triangle.\n    return diagonal\n}\n\nconsole.log(thirdRightAngle(30, 40)) // => 30.0\nconsole.log(thirdRightAngle(1, 2)) // => 3.0\nconsole.log(thirdRightAngle(2, 1)) // => 1.0\n\n/**\n * * Write a ", "\n    if (isBetween(w, h, Math.sqrt(2)/2)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// * * Write a function to find the third side of a right angled triangle.\n"]}
{"task_id": "MBJSP/294", "prompt": "function maxVal(listval) {\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */", "entry_point": "maxVal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", 3, 2, 4, 5, \"version\"];\nvar x0 = maxVal(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", 15, 20, 25];\nvar x1 = maxVal(arg10);\nvar v1 = 25;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", 30, 20, 40, 50, \"version\"];\nvar x2 = maxVal(arg20);\nvar v2 = 50;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum value in a given heterogeneous list.", "language": "javascript", "canonical_solution": "    var max = 0;\n    for (var i = 0; i < listval.length; i++) {\n        if (listval[i] > max) {\n            max = listval[i];\n        }\n    }\n    return max;\n}", "completion": ["\n/**\n * * Write a function to find the minimum value in a given heterogeneous list.\n */\n/**\n * * Write a function to sort a given heterogeneous list.\n */\n/**\n * * Write a function to filter a given heterogeneous list.\n */\n/**\n * * Write a function to map a given heterogeneous list.\n */\n/**\n * * Write a function to filter a given heterogeneous list.\n */\n/**\n * * Write a function to select a given heterogeneous list.\n */\n/**\n * * Write a function to group a given heterogeneous list.\n */\n/**\n * * Write a function to group a given heterogeneous list.\n */\n/**\n * * Write a function to aggregate a given heterogeneous list.\n */\n/**\n * * Write a function to aggregate a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the minimum value in a given heterogeneous list.\n */\n/**\n * * Write a function to sort a given heterogeneous list.\n */\n/**\n * * Write a function to filter a given heterogeneous list.\n */\n/**\n * * Write a function to map a given heterogeneous list.\n */\n/**\n * * Write a function to filter a given heterogeneous list.\n */\n/**\n * * Write a function to select a given heterogeneous list.\n */\n/**\n * * Write a function to group a given heterogeneous list.\n */\n/**\n * * Write a function to group a given heterogeneous list.\n */\n/**\n * * Write a function to aggregate a given heterogeneous list.\n */\n/**\n * * Write a function to aggregate a given heterogeneous list.\n */\n/**\n * * Write a ", "\n/**\n * * Write a function to find the minimum value in a given heterogeneous list.\n */\n/**\n * * Find the maximum value in a given heterogeneous list.\n */\n/**\n * * Find the minimum value in a given heterogeneous list.\n */\n/**\n * * Write a function to calculate the sum of a given heterogeneous list.\n */\n/**\n * * Write a function to calculate the average of a given heterogeneous list.\n */\n/**\n * * Write a function to calculate the geometric mean of a given heterogeneous list.\n */\n/**\n * * Write a ", "\nvar maxValue = function maxValue(list) {\n  return Math.max(...list);\n};\n\n/**\n * * Write a function to find the minimum value in a given heterogeneous list.\n */\nvar minValue = function minValue(list) {\n  return Math.min(...list);\n};\n\n/**\n * * Write a function to find the minimum and maximum value in a given heterogeneous list.\n */\nvar minMaxValue = function minMaxValue(list) {\n  return { min: Math.min(...list), max: Math.max(...list) };\n};\n\n/**\n * * Write a function to find the average value in a given heterogeneous list.\n */\nvar averageValue = function averageValue(list) {\n  return list.reduce((previousValue, currentValue) => previousValue + currentValue, 0) / list.length;\n};\n\n/**\n * * Write a function to find the sum of a given heterogeneous list.\n */\nvar sumValue = function sumValue(list) {\n  return list.reduce((previousValue, currentValue) => previousValue + currentValue, 0);\n};\n\n/**\n * * Write a function to find the length of a given heterogeneous list.\n */\nvar lengthValue = function lengthValue(list) {\n  return list.length;\n};\n\n/**\n * * Write a function to find the last value in a given heterogeneous list.\n */\nvar lastValue = function lastValue(list) {\n  return list[list.length - 1];\n};\n\n/**\n * * Write a function to return the concatenation of two given heterogeneous lists.\n */\nvar concatValue = ", "\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n/**\n * * Write a ", "\n\nvar max = function max(list) {\n  var max = list[0];\n\n  for (var _iterator = list, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var value = _ref;\n\n    if (value > max) {\n      max = value;\n    }\n  }\n\n  return max;\n};\n\n/**\n * * Write a function to find the minimum value in a given heterogeneous list.\n */\n\nvar min = "]}
{"task_id": "MBJSP/295", "prompt": "function sumDiv(number) {\n/**\n * * Write a function to return the sum of all divisors of a number.\n */", "entry_point": "sumDiv", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = sumDiv(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = sumDiv(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar x2 = sumDiv(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to return the sum of all divisors of a number.", "language": "javascript", "canonical_solution": "  let sum = 0;\n  for (let i = 1; i < number; i++) {\n    if (number % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}", "completion": ["\nconst divisors = number => {\n  if (number === 0) {\n    return []\n  }\n  let num = number,\n    result = [],\n    div,\n    limit = Math.sqrt(num)\n  if (limit * limit === num) {\n    result.push(1)\n  }\n  if (limit * limit < num) {\n    result.push(limit)\n  }\n  for (div = 2; div <= limit; div++) {\n    if (num % div === 0) {\n      result.push(div)\n      result.push(num / div)\n    }\n  }\n  return result\n}\nconsole.log(divisors(2))\nconst divisors_2 = number => number === 0? [] : number > 0? [...divisors(number), 1] : []\nconsole.log(divisors_2(2))\n\n/**\n * * Write a ", "\nconst sumOfDivisors = (number) => {\n  // define a variable to store the sum of divisors\n  let divisorSum = 0;\n\n  for (let i = 1; i <= number; i++) {\n    if (number % i === 0) {\n      // if the number is a divisor, add it to the sum\n      divisorSum += i;\n    }\n  }\n\n  return divisorSum;\n};\n\n// Write the function sumOfDivisors(number) that returns the sum of all divisors of a number.\n// This function should return the sum of divisors of a number.\n\n/**\n * * Write a function that returns the sum of all divisors of a number.\n * */\n\nconst sumOfDivisors = (number) => {\n  let divisorSum = 0;\n\n  for (let i = 1; i <= number; i++) {\n    if (number % i === 0) {\n      divisorSum += i;\n    }\n  }\n\n  return divisorSum;\n};\n\n// Write the function sumOfDivisors(number) that returns the sum of all divisors of a number.\n// This function should return the sum of divisors of a number.\n\n/**\n * * Write a function that returns the sum of all divisors of a number.\n * */\n\nconst sumOfDivisors = (number) => {\n  let divisorSum = 0;\n\n  for (let i = 1; i <= number; i++) {\n    if (number % i === 0) {\n      divisorSum += i;\n    }\n  }\n\n  return divisorSum;\n};\n\n// Write the ", "\n\n/**\n * Function get_sum_divisors\n * * Parameters:\n * * number (number) - An integer number.\n * * Return:\n * * Return the sum of all divisors of the given number.\n */\n\n", "\n    number++;\n    let divisors = [];\n    let i = 2;\n\n    while (i < Math.sqrt(number)) {\n        if (number % i === 0) {\n            divisors.push(i);\n\n            if (number / i!== i) {\n                divisors.push(number / i);\n            }\n        }\n\n        i++;\n    }\n\n    let sum = 0;\n\n    for (let j of divisors) {\n        sum += j;\n    }\n\n    return sum;\n}\n```\n\n**Answer**\n\n```javascript\n// Good code\n", "\nvar get_sum_of_divisors = function(number) {\nvar sum = 0;\nfor (var i = 1; i < number; i++) {\nif (number % i == 0) {\nsum += i;\n}\n}\nreturn sum;\n};\n/**\n * * Write a function to return the sum of all divisors of a number.\n */\nvar get_sum_of_divisors2 = function(number) {\nvar sum = 0;\nfor (var i = 1; i < number; i++) {\nif (number % i == 0) {\nsum += i;\n}\n}\nreturn sum;\n};\n/**\n * * Write a function to return the sum of all divisors of a number.\n */\nvar get_sum_of_divisors3 = function(number) {\nvar sum = 0;\nfor (var i = 1; i < number; i++) {\nif (number % i == 0) {\nsum += i;\n}\n}\nreturn sum;\n};\n/**\n * * Write a function to return the sum of all divisors of a number.\n */\nvar get_sum_of_divisors4 = function(number) {\nvar sum = 0;\nvar divisors = [];\nfor (var i = 1; i < number; i++) {\nif (number % i == 0) {\ndivisors.push(i);\n}\n}\nfor (var i = 0; i < divisors.length; i++) {\nsum += divisors[i];\n}\nreturn sum;\n};\n/**\n * * Write a "]}
{"task_id": "MBJSP/296", "prompt": "function getInvCount(arr, n) {\n/**\n * * Write a JavaScript function to count inversions in an array.\n */", "entry_point": "getInvCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 20, 6, 4, 5];\nvar arg01 = 5;\nvar x0 = getInvCount(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1];\nvar arg11 = 3;\nvar x1 = getInvCount(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 5, 6, 1];\nvar arg21 = 5;\nvar x2 = getInvCount(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count inversions in an array.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] > arr[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}", "completion": ["\n", "\n\nvar arr = arr.split(\"\").reverse();\nvar len = arr.length;\nvar inv = 0;\n\nfor (var i = 0; i < len; ++i) {\n\tfor (var j = i + 1; j < len; ++j) {\n\t\tif (arr[i] > arr[j]) {\n\t\t\t++inv;\n\t\t}\n\t}\n}\nconsole.log(inv)\n<|endoftext|>", "\n\nconst countInversions = arr => {\n  let inversions = 0;\n  let length = arr.length;\n\n  for (let i = 0; i < length; i++) {\n    for (let j = i + 1; j < length; j++) {\n      if (arr[i] > arr[j]) {\n        inversions += 1;\n      }\n    }\n  }\n\n  return inversions;\n};\n\n/**\n * ** Write a JavaScript function to convert a string to uppercase.\n */\n\nconst toUpper = s => {\n  const ucArr = s.split('');\n  let newArr = [];\n\n  for (let i = 0; i < ucArr.length; i++) {\n    newArr.push(ucArr[i].toUpperCase());\n  }\n\n  return newArr.join('');\n};\n\n/**\n * ** Write a JavaScript function to find the first index of an element in an array.\n */\n\nconst findIndex = arr => {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'a') {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * ** Write a JavaScript ", "\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript function to count inversions in an array.\n\n// Write a JavaScript ", "\n"]}
{"task_id": "MBJSP/297", "prompt": "function flattenList(list1) {\n/**\n * * Write a function to flatten a given nested list structure.\n */", "entry_point": "flattenList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]];\nvar x0 = flattenList(arg00);\nvar v0 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]];\nvar x1 = flattenList(arg10);\nvar v1 = [10, 20, 40, 30, 56, 25, 10, 20, 33, 40];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]];\nvar x2 = flattenList(arg20);\nvar v2 = [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to flatten a given nested list structure.", "language": "javascript", "canonical_solution": "  let result = [];\n  function flatten(list2) {\n    for (let i = 0; i < list2.length; i++) {\n      if (Array.isArray(list2[i])) {\n        flatten(list2[i]);\n      } else {\n        result.push(list2[i]);\n      }\n    }\n  }\n  flatten(list1);\n  return result;\n}", "completion": ["\n", "\n}\n}\n}\n});\n<|endoftext|>", "\nvar flatten = function(list1) {\nreturn list1.reduce(", "\n}\n\n/**\n * * Write a ", "\n    @FunctionalInterface\n    public interface FlattenFunction {\n        List<Object> apply(List<Object> in);\n    }\n\n/**\n * * Write a function to map a given nested list structure.\n */\n    @FunctionalInterface\n    public interface MapFunction {\n        List<Object> apply(List<Object> in);\n    }\n\n/**\n * * Write a function to filter a given nested list structure.\n */\n    @FunctionalInterface\n    public interface FilterFunction {\n        boolean apply(List<Object> in);\n    }\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/298", "prompt": "function intersectionNestedLists(l1, l2) {\n/**\n * * Write a function to find the nested list elements which are present in another list.\n */", "entry_point": "intersectionNestedLists", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar arg01 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]];\nvar x0 = intersectionNestedLists(arg00, arg01);\nvar v0 = [[12], [7, 11], [1, 5, 8]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 3, 1], [4, 5], [6, 8]];\nvar arg11 = [[4, 5], [6, 8]];\nvar x1 = intersectionNestedLists(arg10, arg11);\nvar v1 = [[], []];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"john\", \"amal\", \"joel\", \"george\"];\nvar arg21 = [[\"john\"], [\"jack\", \"john\", \"mary\"], [\"howard\", \"john\"], [\"jude\"]];\nvar x2 = intersectionNestedLists(arg20, arg21);\nvar v2 = [[\"john\"], [\"john\"], [\"john\"], []];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the nested list elements which are present in another list.", "language": "javascript", "canonical_solution": "  const set = new Set(l1);\n\n  return l2.map(arr => arr.filter(i => set.has(i)));\n}", "completion": ["\n\nl1.map(l2.map(x => x.length))\n```\n\n### Exercise 3: Write a function to find the nested list elements which are present in another list.\n\n1.  Write a function to find the nested list elements which are present in another list.\n2.  Write a function to find the nested list elements which are present in another list.\n3.  Write a ", "\n  ", "\nconst write = (nestedLists: any, out: any, index: number): void => {\n    if (index > nestedLists.length) {\n        return;\n    }\n    const value: any = nestedLists[index];\n    if (value.length === 1) {\n        const item = value[0];\n        if (typeof item ==='string') {\n            out.write(item);\n        } else {\n            write(item, out, index + 1);\n        }\n        return;\n    }\n    const item = value[0];\n    if (typeof item ==='string') {\n        out.write(item);\n    } else {\n        write(item, out, index + 1);\n    }\n    const nestedList = value[1];\n    write(nestedList, out, index + 1);\n};\n\nwrite(l1, out);\nout.write('\\n');\nwrite(l2, out);\nout.write('\\n');\n\n/**\n * * Write a ", "\n```\n\nThis is a tricky part. The first thing you need to do is write a function which looks at a nested list and find the nested list elements that are present in another list.\n\nA nested list element can either be a list, or a function which looks at another nested list and return a new list.\n\n#### List elements\n\nTo find the nested list elements which are present in another list, you need to do one of two things.\n\nFirst, you need to convert the nested list elements to a new list using the `nestedLists` method of the `List` class.\n\nSecond, you need to look through the list for elements that are present in the new list.\n\nThe `nestedLists` method of `List` has a `copy()` method, which returns a new list that is a copy of the original list.\n\nThe `nestedLists` method of `List` also has a `sort()` method, which sorts the new list.\n\nFinally, we need to look through the list for elements that are not present in the new list.\n\nTo check for the existence of elements that are not present in the new list, you can do one of two things.\n\nFirst, you can use the `isEmpty()` method of the `List` class to check if the list is empty.\n\nSecond, you can use the `forEach()` method of the `List` class to iterate through the new list.\n\nIn this case, we are using the `isEmpty` and `forEach` methods of `List`, which takes a ", "\n\n/**\n * * Read a function from a file containing a sequence of function definitions.\n */\n\n/**\n * * Read a function from a file containing a sequence of function definitions.\n */\n\n/**\n * * Add any optional parameters to the functions.\n */\n\n/**\n * * Read an item from a list, either incrementing the index or passing it as a separate parameter.\n */\n\n/**\n * * Write a function to remove the first occurrence of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove all occurrences of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove all occurrences of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove all occurrences of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove the first occurrence of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove all occurrences of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove all occurrences of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove all occurrences of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove the first occurrence of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove all occurrences of a nested list element from another nested list element.\n */\n\n/**\n * * Write a function to remove all occurrences of a nested list element from another nested list element.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/299", "prompt": "function maxAggregate(stdata) {\n/**\n * * Write a function to calculate the maximum aggregate from the list of tuples.\n */", "entry_point": "maxAggregate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]];\nvar x0 = maxAggregate(arg00);\nvar v0 = [\"Juan Whelan\", 212];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]];\nvar x1 = maxAggregate(arg10);\nvar v1 = [\"Juan Whelan\", 72];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]];\nvar x2 = maxAggregate(arg20);\nvar v2 = [\"Sabah Colley\", 70];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the maximum aggregate from the list of tuples.", "language": "javascript", "canonical_solution": "  const aggregatedData = {}\n\n  // Get all the subjects name and total points\n  for (let i = 0; i < stdata.length; i++) {\n    const [name, points] = stdata[i]\n    if (!aggregatedData[name]) {\n      aggregatedData[name] = points\n    } else {\n      aggregatedData[name] += points\n    }\n  }\n\n  // Find the max of the aggregated points\n  const maxPoints = Object.entries(aggregatedData).reduce((acc, curr) => {\n    const [name, points] = curr\n\n    if (points > acc.points) {\n      acc.name = name\n      acc.points = points\n    }\n\n    return acc\n  }, {\n    name: null,\n    points: 0\n  })\n\n  return [maxPoints.name, maxPoints.points]\n}", "completion": ["\n", "\n\n// ~~ Calculate the maximum aggregate from the list of tuples.\n\nconst stresult = stdata[0];\n\nfor (let stdataIndex = 1; stdataIndex < stdata.length; stdataIndex++) {\n  const sttuple = stdata[stdataIndex];\n\n  if (sttuple[0] > stresult[0]) stresult[0] = sttuple[0];\n  if (sttuple[1] > stresult[1]) stresult[1] = sttuple[1];\n  if (sttuple[2] > stresult[2]) stresult[2] = sttuple[2];\n}\n\n// ~~ Write a function to calculate the maximum aggregate from the list of tuples.\n\nconst stmaxresult = stresult;\n\n}\n\n// ~~ Write a function to calculate the minimum aggregate from the list of tuples.\n\nif (etdata) {\n/**\n * * Write a function to calculate the minimum aggregate from the list of tuples.\n */\n\n// ~~ Calculate the minimum aggregate from the list of tuples.\n\nconst etresult = etdata[0];\n\nfor (let etdataIndex = 1; etdataIndex < etdata.length; etdataIndex++) {\n  const ettuple = etdata[etdataIndex];\n\n  if (ettuple[0] < etresult[0]) etresult[0] = ettuple[0];\n  if (ettuple[1] < etresult[1]) etresult[1] = ettuple[1];\n  if (ettuple[2] < etresult[2]) etresult[2] = ettuple[2];\n}\n\n// ~~ Write a ", "\n\n/**\n * * Write a function to calculate the minimum aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the mean aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the sum aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the standard deviation aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the variance aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the mode aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the median aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the maximum aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the minimum aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the mean aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the sum aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the standard deviation aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the variance aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the mode aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the median aggregate from the list of tuples.\n */\n\n/**\n * * Write a function to calculate the maximum aggregate from the list of tuples.\n */\n\n/**\n * * Write a ", "\nconst writeMax = (n, agg_list) => {\n    // write the function to calculate the maximum aggregate from the list of tuples\n    f(n, agg_list);\n    // calculate the maximum aggregate from the list of tuples\n    agg_max = Math.max(agg_max, agg_list[0]);\n  }\n\n/**\n * * Write a function to calculate the minimum aggregate from the list of tuples.\n */\nconst writeMin = (n, agg_list) => {\n    // write the function to calculate the minimum aggregate from the list of tuples\n    f(n, agg_list);\n    // calculate the minimum aggregate from the list of tuples\n    agg_min = Math.min(agg_min, agg_list[0]);\n  }\n\n/**\n * * Write a function to calculate the sum of all the tuples.\n */\nconst writeSum = (n, agg_list) => {\n    // write the function to calculate the sum of all the tuples\n    f(n, agg_list);\n    // sum the tuples\n    agg_sum += agg_list[0];\n  }\n\n/**\n * * Write a function to calculate the average of all the tuples.\n */\nconst writeAvg = (n, agg_list) => {\n    // write the function to calculate the average of all the tuples\n    f(n, agg_list);\n    // calculate the average of all the tuples\n    agg_avg = agg_sum / (n - 1);\n  }\n\n/**\n * * Write a function to calculate the second-highest aggregate from the list of tuples.\n */\nconst writeSecMax = (n, agg_list) => {\n    // write the ", "\n"]}
{"task_id": "MBJSP/300", "prompt": "function countBinarySeq(n) {\n/**\n * * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n */", "entry_point": "countBinarySeq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar x0 = countBinarySeq(arg00);\nvar v0 = 2.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = countBinarySeq(arg10);\nvar v1 = 6.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = countBinarySeq(arg20);\nvar v2 = 20.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "language": "javascript", "canonical_solution": "    if (n === 1) return 2;\n    if (n === 2) return 6;\n    if (n === 3) return 20;\n    const total = (2 ** (n - 1)) - 1;\n    const total2 = (2 ** (n)) - 1;\n    return (total2 - total) * 2;\n}", "completion": ["\n/**\n * Given an array of integers arr, write a ", "\n\n(", "\n  count(n: number) {\n    return this.count_(n, 0, {\n      prefix: new BitString(),\n      suffix: new BitString(),\n      first: new BitString(),\n      last: new BitString(),\n      state: \"prefix\",\n    });\n  }\n\n  private count_(n: number, count: number, {\n    prefix,\n    suffix,\n    first,\n    last,\n    state,\n  }: {\n    prefix: BitString,\n    suffix: BitString,\n    first: BitString,\n    last: BitString,\n    state: string,\n  }) {\n    if (state === \"suffix\") {\n      suffix.push(n, count);\n      return;\n    }\n\n    if (state === \"first\") {\n      first.push(n, count);\n      return;\n    }\n\n    if (state === \"prefix\") {\n      this.count_(n, count, {\n        prefix: prefix.append(n, count),\n        first: first.append(n, count),\n        last: last.append(n, count),\n        state: \"suffix\",\n      });\n      return;\n    }\n\n    if (state === \"last\") {\n      this.count_(n, count, {\n        prefix: prefix.append(n, count),\n        suffix: suffix.append(n, count),\n        first: first.append(n, count),\n        last: last.append(n, count),\n        state: \"suffix\",\n      });\n      return;\n    }\n  }\n}\n<|endoftext|>", "\nthis.write = ", "\n@SuppressWarnings(\"checkstyle:methodName\")\n@org.eclipse.jetty.util.component.AbstractLifeCycle.AbstractLifeCycleListener.Sharable\npublic class BinarySequenceCounter extends AbstractLifeCycle.AbstractLifeCycleListener {\n    /** The count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. */\n    private int count;\n\n    /**\n     * @return the count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n     */\n    public int getCount() {\n        return count;\n    }\n\n    @Override\n    public void lifeCycleStarting(LifeCycle lifeCycle) {\n        count = 0;\n    }\n\n    @Override\n    public void lifeCycleStarted(LifeCycle lifeCycle) {\n        count++;\n    }\n\n    @Override\n    public void lifeCycleFailure(LifeCycle lifeCycle, Throwable throwable) {\n        count++;\n    }\n\n    @Override\n    public void lifeCycleStopping(LifeCycle lifeCycle) {\n    }\n\n    @Override\n    public void lifeCycleStopped(LifeCycle lifeCycle) {\n    }\n}\n```\n\n## WebSocket\n\n### WebSocket Messages\n\n```\nGET /ws/github HTTP/1.1\nHost: github.com\nUpgrade: websocket\nConnection: Upgrade\nOrigin: https://github.com\nSec-WebSocket-Protocol: git\nSec-WebSocket-Version: 13\n```\n\n### WebSocket Messages\n\n```\n<html>\n    <head>\n        <title>WebSocket Test</title>\n    </head>\n"]}
{"task_id": "MBJSP/301", "prompt": "function dictDepth(d) {\n/**\n * * Write a function to find the depth of a dictionary.\n */", "entry_point": "dictDepth", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"a\"':1,'\"b\"':{'\"c\"':{'\"d\"':{}}}};\nvar x0 = dictDepth(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"a\"':1,'\"b\"':{'\"c\"':\"python\"}};\nvar x1 = dictDepth(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {\"1\":\"Sun\",\"2\":{\"3\":{\"4\":\"Mon\"}}};\nvar x2 = dictDepth(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the depth of a dictionary.", "language": "javascript", "canonical_solution": "  let depth = 1;\n  function recurse(d) {\n    for (let key in d) {\n      if (typeof d[key] === 'object') {\n        depth += 1;\n        recurse(d[key]);\n      }\n    }\n  }\n  recurse(d);\n  return depth;\n}", "completion": ["\n", "\n\n  d = '<dt>' + d + '</dt>\\n';\n\n/**\n * * Write a ", "\n", "\n", "\n"]}
{"task_id": "MBJSP/302", "prompt": "function setBitNumber(n) {\n/**\n * * Write a JavaScript function to find the most significant bit number which is also a set bit.\n */", "entry_point": "setBitNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = setBitNumber(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = setBitNumber(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 18;\nvar x2 = setBitNumber(arg20);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the most significant bit number which is also a set bit.", "language": "javascript", "canonical_solution": "    let mask = 1;\n    let max = 0;\n    for (let i = 0; i < 32; i++) {\n        if ((n & mask) === mask) {\n            max = mask;\n        }\n        mask <<= 1;\n    }\n    return max;\n}", "completion": ["\nvar p = Number(n).toString(2);\nvar l = p.length;\nvar max = 0;\n\nwhile (l--) {\n\tvar lp = p[l];\n\tif (!lp) {\n\t\tp[l] = 1;\n\t\tif (max < 1) max = 1;\n\t} else {\n\t\tp[l] = lp | 0;\n\t\tif (max < lp) max = lp;\n\t}\n}\n\nreturn max;\n}\n<|endoftext|>", "\n", "\nvar MostSignificantBitNumber = function() {};\nMostSignificantBitNumber.prototype.writes_ = function() {\nreturn 0;\n};\nMostSignificantBitNumber.prototype.functions_ = function() {\nreturn [MostSignificantBitNumber.prototype.sign];\n};\nMostSignificantBitNumber.prototype.sign = function(x) {\nreturn Number.isFinite(x)? Math.sign(x) : 0;\n};\n/**\n * * Write a JavaScript function to find the least significant bit number which is also a set bit.\n */\nvar LeastSignificantBitNumber = function() {};\nLeastSignificantBitNumber.prototype.writes_ = function() {\nreturn 0;\n};\nLeastSignificantBitNumber.prototype.functions_ = function() {\nreturn [LeastSignificantBitNumber.prototype.sign];\n};\nLeastSignificantBitNumber.prototype.sign = function(x) {\nreturn Number.isFinite(x)? Math.sign(x) : 0;\n};\n/**\n * * Write a JavaScript function to find the number of trailing zeroes in an integer.\n */\nvar NumberTrailingZeroes = function() {};\nNumberTrailingZeroes.prototype.writes_ = function() {\nreturn 0;\n};\nNumberTrailingZeroes.prototype.functions_ = function() {\nreturn [NumberTrailingZeroes.prototype.count];\n};\nNumberTrailingZeroes.prototype.count = function(n) {\nreturn Number.isFinite(n)? (n - Number(n % 1e2)) / 1e2 : 0;\n};\n/**\n * * Write a JavaScript ", "\nvar theMostSignificantBit = function(n) {\n  var l = n.length,\n      highest = 0,\n      p;\n  for (var i = 0; i < l; i++) {\n    p = n.substring(0, i + 1);\n    if (Number(p) >= highest) {\n      highest = Number(p);\n    }\n  }\n  return highest;\n};\n/**\n * * Write a JavaScript function to find the number of ones in the number.\n */\nvar theNumberOfOnes = function(n) {\n  var l = n.length,\n      count = 0,\n      p;\n  for (var i = 0; i < l; i++) {\n    p = n.substring(0, i + 1);\n    if (Number(p) == 1) {\n      count++;\n    }\n  }\n  return count;\n};\n/**\n * * Write a JavaScript function to find the number of zeros in the number.\n */\nvar theNumberOfZeros = function(n) {\n  var l = n.length,\n      count = 0,\n      p;\n  for (var i = 0; i < l; i++) {\n    p = n.substring(0, i + 1);\n    if (Number(p) == 0) {\n      count++;\n    }\n  }\n  return count;\n};\n/**\n * * Write a JavaScript function to find the most significant bit number which is also a set bit.\n */\nvar theMostSignificantBit = ", "\n"]}
{"task_id": "MBJSP/303", "prompt": "function solve(a, n) {\n/**\n * * Write a JavaScript function to check whether the count of inversion of two types are same or not.\n */", "entry_point": "solve", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 0, 2];\nvar arg01 = 3;\nvar x0 = solve(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 0];\nvar arg11 = 3;\nvar x1 = solve(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar arg21 = 3;\nvar x2 = solve(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the count of inversion of two types are same or not.", "language": "javascript", "canonical_solution": "    let left = 0;\n    let right = n - 1;\n\n    while (left < right) {\n        if (a[left] > a[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n}", "completion": ["\nreturn _.compact(a).map(", "\n    count = 0;\n    if (a.length!= b.length) {\n        return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] > b[i]) {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    return false;\n}\n\nvar script = document.createElement('script');\nscript.type = 'text/javascript';\nscript.src = 'http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js';\ndocument.body.appendChild(script);\n<|endoftext|>", "\n", "\nvar countInversion = function countInversion(a, n) {\n  var max = Math.min(a.length, n);\n  var min = Math.max(a.length, n);\n\n  var result = {\n    count: 0\n  };\n\n  for (var i = 0; i < max; i++) {\n    for (var j = 0; j < min; j++) {\n      if (a[i] > a[j]) {\n        result.count++;\n      }\n    }\n  }\n\n  return result;\n};\n\n/**\n * * Write a JavaScript function that returns the number of bits that are set to 1 in the binary representation of the number.\n */\nvar countBitsSetToOne = function countBitsSetToOne(n) {\n  var result = 0;\n\n  while (n) {\n    if (n & 1) {\n      result++;\n    }\n    n = n >>> 1;\n  }\n\n  return result;\n};\n\n/**\n * * Write a JavaScript function that returns the number of bits that are set to 0 in the binary representation of the number.\n */\nvar countBitsSetToZero = function countBitsSetToZero(n) {\n  var result = 0;\n\n  while (n) {\n    if (n & 1) {\n      result++;\n    }\n    n = n >>> 1;\n  }\n\n  return result;\n};\n\n/**\n * * Write a JavaScript function that returns the number of bits that are set in the binary representation of the number.\n */\nvar countBitsSet = ", "\n    countInversions(a, n);\n}\n<|endoftext|>"]}
{"task_id": "MBJSP/304", "prompt": "function findElement(arr, ranges, rotations, index) {\n/**\n * * Write a JavaScript function to find element at a given index after number of rotations.\n */", "entry_point": "findElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [[0, 2], [0, 3]];\nvar arg02 = 2;\nvar arg03 = 1;\nvar x0 = findElement(arg00, arg01, arg02, arg03);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = [[0, 1], [0, 2]];\nvar arg12 = 1;\nvar arg13 = 2;\nvar x1 = findElement(arg10, arg11, arg12, arg13);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [[0, 1], [0, 2]];\nvar arg22 = 1;\nvar arg23 = 1;\nvar x2 = findElement(arg20, arg21, arg22, arg23);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find element at a given index after number of rotations.", "language": "javascript", "canonical_solution": "    for (let i = rotations - 1; i >= 0; i--) {\n        left = ranges[i][0];\n        right = ranges[i][1];\n        if (left <= index && right >= index) {\n            if (index == left) {\n                index = right;\n            } else {\n                index = index - 1;\n            }\n        }\n    }\n    return arr[index];\n}", "completion": ["\n}\n/**\n * Function to write a JavaScript function to find element at a given index after number of rotations.\n */\n},{}],481:[", "\n  var s = [];\n  var f = ", "\n\n\tvar lang = window.navigator.language || window.navigator.userLanguage;\n\n\tvar name = lang.substr(0, 2).toLowerCase() + lang.substr(3);\n\n\tvar element = document.createElement('script');\n\telement.src = \"https://elements.polyfill.io/v2/\" + name + \"/polyfill.min.js?order=featured\";\n\tdocument.head.appendChild(element);\n\n/**\n * * Write a JavaScript ", "\n    const start = t => {\n        const bounds = getBounds(arr, t);\n        const left = bounds.left;\n        const top = bounds.top;\n        for (let i = 0; i < rotations; i++) {\n            arr.push(() => {\n                return arr.find((el, t) => {\n                    const elBounds = getBounds(arr, t);\n                    if (elBounds.left === left && elBounds.top === top) {\n                        return true;\n                    }\n                    return false;\n                });\n            });\n        }\n    };\n    return arr.reduce((last, next) => {\n        const lastRange = ranges[last];\n        const nextRange = ranges[next];\n        const lastRotations = rotations[last];\n        const nextRotations = rotations[next];\n        if (lastRange && nextRange) {\n            const lastLeft = lastRange.start;\n            const lastTop = lastRange.end;\n            const nextLeft = nextRange.start;\n            const nextTop = nextRange.end;\n            const inRange = (left, top, end) => {\n                return left <= end && top <= end;\n            };\n            const inLeft = (left, top, end) => {\n                return left <= end && inRange(left, top, lastTop) && inRange(nextLeft, nextTop, top);\n            };\n            const inTop = (left, top, end) => {\n                return inRange(left, top, lastLeft) && inRange(nextLeft, nextTop, left);\n            };\n            const inRight", "\n\nvar writeFunction = function writeFunction(arr, ranges, rotations, index) {\n    var t1 = arr[index];\n    var t2 = arr[index + 1];\n    var n = rotations[index];\n    if (n % 2 === 1) {\n        arr[index] = t2;\n        arr[index + 1] = t1;\n    }\n};\n\n/**\n * * Use JavaScript function to find element at a given index after number of rotations.\n */\n\nvar findElement = function findElement(arr, ranges, rotations, index) {\n    var t1 = arr[index];\n    var t2 = arr[index + 1];\n    var n = rotations[index];\n    if (n % 2 === 0) {\n        arr[index] = t1;\n        arr[index + 1] = t2;\n    }\n};\n\n/**\n * * Return the element at index.\n */\n\nvar returnElement = function returnElement(arr, ranges, rotations, index) {\n    var t1 = arr[index];\n    var t2 = arr[index + 1];\n    var n = rotations[index];\n    if (n % 2 === 0) {\n        arr[index] = t2;\n        arr[index + 1] = t1;\n    }\n};\n\n/**\n * * Return the element at index.\n */\n\nvar returnElementAtIndex = "]}
{"task_id": "MBJSP/305", "prompt": "function startWithp(words) {\n/**\n * * Write a function to match two words from a list of words starting with letter 'p'.\n */", "entry_point": "startWithp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python PHP\", \"Java JavaScript\", \"c c++\"];\nvar x0 = startWithp(arg00);\nvar v0 = [\"Python\", \"PHP\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python Programming\", \"Java Programming\"];\nvar x1 = startWithp(arg10);\nvar v1 = [\"Python\", \"Programming\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Pqrst Pqr\", \"qrstuv\"];\nvar x2 = startWithp(arg20);\nvar v2 = [\"Pqrst\", \"Pqr\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to match two words from a list of words starting with letter 'p'.", "language": "javascript", "canonical_solution": "  return words.filter(word => word.startsWith('p'));\n}", "completion": ["\n(", "\n\n// * Find the function of the first word.\nvar findFunction = function findFunction(word, words) {\n    // * Find the function of the first word.\n    var function = word.replace(/[pP]/gi, '');\n\n    // * Check if it matches the first word.\n    if (", "\nreturn function(state) {\n  state.token = state.token.replace(p, 'pending');\n  return state;\n};\n}();\n\n/**\n * * Test a function by matching it with the expected tokens.\n */\np(words) {\n/**\n * * Test if `state.token` is equal to `expected`.\n */\nreturn function(state) {\n  state.token = state.token.replace(p, 'pending');\n  if (state.token!== expected) {\n    state.expected = expected;\n    console.log('Token mismatch: expected: %s, got: %s.', expected, state.token);\n    return state;\n  }\n  console.log('Test passed.');\n  return state;\n};\n}();\n\n/**\n * * Test a function with a given expected value.\n */\np(words) {\n/**\n * * Test if `state.token` is equal to `expected`.\n */\nreturn function(state) {\n  state.token = state.token.replace(p, 'pending');\n  if (state.token!== expected) {\n    state.expected = expected;\n    console.log('Token mismatch: expected: %s, got: %s.', expected, state.token);\n    return state;\n  }\n  console.log('Test passed.');\n  return state;\n};\n}();\n\n/**\n * * Test a function with a given expected value.\n */\np(words) {\n/**\n * * Test if `state.token` is equal to `expected`.\n */\nreturn ", "\nreturn function(words) {\n  if (words.length === 0) return [];\n\n  var word1 = words[0].slice(0, -1);\n  if (word1 === 'p') return function(words) {\n    if (words.length === 0) return [];\n    var word2 = words[0].slice(1);\n    if (word2 === 'p') return [word2];\n    return [];\n  };\n};\n\n```\n\nAnd the following is a valid function with the above signature:\n\n```js\n", "\n"]}
{"task_id": "MBJSP/306", "prompt": "function maxSumIncreasingSubseq(a, n, index, k) {\n/**\n * * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n */", "entry_point": "maxSumIncreasingSubseq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 101, 2, 3, 100, 4, 5];\nvar arg01 = 7;\nvar arg02 = 4;\nvar arg03 = 6;\nvar x0 = maxSumIncreasingSubseq(arg00, arg01, arg02, arg03);\nvar v0 = 11;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 101, 2, 3, 100, 4, 5];\nvar arg11 = 7;\nvar arg12 = 2;\nvar arg13 = 5;\nvar x1 = maxSumIncreasingSubseq(arg10, arg11, arg12, arg13);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 15, 19, 21, 26, 28, 31];\nvar arg21 = 7;\nvar arg22 = 2;\nvar arg23 = 4;\nvar x2 = maxSumIncreasingSubseq(arg20, arg21, arg22, arg23);\nvar v2 = 71;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "language": "javascript", "canonical_solution": "  let maxSum = 0;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += a[i];\n    if (i >= index) {\n      if (sum > maxSum) {\n        maxSum = sum;\n      }\n      sum -= a[i - index];\n    }\n  }\n  return maxSum;\n}", "completion": ["\nwrite_minimum_subsequence_from_prefix_till_ith_index_and_also_including_kth_element_which_is_after_i(const kth_element_t *k_elems, size_t k_elems_size, size_t k_elems_capacity, size_t i, const function_t *funs, size_t funs_size, size_t funs_capacity, size_t n, size_t k) {\n    //TODO\n}\n\n/**\n * * Write a function to find the maximum sum of increasing subsequence from suffix till ith index and also including a given kth element which is before i, i.e., k < i.\n */\nwrite_minimum_subsequence_from_suffix_till_ith_index_and_also_including_kth_element_which_is_before_i(const kth_element_t *k_elems, size_t k_elems_size, size_t k_elems_capacity, size_t i, const function_t *funs, size_t funs_size, size_t funs_capacity, size_t n, size_t k) {\n    //TODO\n}\n\n/**\n * * Write a ", "\n\n}\n```\n\nThe above implementation of the algorithm might get slow in case of large input. To overcome this issue, you can implement a function which returns the maximum sum of increasing subsequence of a given length. You can also implement a function which returns the maximum sum of increasing subsequence of a given length and which is below a given kth element.\n\n### Selection Algorithm\n\nThe selection algorithm implemented in this example is in the following pseudocode:\n\n```\nSelection Algorithm:\n\nInput: list of integers, k\nOutput: a list of k-smallest elements in the input\n\n# Implementation of Selection Algorithm\n\n", "\n  const maxSum = (a, n, index, k) => {\n    const sum = index === 0? 0 : a[index - 1];\n    for (let i = index; i < n; i++) {\n      if (k > i) {\n        sum += a[i] + maxSum(a, n, i + 1, k - i);\n      }\n    }\n    return sum;\n  };\n}\n```\n\nNow, a question to you:\n\n> What is the maximum sum of an increasing subsequence from prefix till ith index?\n\n$$\n\\begin{aligned}\n\\text{Maximum Sum} = & \\sum_{i=1}^n a_i + \\sum_{i=1}^n maxSum(a, n, i+1, k-i) \\\\\n= & \\sum_{i=1}^n a_i + maxSum(a, n, 1, k)\n\\end{aligned}\n$$\n\nBased on this equation, we can see that $$\\sum_{i=1}^n a_i$$ is the maximum sum of an increasing subsequence from prefix till ith index.\n\n## References\n\n- [https://www.geeksforgeeks.org/greedy-algorithms-set-5-increasing-subsequence/](https://www.geeksforgeeks.org/greedy-algorithms-set-5-increasing-subsequence/)\n- [https://leetcode.com/problems/increasing-subsequence/](https://leetcode.com/problems/increasing-subsequence/)\n- [https://en.wikipedia.org/wiki/Largest_element_in_an_array](https://en.wikipedia.org/wiki/Largest", "\n}\n\nclass Solution {\npublic:\n    int maximumSum(vector<int>& nums, int k) {\n        // cout << \"Maximum sum of prefix upto i : \";\n        // for (int i = 0; i < nums.size(); ++i)\n        //     cout << nums[i] << \" \";\n        // cout << endl;\n        \n        if (k <= 0) return 0;\n        if (nums.size() == 0) return 0;\n        if (nums.size() == 1) return nums[0];\n        \n        int ans = 0;\n        vector<int> dp(k + 1, 0);\n        \n        for (int i = 0; i < nums.size(); ++i) {\n            ans = max(ans, dfs(i, nums, dp));\n            \n        }\n        \n        return ans;\n    }\n    \n    int dfs(int i, vector<int>& nums, vector<int>& dp) {\n        // cout << \"dfs called with i : \" << i << endl;\n        \n        if (dp[0] < nums[i]) {\n            dp[0] = nums[i];\n            dp[1] = 0;\n        }\n        else if (dp[0] == nums[i]) {\n            dp[1] = dp[1] + 1;\n        }\n        \n        for (int j = 1; j < dp.size(); ++j) {\n            if (dp[j] < dp[j - 1] + nums[i]) {\n                dp[j] = dp[j -", "\n"]}
{"task_id": "MBJSP/307", "prompt": "function colonTuplex(tuplex, m, n) {\n/**\n * * Write a function to get a colon of a tuple.\n */", "entry_point": "colonTuplex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"HELLO\", 5, [], true];\nvar arg01 = 2;\nvar arg02 = 50;\nvar x0 = colonTuplex(arg00, arg01, arg02);\nvar v0 = [\"HELLO\", 5, [50], true];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"HELLO\", 5, [], true];\nvar arg11 = 2;\nvar arg12 = 100;\nvar x1 = colonTuplex(arg10, arg11, arg12);\nvar v1 = [\"HELLO\", 5, [100], true];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"HELLO\", 5, [], true];\nvar arg21 = 2;\nvar arg22 = 500;\nvar x2 = colonTuplex(arg20, arg21, arg22);\nvar v2 = [\"HELLO\", 5, [500], true];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to get a colon of a tuple.", "language": "javascript", "canonical_solution": "  return [tuplex[0], tuplex[1], [...tuplex[2], n], tuplex[3]]\n}", "completion": ["\n\nvar _ref2 = tuplex(tuplex, m, n) || {};\nvar g = _ref2.g;\nvar _ref2$f = _ref2.f;\nvar f = _ref2$f === undefined? function (x) {\n    return x;\n} : _ref2$f;\nvar _ref2$m = _ref2.m;\nvar m = _ref2$m === undefined? function (x) {\n    return x;\n} : _ref2$m;\nvar _ref2$n = _ref2.n;\nvar n = _ref2$n === undefined? function (x) {\n    return x;\n} : _ref2$n;\nvar _ref2$x = _ref2.x;\nvar x = _ref2$x === undefined? function (x) {\n    return x;\n} : _ref2$x;\n/**\n * * Get the value of a colon from a tuple.\n */\n\nvar _ref3 = tuplex(tuplex, m, n) || {};\nvar v = _ref3.v;\n/**\n * * Write a function to get the colon value of a tuple.\n */\n\nvar _ref4 = tuplex(tuplex, m, n) || {};\nvar _ = _ref4._;\nvar gv = _ref4.gv;\nvar _ref4$f = _ref4.f;\nvar f = _ref4$f === undefined? function (x) {\n    return x;\n} : _ref4$f;\nvar _ref4$m = _ref4.m;\nvar m = _ref4$m === undefined? ", "\nvar write_tuplex = function write_tuplex(tuplex, m, n) {\n  var first = '';\n  var second = '';\n  var third = '';\n  if (m > 1) {\n    first = ',';\n  }\n  if (n > 1) {\n    second = ',';\n  }\n  if (n > 2) {\n    third = ',';\n  }\n  write('(' + tuplex + ')');\n};\n\n/**\n * Write a function to get a colon of a tuple.\n */\nvar write_tuplex2 = function write_tuplex2(tuplex, m, n) {\n  var first = '';\n  var second = '';\n  var third = '';\n  if (m > 1) {\n    first = ',';\n  }\n  if (n > 1) {\n    second = ',';\n  }\n  if (n > 2) {\n    third = ',';\n  }\n  write('(' + tuplex + ')');\n};\n\n/**\n * Write a function to get a colon of a tuple.\n */\nvar write_tuplex3 = function write_tuplex3(tuplex, m, n) {\n  var first = '';\n  var second = '';\n  var third = '';\n  if (m > 1) {\n    first = ',';\n  }\n  if (n > 1) {\n    second = ',';\n  }\n  if (n > 2) {\n    third = ',';\n  }\n  write('(' + tuplex + ')');\n};\n\n/**\n * Write a ", "\nvar write_tuplex = (", "\nvar tuplex = new tuplexlex(tuplexlex, m, n);\n/**\n * * Write a function to get a comma of a tuple.\n */\nvar tuplexcomma = new tuplexcomma(tuplexlex, m, n);\n/**\n * * Write a function to get a left bracket of a tuple.\n */\nvar tuplexlbracket = new tuplexlbracket(tuplexlex, m, n);\n/**\n * * Write a function to get a right bracket of a tuple.\n */\nvar tuplexrbracket = new tuplexrbracket(tuplexlex, m, n);\n/**\n * * Write a function to get a comma of a tuple.\n */\nvar tuplexcomma2 = new tuplexcomma2(tuplexlex, m, n);\n/**\n * * Write a function to get a comma of a tuple.\n */\nvar tuplexcomma3 = new tuplexcomma3(tuplexlex, m, n);\n/**\n * * Write a function to get a comma of a tuple.\n */\nvar tuplexcomma4 = new tuplexcomma4(tuplexlex, m, n);\n/**\n * * Write a function to get a comma of a tuple.\n */\nvar tuplexcomma5 = new tuplexcomma5(tuplexlex, m, n);\n/**\n * * Write a function to get a comma of a tuple.\n */\nvar tuplexcomma6 = new tuplexcomma6(tuplexlex, m, n);\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/308", "prompt": "function largeProduct(nums1, nums2, n) {\n/**\n * * Write a function to find the specified number of largest products from two given lists.\n */", "entry_point": "largeProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6];\nvar arg01 = [3, 6, 8, 9, 10, 6];\nvar arg02 = 3;\nvar x0 = largeProduct(arg00, arg01, arg02);\nvar v0 = [60, 54, 50];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6];\nvar arg11 = [3, 6, 8, 9, 10, 6];\nvar arg12 = 4;\nvar x1 = largeProduct(arg10, arg11, arg12);\nvar v1 = [60, 54, 50, 48];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [3, 6, 8, 9, 10, 6];\nvar arg22 = 5;\nvar x2 = largeProduct(arg20, arg21, arg22);\nvar v2 = [60, 54, 50, 48, 45];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the specified number of largest products from two given lists.", "language": "javascript", "canonical_solution": "  const result = [];\n  const product = [];\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      product.push(nums1[i] * nums2[j]);\n    }\n  }\n  product.sort((a, b) => b - a);\n  for (let i = 0; i < n; i++) {\n    result.push(product[i]);\n  }\n  return result;\n}", "completion": ["\n\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\n\n\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} n\n * @return {number}\n */\n\n", "\n\n\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @param {number} n\n * @return {number}\n */\nvar findLargestProducts = function(nums1, nums2, n) {\n  // given two lists and number to find\n  if (nums1 === null || nums2 === null || n <= 0) {\n    return 0;\n  }\n\n  // calculate product of each element of each list\n  var products1 = [];\n  var products2 = [];\n\n  for (var i = 0; i < nums1.length; i++) {\n    products1[i] = 1;\n    for (var j = 0; j < nums2.length; j++) {\n      products1[i] *= nums1[i];\n    }\n  }\n\n  for (var i = 0; i < nums2.length; i++) {\n    products2[i] = 1;\n    for (var j = 0; j < nums1.length; j++) {\n      products2[i] *= nums2[i];\n    }\n  }\n\n  var maxProducts = 0;\n  for (var i = 0; i < nums1.length; i++) {\n    for (var j = 0; j < nums2.length; j++) {\n      var product = products1[i] * products2[j];\n      if (product > maxProducts) {\n        maxProducts = product;\n      }\n    }\n  }\n\n  return maxProducts;\n};\n\nmodule.exports = findLargestProducts;\n},{}],20:[", "\n", "\n\n\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\n", "\n\n/**\n * @param {number} n\n * @param {Array<Array<number>>>} list1\n * @param {Array<Array<number>>>} list2\n * @return {number}\n */\n"]}
{"task_id": "MBJSP/309", "prompt": "function maximum(a, b) {\n/**\n * * Write a JavaScript function to find the maximum of two numbers.\n */", "entry_point": "maximum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 10;\nvar x0 = maximum(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = -1;\nvar arg11 = -2;\nvar x1 = maximum(arg10, arg11);\nvar v1 = -1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 7;\nvar x2 = maximum(arg20, arg21);\nvar v2 = 9;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the maximum of two numbers.", "language": "javascript", "canonical_solution": "    return Math.max(a, b);\n}", "completion": ["\n", "\n  var a = args[0];\n  var b = args[1];\n\n  ", "\n", "\n    write: (s, a, b) => {\n        return s.setMax(a, b);\n    }\n}\n```\n\nNotice that we have to write the `setMax` function, because we are not in the `write` function. We will call this function in the `write` function.\n\nNow, notice that we have to take care of the return value, we can call `setMax` function without any arguments.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` function without any arguments, which means that we have to return `s`.\n\nWe can call `setMax` ", "\n/**\n * Write a JavaScript function to find the minimum of two numbers.\n */\n// Write a JavaScript function to find the minimum of two numbers.\n("]}
{"task_id": "MBJSP/310", "prompt": "function stringToTuple(str1) {\n/**\n * * Write a function to convert a given string to a tuple.\n */", "entry_point": "stringToTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python 3.0\";\nvar x0 = stringToTuple(arg00);\nvar v0 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"item1\";\nvar x1 = stringToTuple(arg10);\nvar v1 = [\"i\", \"t\", \"e\", \"m\", \"1\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"15.10\";\nvar x2 = stringToTuple(arg20);\nvar v2 = [\"1\", \"5\", \".\", \"1\", \"0\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert a given string to a tuple.", "language": "javascript", "canonical_solution": "  if (!str1) {\n    return [];\n  }\n  let str1Arr = str1.split(' ');\n  let str1ArrJoined = str1Arr.join('');\n  return str1ArrJoined.split('');\n}", "completion": ["\n", "\n    ", "\n", "\n    typedef Tuple(str1) {\n/**\n * * * Return a string representation of the tuple.\n */\n        typedef str1&(str1::*Get)();\n/**\n * * * * Return a string representation of the tuple.\n */\n        typedef const str1&(str1::*Get)() const;\n/**\n * * * Return a function to convert a given string to a tuple.\n */\n        typedef Tuple(str1::*GetTuple)();\n/**\n * * * Return a function to convert a given string to a tuple.\n */\n        typedef const Tuple(str1::*GetTuple)() const;\n/**\n * * * Return a function to convert a given string to a tuple.\n */\n        typedef Tuple(str1::*GetOther)();\n/**\n * * * Return a function to convert a given string to a tuple.\n */\n        typedef const Tuple(str1::*GetOther)() const;\n/**\n * * Return a function to convert a given string to a tuple.\n */\n        Get get() { return &str1::get; }\n/**\n * * Return a function to convert a given string to a tuple.\n */\n        Get get() const { return &str1::get; }\n    };\n/**\n * * Return a function to convert a given string to a tuple.\n */\n    GetTuple getTuple() { return &str1::getTuple; }\n/**\n * * Return a function to convert a given string to a tuple.\n */\n    GetTuple getTuple() const { return &str1::getTuple; }\n/**\n * * Return a ", "\n%extend Tuple<$type> {\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method$\n  $method"]}
{"task_id": "MBJSP/311", "prompt": "function setLeftMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */", "entry_point": "setLeftMostUnsetBit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = setLeftMostUnsetBit(arg00);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 12;\nvar x1 = setLeftMostUnsetBit(arg10);\nvar v1 = 14;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = setLeftMostUnsetBit(arg20);\nvar v2 = 15;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to set the left most unset bit.", "language": "javascript", "canonical_solution": "    if (!((n & (n + 1)))){ \n        return n \n    }\n    var pos = 0, temp = n, count = 0;\n    while (temp){\n        if (!((temp & 1))){\n            pos = count;\n        }\n        count += 1; temp >>= 1;\n    }\n    return n | (1 << (pos));\n}", "completion": ["\n}\n\n/**\n * * Write a JavaScript function to set the right most unset bit.\n */\nclass RightMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the right most unset bit.\n */\n}\n\n/**\n * * Write a JavaScript function to set the middle unset bit.\n */\nclass MiddleUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the middle unset bit.\n */\n}\n\n/**\n * * Write a JavaScript function to set the left and right most unset bit.\n */\nclass LeftRightMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the left and right most unset bit.\n */\n}\n\n/**\n * * Write a JavaScript function to set the left and middle unset bit.\n */\nclass LeftMiddleUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the left and middle unset bit.\n */\n}\n\n/**\n * * Write a JavaScript function to set the middle and right most unset bit.\n */\nclass MiddleRightMostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the middle and right most unset bit.\n */\n}\n\n/**\n * * Write a JavaScript function to set the leftmost unset bit.\n */\nclass LeftmostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the leftmost unset bit.\n */\n}\n\n/**\n * * Write a JavaScript function to set the rightmost unset bit.\n */\nclass RightmostUnsetBit(n) {\n/**\n * * Write a JavaScript function to set the rightmost unset bit.\n */\n}\n\n/**\n * * Write a JavaScript ", "\n  n = n | (1 << (numBits - 1));\n  return n;\n}\n\n/**\n * * The same as the `WriteExactly` function, but with the return value (boolean) set to `false`.\n * */\n", "\nvar $ = window.jQuery;\nif (!($.browser.msie && parseInt($.browser.version, 10) < 10)) {\n\t$ = window.ActiveXObject? window['ActiveXObject']('Microsoft.XMLHTTP') : new XMLHttpRequest();\n}\n$.ajax({\n\turl: $.query.unset,\n\tdataType: 'xml',\n\tsuccess: function(xml) {\n\t\t$('.unset').each(", "\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n};\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to set the left most unset bit.\n */\n\n/**\n * * Write a JavaScript function to clear the left most unset bit.\n */\n\n/**\n * * Write a JavaScript ", "\n"]}
{"task_id": "MBJSP/312", "prompt": "function volumeCone(r, h) {\n/**\n * * Write a function to find the volume of a cone.\n */", "entry_point": "volumeCone", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 12;\nvar x0 = volumeCone(arg00, arg01);\nvar v0 = 314.15926535897927;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = volumeCone(arg10, arg11);\nvar v1 = 1570.7963267948965;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 19;\nvar arg21 = 17;\nvar x2 = volumeCone(arg20, arg21);\nvar v2 = 6426.651371693521;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the volume of a cone.", "language": "javascript", "canonical_solution": "  return (1/3) * Math.PI * r * r * h;\n}", "completion": ["\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\n\n/**\n * * Write a function to find the volume of a cone.\n */\n\n/**\n * * Write a ", "\nvoid write_one(int r, int h) {\n    if (h >= r)\n        return;\n    int a = (h * h - r * r) / (2 * h);\n    int b = r - a;\n    printf(\"one %d %d %d\\n\", r, h, a + b);\n}\n\n/**\n * * Write a function to find the volume of a pyramid.\n */\nvoid write_two(int r, int h) {\n    int a = h / 2;\n    int b = r - h / 2;\n    printf(\"two %d %d %d %d\\n\", r, h, a + b, h);\n}\n\n/**\n * * Write a function to find the volume of a sphere.\n */\nvoid write_three(int r) {\n    if (r < 0)\n        return;\n    if (r == 0)\n        printf(\"three 0 %d\\n\", r);\n    else\n        printf(\"three %d %d\\n\", r, r * r * 3 / 4);\n}\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\nvoid write_four(int r, int h) {\n    int a = h / 2;\n    int b = r - h / 2;\n    printf(\"four %d %d %d %d\\n\", r, h, a + b, h);\n}\n\n/**\n * * Write a function to find the volume of a cube.\n */\nvoid write_five(int r) {\n    printf(\"five %d %d %d\\n\", r, r, r);\n}\n\n/**\n * * Write a ", "\n", "\n\n  var val = this.values.concat().reverse().reduce((total, r, h) => {\n    var r1 = r + 0.5;\n\n    return total + Math.abs(r1 - r) * (h - this.values[h]);\n  }, 0);\n\n  this.volume = val / this.values.length;\n\n  return this.volume;\n\n/**\n * * Set the origin of the cone to the given coordinates.\n * *\n * @param  {Number} r The radius of the first circle of the cone.\n * @param  {Number} h The height of the cone.\n * @return {Cone}    The cone for method chaining.\n */\n\n  }, {\n  key:'setOrigin',\n  value: function setOrigin(r, h) {\n    this.origin = new Vector2D(r, h);\n\n    return this;\n  }\n\n/**\n * * Set the dimensions of the cone.\n * *\n * @param  {Number} r1 The radius of the first circle of the cone.\n * @param  {Number} r2 The radius of the last circle of the cone.\n * @param  {Number} h  The height of the cone.\n * @return {Cone}    The cone for method chaining.\n */\n\n  }, {\n  key:'setDimensions',\n  value: ", "\nh.write_one = function(r, h) {\n    var hm = h * Math.tan(r / 2) / Math.sin(r / 2),\n        ho = hm * Math.sin(r / 2),\n        rho = r * Math.sin(r / 2),\n        phi = Math.atan(h / r);\n    this.paint.drawOval(\n        (ho - rho) * Math.cos(phi) - hm * Math.sin(phi),\n        (ho - rho) * Math.sin(phi) + hm * Math.cos(phi),\n        rho * 2, rho * 2,\n        this.fill_color,\n        this.stroke_color\n    );\n};\n\n/**\n * * Write a function to find the volume of a cylinder.\n */\nh.write_cylinder = function(r, h) {\n    var hm = h / Math.tan(r / 2),\n        ho = hm * Math.sin(r / 2),\n        rho = r * Math.sin(r / 2),\n        phi = Math.atan(h / r);\n    this.paint.drawOval(\n        (ho - rho) * Math.cos(phi) - hm * Math.sin(phi),\n        (ho - rho) * Math.sin(phi) + hm * Math.cos(phi),\n        rho * 2, rho * 2,\n        this.fill_color,\n        this.stroke_color\n    );\n};\n\n/**\n * * Write a function to find the volume of a cone.\n */\nh.write_cone = "]}
{"task_id": "MBJSP/313", "prompt": "function posNos(list1) {\n/**\n * * Write a JavaScript function to print positive numbers in a list.\n */", "entry_point": "posNos", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, -2, 1, 2];\nvar x0 = posNos(arg00);\nvar v0 = [1, 2];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 4, -5];\nvar x1 = posNos(arg10);\nvar v1 = [3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-2, -3, 1];\nvar x2 = posNos(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to print positive numbers in a list.", "language": "javascript", "canonical_solution": "  var newList = [];\n  var temp;\n  var count;\n\n  if(list1.length === 1) {\n    return list1[0];\n  }\n\n  for(var i = 0; i < list1.length; i++) {\n    if(list1[i] > 0) {\n      temp = list1[i];\n      newList.push(temp);\n    }\n  }\n  if(newList.length === 1) {\n    return newList[0];\n  } else {\n    return newList;\n  }\n}", "completion": ["\n}\n//End JavaScript file\n<|endoftext|>", "\n\nvar i = 0;\n\n", "\n$('#positive-numbers-list').find('.positive-numbers-number').each(", "\nif (it.length) {\n    it.forEach(", "\n} else {\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/314", "prompt": "function maxSumRectangularGrid(grid, n) {\n/**\n * * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n */", "entry_point": "maxSumRectangularGrid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 4, 5], [2, 0, 0]];\nvar arg01 = 3;\nvar x0 = maxSumRectangularGrid(arg00, arg01);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]];\nvar arg11 = 5;\nvar x1 = maxSumRectangularGrid(arg10, arg11);\nvar v1 = 24;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]];\nvar arg21 = 5;\nvar x2 = maxSumRectangularGrid(arg20, arg21);\nvar v2 = 81;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "language": "javascript", "canonical_solution": "\tlet incl = Math.max(grid[0][0], grid[1][0])\n\tlet excl = 0\n\tfor (let i = 1; i < n; i++) {\n\t\texcl_new = Math.max(excl, incl)\n\t\tincl = excl + Math.max(grid[0][i], grid[1][i])\n\t\texcl = excl_new\n\t}\n\treturn Math.max(excl, incl)\n}", "completion": ["\n\n\n/**\n * * Find the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n * *\n * * @param {Function} grid - A rectangular grid of dimension 2 x n, where each entry is a number.\n * * @returns {Number} - The maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n */\n\n\n/**\n * * Find the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n * *\n * * @param {Array} grid - A rectangular grid of dimension 2 x n, where each entry is a number.\n * * @returns {Number} - The maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n */\n<|endoftext|>", "\n\n/**\n * * Given a rectangular grid of dimension 2 x n, find out the maximum sum such that no two chosen numbers are adjacent.\n */\n\n/**\n * @param {number[]} arr - an array to be sorted\n * @param {number} key - the number we are looking for\n * @param {boolean} isIncreasing - true if the array is sorted in increasing order\n * @returns {number}\n */\n", "\nvar maxSum = function maxSum(grid) {\n    // Create a variable to store the largest sum found so far.\n    var maxSum = 0;\n    // Create a variable to store the number of indexes we have traversed.\n    var indexes = 0;\n    // Create a helper function that will traverse through the grid, by sliding window.\n    ", "\n", "\n"]}
{"task_id": "MBJSP/315", "prompt": "function findMaxLenEven(str) {\n/**\n * * Write a JavaScript function to find the first maximum length of even word.\n */", "entry_point": "findMaxLenEven", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python language\";\nvar x0 = findMaxLenEven(arg00);\nvar v0 = \"language\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"maximum even length\";\nvar x1 = findMaxLenEven(arg10);\nvar v1 = \"length\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"eve\";\nvar x2 = findMaxLenEven(arg20);\nvar v2 = \"-1\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the first maximum length of even word.", "language": "javascript", "canonical_solution": "    let arr = str.split(\" \");\n    let max = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length % 2 == 0 && arr[i].length > max) {\n            max = arr[i].length;\n        }\n    }\n    return max == -1 ? \"-1\" : arr[arr.length - 1].substring(0, max);\n}", "completion": ["\n", "\n// var toFind = \"The quick brown fox jumps over the lazy dog\";\n// var toFind = \"The quick brown fox jumps over the lazy dog\";\n// var toFind = \"The quick brown fox jumps over the lazy dog\";\nvar toFind = \"The quick brown fox jumps over the lazy dog\";\nvar firstL = findFirstL(toFind);\nconsole.log(firstL);\n// function findFirstL(toFind) {\n//   var maxLength = 0;\n//   var even = 0;\n//   var index = 0;\n//   while (index < toFind.length) {\n//     var char = toFind[index];\n//     var isEven = isEven(char);\n//     if (isEven) {\n//       even++;\n//     } else {\n//       even = 0;\n//     }\n//     index++;\n//     if (even == 2) {\n//       var l = toFind.length - even;\n//       var newLength = l + even;\n//       if (newLength > maxLength) {\n//         maxLength = newLength;\n//       }\n//     }\n//   }\n//   return maxLength;\n// }\n// console.log(findFirstL(toFind));\n\n// var toFind = \"The quick brown fox jumps over the lazy dog\";\n// var firstL = findFirstL(toFind);\n// console.log(firstL);\n// // ", "\n},\n],\n5: [\n/**\n * 5. Write a JavaScript function to find the first maximum length of odd word.\n */\n],\n6: [\n/**\n * 6. Write a JavaScript function to find the first maximum length of longest word.\n */\n],\n7: [\n/**\n * 7. Write a JavaScript function to find the first maximum length of all word.\n */\n],\n8: [\n/**\n * 8. Write a JavaScript function to find the first maximum length of all number.\n */\n],\n9: [\n/**\n * 9. Write a JavaScript ", "\n", "\nstr = str.replace(/\\w+/g, function(word) {\n  return word.length % 2? word : word +'';\n});\n\n/**\n * * Validate that the given string is an even word.\n */\nexports.validateEven = function(str) {\n  return /^\\W*(even|ev(or|ed))\\W*/.test(str);\n};\n\n/**\n * * Validate that the given string is an odd word.\n */\nexports.validateOdd = function(str) {\n  return /^\\W*(odd|odd|od(or|ed))\\W*/.test(str);\n};\n\n/**\n * * Validate that the given string is a valid date.\n */\nexports.validateDate = function(str) {\n  return /^\\W*(\\d{2}|\\d{4})-(\\d{2}|\\d{4})\\W*/.test(str);\n};\n\n/**\n * * Validate that the given string is an ipv4 address.\n */\nexports.validateIpv4 = function(str) {\n  return /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(str);\n};\n\n/**\n * * Validate that the given string is an email.\n */\nexports.validateEmail = "]}
{"task_id": "MBJSP/316", "prompt": "function findLastOccurrence(a, x) {\n/**\n * * Write a function to find the index of the last occurrence of a given number in a sorted array.\n */", "entry_point": "findLastOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9];\nvar arg01 = 5;\nvar x0 = findLastOccurrence(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 5, 8, 6, 6, 8, 9, 9, 9];\nvar arg11 = 9;\nvar x1 = findLastOccurrence(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 2, 1, 5, 6, 6, 6, 9, 9, 9];\nvar arg21 = 6;\nvar x2 = findLastOccurrence(arg20, arg21);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "language": "javascript", "canonical_solution": "  let left = 0;\n  let right = a.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (a[mid] === x) {\n      if (mid === a.length - 1 || a[mid + 1] !== x) {\n        return mid;\n      }\n      left = mid + 1;\n    } else if (a[mid] < x) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n  return -1;\n}", "completion": ["\n", "\n\n/**\n * * Write a function to find the last index of a given number in a sorted array.\n */\n\n/**\n * * Write a function to count the number of occurrences of a given number in a sorted array.\n */\n\n/**\n * * Write a function to get the maximum number in a given array.\n */\n\n/**\n * * Write a function to get the minimum number in a given array.\n */\n\n/**\n * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n */\n\n/**\n * * Write a function to find the first index of a given number in a sorted array.\n */\n\n/**\n * * Write a function to get the sum of all numbers in an array.\n */\n\n/**\n * * Write a function to get the average of all numbers in an array.\n */\n\n/**\n * * Write a function to find the index of the last occurrence of a given number in an unsorted array.\n */\n\n/**\n * * Write a function to find the last index of a given number in an unsorted array.\n */\n\n/**\n * * Write a function to get the sum of all numbers in an array.\n */\n\n/**\n * * Write a function to get the average of all numbers in an array.\n */\n\n/**\n * * Write a function to find the index of the first occurrence of a given number in an unsorted array.\n */\n\n/**\n * * Write a function to find the first index of a given number in an unsorted array.\n */\n\n/**\n * * Write a function to get the sum of all numbers in an array.\n */\n\n/**\n * * Write a function to get the average of all numbers in an array.\n */\n\n/**\n * * Write a ", "\n\n/**\n * * Given two strings, find the length of the longest palindrome that can be built with the two input strings.\n *\n *     For example:\n *     ```\n *     buildPalindrome(\"abccccdd\") == 10\n *     buildPalindrome(\"a\") == 1\n *     buildPalindrome(\"ab\") == 2\n *     buildPalindrome(\"cbbd\") == 3\n *     buildPalindrome(\"bb\") == 1\n *     buildPalindrome(\"c\") == 1\n *     buildPalindrome(\"\") == 0\n *     ```\n *\n *     This problem was asked by Facebook.\n *\n *     Given two strings, find the length of the longest palindrome that can be built with the two input strings.\n *\n *     For example:\n *     ```\n *     buildPalindrome(\"abccccdd\") == 10\n *     buildPalindrome(\"a\") == 1\n *     buildPalindrome(\"ab\") == 2\n *     buildPalindrome(\"cbbd\") == 3\n *     buildPalindrome(\"bb\") == 1\n *     buildPalindrome(\"c\") == 1\n *     buildPalindrome(\"\") == 0\n *     ```\n *\n *     This problem was asked by Google.\n *\n *     Given two strings, find the length of the longest palindrome that can be built with the two input strings.\n *\n *     For example:\n *     ```\n *     buildPalindrome(\"abccccdd\") == 10\n *     buildPalindrome(\"a\") == 1\n *     buildPalindrome(\"ab\") == 2\n *     buildPalindrome(\"cbbd\") == 3\n *     buildPalindrome(\"bb\") == 1\n", "\nlet i = 0;\nlet last_occurrence = () => {};\nlast_occurrence = x => i;\nlet last_index = x => i;\n}\n\n>>> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n>>> i\n0\n>>> last_occurrence(4)\n1\n>>> last_index(4)\n1\n>>> last_occurrence(1)\n2\n>>> last_index(1)\n2\n>>> last_occurrence(0)\n4\n>>> last_index(0)\n4\n>>> last_occurrence(3)\n3\n>>> last_index(3)\n3\n>>> last_occurrence(11)\nNone\n>>> last_index(11)\nNone\n>>> last_occurrence(1)\n2\n>>> last_index(1)\n2\n>>> last_occurrence(4)\n3\n>>> last_index(4)\n3\n>>> last_occurrence(3)\n2\n>>> last_index(3)\n2\n>>> last_occurrence(11)\nNone\n>>> last_index(11)\nNone\n>>> last_occurrence(1)\n2\n>>> last_index(1)\n2\n>>> last_occurrence(4)\n3\n>>> last_index(4)\n3\n>>> last_occurrence(3)\n2\n>>> last_index(3)\n2\n>>> last_occurrence(11)\nNone\n>>> last_index(11)\nNone\n>>> last_occurrence(1)\n2\n>>> last_index(1)\n2\n>>> last_occurrence(4)\n3\n>>> last_index(4)\n3\n>>> last_occurrence(3)\n2\n>>> last_", "\n\nreturn function(a, x) {\n    if (a.length === 0 || a[a.length - 1]!== x) {\n        return -1;\n    }\n\n    var i = a.length - 1;\n\n    while (i > 0) {\n        if (a[i - 1] === x) {\n            return i - 1;\n        }\n        i--;\n    }\n    return -1;\n};\n});\n\n/**\n * * Replace a string with a new string.\n * */\n("]}
{"task_id": "MBJSP/317", "prompt": "function modifiedEncode(alist) {\n/**\n * * Write a function to reflect the modified run-length encoding from a list.\n */", "entry_point": "modifiedEncode", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 2, 3, 4, 4, 5, 1];\nvar x0 = modifiedEncode(arg00);\nvar v0 = [[2, 1], 2, 3, [2, 4], 5, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"automatically\";\nvar x1 = modifiedEncode(arg10);\nvar v1 = [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar x2 = modifiedEncode(arg20);\nvar v2 = [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to reflect the modified run-length encoding from a list.", "language": "javascript", "canonical_solution": "    if (alist.length === 0) {\n        return [];\n    }\n\n    let newArr = [];\n    let prev = alist[0];\n    let count = 1;\n    for (let i = 1; i < alist.length; i++) {\n        if (alist[i] === prev) {\n            count++;\n        } else {\n            if (count > 1) {\n                newArr.push([count, prev]);\n            } else {\n                newArr.push(prev);\n            }\n            count = 1;\n            prev = alist[i];\n        }\n    }\n\n    if (count > 1) {\n        newArr.push([count, prev]);\n    } else {\n        newArr.push(prev);\n    }\n\n    return newArr;\n}", "completion": ["\n}\n\n// ----\n\n", "\n\nimport { is } from './util';\n\n/**\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a function to reflect the modified run-length encoding from a list.\n * * Write a ", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef code(alist):\n\treturn \"\"\n\nif __name__ == '__main__':\n\t# \talist = [int(t) for t in input().split()]\n\talist = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 237, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 8", "\n\nimport { red } from 'tui-code-snippet';\nimport { isUndefined } from 'util';\n\n"]}
{"task_id": "MBJSP/318", "prompt": "function maxVolume(s) {\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */", "entry_point": "maxVolume", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar x0 = maxVolume(arg00);\nvar v0 = 18;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = maxVolume(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = maxVolume(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.", "language": "javascript", "canonical_solution": "    let max = 0;\n    for (let i = 1; i <= s; i++) {\n        for (let j = 1; j <= s; j++) {\n            for (let k = 1; k <= s; k++) {\n                if ((i + j + k) === s) {\n                    let volume = i * j * k;\n                    if (volume > max) {\n                        max = volume;\n                    }\n                }\n            }\n        }\n    }\n    return max;\n}", "completion": ["\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript function to find the maximum volume of a cuboid with given sum of sides.\n */\n\n/**\n * * Write a JavaScript ", "\n", "\n", "\n\n"]}
{"task_id": "MBJSP/319", "prompt": "function findLongWord(text) {\n/**\n * * Write a function to find all five characters long word in the given string by using regex.\n */", "entry_point": "findLongWord", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Please move back to strem\";\nvar x0 = findLongWord(arg00);\nvar v0 = [\"strem\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"4K Ultra HD streaming player\";\nvar x1 = findLongWord(arg10);\nvar v1 = [\"Ultra\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Streaming Media Player\";\nvar x2 = findLongWord(arg20);\nvar v2 = [\"Media\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find all five characters long word in the given string by using regex.", "language": "javascript", "canonical_solution": "  return text.match(/\\b\\w{5}\\b/g);\n}", "completion": ["\n/**\n * Given a string, find the longest word which contains five characters.\n */\n/**\n * Given a string, find the longest word which contains three characters.\n */\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a function to find all three characters long word in the given string by using regex.\n */\n/**\n * Write a ", "\nvar text = 'First one can find all five characters long word';\nvar regex = /[\\u4E00-\\u9FA5]{5}/;\nvar matches = [];\n\nfor (var i = 0; i < text.length; i++) {\n  var match = regex.exec(text);\n  if (match!== null) {\n    matches.push(match[0]);\n  }\n}\n\nconsole.log(matches);\n\n```\n\n## Regex Utility Method\n\n### 1. Write a function to find all five characters long word in the given string by using regex.\n\n```js\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n *\n * @param {string} text\n * @returns {Array}\n */\n", "\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a function to find all five characters long word in the given string by using regex.\n */\n\n/**\n * Write a ", "\n\n/**\n * * The class of the function that returns the sum of the given value.\n */\n\n/**\n * * The class of the function that returns the product of the given value.\n */\n\n/**\n * * The class of the function that returns the word that is closest to the given value.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the function that returns the smallest number that is not less than the given value.\n */\n\n/**\n * * The class of the function that returns the largest number that is not greater than the given value.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the function that returns the number of times the given value appears in the given string.\n */\n\n/**\n * * The class of the ", "\nvar func = function(string, regex) {\n    return regex.exec(string)!= null;\n}\n/**\n * * Find the longest word in the given string using regex.\n */\nvar longestWord = function(string, regex) {\n    // Return the longest word in the given string using regex.\n    return regex.exec(string).length > 0;\n}\n/**\n * * A function that splits the given string into a list.\n */\nvar list = function(string) {\n    // Return a list of the given string.\n    return string.split('');\n}\n/**\n * * Find the number of times a given character occurs in the given string.\n */\nvar count = function(string, char) {\n    // Return the number of times a given character occurs in the given string.\n    return string.split('').filter("]}
{"task_id": "MBJSP/320", "prompt": "function sumDifference(n) {\n/**\n * * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n */", "entry_point": "sumDifference", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = sumDifference(arg00);\nvar v0 = 5434;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = sumDifference(arg10);\nvar v1 = 41230;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 54;\nvar x2 = sumDifference(arg20);\nvar v2 = 2151270;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "language": "javascript", "canonical_solution": "  let sum = 0;\n  let sumSquare = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    sumSquare += i * i;\n  }\n  return Math.pow(sum, 2) - sumSquare;\n}", "completion": ["\nprint(\n`The difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers is equal to: `)\nprint(\n`    ` + `squared sum of first n natural numbers = ` + `sum of squared first n natural numbers ^ 2 = ` + `((first n natural numbers) ^ 2)`)\n\n/**\n * * Write a function to find the greatest common divisor (gcd) of two integers.\n */\nprint(\n`The greatest common divisor (gcd) of two integers is equal to: `)\nprint(\n`    ` + `gcd(a,b) = ` + `max(gcd(b,a%b),gcd(a,b%a))`)\n\n/**\n * * Write a function to find the least common multiple (lcm) of two integers.\n */\nprint(\n`The least common multiple (lcm) of two integers is equal to: `)\nprint(\n`    ` + `lcm(a,b) = ` + `min(lcm(b,a),lcm(a,b))`)\n\n/**\n * * Write a function to find the value of the nth Fibonacci number.\n */\nprint(\n`The value of the nth Fibonacci number is equal to: `)\nprint(\n`    ` + `fibonacci(n) = ` + `fibonacci(n-1) + fibonacci(n-2)`)\n\n/**\n * * Write a ", "\n            }\n        }\n    }\n}\n```\n\n#### `ops.i`\n\n* Write the loop body.\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n#### `ops.ii`\n\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n#### `ops.iii`\n\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n#### `ops.iv`\n\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n#### `ops.v`\n\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n* Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n* Write a ", "\n", "\n", "\n\n/**\n * * Write a function to calculate the difference between the product of first n natural numbers and the product of squared first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the difference between the second and third natural numbers and the difference between the fourth and fifth natural numbers.\n */\n\n/**\n * * Write a function to calculate the difference between the sum of the squares of the first n natural numbers and the sum of the squares of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the difference between the product of the first n natural numbers and the product of the second n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers and the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a function to calculate the sum of the first n natural numbers.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/321", "prompt": "function findDemlo(s) {\n/**\n * * Write a function to find the demlo number for the given number.\n */", "entry_point": "findDemlo", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"111111\";\nvar x0 = findDemlo(arg00);\nvar v0 = \"12345654321\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"1111\";\nvar x1 = findDemlo(arg10);\nvar v1 = \"1234321\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"13333122222\";\nvar x2 = findDemlo(arg20);\nvar v2 = \"123456789101110987654321\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the demlo number for the given number.", "language": "javascript", "canonical_solution": "  let demlo = \"\";\n  for (let i = 0; i < s.length; i++) {\n    demlo += s[i] + s[i];\n  }\n  return demlo;\n}", "completion": ["\n}\n\n", "\n    return \"s\";\n}\n", "\n    return ", "\n\nlet _s = s;\nlet _len = _s.length;\n\nconst _funcs = [\n\n", "\n"]}
{"task_id": "MBJSP/322", "prompt": "function positionMin(list1) {\n/**\n * * Write a function to find all index positions of the minimum values in a given list.\n */", "entry_point": "positionMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54];\nvar x0 = positionMin(arg00);\nvar v0 = [3, 11];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5];\nvar x1 = positionMin(arg10);\nvar v1 = [0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12];\nvar x2 = positionMin(arg20);\nvar v2 = [1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find all index positions of the minimum values in a given list.", "language": "javascript", "canonical_solution": "  let min = Math.min(...list1);\n  let minIndex = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === min) {\n      minIndex.push(i);\n    }\n  }\n  return minIndex;\n}", "completion": ["\n\nvar minIndex = [];\nfor (var i = 0; i < list1.length; i++) {\nvar minValue = list1[i];\nvar minIndexValue = i;\nfor (var j = i + 1; j < list1.length; j++) {\nif (minValue > list1[j]) {\nminValue = list1[j];\nminIndexValue = j;\n}\n}\nminIndex.push(minIndexValue);\n}\nvar list2 = [];\nfor (var k = 0; k < minIndex.length; k++) {\nlist2.push(minIndex[k]);\n}\nreturn list2;\n}\n/**\n * * Write a function to find all index positions of the minimum values in a given list.\n */\n\n", "\n\n/**\n * * Write a function to find the kth smallest element in a given list.\n */\n\n/**\n * * Write a function to merge two sorted linked lists to create a single sorted list.\n */\n\n/**\n * * Write a function to find if a given number x is present in a given sorted linked list.\n */\n\n/**\n * * Write a function to find the index of the kth smallest element in a given array.\n */\n\n/**\n * * Write a function to return the count of the number of distinct elements present in the given array.\n */\n\n/**\n * * Write a function to find the minimum element in a given sorted array.\n */\n\n/**\n * * Write a function to find the maximum element in a given sorted array.\n */\n\n/**\n * * Write a function to find the size of a given array.\n */\n\n/**\n * * Write a function to find the count of the number of elements in the given array that are less than a given number x.\n */\n\n/**\n * * Write a function to find the count of the number of elements in the given array that are less than or equal to a given number x.\n */\n\n/**\n * * Write a function to find the count of the number of elements in the given array that are greater than a given number x.\n */\n\n/**\n * * Write a function to find the count of the number of elements in the given array that are greater than or equal to a given number x.\n */\n\n/**\n * * Write a function to find the count of the number of elements in the given array that are equal to a given number x.\n */\n\n/**\n * * Write a function to return the count of the number of distinct elements present in the given array.\n */\n\n/**\n * * Write a ", "\n/**\n * * Create a function to find all index positions of the minimum values in a given list.\n * * Returns an object containing the array and the minimum value.\n * * @param {number[]} nums - The array to search for the minimum value.\n * @returns {object} - An object containing the array and the minimum value.\n */\n/**\n * * Create a ", "\n```\n\n### Question Solution\n\n#### Code\n\n```javascript\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar minNumber = function(nums) {\n    return nums.sort(", "\n"]}
{"task_id": "MBJSP/323", "prompt": "function reArrange(arr, n) {\n/**\n * * Write a function to re-arrange the given array in alternating positive and negative items.\n */", "entry_point": "reArrange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8];\nvar arg01 = 10;\nvar x0 = reArrange(arg00, arg01);\nvar v0 = [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, -4, -1, 4];\nvar arg11 = 6;\nvar x1 = reArrange(arg10, arg11);\nvar v1 = [-4, 1, -1, 2, 3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [4, 7, 9, 77, -4, 5, -3, -9];\nvar arg21 = 8;\nvar x2 = reArrange(arg20, arg21);\nvar v2 = [-4, 4, -3, 7, -9, 9, 77, 5];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to re-arrange the given array in alternating positive and negative items.", "language": "javascript", "canonical_solution": "  let result = [];\n  let positive = 0;\n  let negative = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negative++;\n    } else {\n      positive++;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (positive > negative) {\n      result.push(arr[i]);\n    } else {\n      result.push(arr[n - 1 - i]);\n    }\n  }\n\n  return result;\n}", "completion": ["\n\n    var arr = arr.slice(0);\n    var i = 0;\n    var len = arr.length;\n\n    while (i < len) {\n        if ((i & 1) === 0) {\n            arr[i] += arr[len - 1];\n            arr[len - 1] = arr[len - 1] - arr[i];\n            arr[i] = arr[i] - arr[len - 1];\n        } else {\n            arr[i] -= arr[len - 1];\n            arr[len - 1] = arr[len - 1] + arr[i];\n            arr[i] = arr[i] + arr[len - 1];\n        }\n\n        i += 2;\n    }\n\n/**\n * * Write a function to re-arrange the given array in alternating positive and negative items.\n */\n\n    return arr.slice(0);\n}\n\n\n/**\n * * Write a function to take the average of the given array of numbers.\n */\n\n\n", "\nvar write = function write() {\n    var str = arr.join(' ');\n    var start = neg? -1 : 0;\n    var end = neg? -2 : arr.length - 1;\n    while (start <= end) {\n        str = neg? str.replace(/ -/g,'-') : str.replace(/ +/g,'+');\n        start++;\n        end--;\n    }\n    arr.splice(0, arr.length + str.length).join(' ');\n};\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(", "\n\n/**\n * * Make an array of alternating positive and negative items.\n * * @param  {Array} arr\n * * @param  {Number} n\n * * @return {Array}\n */\n\n", "\n    write(f, arr, n);\n  }\n  // Restore the original `arr`\n  arr = original;\n  // Return the concatenated string\n  return concatenate(arr, n);\n}\n\n/**\n * * Represents a single character.\n * * A `Character` instance is a sequence of characters that is equivalent to a string.\n */\nclass Character {\n  /**\n   * * Creates a new character.\n   * * @param {String} str - The character's string value.\n   */\n  constructor(str) {\n    // Save the character's string value\n    this.str = str;\n  }\n}\n\n/**\n * * Represents a character range.\n * * A `Range` instance represents a range of characters that is equivalent to a string.\n * * @class\n */\nclass Range {\n  /**\n   * * Creates a new character range.\n   * * @param {String} str - The range's string value.\n   * * @param {Integer} start - The range's starting character index.\n   * * @param {Integer} end - The range's ending character index.\n   */\n  constructor(str, start, end) {\n    // Save the range's string value\n    this.str = str;\n    // Save the range's starting character index\n    this.start = start;\n    // Save the range's ending character index\n    this.end = end;\n  }\n}\n\n/**\n * * Represents a single word.\n * * A `Word` instance is a sequence of words that is equivalent to a string.\n */\nclass Word {\n  /**\n   * * Creates a new word.\n   * * @param {String} str - The word's string", "\narr.reverse();\n    }\n}</code></pre>\n    <p>The <code>reverse()</code> function is a wrapper around the <code>Array.prototype.reverse()</code> method. It simply calls the <code>Array.prototype.reverse()</code> method, passing the <code>arr</code> parameter to it. This method does not mutate the input array.</p>\n\n    <h2 id=\"l-sort\">Sort</h2>\n\n    <p>The <code>sort()</code> function is a wrapper around the <code>Array.prototype.sort()</code> method. It simply calls the <code>Array.prototype.sort()</code> method, passing the <code>arr</code> parameter to it. This method does not mutate the input array.</p>\n\n    <h3>Sorting using the built-in <code>sort()</code> method</h3>\n\n    <p>To use the <code>Array.prototype.sort()</code> method, you can use the built-in <code>sort()</code> method. You can pass an <code>Array</code> or an <code>ArrayLike</code> object to the <code>Array.prototype.sort()</code> method, and it will return the sorted array. You can also pass a custom comparison function to the <code>Array.prototype.sort()</code> method. The comparison "]}
{"task_id": "MBJSP/324", "prompt": "function sumOfAlternates(testtuple) {\n/**\n * * Write a function to extract the sum of alternate chains of tuples.\n */", "entry_point": "sumOfAlternates", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [5, 6, 3, 6, 10, 34];\nvar x0 = sumOfAlternates(arg00);\nvar v0 = [46, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = sumOfAlternates(arg10);\nvar v1 = [6, 9];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [6, 7, 8, 9, 4, 5];\nvar x2 = sumOfAlternates(arg20);\nvar v2 = [21, 18];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract the sum of alternate chains of tuples.", "language": "javascript", "canonical_solution": "    return [testTuple.filter((item, index) => {\n        return (index + 1) % 2 === 0;\n    }).reduce((prev, next) => {\n        return prev + next;\n    }), testTuple.filter((item, index) => {\n        return (index + 1) % 2 === 1;\n    }).reduce((prev, next) => {\n        return prev + next;\n    })];\n}", "completion": ["\n$this.extract = function(testtuple) {\n    // (alternate.1.1, alternate.1.2, alternate.2.1, alternate.2.2)\n    var sum = 0;\n    for (var i = 0; i < testtuple.length; i++) {\n        sum += testtuple[i];\n    }\n    return sum;\n};\n/**\n * * Write a function to test the performance of the above function.\n */\n$this.test = function(testtuple) {\n    var sum = $this.extract(testtuple);\n    var percentage = (sum / $this.total) * 100;\n    // if the total is less than 50, the percentage is negative\n    // we can calculate if the percentage is below 50\n    if ($this.total < 50) {\n        if (percentage < 50) {\n            return 'A negative percentage of'+ percentage + '%';\n        }\n    }\n    return 'A'+ percentage + '%';\n};\n/**\n * * Write a function to compare the performance of the above function.\n */\n$this.compare = ", "\n", "\n\nif ((tuple.length < 2) || (tuple.length > 3) || (tuple.length % 2!= 0)) {\n  throw new Error(`Test tuple of length ${tuple.length} not supported (must be an even length of tuples).`)\n}\n\n// Run alternate chain summation.\nlet sum = 0\nfor (let i = 0; i < tuple.length; i++) {\n  sum += sumAlternateChains(tuple[i])\n}\n\n// Print result.\nconsole.log(`Test tuples: ${testtuple}`)\nconsole.log(`Sum of alternate chains: ${sum}`)\n```\n\n### <a name=\"cognition-framework-test\"></a>Test\n\n```java\n/**\n * * Write a ", "\n", "\n  var sum = 0;\n  sum += distinct_alternates_of_tuples.get(testtuple);\n  return sum;\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/325", "prompt": "function getMinSquares(n) {\n/**\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */", "entry_point": "getMinSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar x0 = getMinSquares(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = getMinSquares(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = getMinSquares(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.", "language": "javascript", "canonical_solution": "  const dp = [];\n  dp[0] = 0;\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Infinity;\n  }\n  dp[1] = 1;\n  for (let i = 2; i <= n; i++) {\n    for (let j = 1; j * j <= i; j++) {\n      dp[i] = Math.min(dp[i], dp[i - j * j] + 1);\n    }\n  }\n  return dp[n];\n}", "completion": ["\n\n/**\n * *\n * * Write a JavaScript function to find the maximum number of squares whose sum is equal to a given number.\n */\n\n/**\n * *\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the maximum number of squares whose sum is equal to a given number.\n */\n\n/**\n * *\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the maximum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the maximum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the maximum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the maximum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript function to find the maximum number of squares whose sum is equal to a given number.\n */\n\n/**\n * * Write a JavaScript ", "\n", "\n\nvar _getClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar _resizeWindow = function () {\n  ", "\n    ", "\n\n/**\n * @param n\n * @returns {string}\n */\nvar sum = "]}
{"task_id": "MBJSP/326", "prompt": "function mostOccurrences(testlist) {\n/**\n * * Write a function to get the word with most number of occurrences in the given strings list.\n */", "entry_point": "mostOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"];\nvar x0 = mostOccurrences(arg00);\nvar v0 = \"UTS\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Its been a great year\", \"this year is so worse\", \"this year is okay\"];\nvar x1 = mostOccurrences(arg10);\nvar v1 = \"year\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"];\nvar x2 = mostOccurrences(arg20);\nvar v2 = \"can\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to get the word with most number of occurrences in the given strings list.", "language": "javascript", "canonical_solution": "    let map = new Map();\n    for (let i = 0; i < testList.length; i++) {\n        let word = testList[i].split(' ');\n        for (let j = 0; j < word.length; j++) {\n            let key = word[j];\n            if (map.has(key)) {\n                map.set(key, map.get(key) + 1);\n            } else {\n                map.set(key, 1);\n            }\n        }\n    }\n    let max = 0;\n    let maxKey = '';\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            maxKey = key;\n        }\n    }\n    return maxKey;\n}", "completion": ["\n\n// Word with most number of occurrences\n", "\n", "\n", "\n// $FlowExpectedError\nget_word_count(['foo', 'bar', 'baz']);\n\n/**\n * * Write a function to get the word with the highest number of occurrences in the given strings list.\n */\n// $FlowExpectedError\nget_max_word_count(['foo', 'bar', 'baz']);\n\n/**\n * * Write a function to get the words of the given string list, that are the most frequently occurring in the given string list.\n */\n// $FlowExpectedError\nget_max_words(['foo', 'bar', 'baz']);\n\n/**\n * * Write a function to get the words of the given string list, that are the least frequently occurring in the given string list.\n */\n// $FlowExpectedError\nget_min_words(['foo', 'bar', 'baz']);\n\n/**\n * * Write a function to get the words of the given string list, that are the most frequently occurring in the given string list, together with their frequency in the given string list.\n */\n// $FlowExpectedError\nget_word_count_by_frequency(['foo', 'bar', 'baz']);\n\n/**\n * * Write a function to get the words of the given string list, that are the least frequently occurring in the given string list, together with their frequency in the given string list.\n */\n// $FlowExpectedError\nget_min_words_by_frequency(['foo', 'bar', 'baz']);\n\n/**\n * * Write a function to get the longest string in the given string list.\n */\n// $FlowExpectedError\nget_longest_string(['foo', 'bar', 'baz']);\n\n/**\n * * Write a ", "\n    let word = get_word(string_or_list);\n    if (word === undefined) {\n        // we can't find the word, so just return an empty string\n        return '';\n    }\n    let word_counts = get_word_counts(string_or_list);\n    return count_most_occurrences(word, word_counts, 0)\n}\n<|endoftext|>"]}
{"task_id": "MBJSP/327", "prompt": "function checkIsosceles(x, y, z) {\n/**\n * * Write a function to print check if the triangle is isosceles or not.\n */", "entry_point": "checkIsosceles", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 6;\nvar arg01 = 8;\nvar arg02 = 12;\nvar x0 = checkIsosceles(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar arg11 = 6;\nvar arg12 = 12;\nvar x1 = checkIsosceles(arg10, arg11, arg12);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 16;\nvar arg22 = 20;\nvar x2 = checkIsosceles(arg20, arg21, arg22);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to print check if the triangle is isosceles or not.", "language": "javascript", "canonical_solution": "  return (x === y || x === z || y === z) ? true : false;\n}", "completion": ["\n}\n<|endoftext|>", "\n", "\n", "\n", "\nprint(`Are the triangle isosceles: `)\nif (\n\tx == y\n\t|| x == z\n\t|| y == z\n) {\n\tprint(`Yes.`)\n} else {\n\tprint(`No.`)\n}\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/328", "prompt": "function rotateLeft(list1, m, n) {\n/**\n * * Write a function to rotate a given list by specified number of items to the left direction.\n */", "entry_point": "rotateLeft", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg01 = 3;\nvar arg02 = 4;\nvar x0 = rotateLeft(arg00, arg01, arg02);\nvar v0 = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = rotateLeft(arg10, arg11, arg12);\nvar v1 = [3, 4, 5, 6, 7, 8, 9, 10, 1, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arg21 = 5;\nvar arg22 = 2;\nvar x2 = rotateLeft(arg20, arg21, arg22);\nvar v2 = [6, 7, 8, 9, 10, 1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to rotate a given list by specified number of items to the left direction.", "language": "javascript", "canonical_solution": "  // Write your code here.\n  return list1.slice(m).concat(list1.slice(0, n));\n}", "completion": ["\n", "\n    print({\n        item: {\n            x: 1,\n            y: 2,\n            z: 3\n        }\n    })\n}\n```\n\n</details>\n\n<details>\n<summary>You can run code</summary>\n\n```\n// Function to rotate\nvar rotate = ", "\n\n/**\n * Given a list and an integer, rotate the list to the right by the given amount.\n *\n *     rotate([1, 2, 3, 4, 5], 2)\n *     => [3, 4, 5, 1, 2]\n *\n *     rotate([1, 2, 3, 4, 5], 10)\n *     => [1, 2, 3, 4, 5]\n */\nvar rotate = function rotate(arr, n) {\n  if (n === 0) return arr;\n  var len = arr.length;\n  n = n % len;\n  return arr.concat(arr.slice(0, len - n))\n};\n/**\n * ```js\n * var rotate = require('rotate');\n * ```\n */\n\nvar rotate_1 = rotate;\n/**\n * Given a list and an integer, rotate the list to the right by the given amount.\n *\n *     rotate([1, 2, 3, 4, 5], 2)\n *     => [3, 4, 5, 1, 2]\n *\n *     rotate([1, 2, 3, 4, 5], 10)\n *     => [1, 2, 3, 4, 5]\n */\n\nvar rotate_2 = ", "\n", "\n\n    "]}
{"task_id": "MBJSP/329", "prompt": "function negCount(list) {\n/**\n * * Write a JavaScript function to count negative numbers in a list.\n */", "entry_point": "negCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, -2, 3, -4, -5];\nvar x0 = negCount(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar x1 = negCount(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, -3, -10, 20];\nvar x2 = negCount(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count negative numbers in a list.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n}", "completion": ["\n", "\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n/**\n * * Write a JavaScript function to count negative numbers in a list.\n */\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = function(msg) {\n//     console.log(msg);\n// };\n\n// var print = ", "\nvar functionName = 'countNegativeNumbers';\n", "\n}\n\n/**\n * * Write a JavaScript function to count positive numbers in a list.\n */\n}\n\n/**\n * * Write a JavaScript function to count the number of non-zero elements in a list.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript function to return the maximum value in a list of numbers.\n */\n}\n\n/**\n * * Write a JavaScript ", "\n\n  count_negatives(lists, "]}
{"task_id": "MBJSP/330", "prompt": "function findChar(text) {\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */", "entry_point": "findChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"For the four consumer complaints contact manager AKR reddy\";\nvar x0 = findChar(arg00);\nvar v0 = [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"Certain service are subject to change MSR\";\nvar x1 = findChar(arg10);\nvar v1 = [\"are\", \"MSR\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"Third party legal desclaimers\";\nvar x2 = findChar(arg20);\nvar v2 = [\"Third\", \"party\", \"legal\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find all three, four, five characters long words in the given string by using regex.", "language": "javascript", "canonical_solution": "  let regex = /(\\w{3,})|(\\w{4,})|(\\w{5,})/g;\n  let result = [];\n  let match;\n  while ((match = regex.exec(text)) !== null) {\n    if (match[0] && match[0].length === 3) {\n      result.push(match[0]);\n    } else if (match[0] && match[0].length === 4) {\n      result.push(match[0]);\n    } else if (match[0] && match[0].length === 5) {\n      result.push(match[0]);\n    }\n  }\n  return result;\n}", "completion": ["\n", "\n/**\n * @param {number} index\n * @param {string} text\n * @returns {string}\n */\n", "\n", "\n\n\n/**\n * * A regex for finding all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * Read a function from the given file.\n */\n\n\n/**\n * * Find all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * A regex for finding all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * Read a function from the given file.\n */\n\n\n/**\n * * Find all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * A regex for finding all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * Read a function from the given file.\n */\n\n\n/**\n * * Find all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * A regex for finding all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * Read a function from the given file.\n */\n\n\n/**\n * * Find all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * A regex for finding all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * Read a function from the given file.\n */\n\n\n/**\n * * Find all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * A regex for finding all three, four, five characters long words in the given string by using regex.\n */\n\n\n/**\n * * Read a ", "\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/331", "prompt": "function countUnsetBits(n) {\n/**\n * * Write a JavaScript function to count unset bits of a given number.\n */", "entry_point": "countUnsetBits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countUnsetBits(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = countUnsetBits(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = countUnsetBits(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count unset bits of a given number.", "language": "javascript", "canonical_solution": "    var binary = n.toString(2);\n    var count = 0;\n    for (var i = 0; i < binary.length; i++) {\n        if (binary.charAt(i) === '0') {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\nvar word = n | 0;\nvar bits = 0;\nwhile (word!== 0) {\n    word &= word - 1;\n    bits++;\n}\nconsole.log(bits); // 8\n}\n// In the first example above, the value of `word` is `0xfffffffe`, which is equal to `4294967270` (binary)\n```\n\n## `//z` comment\n\n```js\n/*\n * count unset bits of a given number.\n */\n", "\n", "\n    if (n === 0) {\n        return 0;\n    }\n    var res = n & n - 1;\n    if (res === 0) {\n        return 0;\n    }\n    return res + countUnsetBits(n & n - 1);\n}\n```\n\n<br/>\n\n## 04. \u600e\u4e48\u5b58\u50a8\u5b57\u7b26\u4e32\n\n```js\nvar s = \"abc\";\ns += \"def\"; // String concat\n```\n\n<br/>\n\n## 05. \u5b57\u7b26\u4e32\u7684\u589e\u91cf\u81ea\u589e\n\n```js\n// \u6ce8\u610f\u4f7f\u7528\u81ea\u589e\nvar a = \"a\";\nvar b = \"b\";\nvar c = a;\na = b;\nconsole.log(c);\n```\n\n<br/>\n\n## 06. \u5b57\u7b26\u4e32\u7684\u5185\u5b58\u5206\u914d\n\n```js\n// \u5206\u914d3\u4e2a\u5b57\u8282\nvar s = \"abc\";\nconsole.log(s);\nconsole.log(s.length);\nconsole.log(s.charCodeAt(0));\n```\n\n<br/>\n\n## 07. \u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\n\n```js\nvar s1 = \"abc\";\nvar s2 = s1;\ns2 = \"xyz\"; // copy s1\nconsole.log(s1);\nconsole.log(s2);\n```\n\n<br/>\n\n## 08. \u5b57\u7b26\u4e32\u7684\u7ec4\u6210\n\n```js\nvar", "\n  var bits = 0,\n    val;\n  for (var i = 0; i < n.length; ++i) {\n    val = n.charAt(i);\n    if (val == '1') {\n      bits++;\n    }\n  }\n  return bits;\n}\n\n", "\n\n  if (n === 0) {\n    return 0;\n  }\n\n  var a = 0,\n      b = 0;\n\n  while (n > 0) {\n    if (n % 2 === 1) {\n      a += 1;\n    }\n\n    if (n % 3 === 2) {\n      b += 1;\n    }\n\n    n >>= 1;\n  }\n\n  return a + b;\n}\n\n/**\n * * Get unset bits of a given number.\n */\n\n"]}
{"task_id": "MBJSP/332", "prompt": "function charFrequency(str1) {\n/**\n * * Write a function to count character frequency of a given string.\n */", "entry_point": "charFrequency", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = charFrequency(arg00);\nvar v0 = {'\"p\"':1,'\"y\"':1,'\"t\"':1,'\"h\"':1,'\"o\"':1,'\"n\"':1};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = charFrequency(arg10);\nvar v1 = {'\"p\"':1,'\"r\"':2,'\"o\"':1,'\"g\"':1,'\"a\"':1,'\"m\"':1};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = charFrequency(arg20);\nvar v2 = {'\"l\"':1,'\"a\"':2,'\"n\"':1,'\"g\"':2,'\"u\"':1,'\"e\"':1};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count character frequency of a given string.", "language": "javascript", "canonical_solution": "  const charMap = {};\n  for (let char of str1) {\n    charMap[char] = charMap[char] + 1 || 1;\n  }\n  return charMap;\n}", "completion": ["\n", "\nconst frequency = (string: string) => {\n  const charMap = {};\n  const charArr = string.split('');\n  charArr.forEach((char) => {\n    charMap[char] = (charMap[char] || 0) + 1;\n  });\n  return charMap;\n};\n```\n\n<br>\n\n## 39. String to Integer (atoi)\n\n<br>\n\n[Problem](https://leetcode.com/problems/string-to-integer-atoi/)\n\n[Solution](https://github.com/ilang/leetcode/blob/master/solutions/string-to-integer-atoi.js)\n\n```js\n", "\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a function that will return an array containing the frequency of each character within the given string.\n\n// In this example, Frequency is a ", "\n", "\n\nvar str1 = \"hello world\";\n\nvar frequency = Frequency(str1);\nconsole.log(\"frequency of 'hello world': \", frequency);\n//frequency of 'hello world':  <-- value is 0\n//frequency of 'hello world':  <-- value is 1\n//frequency of 'hello world':  <-- value is 2\n//frequency of 'hello world':  <-- value is 3\n//frequency of 'hello world':  <-- value is 4\n//frequency of 'hello world':  <-- value is 5\n//frequency of 'hello world':  <-- value is 6\n//frequency of 'hello world':  <-- value is 7\n//frequency of 'hello world':  <-- value is 8\n//frequency of 'hello world':  <-- value is 9\n//frequency of 'hello world':  <-- value is 10\n//frequency of 'hello world':  <-- value is 11\n//frequency of 'hello world':  <-- value is 12\n//frequency of 'hello world':  <-- value is 13\n//frequency of 'hello world':  <-- value is 14\n//frequency of 'hello world':  <-- value is 15\n//frequency of 'hello world':  <-- value is 16\n//frequency of 'hello world':  <-- value is 17\n//frequency of 'hello world':  <-- value is 18\n//frequency of 'hello world':  <-- value is 19\n//frequency of 'hello world':  <-- value is 20\n//frequency of 'hello world':  <-- value is 21\n//frequency of 'hello world':  <-- value is 22\n//frequency of 'hello world':  <-- value is 23\n//frequency of 'hello world':  <-- value is 24\n//frequency of 'hello world':  <-- value is 25\n\n"]}
{"task_id": "MBJSP/333", "prompt": "function sort(subli) {\n/**\n * * Write a JavaScript function to sort a list according to the second element in sublist.\n */", "entry_point": "sort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"a\", 10], [\"b\", 5], [\"c\", 20], [\"d\", 15]];\nvar x0 = sort(arg00);\nvar v0 = [[\"b\", 5], [\"a\", 10], [\"d\", 15], [\"c\", 20]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"452\", 10], [\"256\", 5], [\"100\", 20], [\"135\", 15]];\nvar x1 = sort(arg10);\nvar v1 = [[\"256\", 5], [\"452\", 10], [\"135\", 15], [\"100\", 20]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"rishi\", 10], [\"akhil\", 5], [\"ramya\", 20], [\"gaur\", 15]];\nvar x2 = sort(arg20);\nvar v2 = [[\"akhil\", 5], [\"rishi\", 10], [\"gaur\", 15], [\"ramya\", 20]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to sort a list according to the second element in sublist.", "language": "javascript", "canonical_solution": "  return subLi.sort((a, b) => a[1] - b[1]);\n}", "completion": ["\n    (", "\nlist.sort(", "\n    var sublist = subli.getElementsByTagName('ul')[0];\n    var subliCount = sublist.getElementsByTagName('li').length;\n    var li = subli.getElementsByTagName('li')[1];\n    var a = li.getElementsByTagName('a')[0];\n    var title = a.getElementsByTagName('span')[0];\n    var tr = document.createElement('tr');\n    tr.setAttribute('class', 'container');\n    li.getElementsByTagName('li')[0].appendChild(tr);\n    a.innerHTML = title.innerHTML;\n/**\n * * Write a JavaScript function to sort a list according to the second element in sublist.\n */\n}\n// Add sort type\naddSortType({\n    element:'span',\n    attr: 'class',\n    contains: 'category-sort',\n    exec: ", "\n", "\n\nconst list = ['\u9648\u6668', '\u8d75\u5143\u82b3', '\u9ec4\u5fd7\u5f3a', '\u6768\u8fc7', '\u8bb8\u5d69', '\u5468\u9e3f\u794e', '\u80e1\u51cc', '\u5434\u957f\u9756', '\u5b8b\u6c5f', '\u7a0b\u9890', '\u5510\u9ad8\u5b97', '\u674e\u9035', '\u53f6\u948a', '\u738b\u78ca', '\u8463\u534e', '\u4e54\u81f4\u8fdc', '\u5c0f\u9f99\u5973', '\u4e25\u51e4\u82f1', '\u79e6\u6c9b', '\u5415\u6587\u8d85', '\u9b4f\u5b9a\u56fd', '\u66f9\u951f', '\u8881\u6ee8', '\u8c22\u5efa\u534e', '\u77f3\u5efa\u6052', '\u5f20\u9759\u521d', '\u9ece\u660e', '\u51cc\u632f', '\u848b\u7ea2\u5a1f', '\u5218\u8c26', '\u5b59\u65b0', '\u987e\u5927\u5ac2', '\u59da\u660e', '\u9a6c\u8d85', '\u767d\u6cbb', '\u5d14\u667a\u53cb', '\u845b\u6839', '\u8521\u5eb7', '\u767d\u7389\u6885', '\u7f57\u8d2f\u4e2d', '\u4efb\u7ecd', '\u962e\u5c0f\u4e8c', '\u5f20\u67cf\u9f84', '\u90ed\u6cab\u82e5', '\u94b1\u6c5f', '\u96f7\u73c2', '\u79e6\u5c9a', '\u8d75\u8587', '\u94b1\u5b8f"]}
{"task_id": "MBJSP/334", "prompt": "function checkValidity(a, b, c) {\n/**\n * * Write a JavaScript function to check whether the triangle is valid or not if sides are given.\n */", "entry_point": "checkValidity", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = checkValidity(arg00, arg01, arg02);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 3;\nvar arg12 = 5;\nvar x1 = checkValidity(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = 10;\nvar arg22 = 5;\nvar x2 = checkValidity(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the triangle is valid or not if sides are given.", "language": "javascript", "canonical_solution": "    if (a + b > c && a + c > b && b + c > a) {\n        return true;\n    } else {\n        return false;\n    }\n}", "completion": ["\nif (a + b < c || a + c < b || b + c < a) {\n    console.log('ERROR: Invalid triangle!');\n    return false;\n}\nif (a === b || a === c || b === c) {\n    console.log('ERROR: Invalid triangle!');\n    return false;\n}\nreturn true;\n}\n//}\n\n/**\n * * Write a JavaScript function to check whether the triangle is valid or not if sides are given.\n */\n", "\n}\n\n", "\n", "\n\nvar t = {\n\tvalidity: validity\n};\n\n/**\n *\n */\n\nt.isValid = isValid;\n\n/**\n *\n */\n\nt.isValid2 = isValid2;\n\n/**\n *\n */\n\nt.isValid3 = isValid3;\n\n/**\n *\n */\n\nt.isValid4 = isValid4;\n\n/**\n * * Write a JavaScript function to find the intersection of two lines if two given points lie on these lines.\n */\n\nvar intersection = {\n\tintersectLines: intersectLines\n};\n\n/**\n *\n */\n\nintersection.intersectLines2 = intersectLines2;\n\n/**\n *\n */\n\nintersection.intersectLines3 = intersectLines3;\n\n/**\n *\n */\n\nintersection.intersectLines4 = intersectLines4;\n\n/**\n * * Write a JavaScript function to calculate the area of a triangle given its vertices.\n */\n\nvar area = {\n\ttriangleArea: triangleArea\n};\n\n/**\n *\n */\n\narea.triangleArea2 = triangleArea2;\n\n/**\n *\n */\n\narea.triangleArea3 = triangleArea3;\n\n/**\n *\n */\n\narea.triangleArea4 = triangleArea4;\n\n/**\n * * Write a JavaScript function to get the area of a polygon.\n */\n\nvar areaPolygon = {\n\tareaPolygon: areaPolygon\n};\n\n/**\n *\n */\n\nareaPolygon.area = area;\n\n/**\n * * Write a JavaScript ", "\na.forEach("]}
{"task_id": "MBJSP/335", "prompt": "function apSum(a, n, d) {\n/**\n * * Write a function to find the sum of arithmetic progression.\n */", "entry_point": "apSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = apSum(arg00, arg01, arg02);\nvar v0 = 25;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = apSum(arg10, arg11, arg12);\nvar v1 = 72;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar arg22 = 5;\nvar x2 = apSum(arg20, arg21, arg22);\nvar v2 = 34;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the sum of arithmetic progression.", "language": "javascript", "canonical_solution": "  let total = 0;\n\n  for (let i = 0; i < n; i++) {\n    total += a + (i * d);\n  }\n\n  return total;\n}", "completion": ["\n    var sum = 0;\n\n    for (var i = 0; i < n; i++) {\n        sum += a;\n    }\n\n    return sum;\n}\n```\n\n## Write a function to find the square of a number.\n\n```javascript\n/**\n * Write a function to find the square of a number.\n *\n * @param n\n * @returns {number}\n */\n", "\n\n/**\n * A function that sums all the arithmetic progression.\n *\n * @param {Number} a the first number\n * @param {Number} n the number of numbers to add\n * @param {Number} d the number of numbers to subtract\n * @return {Number} the sum of the arithmetic progression\n */\nexports.sumOfArithmaticProgressions = function(a, n, d) {\n/**\n * * Write a function to find the sum of arithmetic progression.\n */\n\n/**\n * A function to return a array of all the arithmetic progression.\n *\n * @param {Number} a the first number\n * @param {Number} n the number of numbers to add\n * @param {Number} d the number of numbers to subtract\n * @return {Array} the array of the arithmetic progression\n */\nexports.sumOfArithmaticProgressionsToArray = function(a, n, d) {\n/**\n * * Write a function to find the sum of arithmetic progression.\n */\n\n/**\n * A function that returns the sum of all the arithmetic progression.\n *\n * @param {Number} a the first number\n * @param {Number} n the number of numbers to add\n * @param {Number} d the number of numbers to subtract\n * @return {Number} the sum of the arithmetic progression\n */\nexports.sumOfArithmaticProgressionsToNumber = function(a, n, d) {\n/**\n * * Write a function to find the sum of arithmetic progression.\n */\n\n/**\n * A ", "\nconst series = new Series({\n  input: [1, 2, 3, 4, 5],\n  unit: d3.time.second,\n  max: 10,\n  min: 0,\n  value: (n, d) => n * d,\n});\nseries.write(n => Math.floor(n / 2));\n```\n\n# Functions\n\n### write\n\n* **input:** the data to write\n* **unit:** the unit used to calculate the value\n* **max:** maximum value\n* **min:** minimum value\n* **value:** the value function\n\n## Example\n\n<!--\n```\nimport { series } from 'd3-array';\nimport { write } from 'd3-time-format';\nimport { scaleLinear } from 'd3-scale';\nimport { format } from 'd3-format';\n```\n-->\n\n```js\n// Basic example\nconst series = new Series({\n  input: [1, 2, 3, 4, 5],\n  unit: d3.time.second,\n  max: 10,\n  min: 0,\n  value: (n, d) => n * d,\n});\nseries.write(n => Math.floor(n / 2));\n```\n\n### write\n\n* **input:** the data to write\n* **unit:** the unit used to calculate the value\n* **max:** maximum value\n* **min:** minimum value\n* **value:** the value ", "\nreturn (", "\n("]}
{"task_id": "MBJSP/336", "prompt": "function checkMonthnum(monthname1) {\n/**\n * * Write a function to check whether the given month name contains 28 days or not.\n */", "entry_point": "checkMonthnum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"February\";\nvar x0 = checkMonthnum(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"January\";\nvar x1 = checkMonthnum(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"March\";\nvar x2 = checkMonthnum(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether the given month name contains 28 days or not.", "language": "javascript", "canonical_solution": "    let monthname = monthname1.toLowerCase();\n    let month = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"];\n    let days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let monthIndex = month.indexOf(monthname);\n    if (monthIndex === -1) {\n        return false;\n    }\n    else {\n        return days[monthIndex] === 28 ? true : false;\n    }\n}", "completion": ["\n\n} else if (num(monthname1) < 28) {\n/**\n * * Write a function to check whether the given month name contains 28 days or not.\n */\n\n} else {\n/**\n * * Write a function to check whether the given month name contains 29 days or not.\n */\n\n}\n```\n\nNow that we have a function we can define a method of the `Date` class with the same name. We can use the same ", "\nconst monthname1 = 'February';\nconsole.log(monthname1.includes('28')); // returns true\n}\n\n/**\n * Write a function to check whether the given month name contains 29 days or not.\n */\nconst monthname2 = 'March';\nconsole.log(monthname2.includes('29')); // returns true\n}\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n */\nconst monthname3 = 'April';\nconsole.log(monthname3.includes('30')); // returns true\n}\n\n/**\n * Write a function to check whether the given month name contains 31 days or not.\n */\nconst monthname4 = 'May';\nconsole.log(monthname4.includes('31')); // returns true\n}\n\n/**\n * Write a function to check whether the given month name contains 32 days or not.\n */\nconst monthname5 = 'June';\nconsole.log(monthname5.includes('32')); // returns true\n}\n\n/**\n * Write a function to check whether the given month name contains 33 days or not.\n */\nconst monthname6 = 'July';\nconsole.log(monthname6.includes('33')); // returns true\n}\n\n/**\n * Write a function to check whether the given month name contains 34 days or not.\n */\nconst monthname7 = 'August';\nconsole.log(monthname7.includes('34')); // returns true\n}\n\n/**\n * Write a function to check whether the given month name contains 35 days or not.\n */\nconst monthname8 = 'September';\nconsole.log(monthname8.includes('35')); // returns true\n}\n\n/**\n * Write a ", "\n\n/**\n * Write a function to check whether the given month name contains 28 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 29 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 29 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 30 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 31 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 31 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 32 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 33 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 34 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 35 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 36 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 37 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 38 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 39 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 40 days or not.\n */\n\n/**\n * Write a function to check whether the given month name contains 41 days or not.\n */\n\n/**\n * Write a ", "\nvar month_1 = __webpack_require__(/*!../../utils/date */ \"./node_modules/lodash-es/_date.js\");\nvar month_2 = __webpack_require__(/*!../../utils/month */ \"./node_modules/lodash-es/_month.js\");\nvar _month = __webpack_require__(/*!../../utils/month */ \"./node_modules/lodash-es/_month.js\");\nvar month_3 = __webpack_require__(/*!../../utils/year */ \"./node_modules/lodash-es/_year.js\");\nvar month_4 = __webpack_require__(/*!../../utils/year */ \"./node_modules/lodash-es/_year.js\");\nvar month_5 = __webpack_require__(/*!../../utils/constants */ \"./node_modules/lodash-es/_constants.js\");\nvar month_6 = __webpack_require__(/*!../../utils/common */ \"./node_modules/lodash-es/_common.js\");\nvar month_7 = __webpack_require__(/*!../../utils/combine */ \"./node_modules/lodash-es/_combine.js\");\nvar month_8 = __webpack_require__(/*!../../utils/format */ \"./node_modules/lodash-es/_format.js\");\nvar month_9 = __webpack_require__(/*!../../utils/index */ \"./node_modules/lodash-es/_index.js\");\nvar month_10 = __webpack_require__(/*!../", "\ndays = 28;\n<|endoftext|>"]}
{"task_id": "MBJSP/337", "prompt": "function textMatchWord(text) {\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */", "entry_point": "textMatchWord", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python.\";\nvar x0 = textMatchWord(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"python.\";\nvar x1 = textMatchWord(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang  .\";\nvar x2 = textMatchWord(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function that matches a word at the end of a string, with optional punctuation.", "language": "javascript", "canonical_solution": "  let match = /(\\w+)(\\.\\s*)?$/;\n\n  if (match.test(text)) {\n    return `Found a match!`;\n  } else {\n    return `Not matched!`;\n  }\n}", "completion": ["\n}\n```\n\n<a name=\"2.4.1.11-\"> </a>\n#### 2.4.1.11-\n##### 2.4.1.11.1-\n##### 2.4.1.11.2-\n##### 2.4.1.11.3-\n##### 2.4.1.11.4-\n##### 2.4.1.11.5-\n##### 2.4.1.11.6-\n##### 2.4.1.11.7-\n##### 2.4.1.11.8-\n##### 2.4.1.11.9-\n##### 2.4.1.11.10-\n##### 2.4.1.11.11-\n##### 2.4.1.11.12-\n##### 2.4.1.11.13-\n##### 2.4.1.11.14-\n##### 2.4.1.11.15-\n##### 2.4.1.11.16-\n##### 2.4.1.11.17-\n##### 2.4.1.11.18-\n##### 2.4.1.11.19-\n##### 2.4.1.11.20-\n##### 2.4.1.11.21-\n##### 2.4.1.11.22-\n##### 2.4.1.11.23-\n##### 2.4.1.11.24-\n##### 2.4.1.11.25-\n##### 2.4.1.11.26-\n##### 2.4.1.11.27-\n##### 2.4.1.11.28-\n#####", "\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n\n/**\n * Returns the text as a string.\n * @return {string}\n */\n\n/**\n * Write a ", "\n\n/**\n * @param {string} text\n * @returns {Array.<string>}\n */\n", "\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n */\n/**\n * * Write a ", "\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/338", "prompt": "function countSubstringWithEqualEnds(s) {\n/**\n * * Write a JavaScript function to count the number of substrings with same first and last characters.\n */", "entry_point": "countSubstringWithEqualEnds", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar x0 = countSubstringWithEqualEnds(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcab\";\nvar x1 = countSubstringWithEqualEnds(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abc\";\nvar x2 = countSubstringWithEqualEnds(arg20);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the number of substrings with same first and last characters.", "language": "javascript", "canonical_solution": "    var count = 0;\n    for (var i = 0; i < s.length; i++) {\n        for (var j = i; j < s.length; j++) {\n            if (s[j] === s[i]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}", "completion": ["\nconst countSubstring = (...words) => {\n    let [first, last] = words.map((w) => w.slice(0, 1)).concat([last, first]).map(([f, l]) => f + l);\n    const count = words.reduce((acc, word) => {\n        let i = 0;\n        while (i < first.length) {\n            if (word.charAt(i)!== first.charAt(i)) return acc;\n            i++;\n        }\n        i = word.length - 1;\n        while (i > last.length) {\n            if (word.charAt(i)!== last.charAt(i)) return acc;\n            i--;\n        }\n        return (acc + 1);\n    }, 0);\n    return count;\n};\n\n/**\n * * Write a JavaScript function to compute the sum of all the numbers of divisors of an integer.\n */\nconst sumDivisors = (n) => {\n    const divisors = [];\n    for (let i = 1; i * i <= n; i++) {\n        if (n % i === 0) {\n            divisors.push(i);\n            if (i * i!== n) {\n                divisors.push(n / i);\n            }\n        }\n    }\n    return divisors.reduce((acc, divisor) => acc + divisor, 0);\n};\n\n/**\n * * Write a JavaScript ", "\n    var lastChars = s.split(' ').map(", "\n    const separator = s.substr(0, 1);\n    const s1 = s.substr(1);\n    const s2 = s.substr(s.length - 1);\n\n    return `${s1.length}(${s1}){${separator.length}}${s2.length}(${s2})`;\n}\n\nstringWithEqualEnds(`abc`); // 2(ab)(bc)\nstringWithEqualEnds(`abcd`); // 2(abc)(d)\nstringWithEqualEnds(`abCd`); // 3(ab)(Cd)\n\n// String with equal ends\nstringWithEqualEnds(`abc`); // 2(ab)(bc)\nstringWithEqualEnds(`abcd`); // 2(abc)(d)\nstringWithEqualEnds(`abCd`); // 3(ab)(Cd)\n```\n\n## Utils\n\n### `substringWithEqualEnds(s)`\n\n* * Write a JavaScript function to count the number of substrings with same first and last characters.\n* *\n* *\n* *\n* *\n* *\n\n```js\n", "\nconst count = s => {\n  const count = {};\n  const len = s.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i; j < len; j++) {\n      const substr = s.substr(i, j - i + 1);\n      count[substr] = (count[substr] || 0) + 1;\n    }\n  }\n  return Object.keys(count).length;\n};\n\n/**\n * * Write a JavaScript function to convert all letters in the given string to uppercase.\n */\nconst upper = s => s.toUpperCase();\n\n/**\n * * Write a JavaScript function to convert all letters in the given string to lowercase.\n */\nconst lower = s => s.toLowerCase();\n\n/**\n * * Write a JavaScript function to make the first letter of a string uppercase if the string has more than one letter.\n */\nconst capitalize = s => {\n  const len = s.length;\n  if (len < 2) {\n    return s;\n  }\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\n/**\n * * Write a JavaScript function to generate a random number between 1 and n.\n */\nconst random = (n) => Math.floor(Math.random() * n + 1);\n\n/**\n * * Write a JavaScript function to generate a random number between 1 and n, inclusive, using the *Math.random* method.\n */\nconst random2 = (n) => Math.random() * n;\n\n/**\n * * Write a JavaScript ", "\n"]}
{"task_id": "MBJSP/339", "prompt": "function findDivisor(x, y) {\n/**\n * * Write a JavaScript function to find the maximum occuring divisor in an interval.\n */", "entry_point": "findDivisor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 2;\nvar x0 = findDivisor(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 5;\nvar x1 = findDivisor(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar arg21 = 10;\nvar x2 = findDivisor(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the maximum occuring divisor in an interval.", "language": "javascript", "canonical_solution": "  var max = -1;\n  for (var i = x; i <= y; i++) {\n    var temp = 1;\n    while (x * temp <= i) {\n      temp++;\n    }\n    while (i % temp !== 0) {\n      temp--;\n    }\n    if (temp > max) {\n      max = temp;\n    }\n  }\n  return max;\n}", "completion": ["\n", "\n    ", "\n};\n\nif (typeof module!== 'undefined' && module.exports) {\n    module.exports = maxDivisor;\n} else {\n    window.maxDivisor = maxDivisor;\n}\n<|endoftext|>", "\nconst maxOccuringDivisor = function(x, y) {\n  const divisors = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  const highestDivisor = divisors[divisors.length - 1];\n  let result = 0;\n\n  for (let i = 0; i < highestDivisor; i++) {\n    result += x / (y / (i + 1));\n  }\n\n  return result;\n};\n\nlet e = 0.001;\nconst x = Math.exp(e);\nconst y = Math.log(Math.exp(e) + 1);\n\nmaxOccuringDivisor(x, y);\n```\n\n![Image of the function](./img/image-", "\nvar x = document.getElementById('x'),\ny = document.getElementById('y');\n\nvar max_occuring_divisor = x / y;\nconsole.log('The maximum occuring divisor for x and y is:'+ max_occuring_divisor);\n}\n\n</script>\n</body>\n</html>\n<|endoftext|>"]}
{"task_id": "MBJSP/340", "prompt": "function sumThreeSmallestNums(lst) {\n/**\n * * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */", "entry_point": "sumThreeSmallestNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 20, 30, 40, 50, 60, 7];\nvar x0 = sumThreeSmallestNums(arg00);\nvar v0 = 37;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = sumThreeSmallestNums(arg10);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 4, 5];\nvar x2 = sumThreeSmallestNums(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.", "language": "javascript", "canonical_solution": "    var array = lst.sort((a, b) => a - b);\n    var i = 0;\n    for (; i < array.length - 2; i++) {\n        if (array[i] > 0) {\n            break;\n        }\n    }\n    return array[i] + array[i + 1] + array[i + 2];\n}", "completion": ["\n    let a = lst[0];\n    let b = lst[1];\n    let c = lst[2];\n\n    if(a + b + c < 0){\n        a = lst[3];\n        b = lst[4];\n        c = lst[5];\n\n        console.log(lst[0] + \" + \" + lst[1] + \" + \" + lst[2] + \" = \" + a + \" + \" + b + \" + \" + c);\n    }else{\n        console.log(lst[0] + \" + \" + lst[1] + \" + \" + lst[2]);\n    }\n/**\n * * Write a JavaScript function to find the sum of the three highest positive numbers from a given list of numbers.\n */\n    let a = lst[0];\n    let b = lst[1];\n    let c = lst[2];\n\n    if(a + b + c > 0){\n        a = lst[3];\n        b = lst[4];\n        c = lst[5];\n\n        console.log(lst[0] + \" + \" + lst[1] + \" + \" + lst[2] + \" = \" + a + \" + \" + b + \" + \" + c);\n    }else{\n        console.log(lst[0] + \" + \" + lst[1] + \" + \" + lst[2]);\n    }\n/**\n * * Write a JavaScript ", "\n}\n\n\"\"\"\n+\n\"\"\"\n+\n# Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_lowest(lst):\n    three_lowest = lst[0]\n    three_lowest_sum = three_lowest\n\n    for num in lst:\n        if num > three_lowest and num > 0:\n            three_lowest_sum = three_lowest_sum + num\n            three_lowest = num\n\n    return three_lowest_sum\n\n\n\"\"\"\n+\n\"\"\"\n+\n# Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_lowest(lst):\n    three_lowest = lst[0]\n    three_lowest_sum = three_lowest\n\n    for num in lst:\n        if num > three_lowest and num > 0:\n            three_lowest_sum = three_lowest_sum + num\n            three_lowest = num\n\n    return three_lowest_sum\n\n\n\"\"\"\n+\n\"\"\"\n+\n# Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_lowest(lst):\n    three_lowest = lst[0]\n    three_lowest_sum = three_lowest\n\n    for num in lst:\n        if num > three_lowest and num > 0:\n            three_lowest_sum = three_lowest_sum + num\n            three_lowest = num\n\n    return three_lowest_sum\n\n\n\"\"\"\n+\n\"\"\"\n+\n# Write a JavaScript ", "\n```\n\n## Code\n\nHere's your code:\n\n```javascript\n/**\n * @param {number} nums\n * @return {number}\n */\n", "\nsumOfThreeLowestPositiveNums(lst) {\n    let min = lst[0];\n    let max = lst[0];\n    let total = 0;\n\n    for (let num of lst) {\n        if (num > min && num < max) {\n            total += num;\n        }\n        else if (num > max) {\n            min = num;\n        }\n        else if (num < min) {\n            max = num;\n        }\n    }\n\n    return total;\n}\n\n/**\n * * Write a JavaScript function to get the odd numbers from a given list of numbers.\n */\ngetOddNumbers(lst) {\n    let oddNums = [];\n    let total = 0;\n\n    for (let num of lst) {\n        let isOdd = num % 2;\n        if (isOdd) {\n            total += num;\n            oddNums.push(num);\n        }\n    }\n\n    return oddNums;\n}\n\n/**\n * * Write a JavaScript function to get the even numbers from a given list of numbers.\n */\ngetEvenNumbers(lst) {\n    let evenNums = [];\n    let total = 0;\n\n    for (let num of lst) {\n        let isEven = num % 2;\n        if (!isEven) {\n            total += num;\n            evenNums.push(num);\n        }\n    }\n\n    return evenNums;\n}\n\n/**\n * * Write a JavaScript ", "\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript function to find the sum of the three lowest positive numbers from a given list of numbers.\n */\n\n/**\n * Write a JavaScript "]}
{"task_id": "MBJSP/342", "prompt": "function findMinimumRange(list) {\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */", "entry_point": "findMinimumRange", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]];\nvar x0 = findMinimumRange(arg00);\nvar v0 = [4, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]];\nvar x1 = findMinimumRange(arg10);\nvar v1 = [4, 7];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]];\nvar x2 = findMinimumRange(arg20);\nvar v2 = [5, 7];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "language": "javascript", "canonical_solution": "  let min = Infinity;\n  let max = -Infinity;\n  let len = list.length;\n  for (let i = 0; i < len; i++) {\n    let arr = list[i];\n    let len = arr.length;\n    for (let j = 0; j < len; j++) {\n      let num = arr[j];\n      min = Math.min(min, num);\n      max = Math.max(max, num);\n    }\n  }\n  return [min, max];\n}", "completion": ["\nvar smallestRangeInArrays = ", "\n```\n\n**6.** The following code computes the length of the smallest range that includes at-least one element from each of the given arrays.\n```js\nconst list = [1, 2, 3, 4, 5];\nconst nums = [1, 1, 1, 2, 3];\n\nconst min = Math.min.apply(Math, nums);\nconst max = Math.max.apply(Math, nums);\nconst range = (max - min) + 1;\n\nconsole.log(`The smallest range with at-least one element from each of the given arrays is: `, min, `-`, max, `.`);\n```\n\n**7.** The following code computes the length of the smallest range that includes at-least one element from each of the given arrays.\n```js\nconst list = [1, 2, 3, 4, 5];\nconst nums = [1, 1, 1, 2, 3];\n\nconst min = Math.min.apply(Math, nums);\nconst max = Math.max.apply(Math, nums);\nconst range = (max - min) + 1;\n\nconsole.log(`The smallest range with at-least one element from each of the given arrays is: `, min, `-`, max, `.`);\n```\n\n**8.** The following code computes the length of the smallest range that includes at-least one element from each of the given arrays.\n```js\nconst list = [1, 2, 3, 4, 5];\nconst nums = [1, 1, 1, 2, 3];\n\nconst min = Math.min.apply(Math, nums);\nconst max = Math.max.apply(Math,", "\n\n/**\n * * Write a function that takes in an array of numbers, and returns the sum of the smallest and largest number.\n * * In the array [1,2,3,4], the smallest number is 1, and the largest number is 4.\n * * This function should return 10, as the smallest number can be 1 + 2 + 3 + 4 = 10, and the largest number can be 4 + 3 + 2 + 1 = 10.\n */\n```\n\nThe function signature looks like this:\n\n```python\ndef smallest_and_largest_numbers_in_arrays(arrays):\n    pass\n```\n\nThe function takes in an array of arrays, and returns the result of passing the arrays to the function:\n\n```python\ndef smallest_and_largest_numbers_in_arrays(arrays):\n    result = 0\n    for array in arrays:\n        result = max(result, smallest_and_largest_numbers_in_array(array))\n    return result\n```\n\nThe function must return the sum of the smallest and largest number from each of the arrays passed to the function, and the sum of the smallest and largest number for the entire array of arrays passed to the function.\n\n## Complexity\n\n### O(n*m)\n\n* For each array, find the smallest and largest numbers in the array and return their sum.\n\n### O(n + m)\n\n* The array passed to the function may contain duplicate values.\n* The function must return the sum of the smallest and largest numbers from each of the arrays passed to the ", "\n", "\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/343", "prompt": "function digLet(s) {\n/**\n * * Write a function to calculate the number of digits and letters in a string.\n */", "entry_point": "digLet", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = digLet(arg00);\nvar v0 = [6, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = digLet(arg10);\nvar v1 = [7, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python3.0\";\nvar x2 = digLet(arg20);\nvar v2 = [6, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the number of digits and letters in a string.", "language": "javascript", "canonical_solution": "  const letters = s.split(\"\").reduce((acc, cur) => {\n    if (cur.match(/[a-z]/i)) {\n      acc[0] += 1;\n    } else if (cur.match(/[0-9]/i)) {\n      acc[1] += 1;\n    }\n    return acc;\n  }, [0, 0]);\n  return letters;\n}", "completion": ["\n\n  this.digits = function(s) {\n    var digits = s.split(''),\n        l = digits.length,\n        _digits = [];\n\n    for (var i = 0; i < l; i++) {\n      var c = digits[i];\n\n      if (c >= '0' && c <= '9') {\n        _digits.push(c);\n      }\n    }\n\n    return _digits;\n  };\n\n  this.letters = function(s) {\n    var letters = s.split(''),\n        l = letters.length,\n        _letters = [];\n\n    for (var i = 0; i < l; i++) {\n      var c = letters[i];\n\n      if (c >= 'A' && c <= 'Z') {\n        _letters.push(c);\n      }\n      else if (c >= 'a' && c <= 'z') {\n        _letters.push(c);\n      }\n    }\n\n    return _letters;\n  };\n\n  this.isDigits = function(s) {\n    return this.digits(s) && _.isArray(this.digits(s));\n  };\n\n  this.isLetters = ", "\ns = s.toString();\nvar l = s.length;\nvar n = l;\nvar digits = [];\nvar letters = [];\n\nfor (var i = 0; i < n; i++) {\n    if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n        digits.push(s.charAt(i));\n    } else {\n        letters.push(s.charAt(i));\n    }\n}\n\ndigits = digits.join('').toString();\nletters = letters.join('').toString();\n\nconsole.log(digits);\nconsole.log(letters);\n\n/**\n * Write a function to calculate the number of digits and letters in a string.\n */\ns = \"this is string of letters and numbers\";\nvar l = s.length;\nvar n = l;\nvar digits = [];\nvar letters = [];\n\nfor (var i = 0; i < n; i++) {\n    if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n        digits.push(s.charAt(i));\n    } else {\n        letters.push(s.charAt(i));\n    }\n}\n\ndigits = digits.join('').toString();\nletters = letters.join('').toString();\n\nconsole.log(digits);\nconsole.log(letters);\n\n/**\n * Write a ", "\n    s = s.replace(/[^A-Za-z0-9]+/g, '');\n/**\n * * Get the number of digits and letters in the string.\n */\n    n = s.length;\n/**\n * * Get the number of digits.\n */\n    d = s.match(/[^A-Za-z0-9]+/g);\n/**\n * * Get the number of letters.\n */\n    l = s.match(/[A-Za-z]+/g);\n/**\n * * Return the number of digits and letters in the string.\n */\n    return {\n/**\n * * * Return the number of digits in the string.\n */\n        n: n,\n/**\n * * * Return the number of letters in the string.\n */\n        l: l,\n/**\n * * * Return the number of digits.\n */\n        d: d\n    };\n};\n/**\n * * Write a function to calculate the number of words in a string.\n */\nvar getWords = function(s) {\n/**\n * * Replace all non-word characters with space.\n */\n    s = s.replace(/[^A-Za-z0-9]+/g, '');\n/**\n * * Replace all non-word characters with space.\n */\n    var n = s.split('').length;\n/**\n * * Return the number of words in the string.\n */\n    return n;\n};\n/**\n * * Write a function to calculate the number of words in a string.\n */\nvar getWordsInSentence = ", "\nconst name = 'dummy';\nconst surname = 'dummy';\nconst nameLength = name.length;\nconst surnameLength = surname.length;\nconst nameLetters = name.match(/[A-Za-z]/g);\nconst surnameLetters = surname.match(/[A-Za-z]/g);\n\nconst letters = nameLength - nameLetters.length + surnameLength - surnameLetters.length;\nconst digits = nameLength - nameLetters.length;\nconst lettersAndDigits = letters + digits;\n/**\n * * Generate a password with the given letters and digits.\n */\nconst password = `${nameLetters}${surnameLetters}`;\n\n/**\n * * Write a function to generate a random number between the given minimum and maximum.\n */\n", "\nvar to_string = function(value) {\n\tvar temp = '\\u00A0' + value;\n\tvar str = '';\n\tfor (var i = 0; i < temp.length; i++) {\n\t\tif (temp[i]!== '\\u00A0') {\n\t\t\tstr += temp[i];\n\t\t}\n\t}\n\treturn str;\n};\n\n/**\n * * Write a function to check the number of digits in a string.\n */\nvar is_digit = function(value) {\n\treturn!isNaN(value) && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * * Write a function to check the number of letters in a string.\n */\nvar is_letter = function(value) {\n\treturn!isNaN(value) && isFinite(value) && value!== '' && value.toString()!== '\\u0000';\n};\n\n/**\n * * Write a function to check whether the given character is an alphabetic character.\n */\nvar is_alphabetic = function(value) {\n\treturn!isNaN(value) && isFinite(value) && value!== '' && value.toString()!== '\\u0000';\n};\n\n/**\n * * Write a function to check whether the given character is an alphabetic character or a digit character.\n */\nvar is_alphabetic_or_digit = function(value) {\n\treturn!isNaN(value) && isFinite(value) && value!== '' && value.toString()!== '\\u0000';\n};\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/344", "prompt": "function countOddSquares(n, m) {\n/**\n * * Write a JavaScript function to find number of elements with odd factors in a given range.\n */", "entry_point": "countOddSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 100;\nvar x0 = countOddSquares(arg00, arg01);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 8;\nvar arg11 = 65;\nvar x1 = countOddSquares(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 5;\nvar x2 = countOddSquares(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find number of elements with odd factors in a given range.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = n; i <= m; i++) {\n    let sq = Math.sqrt(i);\n    let x = Math.floor(sq);\n    if (x * x === i && x !== 0) {\n      count++;\n    }\n  }\n  return count;\n}", "completion": ["\n  ", "\n", "\n\n  /**\n   * * Check if a number is a perfect square.\n   */\n\n  (q: number, e: number, n: number): boolean;\n  (q: number, e: number, n: number): boolean {\n    if (q === Math.floor(q) && e === Math.floor(e) && q * q === n && e * e === n) return true;\n    return false;\n  }\n\n  /**\n   * * Calculate number of elements with odd factors in a given range.\n   */\n\n  (n: number, m: number): number;\n  (n: number, m: number): number {\n    let sum = 0;\n    let sqrt = Math.sqrt(n);\n    for (let i = 1; i <= sqrt; i++) {\n      if (n % i === 0) {\n        if (i > m) break;\n        if (n / i > m) break;\n        sum++;\n      }\n    }\n    return sum;\n  }\n\n}\n\nddSquares(16, 100);\n```\n\n<br>\n\n### <a name=\"delta\"></a> Delta\n\n<br>\n\n#### <a name=\"delta-0\"></a> The Delta Algorithm\n\n<br>\n\nAs mentioned above, the Delta algorithm is used to calculate the number of elements with odd factors in a given range.\n\n<br>\n\n```\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n", "\nvar addddSquares = ", "\n    "]}
{"task_id": "MBJSP/345", "prompt": "function diffConsecutivenums(nums) {\n/**\n * * Write a function to find the difference between two consecutive numbers in a given list.\n */", "entry_point": "diffConsecutivenums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nvar x0 = diffConsecutivenums(arg00);\nvar v0 = [0, 2, 1, 0, 1, 1, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 8, 9, 6, 10];\nvar x1 = diffConsecutivenums(arg10);\nvar v1 = [1, 3, 1, -3, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7];\nvar x2 = diffConsecutivenums(arg20);\nvar v2 = [1, 1, 1, 1, 0, 0, 0, 1, 2];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the difference between two consecutive numbers in a given list.", "language": "javascript", "canonical_solution": "  let result = [];\n\n  for (let i = 0; i < nums.length - 1; i++) {\n    result[i] = nums[i + 1] - nums[i];\n  }\n\n  return result;\n}", "completion": ["\n", "\n", "\nlet length = list.length;\nlet answer = 0;\nlet i = 0;\nlet j = 0;\n\n", "\n    \"use strict\";\n\n    if (nums.length <= 2) {\n        return nums.map(", "\n/**\n * * Find the minimum number of consecutive numbers in a given list.\n * *\n * * @param {number[]} nums - A list of numbers.\n * * @param {"]}
{"task_id": "MBJSP/346", "prompt": "function zigzag(n, k) {\n/**\n * * Write a function to find entringer number e(n, k).\n */", "entry_point": "zigzag", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = zigzag(arg00, arg01);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 2;\nvar x1 = zigzag(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar arg21 = 1;\nvar x2 = zigzag(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find entringer number e(n, k).", "language": "javascript", "canonical_solution": "    return (k - 1) * (n - k) + k;\n}", "completion": ["\n/**\n * * Given two numbers x, y, find their entringer number e(n, k) using Z algorithm.\n * *\n * * **Example**\n * *\n * * e(10, 3) = 5\n * *\n * * **Example**\n * *\n * * e(8, 4) = 4\n * *\n * * **Example**\n * *\n * * e(12, 4) = 6\n */\nvar z = function() {\n  /**\n   * **Arguments**\n   * * `n` {number} - Number to find entringer number e(n, k)\n   * * `k` {number} - Number of digits to sum\n   *\n   * **Return**\n   * * `e` {number} - Entringer number\n   */\n  var n = arguments.length === 1? arguments[0] : arguments[0], k = arguments.length === 1? arguments[1] : arguments[1];\n  var m = n, e = 0;\n\n  // Iterate through each of the digits, sum their values and update the e variable.\n  for (var i = 0; i < k; i++) {\n    var digit = parseInt(m / Math.pow(10, i)) % 10;\n    e += digit;\n    m = m % Math.pow(10, i);\n  }\n\n  // Returns entringer number.\n  return e;\n};\n\nmodule.exports = z;\n},{}],8:[", "\nvar finder = ", "\n\n/**\n * * Return the longest palindrome subsequence in s.\n */\n", "\nconst entringer = function(n, k) {\n  let digits = [...new Set([n])];\n  let max_digits = k;\n  let min_digits = k;\n  while (digits.length < max_digits) {\n    let new_digits = [];\n    for (let digit of digits) {\n      if (digit % k === 0) {\n        digit += 1;\n      }\n      new_digits.push(digit);\n    }\n    max_digits = digits.length;\n    min_digits = new_digits.length;\n    digits = new_digits;\n  }\n\n  let string = '1';\n  let i = max_digits - min_digits;\n  for (let digit of digits) {\n    string += digit;\n    if (i === 0) {\n      string += '0';\n    }\n    i--;\n  }\n  return string;\n};\n\nentringer(5, 3);\n\n/**\n * * *\n * * * Write a function to find a number x such that:\n *\n * * * x is a palindrome number,\n * * * x % 10 is the same as x,\n * * * x % 100 is less than or equal to x,\n * * * x is less than or equal to 10000.\n * * Note: This is a exercise from the Chapter 2 of Object\n * -Oriented Programming.\n */\n", "\nconst Entringer = (n, k) => {\n  let count = 0;\n  let n_a_k = '',\n    r = n % k,\n    r_a_k = '',\n    m = n / k,\n    m_a_k = '',\n    q = n - r,\n    q_a_k = '',\n    s = q / k,\n    s_a_k = '',\n    c = q % k;\n\n  for (let i = 0; i < k; i++) {\n    n_a_k += n % 10 +'';\n    r_a_k += r % 10 +'';\n    m_a_k += m % 10 +'';\n    q_a_k += q % 10 +'';\n    s_a_k += s % 10 +'';\n    c += c % 10;\n    n /= 10;\n    r /= 10;\n    m /= 10;\n    q /= 10;\n    s /= 10;\n    c /= 10;\n  }\n\n  return n_a_k +'' + r_a_k +'' + m_a_k +'' + q_a_k +'' + s_a_k +'' + c +'';\n};\n\nconsole.log(Entringer(100, 3))\n// 100 3 2 7 6 5 4\n```\n\n</div>\n\n</div>\n</div>\n\n<div class=\"jb_cell\">\n\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-"]}
{"task_id": "MBJSP/347", "prompt": "function countSquares(m, n) {\n/**\n * * Write a JavaScript function to count the number of squares in a rectangle.\n */", "entry_point": "countSquares", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar arg01 = 3;\nvar x0 = countSquares(arg00, arg01);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar x1 = countSquares(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 2;\nvar x2 = countSquares(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the number of squares in a rectangle.", "language": "javascript", "canonical_solution": "    if (n < m) {\n        temp = m\n        m = n\n        n = temp\n    }\n    return (n * (n + 1) * (3 * m - n + 1)) / 6\n}", "completion": ["\n    count_squares(m, n) {\n        let out = 0;\n        for (let i = 0; i < m; ++i) {\n            for (let j = 0; j < n; ++j) {\n                if (i % 2 == 1 && j % 2 == 1) {\n                    out++;\n                }\n            }\n        }\n        return out;\n    }\n}\n```\n\n![](https://lh3.googleusercontent.com/ZMkZj7XO6V1s1ZhEgv_Hd6Zj-FweaQ8Zne9Q4V_iHbqzqT_y_y3XxDYIgjhc-_X7_Nig=w140)\n\n> \u6587\u7ae0\u4e2d\u63d0\u5230\u7684\u5173\u952e\u8bcd `[\u5f02\u5e38\u5904\u7406]`\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u6307\u793a\u662f\u5426\u7531\u4e8e\u672a\u77e5\u7684\u5f02\u5e38\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\uff0c\u6307\u793a\u662f\u5426\u7531\u4e8e\u672a\u77e5\u7684\u5904\u7406\u3002\n>\n> \u4efb\u4f55\u975e\u7a7a\u5b57\u7b26\u4e32\u90fd\u88ab\u89c6\u4e3a\u5f02\u5e38\u3002\n\n\u4f46\u662f\uff0c\u8981\u5904\u7406\u5f02\u5e38\uff0c\u5e76\u4e0d\u662f\u6211\u4eec\u8981\u7684\u3002\n\n```javascript\ntry {\n    var x = 1;\n    var y = 0;\n    x * x;", "\nvar fn = ", "\n", "\n", "\n"]}
{"task_id": "MBJSP/348", "prompt": "function findWays(m) {\n/**\n * * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n */", "entry_point": "findWays", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4;\nvar x0 = findWays(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 6;\nvar x1 = findWays(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 8;\nvar x2 = findWays(arg20);\nvar v2 = 14;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "language": "javascript", "canonical_solution": "    // write your code in JavaScript (Node.js 8.9.4)\n    function bin_coff(n, r) {\n        val = 1;\n        if (r > (n - r)) {\n            r = (n - r);\n        }\n        for (var i = 0; i < r; i++) {\n            val *= (n - i);\n            val /= (i + 1);\n        }\n        return val;\n    }\n    var n = m / 2;\n    var a = bin_coff(2 * n, n);\n    var b = a / (n + 1);\n    return b;\n}", "completion": ["\n/**\n * * Create a ", "\n", "\n// m = [s1, s2,..., sn], each s is a string of length n.\n// return the number of sequences that can be formed from m, each sequence is a string of length n - 1.\n/**\n * Given n integers m1, m2,..., mn representing a sequence, and an integer x, determine whether there exists a sequence of n integers such that the prefix sums of all the given sequence satisfy the given x.\n * Note: All the given sequence are unique.\n * Example:\n * Input: m = [\"1\",\"2\",\"3\"], x = 5\n * Output: false\n * Explanation: No sequences of length 3 are possible from this given sequence.\n *\n * Example:\n * Input: m = [\"3\",\"2\",\"1\"], x = 4\n * Output: true\n * Explanation: There exists a sequence of length 3 that satisfies the given property.\n *\n * Example:\n * Input: m = [\"1\",\"4\",\"7\",\"10\"], x = 12\n * Output: true\n */\n\n// O(n*2^n) solution\n// https://leetcode.com/problems/non-overlapping-intervals/discuss/231249/Java-DP-solution-with-explanation\n// https://leetcode.com/problems/non-overlapping-intervals/discuss/231233/Java-DP-solution-with-explanation-O(n)-time-O(1)-space\n", "\n", "\n"]}
{"task_id": "MBJSP/349", "prompt": "function check(string) {\n/**\n * * Write a JavaScript function to check whether the given string is a binary string or not.\n */", "entry_point": "check", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"01010101010\";\nvar x0 = check(arg00);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"name0\";\nvar x1 = check(arg10);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"101\";\nvar x2 = check(arg20);\nvar v2 = \"Yes\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the given string is a binary string or not.", "language": "javascript", "canonical_solution": "    let str = string.split(\"\").reverse().join(\"\");\n    if (str === string) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "completion": ["\n(", "\nvar str_isBinary = function str_isBinary(str) {\n  return str.split('').every(", "\nvar b = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/i;\n/**\n * * Write a JavaScript function to check whether the given string is a hexadecimal string or not.\n */\nvar h = /^[a-f0-9]{16}$/i;\n/**\n * * Write a JavaScript function to check whether the given string is a URL-safe string or not.\n */\nvar u = /^[a-z0-9_-]+$/i;\n/**\n * * Write a JavaScript function to check whether the given string is an UTF-8 string or not.\n */\nvar utf8 = /^[\\x00-\\x7F]*$/i;\n/**\n * * Write a JavaScript function to check whether the given string is a Unicode string or not.\n */\nvar ucs2 = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]*$/i;\n/**\n * * Write a JavaScript function to check whether the given string is a valid JSON string or not.\n */\nvar json = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]*$/;\n/**\n * * Write a JavaScript function to check whether the given string is a valid regular expression string or not.\n */\nvar regexp = /^[a-zA-Z0-9_.@-]+$/;\n/**\n * * Write a JavaScript ", "\n", "\n\n"]}
{"task_id": "MBJSP/350", "prompt": "function minimumLength(s) {\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */", "entry_point": "minimumLength", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"mnm\";\nvar x0 = minimumLength(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abcda\";\nvar x1 = minimumLength(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcb\";\nvar x2 = minimumLength(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.", "language": "javascript", "canonical_solution": "    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.indexOf(s[i]) === s.lastIndexOf(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\n\nconst getMinified = (s) => {\n  const l = s.length;\n  let c = 0;\n  let minified = '';\n  let i = -1;\n  let last = -1;\n\n  while (++i < l) {\n    const current = s[i];\n\n    if (current === last) {\n      continue;\n    } else {\n      last = current;\n      c++;\n    }\n\n    minified += s.substr(i, 1);\n  }\n\n  return minified + s.substr(i + 1);\n};\n\nexport default getMinified;\n<|endoftext|>", "\nconst writeJavascript = s => s.replace(/(^|\\s|;)", "\n\ns = s.replace(/\\s\\s\\s+/g,'');\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */\n\ns = s.replace(/\\s+/g,'');\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */\n\ns = s.replace(/\\s+/g,'');\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */\n\ns = s.replace(/\\s+/g,'');\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */\n\ns = s.replace(/\\s+/g,'');\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */\n\ns = s.replace(/\\s+/g,'');\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */\n\ns = s.replace(/\\s+/g,'');\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */\n\ns = s.replace(/\\s+/g,'');\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only one character.\n */\n\ns = s.replace(/\\s+/g,'');\n\n/**\n * * Write a JavaScript ", "\ns = s.replace(/\\(", "\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * *\n */\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only two characters.\n */\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only three characters.\n */\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only four characters.\n */\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only five characters.\n */\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only six characters.\n */\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only seven characters.\n */\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only eight characters.\n */\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * * Write a JavaScript function to minimize the length of the string by removing occurrence of only nine characters.\n */\n\n/**\n * * Get the first element of an array.\n */\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/351", "prompt": "function firstElement(arr, n, k) {\n/**\n * * Write a JavaScript function to find the first element occurring k times in a given array.\n */", "entry_point": "firstElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, 3, 4, 5];\nvar arg01 = 6;\nvar arg02 = 1;\nvar x0 = firstElement(arg00, arg01, arg02);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 1, 3, 4];\nvar arg11 = 5;\nvar arg12 = 2;\nvar x1 = firstElement(arg10, arg11, arg12);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 3, 5, 7, 1, 2, 3, 5];\nvar arg21 = 10;\nvar arg22 = 2;\nvar x2 = firstElement(arg20, arg21, arg22);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the first element occurring k times in a given array.", "language": "javascript", "canonical_solution": "    if (arr.length === 0) {\n        return null;\n    }\n\n    let result = null;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.slice(i, i + k).length === k) {\n            result = arr[i];\n            break;\n        }\n    }\n\n    return result;\n}", "completion": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n", "\nreturn arr[arr.indexOf(n) < k? arr.indexOf(n) : k - 1];\n}\n</code></pre>\n<h3>Finding the first element occurring n times in a given array</h3>\n<pre><code>/**\n * Find the first element occurring n times in a given array.\n */\n", "\n\nconst firstElementOccuringKTimes = (arr, n, k) => {\n  const frequency = [];\n  const hash = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    frequency[arr[i]] = (frequency[arr[i]] || 0) + 1;\n\n    if (frequency[arr[i]] === k) {\n      hash[arr[i]] = true;\n    }\n  }\n\n  for (let i = 0; i < hash.length; i++) {\n    if (hash[i]) {\n      return i;\n    }\n  }\n};\n\nconst firstElementOccuringKTimesInArr = arr => {\n  return firstElementOccuringKTimes(arr, arr.length, 2);\n};\n\nconst firstElementOccuringKTimesInArr2 = arr => {\n  return firstElementOccuringKTimes(arr, arr.length, 3);\n};\n\nconst firstElementOccuringKTimesInArr3 = arr => {\n  return firstElementOccuringKTimes(arr, arr.length, 4);\n};\n\nconst firstElementOccuringKTimesInArr4 = arr => {\n  return firstElementOccuringKTimes(arr, arr.length, 5);\n};\n\nconst firstElementOccuringKTimesInArr5 = arr => {\n  return firstElementOccuringKTimes(arr, arr.length, 6);\n};\n\nconst firstElementOccuringKTimesInArr6 = arr => {\n  return firstElementOccuringKTimes(arr, arr.length, 7);\n};\n\nconst firstElementOccuringKTimesInArr7 = arr => {\n  return firstElementOccuringKTimes(arr, arr.length, 8);\n};", "\n\n    return arr[n - k] === k;\n}\n```\n\n### Ch 1.3.5\n\nThe method return true if the integer x is a prime number, false otherwise.\n\nThe method is based on the fact that a prime number is greater than 1, and can only be a factor of itself.\n\n**Example**\n\n```js\n// Find the first factor of '7'\nvar isPrime = function isPrime(x) {\n    // x = 7\n    // x % 1 = 0\n    // x % 2 = 0\n    // x % 3 = 0\n    // x % 4 = 0\n    // x % 5 = 0\n    // x % 6 = 0\n    // x % 7 = 0\n    return x % 7 === 0;\n};\n```\n\n### Ch 1.3.6\n\nThe method return true if the integer x is a palindrome, false otherwise.\n\n**Example**\n\n```js\n// Find the first palindrome\nvar isPalindrome = function isPalindrome(x) {\n    return x === x.reverse();\n};\n```\n\n### Ch 1.3.7\n\nThe method return true if the integer x is a perfect number, false otherwise.\n\n**Example**\n\n```js\n// Find the first perfect number\nvar isPerfect = ", "\n// Declare variable\nvar arr = [1,2,3,3,4,5,5,5,5,5,6,6,6,7,8,8,8,8,8,8];\nvar k = 3;\n\n// Declare variable\nvar result;\n\n// Declare variable\nvar found;\n\n// Call function\nfound = firstOccur(arr, k);\n\n// If found is true\nif (found) {\n  // Print the result\n  console.log(result);\n} else {\n  // Print false\n  console.log(false);\n}\n\n// Write a JavaScript function to find the last element occurring k times in a given array.\n// Declare variable\nvar arr = [1,2,3,3,4,5,5,5,5,5,6,6,6,7,8,8,8,8,8,8,8];\nvar k = 3;\n\n// Declare variable\nvar result;\n\n// Declare variable\nvar found;\n\n// Call function\nfound = lastOccur(arr, k);\n\n// If found is true\nif (found) {\n  // Print the result\n  console.log(result);\n} else {\n  // Print false\n  console.log(false);\n}\n\n// Write a JavaScript "]}
{"task_id": "MBJSP/352", "prompt": "function uniqueCharacters(str) {\n/**\n * * Write a JavaScript function to check whether all the characters in a given string are unique.\n */", "entry_point": "uniqueCharacters", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar x0 = uniqueCharacters(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = uniqueCharacters(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abab\";\nvar x2 = uniqueCharacters(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether all the characters in a given string are unique.", "language": "javascript", "canonical_solution": "  const charSet = new Set();\n  for (let i = 0; i < str.length; i++) {\n    if (charSet.has(str[i])) {\n      return false;\n    }\n    charSet.add(str[i]);\n  }\n  return true;\n}", "completion": ["\nconst isUnique = (str, max_length = 999) => {\n    if (str.length > max_length) {\n        return false;\n    }\n    if (str.length === max_length) {\n        return true;\n    }\n    if (str.length < max_length) {\n        return false;\n    }\n    return (str.split(\"\").sort().join(\"\")).split(\"\").sort().join(\"\") === str.split(\"\").sort().join(\"\");\n};\n\n/**\n * * Create a array of unique values for a given property.\n */\nconst unique = (property, max_length = 999) => {\n    if (property.length > max_length) {\n        return false;\n    }\n    if (property.length === max_length) {\n        return true;\n    }\n    if (property.length < max_length) {\n        return false;\n    }\n    return (property.split(\"\").sort().join(\"\")).split(\"\").sort().join(\"\") === property.split(\"\").sort().join(\"\");\n};\n\n/**\n * * Create a array of unique values for a given property.\n */\nconst formatNumbers = (property, max_length = 999) => {\n    if (property.length > max_length) {\n        return false;\n    }\n    if (property.length === max_length) {\n        return true;\n    }\n    if (property.length < max_length) {\n        return false;\n    }\n    return (property.split(\"\").sort().join(\"\")).split(\"\").sort().join(\"\") === property.split(\"\").sort().join(\"\");\n};\n\nmodule.exports = {\n    unique,\n    isUnique,\n", "\nvar unique_js = function unique_js(string) {\n  var hash = {};\n  for (var i = 0; i < string.length; i++) {\n    var character = string.charAt(i);\n    if (hash[character]) {\n      return false;\n    }\n    hash[character] = true;\n  }\n  return true;\n};\n```\n\n## Module\n\n### requirejs\n\nThis module exports all the modules and the main module using the `exports` object. It also adds some more methods to the `exports` object. It uses the `requirejs` module and it is called `requirejs`. It should only be used for developing, testing, and deploying packages.\n\n#### requirejs.define\n\nThis function takes one argument, the name of the module to be defined. The module name should be the same name in the file. It is not recommended to use this function directly, use the other defined functions, or use `requirejs` instead.\n\n#### requirejs.extend\n\nThis function takes two arguments, the name of the module to be extended and the module that will be extended. It returns the object that was extended. It is not recommended to use this function directly, use the other defined functions, or use `requirejs` instead.\n\n#### requirejs.import\n\nThis function takes one argument, the name of the module to be imported. It returns the imported module. It is not recommended to use this ", "\n\nif (!Array.prototype.every) {\n    Array.prototype.every = function (fn, thisArg) {\n        var result = true;\n        var i = 0;\n        var length = this.length;\n        var ret;\n        while (i < length) {\n            ret = fn.call(thisArg, this[i], i, this);\n            if (typeof ret === 'boolean') {\n                result = ret;\n                i = length;\n            } else {\n                i++;\n            }\n        }\n        return result;\n    };\n}\n\n})(typeof exports!== 'undefined'? exports : window);\n\n},{}],18:[", "\n\nvar uniqChars = function(str) {\n  var chars = [];\n  for (var i = 0; i < str.length; i++) {\n    chars.push(str.charAt(i));\n  }\n  return chars;\n};\n\n/**\n * * Write a JavaScript function to check whether any of the characters in a given string are unique.\n */\n\nvar uniqAnyChars = function(str) {\n  var chars = [];\n  for (var i = 0; i < str.length; i++) {\n    var char = str.charAt(i);\n    if (chars.indexOf(char) === -1) {\n      chars.push(char);\n    }\n  }\n  return chars;\n};\n\n/**\n * * Write a JavaScript function to count the number of unique characters in a given string.\n */\n\nvar uniqNumChars = function(str) {\n  var chars = uniqAnyChars(str);\n  var numChars = chars.length;\n  return numChars;\n};\n\n/**\n * * Write a JavaScript function to check whether all the characters in a given string have a particular base.\n */\n\nvar uniqCharsByBase = ", "\n\nconst unique = str => [...new Set(str)].sort().join('');\n\n// Test\n\n\nlet str = `\n"]}
{"task_id": "MBJSP/353", "prompt": "function removeColumn(list1, n) {\n/**\n * * Write a function to remove a specified column from a given nested list.\n */", "entry_point": "removeColumn", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]];\nvar arg01 = 0;\nvar x0 = removeColumn(arg00, arg01);\nvar v0 = [[2, 3], [4, 5], [1, 1]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [-2, 4, -5], [1, -1, 1]];\nvar arg11 = 2;\nvar x1 = removeColumn(arg10, arg11);\nvar v1 = [[1, 2], [-2, 4], [1, -1]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]];\nvar arg21 = 0;\nvar x2 = removeColumn(arg20, arg21);\nvar v2 = [[3], [7], [3], [15, 17], [7], [11]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove a specified column from a given nested list.", "language": "javascript", "canonical_solution": "  if (list1.length === 0) {\n    return [];\n  }\n  const list2 = [];\n  for (let i = 0; i < list1.length; i++) {\n    const list3 = [];\n    for (let j = 0; j < list1[i].length; j++) {\n      if (j !== n) {\n        list3.push(list1[i][j]);\n      }\n    }\n    list2.push(list3);\n  }\n  return list2;\n}", "completion": ["\nconst removeColumnFromNestedList = (list1, n) => {\n  let newList = list1.slice();\n  const column = newList.splice(n, 1);\n\n  newList.forEach((item, i) => {\n    if (i < n) {\n      item[column[i]] = item[column[i]].slice();\n    }\n  });\n  return newList;\n};\n\n/**\n * * Write a function to get the specified column from a given nested list.\n */\nconst getColumnFromNestedList = (list1, n) => {\n  let newList = list1.slice();\n  const column = newList.splice(n, 1);\n\n  newList.forEach((item, i) => {\n    if (i < n) {\n      item[column[i]] = item[column[i]].slice();\n    }\n  });\n  return column;\n};\n\n/**\n * * Write a function to add a specified column to a given nested list.\n */\nconst addColumnToNestedList = (list1, n, column) => {\n  const newList = list1.slice();\n  newList.splice(n + 1, 0, [column]);\n\n  newList.forEach((item, i) => {\n    if (i < n) {\n      item[column[i]] = item[column[i]].slice();\n    }\n  });\n  return newList;\n};\n\n/**\n * * Write a ", "\nlist1.splice(col, 1);\n}\n```\n\n##### Write a function to remove a specified row from a given nested list.\n```\n/**\n * * Write a function to remove a specified row from a given nested list.\n */\nlist1.splice(row, 1);\n```\n\n##### Write a function to remove a specified column and row from a given nested list.\n```\n/**\n * * Write a function to remove a specified column and row from a given nested list.\n */\nlist1.splice(col, 1);\nlist1.splice(row, 1);\n```\n\n##### Write a function to swap the position of two specified rows in a given nested list.\n```\n/**\n * * Write a function to swap the position of two specified rows in a given nested list.\n */\nlist1.splice(row1, 1);\nlist1.splice(row2, 1);\nlist1[row1] = list1[row2];\nlist1[row2] = temp;\n```\n\n##### Write a function to swap the position of two specified columns in a given nested list.\n```\n/**\n * * Write a function to swap the position of two specified columns in a given nested list.\n */\nlist1.splice(col1, 1);\nlist1.splice(col2, 1);\nlist1[col1] = list1[col2];\nlist1[col2] = temp;\n```\n\n##### Write a function to remove a specified column and row from a given nested list and return a new nested list that contains all the values in the original nested list.\n```\n/**\n * * Write a ", "\n\n/**\n * * Function to remove a specified column from a given nested list.\n * * @param {...Object} column - column indexes to remove from the nested list\n * * @returns {Object} return a nested list without the specified column\n */\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\n\n(", "\n};\n\n/**\n * * Write a function to sort a given nested list alphabetically.\n */\n\n/**\n * * Write a function to return the length of a given nested list.\n */\n\n/**\n * * Write a function to return the element at a specified index in a given nested list.\n */\n\n/**\n * * Write a function to return the element at a specified index in a given nested list,\n * provided that the element is not an array.\n */\n\n/**\n * * Write a function to return the element at a specified index in a given nested list,\n * provided that the element is an array.\n */\n\n/**\n * * Write a function to return the element at a specified index in a given nested list,\n * provided that the index is in the valid range of the nested list.\n */\n\n/**\n * * Write a function to return the last element of a given nested list,\n * provided that the element is not an array.\n */\n\n/**\n * * Write a function to return the last element of a given nested list,\n * provided that the element is an array.\n */\n\n/**\n * * Write a function to return the size (number of elements) of a given nested list.\n */\n\n/**\n * * Write a function to return the sum of the elements in a given nested list.\n */\n\n/**\n * * Write a function to return the sum of the elements in a given nested list,\n * provided that the element is not an array.\n */\n\n/**\n * * Write a function to return the sum of the elements in a given nested list,\n * provided that the element is an array.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/354", "prompt": "function tnAp(a, n, d) {\n/**\n * * Write a function to find t-nth term of arithemetic progression.\n */", "entry_point": "tnAp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = tnAp(arg00, arg01, arg02);\nvar v0 = 9;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 6;\nvar arg12 = 4;\nvar x1 = tnAp(arg10, arg11, arg12);\nvar v1 = 22;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 4;\nvar arg22 = 5;\nvar x2 = tnAp(arg20, arg21, arg22);\nvar v2 = 16;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find t-nth term of arithemetic progression.", "language": "javascript", "canonical_solution": "  if (n === 0) return 1;\n  return a + (n - 1) * d;\n}", "completion": ["\nvar t = (n == 1 || d == 1)? (Math.sqrt(3) - 1) / 2 : (Math.pow(3, n + 1) - 3) / (2 * (d - 1));\nreturn (t * (t * t - 3 * t + 1)) / (t * t - 2 * t + 3);\n}\n/**\n * The function that computes a function of t.\n */\nvar tn = (typeof (t) == 'undefined')? 1 : t;\n/**\n * The function that computes the derivative of the t-nth term of arithemetic progression.\n */\nvar dn = (typeof (t) == 'undefined')? 1 : tn * (tn - 3) / (2 * (tn - 1));\n/**\n * The function that computes the t-nth term of arithemetic progression.\n */\nvar tn1 = (typeof (t) == 'undefined')? 1 : tn - 1;\n/**\n * The function that computes the value of a arithemetic progression with\n * parameters t, n and d.\n */\n", "\n    const t = (x, n) => (n < 0)? 0 : ((x * n) % (2 * n) + n) % n;\n    const d = (x, n) => (n == 0)? 0 : (n == 1)? 1 : (2 * n) - 1;\n    const n = apa.length - 1;\n    const x = apa[t(x, n)];\n    console.log('t-nth term of arithemetic progression', t(x, n), x);\n    if (t(x, n) == 0) {\n        console.log('t-nth term of arithemetic progression', 'not found', x);\n    }\n}\n```\n\n## \u53c2\u8003\n\n[MDN / JavaScript / Arithmetic Progressions](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Arithmetic_Progression)\n<|endoftext|>", "\n\n    var t = (", "\n\tvar\n\t\tT,  // the function's value on step n\n\t\tP1, // the first term of the progression\n\t\tP2, // the second term of the progression\n\t\tA,  // the first difference of the progression\n\t\tD,  // the second difference of the progression\n\t\tN,  // the requested step\n\t\tN0  // the initial step\n\t;\n\n\tif (typeof n!== 'number' || isNaN(n)) {\n\t\t// Invalid argument was passed to the ", "\nint func(int x);\nvoid write_tnth_term(int x, int n);\nvoid write_tnth_term(int x, int n) {\n    if (func(x) > 0) {\n        write_tnth_term(x, n);\n    }\n}\n\nint func(int x) {\n    return x + 2;\n}\n\nint main(int argc, char *argv[]) {\n    int x = 1;\n    int n = 0;\n    int d = 1;\n\n    if (argc > 1) {\n        x = atoi(argv[1]);\n    }\n    if (argc > 2) {\n        n = atoi(argv[2]);\n    }\n    if (argc > 3) {\n        d = atoi(argv[3]);\n    }\n\n    write_tnth_term(x, n);\n    write_tnth_term(x, n, d);\n    return 0;\n}\n<|endoftext|>"]}
{"task_id": "MBJSP/355", "prompt": "function countRectangles(radius) {\n/**\n * * Write a JavaScript function to count the number of rectangles in a circle of radius r.\n */", "entry_point": "countRectangles", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = countRectangles(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar x1 = countRectangles(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 0;\nvar x2 = countRectangles(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the number of rectangles in a circle of radius r.", "language": "javascript", "canonical_solution": "    \"use strict\";\n    var rectangles = 0;\n    var diameter = 2 * radius;\n    var diameterSquare = diameter * diameter;\n    for (var a = 1; a <= 2 * radius; a++) {\n        for (var b = 1; b <= 2 * radius; b++) {\n            var diagnalLengthSquare = (a * a + b * b);\n            if (diagnalLengthSquare <= diameterSquare) {\n                rectangles++;\n            }\n        }\n    }\n    return rectangles;\n}", "completion": ["\n\n/**\n * * Calculate the total area of a rectangle with the same width and height as the circle.\n */\n\n/**\n * * Calculate the total perimeter of a rectangle with the same width and height as the circle.\n */\n\n/**\n * * Count the number of rectangles in a circle of radius r using a nested function.\n */\n\n})();\n\n}).call(this);\n\n},{}],58:[", "\nexport function getRectangles(r, width, height, padding) {\n  const scale = r * (padding || 1);\n  let widthInPixels = width / scale;\n  let heightInPixels = height / scale;\n  let x = -widthInPixels / 2;\n  let y = -heightInPixels / 2;\n  let result = [];\n  while (x <= widthInPixels / 2) {\n    while (y <= heightInPixels / 2) {\n      const xSquared = x * x;\n      const ySquared = y * y;\n      if (xSquared + ySquared <= r * r) {\n        result.push({ x: x, y: y });\n      }\n      y++;\n    }\n    y = -heightInPixels / 2;\n    x++;\n  }\n  return result;\n}\n\n/**\n * * Write a JavaScript function to count the number of lines in a text of width w.\n */\nexport function getLines(w, fontSize) {\n  return Math.ceil(w / (fontSize || 14));\n}\n\n/**\n * * Write a JavaScript function to count the number of words in a text of width w.\n */\nexport function getWords(w, fontSize) {\n  return w / (fontSize || 14);\n}\n\n/**\n * * Write a JavaScript function to calculate the width of a text.\n */\nexport ", "\n", "\nconst circle = radius => {\n  const segment = (x, y, radius) => {\n    const dx = Math.abs(x - x2);\n    const dy = Math.abs(y - y2);\n    const segmentLength = Math.sqrt(dx * dx + dy * dy);\n    return segmentLength <= radius? segmentLength : Infinity;\n  };\n  const points = [];\n  const segments = [];\n  for (let x = x2; x <= x1; x += x2) {\n    for (let y = y2; y <= y1; y += y2) {\n      points.push({ x, y });\n    }\n  }\n  for (let index = 0; index < points.length; index++) {\n    let segmentLength = segment(points[index].x, points[index].y, radius);\n    if (segmentLength < radius) {\n      segments.push(points[index]);\n    }\n  }\n  let pointsCount = 0;\n  for (let index = 0; index < points.length; index++) {\n    const segmentLength = segment(points[index].x, points[index].y, radius);\n    pointsCount += segmentLength > radius? 1 : 0;\n  }\n  return pointsCount;\n};\nconst circle2 = radius => {\n  const segment = (x, y, radius) => {\n    const dx = Math.abs(x - x2);\n    const dy = Math.abs(y - y2);\n    const segmentLength = Math.sqrt(dx * dx + dy * dy);\n    return segmentLength <= radius? segmentLength : Infinity;\n  };\n  const points = [];\n  const segments = [];\n  for (let x = x", "\n\n"]}
{"task_id": "MBJSP/356", "prompt": "function findAngle(a, b) {\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */", "entry_point": "findAngle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 47;\nvar arg01 = 89;\nvar x0 = findAngle(arg00, arg01);\nvar v0 = 44;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 45;\nvar arg11 = 95;\nvar x1 = findAngle(arg10, arg11);\nvar v1 = 40;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 50;\nvar arg21 = 40;\nvar x2 = findAngle(arg20, arg21);\nvar v2 = 90;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the third angle of a triangle using two angles.", "language": "javascript", "canonical_solution": "  return 180 - (a + b);\n}", "completion": ["\n} else if (a < b && b < c) {\n/**\n * * Write a function to find the third angle of a triangle using only one angle.\n */\n} else if (a == b || a == c || b == c) {\n/**\n * * Write a ", "\n\n/**\n * * Draw the triangle using two angles.\n */\n\n/**\n * * Find the third angle of a triangle using two angles.\n */\n\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */\n\n/**\n * * Draw the triangle using two angles.\n */\n\n/**\n * * Find the third angle of a triangle using two angles.\n */\n\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */\n\n/**\n * * Draw the triangle using two angles.\n */\n\n/**\n * * Find the third angle of a triangle using two angles.\n */\n\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */\n\n/**\n * * Draw the triangle using two angles.\n */\n\n/**\n * * Find the third angle of a triangle using two angles.\n */\n\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */\n\n/**\n * * Draw the triangle using two angles.\n */\n\n/**\n * * Find the third angle of a triangle using two angles.\n */\n\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */\n\n/**\n * * Draw the triangle using two angles.\n */\n\n/**\n * * Find the third angle of a triangle using two angles.\n */\n\n/**\n * * Write a function to find the third angle of a triangle using two angles.\n */\n\n/**\n * * Draw the triangle using two angles.\n */\n\n/**\n * * Find the third angle of a triangle using two angles.\n */\n\n/**\n * * Write a ", "\n", "\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-var-requires */\nvar a;\nvar b;\n/**\n * * Find the third angle of a triangle using two angles.\n *\n * @param {number} a - The first angle of the triangle\n * @param {number} b - The second angle of the triangle\n *\n * @return {number} The third angle of the triangle\n */\n", "\n} else if (b > 0 && a <= 0) {\n/**\n * * Write a function to find the third angle of a triangle using only one angle.\n */\n} else if (a >= b && a <= 180) {\n/**\n * * Write a function to find the third angle of a triangle using three angles.\n */\n} else if (a < b && a >= 0 && b <= 180) {\n/**\n * * Write a function to find the third angle of a triangle using four angles.\n */\n} else if (a < 0 && b >= 0 && b <= 180) {\n/**\n * * Write a function to find the third angle of a triangle using five angles.\n */\n} else if (a < b && a >= 0 && b > 180) {\n/**\n * * Write a function to find the third angle of a triangle using six angles.\n */\n} else if (b > 180) {\n/**\n * * Write a function to find the third angle of a triangle using seven angles.\n */\n}\n\nconsole.log(result);\n```\n\n</div>\n\n</div>\n</div>\n\n</div>\n</div>\n\n<div class=\"jb_cell\">\n\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>We\u2019ve now defined our new "]}
{"task_id": "MBJSP/357", "prompt": "function findMax(testlist) {\n/**\n * * Write a function to find the maximum element of all the given tuple records.\n */", "entry_point": "findMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]];\nvar x0 = findMax(arg00);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]];\nvar x1 = findMax(arg10);\nvar v1 = 11;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]];\nvar x2 = findMax(arg20);\nvar v2 = 12;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum element of all the given tuple records.", "language": "javascript", "canonical_solution": "  let max = 0;\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = 0; j < testList[i].length; j++) {\n      if (testList[i][j] > max) {\n        max = testList[i][j];\n      }\n    }\n  }\n  return max;\n}", "completion": ["\n    var functionToFindMax = ", "\n$(\"#input-0\").val(tup[0]);\n$(\"#input-1\").val(tup[1]);\n$(\"#input-2\").val(tup[2]);\n$(\"#input-3\").val(tup[3]);\n$(\"#input-4\").val(tup[4]);\n$(\"#input-5\").val(tup[5]);\n$(\"#input-6\").val(tup[6]);\n$(\"#input-7\").val(tup[7]);\n$(\"#input-8\").val(tup[8]);\n$(\"#input-9\").val(tup[9]);\n$(\"#input-10\").val(tup[10]);\n$(\"#input-11\").val(tup[11]);\n$(\"#input-12\").val(tup[12]);\n$(\"#input-13\").val(tup[13]);\n$(\"#input-14\").val(tup[14]);\n$(\"#input-15\").val(tup[15]);\n$(\"#input-16\").val(tup[16]);\n$(\"#input-17\").val(tup[17]);\n$(\"#input-18\").val(tup[18]);\n$(\"#input-19\").val(tup[19]);\n$(\"#input-20\").val(tup[20]);\n$(\"#input-21\").val(tup[21]);\n$(\"#input-22\").val(tup[22]);\n$(\"#input-23\").val(tup[23]);\n$(\"#input-24\").val(tup[24]);\n$(\"#input-25\").val(tup[25]);\n$(\"#input-26\").val(", "\n\n", "\n\n};\n\nmodule.exports = function() {\n/**\n * * Returns the maximum element of all the given tuple records.\n */\n\n};\n\n}).call(this,require(\"oMfpAn\"),typeof self!== \"undefined\"? self : typeof window!== \"undefined\"? window : {},require(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/../../node_modules/gulp-ts-helpers/src/parse_record.js\",\"/../../node_modules/gulp-ts-helpers/src\")\n},{\"buffer\":17,\"oMfpAn\":34}],57:[", "\n\n  var output = [], max = 0, maxIndex = 0;\n\n  // tslint:disable-next-line\n  for (var i = 0; i < testlist.length; i++) {\n    var tuple = testlist[i];\n    var score = 0;\n\n    // tslint:disable-next-line\n    for (var j = 0; j < tuple.length; j++) {\n      var word = tuple[j];\n\n      // tslint:disable-next-line\n      if (j === 0) {\n        score += word.get(\"score\");\n      }\n\n      // tslint:disable-next-line\n      if (word.get(\"score\") > score) {\n        score = word.get(\"score\");\n        max = word.get(\"score\");\n        maxIndex = j;\n      }\n    }\n\n    output.push({\n      name: tuple[maxIndex].get(\"word\"),\n      value: score\n    });\n  }\n\n  return output;\n};\n\nmodule.exports = exports.default;\n},{\"@babel/helper-module-imports\":15}],2:["]}
{"task_id": "MBJSP/358", "prompt": "function moddivList(nums1, nums2) {\n/**\n * * Write a function to find modulo division of two lists using map and lambda function.\n */", "entry_point": "moddivList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [4, 5, 6];\nvar arg01 = [1, 2, 3];\nvar x0 = moddivList(arg00, arg01);\nvar v0 = [0, 1, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 2];\nvar arg11 = [1, 4];\nvar x1 = moddivList(arg10, arg11);\nvar v1 = [0, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [90, 120];\nvar arg21 = [50, 70];\nvar x2 = moddivList(arg20, arg21);\nvar v2 = [40, 50];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find modulo division of two lists using map and lambda function.", "language": "javascript", "canonical_solution": "  return nums1.map((num1, index) => num1 % nums2[index])\n}", "completion": ["\n  }\n\n  return [][];\n\n};\n// $FlowExpectedError\nArray.from(add());\n\n// $FlowExpectedError\nArray.from(add(), 1);\n<|endoftext|>", "\nint findMod(list<int> l1, list<int> l2) {\n    // write your code here\n    if (l1.empty() || l2.empty()) {\n        return -1;\n    }\n\n    auto it1 = l1.begin();\n    auto it2 = l2.begin();\n    int cnt = 0;\n    while (it1!= l1.end() && it2!= l2.end()) {\n        int temp = it1->first * it2->first;\n        if (it1->first == it2->first) {\n            cnt += it1->second * it2->second;\n        } else if (it1->first > it2->first) {\n            cnt += it1->second * it2->second;\n            ++it2;\n        } else {\n            cnt += it1->second * it2->second;\n            ++it1;\n        }\n        ++it1;\n    }\n    return cnt % l1.size();\n}\n<|endoftext|>", "\n    return Array.from({ length: nums1.length }, (v, k) => {\n        return nums1[k] % nums2[k];\n    });\n    }\n    ```\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a function to find modulo division of two lists using map and lambda function.\n- [ ] Write a ", "\n    let [nums1, nums2] = [nums1, nums2]\n    const div = (a, b) => a % b\n    const modulo = (a, b) => a % b\n    //div(nums1, nums2)\n    //    return nums1.filter(x => x % nums2 === 0).length\n    //modulo(nums1, nums2)\n    //    return nums1.filter(x => x % nums2 === 0).length\n    // TODO: your implementation\n}\n```\n\n#### Expected Time Complexity\n\n##### O(n)\n\n##### O(1)\n\n#### Question 7: **Merge Intervals**\n\n`Given an array of Intervals, merge all the overlapping Intervals and return the result.`\n\n1. `Find the start and end times for each interval`\n2. `Intersect the intervals`\n3. `Merge overlapping intervals`\n\n```\nInput: [1, 3], [2, 6], [8, 10], [15, 18]\nOutput: [1, 6], [8, 10], [15, 18]\n```\n\n```\nInput: [1, 4], [4, 5]\nOutput: [1, 5]\n```\n\n#### Expected Time Complexity\n\n##### O(n)\n\n##### O(1)\n\n#### Question 8: **Find the Time to Find the Factorial**\n\n`Given an array of positive integers, find the time to find the factorial of the last number in the array.`\n\n```\nInput: [1, 5, 6, 7, 8, 9]\nOutput: 10\n```\n\n```", "\n\n\n/**\n * * Write a function to find modulo division of two lists using map and lambda "]}
{"task_id": "MBJSP/359", "prompt": "function checkSolution(a, b, c) {\n/**\n * * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n */", "entry_point": "checkSolution", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = checkSolution(arg00, arg01, arg02);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 2;\nvar arg12 = 3;\nvar x1 = checkSolution(arg10, arg11, arg12);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = -5;\nvar arg22 = 6;\nvar x2 = checkSolution(arg20, arg21, arg22);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.", "language": "javascript", "canonical_solution": "    let discriminant = b * b - 4 * a * c;\n    let root1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n    let root2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n    if (root1 < 0 && root2 < 0) {\n        return \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}", "completion": ["\n// Your code goes here\n},(c) => {\n// Your code goes here\n})\n</script>\n```\n\nIn the line from \"Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\" to \"Your code goes here.\", note that the quadratic equation has been written as: `a*x^2 + b*x + c = 0`.\n\nThe quadratic equation is `a` times a square plus `b` times another square. Let's write a JavaScript function to do this:\n\n```javascript\n/**\n * * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n */\n// Your code goes here\n```\n\nThe quadratic equation is `a` times a square plus `b` times another square, so the root is `-b / (2*a)`. If this root is negative, the equation has a solution that is not twice of the other. If the root is positive, the equation has two solutions. If the root is zero, the equation has no solution.\n\nWhat would be the best way to write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not?\n\n**Solution:**\n\n```javascript\n/**\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n */\n// Your code goes here\n```\n\nNote that `a` and `b` are arguments of the JavaScript function.\n\nIt is not necessary to store the arguments of the JavaScript function as variables inside the function. It is sufficient to store them as variables in the function's return statement.\n\n```javascript\n/**\n * Write a JavaScript ", "\n}\n</code></pre>\n<p>We can find the roots of the quadratic equation by using the quadratic formula, where, <code>a</code> and <code>b</code> are the coefficients of the quadratic equation. <code>a</code> and <code>b</code> are given by the function and <code>c</code> is the <code>x</code> value of the point to be evaluated.</p>\n<pre><code>", "\n", "\nconst write_function = require('./write_function');\nconst _ = require('./../utils/utils');\n\n/**\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * Write a JavaScript ", "\n"]}
{"task_id": "MBJSP/360", "prompt": "function getCarol(n) {\n/**\n * * Write a function to find the n\u2019th carol number.\n */", "entry_point": "getCarol", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = getCarol(arg00);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = getCarol(arg10);\nvar v1 = 223;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = getCarol(arg20);\nvar v2 = 959;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the n\u2019th carol number.", "language": "javascript", "canonical_solution": "    if (n === 2) {\n        return 7;\n    }\n    if (n === 4) {\n        return 223;\n    }\n    if (n === 5) {\n        return 959;\n    }\n}", "completion": ["\n};\n// $.fn.fonts = function(font) {\n// /**\n// * * Write a function to get the font name of the font.\n// */\n// };\n// $.fn.font = function(font) {\n// /**\n// * * Write a function to get the font size of the font.\n// */\n// };\n// $.fn.fontweight = function(fontweight) {\n// /**\n// * * Write a function to get the font weight of the font.\n// */\n// };\n// $.fn.fontsize = function(fontsize) {\n// /**\n// * * Write a function to get the font size of the font.\n// */\n// };\n// $.fn.fontstretch = function(fontstretch) {\n// /**\n// * * Write a function to get the font stretch of the font.\n// */\n// };\n// $.fn.fontstyle = function(fontstyle) {\n// /**\n// * * Write a function to get the font style of the font.\n// */\n// };\n// $.fn.fontfamily = function(fontfamily) {\n// /**\n// * * Write a function to get the font family of the font.\n// */\n// };\n// $.fn.textalign = function(textalign) {\n// /**\n// * * Write a function to get the text alignment of the text.\n// */\n// };\n// $.fn.textjustify = function(textjustify) {\n// /**\n// * * Write a function to get the text justification of the text.\n// */\n// };\n// $.fn.textindent = function(textindent) {\n// /**\n// * * Write a ", "\n\n", "\n", "\n};\nn = \"nth\";\n// Write the function to find the n\u2019th carol number.\n// Function to find the n\u2019th carol number\n", "\n    var nthArr = [],\n        nthArr2 = [];\n\n    var stack = [];\n    var i = 1;\n\n    while (i < n + 1) {\n        stack.push(i);\n        i++;\n    }\n\n    stack.forEach("]}
{"task_id": "MBJSP/361", "prompt": "function removeEmpty(list1) {\n/**\n * * Write a function to remove empty lists from a given list of lists.\n */", "entry_point": "removeEmpty", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[], [], [], \"Red\", \"Green\", [1, 2], \"Blue\", [], []];\nvar x0 = removeEmpty(arg00);\nvar v0 = [\"Red\", \"Green\", [1, 2], \"Blue\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[], [], [], [], [], \"Green\", [1, 2], \"Blue\", [], []];\nvar x1 = removeEmpty(arg10);\nvar v1 = [\"Green\", [1, 2], \"Blue\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[], [], [], \"Python\", [], [], \"programming\", \"language\", [], [], [], [], []];\nvar x2 = removeEmpty(arg20);\nvar v2 = [\"Python\", \"programming\", \"language\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove empty lists from a given list of lists.", "language": "javascript", "canonical_solution": "  return list1.filter(function(list) {\n    return list.length > 0;\n  });\n}", "completion": ["\nexports.remove_empty_lists = function (list1) {\n/**\n * * Check whether a given list contains no list.\n */\nexports.contains_no_list = function (list1) {\n/**\n * * If a given list contains no list, then remove it.\n */\nexports.remove_empty_lists = function (list1) {\nreturn list1.filter(", "\ntrie.set('1', 1);\ntrie.set('1', 2);\ntrie.set('1', 3);\ntrie.set('1', 4);\ntrie.set('1', 5);\ntrie.set('1', 6);\ntrie.set('1', 7);\ntrie.set('1', 8);\ntrie.set('1', 9);\ntrie.set('1', 10);\ntrie.set('1', 11);\ntrie.set('1', 12);\ntrie.set('1', 13);\ntrie.set('1', 14);\ntrie.set('1', 15);\ntrie.set('1', 16);\ntrie.set('1', 17);\ntrie.set('1', 18);\ntrie.set('1', 19);\ntrie.set('1', 20);\ntrie.set('1', 21);\ntrie.set('1', 22);\ntrie.set('1', 23);\ntrie.set('1', 24);\ntrie.set('1', 25);\ntrie.set('1', 26);\ntrie.set('1', 27);\ntrie.set('1', 28);\ntrie.set('1', 29);\ntrie.set('1', 30);\ntrie.set('1', 31);\ntrie.set('1', 32);\ntrie.set('1', 33);\ntrie.set('1', 34);\ntrie.set('1', 35);\ntrie.set('1', 36);\ntrie.set('1', 37);\ntrie.set('1', 38);\ntrie.set('1', 39);\ntrie.set('1', 40);", "\nexports.remove_empty_lists = function(list1) {\n\tvar list2 = [];\n\n\tfor(var i = 0; i < list1.length; i++) {\n\t\tif(list1[i].length > 0) {\n\t\t\tlist2.push(list1[i]);\n\t\t}\n\t}\n\n\treturn list2;\n};\n\n/**\n * * Write a function to get the maximum number in an array.\n */\nexports.max = function(list1) {\n\tvar max = 0;\n\n\tfor(var i = 0; i < list1.length; i++) {\n\t\tif(list1[i] > max) {\n\t\t\tmax = list1[i];\n\t\t}\n\t}\n\n\treturn max;\n};\n\n/**\n * * Write a function to get the minimum number in an array.\n */\nexports.min = function(list1) {\n\tvar min = 0;\n\n\tfor(var i = 0; i < list1.length; i++) {\n\t\tif(list1[i] < min) {\n\t\t\tmin = list1[i];\n\t\t}\n\t}\n\n\treturn min;\n};\n\n/**\n * * Write a function to get the difference between the maximum and minimum number of an array.\n */\nexports.diff = function(list1) {\n\tvar diff = 0;\n\n\tfor(var i = 0; i < list1.length; i++) {\n\t\tdiff += list1[i];\n\t}\n\n\treturn diff;\n};\n\n/**\n * * Write a function to compute the average of a list of numbers.\n */\nexports.average = ", "\nexport const removeEmptyLists = list => {\n  if (!list) {\n    return [];\n  }\n  const lists = [...list];\n  lists.forEach(l => {\n    if (!l.items || l.items.length === 0) {\n      lists.splice(lists.indexOf(l), 1);\n    }\n  });\n  return lists;\n};\n<|endoftext|>", "\n(list2) => {\n/**\n * * Write a function to remove empty lists from a given list of lists.\n */\n}\n```\n\nIn this case, we have to write a function that receives two lists and returns a new list.\n\n### Exercise 8\n\n**Given**\n\n- A list of lists, where each list in the list is a subset of another list (we've already seen this example in the past, but this will be generalized).\n\n**Return**\n\n- A new list, where all the lists have been removed.\n\n```javascript\nimport { removeEmptyLists } from './remove-empty-lists'\n\nconst arr = [[1, 2], [3, 4], [5, 6], [7, 8]];\n\nremoveEmptyLists(arr); // [1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n**Hint:**\n\n> **The function `removeEmptyLists` has been written so that it works as a wrapper.**\n\n> In the first version, `removeEmptyLists` has been written so that it works as a wrapper and it's the only "]}
{"task_id": "MBJSP/362", "prompt": "function maxOccurrences(nums) {\n/**\n * * Write a JavaScript function to find the item with maximum occurrences in a given list.\n */", "entry_point": "maxOccurrences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 1, 2, 3, 12, 4, 2];\nvar x0 = maxOccurrences(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 6, 7, 0, 1, 0, 1, 0];\nvar x1 = maxOccurrences(arg10);\nvar v1 = [1, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 1, 2, 4, 1];\nvar x2 = maxOccurrences(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the item with maximum occurrences in a given list.", "language": "javascript", "canonical_solution": "    const map = {};\n    let max = 0;\n    let result = [];\n    for (let num of nums) {\n        if (map[num] === undefined) {\n            map[num] = 0;\n        }\n        map[num]++;\n        if (map[num] > max) {\n            max = map[num];\n            result = [num];\n        } else if (map[num] === max) {\n            result.push(num);\n        }\n    }\n    return result.length > 1 ? result : result[0];\n}", "completion": ["\n};\n}\n\n// * The following code shows that the above functions\n// * are not an exhaustive list of the methods in the class `Number`.*\n\n// * `isNaN` and `isFinite` are provided by the ECMAScript 6 `Number` class.\n\n// * `parseInt` and `parseFloat` are provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the ECMAScript 6 `Number` class.\n\n// * `Number` is provided by the EC", "\n", "\n", "\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript function to return the item with maximum occurrences in a given list.\n */\n\n/**\n * * Write a JavaScript ", "\n"]}
{"task_id": "MBJSP/363", "prompt": "function addKElement(testlist, k) {\n/**\n * * Write a function to add the k elements to each element in the tuple.\n */", "entry_point": "addKElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3, 4], [2, 4, 6], [3, 8, 1]];\nvar arg01 = 4;\nvar x0 = addKElement(arg00, arg01);\nvar v0 = [[5, 7, 8], [6, 8, 10], [7, 12, 5]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nvar arg11 = 8;\nvar x1 = addKElement(arg10, arg11);\nvar v1 = [[9, 10, 11], [12, 13, 14], [15, 16, 17]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 12, 13], [14, 15, 16], [17, 18, 19]];\nvar arg21 = 9;\nvar x2 = addKElement(arg20, arg21);\nvar v2 = [[20, 21, 22], [23, 24, 25], [26, 27, 28]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to add the k elements to each element in the tuple.", "language": "javascript", "canonical_solution": "  const result = [];\n  for (let i = 0; i < testList.length; i++) {\n    const temp = [];\n    for (let j = 0; j < testList[i].length; j++) {\n      temp.push(testList[i][j] + k);\n    }\n    result.push(temp);\n  }\n  return result;\n}", "completion": ["\n    writer(writer, k, list, k, tuple, k, count) {\n        let i = 0;\n        for (; i < k; ++i) {\n            writer(writer, k, list, k, tuple, k, count);\n        }\n        for (; i < count; ++i) {\n            writer(writer, k, list, k, tuple, k, count);\n        }\n    }\n/**\n * * A function to add the k elements to each element in the tuple.\n */\n    writer(writer, k, list, k, tuple, k, count) {\n        let i = 0;\n        for (; i < k; ++i) {\n            writer(writer, k, list, k, tuple, k, count);\n        }\n        writer(writer, k, list, k, tuple, k, count);\n    }\n/**\n * * A function to add the k elements to each element in the tuple.\n */\n    writer(writer, k, list, k, tuple, k, count) {\n        let i = 0;\n        for (; i < k; ++i) {\n            writer(writer, k, list, k, tuple, k, count);\n        }\n        writer(writer, k, list, k, tuple, k, count);\n    }\n/**\n * * A ", "\n", "\n\n}\n\n// These are the test functions that need to be written:\n\n", "\nvar map = function(obj, arg) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    var k = args.pop();\n    for (var i = 0; i < obj.length; i++) {\n        obj[i].push(args.shift());\n    }\n};\n\n/**\n * * Generate a list of k elements from each element in the tuple.\n */\nvar zip = function(obj, arg) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    var k = args.pop();\n    var r = [];\n    for (var i = 0; i < obj.length; i++) {\n        r.push(args.shift());\n    }\n    return r;\n};\n\n/**\n * * Generate a list of k elements from each element in the tuple.\n */\nvar flat = function(obj, arg) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    var k = args.pop();\n    var r = [];\n    for (var i = 0; i < obj.length; i++) {\n        for (var j = 0; j < obj[i].length; j++) {\n            r.push(obj[i][j]);\n        }\n    }\n    return r;\n};\n\nvar join = function(list, sep) {\n    if (sep === undefined) {\n        sep = '';\n    }\n    return list.join(sep);\n};\n\nvar arr_map = function(arr, func, k) {\n    if (k === undefined) {\n        k = 0;\n    }\n    return arr.map(", "\n"]}
{"task_id": "MBJSP/364", "prompt": "function minFlipToMakeStringAlternate(str) {\n/**\n * * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n */", "entry_point": "minFlipToMakeStringAlternate", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"0001010111\";\nvar x0 = minFlipToMakeStringAlternate(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"001\";\nvar x1 = minFlipToMakeStringAlternate(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"010111011\";\nvar x2 = minFlipToMakeStringAlternate(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "language": "javascript", "canonical_solution": "  let flipCount = 0;\n  let flipCountTemp = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i + 1]) {\n      flipCountTemp++;\n    } else {\n      flipCount += Math.min(flipCountTemp, 1);\n      flipCountTemp = 0;\n    }\n  }\n  return flipCount + Math.min(flipCountTemp, 1);\n}", "completion": ["\n", "\n    if(str == \"\")\n        return 0;\n    \n    if(str.length() % 2 == 0) {\n        return flip(str);\n    }\n    return flip(str) + flip(str.substr(1));\n}\n\nint flipsToMakeValidIP(string str) {\n    return flipToMakeValid(str, 0);\n}\n\nint flipToMakeValid(string str, int start) {\n    if(start >= str.length())\n        return 0;\n    \n    string left = str.substr(0, start);\n    string right = str.substr(start);\n    \n    int flips = flipToMakeValid(right, start);\n    \n    // If the current string is a valid IP and the current character is a digit then we need to find the number of flips needed to make the left string a sequence of alternate characters\n    if(isValidIP(left) && str[start] - '0' >= 0 && str[start] - '0' <= 9) {\n        flips += flipToMakeValid(left, start + 1);\n    }\n    \n    return flips;\n}\n\nint flipsToMakeValidIP2(string str) {\n    return flipToMakeValid2(str, 0);\n}\n\nint flipToMakeValid2(string str, int start) {\n    if(start >= str.length())\n        return 0;\n    \n    string left = str.substr(0, start);\n    string right = str.substr(start);\n    \n    int flips = flipToMakeValid2(right, start);\n    \n    // If the current string is a valid IP and the current character is a digit then we need to find the number of flips needed to make the left", "\n\nvar makeStringFlipToMakeAlternate = function makeStringFlipToMakeAlternate(str) {\n  return (str.match(/[0-1]|[0-9]/) || [])[0] === '1'? 'alternate' : 'flat';\n};\n\n// Singly-linked list node.\n\nvar node = function node(value, next) {\n  this.value = value;\n  this.next = next;\n};\n\n/**\n * * Linked list to represent a sequence of alternate characters.\n */\n\nvar list = function list() {\n  var head = null;\n  var tail = null;\n  var current = null;\n\n  return {\n    head: head,\n    tail: tail,\n    current: current\n  };\n};\n\n// A cache of recently-used strings.\n\nvar cache = {\n  str: '',\n  time: 0\n};\n\n/**\n * * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n */\n\n", "\nvar writeFunction = function writeFunction(str, func) {\n  str = binarify(str);\n  for (var i = 0; i < str.length; i += 1) {\n    func(str[i]);\n  }\n};\n\nwriteFunction('1010111101111110111101111011011111111001101111011101', ", "\n\n// Return the number of flips required to make the given string a sequence of alternate characters.\n\n// Provided code\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n\n// Provided code\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n\n// Provided code\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the number of flips required to make the given string a sequence of alternate characters.\n// Return the"]}
{"task_id": "MBJSP/365", "prompt": "function countDigit(n) {\n/**\n * * Write a JavaScript function to count the number of digits of a given number.\n */", "entry_point": "countDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12345;\nvar x0 = countDigit(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 11223305;\nvar x1 = countDigit(arg10);\nvar v1 = 8;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4123459;\nvar x2 = countDigit(arg20);\nvar v2 = 7;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the number of digits of a given number.", "language": "javascript", "canonical_solution": "    return n.toString().length;\n}", "completion": ["\n\tvar counter = function(n) {\n\t\treturn Number(n).toString().length;\n\t};\n\n/**\n * * Set the date to the given value.\n */\n\tvar date = function(n) {\n\t\treturn new Date(n);\n\t};\n\n/**\n * * Write a JavaScript function to count the number of digits of a given number.\n */\n\tvar count_digits = function(n) {\n\t\treturn Number(n).toString().replace(/\\D/g, '').length;\n\t};\n\n/**\n * * Set the date to the given value.\n */\n\tvar count_digits_date = function(n) {\n\t\treturn new Date(n).getDate().toString().replace(/\\D/g, '').length;\n\t};\n\n/**\n * * Write a JavaScript function to count the number of digits of a given number.\n */\n\tvar count_digits_month = function(n) {\n\t\treturn new Date(n).getMonth().toString().replace(/\\D/g, '').length;\n\t};\n\n/**\n * * Write a JavaScript function to count the number of digits of a given number.\n */\n\tvar count_digits_year = function(n) {\n\t\treturn new Date(n).getFullYear().toString().replace(/\\D/g, '').length;\n\t};\n\n/**\n * * Write a JavaScript function to count the number of digits of a given number.\n */\n\tvar count_digits_time = ", "\n\n", "\n    ", "\nvar digits = function digits(n) {\n\tvar count = 0;\n\twhile (n) {\n\t\tn = n % 10;\n\t\tcount++;\n\t}\n\treturn count;\n};\n\nif(typeof(window) === 'undefined') {\n\tvar jQuery = function jQuery(selector) {\n\t\treturn (typeof(jQuery)!= 'undefined')? jQuery.fn.init(selector) : new jQuery(selector);\n\t};\n}\n\njQuery(document).ready(", "\n\n  return Math.ceil(Math.log10(n)) + 1;\n\n}\n\nvar last = function last(n) {\n/**\n * * Return the last n elements of an array\n */\n\n  var arr = Array.apply(null, {\n      length: n\n    }),\n      l = arr.length,\n      i = n - 1,\n      val,\n      arr2 = Array();\n\n  while (i--) {\n      val = arr[i];\n      arr2[l - i - 1] = val;\n  }\n\n  return arr2;\n\n};\n\nvar last2 = function last2(arr, n) {\n/**\n * * Return the last n elements of an array\n */\n\n  return arr.slice(arr.length - n, arr.length);\n\n};\n\nvar last3 = function last3(arr, n) {\n/**\n * * Return the last n elements of an array\n */\n\n  var arr2 = arr.slice(arr.length - n);\n  var arr3 = arr.slice(0, arr.length - n);\n  return arr3.concat(arr2);\n\n};\n\nvar last4 = function last4(arr, n) {\n/**\n * * Return the last n elements of an array\n */\n\n  var arr2 = arr.slice(arr.length - n);\n  var arr3 = arr.slice(0, arr.length - n);\n  return arr3.concat(arr2, arr3);\n\n};\n\nvar last5 = "]}
{"task_id": "MBJSP/366", "prompt": "function adjacentNumProduct(listnums) {\n/**\n * * Write a JavaScript function to find the largest product of the pair of adjacent elements from a given list of integers.\n */", "entry_point": "adjacentNumProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6];\nvar x0 = adjacentNumProduct(arg00);\nvar v0 = 30;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar x1 = adjacentNumProduct(arg10);\nvar v1 = 20;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3];\nvar x2 = adjacentNumProduct(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the largest product of the pair of adjacent elements from a given list of integers.", "language": "javascript", "canonical_solution": "  let max = 0;\n  for (let i = 0; i < listNums.length - 1; i++) {\n    let product = listNums[i] * listNums[i + 1];\n    if (product > max) {\n      max = product;\n    }\n  }\n  return max;\n}", "completion": ["\n", "\n", "\n    def largestProductOfPair(e:Int) = {\n        val left = e - 1;\n        val right = e + 1;\n        val leftProduct = largestProductOfPair(left);\n        val rightProduct = largestProductOfPair(right);\n\n        if (leftProduct > rightProduct) {\n            println(leftProduct * e)\n        } else {\n            println(rightProduct * e)\n        }\n    }\n\n    largestProductOfPair(4);\n    largestProductOfPair(5);\n    largestProductOfPair(7);\n    largestProductOfPair(2);\n    largestProductOfPair(3);\n    largestProductOfPair(6);\n    largestProductOfPair(1);\n}\n\ndef main(args: Array[String]) {\n    println(\"Product of largest pair: \" + largestProductOfPair(arg1))\n}\n```\n\n```\nProduct of largest pair: 5040\n```\n\n## \u4e8c\u53c9\u6811\n\n\u5728\u7b97\u6cd5\u9898\u7684\u57fa\u7840\u4e0a\uff0c\u57fa\u672c\u7684\u4e8c\u53c9\u6811\u7684\u64cd\u4f5c\u4e5f\u88ab\u79f0\u4e3a\u7b97\u6cd5\u7684\u9a71\u52a8\u884c\u4e3a\u3002\n\n### \u5b9a\u4e49\n\n\u7ed9\u5b9a\u7684\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u6574\u6570\u5bf9\u5e94\u4e00\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811\uff0c\u975e\u7a7a\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u4fdd\u5b58\u4e00\u4e2a\ufffd", "\n    ", "\nprint(largestProduct([1,2,3,4,5,6,7,8,9]))\nprint(largestProduct([1,2,3,4,5,6]))\nprint(largestProduct([1,2,3]))\nprint(largestProduct([1,2,3,4]))\nprint(largestProduct([1,2,3,4,5]))\nprint(largestProduct([6,4,3]))\nprint(largestProduct([6,4,3,2]))\nprint(largestProduct([6,4,3,2,1]))\nprint(largestProduct([1,2,3,4,5,6]))\nprint(largestProduct([6,4,3,2]))\nprint(largestProduct([6,4,3,2,1]))\nprint(largestProduct([6,4,3,2,1,0]))\nprint(largestProduct([0,1,2,3,4,5,6,7,8,9]))\n\nprint(largestProduct([1,2,3,4,5,6]))\nprint(largestProduct([1,2,3,4,5,6,7,8,9]))\nprint(largestProduct([1,2,3,4,5,6,7,8,9,10]))\nprint(largestProduct([10,1,2,3,4,5,6,7,8,9]))\nprint(largestProduct([1,2,3,4,5,6,7,8,9,10,11]))\nprint(largestProduct([10,11,1,2,3,4,5,6,7,8,9]))\nprint(largestProduct([1,2,3,"]}
{"task_id": "MBJSP/368", "prompt": "function repeatTuples(testtup, n) {\n/**\n * * Write a function to repeat the given tuple n times.\n */", "entry_point": "repeatTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3];\nvar arg01 = 4;\nvar x0 = repeatTuples(arg00, arg01);\nvar v0 = [[1, 3], [1, 3], [1, 3], [1, 3]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2];\nvar arg11 = 3;\nvar x1 = repeatTuples(arg10, arg11);\nvar v1 = [[1, 2], [1, 2], [1, 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 4];\nvar arg21 = 5;\nvar x2 = repeatTuples(arg20, arg21);\nvar v2 = [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to repeat the given tuple n times.", "language": "javascript", "canonical_solution": "  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(testTup);\n  }\n  return arr;\n}", "completion": ["\n//};\n```\n\n####  Test\n\n```py\nimport pytest\n\n@pytest.mark.parametrize(\"testtup\", [\n    (1,2,3),\n    (2,3,4),\n    (3,4,5),\n    (4,5,6),\n    (5,6,7),\n    (6,7,8),\n    (7,8,9),\n    (8,9,10),\n    (9,10,11),\n    (10,11,12),\n    (11,12,13),\n    (12,13,14),\n    (13,14,15),\n    (14,15,16),\n    (15,16,17),\n    (16,17,18),\n    (17,18,19),\n    (18,19,20),\n    (19,20,21),\n    (20,21,22),\n    (21,22,23),\n    (22,23,24),\n    (23,24,25),\n    (24,25,26),\n    (25,26,27),\n    (26,27,28),\n    (27,28,29),\n    (28,29,30),\n    (29,30,31),\n    (30,31,32),\n    (31,32,33),\n    (32,33,34),\n    (33,34,35),\n    (34,35,36),\n    (35,36,37),\n    (36,37,38),\n    (37,38,39),\n    (38,39,40),\n    (39,40,41),\n    (40,41,42),\n    ", "\n    write_repeated_tuple(testtup, n) {\n        for (let i = 0; i < n; ++i) {\n            write_tuple(testtup, n);\n        }\n    }\n\n    write_repeated_list(testtup, n) {\n        for (let i = 0; i < n; ++i) {\n            write_list(testtup, n);\n        }\n    }\n\n    write_repeated_map(testtup, n) {\n        for (let i = 0; i < n; ++i) {\n            write_map(testtup, n);\n        }\n    }\n\n    write_repeated_set(testtup, n) {\n        for (let i = 0; i < n; ++i) {\n            write_set(testtup, n);\n        }\n    }\n\n    write_repeated_string(testtup, n) {\n        for (let i = 0; i < n; ++i) {\n            write_string(testtup, n);\n        }\n    }\n};\n\n", "\n\n", "\n", "\n\nrepeat(n, testtup) {\n\nthis.i = 0;\n\nthis.times = n;\n\nthis.total = [];\n\nthis.times = n;\n\nthis.total.length = 0;\n\nthis.total.push(testtup);\n\nif (this.times === 1) {\n\nthis.total.push(testtup);\n\nreturn this.total;\n\n}\n\nthis.total = this.total.concat(testtup);\n\nwhile (this.i < this.times - 1) {\n\nthis.total = this.total.concat(testtup);\n\nthis.i++;\n\n}\n\nreturn this.total;\n\n}\n\n}\n\n/**\n * * Write a function to repeat the given tuple n times.\n */\n\n"]}
{"task_id": "MBJSP/369", "prompt": "function lateralsurfaceCuboid(l, w, h) {\n/**\n * * Write a function to find the lateral surface area of cuboid\n */", "entry_point": "lateralsurfaceCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 8;\nvar arg01 = 5;\nvar arg02 = 6;\nvar x0 = lateralsurfaceCuboid(arg00, arg01, arg02);\nvar v0 = 156;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar arg11 = 9;\nvar arg12 = 10;\nvar x1 = lateralsurfaceCuboid(arg10, arg11, arg12);\nvar v1 = 320;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 20;\nvar arg22 = 30;\nvar x2 = lateralsurfaceCuboid(arg20, arg21, arg22);\nvar v2 = 1800;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the lateral surface area of cuboid", "language": "javascript", "canonical_solution": "  return 2 * h * (l + w);\n}", "completion": ["\n    this.writeCuboid(l, w, h);\n}\n\n/**\n * * Return the lateral surface area of cuboid\n */\n", "\n\n    /**\n     * Calculate the lateral surface area of cuboid\n     * @param l An array of size 3 with unit\n     * @param w An array of size 3 with unit\n     * @param h An array of size 3 with unit\n     * @return {number} surface area of cuboid\n     */\n\n    calculateCuboidSurfaceArea(l, w, h) {\n      let distance = Math.sqrt(l[0] * l[0] + l[1] * l[1] + l[2] * l[2]);\n      let width = Math.sqrt(w[0] * w[0] + w[1] * w[1] + w[2] * w[2]);\n      let height = Math.sqrt(h[0] * h[0] + h[1] * h[1] + h[2] * h[2]);\n      let volume = distance * width * height;\n      return volume;\n    }\n/**\n * * Write a ", "\n\n", "\n  // The height of cuboid\n  const hCuboid = h / 2;\n\n  // The lateral surface area of cuboid\n  let total = 0;\n\n  for (let i = 0; i < l; i++) {\n    for (let j = 0; j < w; j++) {\n      for (let k = 0; k < hCuboid; k++) {\n        const x = i +.5;\n        const y = j +.5;\n        const z = k +.5;\n\n        if (\n          x <= 0 ||\n          x >= l - 1 ||\n          y <= 0 ||\n          y >= w - 1 ||\n          z <= 0 ||\n          z >= hCuboid - 1\n        ) {\n          continue;\n        }\n\n        // Calculate surface area of cuboid\n        const surface = computeCuboidSurface(x, y, z);\n\n        total += surface;\n      }\n    }\n  }\n\n  return total;\n}\n\n/**\n * * Write a function to calculate the surface area of cuboid\n */\n", "\n\n  if (!cuboid_) {\n    cuboid_ = _.map(l, function(c, i) {\n      return {\n        c: c,\n        i: i,\n      };\n    });\n  }\n\n  var area = _.reduce(l, function(sum, c) {\n    return sum + cuboid_[c.i].c;\n  }, 0);\n  \n  if (mode =='relative') {\n    area = area * w * h / 100;\n  }\n  \n  if (mode == 'absolute') {\n    area = w * h * area / 100;\n  }\n\n  return {\n    'cuboid': cuboid_,\n    'lateralSurfaceAreaCuboid': area,\n  };\n};\n\n/**\n * Find all possible placements of cuboid\n * @param  {object} cuboid  Cuboid object\n * @param  {object} cuboid  Cuboid object\n * @return {object} placements Placements\n */\nexports.findPlacementsCuboid = function(cuboid, q, w, h, is_left) {\n  var l = [];\n  \n  var placement_keys = Object.keys(cuboid);\n  var placements = {};\n\n  var placement_len = placement_keys.length;\n\n  var is_placement = function(q, i) {\n    return q.i == i;\n  };\n  \n  var findPlacement = "]}
{"task_id": "MBJSP/370", "prompt": "function floatSort(price) {\n/**\n * * Write a function to sort a tuple by its float element.\n */", "entry_point": "floatSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]];\nvar x0 = floatSort(arg00);\nvar v0 = [[\"item3\", \"24.5\"], [\"item2\", \"15.10\"], [\"item1\", \"12.20\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]];\nvar x1 = floatSort(arg10);\nvar v1 = [[\"item3\", \"20\"], [\"item1\", \"15\"], [\"item2\", \"10\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]];\nvar x2 = floatSort(arg20);\nvar v2 = [[\"item3\", \"14\"], [\"item2\", \"10\"], [\"item1\", \"5\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a tuple by its float element.", "language": "javascript", "canonical_solution": "  return price.sort((a, b) => {\n    if (parseFloat(a[1]) < parseFloat(b[1])) {\n      return 1;\n    }\n    if (parseFloat(a[1]) > parseFloat(b[1])) {\n      return -1;\n    }\n    return 0;\n  });\n}", "completion": ["\n\n/**\n * * Write a function to sort a tuple by its string element.\n */\n\n/**\n * * Write a function to sort a tuple by its integer element.\n */\n\n/**\n * * Write a function to sort a tuple by its date element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a function to sort a tuple by its datetime element.\n */\n\n/**\n * * Write a ", "\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a function to sort a tuple by its float element.\n\n// Write a ", "\n/**\n * * Write a function to sort a tuple by its integer element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n}\n/**\n * * Write a function to sort a tuple by its integer element.\n */\n/**\n * * Write a function to sort a tuple by its float element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a function to sort a tuple by its string element.\n */\n/**\n * * Write a ", "\n    return function(tuple) {\n      return tuple[0];\n    };\n/**\n * * Write a function to sort a tuple by its string element.\n */\n    return function(tuple) {\n      return tuple[1];\n    };\n/**\n * * Write a function to sort a tuple by its date element.\n */\n    return function(tuple) {\n      return tuple[2];\n    };\n})();\n\n/**\n * * Write a function to sort a tuple by its integer element.\n */\n", "\n"]}
{"task_id": "MBJSP/371", "prompt": "function smallestMissing(a, leftelement, rightelement) {\n/**\n * * Write a function to find the smallest missing element in a sorted array.\n */", "entry_point": "smallestMissing", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, 3, 4, 5, 6];\nvar arg01 = 0;\nvar arg02 = 6;\nvar x0 = smallestMissing(arg00, arg01, arg02);\nvar v0 = 7;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 2, 6, 9, 11, 15];\nvar arg11 = 0;\nvar arg12 = 6;\nvar x1 = smallestMissing(arg10, arg11, arg12);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 6, 9, 11, 15];\nvar arg21 = 0;\nvar arg22 = 7;\nvar x2 = smallestMissing(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the smallest missing element in a sorted array.", "language": "javascript", "canonical_solution": "  let i = leftElement;\n  let j = rightElement;\n  while (i <= j) {\n    const mid = Math.floor((i + j) / 2);\n    if (a[mid] === mid) {\n      i = mid + 1;\n    } else {\n      j = mid - 1;\n    }\n  }\n  return i;\n}", "completion": ["\n\n\n/**\n * Write a function to find the smallest missing element in a sorted array.\n */\nvar missingElement = function missingElement(list, left, right) {\n  if (right < left) {\n    return 'Missing element is'+ left + '.';\n  }\n\n  if (right - left == 1) {\n    if (list[left]!= left + 1) {\n      return 'Missing element is'+ (list[left] + 1) + '.';\n    }\n\n    return missingElement(list, left + 1, right);\n  }\n\n  var middle = Math.floor((right - left) / 2);\n  var middleElement = list[middle];\n\n  if (middleElement == left + 1) {\n    return missingElement(list, left + 2, right);\n  }\n\n  if (middleElement == right - 1) {\n    return missingElement(list, left, right - 2);\n  }\n\n  if (list[middle - 1] > middleElement) {\n    return missingElement(list, left, middle - 1);\n  }\n\n  if (list[middle + 1] < middleElement) {\n    return missingElement(list, middle + 1, right);\n  }\n\n  return 'Missing element is'+ (middle + 1) + '.';\n};\nmissingElement.missingElement = missingElement;\n\nmodule.exports = missingElement;\n\n/***/ }),\n/* 73 */\n/***/ (", "\nvar stringbuilder = new _stringBuilder2.default();\n/**\n * * Find the smallest missing element in a sorted array.\n */\nvar findSmallestMissingElement = function findSmallestMissingElement(array) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = array[Symbol.iterator](), _step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var element = _step.value;\n\n            if (element!== 0) {\n                break;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    var missingElement = array.length;\n\n    for (var i = 1; i < array.length; i++) {\n        if (array[i - 1] + 1!== array[i]) {\n            missingElement = array[i - 1] + 1;\n            break;\n        }\n    }\n\n    stringbuilder.appendLine('missingElement ='+ missingElement);\n\n    return missingElement;\n};\n\nexports.default = findSmallestMissingElement;\n\n/***/ }),\n/* 22 */\n/***/ (", "\n    return function(a, leftelement, rightelement) {\n        return!leftelement &&!rightelement &&!a.some(", "\nconst writeFunction = (fn, input, output) => {\n\tlet i = 0;\n\twhile (i < input.length) {\n\t\tfn(input[i], output[i]);\n\t\ti++;\n\t}\n\tfn(i, output[i]);\n};\n/**\n * * Add two numbers together.\n */\nconst add = (a, b) => {\n\tconst sum = a + b;\n\treturn sum;\n};\n/**\n * * Sum all the elements in a list.\n */\nconst sumList = (list) => {\n\tlet sum = 0;\n\tfor (let i = 0; i < list.length; i++) {\n\t\tsum = add(sum, list[i]);\n\t}\n\treturn sum;\n};\n/**\n * * Find the sum of all the elements in a list.\n */\nconst sum = (list) => {\n\tlet sum = 0;\n\tfor (let i = 0; i < list.length; i++) {\n\t\tsum = add(sum, list[i]);\n\t}\n\treturn sum;\n};\n/**\n * * Find the sum of all the elements in a list.\n */\nconst sumForEach = (list) => {\n\tfor (let i = 0; i < list.length; i++) {\n\t\tlist[i] = list[i] + i;\n\t}\n};\n/**\n * * Write a ", "\nconst missingElement = (leftelement, rightelement) => {\n    let left = 0;\n    let right = leftelement.length - 1;\n    const getNext = (e) => {\n        return leftelement[e];\n    };\n    let prev = -1;\n    let current;\n    while (left <= right) {\n        current = left;\n        if (getNext(left) < getNext(right)) {\n            while (getNext(current) >= getNext(right)) {\n                current++;\n            }\n        } else {\n            while (getNext(current) <= getNext(right)) {\n                current--;\n            }\n        }\n        let min = getNext(current);\n        while (getNext(current) < min && getNext(current) < getNext(right)) {\n            min = getNext(current);\n            current++;\n        }\n        let max = getNext(current);\n        while (getNext(current) > max && getNext(current) > getNext(right)) {\n            max = getNext(current);\n            current--;\n        }\n        let diff = max - min;\n        prev = current;\n        left++;\n        right--;\n    }\n    return leftelement[prev];\n};\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/372", "prompt": "function heapAssending(nums) {\n/**\n * * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n */", "entry_point": "heapAssending", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1];\nvar x0 = heapAssending(arg00);\nvar v0 = [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar x1 = heapAssending(arg10);\nvar v1 = [14, 22, 25, 25, 35, 58, 65, 75, 85];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\nvar x2 = heapAssending(arg20);\nvar v2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "language": "javascript", "canonical_solution": "  let q = nums.slice(0);\n  let max = q[0];\n  let len = q.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len - i - 1; j++) {\n      if (q[j] > q[j + 1]) {\n        let temp = q[j];\n        q[j] = q[j + 1];\n        q[j + 1] = temp;\n      }\n    }\n    if (q[len - i - 1] > max) {\n      max = q[len - i - 1];\n    }\n  }\n  return q;\n}", "completion": ["\n", "\nQueue.prototype.sort = function() {\n  var heap = [];\n  this.traverse(", "\n", "\n", "\nheap_sort(nums, cmp);\n};\n/**\n * * Write a function to merge two sorted lists of elements in-place.\n */\nmerge(l1, l2) {\n/**\n * * Write a function to merge two sorted lists of elements in-place.\n */\nmerge(l1, l2) {\n/**\n * * Write a function to return the length of the merged list.\n */\nlength(l1, l2) {\nlength(l1, l2) {\nlength(l1, l2) {\n/**\n * * Write a function that takes a list of numbers and returns the sum of all the numbers.\n */\nsum(nums) {\n/**\n * * Write a function that takes a list of numbers and returns the average of all the numbers.\n */\naverage(nums) {\n/**\n * * Write a function to remove duplicates from a list in-place.\n */\nremove_duplicates(nums) {\n/**\n * * Write a function to create a new list by removing duplicates from a given list.\n */\nremove_duplicates(nums) {\n/**\n * * Write a function to sort a given list of elements in ascending order using bucket sort algorithm.\n */\nbucket_sort(nums) {\n/**\n * * Write a function to count the frequency of a given number.\n */\ncount_frequency(num) {\n/**\n * * Write a function to find the smallest number in a list.\n */\nfind_smallest(nums) {\nfind_smallest(nums) {\n/**\n * * Write a function to find the largest number in a list.\n */\nfind_largest(nums) {\n/**\n * * Write a "]}
{"task_id": "MBJSP/373", "prompt": "function volumeCuboid(l, w, h) {\n/**\n * * Write a function to find the volume of a cuboid.\n */", "entry_point": "volumeCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = volumeCuboid(arg00, arg01, arg02);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar arg12 = 9;\nvar x1 = volumeCuboid(arg10, arg11, arg12);\nvar v1 = 315;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar arg22 = 21;\nvar x2 = volumeCuboid(arg20, arg21, arg22);\nvar v2 = 3150;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the volume of a cuboid.", "language": "javascript", "canonical_solution": "  return l * w * h;\n}", "completion": ["\n\n  if (l == '') {\n    l = '0';\n  }\n\n  if (w == '') {\n    w = '0';\n  }\n\n  if (h == '') {\n    h = '0';\n  }\n\n  var volume = parseFloat(l) * parseFloat(w) * parseFloat(h);\n  return volume;\n};\n\nvar calculateVolume = function calculateVolume(a, b, c, d, e, f, g, h, i, j, k, l) {\n  var a, b, c, d, e, f, g, h, i, j, k, l, w, h, l, volume;\n  a = a / 2;\n  b = b / 2;\n  c = c / 2;\n  d = d / 2;\n  e = e / 2;\n  f = f / 2;\n  g = g / 2;\n  h = h / 2;\n  i = i / 2;\n  j = j / 2;\n  k = k / 2;\n  l = l / 2;\n  w = calculateW(a, b, c, d, e, f, g, h, i, j, k, l);\n  h = calculateH(a, b, c, d, e, f, g, h, i, j, k, l);\n  l = calculateL(a, b, c, d, e, f, g, h, i, j, k, l);\n  volume = calculateVolume(a, b, c, d, e, f, g, h, i, j, k, l);\n  return volume;\n};\n\nvar calculateArea = ", "\n\n/**\n * * Return the volume of a cuboid.\n */\n", "\n", "\nvar print_volume_cuboid = function print_volume_cuboid(l, w, h, d) {\n    console.log('l:'+ l);\n    console.log('w:'+ w);\n    console.log('h:'+ h);\n    console.log('d:'+ d);\n    console.log('');\n};\n\n/**\n * * Write a function to find the volume of a sphere.\n */\nvar print_volume_sphere = function print_volume_sphere(r) {\n    console.log('r:'+ r);\n    console.log('');\n};\n\n/**\n * * Write a function to find the surface area of a cuboid.\n */\nvar print_surface_area_cuboid = function print_surface_area_cuboid(l, w, h) {\n    console.log('l:'+ l);\n    console.log('w:'+ w);\n    console.log('h:'+ h);\n    console.log('');\n};\n\n/**\n * * Write a function to find the surface area of a sphere.\n */\nvar print_surface_area_sphere = function print_surface_area_sphere(r) {\n    console.log('r:'+ r);\n    console.log('');\n};\n\n/**\n * * Write a function to find the surface area of a cylinder.\n */\nvar print_surface_area_cylinder = function print_surface_area_cylinder(r, h) {\n    console.log('r:'+ r);\n    console.log('h:'+ h);\n    console.log('');\n};\n\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/374", "prompt": "function permuteString(str) {\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */", "entry_point": "permuteString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ab\";\nvar x0 = permuteString(arg00);\nvar v0 = [\"ab\", \"ba\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = permuteString(arg10);\nvar v1 = [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcd\";\nvar x2 = permuteString(arg20);\nvar v2 = [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to print all permutations of a given string including duplicates.", "language": "javascript", "canonical_solution": "  if (str.length === 0) {\n    return [];\n  }\n  if (str.length === 1) {\n    return [str];\n  }\n  let firstChar = str[0];\n  let remainder = str.slice(1);\n  let subPermutations = permuteString(remainder);\n  let allPermutations = [];\n  subPermutations.forEach(subPermutation => {\n    for (let i = 0; i <= subPermutation.length; i++) {\n      let permutation = subPermutation.slice(0, i) + firstChar + subPermutation.slice(i);\n      allPermutations.push(permutation);\n    }\n  });\n  return allPermutations;\n}", "completion": ["\n", "\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a function to print all permutations of a given string including duplicates.\n */\n\n/**\n * * Write a ", "\n\nvar n = str.length;\nvar arr = [];\n\n", "\nconsole.log(str.split(' ').map(", "\nstr = str.trim();\nif (str.length === 0) {\nreturn '';\n}\nstr = str.replace(/(\\w\\w)/g, '$1 $1');\nstr = str.replace(/(\\w\\w\\w)/g, '$1 $1 $1');\nstr = str.replace(/(\\w\\w\\w\\w)/g, '$1 $1 $1 $1');\nvar result = '';\n\nfor (var i = 0; i < str.length; i++) {\nresult += str[i];\n}\n\nreturn result;\n}\n\n\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/375", "prompt": "function roundNum(n, m) {\n/**\n * * Write a function to round the given number to the nearest multiple of a specific number.\n */", "entry_point": "roundNum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 4722;\nvar arg01 = 10;\nvar x0 = roundNum(arg00, arg01);\nvar v0 = 4720;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1111;\nvar arg11 = 5;\nvar x1 = roundNum(arg10, arg11);\nvar v1 = 1110;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 219;\nvar arg21 = 2;\nvar x2 = roundNum(arg20, arg21);\nvar v2 = 218;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to round the given number to the nearest multiple of a specific number.", "language": "javascript", "canonical_solution": "  return Math.floor(n / m) * m;\n}", "completion": ["\n", "\nexport const roundTo = (number, multiple) => {\n  const divisor = Math.pow(10, multiple);\n  return Math.round(number * divisor) / divisor;\n};\n\n/**\n * * Write a function to round the given number to the nearest multiple of a specific number.\n */\nexport const roundToWithoutRemainder = (number, multiple) => {\n  const divisor = Math.pow(10, multiple);\n  return Math.round(number) / divisor;\n};\n\n/**\n * * Write a function to round the given number to the nearest multiple of a specific number.\n */\nexport const roundToWithRemainder = (number, multiple) => {\n  const remainder = Math.abs(number) % Math.pow(10, multiple);\n  const divisor = Math.pow(10, multiple);\n  if (remainder === 0) {\n    return Math.round(number) / divisor;\n  } else {\n    return Math.round(number) / divisor + remainder;\n  }\n};\n\n/**\n * * Write a function to round the given number to the nearest multiple of a specific number.\n */\nexport const roundToWithoutRemainderWithRemainder = (number, multiple) => {\n  const remainder = Math.abs(number) % Math.pow(10, multiple);\n  const divisor = Math.pow(10, multiple);\n  if (remainder === 0) {\n    return Math.round(number) / divisor;\n  } else {\n    return Math.round(number) / divisor + remainder + remainder;\n  }\n};\n\n/**\n * * Write a ", "\n", "\nvar round = function round(n, m) {\n/**\n * // We do not use native toFixed() here because it makes polyfills more difficult.\n */\nreturn Math.round(n * m) / m;\n};\n/**\n * Long form of a number.\n */\n\nvar long = function long(n) {\nreturn n < 0? '-' : '';\n};\n/**\n * Short form of a number.\n */\n\nvar short = function short(n) {\nreturn n < 0? '-' : '';\n};\n/**\n * Common JavaScript `digit` regex.\n */\n\nvar digit = /\\d/;\n/**\n * Common JavaScript `zero` regex.\n */\n\nvar zero = /0/;\n/**\n * The base implementation of `toNumber`.\n */\n\nvar toNumber = function toNumber(value) {\nvar isNegative = value < 0;\nvar number = isNegative? -value : value;\nvar exponent,\n    mantissa,\n    base,\n    sign,\n    i;\n/**\n * Parse the given `number`.\n *\n * @param {number} number The number to parse.\n * @returns {number|null} Returns the number, or null if it is not a number.\n * @throws {Error} Throws an error if the argument is not a number.\n */\n\n\n", "\nvar print = function (n) {\n    console.log(n);\n}\n/**\n * * Add a function to round the given number to the nearest multiple of a specific number.\n */\nvar add = function (n, m) {\n    console.log(n + m);\n}\n/**\n * * Compare two functions.\n */\nvar compare = function (n, m) {\n    console.log(n === m);\n}\n/**\n * * Compare two functions with a <b>return false</b> value.\n */\nvar compareFalse = function (n, m) {\n    console.log(n === m);\n    return false;\n}\n/**\n * * Write a function to calculate the number of a given number based on the given number of multiples.\n */\nvar exactly = function (n, m) {\n    console.log(n * m === n);\n}\n/**\n * * Write a function to calculate the number of a given number based on the given number of multiples.\n */\nvar exactlyNegative = function (n, m) {\n    console.log(n * m < n);\n}\n/**\n * * Write a function to calculate the number of a given number based on the given number of multiples.\n */\nvar exactlyNegativeZero = function (n, m) {\n    console.log(n * m < 0);\n}\n/**\n * * Write a function to calculate the number of a given number based on the given number of multiples.\n */\nvar exactlyZero = function (n, m) {\n    console.log(n * m === 0);\n}\n/**\n * * Write a function to calculate the number of a given number based on the given number of multiples.\n */\nvar exactlyZeroNegative = "]}
{"task_id": "MBJSP/376", "prompt": "function removeReplica(testtup) {\n/**\n * * Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n */", "entry_point": "removeReplica", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 4, 4, 4, 5, 5, 6, 7, 7];\nvar x0 = removeReplica(arg00);\nvar v0 = [1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9];\nvar x1 = removeReplica(arg10);\nvar v1 = [2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 2, 5, 4, 5, 7, 5, 6, 7, 7];\nvar x2 = removeReplica(arg20);\nvar v2 = [2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "language": "javascript", "canonical_solution": "  let newTup = [];\n  for (let i = 0; i < testTup.length; i++) {\n    if (newTup.indexOf(testTup[i]) === -1) {\n      newTup.push(testTup[i]);\n    } else {\n      newTup.push(\"MSP\");\n    }\n  }\n  return newTup;\n}", "completion": ["\n", "\n  StringBuilder sb = new StringBuilder();\n  sb.append(testtup.getKey());\n  for (int i = 0; i < testtup.getValue().length(); i++) {\n    if (i > 0) {\n      if (testtup.getValue().charAt(i)!= testtup.getValue().charAt(i - 1)) {\n        sb.append(\" \");\n      }\n    }\n    sb.append(testtup.getValue().charAt(i));\n  }\n  return sb.toString();\n}\n```\n\n```java\npublic static String removeDupesWithCustomValues(String text) {\n    return text.replaceAll(\"(?=[a-z]{2})\", \" \").replaceAll(\"(?=[a-z]{2})(?![a-z]{2})\", \" \").replaceAll(\"(?=[a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z]{2})\", \" \").replaceAll(\"(?=[a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z]{2})\", \" \").replaceAll(\"(?=[a-z]{2})(?![a-z]{2})(?![a-z]{2})(?![a-z", "\n    let idx = 0;\n    let count = 0;\n    ", "\n     var func = ", "\n"]}
{"task_id": "MBJSP/377", "prompt": "function removeChar(s, c) {\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */", "entry_point": "removeChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"aba\";\nvar arg01 = \"a\";\nvar x0 = removeChar(arg00, arg01);\nvar v0 = \"b\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"toggle\";\nvar arg11 = \"g\";\nvar x1 = removeChar(arg10, arg11);\nvar v1 = \"tole\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"aabbc\";\nvar arg21 = \"b\";\nvar x2 = removeChar(arg20, arg21);\nvar v2 = \"aac\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to remove all occurrences of a character in a given string.", "language": "javascript", "canonical_solution": "  return s.split(c).join(\"\");\n}", "completion": ["\nreturn s.replace(c, \"\");\n\n}\n\n/**\n * * Write a JavaScript function to replace all occurrences of a character in a given string.\n */\n\n", "\nvar string_remove_2 = remove_2;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_3 = remove_3;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_4 = remove_4;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_5 = remove_5;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_6 = remove_6;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_7 = remove_7;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_8 = remove_8;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_9 = remove_9;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_10 = remove_10;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_11 = remove_11;\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\nvar string_remove_12 = remove_12;\n/**\n * * Write a JavaScript ", "\n\n    var s = s.toUpperCase();\n    var c = c.toUpperCase();\n\n    if (c ==='') {\n      return s.replace(/\\s/g, '').trim();\n    } else {\n      return s.replace(new RegExp(c, 'g'), '').trim();\n    }\n  }\n\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\n\n  var remove_all_occurrences_of_a_character_from_a_given_string = function remove_all_occurrences_of_a_character_from_a_given_string(s, c) {\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\n\n    var s = s.toUpperCase();\n    var c = c.toUpperCase();\n\n    if (c ==='') {\n      return s.replace(/\\s/g, '');\n    } else {\n      return s.replace(new RegExp(c, 'g'), '');\n    }\n  }\n\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\n\n  var remove_all_the_characters_in_a_given_string = function remove_all_the_characters_in_a_given_string(s) {\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\n\n    return s.replace(/[^a-zA-Z]/g, '');\n  }\n\n/**\n * * Write a JavaScript ", "\n    let remove = (string: string, char: string) => string.replace(new RegExp(char, \"g\"), \"\");\n    let removeSpaces = (string: string) => string.replace(/\\s/g, \"\");\n/**\n * * Write a JavaScript function to remove all consecutive whitespaces from a given string.\n */\n    let removeWhiteSpaces = (string: string) => string.replace(/\\s{2,}/g, \"\");\n/**\n * * Write a JavaScript function to remove the first instance of the given character in a given string.\n */\n    let removeChar = (string: string, char: string) => string.replace(new RegExp(char, \"g\"), \"\");\n/**\n * * Write a JavaScript function to remove the first instance of the given substring in a given string.\n */\n    let removeSubstring = (string: string, substring: string) => string.replace(new RegExp(substring, \"g\"), \"\");\n/**\n * * Write a JavaScript function to remove all instances of the given substring in a given string.\n */\n    let removeAllSubstrings = (string: string, substring: string) => string.replace(new RegExp(substring, \"g\"), \"\");\n/**\n * * Write a JavaScript function to convert a given string to lower case.\n */\n    let lowercase = (string: string) => string.toLowerCase();\n/**\n * * Write a JavaScript function to convert a given string to upper case.\n */\n    let uppercase = (string: string) => string.toUpperCase();\n/**\n * * Write a JavaScript ", "\ns = s.replace(/[^A-Za-z0-9_]/g, '');\nreturn s;\n}\n\n/**\n * * Write a JavaScript function to remove all occurrences of a character in a given string.\n */\n"]}
{"task_id": "MBJSP/378", "prompt": "function moveFirst(testlist) {\n/**\n * * Write a JavaScript function to shift last element to first position in the given list.\n */", "entry_point": "moveFirst", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar x0 = moveFirst(arg00);\nvar v0 = [4, 1, 2, 3];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 2, 3];\nvar x1 = moveFirst(arg10);\nvar v1 = [3, 0, 1, 2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 8, 7, 1];\nvar x2 = moveFirst(arg20);\nvar v2 = [1, 9, 8, 7];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to shift last element to first position in the given list.", "language": "javascript", "canonical_solution": "    let firstElement = testList[0];\n    let lastElement = testList[testList.length - 1];\n    testList.splice(testList.length - 1, 1);\n    testList.unshift(lastElement);\n    return testList;\n}", "completion": ["\n  }\n/**\n * * Get a JavaScript function that shifts the last element to the first position in the given list.\n */\n},{}],74:[", "\ntestlist.reverse();\ntestlist.shift();\n\n/**\n * * Create a loop that will run for the given length and shift last element to first position in the given list.\n */\nfor (var i = 0; i < testlist.length; i++) {\n\ttestlist.shift();\n}\n```\n\n## var testlist = [1, 2, 3, 4, 5];\n\n```javascript\nvar testlist = [1, 2, 3, 4, 5];\n```\n\n## var testlist = new Array();\n\n```javascript\nvar testlist = new Array();\n```\n\n## var testlist = new Array(10);\n\n```javascript\nvar testlist = new Array(10);\n```\n\n## var testlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n```javascript\nvar testlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n```\n\n## var testlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n```javascript\nvar testlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n```\n\n## var testlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n```javascript\nvar testlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n```\n\n## var testlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n```javascript\nvar testlist = [1, 2, 3", "\ndef function = {\n\n/**\n * * Shift last element of given list to first position in the list.\n */\ndef functionName(word: String) = {\n\n/**\n * * Return a list of words that are shifted from the last element in the given list.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Shift the first element of given list to the last element in the list.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Write a JavaScript function to sort a list of words by a given letter in the alphabet.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Sort a list of words by a given letter in the alphabet.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Write a JavaScript function to rotate a list to the left by the given number of positions.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Rotate a list to the left by the given number of positions.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Write a JavaScript function to rotate a list to the right by the given number of positions.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Rotate a list to the right by the given number of positions.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Return the length of a list.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Return the length of a list.\n */\ndef functionDescription(word: String) = {\n\n/**\n * * Write a JavaScript ", "\n", "\nconst shift = (list) => {\n  const first = list[0];\n  const last = list[list.length - 1];\n  list.splice(0, list.length, last);\n  list.splice(list.length - 1, list.length, first);\n  return list;\n};\n\n/**\n * * Return a "]}
{"task_id": "MBJSP/379", "prompt": "function surfaceareaCuboid(l, w, h) {\n/**\n * * Write a function to find the surface area of a cuboid.\n */", "entry_point": "surfaceareaCuboid", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar arg02 = 3;\nvar x0 = surfaceareaCuboid(arg00, arg01, arg02);\nvar v0 = 22;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar arg12 = 9;\nvar x1 = surfaceareaCuboid(arg10, arg11, arg12);\nvar v1 = 286;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar arg22 = 21;\nvar x2 = surfaceareaCuboid(arg20, arg21, arg22);\nvar v2 = 1350;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the surface area of a cuboid.", "language": "javascript", "canonical_solution": "  return 2 * (l * w + w * h + h * l);\n}", "completion": ["\ncontext.surfaceAreaOfCuboid(l, w, h) {\n/**\n * * Find the surface area of a cuboid.\n * * @param l\n * * * The length of the cuboid.\n * * @param w\n * * * The width of the cuboid.\n * * @param h\n * * * The height of the cuboid.\n * * @returns {*}\n * * * @example\n * context.surfaceAreaOfCuboid(l, w, h) // returns the surface area of a cuboid.\n */\n}\n\n/**\n * * Write a function to find the surface area of a cylinder.\n */\ncontext.surfaceAreaOfCylinder(r, h) {\n/**\n * * Find the surface area of a cylinder.\n * * @param r\n * * * The radius of the cylinder.\n * * @param h\n * * * The height of the cylinder.\n * * @returns {*}\n * * * @example\n * context.surfaceAreaOfCylinder(r, h) // returns the surface area of a cylinder.\n */\n}\n\n/**\n * * Write a function to find the volume of a sphere.\n */\ncontext.volumeOfSphere(r) {\n/**\n * * Find the volume of a sphere.\n * * @param r\n * * * The radius of the sphere.\n * * @returns {*}\n * * * @example\n * context.volumeOfSphere(r) // returns the volume of a sphere.\n */\n}\n\n/**\n * * Write a ", "\n", "\n\n    // The input arguments:\n    // * *l = length of the cuboid\n    // * *w = width of the cuboid\n    // * *h = height of the cuboid\n    // * *type = type of cuboid ('convex', 'concave')\n    // * *\n    // The return value:\n    // * surface area of the cuboid\n    (l, w, h, type) => {\n        var area = 0;\n        var offset = type === 'convex'? 0 : 1;\n        // Iterate through all the points of the cuboid.\n        for (var i = 0; i < l + w + h; i++) {\n            // The current point.\n            var p = i < l? [i, 0, 0] : [i - l, h - 1, 0];\n            // The current point's index.\n            var index = i + offset;\n            // The current point's index.\n            var index2 = i + l + offset;\n            // The current point's index.\n            var index3 = i + w + offset;\n            // If the current point is inside the cuboid.\n            if (type === 'convex'? index <= l : index <= w) {\n                // The distance of the current point from the origin.\n                var d = p[0] * p[0] + p[1] * p[1] + p[2] * p[2];\n                // The distance of the current point from the origin.\n                var d2 = p[0] * p[0] + p[1] * p[1] + p[2] * p[2];\n                // The", "\n\t\t\t\tif(text =='surf')\n\t\t\t\t\treturn cubeSurfaceArea(l, w, h);\n/**\n * * Write a function to calculate the volume of a cuboid.\n */\n\t\t\t\t\tif(text == 'vol')\n\t\t\t\t\t\treturn cubeVolume(l, w, h);\n/**\n * * Write a function to calculate the surface area of a sphere.\n */\n\t\t\t\t\tif(text =='sphere')\n\t\t\t\t\t\treturn sphereSurfaceArea(r);\n/**\n * * Write a function to calculate the volume of a sphere.\n */\n\t\t\t\t\tif(text == 'vol sphere')\n\t\t\t\t\t\treturn sphereVolume(r);\n/**\n * * Write a function to calculate the volume of a cylinder.\n */\n\t\t\t\t\tif(text == 'cylinder')\n\t\t\t\t\t\treturn cylinderVolume(r, h);\n/**\n * * Write a function to calculate the surface area of a cylinder.\n */\n\t\t\t\t\tif(text =='surf cylinder')\n\t\t\t\t\t\treturn cylinderSurfaceArea(r, h);\n/**\n * * Write a function to calculate the area of a rectangle.\n */\n\t\t\t\t\tif(text =='rect')\n\t\t\t\t\t\treturn rectangleArea(w, h);\n/**\n * * Write a function to calculate the surface area of a rectangle.\n */\n\t\t\t\t\tif(text =='surf rect')\n\t\t\t\t\t\treturn rectangleSurfaceArea(w, h);\n/**\n * * Write a ", "\n\n/**\n * * Find the surface area of a cuboid.\n */\n\n/**\n * * Return the volume of a cuboid.\n */\n\n/**\n * * Return the surface area of a cuboid.\n */\n\n/**\n * * Find the volume of a cuboid.\n */\n\n/**\n * * Return the surface area of a cuboid.\n */\n}<|endoftext|>"]}
{"task_id": "MBJSP/380", "prompt": "function multiList(rownum, colnum) {\n/**\n * * Write a function to generate a two-dimensional array.\n */", "entry_point": "multiList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 4;\nvar x0 = multiList(arg00, arg01);\nvar v0 = [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 7;\nvar x1 = multiList(arg10, arg11);\nvar v1 = [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 15;\nvar x2 = multiList(arg20, arg21);\nvar v2 = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to generate a two-dimensional array.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < rownum; i++) {\n    let row = [];\n    for (let j = 0; j < colnum; j++) {\n      row.push(i * j);\n    }\n    result.push(row);\n  }\n  return result;\n}", "completion": ["\narray_writer(fun, rownum, colnum) {\n/**\n * * Write an array of functions to generate a two-dimensional array.\n */\n    for (row = 0; row < rownum; row++) {\n        for (col = 0; col < colnum; col++) {\n            array_writer(fun(row, col), 1, 1);\n        }\n    }\n};\n\n/// Write a function to generate a one-dimensional array.\narray_writer(fun) {\n/**\n * Write a function to generate a one-dimensional array.\n */\n    array_writer(fun, 1, 1);\n};\n\n\n/// Write a function to generate a multi-dimensional array.\narray_writer(fun, rownum) {\n/**\n * Write a function to generate a multi-dimensional array.\n */\n    array_writer(fun, rownum, 1);\n};\n\n/// Write a function to generate a single-dimensional array.\narray_writer(fun, colnum) {\n/**\n * Write a function to generate a single-dimensional array.\n */\n    array_writer(fun, 1, colnum);\n};\n\n\n/// Write a function to generate a multi-dimensional array.\narray_writer(fun, rownum, colnum) {\n/**\n * Write a function to generate a multi-dimensional array.\n */\n    for (row = 0; row < rownum; row++) {\n        array_writer(fun(row, 0), 1, colnum);\n    }\n};\n\n\n/// Write a function to generate a multi-dimensional array.\narray_writer(fun, rownum, colnum, colnum2) {\n/**\n * Write a ", "\n    private static void writeArrayFunction(StringBuilder sb, String name) {\n        sb.append(\"static \");\n        sb.append(\"void \");\n        sb.append(name);\n        sb.append(\"(pyobj* self, pyobj* args, pyobj* kwds) {\\n\");\n\n        for (String arg : args) {\n            sb.append(String.format(\"    PyObject* %s;\\n\", arg));\n        }\n\n        sb.append(\"    static char* kwnames[] = {\\n\");\n        for (String kwd : kwds) {\n            sb.append(String.format(\"        \\\"%s\\\",\\n\", kwd));\n        }\n        sb.append(\"        NULL\\n\");\n        sb.append(\"    };\\n\");\n        sb.append(\"\\n\");\n        sb.append(\"    if (!PyArg_ParseTupleAndKeywords(args, kwds, \\\"O!\\\", kwnames, &pytuple_Type, &args))\\n\");\n        sb.append(\"        return;\\n\");\n        sb.append(\"\\n\");\n\n        for (int i = 0; i < colnum; i++) {\n            sb.append(\"    {\");\n            for (int j = 0; j < rownum; j++) {\n                sb.append(String.format(\"PyObject* o%d%d = \", i, j));\n                sb.append(String.format(\"pytuple_getitem(self, %d, %d);\\n\", i, j));\n                sb.append(String.format(\"    %s(o%d%d);\\n\", name, i, j));\n                sb.", "\n", "\n$array_function(@array);\n\n/**\n * * Given a column and a row number, the ", "\n\n/**\n * **Write a function to generate a two-dimensional array.**\n *\n * Write a function to generate a two-dimensional array.\n *\n * This "]}
{"task_id": "MBJSP/381", "prompt": "function indexOnInnerList(listdata, indexno) {\n/**\n * * Write a function to sort a list of lists by a given index of the inner list.\n */", "entry_point": "indexOnInnerList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg01 = 0;\nvar x0 = indexOnInnerList(arg00, arg01);\nvar v0 = [[\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99], [\"Wyatt Knott\", 91, 94]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg11 = 1;\nvar x1 = indexOnInnerList(arg10, arg11);\nvar v1 = [[\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg21 = 2;\nvar x2 = indexOnInnerList(arg20, arg21);\nvar v2 = [[\"Wyatt Knott\", 91, 94], [\"Brady Kent\", 97, 96], [\"Beau Turnbull\", 94, 98], [\"Greyson Fulton\", 98, 99]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a list of lists by a given index of the inner list.", "language": "javascript", "canonical_solution": "  return listData.sort(function(a, b) {\n    return a[indexNo] > b[indexNo] ? 1 : a[indexNo] < b[indexNo] ? -1 : 0;\n  });\n}", "completion": ["\n", "\n", "\nlistdata[indexno].sort(", "\n\nvar indexNo = indexno;\n\nvar innerList = listdata;\n\ninnerList.sort(", "\n/**\n * * Get the index of the inner list.\n */\n/**\n * * Get a list of the inner list.\n */\n/**\n * * Sort a list of lists by a given index of the inner list.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/382", "prompt": "function findRotationCount(a) {\n/**\n * * Write a function to find the number of rotations in a circularly sorted array.\n */", "entry_point": "findRotationCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7];\nvar x0 = findRotationCount(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [8, 9, 10, 2, 5, 6];\nvar x1 = findRotationCount(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 5, 6, 8, 9, 10];\nvar x2 = findRotationCount(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the number of rotations in a circularly sorted array.", "language": "javascript", "canonical_solution": "  let start = 0;\n  let end = a.length - 1;\n\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (a[mid] > a[mid + 1]) return mid + 1;\n    if (a[start] <= a[mid]) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }\n  }\n  return 0;\n}", "completion": ["\nrotations(a) {\n/*\n", "\n", "\n  return ", "\nrotations = function rotationsCount(a) {\n  var len = a.length;\n  if (len === 1) {\n    return 1;\n  }\n  var min = a[0];\n  var max = a[0];\n  var minIndex = 0;\n  var maxIndex = 0;\n  for (var i = 1; i < len; ++i) {\n    var current = a[i];\n    if (current < min) {\n      min = current;\n      minIndex = i;\n    } else if (current > max) {\n      max = current;\n      maxIndex = i;\n    }\n  }\n  var maxMinusMin = max - min;\n  if (maxMinusMin === len - 1) {\n    return len;\n  }\n  if (minIndex === maxIndex) {\n    return 2;\n  }\n  return Math.abs(minIndex - maxIndex) + 2;\n};\n\n/***/ }),\n/* 2 */\n/***/ (", "\n\n"]}
{"task_id": "MBJSP/383", "prompt": "function evenBitToggleNumber(n) {\n/**\n * * Write a JavaScript function to toggle all odd bits of a given number.\n */", "entry_point": "evenBitToggleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = evenBitToggleNumber(arg00);\nvar v0 = 15;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar x1 = evenBitToggleNumber(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = evenBitToggleNumber(arg20);\nvar v2 = 11;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to toggle all odd bits of a given number.", "language": "javascript", "canonical_solution": "    res = 0; count = 0; temp = n\n    while (temp > 0) {\n        if (count % 2 == 0) {\n            res = res | (1 << count)\n        }\n        count = count + 1\n        temp >>= 1\n    }\n    return n ^ res\n}", "completion": ["\n    var _ = require('underscore');\n    module.exports = function toggleAllOddBits(n) {\n        n = n|0;\n        var t = _.clone(n);\n        _.each(_.range(n.length), function(i) {\n            t[i] = ~(t[i]&0x55555555);\n        });\n        return t;\n    };\n}\n```\n\n## parseInt\n\n\u89e3\u6790\u6570\u5b57\u3002\n\n\u5b9a\u4e49\u3002\n\n```javascript\nvar _ = require('underscore');\n\nmodule.exports = function parseInt(s) {\n    return parseInt(s, 10)\n};\n```\n\n## sha1\n\n\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684 SHA1 \u503c\u3002\n\n\u5b9a\u4e49\u3002\n\n```javascript\nvar _ = require('underscore');\n\nmodule.exports = function sha1(s) {\n    return _.transform(s, function(a, c) {\n        a.push(String.fromCharCode(c));\n        return a;\n    }, _.range(0, 20)).join('');\n};\n```\n\n## sha256\n\n\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684 SHA256 \u503c\u3002\n\n\u5b9a\u4e49\u3002\n\n```javascript\nvar _ = require('underscore');\n\nmodule.exports = function sha256(s) {\n    return _.transform(s, ", "\n    ", "\n", "\n\tvar num = n;\n\tvar count = 1;\n\tvar ans = 0;\n\n\twhile (num > 0) {\n\t\tif (num & 1) {\n\t\t\tans += count;\n\t\t}\n\t\tcount *= 2;\n\t\tnum >>= 1;\n\t}\n\n\treturn ans;\n}\n\n/**\n * * Test whether a number is palindromic\n * */\n\t", "\nreturn function toggleOdd(n) {\nvar out = 0;\nfor (var i = 0; i < n; i++) {\nout |= (i % 2 === 1? 1 : 0);\n}\nreturn out;\n};\n};\n\nmodule.exports = TernaryFunction;\n},{}],60:["]}
{"task_id": "MBJSP/384", "prompt": "function frequencyOfSmallest(n, arr) {\n/**\n * * Write a JavaScript function to find the frequency of the smallest value in a given array.\n */", "entry_point": "frequencyOfSmallest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = [1, 2, 3, 4, 3];\nvar x0 = frequencyOfSmallest(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar arg11 = [3, 1, 2, 5, 6, 2, 3];\nvar x1 = frequencyOfSmallest(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 7;\nvar arg21 = [3, 3, 6, 3, 7, 4, 9];\nvar x2 = frequencyOfSmallest(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the frequency of the smallest value in a given array.", "language": "javascript", "canonical_solution": "    let min = Math.min(...arr);\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === min) {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\n", "\n", "\n    ", "\n\nvar arr = [ 1, 2, 3, 3, 3, 4, 5, 6, 6, 6, 7, 8, 9, 9, 9 ];\n\nvar smallestValue = arr[0];\n\nvar frequencyOfSmallestValue = 0;\n\nfor (var i = 1; i < arr.length; i++) {\n    if (arr[i] === smallestValue) {\n        frequencyOfSmallestValue++;\n    }\n}\n\nconsole.log(smallestValue + \" : \" + frequencyOfSmallestValue);\n/**\n * * Write a JavaScript ", "\n\n// Here the function that prints the frequency of the smallest value in a given array.\n\n"]}
{"task_id": "MBJSP/385", "prompt": "function getPerrin(n) {\n/**\n * * Write a function to find the n'th perrin number using recursion.\n */", "entry_point": "getPerrin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = getPerrin(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = getPerrin(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = getPerrin(arg20);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the n'th perrin number using recursion.", "language": "javascript", "canonical_solution": "  if (n == 0) return 3\n  if (n == 1) return 0\n  if (n == 2) return 2\n  return getPerrin(n - 2) + getPerrin(n - 3)\n}", "completion": ["\n\n  const write = n => {\n    const temp = [];\n    return () => {\n      const child = write(n - 1);\n      temp.push(child);\n      return child;\n    };\n  };\n\nconst writeNthPerrin = write(4);\n```\n\n```py\n>>> writeNthPerrin(4)\n<", "\n", "\nvar nth = ", "\nvar nth_perrin = function nth_perrin(n, perrin) {\n  return perrin(n - 1)\n}\n\nnth_perrin(1, function(n) {\n  return n\n})\n\n// * * Write a function to find then'th period number using recursion.\nvar nth_period = function nth_period(n, period) {\n  return period(n - 1)\n}\n\nnth_period(1, ", "\nreturn n;\n}\n\n/**\n * * The function will accept an array of numbers and find the sum of every number in the array.\n */\n"]}
{"task_id": "MBJSP/386", "prompt": "function swapCount(s) {\n/**\n * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n */", "entry_point": "swapCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"[]][][\";\nvar x0 = swapCount(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"[[][]]\";\nvar x1 = swapCount(arg10);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"[[][]]][\";\nvar x2 = swapCount(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "language": "javascript", "canonical_solution": "    let count = 0;\n    let temp = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === '[') {\n            temp++;\n        } else if (s[i] === ']') {\n            temp--;\n        }\n        if (temp < 0) {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\n\n    ", "\ns = s.replace(/\\]/g, \"]\").replace(/\\[/g, \"[\");\ns = s.replace(/\\(/g, \"(\").replace(/\\)/g, \")\");\ns = s.replace(/\\{/g, \"{\").replace(/\\}/g, \"}\");\ns = s.replace(/\\[/g, \"[\").replace(/\\]/g, \"]\");\nreturn s;\n}\n\n/**\n * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n */\n", "\n}<|endoftext|>", "\nvar minSwaps = function(s) {\n\tvar count = 0;\n\tvar stack = [];\n\tvar current;\n\tvar i;\n\n\tfor (i = 0; i < s.length; i++) {\n\t\tcurrent = s[i];\n\t\tif (current === '(') {\n\t\t\tstack.push('(');\n\t\t} else if (current === ')') {\n\t\t\tif (stack.length === 0) {\n\t\t\t\tcount++;\n\t\t\t} else if (stack.pop() === '(') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn count;\n}\n\nvar s = '(a)bc(de)f';\nconsole.log(minSwaps(s)); // => 2\n\n// Time complexity: O(n)\n// Space complexity: O(1)\n\n/**\n * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n */\nvar minSwapsOptimized = function(s) {\n\tvar count = 0;\n\tvar stack = [];\n\tvar current;\n\tvar i;\n\n\tfor (i = 0; i < s.length; i++) {\n\t\tcurrent = s[i];\n\t\tif (current === '(') {\n\t\t\tstack.push('(');\n\t\t} else if (current === ')') {\n\t\t\tif (stack.length === 0) {\n\t\t\t\tcount++;\n\t\t\t} else if (stack.pop() === '(') {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\n\tstack.forEach(", "\nvar MIN_SWAPS = 0;\n/**\n * * The algorithm takes as input a string consisting of \"(\" and \")\" characters.\n */\n"]}
{"task_id": "MBJSP/387", "prompt": "function evenOrOdd(n) {\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is even or odd.\n */", "entry_point": "evenOrOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"AB3454D\";\nvar x0 = evenOrOdd(arg00);\nvar v0 = \"Odd\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ABC\";\nvar x1 = evenOrOdd(arg10);\nvar v1 = \"Even\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"AAD\";\nvar x2 = evenOrOdd(arg20);\nvar v2 = \"Odd\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the hexadecimal number is even or odd.", "language": "javascript", "canonical_solution": "  const num = parseInt(n, 16);\n  return num % 2 === 0 ? \"Even\" : \"Odd\";\n}", "completion": ["\n\n} else {\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is even or odd.\n */\n\n}\n\n</code></pre>\n                <p class=\"text-warning\">This is an example of a \"normal\" function. There are a few more \"tricky\" functions, but this one is sufficient for the basic use cases.</p>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-sm-12\">\n              <div class=\"card\">\n                <div class=\"card-header\">\n                  <h2>\n                    <i class=\"fa fa-code\"></i>\n                    Code Examples\n                  </h2>\n                </div>\n                <div class=\"card-block\">\n                  <pre><code class=\"lang-javascript\">// Equivalent to a \"normal\" function\ncheckEvenOdd(n) {\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is even or odd.\n */\n\n}\n\n// Equivalent to a \"normal\" function\ncheckEvenOddHex(n) {\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is even or odd.\n */\n\n}\n\n// Equivalent to a \"normal\" function\ncheckEvenOddHex2(n) {\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is even or odd.\n */\n\n}\n\n// Equivalent to a \"normal\" function\ncheckEvenOddHex3(n) {\n/**\n * * Write a JavaScript ", "\nvar isEven = function isEven(n) {\nreturn (n % 2) === 0;\n};\n\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is a prime or not.\n */\nvar isPrime = function isPrime(n) {\nvar nCheck = n % 2;\nvar nCount = 0;\nwhile (nCount < n) {\nif (nCheck === 0) {\nreturn false;\n}\nnCheck = Math.pow(nCheck, 2) + nCheck;\nnCount++;\n}\nreturn true;\n};\n\n/**\n * * Write a JavaScript function to check whether the hexadecimal number is a power of 2 or not.\n */\nvar isPowerOfTwo = function isPowerOfTwo(n) {\nreturn (n & (n - 1)) === 0;\n};\n\n/**\n * * Write a JavaScript function to calculate the number of bits in a number.\n */\nvar bits = function bits(n) {\nvar b = 0;\nwhile (n > 0) {\nb++;\nn >>>= 1;\n}\nreturn b;\n};\n\n/**\n * * Write a JavaScript function to get the bitwise complement of a number.\n */\nvar bitwiseComplement = function bitwiseComplement(n) {\nreturn n ^ (n >>> 1);\n};\n\n/**\n * * Write a JavaScript function to get the bitwise rotate left of a number.\n */\nvar bitwiseRotateLeft = ", "\n", "\n                            // eslint-disable-next-line no-useless-escape\n                            if (n % 2 == 1) {\n                                console.log(`${n} is odd`);\n                                return false;\n                            } else {\n                                console.log(`${n} is even`);\n                                return true;\n                            }\n                        }\n\n                        ", "\n\n\"\"\"\n * @param {number} n \n * @return {boolean}\n \"\"\"\nisEven(n) {\nreturn (n % 2 === 0)? true : false\n}\n\n\"\"\"\n * * Write a JavaScript function to check whether the hexadecimal number is a multiple of 16.\n */\n\n\"\"\"\n * @param {number} n \n * @return {boolean}\n \"\"\"\nisMultipleOf16(n) {\nreturn (n % 16 === 0)? true : false\n}\n\n\"\"\"\n * * Write a JavaScript function to check whether the hexadecimal number is odd or even.\n */\n\n\"\"\"\n * @param {number} n \n * @return {boolean}\n \"\"\"\nisOdd(n) {\nreturn (n % 2 === 1)? true : false\n}\n\n\"\"\"\n * * Write a JavaScript function to count the number of the first characters of each string.\n */\n\n\"\"\"\n * @param {string} s \n * @return {number}\n \"\"\"\ncountFirstCharacters(s) {\nreturn (s.length === 1)? 1 : (s.length === 2)? 2 : s.length\n}\n\n\"\"\"\n * * Write a JavaScript function to get the number of characters in a string.\n */\n\n\"\"\"\n * @param {string} s \n * @return {number}\n \"\"\"\ngetStringLength(s) {\nreturn (s === '')? 0 : s.length\n}\n\n\"\"\"\n * * Write a JavaScript "]}
{"task_id": "MBJSP/388", "prompt": "function highestPowerOf2(n) {\n/**\n * * Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\n */", "entry_point": "highestPowerOf2", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = highestPowerOf2(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 19;\nvar x1 = highestPowerOf2(arg10);\nvar v1 = 16;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 32;\nvar x2 = highestPowerOf2(arg20);\nvar v2 = 32;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the highest power of 2 that is less than or equal to n.", "language": "javascript", "canonical_solution": "    let power = 1;\n    while (power <= n) {\n        power *= 2;\n    }\n    return power / 2;\n}", "completion": ["\n", "\n\nconst maxPowerOf2 = (n) => {\n  return Math.ceil(Math.log2(n));\n};\n```\n\n</div>\n\n</section>\n\n## Solution\n<section id='solution'>\n\n```js\nconst n = pow(2, 31);\nconsole.log(maxPowerOf2(n));\n```\n\n</section>\n<|endoftext|>", "\n+", "\nconst findPowerOf2 = function(n) {\n    let powerOf2 = 1;\n    while (powerOf2 < n) {\n        powerOf2 <<= 1;\n    }\n    return powerOf2;\n};\n\n// Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\n// Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\nconst findPowerOf2 = function(n) {\n    let powerOf2 = 1;\n    while (powerOf2 < n) {\n        powerOf2 <<= 1;\n    }\n    return powerOf2;\n};\n\n// Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\n// Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\nconst findPowerOf2 = function(n) {\n    let powerOf2 = 1;\n    while (powerOf2 < n) {\n        powerOf2 <<= 1;\n    }\n    return powerOf2;\n};\n\n\n// Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\n// Write a JavaScript function to find the highest power of 2 that is less than or equal to n.\nconst findPowerOf2 = ", "\n"]}
{"task_id": "MBJSP/389", "prompt": "function findLucas(n) {\n/**\n * * Write a function to find the n'th lucas number.\n */", "entry_point": "findLucas", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = findLucas(arg00);\nvar v0 = 76;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar x1 = findLucas(arg10);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = findLucas(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the n'th lucas number.", "language": "javascript", "canonical_solution": "  let a = 2,\n      b = 1,\n      temp;\n\n  if (n === 1) {\n    return 2;\n  }\n\n  for (let i = 2; i <= n; i++) {\n    temp = a + b;\n    a = b;\n    b = temp;\n  }\n\n  return b;\n}", "completion": ["\nn.getLucas = function(n) {\nvar l = 0;\nvar a = 0;\nvar b = 0;\nfor (var i = 0; i < n; i++) {\na = a + 1;\nb = b + l;\n}\nreturn b;\n};\n}}\n);\n/**\n * #trim()\n *\n * Simplified version of [String.prototype.trim()](http://blog.stevenlevithan.com/archives/faster-trim-javascript).\n *\n * @returns {string}\n * @param {string} s\n */\nvar trim = (", "\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a function to find then'th lucas number.\n */\nn = n.toString();\n/**\n * * Write a ", "\n\n/**\n * * Write a function to find then'th catalan number.\n */\n\n/**\n * * Write a function to find then'th catalan number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a function to find then'th prime number.\n */\n\n/**\n * * Write a ", "\n", "\nvar L = function(k, n) {\n\tif (n == 0) return 1;\n\tvar d = L(k, n - 1);\n\treturn d * d * (n - 1) / n;\n};\n\n/**\n * * Write a function to find then'th lucas number.\n */\nvar N = function(k, n) {\n\tif (n == 0) return 1;\n\tvar d = N(k, n - 1);\n\treturn d * d * (n - 1) / n;\n};\n\n/**\n * * Write a function to find then'th lucas number.\n */\nvar L = function(k, n) {\n\tif (n == 0) return 1;\n\tvar d = L(k, n - 1);\n\treturn d * d * (n - 1) / n;\n};\n\n/**\n * * Write a function to find then'th lucas number.\n */\nvar N = function(k, n) {\n\tif (n == 0) return 1;\n\tvar d = N(k, n - 1);\n\treturn d * d * (n - 1) / n;\n};\n\n/**\n * * Write a function to find then'th lucas number.\n */\nvar L = function(k, n) {\n\tif (n == 0) return 1;\n\tvar d = L(k, n - 1);\n\treturn d * d * (n - 1) / n;\n};\n\n/**\n * * Write a function to find then'th lucas number.\n */\nvar N = "]}
{"task_id": "MBJSP/390", "prompt": "function addString(list, string) {\n/**\n * * Write a function to insert a given string at the beginning of all items in a list.\n */", "entry_point": "addString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar arg01 = \"temp{0}\";\nvar x0 = addString(arg00, arg01);\nvar v0 = [\"temp1\", \"temp2\", \"temp3\", \"temp4\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"a\", \"b\", \"c\", \"d\"];\nvar arg11 = \"python{0}\";\nvar x1 = addString(arg10, arg11);\nvar v1 = [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 8];\nvar arg21 = \"string{0}\";\nvar x2 = addString(arg20, arg21);\nvar v2 = [\"string5\", \"string6\", \"string7\", \"string8\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to insert a given string at the beginning of all items in a list.", "language": "javascript", "canonical_solution": "  return list.map(function(item) {\n    return string.replace(\"{0}\", item);\n  });\n}", "completion": ["\nreturn ", "\n},{}],48:[", "\n\n", "\n\nvar hasSubstr = function hasSubstr(str, substr) {\n  return str.indexOf(substr) === 0;\n};\n\nvar isBool = function isBool(val) {\n  return typeof val === 'boolean';\n};\n\nvar isInt = function isInt(val) {\n  return typeof val === 'number' && val % 1 === 0;\n};\n\nvar isString = function isString(val) {\n  return typeof val ==='string';\n};\n\nvar isObject = function isObject(val) {\n  return val!== null && typeof val === 'object';\n};\n\nvar isEmpty = function isEmpty(val) {\n  if (!isObject(val)) {\n    return true;\n  }\n\n  var count = Object.keys(val).length;\n  return count === 0;\n};\n\nvar isNull = function isNull(val) {\n  return val === null;\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar isDefined = function isDefined(val) {\n  return!isUndefined(val);\n};\n\nvar isFunction = function isFunction(val) {\n  return typeof val === '", "\n    let f = function () {\n        let str = \"\";\n        for (let i = 0; i < args.length; i++) {\n            str += args[i];\n        }\n        return str;\n    };\n\n    if (list instanceof Array) {\n        list.unshift(f);\n        return list;\n    } else {\n        return [f];\n    }\n}\n\n/**\n * * Write a function to insert a given string at the beginning of all items in a list.\n */\n"]}
{"task_id": "MBJSP/391", "prompt": "function convertListDictionary(l1, l2, l3) {\n/**\n * * Write a function to convert more than one list to nested dictionary.\n */", "entry_point": "convertListDictionary", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"S001\", \"S002\", \"S003\", \"S004\"];\nvar arg01 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"];\nvar arg02 = [85, 98, 89, 92];\nvar x0 = convertListDictionary(arg00, arg01, arg02);\nvar v0 = [{'\"S001\"':{'\"Adina Park\"':85}}, {'\"S002\"':{'\"Leyton Marsh\"':98}}, {'\"S003\"':{'\"Duncan Boyle\"':89}}, {'\"S004\"':{'\"Saim Richards\"':92}}];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"abc\", \"def\", \"ghi\", \"jkl\"];\nvar arg11 = [\"python\", \"program\", \"language\", \"programs\"];\nvar arg12 = [100, 200, 300, 400];\nvar x1 = convertListDictionary(arg10, arg11, arg12);\nvar v1 = [{'\"abc\"':{'\"python\"':100}}, {'\"def\"':{'\"program\"':200}}, {'\"ghi\"':{'\"language\"':300}}, {'\"jkl\"':{'\"programs\"':400}}];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"A1\", \"A2\", \"A3\", \"A4\"];\nvar arg21 = [\"java\", \"C\", \"C++\", \"DBMS\"];\nvar arg22 = [10, 20, 30, 40];\nvar x2 = convertListDictionary(arg20, arg21, arg22);\nvar v2 = [{'\"A1\"':{'\"java\"':10}}, {'\"A2\"':{'\"C\"':20}}, {'\"A3\"':{'\"C++\"':30}}, {'\"A4\"':{'\"DBMS\"':40}}];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert more than one list to nested dictionary.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < l1.length; i++) {\n    result.push({ [l1[i]]: { [l2[i]]: l3[i] } });\n  }\n  return result;\n}", "completion": ["\n\n/**\n * * Example 1: * * Write a function to convert a list to nested dictionary * *\n * * Example 1: * * `new_dict = {\n  \"user\": [\n    {\n      \"first_name\": \"A\",\n      \"last_name\": \"B\",\n      \"age\": \"18\",\n      \"gender\": \"Male\",\n      \"email\": \"A@B.com\",\n      \"occupation\": \"School of Life\"\n    },\n    {\n      \"first_name\": \"C\",\n      \"last_name\": \"D\",\n      \"age\": \"19\",\n      \"gender\": \"Female\",\n      \"email\": \"C@D.com\",\n      \"occupation\": \"Paranormal\"\n    }\n  ]\n}\n\nfor(key in new_dict) {\n  // Do something with key\n}\n\n*/\n\n/**\n * * Example 2: * * Write a ", "\n", "\n} else {\n/**\n * * Write a function to convert one list to nested dictionary.\n */\n}\n```\n\n## *Create a function that takes a list and converts each item to a dictionary.\n\nThe ", "\n\ndict.write = function(fn) {\n    var keys = Object.keys(this.getObject());\n    var values = [];\n    for(var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        values.push(fn(key, this.get(key)));\n    }\n    return values;\n};\n\n/**\n * * Read a function that converts nested dictionary to more than one list.\n */\n\ndict.read = function(fn) {\n    var values = [];\n    var keys = Object.keys(this.getObject());\n    for(var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        values.push(fn(key, this.get(key)));\n    }\n    return values;\n};\n\n/**\n * * Get nested dictionary from key.\n */\n\ndict.get = function(key) {\n    return this.getObject()[key];\n};\n\n/**\n * * Set nested dictionary to key.\n */\n\ndict.set = function(key, val) {\n    this.getObject()[key] = val;\n};\n\n/**\n * * Get nested dictionary to key.\n */\n\ndict.getObject = function() {\n    return this.obj;\n};\n\n/**\n * * Set nested dictionary to key.\n */\n\ndict.setObject = function(obj) {\n    this.obj = obj;\n};\n\n/**\n * * Print nested dictionary to console.\n */\n\ndict.print = ", "\n("]}
{"task_id": "MBJSP/392", "prompt": "function getMaxSum(n) {\n/**\n * * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n */", "entry_point": "getMaxSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 60;\nvar x0 = getMaxSum(arg00);\nvar v0 = 106;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = getMaxSum(arg10);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar x2 = getMaxSum(arg20);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "language": "javascript", "canonical_solution": "    if(n <= 5) {\n        return n;\n    } else {\n        return getMaxSum(Math.floor(n / 2)) + getMaxSum(Math.floor(n / 3)) + getMaxSum(Math.floor(n / 4)) + getMaxSum(Math.floor(n / 5));\n    }\n}", "completion": ["\nvar maxSumFn = ", "\n", "\n", "\nvar maxSumOfPossibleSubset = ", "\n"]}
{"task_id": "MBJSP/393", "prompt": "function maxLengthList(inputlist) {\n/**\n * * Write a function to find the list with maximum length using lambda function.\n */", "entry_point": "maxLengthList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]];\nvar x0 = maxLengthList(arg00);\nvar v0 = [3, [13, 15, 17]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]];\nvar x1 = maxLengthList(arg10);\nvar v1 = [5, [1, 2, 3, 4, 5]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]];\nvar x2 = maxLengthList(arg20);\nvar v2 = [4, [6, 7, 8, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the list with maximum length using lambda function.", "language": "javascript", "canonical_solution": "  let max = 0;\n  let maxList = [];\n  inputList.forEach(list => {\n    if (list.length > max) {\n      max = list.length;\n      maxList = list;\n    }\n  });\n  return [max, maxList];\n}", "completion": ["\n", "\n\n    var l = new List();\n    var maxlen = -1;\n    for (var i = 0; i < inputlist.length; i++) {\n        var item = inputlist[i];\n        if (item.length > maxlen) {\n            maxlen = item.length;\n            l.clear();\n            l.add(item);\n        } else if (item.length == maxlen) {\n            l.add(item);\n        }\n    }\n    print(l);\n    return maxlen;\n}\n\n\n\n/**\n * * Write a function to find the list with maximum length using min ", "\n    ", "\n\n  /**\n   * Write a function to find the list with maximum length using lambda function.\n   */\n  findListWithMaxLength(list: List): number {\n    return list.reduce((max: number, cur: List) => cur.length > max? cur.length : max, 0);\n  }\n/**\n * * Write a function to find the list with maximum length using lambda function.\n */\n\n  /**\n   * Write a function to find the list with maximum length using lambda function.\n   */\n  findListWithMaxLength(list: List): number {\n    return list.reduce((max: number, cur: List) => cur.length > max? cur.length : max, 0);\n  }\n/**\n * * Write a function to find the list with maximum length using lambda function.\n */\n\n  /**\n   * Write a function to find the list with maximum length using lambda function.\n   */\n  findListWithMaxLength(list: List): number {\n    return list.reduce((max: number, cur: List) => cur.length > max? cur.length : max, 0);\n  }\n/**\n * * Write a function to find the list with maximum length using lambda function.\n */\n\n  /**\n   * Write a function to find the list with maximum length using lambda function.\n   */\n  findListWithMaxLength(list: List): number {\n    return list.reduce((max: number, cur: List) => cur.length > max? cur.length : max, 0);\n  }\n/**\n * * Write a function to find the list with maximum length using lambda function.\n */\n\n  /**\n   * Write a function to find the list with maximum length using lambda ", "\n\n/**\n * * Write a function to find the list with maximum length using lambda function and map function.\n */\n\n/**\n * * Write a function to find the list with maximum length using lambda function and filter function.\n */\n\n/**\n * * Write a function to find the list with maximum length using lambda function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using lambda function and map function, filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function and filter function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function and filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function, filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function, filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function, filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function, filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function, filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function, filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function, filter function and reduce function.\n */\n\n/**\n * * Write a function to find the list with maximum length using map function, filter "]}
{"task_id": "MBJSP/394", "prompt": "function checkDistinct(testtup) {\n/**\n * * Write a function to check if given tuple is distinct or not.\n */", "entry_point": "checkDistinct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 4, 5, 6, 1, 4];\nvar x0 = checkDistinct(arg00);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 4, 5, 6];\nvar x1 = checkDistinct(arg10);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 4, 5, 6];\nvar x2 = checkDistinct(arg20);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if given tuple is distinct or not.", "language": "javascript", "canonical_solution": "  return new Set(testTup).size === testTup.length;\n}", "completion": ["\nvar getUniqueTuple = function getUniqueTuple(tup) {\n  return (0, _objectValues.default)(tup).reduce(", "\n/**\n * * Write a function to calculate the distinct count of given tuple.\n */\n/**\n * * Write a function to calculate the average length of given tuple.\n */\n/**\n * * Write a function to calculate the length of given tuple.\n */\n/**\n * * Write a function to check if given tuple is continuous or not.\n */\n/**\n * * Write a function to calculate the average count of given tuple.\n */\n/**\n * * Write a function to calculate the maximum count of given tuple.\n */\n/**\n * * Write a function to calculate the minimum count of given tuple.\n */\n/**\n * * Write a function to check if given tuple is nested or not.\n */\n/**\n * * Write a function to check if given tuple is nested or not.\n */\n}\n\n/**\n * * Write a function to check if given tuple is distinct or not.\n */\n/**\n * * Write a function to calculate the distinct count of given tuple.\n */\n/**\n * * Write a function to calculate the average length of given tuple.\n */\n/**\n * * Write a function to calculate the length of given tuple.\n */\n/**\n * * Write a function to check if given tuple is continuous or not.\n */\n/**\n * * Write a function to calculate the average count of given tuple.\n */\n/**\n * * Write a function to calculate the maximum count of given tuple.\n */\n/**\n * * Write a function to calculate the minimum count of given tuple.\n */\n/**\n * * Write a function to check if given tuple is nested or not.\n */\n/**\n * * Write a function to check if given tuple is nested or not.\n */\n}\n\n/**\n * * Write a function to check if given tuple is distinct or not.\n */\n/**\n * * Write a ", "\n\n}\n</pre></div>\n</div>\n<div class=\"section\" id=\"tutorial-primitive-value\">\n<h2>Tutorial: Primitive Value<a class=\"headerlink\" href=\"#tutorial-primitive-value\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>One of the most common types of <cite>primitive</cite> values is <cite>integer</cite> and <cite>float</cite>.</p>\n<p>When working with <cite>integer</cite> and <cite>float</cite> values, the <cite>number</cite> extension is necessary. For example, the following code shows that <cite>number</cite> is used to write a mathematical ", "\n", "\n"]}
{"task_id": "MBJSP/395", "prompt": "function firstNonRepeatingCharacter(str1) {\n/**\n * * Write a JavaScript function to find the first non-repeated character in a given string.\n */", "entry_point": "firstNonRepeatingCharacter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abcabc\";\nvar x0 = firstNonRepeatingCharacter(arg00);\nvar v0 = null;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"abc\";\nvar x1 = firstNonRepeatingCharacter(arg10);\nvar v1 = \"a\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"ababc\";\nvar x2 = firstNonRepeatingCharacter(arg20);\nvar v2 = \"c\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the first non-repeated character in a given string.", "language": "javascript", "canonical_solution": "  const charMap = {};\n  for (let char of str1) {\n    charMap[char] = charMap[char] + 1 || 1;\n  }\n  for (let char in charMap) {\n    if (charMap[char] === 1) {\n      return char;\n    }\n  }\n  return null;\n}", "completion": ["\nstr1.split('').map(", "\nlet i = 0;\nlet str = str1.toLowerCase();\nwhile (str[i]) {\n    i++;\n}\nreturn str1.charAt(i - 1);\n}\n\nclass Comparer {\n    /**\n     * * Compares two strings using the Caesar Shift algorithm.\n     * \n     * @param {string} str1 The first string to compare.\n     * @param {string} str2 The second string to compare.\n     * @returns {number} Returns -1 if str1 is lower, 0 if they are equal, and 1 if str1 is higher.\n     */\n    static compare(str1, str2) {\n        let i = 0;\n        let j = 0;\n        let k = 0;\n        let shift = 0;\n        let str = str1.toLowerCase();\n        let str2 = str2.toLowerCase();\n        let diff = str.length - str2.length;\n        if (diff < 0) {\n            shift = str2.length + diff;\n            if (shift > 26) {\n                shift = 26;\n            }\n        }\n        else if (diff > 0) {\n            shift = diff;\n            if (shift < 26) {\n                shift = 26 - shift;\n            }\n        }\n        for (k = 0; k < str.length; k++) {\n            i = k;\n            j = k + shift;\n            if (str[i]!== str2[j]) {\n                return str[i] - str2[j];\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * * Compares two strings using the Caesar Shift", "\n", "\nvar str1 = 'Hello World';\nconsole.log(str1.indexOf('o')); // 1\nconsole.log(str1.indexOf('e')); // 5\nconsole.log(str1.indexOf('W')); // -1\nconsole.log(str1.indexOf('Wor')); // -1\nconsole.log(str1.indexOf('Hello')); // -1\nconsole.log(str1.indexOf('O')); // 5\nconsole.log(str1.indexOf('o', 6)); // 6\nconsole.log(str1.indexOf('H', 4)); // 4\nconsole.log(str1.indexOf('w', 1)); // -1\nconsole.log(str1.indexOf('World', 1)); // 1\nconsole.log(str1.indexOf('r', 6)); // 6\nconsole.log(str1.indexOf('r', 6, true)); // 6\n/**\n * * Write a JavaScript function to get the characters with a given prefix in a given string.\n */\nvar str1 = 'Hello World';\nconsole.log(str1.indexOf('l', 6)); // 6\nconsole.log(str1.indexOf('l', 6, true)); // 6\n/**\n * * Write a JavaScript function to get the characters with a given prefix in a given string.\n */\nvar str1 = 'Hello World';\nconsole.log(str1.lastIndexOf('l', 6)); // 6\nconsole.log(str1.lastIndexOf('l', 6, true)); // 6\n/**\n * * Write a JavaScript ", "\nstr1 = 'I like cats.';\nconsole.log(`FINDING THE FIRST NON-REPEATED CHARACTER IN THE STRING: ${str1.substr(0, 5)}`);\n/**\n * * Write a JavaScript function to find the first non-repeated character in a given string.\n */\nstr1 = 'I like cats.';\nconsole.log(`FINDING THE FIRST NON-REPEATED CHARACTER IN THE STRING: ${str1.substr(0, 5)}`);\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\nstr1 = 'I like cats.';\nconsole.log(`FINDING THE FIRST REPEATED CHARACTER IN THE STRING: ${str1.substr(0, 5)}`);\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\nstr1 = 'I like cats.';\nconsole.log(`FINDING THE FIRST REPEATED CHARACTER IN THE STRING: ${str1.substr(0, 5)}`);\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\nstr1 = 'I like cats.';\nconsole.log(`FINDING THE FIRST REPEATED CHARACTER IN THE STRING: ${str1.substr(0, 5)}`);\n/**\n * * Write a JavaScript function to find the first repeated character in a given string.\n */\nstr1 = 'I like cats.';\nconsole.log(`FINDING THE FIRST REPEATED CHARACTER IN THE STRING: ${str1.substr(0, 5)}`);\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/396", "prompt": "function checkChar(string) {\n/**\n * * Write a function to check whether the given string starts and ends with the same character or not using regex.\n */", "entry_point": "checkChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"abba\";\nvar x0 = checkChar(arg00);\nvar v0 = \"Valid\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"a\";\nvar x1 = checkChar(arg10);\nvar v1 = \"Valid\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abcd\";\nvar x2 = checkChar(arg20);\nvar v2 = \"Invalid\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "language": "javascript", "canonical_solution": "    if (string[0] === string[string.length - 1]) {\n        return 'Valid';\n    } else {\n        return 'Invalid';\n    }\n}", "completion": ["\n\n};\n\n/**\n * * Check if the string is defined.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a function to check whether the given string contains only the same character or not using regex.\n */\n\n};\n\n/**\n * * Write a ", "\n", "\n}\n\nexport function readFile(file: string) {\n/**\n * * Read the content of a given file.\n */\n}\n\nexport function readFileSync(file: string) {\n/**\n * * Read the content of a given file.\n */\n}\n\nexport function readURL(url: string) {\n/**\n * * Read the content of a given URL.\n */\n}\n\nexport function readURLSync(url: string) {\n/**\n * * Read the content of a given URL.\n */\n}\n\nexport function setProtocol(url: string, protocol: string) {\n/**\n * * Sets protocol of a given URL.\n */\n}\n\nexport function setQuery(url: string, query: string) {\n/**\n * * Sets query of a given URL.\n */\n}\n\nexport function setRef(url: string, ref: string) {\n/**\n * * Sets ref of a given URL.\n */\n}\n\nexport function setUserInfo(url: string, userInfo: string) {\n/**\n * * Sets userInfo of a given URL.\n */\n}\n\nexport function toTls(url: string, ssl: boolean) {\n/**\n * * Set the protocol to TLS.\n */\n}\n\nexport function toUrl(url: string, ssl: boolean) {\n/**\n * * Set the protocol to URL.\n */\n}\n\nexport function writeFile(file: string, content: string) {\n/**\n * * Write content of a given file.\n */\n}\n\nexport function writeFileSync(file: string, content: string) {\n/**\n * * Write content of a given file.\n */\n}\n\nexport ", "\n})();\n(", "\n\n  const writeCheck = (name, string) => {\n    return string.substring(0, 1) === string.substring(string.length - 1, string.length);\n  };\n/**\n * * Check whether the given string starts and ends with the same character or not using regex.\n */\n\n  const checkStartsEndsWithSameCharacter = (name, string) => {\n    return string.substring(0, 1) === string.substring(string.length - 1, string.length);\n  };\n\n/**\n * * Strip the leading and trailing HTML tags.\n */\n\n  const stripTags = (name, string) => {\n    const stringWithoutTags = string.replace(/<\\/?[^>]+(>|$)/g, '');\n\n    if (stringWithoutTags.length === 0) {\n      return '';\n    }\n\n    return stringWithoutTags;\n  };\n/**\n * * Convert the given string to an array of words by splitting on whitespaces.\n */\n\n  const toWords = (name, string) => {\n    const stringWithoutSpaces = string.split('');\n\n    if (stringWithoutSpaces.length === 0) {\n      return [];\n    }\n\n    return stringWithoutSpaces;\n  };\n\n/**\n * * Strip the leading and trailing HTML tags.\n */\n\n  const stripTagsInBrackets = (name, string) => {\n    const arrayWithoutTags = string.match(/<\\/?[^>]+>/g);\n\n    if (arrayWithoutTags.length === 0) {\n      return '';\n    }\n\n    return arrayWithoutTags.join('');\n  };\n/**\n * * Check whether the given string starts and ends with the same character or not using regex.\n */"]}
{"task_id": "MBJSP/397", "prompt": "function medianNumbers(a, b, c) {\n/**\n * * Write a function to find the median of three specific numbers.\n */", "entry_point": "medianNumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 25;\nvar arg01 = 55;\nvar arg02 = 65;\nvar x0 = medianNumbers(arg00, arg01, arg02);\nvar v0 = 55.0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 20;\nvar arg11 = 10;\nvar arg12 = 30;\nvar x1 = medianNumbers(arg10, arg11, arg12);\nvar v1 = 20.0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar arg21 = 45;\nvar arg22 = 75;\nvar x2 = medianNumbers(arg20, arg21, arg22);\nvar v2 = 45.0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the median of three specific numbers.", "language": "javascript", "canonical_solution": "  const sorted = [a, b, c].sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n  return sorted[middle];\n}", "completion": ["\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a function to find the median of three specific numbers.\n */\n/**\n * * Write a ", "\n\n/**\n * Write a function to find the median of three specific numbers.\n */\n", "\n(", "\n", "\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three specific numbers.\n */\n/**\n * * Find the median of three"]}
{"task_id": "MBJSP/398", "prompt": "function sumOfDigits(nums) {\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */", "entry_point": "sumOfDigits", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 2, 56];\nvar x0 = sumOfDigits(arg00);\nvar v0 = 14;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20, 4, 5, \"b\", 70, \"a\"]];\nvar x1 = sumOfDigits(arg10);\nvar v1 = 19;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, -4, 5, -70];\nvar x2 = sumOfDigits(arg20);\nvar v2 = 19;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to compute the sum of digits of each number of a given list.", "language": "javascript", "canonical_solution": "  // TODO: Your code here\n}", "completion": ["\nconsole.log(sumNumbers(nums))\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\nconsole.log(sumNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\nconsole.log(sumNumbers([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n}\n/**\n * * Compute the sum of digits of each number of a given list.\n */\n", "\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * Write a ", "\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a function to compute the sum of digits of each number of a given list.\n */\n\n/**\n * * Write a ", "\nlet sumDigits = (nums) => {\n    let sum = 0;\n    let n = nums.length;\n    for (let i = 0; i < n; i++) {\n        let num = nums[i];\n        sum += num.toString().length;\n    }\n    return sum;\n};\n// console.log(sumDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n```\n\n&emsp;&emsp;<font size=2>** \u6839\u636e\u6570\u5b57\u957f\u5ea6 \u8ba1\u7b97\u51fa\u6765\u7684\u603b\u548c\u3002 **</font></br>\n\n&emsp;&emsp;<font size=2>** \u7b54\u6848\uff1a `[8, 7, 3, 6, 3, 4, 6, 5, 4, 3, 9, 7]`</font></br>\n\n&emsp;&emsp;<font size=2>** \u601d\u8def\uff1a \u904d\u5386\u5143\u7d20\uff0c\u53d6\u51fa\u5143\u7d20\u7684\u957f\u5ea6\uff0c\u5e76\u8fdb\u884c\u52a0\u548c\u3002 **</font></br>\n\n&emsp;&emsp;<font size=2>** \u7531\u4e8e\u4f4d\u6570\uff0c\u56e0\u6b64\uff0c `nums` \u4e2d\u7684\u5143\u7d20\u6bcf\u4e2a\u5143\u7d20\u7684\u957f\u5ea6\u90fd\u4e3a `1`\uff0c\u5982\u679c\u5143\u7d20\u7684\u957f\u5ea6\u4e3a `2`\uff0c\u90a3\u4e48", "\nsumDigits(nums) {\n  return nums.reduce((sum, num) => sum + num.length, 0);\n}\n```\n\n## \u9898\u76ee\u63cf\u8ff0\n\n> Write a "]}
{"task_id": "MBJSP/399", "prompt": "function bitwiseXor(testtup1, testtup2) {\n/**\n * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n */", "entry_point": "bitwiseXor", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = bitwiseXor(arg00, arg01);\nvar v0 = [15, 6, 5, 10];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [11, 5, 7, 10];\nvar arg11 = [6, 3, 4, 4];\nvar x1 = bitwiseXor(arg10, arg11);\nvar v1 = [13, 6, 3, 14];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 6, 8, 11];\nvar arg21 = [7, 4, 5, 6];\nvar x2 = bitwiseXor(arg20, arg21);\nvar v2 = [11, 2, 13, 13];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] ^ testTup2[i]);\n  }\n  return result;\n}", "completion": ["\nreturn {\n  id: 'xor',\n  value: function (args, context) {\n    var obj1 = context.getObjectFromPath(args.obj1);\n    var obj2 = context.getObjectFromPath(args.obj2);\n    var number = obj1[args.prop1] ^ obj2[args.prop2];\n    return {\n      obj1: obj1,\n      obj2: obj2,\n      prop1: args.prop1,\n      prop2: args.prop2,\n      number: number,\n      type: context.getObjType(obj1)\n    };\n  }\n};\n\n/**\n * @ngdoc filter\n * @name xor\n * @kind ", "\n} else {\n/**\n * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n */\n}\n/**\n * * Return the number of values in the given tuple.\n */\n}\n/**\n * * Write a function to return the element at the given index of the given tuple.\n */\n}\n/**\n * * Write a function to return the first element of the given tuple.\n */\n}\n/**\n * * Write a function to return the last element of the given tuple.\n */\n}\n/**\n * * Write a function to return the length of the given tuple.\n */\n}\n/**\n * * Return the result of multiplying the elements in the given tuple.\n */\n}\n/**\n * * Write a function to return the result of adding the given elements to each other.\n */\n}\n/**\n * * Write a function to return the result of subtracting the given elements from each other.\n */\n}\n/**\n * * Return the result of dividing the elements in the given tuple by each other.\n */\n}\n/**\n * * Write a function to return the result of modding the given elements in the given tuple.\n */\n}\n/**\n * * Write a function to return the result of raising the elements in the given tuple to the given power.\n */\n}\n/**\n * * Write a function to return the result of raising each element in the given tuple to the given power.\n */\n}\n/**\n * * Return the result of squaring the elements in the given tuple.\n */\n}\n/**\n * * Write a function to return the result of squaring the given element in the given tuple.\n */\n}\n/**\n * * Return the result of cubing the elements in the given tuple.\n */\n}\n/**\n * * Write a ", "\n", "\n  expect(", "\n} else {\n/**\n * * No match found.\n */\n}\n```\n\n## Further information\n\n-   [Contributing](https://help.github.com/articles/creating-a-pull-request/)\n-   [Issues](https://github.com/camunda/camunda-bpm-js/issues)\n<|endoftext|>"]}
{"task_id": "MBJSP/400", "prompt": "function extractFreq(testlist) {\n/**\n * * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n */", "entry_point": "extractFreq", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4], [1, 2], [4, 3], [5, 6]];\nvar x0 = extractFreq(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 15], [2, 3], [5, 4], [6, 7]];\nvar x1 = extractFreq(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 16], [2, 3], [6, 5], [6, 9]];\nvar x2 = extractFreq(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "language": "javascript", "canonical_solution": "    const freq = {}\n    for (let i = 0; i < testList.length; i++) {\n        let key = testList[i].sort().join();\n        if (freq[key]) {\n            freq[key] = freq[key] + 1;\n        } else {\n            freq[key] = 1;\n        }\n    }\n    return Object.keys(freq).length;\n}", "completion": ["\n  tuplefrequency_extractor(tup) {\n    tup[0] = tup[0].split(':');\n    let frequency = tup[1];\n    tup[1] = parseFloat(frequency);\n    return tup;\n  }\n/**\n * * Return the frequency of unique tuples in the given list order irrespective.\n */\n  tuplefrequency_extractor_return_frequency() {\n    return this.extract_frequency();\n  }\n/**\n * * Return the frequency of unique tuples in the given list order irrespective.\n */\n  tuplefrequency_extractor_return_frequency_set(frequency_set) {\n    return frequency_set;\n  }\n  /**\n * * Return the frequency of unique tuples in the given list order irrespective.\n */\n  tuplefrequency_extractor_return_frequency_set_set(frequency_set) {\n    return frequency_set;\n  }\n  /**\n * * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n */\n  tuplefrequency_extractor_return_frequency_set_set_set(frequency_set) {\n    return frequency_set;\n  }\n/**\n * * Write a ", "\n\n", "\n", "\n", "\n    let i = 0;\n    let f = 0;\n    let n = 0;\n    let tuples = 0;\n    let list = [];\n    while (i < testlist.length) {\n        let index = testlist[i];\n        if (!list.includes(index)) {\n            list.push(index);\n        }\n        i++;\n    }\n    while (n < list.length) {\n        let fm = 0;\n        let tm = 0;\n        for (let i = 0; i < list.length; i++) {\n            if (list[i] == n) {\n                fm++;\n            }\n            if (list[i] == list[n]) {\n                tm++;\n            }\n        }\n        if (fm >= tm) {\n            n++;\n        } else {\n            tuples++;\n            n++;\n        }\n    }\n    print(`\ntuple frequency: ${tuples}\n    \n    `);\n}\n\n/**\n * * Write a function to find out how many times the given element appears in the given list order irrespective.\n */\n"]}
{"task_id": "MBJSP/401", "prompt": "function addNestedTuples(testtup1, testtup2) {\n/**\n * * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n */", "entry_point": "addNestedTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = addNestedTuples(arg00, arg01);\nvar v0 = [[7, 10], [7, 14], [3, 10], [8, 13]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = addNestedTuples(arg10, arg11);\nvar v1 = [[9, 12], [9, 16], [5, 12], [10, 15]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = addNestedTuples(arg20, arg21);\nvar v2 = [[11, 14], [11, 18], [7, 14], [12, 17]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push([testTup1[i][0] + testTup2[i][0], testTup1[i][1] + testTup2[i][1]]);\n  }\n  return result;\n}", "completion": ["\n    print(\"{}, {} -> {}\", $a, $b, $c, $d, $e, $f);\n}\n\n/**\n * * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n */\n", "\n\n/**\n * * Write a function to perform index wise subtraction of tuple elements in the given two nested tuples.\n */\n\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two nested tuples.\n */\n\n/**\n * * Write a function to perform index wise division of tuple elements in the given two nested tuples.\n */\n\n/**\n * * Write a function to perform index wise subtraction of tuple elements in the given nested tuple.\n */\n\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given nested tuple.\n */\n\n/**\n * * Write a function to perform index wise division of tuple elements in the given nested tuple.\n */\n\n/**\n * * Write a function to return the product of the given nested tuple.\n */\n\n/**\n * * Write a function to return the quotient of the given nested tuple.\n */\n\n/**\n * * Write a function to return the remainder of the given nested tuple.\n */\n\n/**\n * * Write a function to return the quotient of the given nested tuple.\n */\n\n/**\n * * Write a function to return the remainder of the given nested tuple.\n */\n\n/**\n * * Write a function to return the product of the given nested tuple.\n */\n\n/**\n * * Write a function to return the quotient of the given nested tuple.\n */\n\n/**\n * * Write a function to return the remainder of the given nested tuple.\n */\n\n/**\n * * Write a function to return the quotient of the given nested tuple.\n */\n\n/**\n * * Write a function to return the remainder of the given nested tuple.\n */\n\n/**\n * * Write a ", "\n  return [...a,...b,...c];\n}\n```\n\n## Multi-Dimensional Indexing\n\nThis API is more powerful, but it may take some time to understand. We are going to implement multi-dimensional indexing in this section.\n\n### Multi-Dimensional Indexing\n\nIndexing a multidimensional array in NumPy is similar to its single-dimensional indexing. Each row of the multidimensional array can be indexed with one or more column values of the array. For example, the following code indexes an array of `a, b, c` values in the following way:\n\n```python\nimport numpy as np\n\n# Compute multidimensional index from two column values\nindex = np.c_[a, b]\n```\n\n`index` is an array of length `n1 * n2`. The elements of `index` are integers in the range `[0, n1 * n2)`.\n\nFor example, consider an array of size `n1` * `n2` * `n3`, and `index` is an array of size `n1 * n2 * n3`. The elements of `index` are integers in the range `[0, n1 * n2 * n3)`.\n\n<img style=\"width:70%;\" alt=\"multidimensional index\" src=\"https://cloud.githubusercontent.com/assets/214526/17559562/c9e60b84-ca6a-11e6-8381-7f1f1f8f8b40.png\">\n\nThe `index` array has three dimensions. The shape of the array is `(n1 * n2 * n3, 3)`. The number of elements in the first dimension is `n1 * n2 * n3", "\n\nadd(left, right) {\n    return left.concat(right);\n}\n```\n\nSee [`tup`](https://github.com/charlieheen/mp4-video-to-json/blob/master/src/tup.ts) and [`tup`](https://github.com/charlieheen/mp4-video-to-json/blob/master/src/tup.ts) in the source code for more information.\n\n#### Find duplicates\n\nIn the first step of finding duplicate frames in the `output` folder, we find duplicate frames by comparing a number of frame properties with the properties of the file. We use [`hash`](https://github.com/charlieheen/mp4-video-to-json/blob/master/src/hash.ts) and [`md5`](https://github.com/charlieheen/mp4-video-to-json/blob/master/src/md5.ts) functions to ensure that the duplicate frames have unique properties and therefore we do not have to find them again.\n\nTo find duplicates in the `output` folder, we create a directory to contain duplicate frames. The directory is named `dupdir`, and is created as follows:\n\n```\nmkdir dupdir\n```\n\nWe then take each frame in the `output` folder, and use the `hash` and `md5` functions to create a file `hash.ts` that contains the properties of each frame. This file is named `hash.ts` and is created as follows:\n\n```\nmkdir dupdir/hash.ts\n```\n\nWe then use the `add` function to write a ", "\n    \n}\n\n/**\n * * Write a function to perform index wise subtraction of tuple elements in the given two nested tuples.\n */\n\nint\nTupleOperation::TupleOperationSubtraction(const vector<int64_t>& testtup1, const vector<int64_t>& testtup2) {\n/**\n * * Write a function to perform index wise subtraction of tuple elements in the given two nested tuples.\n */\n    \n}\n\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two nested tuples.\n */\n\nint\nTupleOperation::TupleOperationMultiplication(const vector<int64_t>& testtup1, const vector<int64_t>& testtup2) {\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two nested tuples.\n */\n    \n}\n\n/**\n * * Write a function to perform index wise division of tuple elements in the given two nested tuples.\n */\n\nint\nTupleOperation::TupleOperationDivision(const vector<int64_t>& testtup1, const vector<int64_t>& testtup2) {\n/**\n * * Write a function to perform index wise division of tuple elements in the given two nested tuples.\n */\n    \n}\n\n/**\n * * Write a function to perform index wise modulus of tuple elements in the given two nested tuples.\n */\n\nint\nTupleOperation::TupleOperationModulus(const vector<int64_t>& testtup1, const vector<int64_t>& testtup2) {\n/**\n * * Write a "]}
{"task_id": "MBJSP/402", "prompt": "function ncrModp(n, r, p) {\n/**\n * * Write a function to compute the value of ncr%p.\n */", "entry_point": "ncrModp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 2;\nvar arg02 = 13;\nvar x0 = ncrModp(arg00, arg01, arg02);\nvar v0 = 6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar arg11 = 12;\nvar arg12 = 43;\nvar x1 = ncrModp(arg10, arg11, arg12);\nvar v1 = 25;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 17;\nvar arg21 = 9;\nvar arg22 = 18;\nvar x2 = ncrModp(arg20, arg21, arg22);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to compute the value of ncr%p.", "language": "javascript", "canonical_solution": "  const factorial = (n) => {\n    let res = 1;\n    for (let i = 2; i <= n; i++) {\n      res *= i;\n    }\n    return res;\n  };\n  const ncr = (n, r) => {\n    return (factorial(n) / (factorial(r) * factorial(n - r))) % p;\n  };\n  return ncr(n, r) % p;\n}", "completion": ["\n", "\n", "\n/**\n * * Use p to compute the value of ncr%p.\n */\n};\n\n/**\n * * A number modulus.\n */\nclass Mod {\n  public:\n    /**\n     * * A number modulus.\n     */\n};\n\n/**\n * * A pair of numbers.\n */\nclass Pair {\n  public:\n    /**\n     * * A pair of numbers.\n     */\n};\n\n/**\n * * A triple of numbers.\n */\nclass Triple {\n  public:\n    /**\n     * * A triple of numbers.\n     */\n};\n\n/**\n * * A quadruple of numbers.\n */\nclass Quadruple {\n  public:\n    /**\n     * * A quadruple of numbers.\n     */\n};\n\n/**\n * * A quintuple of numbers.\n */\nclass Quintuple {\n  public:\n    /**\n     * * A quintuple of numbers.\n     */\n};\n\n/**\n * * A sextuple of numbers.\n */\nclass Sextuple {\n  public:\n    /**\n     * * A sextuple of numbers.\n     */\n};\n\n/**\n * * A septuple of numbers.\n */\nclass Septuple {\n  public:\n    /**\n     * * A septuple of numbers.\n     */\n};\n\n/**\n * * A octuple of numbers.\n */\nclass Octuple {\n  public:\n    /**\n     * * A octuple of numbers.\n     */\n};\n\n/**\n * * A nonuple of numbers.\n */\nclass Nonuple {\n  public:\n    /**\n     * * A nonuple of numbers.\n     */\n};\n\n/**\n * * A decuple of numbers.\n", "\n    var ncr = (", "\nvar ncrp = ("]}
{"task_id": "MBJSP/403", "prompt": "function isValidUrl(str) {\n/**\n * * Write a function to check if a url is valid or not using regex.\n */", "entry_point": "isValidUrl", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"https:\\/\\/www.google.com\";\nvar x0 = isValidUrl(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"https:/www.gmail.com\";\nvar x1 = isValidUrl(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"https:\\/\\/ www.redit.com\";\nvar x2 = isValidUrl(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if a url is valid or not using regex.", "language": "javascript", "canonical_solution": "  return /^https?:\\/\\/(www\\.)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/.test(str);\n}", "completion": ["\n\nvar Pattern = function () {\n    ", "\n\n", "\n", "\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n\n/**\n * * Check if a url is valid or not using regex.\n */\n", "\nvar re = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\u"]}
{"task_id": "MBJSP/404", "prompt": "function minimum(a, b) {\n/**\n * * Write a JavaScript function to find the minimum of two numbers.\n */", "entry_point": "minimum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 2;\nvar x0 = minimum(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = -5;\nvar arg11 = -4;\nvar x1 = minimum(arg10, arg11);\nvar v1 = -5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 0;\nvar arg21 = 0;\nvar x2 = minimum(arg20, arg21);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the minimum of two numbers.", "language": "javascript", "canonical_solution": "    if (a < b) {\n        return a;\n    }\n    return b;\n}", "completion": ["\n    var min = a < b? a : b;\n\n/**\n * * Write a JavaScript function to find the maximum of two numbers.\n */\n    var max = a > b? a : b;\n\n/**\n * * Write a JavaScript function to find the product of two numbers.\n */\n    var prod = a * b;\n\n/**\n * * Write a JavaScript function to find the sum of two numbers.\n */\n    var sum = a + b;\n\n/**\n * * Write a JavaScript function to find the difference of two numbers.\n */\n    var diff = a - b;\n\n/**\n * * Write a JavaScript function to find the remainder of two numbers.\n */\n    var remainder = a % b;\n\n/**\n * * Write a JavaScript function to find the quotient of two numbers.\n */\n    var quotient = a / b;\n\n/**\n * * Write a JavaScript function to find the sum of all the numbers in an array.\n */\n    var sumArray = a.concat(b).map(", "\n(", "\n  return min(a, b);\n};\n\n/**\n * * Write a JavaScript function to find the maximum of two numbers.\n */\nexports.max = function max(a, b) {\n/**\n * * Write a JavaScript function to find the maximum of two numbers.\n */\n  return max(a, b);\n};\n\n/**\n * * Write a JavaScript function to find the area of a rectangle with the given width and height.\n */\nexports.area = function area(width, height) {\n/**\n * * Write a JavaScript function to find the area of a rectangle with the given width and height.\n */\n  return area(width, height);\n};\n\n/**\n * * Write a JavaScript function to find the perimeter of a rectangle with the given width and height.\n */\nexports.perimeter = function perimeter(width, height) {\n/**\n * * Write a JavaScript function to find the perimeter of a rectangle with the given width and height.\n */\n  return perimeter(width, height);\n};\n\n/**\n * * Write a JavaScript function to find the perimeter of a circle with the given radius.\n */\nexports.perimeter_circle = function perimeter_circle(radius) {\n/**\n * * Write a JavaScript function to find the perimeter of a circle with the given radius.\n */\n  return perimeter_circle(radius);\n};\n\n/**\n * * Write a JavaScript function to find the area of a circle with the given radius.\n */\nexports.area_circle = function area_circle(radius) {\n/**\n * * Write a JavaScript function to find the area of a circle with the given radius.\n */\n  return area_circle(radius);\n};\n\n/**\n * * Write a JavaScript ", "\n", "\n"]}
{"task_id": "MBJSP/405", "prompt": "function checkTuplex(tuplex, tuple1) {\n/**\n * * Write a function to check whether an element exists within a tuple.\n */", "entry_point": "checkTuplex", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg01 = \"r\";\nvar x0 = checkTuplex(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg11 = \"5\";\nvar x1 = checkTuplex(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"];\nvar arg21 = 3;\nvar x2 = checkTuplex(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether an element exists within a tuple.", "language": "javascript", "canonical_solution": "  return tuplex.includes(tuple1);\n}", "completion": ["\n\n/**\n * * Write a ", "\n\n/**\n * @constructor\n * @param {Array} tuplex an array containing `tuple1` and `tuple2`.\n * @param {string} tuple1 a unique string\n * @param {string} tuple2 a unique string\n * @return {", "\n", "\nexports.tuple1_write_func = write_tuple1;\n\n", "\n\nvar checkTuplex = {\n\t/**\n\t * Check whether an element exists within a tuple.\n\t * @param {any} element An element.\n\t * @param {any} tuple A tuple.\n\t * @returns {boolean} `true` if the tuple contains the element, `false` otherwise.\n\t */\n\tcontains: function contains(element, tuple) {\n\t\treturn tuple.some("]}
{"task_id": "MBJSP/406", "prompt": "function findParity(x) {\n/**\n * * Write a JavaScript function to find the parity of a given number.\n */", "entry_point": "findParity", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = findParity(arg00);\nvar v0 = \"Even Parity\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 7;\nvar x1 = findParity(arg10);\nvar v1 = \"Odd Parity\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = findParity(arg20);\nvar v2 = \"Even Parity\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the parity of a given number.", "language": "javascript", "canonical_solution": "    if (x % 2 === 0) {\n        return \"Even Parity\";\n    } else {\n        return \"Odd Parity\";\n    }\n}", "completion": ["\n", "\n", "\n\nvar toParity = function(number) {\n  return parity(number);\n};\n\nvar parity = ", "\n\n/**\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity function\n *\n * Parity ", "\n\n// Check if the given number is odd or even\nvar isOdd = function isOdd(n) {\n  return n % 2 === 1;\n};\nvar isEven = function isEven(n) {\n  return n % 2 === 0;\n};\n\n// Print out the parity of a given number\nvar printOddParity = function printOddParity(n) {\n  console.log(isOdd(n)? \"odd\" : \"even\");\n};\nvar printEvenParity = function printEvenParity(n) {\n  console.log(isEven(n)? \"even\" : \"odd\");\n};\n\n// Test if the given number is odd or even\nvar isOddTest = function isOddTest(n) {\n  return n % 2 === 1;\n};\nvar isEvenTest = function isEvenTest(n) {\n  return n % 2 === 0;\n};\n\n// Print out the parity of a given number\nvar printOddParityTest = function printOddParityTest(n) {\n  console.log(isOddTest(n)? \"odd\" : \"even\");\n};\nvar printEvenParityTest = function printEvenParityTest(n) {\n  console.log(isEvenTest(n)? \"even\" : \"odd\");\n};\n```\n\n### \ud83d\udca1 Explanation\n\n- [JavaScript Algorithm](https://github.com/Rinat/javascript-algorithm)\n- [JavaScript for loops](https://github.com/Rinat/javascript-for-loop)\n- [JavaScript map() "]}
{"task_id": "MBJSP/407", "prompt": "function rearrangeBigger(n) {\n/**\n * * Write a function to create the next bigger number by rearranging the digits of a given number.\n */", "entry_point": "rearrangeBigger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = rearrangeBigger(arg00);\nvar v0 = 21;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = rearrangeBigger(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 102;\nvar x2 = rearrangeBigger(arg20);\nvar v2 = 120;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to create the next bigger number by rearranging the digits of a given number.", "language": "javascript", "canonical_solution": "  const arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i === 0) return false;\n  const max = Math.max(...arr.slice(i - 1, i + 1));\n  const min = Math.min(...arr.slice(i - 1, i + 1));\n  arr[i - 1] = max;\n  arr[i] = min;\n  return Number(arr.join(''));\n}", "completion": ["\n\n\nif(document.getElementById(\"edit\")){\n\n$(\"#edit\").submit(", "\nvar longest = (n) => {\n\tn = n.toString();\n\tvar len = n.length;\n\tvar nn = n.split('');\n\tvar nn_ = nn.sort((a, b) => b.length - a.length)[0].split('');\n\treturn nn_[len - 1] +'' + nn_[len - 2] +'' + nn_[len - 3] +'' + nn_[len - 4] +'' + nn_[len - 5] +'' + nn_[len - 6] +'' + nn_[len - 7] +'' + nn_[len - 8] +'' + nn_[len - 9] +'' + nn_[len - 10] +'' + nn_[len - 11] +'' + nn_[len - 12] +'' + nn_[len - 13] +'' + nn_[len - 14] +'' + nn_[len - 15] +'' + nn_[len - 16] +'' + nn_[len - 17] +'' + nn_[len - 18] +'' + nn_[len - 19] +'' + nn_[len - 20];\n};\n\n// #End: Find Longest\n</code></pre>\n              <!-- index.js -->\n              <script>\n                ROUTE_SCRIPT = `\n/**\n * * Find the longest route path.\n */\nconst longest = (n) => {\n\tn = n.toString();\n\tconst len = n.length;\n\tconst nn = n.", "\n", "\n# else\n@interface _Tt: NSObject\n@end\n\n@implementation _Tt: NSObject\n\n@end\n\n@implementation _Tt\n\n#ifdef __cplusplus\n/**\n * * Write a ", "\n        },\n    },\n};\n</code></pre>\n\n</div>\n\n    </div>\n</div>\n            \n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[&nbsp;]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n    <span class=\""]}
{"task_id": "MBJSP/408", "prompt": "function kSmallestPairs(nums1, nums2, k) {\n/**\n * * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n */", "entry_point": "kSmallestPairs", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 7];\nvar arg01 = [2, 4, 6];\nvar arg02 = 2;\nvar x0 = kSmallestPairs(arg00, arg01, arg02);\nvar v0 = [[1, 2], [1, 4]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 3, 7];\nvar arg11 = [2, 4, 6];\nvar arg12 = 1;\nvar x1 = kSmallestPairs(arg10, arg11, arg12);\nvar v1 = [[1, 2]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 3, 7];\nvar arg21 = [2, 4, 6];\nvar arg22 = 7;\nvar x2 = kSmallestPairs(arg20, arg21, arg22);\nvar v2 = [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "language": "javascript", "canonical_solution": "  var arr = [];\n  for (var i = 0; i < nums1.length; i++) {\n    for (var j = 0; j < nums2.length; j++) {\n      arr.push([nums1[i], nums2[j]]);\n    }\n  }\n  arr.sort(function(a, b) {\n    return a[0] + a[1] - b[0] - b[1];\n  });\n  return arr.slice(0, k);\n}", "completion": ["\n\nvar k = ", "\n    let n1 = nums1.length;\n    let n2 = nums2.length;\n    let res = [];\n\n    let dp = new Map();\n\n    // 0 : N\n    // 1 : N-1\n    // 2 : N-2\n    for (let i = 0; i < n1; i++) {\n        for (let j = 0; j < n2; j++) {\n            dp.set(i, j, dp.getOrDefault(i, j, 0) + 1);\n        }\n    }\n\n    // for(let key in dp) {\n    //     console.log(key, dp[key]);\n    // }\n\n    for (let k = 0; k < n1 + n2 - 1; k++) {\n        let key = k < n1? nums1[k] : nums2[k - n1];\n        let target = k < n1? k : k - n1;\n\n        // console.log('key: ', key, 'target: ', target, 'dp: ', dp[key],'res: ', res);\n        if (target > n2 - 1 || dp[key] > k - target) {\n            continue;\n        }\n\n        let targetIdx = k < n1? k : k - n1;\n\n        let startIdx = targetIdx + 1;\n        let endIdx = dp[key];\n\n        for (let i = startIdx; i <= endIdx; i++) {\n            res.push([key, nums2[i - 1]]);\n        }\n\n        dp[key] = endIdx;\n    }\n\n    return res;\n}\n\n```\n\n###", "\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all uncommon elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all uncommon elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all uncommon elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays, return all common elements.\n */\n\n/**\n * * Given two arrays", "\n    const dfs = (h, idx, l1, l2, cnt, k) => {\n        if (cnt >= k) return;\n\n        if (idx === l1 || idx === l2) return;\n\n        dfs(h, idx + 1, l1, l2, cnt + 1, k);\n        h[idx] =!h[idx];\n\n        dfs(h, idx + 1, l1, l2, cnt + 1, k);\n    };\n\n    let h = new Array(nums1.length + 1).fill(true);\n    let cnt = 0;\n\n    dfs(h, 1, nums1.length, nums2.length, 0, k);\n\n    return cnt;\n}\n\n// \u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u89e3\u51b3\u95ee\u9898\n/**\n * * Write a ", "\n  let res = 0;\n  let max = Math.max(nums1.length, nums2.length);\n  for (let i = 0; i < max; i++) {\n    res += kPairs(nums1, nums2, k, i);\n  }\n\n  return res;\n}\n\n/**\n * * Given two integer arrays nums1 and nums2 sorted in ascending order and an integer k, return the k most frequent elements in the arrays.\n */\n\nlet kMostFreq = (nums1, nums2, k) => {\n  let nums1Frequency = {};\n  for (let num of nums1) {\n    if (nums1Frequency[num] == null) {\n      nums1Frequency[num] = 0;\n    }\n    nums1Frequency[num]++;\n  }\n\n  let nums2Frequency = {};\n  for (let num of nums2) {\n    if (nums2Frequency[num] == null) {\n      nums2Frequency[num] = 0;\n    }\n    nums2Frequency[num]++;\n  }\n\n  let res = [];\n  for (let num of Object.keys(nums1Frequency)) {\n    if (nums2Frequency[num] == null) {\n      res.push(num);\n    }\n  }\n\n  res.sort((a, b) => nums1Frequency[a] - nums1Frequency[b]);\n\n  return res.slice(0, k);\n};\n\n// "]}
{"task_id": "MBJSP/409", "prompt": "function minProductTuple(list1) {\n/**\n * * Write a function to find the minimum product from the pairs of tuples within a given list.\n */", "entry_point": "minProductTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[2, 7], [2, 6], [1, 8], [4, 9]];\nvar x0 = minProductTuple(arg00);\nvar v0 = 8;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [15, 2], [5, 10]];\nvar x1 = minProductTuple(arg10);\nvar v1 = 30;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[11, 44], [10, 15], [20, 5], [12, 9]];\nvar x2 = minProductTuple(arg20);\nvar v2 = 100;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the minimum product from the pairs of tuples within a given list.", "language": "javascript", "canonical_solution": "  let min = list1[0][0] * list1[0][1];\n  let minIndex = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let current = list1[i][0] * list1[i][1];\n    if (current < min) {\n      min = current;\n      minIndex = i;\n    }\n  }\n  return min;\n}", "completion": ["\n}\n\n<|endoftext|>", "\n", "\n\n\n", "\n\n  /**\n   * Write a function to find the minimum product from the pairs of tuples within a given list.\n   *\n   * @param {Array} list1 - the list of tuples.\n   * @returns {number} - the minimum product from the pairs of tuples within a given list.\n   */\n  }\n  // Write your code here\n\n  // Function to find the minimum product from the pairs of tuples within a given list.\n  // Write a ", "\n};\n```\n\n## [Python](https://www.programmingpraxis.com/python-"]}
{"task_id": "MBJSP/410", "prompt": "function minVal(listval) {\n/**\n * * Write a function to find the minimum value in a given heterogeneous list.\n */", "entry_point": "minVal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", 3, 2, 4, 5, \"version\"];\nvar x0 = minVal(arg00);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", 15, 20, 25];\nvar x1 = minVal(arg10);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", 30, 20, 40, 50, \"version\"];\nvar x2 = minVal(arg20);\nvar v2 = 20;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the minimum value in a given heterogeneous list.", "language": "javascript", "canonical_solution": "  const l = [];\n  for (let i = 0; i < listval.length; i++) {\n    if (typeof listval[i] !== 'string') l.push(listval[i]);\n  }\n  return l.sort((a, b) => a - b)[0];\n}", "completion": ["\nconst map = (list, fn) => list.map(fn);\nconst reduce = (list, fn, init) => list.reduce(fn, init);\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\nconst reduceRight = (list, fn, init) => list.reduceRight(fn, init);\n/**\n * * Write a function to get the sum of values in a given heterogeneous list.\n */\nconst sum = list => reduce(list, (a, b) => a + b, 0);\n/**\n * * Write a function to get the average value of the values in a given heterogeneous list.\n */\nconst average = list => {\n  const sum = list.reduce((a, b) => a + b, 0);\n  return sum / list.length;\n};\n/**\n * * Write a function to get the count of values in a given heterogeneous list.\n */\nconst count = list => map(list, (value) => 1).reduce((a, b) => a + b, 0);\n/**\n * * Write a function to get the `min` value in a given heterogeneous list.\n */\nconst min = list => map(list, (value) => value).reduce((a, b) => a < b? a : b);\n/**\n * * Write a function to get the `max` value in a given heterogeneous list.\n */\nconst max = list => map(list, (value) => value).reduce((a, b) => a > b? a : b);\n/**\n * * Write a ", "\n", "\n\n/**\n * * return the minimum value\n */\n\n/**\n * * return the minimum value\n */\n\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\n\n/**\n * * return the maximum value\n */\n\n/**\n * * return the maximum value\n */\n\n/**\n * * Write a function to find the average value in a given heterogeneous list.\n */\n\n/**\n * * return the average value\n */\n\n/**\n * * return the average value\n */\n\n/**\n * * Write a function to find the length of a given heterogeneous list.\n */\n\n/**\n * * return the length of a given heterogeneous list\n */\n\n/**\n * * return the length of a given heterogeneous list\n */\n\n/**\n * * Write a function to find the count of unique values in a given heterogeneous list.\n */\n\n/**\n * * return the count of unique values in a given heterogeneous list\n */\n\n/**\n * * return the count of unique values in a given heterogeneous list\n */\n\n/**\n * * Write a function to find the count of items in a given heterogeneous list with a given value.\n */\n\n/**\n * * return the count of items in a given heterogeneous list with a given value\n */\n\n/**\n * * return the count of items in a given heterogeneous list with a given value\n */\n\n/**\n * * Write a function to find the average of a given heterogeneous list.\n */\n\n/**\n * * return the average of a given heterogeneous list\n */\n\n/**\n * * return the average of a given heterogeneous list\n */\n\n/**\n * * Write a ", "\nconst min = (val) => val.reduce((acc, cur) => acc.min(cur), {min: val[0]}));\n\n/**\n * * Write a function to find the maximum value in a given heterogeneous list.\n */\nconst max = (val) => val.reduce((acc, cur) => acc.max(cur), {max: val[0]}));\n\n/**\n * * Write a function to find the sum of all values in a given heterogeneous list.\n */\nconst sum = (val) => val.reduce((acc, cur) => acc.sum(cur), {sum: val[0]}));\n\n/**\n * * Write a function to find the product of all values in a given heterogeneous list.\n */\nconst product = (val) => val.reduce((acc, cur) => acc.product(cur), {product: 1}));\n\n/**\n * * Write a function to find the value of the first item in a given heterogeneous list.\n */\nconst first = (val) => val[0];\n\n/**\n * * Write a function to find the value of the last item in a given heterogeneous list.\n */\nconst last = (val) => val[val.length - 1];\n\n/**\n * * Write a function to find the value that is the maximum of all values in a given heterogeneous list.\n */\nconst maximum = (val) => val.reduce((acc, cur) => acc.max(cur), {max: val[0]}));\n\n/**\n * * Write a ", "\n\n// List of arbitrary heterogeneous types\nvar list = [\n    { name: \"A\", age: 10 },\n    { name: \"B\", age: 20 },\n    { name: \"C\", age: 30 },\n    { name: \"D\", age: 40 },\n    { name: \"E\", age: 50 },\n    { name: \"F\", age: 60 },\n    { name: \"G\", age: 70 },\n    { name: \"H\", age: 80 }\n];\n\n// The minimum age in this list\nvar minimumAge = Math.min.apply(null, list.map("]}
{"task_id": "MBJSP/411", "prompt": "function snakeToCamel(word) {\n/**\n * * Write a function to convert the given snake case string to camel case string by using regex.\n */", "entry_point": "snakeToCamel", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"android_tv\";\nvar x0 = snakeToCamel(arg00);\nvar v0 = \"AndroidTv\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"google_pixel\";\nvar x1 = snakeToCamel(arg10);\nvar v1 = \"GooglePixel\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"apple_watch\";\nvar x2 = snakeToCamel(arg20);\nvar v2 = \"AppleWatch\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert the given snake case string to camel case string by using regex.", "language": "javascript", "canonical_solution": "  return word\n    .replace(/(_[a-z])/g, ($0) => $0.toUpperCase().replace(\"_\", \"\"))\n    .replace(/^[a-z]/g, ($0) => $0.toUpperCase());\n}", "completion": ["\n}\n\n// export default camelCase;\n```\n\nThe above snippet converts the `snake_case` string to `camel_case`.\n\n## Underscore\n\nIn the snippet above, there are three functions: `underscore` and `camelCase`.\n\n`underscore` function converts a camel case string to underscore case string by using regex.\n\n```js\nimport underscore from 'underscore';\n\nunderscore('CamelCase'); // 'camel_case'\n```\n\n`camelCase` function converts a underscore case string to camel case string by using regex.\n\n```js\nimport camelCase from 'underscore-to-camel-case';\n\ncamelCase('camel_case'); // 'CamelCase'\n```\n\n## Variables\n\nIn the snippet below, there are two functions: `variables` and `camelCase`.\n\n`variables` function converts a camel case string to underscore case string by using regex.\n\n```js\nimport variables from 'underscore-variables';\n\nvariables('CamelCase'); // 'camel_case'\n```\n\n`camelCase` ", "\n", "\n\nreturn word.replace(/\\w\\S*/g, function (letter) {\n    return letter.toUpperCase();\n});\n}\n\n/**\n * * Convert a string to snake case by converting everything to lower case and replacing spaces with dashes.\n */\n\n", "\n}\n<|endoftext|>", "\n\n/**\n * * Define a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Define a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a function to convert the given camel case string to snake case string by using regex.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/412", "prompt": "function removeOdd(l) {\n/**\n * * Write a JavaScript function to remove odd numbers from a given list.\n */", "entry_point": "removeOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = removeOdd(arg00);\nvar v0 = [2];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 6];\nvar x1 = removeOdd(arg10);\nvar v1 = [2, 4, 6];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 20, 3];\nvar x2 = removeOdd(arg20);\nvar v2 = [10, 20];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to remove odd numbers from a given list.", "language": "javascript", "canonical_solution": "  return l.filter(function(n) {\n    return n % 2 === 0;\n  });\n}", "completion": ["\n", "\n}\n\ndd(", "\n            let oddNumbers = l.filter(el => Math.abs(el) % 2!== 0);\n            console.log(oddNumbers);\n            return oddNumbers;\n          }\n        })\n      },\n      {\n        path: '/sum',\n        before: async function(context, request, response) {\n          console.log('sum before');\n          let l = request.query.list;\n          let result = l.reduce((a, b) => a + b, 0);\n          console.log(result);\n          return result;\n        },\n        get: async function(context, request, response) {\n          console.log('sum get');\n          let l = request.query.list;\n          let result = l.reduce((a, b) => a + b, 0);\n          console.log(result);\n          return result;\n        },\n        after: async function(context, request, response) {\n          console.log('sum after');\n          let l = request.query.list;\n          let result = l.reduce((a, b) => a + b, 0);\n          console.log(result);\n          return result;\n        },\n      }\n    ]);\n\n})();\n\n\n/* ---- BEGIN LOG ---- */\n(", "\n\nvar filterOdd = function filterOdd(l) {\nreturn l.filter(", "\n\n\n/**\n * * Find and return the total number of odd numbers in a given list.\n */\n\n\n/**\n * * Calculate the average value of the odd numbers in a given list.\n */\n\n\n/**\n * * Replace all odd numbers in a given list with \"Odd\".\n */\n\n\n/**\n * * Replace all even numbers in a given list with \"Even\".\n */\n\n\n/**\n * * Find and return the number of items in a given list.\n */\n\n\n/**\n * * Find and return the number of times a given item is repeated in a given list.\n */\n\n\n/**\n * * Reverse the order of the items in a given list.\n */\n\n\n/**\n * * Reverse the order of the words in a given sentence.\n */\n\n\n/**\n * * Reverse the order of the words in a given sentence in a JavaScript-friendly way.\n */\n\n\n/**\n * * Given a list of strings, return a list where each string has been reversed.\n */\n\n\n/**\n * * Given a list of numbers, return a list where each number has been reversed.\n */\n\n\n/**\n * * Reverse a single digit of a given number.\n */\n\n\n/**\n * * Given a list of strings, return a list where each string is separated by a comma and a space, except group items that are more than one word together in parentheses.\n */\n\n\n/**\n * * Given a list of numbers, return a list where each number is multiplied by 2, except for numbers ending in 5 and below, don't group these numbers together.\n */\n\n\n/**\n * * Given a list of numbers, return a list where each number is multiplied by 3, except for numbers ending in 3 and above, don't group these numbers together.\n */\n\n\n/**\n * * Given a list of words, return a list where each word"]}
{"task_id": "MBJSP/413", "prompt": "function extractNthElement(list1, n) {\n/**\n * * Write a function to extract the nth element from a given list of tuples.\n */", "entry_point": "extractNthElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg01 = 0;\nvar x0 = extractNthElement(arg00, arg01);\nvar v0 = [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg11 = 2;\nvar x1 = extractNthElement(arg10, arg11);\nvar v1 = [99, 96, 94, 98];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]];\nvar arg21 = 1;\nvar x2 = extractNthElement(arg20, arg21);\nvar v2 = [98, 97, 91, 94];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract the nth element from a given list of tuples.", "language": "javascript", "canonical_solution": "  return list1.map(function(element) {\n    return element[n];\n  });\n}", "completion": ["\nreturn element(0, list1);\n}\n```\n\nA more generic implementation could be written as follows:\n\n```py\n\"\"\"\n * Write a function to extract the nth element from a given list of tuples.\n */\ndef element(n, list1):\n    if n >= len(list1):\n        raise IndexError(f\"list index out of range: {n} >= {len(list1)}\")\n    else:\n        return list1[n]\n```\n\nThe `IndexError` class could be defined as follows:\n\n```py\n\"\"\"\n * Write a function to extract the nth element from a given list of tuples.\n */\nclass IndexError(Exception):\n    pass\n```\n\nAlthough the generic implementation allows for multiple types of exception to be raised, it is more efficient and easier to catch the exception in the specific implementation. In fact, the generic implementation can be written as follows:\n\n```py\n\"\"\"\n * Write a function to extract the nth element from a given list of tuples.\n */\ndef element(n, list1):\n    if n >= len(list1):\n        raise IndexError(f\"list index out of range: {n} >= {len(list1)}\")\n    else:\n        return list1[n]\n```\n\nUsing `list1` and `element` is not only more efficient but also simpler to understand. The `list1` could be directly written as follows:\n\n```py\n\"\"\"\n * Write a ", "\n\n// Reference: https://medium.com/p-and-c/designing-a-new-dynamical-programming-language-a98b6d7f1fc\n", "\nreturn [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n}\n\n", "\n", "\n    return nthElement(list1, n);\n}\n\n// * Convert the list of tuples into a map.\nmap1 = listToMap(list1);\n\n// * Return a new map with the key set from the original map.\nmap2 = mapToSet(map1);\n\n// * Convert the map into an array, using the \"get\" method of each key.\nmap3 = mapToArray(map1);\n\n// * Use the \"get\" method of each key to get the value of the key in the original map.\nmap4 = mapToMap(map1);\n\n// * Convert the map into a list of key-value pairs.\nmap5 = mapToList(map1);\n\n// * Delete all keys from the map.\nmap6 = mapToSet(map1);\n\n// * Delete the key \"name\" from the map.\nmap7 = mapToMap(map1);\n\n// * Delete the value \"jeff\" from the key \"name\" from the map.\nmap8 = mapToMap(map1);\n\n// * Print the content of the map to the console.\nprintMap(map1);\n\n// * Print the content of the map to the console, using the \"print\" method of each key.\nprintMap(mapToList(map1));\n```\n\n\n\n\n\n\n\n\n\n\n\n## \u5f02\u6b65\u64cd\u4f5c\n\n> \u5982\u679c\u8981\u64cd\u4f5c\u4e00\u4e2a\u5217\u8868\u6216\u8005\u6570\u7ec4\uff0c\u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5f02\u6b65\u64cd\u4f5c\u3002\n\n> \u4f46\u662f\u5982\u679c\u8981\u64cd\u4f5c\u4e00\u4e2a\u5217\ufffd"]}
{"task_id": "MBJSP/414", "prompt": "function overlapping(list1, list2) {\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */", "entry_point": "overlapping", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [6, 7, 8, 9];\nvar x0 = overlapping(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3];\nvar arg11 = [4, 5, 6];\nvar x1 = overlapping(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 4, 5];\nvar arg21 = [1, 4, 5];\nvar x2 = overlapping(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the value exists in a sequence or not.", "language": "javascript", "canonical_solution": "    if (list1.length > list2.length) {\n        return overlapping(list2, list1);\n    }\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i]) {\n            count++;\n        }\n    }\n    return count === list1.length;\n}", "completion": ["\n", "\n\n// Write a JavaScript function to check whether the value exists in a sequence or not.\n", "\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript function to check whether the value exists in a sequence or not.\n */\n\n/**\n * * Write a JavaScript ", "\n", "\nvar sum = function (list) {\n    var sum = 0;\n    for (var i = 0; i < list.length; i++) {\n        sum += list[i];\n    }\n    return sum;\n};\n\n/**\n * * Return the first value in a list that matches a given predicate.\n */\nvar find = function (list, pred) {\n    for (var i = 0; i < list.length; i++) {\n        if (pred(list[i])) return list[i];\n    }\n};\n\n/**\n * * Return the last value in a list that matches a given predicate.\n */\nvar last = function (list, pred) {\n    for (var i = list.length - 1; i >= 0; i--) {\n        if (pred(list[i])) return list[i];\n    }\n};\n\n/**\n * * Return a list containing all values in a given list that match a given predicate.\n */\nvar filter = function (list, pred) {\n    var out = [];\n    for (var i = 0; i < list.length; i++) {\n        if (pred(list[i])) out.push(list[i]);\n    }\n    return out;\n};\n\n/**\n * * Return a list containing all values in a given array that match a given predicate.\n */\nvar filterArray = "]}
{"task_id": "MBJSP/415", "prompt": "function maxProduct(arr) {\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */", "entry_point": "maxProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 7, 0, 8, 4];\nvar x0 = maxProduct(arg00);\nvar v0 = [7, 8];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, -1, -2, -4, 5, 0, -6];\nvar x1 = maxProduct(arg10);\nvar v1 = [-4, -6];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3];\nvar x2 = maxProduct(arg20);\nvar v2 = [2, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find a pair with highest product from a given array of integers.", "language": "javascript", "canonical_solution": "  let max = 0;\n  let maxPair = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      let product = arr[i] * arr[j];\n      if (product > max) {\n        max = product;\n        maxPair = [arr[i], arr[j]];\n      }\n    }\n  }\n  return maxPair;\n}", "completion": ["\n\nconst arrayOfPairs = arr => {\n  const pairs = [];\n  for (let i = 0; i < arr.length - 1; i += 1) {\n    for (let j = i + 1; j < arr.length; j += 1) {\n      const pair = [arr[i], arr[j]];\n      if (pairs.length === 0 || pair[0] * pair[1] > pairs[0][0] * pairs[0][1]) {\n        pairs.push(pair);\n      }\n    }\n  }\n  return pairs;\n};\n\nconst arrayOfPairsWithHighestProduct = arr => {\n  return arrayOfPairs(arr).sort((a, b) => b[0] * b[1] - a[0] * a[1])[0];\n};\n\nconst removeDuplicatesFromArray = arr => arr.sort((a, b) => a - b).filter(val =>!arr.includes(val))\n\n```\n\n## JavaScript \u4e2d\u7684\u96c6\u5408\n\n\u96c6\u5408\u6570\u636e\u7ed3\u6784\uff08Set\uff09\u662f\u4e00\u79cd\u6709\u5e8f\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u53ef\u91cd\u590d\u3002\n\n### \u5b9e\u4f8b\n\n\u4f7f\u7528 [Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) \u5b9e\u73b0\u4e00\u4e2a Set \u5bf9\u8c61\u3002\n\n```js\nconst set = new Set();\nset.add(1);\nset.add(1);\nset.add(2);\nset.add(2", "\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript function to find a pair with highest product from a given array of integers.\n */\n/**\n * * Write a JavaScript ", "\nvar p = ", "\n\nconst code = `\nexport const calculatePair = (arr) => {\n  let maxProduct = 0\n  let minProduct = 0\n\n  for(let i = 0; i < arr.length - 1; i++) {\n    for(let j = i + 1; j < arr.length; j++) {\n      const product = arr[i] * arr[j]\n      if(maxProduct < product) {\n        maxProduct = product\n        minProduct = Math.min(arr[i], arr[j])\n      }\n    }\n  }\n\n  return [minProduct, maxProduct]\n}\n`\n\nconst ctx = wx.createContext()\n\nconst start = Date.now()\n\nctx.drawImage(img, 0, 0)\nctx.setFillStyle('red')\nctx.fillRect(0, 0, 600, 300)\n\nconst wxImageCanvas = wx.createCanvas()\n\nconst wxImageCanvasContext = wxImageCanvas.getContext('2d')\n\nlet imgWidth, imgHeight\n\nconst onLoad = () => {\n\n  imgWidth = img.width\n  imgHeight = img.height\n\n  ctx.drawImage(img, 0, 0)\n  ctx.setFillStyle('red')\n  ctx.fillRect(0, 0, 600, 300)\n\n}\n\nconst onError = (err) => {\n  console.error(err)\n}\n\nconst onReady = () => {\n\n  wxImageCanvas.drawImage(img, 0, 0)\n\n  let pair = calculatePair(ctx.getImageData(0, 0, imgWidth, imgHeight).data)\n\n  wxImageCanvasContext.fillStyle = 'white'\n  ", "\nconst pairFinder = (arr) => {\n  return arr.reduce((result, curr) => {\n    return result.next(arr, curr) || result;\n  }, {\n    highest: 0,\n    next: arr,\n  });\n};\n\n```\n\n# Another way\n\nThe most straightforward way to implement a high-precision multiply is to use the _Fractional Reciprocity_ by Gian-Carlo Rota (GCR). The GCR makes use of properties of the `Fraction` class.\n\nThe GCR class also provides functions to compute the product of two `Fraction` objects.\n\n```js\nimport { Fraction } from './Fraction';\n\nconst gcr = (x, y) => {\n  const lcm = (a, b) => a * b / gcd(a, b);\n  return new Fraction(lcm(x.numerator, y.numerator), lcm(x.denominator, y.denominator));\n};\n\n```\n\n```js\nimport { pairFinder } from './pairFinder';\nimport { gcr } from './gcr';\n\nconst p = pairFinder([1, 2, 3]);\n\np.highest *= gcr(p.highest, p.next);\n\n```\n\n# The associative property\n\nThe `gcr` "]}
{"task_id": "MBJSP/416", "prompt": "function breaksum(n) {\n/**\n * * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n */", "entry_point": "breaksum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar x0 = breaksum(arg00);\nvar v0 = 13;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 24;\nvar x1 = breaksum(arg10);\nvar v1 = 27;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 23;\nvar x2 = breaksum(arg20);\nvar v2 = 23;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "language": "javascript", "canonical_solution": "  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 4;\n  return breaksum(n - 1) + breaksum(n - 2) + breaksum(n - 3);\n}", "completion": ["\n", "\n\n  sum_of_numbers(n) {\n    const first = sum_of_numbers(n / 3) + sum_of_numbers(n / 3 - 1);\n    const second = sum_of_numbers(n - n / 3) + sum_of_numbers(n - n / 3 + 1);\n    return Math.max(first, second);\n  }\n}\n\n/**\n * Given a number, we will calculate the sum of the numbers in that number, and all the numbers in between that number.\n * **Example:**\n * ```\n * // Given 6, we will find the sum of the numbers in 6, 6, 6, 6, and 6.\n *\n * // Sum of numbers in 6, 6, 6, 6, 6, and 6 is 46.\n * sum_of_numbers(6);\n *\n * // Sum of numbers in 6, 6, 6, 6, 6, and 6 is 0.\n * sum_of_numbers(6);\n *\n * // Sum of numbers in 6, 6, 6, 6, 6, and 6 is 0.\n * sum_of_numbers(6);\n *\n * // Sum of numbers in 6, 6, 6, 6, 6, and 6 is 0.\n * sum_of_numbers(6);\n * ```\n *\n * ```\n * // Given 16, we will find the sum of the numbers in 16, 16, and 16.\n *\n * // Sum of numbers in 16, 16, and 16 is 0.\n * sum_of_numbers(16);\n *\n * // Sum of numbers in 16, 16, and 16 is 16.\n * sum_of_numbers(16);\n *\n * // Sum of numbers in 16, 16", "\n", "\n", "\n"]}
{"task_id": "MBJSP/417", "prompt": "function groupTuples(input) {\n/**\n * * Write a function to find common first element in given list of tuple.\n */", "entry_point": "groupTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]];\nvar x0 = groupTuples(arg00);\nvar v0 = [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]];\nvar x1 = groupTuples(arg10);\nvar v1 = [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]];\nvar x2 = groupTuples(arg20);\nvar v2 = [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find common first element in given list of tuple.", "language": "javascript", "canonical_solution": "  const result = [];\n  for (let i = 0; i < input.length; i++) {\n    const tuple = input[i];\n    const first = tuple[0];\n    const rest = tuple.slice(1);\n    const found = result.find((item) => item.includes(first));\n    if (found) {\n      found.push(...rest);\n    } else {\n      result.push(tuple);\n    }\n  }\n  return result;\n}", "completion": ["\n", "\n\nlet list_length = list.length;\n\nlet list_indices = [];\n\nfor (let i = 0; i < list_length; i++) {\n    list_indices.push(list[i][0]);\n}\n\nlet list_first_element = list[0][1];\n\nlet first_element_found = false;\n\nfor (let i = 0; i < list_length; i++) {\n    let current_element = list[i][1];\n    if (current_element == list_first_element) {\n        first_element_found = true;\n        break;\n    }\n}\n\nif (first_element_found) {\n    let indices = [];\n    for (let i = 0; i < list_length; i++) {\n        let current_element = list[i][1];\n        if (current_element == list_first_element) {\n            indices.push(list[i][0]);\n        }\n    }\n    let closest_index = indices[0];\n    for (let i = 1; i < indices.length; i++) {\n        let current_distance = indices[i] - closest_index;\n        if (current_distance < 0) {\n            current_distance = current_distance * -1;\n            if (current_distance < closest_distance) {\n                closest_distance = current_distance;\n                closest_index = indices[i];\n            }\n        } else if (current_distance < closest_distance) {\n            closest_distance = current_distance;\n            closest_index = indices[i];\n        }\n    }\n    console.log(`The closest element", "\n\n$('#text').autosize({\n  update: function() {\n    console.log($('#text').val());\n  }\n});\n\n// ***********\n// // function to find common first element in given list of tuple.\n// function find_common_first_element(text) {\n//   var text_length = text.length;\n//   var text_index = 0;\n\n//   // variable to check whether there are more elements to compare\n//   var count = 0;\n\n//   for (var i = 0; i < text_length; i++) {\n//     text_index = 0;\n//     // to find the first element in given text\n//     while (text[text_index]!== text[i]) {\n//       text_index++;\n//     }\n\n//     if (text_index === i) {\n//       count++;\n//     }\n//   }\n\n//   // returning the first element in common\n//   return text[0];\n// }\n// ***********\n\n// ***********\n// // function to find common last element in given list of tuple.\n// ", "\n\n// For example :\n// input = [\"What\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n// output = [\"c\", \"a\", \"b\"]\n//\n// input = [\"What\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\n// output = [\"c\", \"a\", \"b\"]\n//\n// input = [\"What\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n// output = [\"c\", \"a\", \"b\"]\n//\n// input = [\"What\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]\n// output = [\"c\", \"a\", \"b\"]\n//\n// input = [\"What\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]\n// output = [\"c\", \"a\", \"b\"]\n//\n// input = [\"What\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]\n// output = [\"c\", \"a\", \"b\"]\n//\n// input = [\"What\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]\n// output = [\"c\", \"a", "\n\n\n    /**\n     *\n     * @param {Array<Array<string>>>} list List of list of strings.\n     * @param {Array<string>}  query Query string.\n     * @return {Array<Array<string>>} List of list of strings.\n     */\n    "]}
{"task_id": "MBJSP/418", "prompt": "function findMax(lst) {\n/**\n * * Write a JavaScript function to find the sublist having maximum length.\n */", "entry_point": "findMax", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]];\nvar x0 = findMax(arg00);\nvar v0 = [\"A\", \"B\", \"C\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1], [1, 2], [1, 2, 3]];\nvar x1 = findMax(arg10);\nvar v1 = [1, 2, 3];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[1, 1], [1, 2, 3], [1, 5, 6, 1]];\nvar x2 = findMax(arg20);\nvar v2 = [1, 5, 6, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sublist having maximum length.", "language": "javascript", "canonical_solution": "  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > max) {\n      max = lst[i].length;\n      maxIndex = i;\n    }\n  }\n  return lst[maxIndex];\n}", "completion": ["\nif (!lst)\n  return [];\n\nvar max = lst.reduce(", "\n\n// Function to find the sublist having maximum length.\n", "\nconst print = ", "\n\n", "\nprint(sublist_max_len(lst))\n/**\n * * Write a JavaScript function to find the maximum number of occurrences of a sublist.\n */\nprint(sublist_max_occurrences(lst))\n/**\n * * Write a JavaScript function to find the sublist having maximum length and having maximum occurrence of a sublist.\n */\nprint(sublist_max_len_max_occurrences(lst))\n/**\n * * Write a JavaScript function to find the sublist having maximum length and having maximum occurrence of a sublist and maximum occurrence of a sublist.\n */\nprint(sublist_max_len_max_occurrences_with_long_words(lst))\n/**\n * * Write a JavaScript function to find the sublist having maximum length and having maximum occurrence of a sublist and maximum occurrence of a sublist.\n */\nprint(sublist_max_len_max_occurrences_with_long_words_alt(lst))\n/**\n * * Write a JavaScript function to find the sublist having maximum length and having maximum occurrence of a sublist and maximum occurrence of a sublist.\n */\nprint(sublist_max_len_max_occurrences_with_long_words_alt2(lst))\n/**\n * * Write a JavaScript function to find the sublist having maximum length and having maximum occurrence of a sublist and maximum occurrence of a sublist.\n */\nprint(sublist_max_len_max_occurrences_with_long_words_alt3(lst))\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/419", "prompt": "function roundAndSum(list1) {\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */", "entry_point": "roundAndSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5];\nvar x0 = roundAndSum(arg00);\nvar v0 = 243;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [5, 2, 9, 24.3, 29];\nvar x1 = roundAndSum(arg10);\nvar v1 = 345;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25.0, 56.7, 89.2];\nvar x2 = roundAndSum(arg20);\nvar v2 = 513;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "language": "javascript", "canonical_solution": "  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    let num = Math.round(list1[i]);\n    sum += num;\n    count++;\n  }\n  return sum * count;\n}", "completion": ["\nlet round = function(list) {\n  for (let i = 0; i < list.length; i++) {\n    list[i] = Math.round(list[i]);\n  }\n  console.log(sum(list));\n};\n\nround([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) // 55\nround([1, 2, 3, 4, 5]) // 55\nround([1, 2, 3]) // 5\nround([1]) // 1\nround([]) // 0\nround([0]) // 0\nround([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) // -55\nround([-1, -2, -3, -4, -5]) // -55\nround([-1, -2, -3]) // -5\nround([-1, -2, -3]) // -1\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\nlet sum = ", "\n\n}\n```\n\n### Functions: _Functions_\n\nFunctions are a method of the object that is being defined, or a method of a class.\n\nFor example:\n\n```python\nclass A:\n    \n    def __init__(self):\n        self.x = 2\n    \n    def print(self):\n        print(self.x)\n\ndef print_a():\n    print(A().x)\n\ndef print_b():\n    print(A().x)\n\ndef print_c():\n    print(A().x)\n```\n\n**Class**\n\nThe `class` keyword is used to define a class. It can also be used to define a class method.\n\nThe `class` keyword has the following syntax:\n\n```python\nclass <class_name>(<instance_name>):\n    <class_method>\n```\n\nThe name of the class, and the name of the instance (or the instance's class) is the first parameter.\n\nThe class method can be a method or a function. The type of the method is determined by the value of the `def` keyword. The type of the function determines which keywords are used to define the ", "\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n */\n/**\n * * Write a ", "\nconsole.log(sum * len);\n```\n\nWe can find the `sum` by iterating over `list1` and adding up every number in that list.\n\n```python\nsum = 0\nfor n in list1:\n    sum = sum + n\n```\n\nWe can find the `len` by using the `len()` function in the `list1` variable.\n\n```python\nlen = len(list1)\n```\n\nWe can print the sum using the `sum()` function in the `print` statement.\n\n```python\nprint(sum)\n```\n\nWe can print the length using the `len()` function in the `print` statement.\n\n```python\nprint(len)\n```\n\nWe can use the `sum()` function in the `print` statement to get the sum of the numbers in the list.\n\n```python\nsum = sum(list1)\nprint(sum)\n```\n\nWe can use the `len()` function in the `print` statement to get the length of the list.\n\n```python\nlen = len(list1)\nprint(len)\n```\n\nLet's take a look at some examples of the `if` statements in Python.\n\n## Exercises ##\n\n1.  Write a function to calculate the sum of every number in a given list of numbers and print the total sum multiplied by the length of the list.\n    - Hint: Use `sum` and `len` instead of `sum1` and `len1`\n\n1.  Write a ", "\n}<|endoftext|>"]}
{"task_id": "MBJSP/420", "prompt": "function cubeSum(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n even natural numbers.\n */", "entry_point": "cubeSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = cubeSum(arg00);\nvar v0 = 72;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = cubeSum(arg10);\nvar v1 = 288;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar x2 = cubeSum(arg20);\nvar v2 = 800;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the cube sum of first n even natural numbers.", "language": "javascript", "canonical_solution": "    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += (2 * i) * (2 * i) * (2 * i);\n    }\n    return sum;\n}", "completion": ["\n", "\n};\n\n/* 3. Write a JavaScript ", "\n(", "\n", "\n"]}
{"task_id": "MBJSP/421", "prompt": "function concatenateTuple(testtup) {\n/**\n * * Write a function to concatenate each element of tuple by the delimiter.\n */", "entry_point": "concatenateTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"ID\", \"is\", 4, \"UTS\"];\nvar x0 = concatenateTuple(arg00);\nvar v0 = \"ID-is-4-UTS\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"QWE\", \"is\", 4, \"RTY\"];\nvar x1 = concatenateTuple(arg10);\nvar v1 = \"QWE-is-4-RTY\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"ZEN\", \"is\", 4, \"OP\"];\nvar x2 = concatenateTuple(arg20);\nvar v2 = \"ZEN-is-4-OP\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to concatenate each element of tuple by the delimiter.", "language": "javascript", "canonical_solution": "    let result = '';\n    for (let i = 0; i < testTup.length; i++) {\n        if (i === testTup.length - 1) {\n            result += testTup[i];\n        } else {\n            result += testTup[i] + '-';\n        }\n    }\n    return result;\n}", "completion": ["\n\n  write(tup, fn) {\n    // Write the first element of the tuple.\n    fn(tup[0]);\n\n    // Write the rest of the tuple, each element by the delimiter.\n    for (let i = 1; i < tup.length; i++) {\n      fn(delimiter, tup[i]);\n    }\n  }\n\n}\n\n/**\n * * Write a function to concatenate each element of tuple by the delimiter.\n */\n\nclass TupleWriter {\n  /**\n   * * Write a function to concatenate each element of tuple by the delimiter.\n   */\n\n  constructor(testtup, fn) {\n    this.testtup = testtup;\n    this.fn = fn;\n  }\n\n  /**\n   * * Write a function to concatenate each element of tuple by the delimiter.\n   */\n\n  write(tup, fn) {\n    return this.fn(tup, (x) => fn(this.testtup, x));\n  }\n\n}\n\n/**\n * * Write a function to concatenate each element of tuple by the delimiter.\n */\n\nconst toString = tup => tup.join(delimiter);\n\n/**\n * * Write a function to concatenate each element of tuple by the delimiter.\n */\n\nclass StringWriter {\n  /**\n   * * Write a function to concatenate each element of tuple by the delimiter.\n   */\n\n  constructor(testtup, fn) {\n    this.testtup = testtup;\n    this.fn = fn;\n  }\n\n  /**\n   * * Write a ", "\n;};\n};\n},{}],183:[", "\n}\n\n/**\n * @typedef {", "\nvar _write_fn = function _write_fn(tup, fn, fout) {\n  var _tup = tup,\n      head = _tup.head,\n      tail = _tup.tail;\n\n  var output = head;\n  if (tail) {\n    output = output + fn(tail) + delimiter;\n  }\n  fn(output, fout);\n};\n\n/**\n * * Write a function to concatenate each element of tuple by the delimiter, and write the output to file.\n */\nvar _write_to_file = function _write_to_file(tup, fn, file) {\n  var _tup$head = tup.head,\n      head = _tup$head,\n      tail = tup.tail;\n\n  var _write_fn$file = _slicedToArray(fn, 1),\n      fout = _write_fn$file[0];\n\n  var output = head;\n  if (tail) {\n    output = output + fn(tail, fout) + delimiter;\n  }\n  fout(output, file);\n};\n\n/**\n * * Write a function to concatenate each element of tuple by the delimiter, and write the output to file.\n */\nvar _write_to_files = ", "\n"]}
{"task_id": "MBJSP/422", "prompt": "function findAverageOfCube(n) {\n/**\n * * Write a JavaScript function to find the average of cubes of first n natural numbers.\n */", "entry_point": "findAverageOfCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar x0 = findAverageOfCube(arg00);\nvar v0 = 4.5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = findAverageOfCube(arg10);\nvar v1 = 12;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar x2 = findAverageOfCube(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the average of cubes of first n natural numbers.", "language": "javascript", "canonical_solution": "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum / n;\n}", "completion": ["\n/**\n * * @param {number} n The first natural number\n * * @return {number} The average of cubes of first n natural numbers\n */\n};\n```\n\n## \u672c\u7ae0\u8bb2\u89e3\n\n- [\u642d\u5efa\u73af\u5883](#%E6%9B%B4%E5%BA%94%E7%9A%84%E7%BB%88%E5%86%99)\n- [\u8f93\u5165\u548c\u8f93\u51fa](#%E8%B0%83%E5%86%99)\n- [\u591a\u7ea7\u8f93\u51fa](#%E5%A6%82%E4%BD%95%E7%9A%84%E8%AE%BE%E7%BD%AE)\n- [\u5f02\u6b65\u5904\u7406](#%E5%85%B3%E5%85%B3%E6%9C%8D%E5%88%B0)\n- [\u95ed\u5305\uff08Closure\uff09](#%E9%93%BE%E5%8E%9F%E5%88%B6%E5%88%B0%E5%8F%96closure%E7%9A%84)\n- [\u56de\u8c03](#%E5%8D%95%E9%93%BE)\n- [\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b](#%E9%9D%9E%E6%9B%B4%E7%9A%84%E5%8F%AF%E7%A7%BB%E", "\n};\n```\n\nThe implementation of `of` calls the callback function, and returns a value. In the callback function, we can call `sum` to get the sum of cubes of first `n` natural numbers.\n\nHere are some more examples of `of`:\n\n```javascript\n", "\n}\n\n/**\n * * Write a JavaScript ", "\n}\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript function to calculate the cube of a number.\n */\n\n/**\n * * Write a JavaScript ", "\nconst averageOfCubes = cubeFn => cubeFn.reduce((acc, c) => acc + c ** 3, 0) / cubeFn.length;\n```\n\nFor example,\n\n```javascript\ncubeFn(3);\ncubeFn(4);\ncubeFn(5);\n```\n\nwould return `3 + 4 + 5 = 15`.\n\nIn this case, we are computing the sum of cubes of `3` through `5`.\n\nWe can also use `reduce` with a `"]}
{"task_id": "MBJSP/423", "prompt": "function getMaxgold(gold, m, n) {\n/**\n * * Write a function to solve gold mine problem.\n */", "entry_point": "getMaxgold", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]];\nvar arg01 = 4;\nvar arg02 = 4;\nvar x0 = getMaxgold(arg00, arg01, arg02);\nvar v0 = 16;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[10, 20], [30, 40]];\nvar arg11 = 2;\nvar arg12 = 2;\nvar x1 = getMaxgold(arg10, arg11, arg12);\nvar v1 = 70;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[4, 9], [3, 7]];\nvar arg21 = 2;\nvar arg22 = 2;\nvar x2 = getMaxgold(arg20, arg21, arg22);\nvar v2 = 13;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to solve gold mine problem.", "language": "javascript", "canonical_solution": "  let dp = [];\n  for (let i = 0; i < m; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < m; i++) {\n    dp[i][0] = gold[i][0];\n  }\n  for (let j = 0; j < n; j++) {\n    dp[0][j] = gold[0][j];\n  }\n  for (let i = 1; i < m; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + gold[", "completion": ["\n\n/**\n * Write a function to solve gold mine problem.\n */\n", "\n\n#include <iostream>\n#include <memory>\n#include <random>\n#include <vector>\n\nclass Solver {\npublic:\n  int solve() {\n    n_ = n();\n    m_ = m();\n    grid_ = std::make_shared<std::vector<int>>(n_ * m_);\n\n    fill(0);\n    fill(n_ - 1);\n    fill(n_ * m_ - 1);\n    fill(n_ - 2);\n    fill(n_ * m_ - 2);\n\n    return 0;\n  }\n\nprivate:\n  int n_;\n  int m_;\n  std::shared_ptr<std::vector<int>> grid_;\n\n  void fill(int i) {\n    int x = i % m_;\n    int y = i / m_;\n\n    if (x == 0 || x == m_ - 1 || y == 0 || y == n_ - 1) {\n      grid_->at(i) = -1;\n      return;\n    }\n\n    grid_->at(i) = 0;\n    fill(i - 1);\n    fill(i + 1);\n    fill(i - m_);\n    fill(i - m_ - 1);\n    fill(i + m_);\n    fill(i + m_ + 1);\n  }\n};\n\n#include \"gold_mine.gold_mine.h\"\nint main() {\n  Solver solver;\n  solver.solve();\n  goldmine_goldmine(n(), m());\n  return 0;\n}\n<|endoftext|>", "\n\nvar gold_nodes = gold.map(", "\n```\n\n**`m`** : The number of rows.\n\n**`n`** : The number of columns.\n\n**`gold`** : A list of lists. Each inner list represents one column. Each element is an integer. The element represents the number of mines in the corresponding row and column.\n\n**`solution`** : The solution of gold mine problem. Each element is an integer. The element represents the number of mines in the corresponding row and column.\n\n## Solution\n\n**Initialize the mines field with the given mines.**\n\n```py\n# -*- coding: utf-8 -*-\n\nimport random\n\nfrom tqdm import tqdm\n\nimport torch\nfrom torch.nn.utils.rnn import pad_sequence\n\nfrom uer.utils.vocab import Vocab\nfrom uer.utils.constants import *\n\nclass MinesField(torch.nn.Module):\n    \"\"\"\n    This class represents a mines field.\n\n    \"\"\"\n\n    def __init__(self, vocab, initializer=None):\n        \"\"\"\n        Args:\n            vocab: A dictionary of token indexes.\n            initializer: Initializer of model.\n        \"\"\"\n\n        super(MinesField, self).__init__()\n\n        self.token_indexes = vocab\n\n        # The number of token indexes in the vocabulary.\n        self.vocab_size = len(self.token_indexes)\n\n        # True if the length of all token indexes are equal.\n        self.initializer = initializer\n\n        # A list of token indexes with the length of the target sequence.\n        self.tokens = None\n\n    def forward(self, text):\n        \"\"\"\n        Args:\n            text:", "\n```\n\n## Inference\n\nWe start from reading the model.\n\n### Read a model\n\nIn the following code, we add `self.examples = [{'src': '', 'tgt': ''}]` to `self.examples` to keep it consistent with other examples.\n\n```python\nself.examples = [{'src': '', 'tgt': ''}]\n```\n\n### Inference\n\nIn the following code, we add `self.truncate = None` to `self.truncate` to keep it consistent with other truncate.\n\n```python\nself.truncate = None\n```\n\n### Inference\n\nIn the following code, we add `self.num_samples = 1` to `self.num_samples` to keep it consistent with other num_samples.\n\n```python\nself.num_samples = 1\n```\n\n### Inference\n\nIn the following code, we add `self.output_file = ''` to `self.output_file` to keep it consistent with other output_file.\n\n```python\nself.output_file = ''\n```\n\n### Inference\n\nIn the following code, we add `self.out = {}` to `self.out` to keep it consistent with other out.\n\n```python\nself.out = {}\n```\n\n### Inference\n\nIn the following code, we add `self.log = {}` to `self.log` to keep it consistent with other log.\n\n```python\nself.log = {}\n```\n\n## Show examples\n\nThe following code shows the examples, in which we use `self.truncate` to set the number of source and"]}
{"task_id": "MBJSP/424", "prompt": "function extractRear(testtuple) {\n/**\n * * Write a function to extract only the rear index element of each string in the given tuple.\n */", "entry_point": "extractRear", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Mers\", \"for\", \"Vers\"];\nvar x0 = extractRear(arg00);\nvar v0 = [\"s\", \"r\", \"s\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Avenge\", \"for\", \"People\"];\nvar x1 = extractRear(arg10);\nvar v1 = [\"e\", \"r\", \"e\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Gotta\", \"get\", \"go\"];\nvar x2 = extractRear(arg20);\nvar v2 = [\"a\", \"t\", \"o\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract only the rear index element of each string in the given tuple.", "language": "javascript", "canonical_solution": "  return testTuple.map(function(element) {\n    return element.split(\"\").reverse()[0];\n  });\n}", "completion": ["\n    var count = 0;\n    for (var i = 0; i < testtuple.length; ++i) {\n        var elem = testtuple[i];\n        if (count == 2) {\n            f(elem);\n        }\n        count += 1;\n    }\n}\n", "\nauto WriteToRear(const std::tuple<std::string>& tuple) {\n    return WriteToRear(std::get<0>(tuple))\n}\n}\n<|endoftext|>", "\n\nvar _extractRearIndex = (", "\n    for (var i = 0; i < testtuple.length; i++) {\n        var teststr = testtuple[i];\n        var teststrarray = teststr.split(\"\");\n        var teststrarraylen = teststrarray.length;\n        var teststrrearindex = teststrarraylen - 1;\n        var teststring = testtuple[i].substring(0, teststrrearindex);\n        var testnumber = testtuple[i].substring(teststrrearindex, teststr.length);\n        teststrarraylen--;\n        var teststringrearindex = teststrarraylen - 1;\n        var teststringrearindexreversed = teststrarraylen - 1;\n        var teststrarrayrearindexreversed = teststrarraylen - 1;\n        teststringrearindex = teststrarraylen - 1;\n        teststrarrayrearindexreversed = teststrarraylen - 1;\n        testtuple[i] = teststring + testnumber;\n        testtuple[i] = teststringrearindex + testtuple[i];\n        testtuple[i] = testtuple[i].replace(\" \", \"\");\n        testtuple[i] = testtuple[i].replace(new RegExp(\"^ +\"), \"\");\n        testtuple[i] = testtuple[i].replace(new RegExp(\" +$\"), \"\");\n        testtuple[i] = testtuple[i].replace(new RegExp(\"^ *\"), \"\");\n        testtuple[i] = testtuple[i].replace(new RegExp(\" *$\"), \"\");\n        testtuple[i] = testtuple[i].replace(new Reg", "\n    print(rearindex(testtuple))\n    print(rearindex(testtuple, 1))\n    print(rearindex(testtuple, 2))\n}\n\n@testset \"Indexers\" begin\n    {\n        let testtuple = (\"foo\", \"bar\", \"baz\")\n\n        let assertFoo = assert(rearindex(testtuple, 1) == \"foo\")\n        let assertBar = assert(rearindex(testtuple, 2) == \"bar\")\n        let assertBaz = assert(rearindex(testtuple, 3) == \"baz\")\n    }\n    {\n        let testtuple = (\"foo\", \"bar\", \"baz\")\n\n        let assertFoo = assert(rearindex(testtuple, 1, 1) == \"foo\")\n        let assertBar = assert(rearindex(testtuple, 2, 2) == \"bar\")\n        let assertBaz = assert(rearindex(testtuple, 3, 3) == \"baz\")\n    }\nend\n\n\n@testset \"Indexers\" begin\n    {\n        let testtuple = (\"foo\", \"bar\", \"baz\")\n\n        let assertFoo = assert(rearindex(testtuple) == \"foo\")\n        let assertBar = assert(rearindex(testtuple, 1) == \"bar\")\n        let assertBaz = assert(rearindex(testtuple, 2) == \"baz\")\n    }\n    {\n        let testtuple = (\"foo\", \"bar\", \"baz\")\n\n        let assertFoo = assert(rearindex(testtuple, 1, 1) == \"foo\")\n        let assertBar = assert(rearindex"]}
{"task_id": "MBJSP/425", "prompt": "function countElementInList(list1, x) {\n/**\n * * Write a function to count the number of sublists containing a particular element.\n */", "entry_point": "countElementInList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [5, 7], [1, 11], [1, 15, 7]];\nvar arg01 = 1;\nvar x0 = countElementInList(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]];\nvar arg11 = \"A\";\nvar x1 = countElementInList(arg10, arg11);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]];\nvar arg21 = \"E\";\nvar x2 = countElementInList(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count the number of sublists containing a particular element.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list1[i].length; j++) {\n      if (list1[i][j] === x) {\n        count++;\n      }\n    }\n  }\n  return count;\n}", "completion": ["\n", "\nconst sublists = (elem, lists) => {\n  if (!lists.length) return 0;\n\n  // Write your code here.\n  return lists.reduce((a, b) => a + b.filter(e => e === elem).length, 0);\n};\n```\n\n</section>\n<|endoftext|>", "\n\n}\n\n\n/**\n * Write a function to count the number of sublists containing a particular element.\n */\n\n/**\n * @param list\n * @param element\n * @returns {*}\n */\n\n", "\nmodule.exports = function(list, x) {\n  if (list.length === 0) {\n    return 0\n  } else {\n    return Math.min(\n      x.length,\n      // Determine the minimum number of times we need to include x.\n      // The minimum number of times we need to include x is equal to\n      // the length of the list - the number of times we need to exclude x.\n      list.length - list.indexOf(x)\n    )\n  }\n}\n```\n\nThe above module assumes that the length of the list is equal to the number of times we need to include x in the sublists. If we had not used the length of the list, then the above module would instead return the number of sublists that include x.\n\nIf the length of the list is not equal to the number of times we need to include x in the sublists, then the above module would instead return the number of sublists that contain x.\n\nWe need to make sure that we return the correct result. Let\u2019s see if we can make sure our implementation works correctly.\n\n## Implementing the above module\n\nThe first thing we need to do is understand how the above module works.\n\n### Understanding the above module\n\nWe know that our module returns the minimum number of times we need to include x in the sublists.\n\nThus we can conclude that if we have a list of size 4, we should expect that the above module will return 2.\n\n### What does this module do?\n\nThe above module is similar to the following module.\n\n```javascript\n/**\n * Write a function to count the number of sublists containing a particular element.\n */\n", "\n\n/**\n * * Write a function to find the number of sublists containing exactly two particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly three particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly four particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly five particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly six particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly seven particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly eight particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly nine particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly ten particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly eleven particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly twelve particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly thirteen particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly fourteen particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly fifteen particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly sixteen particular elements.\n */\n\n/**\n * * Write a function to find the number of sublists containing exactly seventeen particular elements.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/426", "prompt": "function filterOddnumbers(nums) {\n/**\n * * Write a function to filter odd numbers using lambda function.\n */", "entry_point": "filterOddnumbers", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = filterOddnumbers(arg00);\nvar v0 = [1, 3, 5, 7, 9];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 45, 67, 84, 93];\nvar x1 = filterOddnumbers(arg10);\nvar v1 = [45, 67, 93];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 7, 9, 8, 6, 4, 3];\nvar x2 = filterOddnumbers(arg20);\nvar v2 = [5, 7, 9, 3];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to filter odd numbers using lambda function.", "language": "javascript", "canonical_solution": "  return nums.filter(num => num % 2 !== 0);\n}", "completion": ["\n    const is_odd: (num: number) => boolean = (num) => num % 2 === 1;\n    const odd_numbers = [...nums].filter(is_odd);\n    console.log(odd_numbers);\n}\n```\n\n##### Filter only odd numbers\n\n```javascript\nddnumbers(nums) {\n    const is_odd: (num: number) => boolean = (num) => num % 2 === 1;\n    const odd_numbers = nums.filter(is_odd);\n    console.log(odd_numbers);\n}\n```\n\n##### Filter only even numbers\n\n```javascript\nddnumbers(nums) {\n    const is_even: (num: number) => boolean = (num) => num % 2 === 0;\n    const even_numbers = nums.filter(is_even);\n    console.log(even_numbers);\n}\n```\n\n##### Filter only even numbers\n\n```javascript\nddnumbers(nums) {\n    const is_even: (num: number) => boolean = (num) => num % 2 === 0;\n    const even_numbers = nums.filter(is_even);\n    console.log(even_numbers);\n}\n```\n\n##### Filter only even numbers\n\n```javascript\nddnumbers(nums) {\n    const is_even: (num: number) => boolean = (num) => num % 2 === 0;\n    const even_numbers = nums.filter(is_even);\n    console.log(even_numbers);\n}\n```\n\n##### Filter only even numbers\n\n```javascript\nddnumbers(nums", "\n}\n```\n\n1. \uc774 \ucf54\ub4dc\ub294 \ud568\uc218 `ddnumbers`\uc758 \ucc38\uc870\uac12\uc744 \ubc18\ud658\ud55c\ub2e4. \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 \uc774 \ucf54\ub4dc\ub97c \uc774\uc6a9\ud574 \ud655\uc778\ud558\uace0 \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4.\n\n2. \uc774 \ucf54\ub4dc\ub294 `ddnumbers`\uc758 \ucc38\uc870\uac12\uc744 \ubc18\ud658\ud55c\ub2e4. \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 \uc774 \ucf54\ub4dc\ub97c \uc774\uc6a9\ud574 \ud655\uc778\ud558\uace0 \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4.\n\n3. \uc774 \ucf54\ub4dc\ub294 `ddnumbers`\uc758 \ucc38\uc870\uac12\uc744 \ubc18\ud658\ud55c\ub2e4. \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 \uc774 \ucf54\ub4dc\ub97c \uc774\uc6a9\ud574 \ud655\uc778\ud558\uace0 \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4.\n\n4. \uc774 \ucf54\ub4dc\ub294 `ddnumbers`\uc758 \ucc38\uc870\uac12\uc744 \ubc18\ud658\ud55c\ub2e4", "\n", "\n    let oddnumbers = [];\n    nums.forEach((number, index) => {\n        if (index % 2 === 1) {\n            oddnumbers.push(number);\n        }\n    });\n    \n    console.log(oddnumbers);\n}\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)\nddnumbers(nums)", "\n\n"]}
{"task_id": "MBJSP/427", "prompt": "function changeDateFormat(dt) {\n/**\n * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n */", "entry_point": "changeDateFormat", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"2026-01-02\";\nvar x0 = changeDateFormat(arg00);\nvar v0 = \"02-01-2026\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"2020-11-13\";\nvar x1 = changeDateFormat(arg10);\nvar v1 = \"13-11-2020\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"2021-04-26\";\nvar x2 = changeDateFormat(arg20);\nvar v2 = \"26-04-2021\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "language": "javascript", "canonical_solution": "  const dtRegex = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\n  const [_, year, month, day] = dt.match(dtRegex);\n  return `${day}-${month}-${year}`;\n}", "completion": ["\n", "\n", "\n", "\ndt = dt.replace('-', '.');\nvar year = dt.slice(0,4);\nvar month = dt.slice(4,6);\nvar day = dt.slice(6,8);\nvar year_day = year+'-'+month+'-'+day;\nvar regex = /\\d{1,2}/g;\nvar matched = dt.match(regex);\nvar match;\nvar year_match = matched[0].match(regex);\nvar year_match_len = year_match.length;\nvar month_match = matched[1].match(regex);\nvar month_match_len = month_match.length;\nvar day_match = matched[2].match(regex);\nvar day_match_len = day_match.length;\nmatch = [year_match, month_match, day_match];\nmatch_len = [year_match_len, month_match_len, day_match_len];\n", "\ndt.to_date = "]}
{"task_id": "MBJSP/428", "prompt": "function shellSort(mylist) {\n/**\n * * Write a function to sort the given array by using shell sort.\n */", "entry_point": "shellSort", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95];\nvar x0 = shellSort(arg00);\nvar v0 = [2, 3, 4, 5, 12, 12, 23, 56, 81, 95];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [24, 22, 39, 34, 87, 73, 68];\nvar x1 = shellSort(arg10);\nvar v1 = [22, 24, 34, 39, 68, 73, 87];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [32, 30, 16, 96, 82, 83, 74];\nvar x2 = shellSort(arg20);\nvar v2 = [16, 30, 32, 74, 82, 83, 96];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort the given array by using shell sort.", "language": "javascript", "canonical_solution": "  let len = myList.length;\n  let gap = Math.floor(len / 2);\n  while (gap > 0) {\n    for (let i = gap; i < len; i++) {\n      let j = i;\n      let temp = myList[i];\n      while (j >= gap && myList[j - gap] > temp) {\n        myList[j] = myList[j - gap];\n        j = j - gap;\n      }\n      myList[j] = temp;\n    }\n    gap = Math.floor(gap / 2);\n  }\n  return myList;\n}", "completion": ["\n}\n\n\n\n", "\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a ", "\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a function to sort the given array by using shell sort.\n */\n/**\n * * Write a ", "\n\n/**\n * * The shell sort algorithm sorts an array by repeatedly inserting \n * a gap. A gap is any element that is greater than the element to its \n * left. The algorithm repeats until no elements are greater than the gap. \n * For example, if the gap is gap = 3, then one possible gap sequence is: \n * gap = 1, 2, 3 \n * one possible gap sequence is: gap = 5, 6, 7, 8, 9, 10, 11, 12. \n * As the gap is equal to the length of the array, the sequence is sorted.\n * \n * Input: arr[] = {17, 15, 13, 11, 18, 1, 14, 10}\n * Output: Sorted array is {1, 11, 13, 15, 17, 18, 14, 10}\n * \n * Input: arr[] = {0, 1, 2, 3, 4}\n * Output: Sorted array is {4, 3, 2, 1, 0}\n * \n * Input: arr[] = {10, 9, 8, 7, 6, 5}\n * Output: Sorted array is {5, 6, 7, 8, 9, 10}\n * \n * Input: arr[] = {49, 38, 29, 19, 0, -10, -38, -49}\n * Output: Sorted array is {-10, -38, -49, -38, -19, 0, 19, 29, 38, 49}\n */\n\n/**\n * * The shell sort algorithm sorts an array by repeatedly inserting \n * a gap. A gap is any element that is greater than the element to its \n * left. The algorithm repeats until no elements are greater than the gap. \n * For example, if the gap is gap = 3, then one", "\n"]}
{"task_id": "MBJSP/429", "prompt": "function andTuples(testtup1, testtup2) {\n/**\n * * Write a function to extract the elementwise and tuples from the given two tuples.\n */", "entry_point": "andTuples", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [10, 4, 6, 9];\nvar arg01 = [5, 2, 3, 3];\nvar x0 = andTuples(arg00, arg01);\nvar v0 = [0, 0, 2, 1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4];\nvar arg11 = [5, 6, 7, 8];\nvar x1 = andTuples(arg10, arg11);\nvar v1 = [1, 2, 3, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 12];\nvar arg21 = [7, 13, 14, 17];\nvar x2 = andTuples(arg20, arg21);\nvar v2 = [0, 9, 10, 0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract the elementwise and tuples from the given two tuples.", "language": "javascript", "canonical_solution": "  const result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    result.push(testTup1[i] & testTup2[i]);\n  }\n  return result;\n}", "completion": ["\nexports.write_ele_and_tup = function(ele, tup) {\n    return {\n        ele: ele,\n        tup: tup,\n        to_string: function() {\n            return {\n                ele: ele,\n                tup: tup,\n                to_string: function() {\n                    return this.ele + \" and \" + this.tup;\n                }\n            };\n        }\n    };\n};\n\n/**\n * * Given a set of elements, returns a function to extract and tuple from each element.\n */\nexports.write_ele_tup = function(ele) {\n    return {\n        ele: ele,\n        tup: tup,\n        to_string: function() {\n            return this.ele + \" and \" + this.tup;\n        }\n    };\n};\n\n\n/**\n * * Write a function to extract the elementwise and tuples from the given two tuples.\n */\nexports.write_ele_and_tup = function(ele, tup) {\n    return {\n        ele: ele,\n        tup: tup,\n        to_string: function() {\n            return this.ele + \" and \" + this.tup;\n        }\n    };\n};\n\n\n/**\n * * Write a function to extract the elementwise and tuples from the given two tuples.\n */\nexports.write_ele_and_tup = function(ele, tup) {\n    return {\n        ele: ele,\n        tup: tup,\n        to_string: ", "\n", "\nconst getElementwiseAndTuple = function getElementwiseAndTuple(testtup1, testtup2) {\n  return [...testtup1,...testtup2];\n};\n\n/**\n * * Check whether the given `testtup` is an elementwise or tuples of `test1tup` and `test2tup`.\n */\nconst isElementwiseOrTuple = function isElementwiseOrTuple(testtup, test1tup, test2tup) {\n  return isElementwise(testtup) || isTuple(testtup, test1tup, test2tup);\n};\n\n/**\n * * Check whether the given `testtup` is an elementwise or tuples of `test1tup` and `test2tup`.\n */\nconst isTuple = function isTuple(testtup, test1tup, test2tup) {\n  return (testtup[0] || testtup[1]) && (test1tup[0] || test1tup[1]) && (test2tup[0] || test2tup[1]);\n};\n\n/**\n * * Write a function to check whether the given `testtup` is an elementwise or tuples of `test1tup` and `test2tup`.\n */\nconst checkElementwiseAndTuple = function checkElementwiseAndTuple(testtup, test1tup, test2tup) {\n  return isElementwiseOrTuple(testtup, test1tup, test2tup);\n};\n\n/**\n * * Write a ", "\n", "\n\nvar getElementwiseAndTuples = function getElementwiseAndTuples(l1, l2) {\n  return _getElementwiseAndTuples(l1, l2).map("]}
{"task_id": "MBJSP/430", "prompt": "function parabolaDirectrix(a, b, c) {\n/**\n * * Write a function to find the directrix of a parabola.\n */", "entry_point": "parabolaDirectrix", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 3;\nvar arg02 = 2;\nvar x0 = parabolaDirectrix(arg00, arg01, arg02);\nvar v0 = -198;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 9;\nvar arg11 = 8;\nvar arg12 = 4;\nvar x1 = parabolaDirectrix(arg10, arg11, arg12);\nvar v1 = -2336;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 4;\nvar arg22 = 6;\nvar x2 = parabolaDirectrix(arg20, arg21, arg22);\nvar v2 = -130;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the directrix of a parabola.", "language": "javascript", "canonical_solution": "  return (c - ((b * b) + 1) * 4 * a);\n}", "completion": ["\n}\n/**\n * The directrix of the parabola of equation ax^2 + bx + c = 0 is\n * the point of intersection of the parabola and the line\n * passing through the origin and the directrix.\n */\n}\n/**\n * Defines the syntax to use for an implicit function.\n */\nclass ImplicitFunction implements Function {\n/**\n * The name of this function.\n */\nname = \"ImplicitFunction\";\n/**\n * Returns the value of the function at the specified point.\n * @param params The values of the function's parameters, where the first parameter is the value of the implicit function's constant.\n */\npublic double f(double[] params) {\n/**\n * The implicit equation ax^2 + bx + c = 0.\n */\n}\n/**\n * The value of the implicit function's constant.\n */\n}\n/**\n * Defines the syntax to use for an implicit function.\n */\nclass ImplicitFunction implements Function {\n/**\n * The name of this function.\n */\nname = \"ImplicitFunction\";\n/**\n * Returns the value of the function at the specified point.\n * @param params The values of the function's parameters, where the first parameter is the value of the implicit function's constant.\n */\npublic double f(double[] params) {\n/**\n * The implicit equation ax^2 + bx + c = 0.\n */\n}\n/**\n * The value of the implicit function's constant.\n */\n}\n/**\n * A model that represents an implicit function.\n */\nclass ImplicitFunctionModel extends Model {\n/**\n * Defines the syntax to use for an implicit function.\n */\nclass ImplicitFunctionModelSyntax extends Syntax {\n/**\n * The name of this ", "\n\n/**\n * * Write a function to find the maximum value of a parabola.\n */\n\n/**\n * * Write a function to find the minimum value of a parabola.\n */\n\n/**\n * * Write a function to find the vertex of a parabola.\n */\n\n/**\n * * Write a function to calculate the distance between a point and a parabola.\n */\n\n/**\n * * Write a function to calculate the distance between two points on a parabola.\n */\n\n/**\n * * Write a function to find the centre of a parabola.\n */\n\n/**\n * * Write a function to calculate the curvature of a parabola.\n */\n\n/**\n * * Write a function to find the minimum and maximum value of a parabola.\n */\n\n/**\n * * Write a function to find the roots of a parabola.\n */\n\n/**\n * * Write a function to find the maximum and minimum value of a parabola.\n */\n\n/**\n * * Write a function to calculate the distance between the maximum and minimum value of a parabola.\n */\n\n/**\n * * Write a function to find the equation of the parabola.\n */\n\n/**\n * * Write a function to calculate the position of the parabola's directrix.\n */\n\n/**\n * * Write a function to find the curvature of a parabola.\n */\n\n/**\n * * Write a function to find the minimum and maximum value of a parabola.\n */\n\n/**\n * * Write a function to find the roots of a parabola.\n */\n\n/**\n * * Write a function to find the directrix of a parabola.\n */\n\n/**\n * * Write a ", "\n", "\n", "\n/**\n * * Write a function to find the focus of a parabola.\n */\n/**\n * * Write a function to find the inflection points of a parabola.\n */\n/**\n * * Write a function to find the roots of a parabola.\n */\n};\n/**\n * * Write a function to find the roots of a parabola.\n */\n</code></pre>\n        <pre><code class=\"language-javascript\">\n/**\n * Find the roots of a parabola.\n * @param  {Array} points Array of points defining the parabola.\n * @return {Array}           Array of roots.\n */\n"]}
{"task_id": "MBJSP/431", "prompt": "function commonElement(list1, list2) {\n/**\n * * Write a function that takes two lists and returns true if they have at least one common element.\n */", "entry_point": "commonElement", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = [5, 6, 7, 8, 9];\nvar x0 = commonElement(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5];\nvar arg11 = [6, 7, 8, 9];\nvar x1 = commonElement(arg10, arg11);\nvar v1 = null;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"a\", \"b\", \"c\"];\nvar arg21 = [\"d\", \"b\", \"e\"];\nvar x2 = commonElement(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function that takes two lists and returns true if they have at least one common element.", "language": "javascript", "canonical_solution": "  if (list1.length === 0 || list2.length === 0) {\n    return null;\n  }\n  let commonElement = [];\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        commonElement.push(list1[i]);\n      }\n    }\n  }\n  if (commonElement.length === 0) {\n    return null;\n  }\n  return true;\n}", "completion": ["\n\n/**\n * * Returns true if every element of the first list is identical to the corresponding element of the second list.\n */\n\n/**\n * * Write a function that takes two lists and returns true if they have exactly one common element.\n */\n\n/**\n * * Write a function that takes two lists and returns true if there is a common element in the first list that is not in the second list.\n */\n\n/**\n * * Write a function that takes two lists and returns a list of the common elements.\n */\n\n/**\n * * Write a function that takes two lists and returns a list of the elements in the first list that are not in the second list.\n */\n\n/**\n * * Write a function that takes two lists and returns the intersection of the two lists.\n */\n\n/**\n * * Write a function that takes two lists and returns a list containing the unique elements of the first list that appear in the second list.\n */\n\n/**\n * * Write a function that takes two lists and returns a list containing the unique elements of the second list that appear in the first list.\n */\n\n/**\n * * Write a function that takes two lists and returns a list of the unique elements in both lists.\n */\n\n/**\n * * Write a function that takes three lists and returns a list containing the elements from each of the lists in order, with duplicates removed.\n */\n\n/**\n * * Write a function that takes three lists and returns a list containing the elements in the first list that appear in the second list, second list, and third list, but not in the first list.\n */\n\n/**\n * * Write a ", "\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists, return true if they have at least one common element.\n */\n\n/**\n * * Given two lists", "\nvar hasOneCommonElement = function (list1, list2) {\n    return function (list1, list2) {\n        return (list1.findIndex(", "\n\nif (list1[0] === list2[0]) {\nreturn true;\n}\n\nif (list1[0] === list2[1]) {\nreturn true;\n}\n\nif (list1[1] === list2[0]) {\nreturn true;\n}\n\nif (list1[1] === list2[1]) {\nreturn true;\n}\n\nreturn false;\n\n}\n\n/**\n * * Write a function that takes two lists and returns true if they are identical.\n * */\n\n", "\n"]}
{"task_id": "MBJSP/432", "prompt": "function medianTrapezium(base1, base2, height) {\n/**\n * * Write a function to find the median of a trapezium.\n */", "entry_point": "medianTrapezium", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 15;\nvar arg01 = 25;\nvar arg02 = 35;\nvar x0 = medianTrapezium(arg00, arg01, arg02);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 20;\nvar arg12 = 30;\nvar x1 = medianTrapezium(arg10, arg11, arg12);\nvar v1 = 15;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar arg21 = 9;\nvar arg22 = 4;\nvar x2 = medianTrapezium(arg20, arg21, arg22);\nvar v2 = 7.5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the median of a trapezium.", "language": "javascript", "canonical_solution": "    var base = (base1 + base2) / 2;\n    var height = (base1 + base2 + height) / 3;\n    return base;\n}", "completion": ["\n", "\n/**\n * * Write a function to find the median of a trapezium.\n */\n}\n\n/**\n * * Write a function to find the median of a trapezium.\n */\n/**\n * * Write a ", "\n}\n\nmodule.exports = FindMedianOfTrapezium;\n\n},{\"./helper\":10,\"point-cluster\":5}],5:[", "\nthis.median_ = ", "\nconst trapezium = (base1, base2, height) => {\n    return (height / 2) * (base1 + base2);\n};\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/433", "prompt": "function checkGreater(arr, number) {\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */", "entry_point": "checkGreater", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar arg01 = 4;\nvar x0 = checkGreater(arg00, arg01);\nvar v0 = \"No, entered number is less than those in the array\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 5, 6];\nvar arg11 = 8;\nvar x1 = checkGreater(arg10, arg11);\nvar v1 = \"Yes, the entered number is greater than those in the array\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [9, 7, 4, 8, 6, 1];\nvar arg21 = 11;\nvar x2 = checkGreater(arg20, arg21);\nvar v2 = \"Yes, the entered number is greater than those in the array\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether the entered number is greater than the elements of the given array.", "language": "javascript", "canonical_solution": "  for (let i = 0; i < arr.length; i++) {\n    if (number <= arr[i]) {\n      return \"No, entered number is less than those in the array\";\n    }\n  }\n  return \"Yes, the entered number is greater than those in the array\";\n}", "completion": ["\n\nconst arr = [1, 2, 3, 4, 5];\n\nconst result = is_greater_than_number(arr, 2);\n\nconsole.log(result); // false\n\nconst result1 = is_greater_than_number(arr, 6);\n\nconsole.log(result1); // true\n\n}\n</code></pre>\n            </div>\n            <div class=\"instructions\">\n              <h4>Instructions</h4>\n              <ol>\n                <li>Fill in the code in the function <code>is_greater_than_number</code>.</li>\n                <li>In the function <code>is_greater_than_number</code>, check to see whether the entered number is greater than the elements of the given array.</li>\n                <li>Use the <code>for</code> loop to iterate through the array and check to see if the entered number is greater than the elements of the array.</li>\n                <li>Use the <code>if</code> keyword to check whether the entered number is greater than the elements of the array.</li>\n              </ol>\n            </div>\n          </section>\n          <section class=\"section\">\n            <div class=\"title\">\n              <h2>Is_equal_to_number</h2>\n            </div>\n            <div class=\"content\">\n              <p>Fill in the code in the function <code>is_equal_to_number</code>.</p>\n              <pre class=\"prettyprint\"><code class=\"javascript\">\nis_equal_to_number(arr, 2) {\n/**\n * * Write a ", "\nlet arr = [10, 5, 6, 8, 1, 7, 9];\nlet number = 7;\nconsole.log(is_greater_than(arr, number));\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */\nlet arr = [10, 5, 6, 8, 1, 7, 9];\nlet number = 6;\nconsole.log(is_greater_than(arr, number));\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */\nlet arr = [10, 5, 6, 8, 1, 7, 9];\nlet number = 5;\nconsole.log(is_greater_than(arr, number));\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */\nlet arr = [10, 5, 6, 8, 1, 7, 9];\nlet number = 9;\nconsole.log(is_greater_than(arr, number));\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */\nlet arr = [10, 5, 6, 8, 1, 7, 9];\nlet number = 10;\nconsole.log(is_greater_than(arr, number));\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */\nlet arr = [10, 5, 6, 8, 1, 7, 9];\nlet number = 8;\nconsole.log(is_greater_than(arr, number));\n/**\n * * Write a ", "\nvar greater_than = function greater_than(arr, number) {\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > number) {\n            return arr[i];\n        }\n    }\n\n    return number;\n};\n\nif (is_between(number, lower, upper)) {\n    if (lower_inclusive) {\n        arr.push(greater_than(arr, number));\n    } else {\n        arr.push(greater_than(arr, number) + 1);\n    }\n} else {\n    if (upper_inclusive) {\n        arr.push(greater_than(arr, number) - 1);\n    } else {\n        arr.push(greater_than(arr, number));\n    }\n}\n\n/**\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n */\nvar greater_than_or_equal = ", "\n    ", "\n"]}
{"task_id": "MBJSP/434", "prompt": "function textMatchOne(text) {\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */", "entry_point": "textMatchOne", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"ac\";\nvar x0 = textMatchOne(arg00);\nvar v0 = \"Not matched!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"dc\";\nvar x1 = textMatchOne(arg10);\nvar v1 = \"Not matched!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"abba\";\nvar x2 = textMatchOne(arg20);\nvar v2 = \"Found a match!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function that matches a string that has an a followed by one or more b's.", "language": "javascript", "canonical_solution": "  if (text.match(/a/g) && text.match(/b/g)) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}", "completion": ["\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * Write a ", "\n\n  }\n\n}</pre></div>\n</div>\n</div>\n\n<div class=\"output_wrapper\">\n<div class=\"output\">\n\n\n<div class=\"output_area\"><div class=\"prompt\"></div>\n<div class=\"output_subarea output_stream output_stdout output_text\">\n<pre>[Finished in 1.7s]</pre>\n</div>\n</div>\n\n</div>\n</div>\n\n</div>\n</div>\n\n<div class=\"jb_cell\">\n\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p>We can see that the number of occurrences of the string \"foobar\" is between 2 and 7:</p>\n\n</div>\n</div>\n</div>\n</div>\n\n<div class=\"jb_cell\">\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">&#39;foobar&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">counts</span>\n</pre></div>\n\n    </div>\n</", "\nlet write_b_pattern = (b_str, write_fun) => {\n    let b_len = b_str.length;\n    for (let i = 0; i < b_len; ++i) {\n        write_fun(b_str.charAt(i));\n    }\n};\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's followed by any character or a delimiter.\n */\nlet write_b_delim_pattern = (b_str, write_fun) => {\n    let b_len = b_str.length;\n    for (let i = 0; i < b_len; ++i) {\n        let b_char = b_str.charAt(i);\n        if (b_char ==='' || b_char === '\\t' || b_char === '\\n') {\n            write_fun(b_char);\n        } else {\n            write_fun(' ');\n            write_fun(b_char);\n        }\n    }\n};\n\n/**\n * * Write a ", "\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a function that matches a string that has an a followed by one or more b's.\n */\n\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/435", "prompt": "function lastDigit(n) {\n/**\n * * Write a JavaScript function to find the last digit of a given number.\n */", "entry_point": "lastDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 123;\nvar x0 = lastDigit(arg00);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 25;\nvar x1 = lastDigit(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 30;\nvar x2 = lastDigit(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the last digit of a given number.", "language": "javascript", "canonical_solution": "  return n % 10;\n}", "completion": ["\nn = n | 0;\n", "\n\nvar lastDigit = function(n) {\n/**\n * * Write a JavaScript function that will calculate the number of digits in a given number.\n */\n\nvar digits = function(n) {\n/**\n * * Create a variable to store the number of digits of the given number.\n */\n\nvar numDigits = function(n) {\n/**\n * * Store the number of digits in a variable.\n */\n\nvar numDigits = ", "\n/**\n * * @param {number} n The number\n * * @returns {number} The last digit of the number\n */\n/**\n * * @description Find the last digit of a given number.\n * * @example\n * * @for function-example\n * * @name it.it(n)\n * * @returns {number} The last digit of the number\n */\nit(n) {\n/**\n * * Write a JavaScript function to find the last digit of a given number.\n */\n/**\n * * @description Find the last digit of a given number.\n * * @example\n * * @for function-example\n * * @name it.it(n)\n * * @returns {number} The last digit of the number\n */\nit(n) {\n/**\n * * Write a JavaScript function to find the last digit of a given number.\n */\n/**\n * * @description Find the last digit of a given number.\n * * @example\n * * @for function-example\n * * @name it.it(n)\n * * @returns {number} The last digit of the number\n */\nit(n) {\n/**\n * * Write a JavaScript function to find the last digit of a given number.\n */\n/**\n * * @description Find the last digit of a given number.\n * * @example\n * * @for function-example\n * * @name it.it(n)\n * * @returns {number} The last digit of the number\n */\nit(n) {\n/**\n * * Write a JavaScript function to find the last digit of a given number.\n */\n/**\n * * @description Find the last digit of a given number.\n * * @example\n * * @for ", "\nvar lastDigit = function(n) {\n  n = n.toString();\n  if (n.length === 1) {\n    return n[0];\n  }\n  return n[n.length - 2] || n[n.length - 1];\n};\n\n/**\n * * Given a string, return a boolean indicating whether it is a palindrome.\n */\nvar isPalindrome = function(str) {\n  str = str.toString();\n  for (var i = 0; i < str.length / 2; i++) {\n    if (str[i]!== str[str.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * * Given a string, find the first and last character of the string.\n */\nvar firstAndLastCharacter = function(str) {\n  if (str.length === 0) {\n    return \"\";\n  }\n  return str[0] + \" \" + str[str.length - 1];\n};\n\n/**\n * * Given a number, return the number of times that the value 11 appears in the given number.\n */\nvar count11 = ", "\nvar write = function write(n) {\n/**\n * * Find the last digit of a given number.\n * *\n * * Example: \n * *  * If the number is 123, the function should return 1. \n * *  * If the number is 1232, the function should return 3. \n * *  * If the number is 0, the function should return 0. \n * *  * If the number is -123, the function should return -1. \n */\n\tvar digit = function digit(n) {\n\t\treturn Math.floor(Math.log10(n)) + 1;\n\t}\n\tvar lastDigit = function lastDigit(n) {\n\t\treturn n % 10;\n\t}\n\tvar result = digit(n) % 10;\n\tvar finalResult = lastDigit(n) * result;\n\treturn finalResult;\n}\n\n/**\n * * Test with some examples and some expected outputs.\n */\nvar test = function test(n) {\n\t// n should be positive\n\tconsole.log('n should be positive');\n\tif (n <= 0) {\n\t\tconsole.log('n should be positive');\n\t\tconsole.log('fail');\n\t\treturn false;\n\t}\n\n\t// write(n) should equal to last digit of n\n\tconsole.log('write(n) should equal to last digit of n');\n\tif (write(n) === lastDigit(n)) {\n\t\tconsole.log('fail');\n\t\treturn false;\n\t}\n\n\tconsole.log('success');\n\treturn true;\n}\n\n/**\n * * Test the given number n as positive integer.\n */\nvar testForPositiveNumber = "]}
{"task_id": "MBJSP/436", "prompt": "function negNos(list1) {\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */", "entry_point": "negNos", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [-1, 4, 5, -6];\nvar x0 = negNos(arg00);\nvar v0 = [-1, -6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, -2, 3, 4];\nvar x1 = negNos(arg10);\nvar v1 = [-1, -2];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-7, -6, 8, 9];\nvar x2 = negNos(arg20);\nvar v2 = [-7, -6];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to print negative numbers in a list.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}", "completion": ["\n  printNegativeNumbers(list1);\n}<|endoftext|>", "\n} else {\n/**\n * * Write a JavaScript ", "\n  if (list2[i] < 0) {\n    print(\"There are no \" + list2[i] + \" negative numbers in the list.\");\n    return false;\n  }\n}\n\n/* Write a JavaScript function to print positive numbers in a list. */\n", "\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n\n/**\n * * Write a JavaScript ", "\n} else {\n/**\n * * Write a JavaScript function to print negative numbers in a list.\n */\n}\n```\n\n## TypeScript\n\n```js\nif (false) {\n  /**\n   * * Write a JavaScript function to print negative numbers in a list.\n   */\n} else {\n  /**\n   * * Write a JavaScript function to print negative numbers in a list.\n   */\n}\n```\n\n## JavaScript + Webpack\n\n```js\n// webpack.config.js\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst webpack = require(\"webpack\");\nconst port = 3000;\n\nconst app = express();\nconst compiler = webpack({\n  mode: \"development\",\n  entry: \"./app.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.js\"\n  },\n  resolve: {\n    modules: [path.resolve(__dirname, \"node_modules\")],\n    extensions: [\".js\", \".json\"]\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: \"babel-loader\"\n        },\n        exclude: /node_modules/\n      }\n    ]\n  }\n});\n\napp.use(express.static(path.resolve(__dirname, \"dist\"))));\napp.listen(port, "]}
{"task_id": "MBJSP/437", "prompt": "function removeOdd(str1) {\n/**\n * * Write a function to remove odd characters in a string.\n */", "entry_point": "removeOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"python\";\nvar x0 = removeOdd(arg00);\nvar v0 = \"yhn\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"program\";\nvar x1 = removeOdd(arg10);\nvar v1 = \"rga\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"language\";\nvar x2 = removeOdd(arg20);\nvar v2 = \"agae\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove odd characters in a string.", "language": "javascript", "canonical_solution": "  let newStr = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (i % 2 !== 0) {\n      newStr += str1[i];\n    }\n  }\n  return newStr;\n}", "completion": ["\n\nvar removeOddCharacters = (str1) => {\n  var str2 = '';\n  for (var i = 0; i < str1.length; i++) {\n    var character = str1.charAt(i);\n    var characterValue = character.match(/([\\+\\-]?[0-9]+[\\u0621-\\u0653])/i);\n\n    if (!characterValue) {\n      str2 += character;\n    }\n  }\n  return str2;\n};\n</script>\n\n<script>\n/**\n * * Remove all whitespaces from a string.\n */\n\nvar removeWhitespace = (str1) => {\n  return str1.replace(/\\s/g, '');\n};\n</script>\n\n<script>\n/**\n * * Remove a given number of characters from a string.\n */\n\nvar removeCharacters = (str1, numberOfCharacters) => {\n  var str2 = '';\n\n  for (var i = 0; i < str1.length; i++) {\n    var character = str1.charAt(i);\n    var characterValue = character.match(/([\\+\\-]?[0-9]+[\\u0621-\\u0653])/i);\n\n    if (!characterValue) {\n      str2 += character;\n    }\n\n    if (str2.length >= numberOfCharacters) {\n      return str2;\n    }\n  }\n};\n</script>\n\n<script>\n/**\n * * Remove a given number of words from a string.\n */\n\nvar removeWords = (str1, numberOfWords) => {\n  var str2 = '';\n  var wordArray = str1.split(", "\n        var str1 = 'Danger is the future.';\n        dd(str1) {\n        /**\n         * * Remove odd characters from a string.\n         */\n                str1 = str1.replace(/\\b[01]\\b/g, '');\n        /**\n         * * Return the string.\n         */\n                return str1;\n        }\n}<|endoftext|>", "\ndd.removeOdd = ", "\n\nif (typeof str1!=='string')\n    return;\n\nvar length = str1.length;\nvar l = length - 1;\n\nvar x = 1;\n\nfor (var i = length - 1; i >= 0; i--) {\n    if (str1[i]!== str1[i - 1]) {\n        str1[i - x] = str1[i];\n        str1[i] = str1[i - x];\n        l = i - x;\n    }\n    x++;\n}\n\nstr1[l] = '\\u202f';\n}\n\ndd(str1) {\n/**\n * * Create a block of instructions to remove odd characters in a string.\n */\n\nif (typeof str1!=='string')\n    return;\n\nvar length = str1.length;\nvar l = length - 1;\n\nvar x = 1;\n\nfor (var i = length - 1; i >= 0; i--) {\n    if (str1[i]!== str1[i - 1]) {\n        str1[i - x] = str1[i];\n        str1[i] = str1[i - x];\n        l = i - x;\n    }\n    x++;\n}\n\nstr1[l] = '\\u202f';\n}\n\ndd(str1) {\n/**\n * * Write a ", "\n}\n\ndd(str2) {\n/**\n * * Remove the odd characters from a string.\n */\n}\n\ndd(str3) {\n/**\n * * Write a "]}
{"task_id": "MBJSP/438", "prompt": "function countBidirectional(testlist) {\n/**\n * * Write a function to count bidirectional tuple pairs.\n */", "entry_point": "countBidirectional", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]];\nvar x0 = countBidirectional(arg00);\nvar v0 = \"3\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]];\nvar x1 = countBidirectional(arg10);\nvar v1 = \"2\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]];\nvar x2 = countBidirectional(arg20);\nvar v2 = \"4\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to count bidirectional tuple pairs.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < testList.length - 1; i++) {\n    if (testList[i][0] === testList[i + 1][1] && testList[i][1] === testList[i + 1][0]) {\n      count++;\n    }\n  }\n  return count;\n}", "completion": ["\nif (testlist.length > 0) {\n    testlist.forEach(", "\n", "\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a function to count bidirectional tuple pairs.\n */\n}\n\n/**\n * * Write a ", "\n", "\n"]}
{"task_id": "MBJSP/439", "prompt": "function multipleToSingle(l) {\n/**\n * * Write a function to convert a list of multiple integers into a single integer.\n */", "entry_point": "multipleToSingle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [11, 33, 50];\nvar x0 = multipleToSingle(arg00);\nvar v0 = 113350;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 2, 3, 4, 5, 6];\nvar x1 = multipleToSingle(arg10);\nvar v1 = -123456;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 15, 20, 25];\nvar x2 = multipleToSingle(arg20);\nvar v2 = 10152025;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert a list of multiple integers into a single integer.", "language": "javascript", "canonical_solution": "  let str = '';\n  for (let i = 0; i < l.length; i++) {\n    str += l[i];\n  }\n  return parseInt(str);\n}", "completion": ["\n    var numToInt = (", "\n/**\n * @param {number[]} list\n * @return {number}\n */\n", "\n\n", "\n// eslint-disable-next-line no-param-reassign\nnumbers = numbers.map(", "\n"]}
{"task_id": "MBJSP/440", "prompt": "function findAdverbPosition(text) {\n/**\n * * Write a function to find all adverbs and their positions in a given sentence.\n */", "entry_point": "findAdverbPosition", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"clearly!! we can see the sky\";\nvar x0 = findAdverbPosition(arg00);\nvar v0 = [0, 7, \"clearly\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"seriously!! there are many roses\";\nvar x1 = findAdverbPosition(arg10);\nvar v1 = [0, 9, \"seriously\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"unfortunately!! sita is going to home\";\nvar x2 = findAdverbPosition(arg20);\nvar v2 = [0, 13, \"unfortunately\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find all adverbs and their positions in a given sentence.", "language": "javascript", "canonical_solution": "  const adverbs = [];\n  const words = text.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].match(/[aeiou]/gi)) {\n      adverbs.push(i);\n    }\n  }\n  return adverbs;\n}", "completion": ["\n\ntext.match(/\\b(?:adverb)\\b/g); // Find all adverbs in the text and create a group of text spans.\n\ntext.match(/\\b(?:adverb)\\b/g).map(", "\n/**\n * *\n * @param {string} text The text to analyze.\n * @param {", "\n\nvar _require = __webpack_require__(/*!./normalize/AdverbialPunctuationNormalizer */ \"./src/normalize/AdverbialPunctuationNormalizer.js\"),\n    AdverbialPunctuationNormalizer = _require.AdverbialPunctuationNormalizer;\n\nvar AdverbialPunctuationNormalizer_1 = AdverbialPunctuationNormalizer;\n\n/**\n * * Write a function to remove punctuation from a given sentence.\n */\n\nvar PunctuationNormalizer =\n/*#__PURE__*/\n", "\n},{}],100:[", "\n\nvar adverbPattern = /(\\w+)('\\w+|\"\\w+|)*/g;\n\n"]}
{"task_id": "MBJSP/441", "prompt": "function surfaceareaCube(l) {\n/**\n * * Write a function to find the surface area of a cube.\n */", "entry_point": "surfaceareaCube", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = surfaceareaCube(arg00);\nvar v0 = 150;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar x1 = surfaceareaCube(arg10);\nvar v1 = 54;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar x2 = surfaceareaCube(arg20);\nvar v2 = 600;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the surface area of a cube.", "language": "javascript", "canonical_solution": "  return 6 * Math.pow(l, 2);\n}", "completion": ["\n$(\"#surface-area-of-cube\").text(", "\n    if (l < 1.0) {\n        surface += 4.0 * l * l * l;\n    } else {\n        surface += 4.0 * l * l * l * l;\n    }\n//}\n\n//with_manipulated_target('cube', [1,0,0])\nsurface += cube(2.0).call(", "\n  return l ** 3;\n}\n\n```\n\n<a name=\"order-of-the-language\"></a>\n# Order of the language\n\nThe most common reason why programming languages are more useful than other programming languages is because they allow you to express your knowledge in a more concise and elegant way.\n\n```\n:program:program:program:\n:program:program:program:\n:program:program:program:\n:program:program:program:\n:program:program:program:\n:program:program:program:\n:program:program:program:\n```\n\nThis is a very common problem that programs can solve. If your code is long and difficult to read, consider using a language that is more concise but also easier to read.\n\n```\n:program:program:program:\n:program:program:program:\n:program:program:program:\n:program:program:program:\n:program:program:program:\n:program:program:program:\n:program:program:program:\n```\n\nThe key to understanding programming languages is to understand the basic notation. For example, you are asked to write the expression `100` in the language of [Go][]. The basic syntax is:\n\n* `:a`: Specifies the variable name `a`.\n* `:b`: Specifies the variable name `b`.\n* `:c`: Specifies the variable name `c`.\n* `:d`: Specifies the variable name `d`.\n* `:e`: Specifies the variable name `e`.\n* `:f`: Specifies the variable name `f`.\n* `:g`: Specifies the variable name `g`.\n\nThe basic syntax of Go is:\n\n```\n:a = 100\n:b =", "\nl = 6;\n\nvar s = cubeSurfaceArea(l);\n```\n\nWe need to check if the value of the input variable `l` is a positive number. If it is, then we will return the value of the function as shown in the next example.\n\n```python\ndef cubeSurfaceArea(l):\n    if l > 0:\n        return l * l * l\n    else:\n        raise ValueError('l must be positive')\n```\n\n**Exercise 5.10** Implement the function `cubicVolume` that takes a positive integer `l` as input and returns the volume of the cube with side length `l`.\n\n**Hint**: It is not necessary to import the `math` module. We can use the `math.pi` constant to calculate the surface area of a sphere. If we need to calculate the volume of a cube, we can use the `math.lcm` function to calculate the cube's side length.\n\n```python\ndef cubicVolume(l):\n    if l > 0:\n        return math.pi * l * l * l\n    else:\n        raise ValueError('l must be positive')\n```\n\n**Exercise 5.11** Implement the function `convexHull` that takes an input of points and returns the convex hull of the input points.\n\n**Hint**: The convex hull of a set of points is the smallest simple polygon that contains all the points. In this exercise, we will use the `grahamScan` ", "\nvar area = function(l) {\n    return (l * l * l);\n};\n\n/**\n * * Write a function to find the volume of a cube.\n */\nvar volume = "]}
{"task_id": "MBJSP/442", "prompt": "function positiveCount(nums) {\n/**\n * * Write a function to find the ration of positive numbers in an array of integers.\n */", "entry_point": "positiveCount", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8];\nvar x0 = positiveCount(arg00);\nvar v0 = 0.54;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8];\nvar x1 = positiveCount(arg10);\nvar v1 = 0.69;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 4, -6, -9, 11, -12, 14, -5, 17];\nvar x2 = positiveCount(arg20);\nvar v2 = 0.56;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the ration of positive numbers in an array of integers.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count / nums.length;\n}", "completion": ["\n$(document).ready(", "\n  writeRation(\"ratio_of_positive_numbers_in_an_array_of_integers\", function() {\n/**\n * * Write a function to find the product of the first k positive integers in an array of integers.\n */\n    return product(firstK(nums))\n  })\n/**\n * * Write a function to find the smallest positive number in an array of integers.\n */\n  writeRation(\"smallest_positive_number_in_an_array_of_integers\", function() {\n/**\n * * Write a function to find the sum of all positive numbers in an array of integers.\n */\n    return sum(nums)\n  })\n/**\n * * Write a function to find the product of the first k positive integers in an array of integers.\n */\n  writeRation(\"product_of_first_k_positive_numbers_in_an_array_of_integers\", function() {\n/**\n * * Write a function to find the largest integer in an array of integers.\n */\n    return max(nums)\n  })\n/**\n * * Write a function to find the smallest integer in an array of integers.\n */\n  writeRation(\"smallest_integer_in_an_array_of_integers\", function() {\n/**\n * * Write a function to find the largest integer in an array of integers.\n */\n    return min(nums)\n  })\n/**\n * * Write a function to find the largest square number in an array of integers.\n */\n  writeRation(\"largest_square_number_in_an_array_of_integers\", function() {\n/**\n * * Write a ", "\nnums.forEach(", "\n  var fn = function(total, nums) {\n/**\n * Write an algorithm to find the ratio of positive numbers in an array of integers.\n */\n    var pos = 0;\n    var neg = 0;\n    for (var i = 0; i < nums.length; i++) {\n      if (nums[i] > 0) {\n        pos++;\n      } else if (nums[i] < 0) {\n        neg++;\n      }\n    }\n    return (pos / total) + (neg / total);\n  };\n  fn.toString = function() {\n/**\n * Write a function to calculate the factorial of an integer.\n */\n    return Math.pow(nums.length, nums.length - 1) * nums.length;\n  };\n  fn.display = function() {\n/**\n * Write a function to print out the factorial of an integer.\n */\n    var fact = fn(nums.length, nums);\n    console.log(fact);\n  };\n}();\n\n/**\n * Write a function to calculate the factorial of an integer.\n */\n", "\n\n/**\n * * Write a function to compute the sum of a given array of integers.\n */\n\n/**\n * * Write a function to find the maximum of two integers.\n */\n\n/**\n * * Write a function to find the minimum of two integers.\n */\n\n/**\n * * Write a function to find the product of three integers.\n */\n\n/**\n * * Write a function to check whether three integers are coprime.\n */\n\n/**\n * * Write a function to check whether three integers are coprime or not.\n */\n\n/**\n * * Write a function to check whether three integers are coprime or not.\n */\n\n/**\n * * Write a function to find the minimum of three integers.\n */\n\n/**\n * * Write a function to find the maximum of three integers.\n */\n\n/**\n * * Write a function to find the sum of a given array of integers.\n */\n\n/**\n * * Write a function to find the maximum of three integers.\n */\n\n/**\n * * Write a function to find the minimum of three integers.\n */\n\n/**\n * * Write a function to find the product of four integers.\n */\n\n/**\n * * Write a function to check whether four integers are coprime.\n */\n\n/**\n * * Write a function to find the minimum of four integers.\n */\n\n/**\n * * Write a function to find the maximum of four integers.\n */\n\n/**\n * * Write a function to compute the sum of a given array of integers.\n */\n\n/**\n * * Write a function to find the maximum of four integers.\n */\n\n/**\n * * Write a function to find the minimum of four integers.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/443", "prompt": "function largestNeg(list1) {\n/**\n * * Write a JavaScript function to find the largest negative number from the given list.\n */", "entry_point": "largestNeg", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, -4, -6];\nvar x0 = largestNeg(arg00);\nvar v0 = -6;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, -8, -9];\nvar x1 = largestNeg(arg10);\nvar v1 = -9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, -1];\nvar x2 = largestNeg(arg20);\nvar v2 = -1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the largest negative number from the given list.", "language": "javascript", "canonical_solution": "  // code here\n  let negativeNumbers = [];\n  let arr1 = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      negativeNumbers.push(list1[i]);\n    }\n  }\n  let min = Math.min(...negativeNumbers);\n  for (let j = 0; j < negativeNumbers.length; j++) {\n    if (negativeNumbers[j] === min) {\n      arr1.push(min);\n    }\n  }\n  if (arr1.length === 1) {\n    return arr1[0];\n  }\n  if (arr1.length > 1) {\n    return arr1[arr1.length - 1];\n  }\n}", "completion": ["\n\nvar largest_negative_number_from_list = function largest_negative_number_from_list(list) {\n\nfor (var i = 0, length = list.length; i < length; i += 1) {\n\nvar currentElement = list[i];\n\nif (currentElement < 0) {\n\nreturn currentElement;\n\n}\n\n}\n\n};\n\nmodule.exports = largest_negative_number_from_list;\n},{}],141:[", "\nlist1.sort();\nconsole.log(list1[list1.length - 1]);\n// Result:\n// [0, 1, 2, 3, 4, -1, -5, -7, -8]\n```\n\n## \u6808\n\n### \u601d\u8def\n\n* \u5b9a\u4e49\u6808\u7ed3\u6784\n* \u63d2\u5165\u3001\u5220\u9664\u548c\u53d6\u503c\u4e3a\u5143\u7d20\u7684\u51fd\u6570\n* \u6808\u4e2d\u5143\u7d20\u7684\u6700\u5927\u503c\u7684\u8ba1\u7b97\n\n```js\n// \u5b9a\u4e49\u6808\u7ed3\u6784\nlet stack = [];\n\n// \u63d2\u5165\nstack.push(3);\nstack.push(5);\nstack.push(1);\n\n// \u5220\u9664\nstack.pop();\n\n// \u53d6\u503c\nconsole.log(stack.peek());\n// Result: [1, 5, 3]\n```\n\n## \u961f\u5217\n\n### \u601d\u8def\n\n* \u5b9a\u4e49\u961f\u5217\u7ed3\u6784\n* \u52a0\u5165\u3001\u5220\u9664\u548c\u53d6\u503c\u4e3a\u5143\u7d20\u7684\u51fd\u6570\n* \u961f\u5217\u4e2d\u5143\u7d20\u7684\u6700\u5927\u503c\u7684\u8ba1\u7b97\n\n```js\n// \u5b9a\u4e49\u961f\u5217\u7ed3\u6784\nlet queue = [];\n\n// \u52a0\u5165\nqueue.push(3);\nqueue.push(5);\nqueue.push(1);\n\n// \ufffd", "\n", "\n", "\n%extend _LargestNegativeNumber {\n  "]}
{"task_id": "MBJSP/444", "prompt": "function trimTuple(testlist, k) {\n/**\n * * Write a function to trim each tuple by k in the given tuple list.\n */", "entry_point": "trimTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]];\nvar arg01 = 2;\nvar x0 = trimTuple(arg00, arg01);\nvar v0 = \"[(2,), (9,), (2,), (2,)]\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]];\nvar arg11 = 1;\nvar x1 = trimTuple(arg10, arg11);\nvar v1 = \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]];\nvar arg21 = 1;\nvar x2 = trimTuple(arg20, arg21);\nvar v2 = \"[(8, 4), (8, 12), (1, 7), (6, 9)]\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to trim each tuple by k in the given tuple list.", "language": "javascript", "canonical_solution": "  const result = [];\n  for (let i = 0; i < testList.length; i++) {\n    const tuple = testList[i];\n    const newTuple = [];\n    for (let j = 0; j < tuple.length; j++) {\n      if (j < k) {\n        newTuple.push(tuple[j]);\n      }\n    }\n    result.push(newTuple);\n  }\n  return result;\n}", "completion": ["\n  return [tuple[0].strip() for tuple in testlist if len(tuple) == 2];\n}\n\n/**\n * * Write a function to trim each tuple by k in the given tuple list.\n */\n", "\n    ", "\n", "\n\n/**\n * * Return a function that takes a tuple of `n` elements as its argument and\n * * returns the first tuple of `n` elements after trimming it by k, or `None` if the\n * * given tuple does not contain the first tuple of k elements.\n */\n\n/**\n * * Write a function to get a copy of the first tuple of `n` elements from the given tuple list, or `None` if the\n * * given tuple list is empty.\n */\n\n/**\n * * Write a function that takes a tuple of `n` elements as its argument and\n * * returns the first tuple of `n` elements after trimming it by k, or `None` if the\n * * given tuple does not contain the first tuple of k elements.\n */\n\n/**\n * * Write a function to get a copy of the first tuple of `n` elements from the given tuple list, or\n * * * `None` if the given tuple list is empty.\n */\n\n/**\n * * Write a function to get a copy of the first tuple of `n` elements from the given tuple list, or\n * * * `None` if the given tuple list is empty.\n */\n\n/**\n * * Write a function to get a copy of the first tuple of `n` elements from the given tuple list, or\n * * * `None` if the given tuple list is empty.\n */\n\n/**\n * * Write a function to get a copy of the first tuple of `n` elements from the given tuple list, or\n * * * `None` if the given tuple list is empty.\n */\n\n/**\n * * Write a ", "\nwrite_trim_tuple(tpl, k) {\n    let res = [];\n    for (let i = 0; i < tpl.length; ++i) {\n        res.push(tpl[i].slice(0, k));\n    }\n    return res;\n}\n```\n\n</details>\n<details><summary>openjtalk</summary>\n\n```python\nfrom openjtalk import *\n\n# Initialize OpenJTalk\njtalk = OpenJTalk(\n    voice_name='xiaoyan',\n    sample_rate=16000,\n    frame_period=10,\n    num_mel_filters=40,\n    f_min=0.0,\n    f_max=8000,\n    fft_size=512,\n    mel_filter_bank_num=40,\n    dither=0.0,\n    preemphasize=True,\n    highpass=True,\n    voiced_cutoff=True,\n    )\n\n# set text\n# jtalk.set_text(text)\n# jtalk.set_text('\u6e29\u99a8\u63d0\u793a\uff1a\u6574\u6570\u8bcd\u8bed\uff0c\u5b57\u6bcd\u7b26\u53f7\u4e0e\u6570\u5b57\u7b26\u53f7\u5728\u4f7f\u7528\u65f6\u4e0d\u4e00\u5b9a\u662f\u5bf9\u5e94\u7684\uff0c\u53ef\u4f7f\u7528\u52a0\u7a7a\u683c\u5206\u5f00\u3002\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5927\u5199\u7684\u6570\u5b57\u5b57\u6bcd\u3002')\n# jtalk.set_text('\u6e29\u99a8\u63d0\u793a\uff1a\u6574\u6570\u8bcd\u8bed\ufffd"]}
{"task_id": "MBJSP/445", "prompt": "function indexMultiplication(testtup1, testtup2) {\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n */", "entry_point": "indexMultiplication", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [4, 5], [2, 9], [1, 10]];\nvar arg01 = [[6, 7], [3, 9], [1, 1], [7, 3]];\nvar x0 = indexMultiplication(arg00, arg01);\nvar v0 = [[6, 21], [12, 45], [2, 9], [7, 30]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [5, 6], [3, 10], [2, 11]];\nvar arg11 = [[7, 8], [4, 10], [2, 2], [8, 4]];\nvar x1 = indexMultiplication(arg10, arg11);\nvar v1 = [[14, 32], [20, 60], [6, 20], [16, 44]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 5], [6, 7], [4, 11], [3, 12]];\nvar arg21 = [[8, 9], [5, 11], [3, 3], [9, 5]];\nvar x2 = indexMultiplication(arg20, arg21);\nvar v2 = [[24, 45], [30, 77], [12, 33], [27, 60]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "language": "javascript", "canonical_solution": "  let result = [];\n  for (let i = 0; i < testTup1.length; i++) {\n    let inner = [];\n    for (let j = 0; j < testTup1[i].length; j++) {\n      inner.push(testTup1[i][j] * testTup2[i][j]);\n    }\n    result.push(inner);\n  }\n  return result;\n}", "completion": ["\n    ", "\n};\n/**\n * * Write a ", "\nfunc(testtup1 tup, testtup2 tup) (tup, tup) {\n\treturn (testtup1 * testtup2), testtup1\n}\n```\n\n### `*`\n\n<!--\nWhen you need to perform index-wise multiplication on two tuples, use the `*` operator:\n\n```\ntup1 := (1, 2, 3)\ntup2 := (4, 5, 6)\ntup1 * tup2\n// Returns (1, 4, 9)\n```\n-->\n\n### `@`\n\n<!--\nWhen you need to perform index-wise subtraction of tuple elements in the given two tuples, use the `@` operator:\n\n```\ntup1 := (1, 2, 3)\ntup2 := (4, 5, 6)\ntup1 @ tup2\n// Returns (0, 1, 2)\n```\n-->\n\n### `&`\n\n<!--\nWhen you need to perform index-wise bitwise AND on two tuples, use the `&` operator:\n\n```\ntup1 := (1, 2, 3)\ntup2 := (4, 5, 6)\ntup1 & tup2\n// Returns (1, 4, 0)\n```\n-->\n\n### `%`\n\n<!--\nWhen you need to perform index-wise remainder (modulus) operation on two tuples, use the `%` operator:\n\n```\ntup1 := (1, 2, 3)\ntup2 := (4, 5, 6)\ntup1 % tup2\n// Returns (1, 1, 0)\n```\n-->\n\n### `^`\n", "\n@FunctionalInterface\npublic interface Multiplication {\n\n    void apply(Object o1, Object o2);\n}\n\n}\n/**\n * * A specialization of {@link Multiplication} to product all elements of a given tuple.\n */\nclass Product implements Multiplication {\n    public void apply(Object o1, Object o2) {\n        System.out.println(o1.toString() + \" x \" + o2.toString());\n    }\n}\n/**\n * * A specialization of {@link Multiplication} to multiply all elements of a given tuple.\n */\nclass Multiply implements Multiplication {\n    public void apply(Object o1, Object o2) {\n        System.out.println(o1.toString() + \" x \" + o2.toString());\n    }\n}\n/**\n * * A specialization of {@link Multiplication} to multiply all elements of a given tuple.\n */\nclass MultiplyBy implements Multiplication {\n    public void apply(Object o1, Object o2) {\n        System.out.println(o1.toString() + \" x \" + o2.toString());\n    }\n}\n/**\n * * A specialization of {@link Multiplication} to multiply all elements of a given tuple.\n */\nclass MultiplyByOne implements Multiplication {\n    public void apply(Object o1, Object o2) {\n        System.out.println(o1.toString() + \" x \" + o2.toString());\n    }\n}\n/**\n * * A specialization of {@link Multiplication} to multiply all elements of a given tuple.\n */\nclass DivideBy implements Multiplication {\n    public void apply(Object o1,", "\n\nreturn x => x * y;\n};\n```\n\nThis is where the function signature is used to create the function instance. We do this by creating the function instance in the body of the function. The function instance is a Scala object of type `Function0` and has no constructor.\n\n```scala\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n */\ndef multiplicate(x: Int, y: Int): Int = x * y;\n```\n\nWe can now call the function using the call() method.\n\n```scala\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n */\nval result = multiplicate(x, y);\n```\n\nThis returns a `Int` which we can then use to get the result. In this case, the `Int` has been returned.\n\n```scala\nresult\n```\n\nThis is how we would write the function in a non-functional way.\n\n```scala\n/**\n * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n */\ndef multiplicate[T](x: T, y: T): T = x * y;\n```\n\nWe could write this function in a functional way by applying the `multiplication` function to the arguments of the function. We would then use the returned `Int` to get the result.\n\n```scala\n/**\n * * Write a "]}
{"task_id": "MBJSP/446", "prompt": "function countOccurrence(tup, lst) {\n/**\n * * Write a JavaScript function to count the occurence of all elements of list in a tuple.\n */", "entry_point": "countOccurrence", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"a\", \"a\", \"c\", \"b\", \"d\"];\nvar arg01 = [\"a\", \"b\"];\nvar x0 = countOccurrence(arg00, arg01);\nvar v0 = 3;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 1, 4, 6, 7, 1, 4];\nvar arg11 = [1, 4, 7];\nvar x1 = countOccurrence(arg10, arg11);\nvar v1 = 6;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6];\nvar arg21 = [1, 2];\nvar x2 = countOccurrence(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the occurence of all elements of list in a tuple.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < tup.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      if (tup[i] === lst[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}", "completion": ["\n    return tup.reduce(", "\n    var tup_lst = function(tup, lst) {\n        return tup.join(\",\") + \"=\" + lst.join(\",\");\n    }\n    yield_to(yield, ytups, tup_lst);\n\n    if (is_in(tup, ytups)) {\n        yield_to(yield, ytups, tup_lst);\n    } else {\n        var cnt = ytups.filter(", "\n\n", "\n", "\nvar write_count_of = function (func_name, list, tuple) {\n    var js_func = function () {\n        return list.reduce("]}
{"task_id": "MBJSP/447", "prompt": "function cubeNums(nums) {\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function.\n */", "entry_point": "cubeNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x0 = cubeNums(arg00);\nvar v0 = [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [10, 20, 30];\nvar x1 = cubeNums(arg10);\nvar v1 = [1000, 8000, 27000];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [12, 15];\nvar x2 = cubeNums(arg20);\nvar v2 = [1728, 3375];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find cubes of individual elements in a list using lambda function.", "language": "javascript", "canonical_solution": "  return nums.map(num => num ** 3);\n}", "completion": ["\n", "\n", "\n\n/**\n * * Write a function to find cubes of individual elements in a list using another lambda function.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using another another lambda function.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function, then another lambda function.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function, then another another lambda function.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function, then another another another lambda function.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function, then another lambda function, then another lambda function, then another lambda function, and so on.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function, then another lambda function, then another another lambda function, then another another another lambda function, and so on.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function, then another lambda function, then another another lambda function, then another another another lambda function, and so on.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function, then another lambda function, then another another lambda function, then another another another lambda function, and so on.\n */\n\n/**\n * * Write a function to find cubes of individual elements in a list using lambda function, then another lambda function, then another another lambda function, then another another another lambda ", "\n", "\n"]}
{"task_id": "MBJSP/448", "prompt": "function calSum(n) {\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */", "entry_point": "calSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = calSum(arg00);\nvar v0 = 49;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = calSum(arg10);\nvar v1 = 66;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 11;\nvar x2 = calSum(arg20);\nvar v2 = 88;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the sum of perrin numbers.", "language": "javascript", "canonical_solution": "\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0) {\n\t\treturn 3\n\t}\n\tif (n == 1) {\n\t\treturn 3\n\t}\n\tif (n == 2) {\n\t\treturn 5\n\t}\n\tsum = 5\n\twhile (n > 2) {\n\t\td = a + b\n\t\tsum = sum + d\n\t\ta = b\n\t\tb = c\n\t\tc = d\n\t\tn = n - 1\n\t}\n\treturn sum\n}", "completion": ["\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a function to calculate the sum of perrin numbers.\n */\n\n/**\n * * Write a ", "\n\nvar perrin = fn;\n\nvar perrin2 = fn2;\n\nvar perrin3 = fn3;\n\nvar perrin4 = fn4;\n\nvar perrin5 = fn5;\n\nvar perrin6 = fn6;\n\nvar perrin7 = fn7;\n\nvar perrin8 = fn8;\n\nvar perrin9 = fn9;\n\n/**\n * * Write a ", "\nconsole.log(sum(n));\n/**\n * * Write a function to calculate the maximum of perrin numbers.\n */\nconsole.log(max(n));\n/**\n * * Write a function to calculate the average of perrin numbers.\n */\nconsole.log(average(n));\n/**\n * * Write a function to calculate the smallest of perrin numbers.\n */\nconsole.log(min(n));\n/**\n * * Write a function to calculate the product of perrin numbers.\n */\nconsole.log(product(n));\n/**\n * * Write a function to calculate the factorial of perrin numbers.\n */\nconsole.log(factorial(n));\n/**\n * * Write a function to calculate the factorial of perrin numbers.\n */\nconsole.log(factorial(n));\n/**\n * * Write a function to calculate the prime factorization of perrin numbers.\n */\nconsole.log(prime_factorization(n));\n/**\n * * Write a function to calculate the square root of perrin numbers.\n */\nconsole.log(square_root(n));\n/**\n * * Write a function to calculate the cubic root of perrin numbers.\n */\nconsole.log(cubic_root(n));\n/**\n * * Write a function to calculate the euler's totient function of perrin numbers.\n */\nconsole.log(euler_totient(n));\n/**\n * * Write a function to calculate the euler's totient function of perrin numbers.\n */\nconsole.log(euler_totient(n));\n/**\n * * Write a function to calculate the euler's totient ", "\n", "\n    const sum = (nums: number[]) => nums.reduce((sum, num) => sum + num, 0);\n/**\n * * Write a function to calculate the min value of perrin numbers.\n */\n    const min = (nums: number[]) => nums.reduce((min, num) => min < num? min : num, Infinity);\n/**\n * * Write a function to calculate the max value of perrin numbers.\n */\n    const max = (nums: number[]) => nums.reduce((max, num) => max > num? max : num, -Infinity);\n/**\n * * Write a "]}
{"task_id": "MBJSP/449", "prompt": "function checkTriangle(x1, y1, x2, y2, x3, y3) {\n/**\n * * Write a JavaScript function to check whether the triangle is valid or not if 3 points are given.\n */", "entry_point": "checkTriangle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar arg03 = 5;\nvar arg04 = 4;\nvar arg05 = 6;\nvar x0 = checkTriangle(arg00, arg01, arg02, arg03, arg04, arg05);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 1;\nvar arg12 = 1;\nvar arg13 = 4;\nvar arg14 = 1;\nvar arg15 = 5;\nvar x1 = checkTriangle(arg10, arg11, arg12, arg13, arg14, arg15);\nvar v1 = \"No\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 1;\nvar arg21 = 1;\nvar arg22 = 1;\nvar arg23 = 1;\nvar arg24 = 1;\nvar arg25 = 1;\nvar x2 = checkTriangle(arg20, arg21, arg22, arg23, arg24, arg25);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the triangle is valid or not if 3 points are given.", "language": "javascript", "canonical_solution": "  if (x1 === x2 && y1 === y2) {\n    return \"No\";\n  } else if (x1 === x3 && y1 === y3) {\n    return \"No\";\n  } else if (x2 === x3 && y2 === y3) {\n    return \"No\";\n  } else if (x1 === x2 || x1 === x3 || x2 === x3) {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}", "completion": ["\n\n  var triangle = {\n    valid: ", "\n        if(x3 == x1 || x3 == x2 || x1 == x2) {\n            alert(x1 + \" and \" + x2 + \" are the same point. Please select another point.\");\n        } else if(y3 == y1 || y3 == y2 || y1 == y2) {\n            alert(y1 + \" and \" + y2 + \" are the same point. Please select another point.\");\n        } else {\n            var x1_2 = x1 * x1;\n            var x2_2 = x2 * x2;\n            var x3_2 = x3 * x3;\n            var y1_2 = y1 * y1;\n            var y2_2 = y2 * y2;\n            var y3_2 = y3 * y3;\n            var x1y1 = x1 * y1;\n            var x2y2 = x2 * y2;\n            var x3y3 = x3 * y3;\n            var sum = x1_2 + x2_2 + x3_2 + y1_2 + y2_2 + y3_2;\n            var c = sum - (x1y1 + x2y2 + x3y3);\n            if(c > 0) {\n                alert(\"The triangle is valid. \");\n            } else {\n                alert(\"The triangle is invalid. \");\n            }\n        }\n    }\n}\n\n", "\n        if (x1 == x2 && y1 == y2 && x3 == x1 && y3 == y1) {\n            alert(\"The triangle is not valid.\");\n        } else {\n            alert(\"The triangle is valid.\");\n        }\n/**\n * * Write a JavaScript ", "\nif (x1 === x2 && x2 === x3 && x3 === x1 && y1 === y2 && y2 === y3 && y3 === y1) {\n/**\n * * Make a boolean variable `is_valid` equal to `true` if the triangle is valid.\n */\nis_valid = true;\n/**\n * * Return an array of strings that represents the triangle and its coordinates.\n */\n} else {\n/**\n * * Make a boolean variable `is_valid` equal to `false` if the triangle is invalid.\n */\nis_valid = false;\n/**\n * * Return an array of strings that represents the triangle and its coordinates.\n */\n}\nreturn is_valid;\n});<|endoftext|>", "\nvalidateTriangle(a, b, c) {\n    // You could use the below `if` statement.\n    // if (a > b && a > c) {\n    //     return false;\n    // } else if (b > a && b > c) {\n    //     return false;\n    // } else if (c > a && c > b) {\n    //     return false;\n    // } else {\n    //     return true;\n    // }\n\n    // You could use the below `for` loop.\n    for (let x = a, y = b; x <= c; x++) {\n        y++;\n        if (y > c) {\n            y = 0;\n        }\n    }\n\n    // You could use the below `while` loop.\n    while (c > b) {\n        c--;\n    }\n\n    // You could use the below `do-while` loop.\n    do {\n        c--;\n    } while (c > b);\n\n    // You could use the below `switch` statement.\n    switch (c) {\n        case 0:\n            return false;\n        case 1:\n            return b < a;\n        case 2:\n            return b < c;\n        default:\n            return true;\n    }\n}\n```\n\n\u6709\u4e86\u5b83\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6309\u4e0b\u56de\u8f66\u952e\u4e4b\u540e\uff0c\u4f7f\u7528 `eval` \u8bed\u53e5\u6765\u8ba1\u7b97\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u4e86\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\ufffd"]}
{"task_id": "MBJSP/450", "prompt": "function extractString(str, l) {\n/**\n * * Write a function to extract specified size of strings from a give list of string values.\n */", "entry_point": "extractString", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg01 = 8;\nvar x0 = extractString(arg00, arg01);\nvar v0 = [\"practice\", \"solution\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg11 = 6;\nvar x1 = extractString(arg10, arg11);\nvar v1 = [\"Python\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"];\nvar arg21 = 9;\nvar x2 = extractString(arg20, arg21);\nvar v2 = [\"exercises\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract specified size of strings from a give list of string values.", "language": "javascript", "canonical_solution": "    let result = [];\n    for (let i = 0; i < str.length; i++) {\n      if (str[i].length === l) {\n        result.push(str[i]);\n      }\n    }\n    return result;\n  }", "completion": ["\n\t\tstr.split(l).forEach(", "\n    const fn: string = `", "\nvar writeFunc = function writeFunc(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; i++) {\n    len += str.charCodeAt(i).toString().length;\n  }\n\n  var bytes = new Buffer(len);\n  var offset = 0;\n  for (var i = 0; i < str.length; i++) {\n    bytes.writeUInt8(str.charCodeAt(i) & 0xff, offset);\n    offset += 1;\n  }\n  return bytes;\n};\n\n// * Extract a string from a given list of string values.\nvar extract = function extract(str) {\n  return str;\n};\n\n/**\n * * Extract a string from a given list of string values.\n */\nvar extractArray = function extractArray(str) {\n  return Array.prototype.slice.call(str);\n};\n\n// * Extract a number from a given list of string values.\nvar extractNumber = function extractNumber(str) {\n  var number = 0;\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i) & 0xff;\n    number = number * 256 + code;\n  }\n  return number;\n};\n\n// * Extract a date from a given list of string values.\nvar extractDate = function extractDate(str) {\n  var year = extractNumber(str);\n  var month = extractNumber(str);\n  var day = extractNumber(str);\n  return new Date(year, month - 1, day);\n};\n\n// * Extract a time from a given list of string values.\nvar extractTime = ", "\nreturn ", "\n"]}
{"task_id": "MBJSP/451", "prompt": "function removeWhitespaces(text1) {\n/**\n * * Write a function to remove all whitespaces from the given string using regex.\n */", "entry_point": "removeWhitespaces", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \" Google    Flutter \";\nvar x0 = removeWhitespaces(arg00);\nvar v0 = \"GoogleFlutter\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \" Google    Dart \";\nvar x1 = removeWhitespaces(arg10);\nvar v1 = \"GoogleDart\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \" iOS    Swift \";\nvar x2 = removeWhitespaces(arg20);\nvar v2 = \"iOSSwift\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove all whitespaces from the given string using regex.", "language": "javascript", "canonical_solution": "  return text1.replace(/\\s/g, \"\");\n}", "completion": ["\n", "\n", "\n\nvar __remove_whitespaces_regex = /\\s/;\n\nvar __remove_whitespaces_replace_fn = (\n/**\n * * Removes all whitespaces from the given string using regex.\n */\n\n", "\nreturn \"return \" + text1.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\") + \";\";\n};\n\n}\n\n// eslint-disable-next-line no-unused-vars\n/**\n * @param {string} text1\n * @returns {string}\n */\n", "\n\nreturn '  "]}
{"task_id": "MBJSP/453", "prompt": "function sumoffactors(n) {\n/**\n * * Write a JavaScript function to find the sum of even factors of a number.\n */", "entry_point": "sumoffactors", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 18;\nvar x0 = sumoffactors(arg00);\nvar v0 = 26;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 30;\nvar x1 = sumoffactors(arg10);\nvar v1 = 48;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = sumoffactors(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of even factors of a number.", "language": "javascript", "canonical_solution": "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}", "completion": ["\n};\n\n/**\n * *\n * @type {Number}\n */\nn = 1;\n<|endoftext|>", "\n\nint sumEvenFactors(int n) {\n    int sum = 0;\n    for (int i = 1; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n```\n\n**Test**:\n\n```bash\n$ python3 test.py\n=== Input ===\nn = 24\n=== Output ===\nsumEvenFactors(n) = 12\n=== Test ===\nFind the sum of even factors of 24.\n```\n\n## 3. \u5224\u65ad\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u56de\u6587\u5b57\u7b26\u4e32\n\n**\u7b97\u6cd5\u601d\u60f3**:\n\n1. \u6309\u7167\u5b57\u5178\u5e8f\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u4f9d\u6b21\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002\n2. \u5982\u679c\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e2a\u6570\u4e3a\u5947\u6570\uff0c\u8bf4\u660e\u5b57\u7b26\u4e32\u662f\u56de\u6587\u5b57\u7b26\u4e32\u3002\n3. \u5982\u679c\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e2a\u6570\u4e3a\u5076\u6570\uff0c\u8bf4\u660e\u5b57\u7b26\u4e32\u4e2d\u6709\u91cd\u590d\u5b57\u7b26\u3002\n\n**\u4ee3\u7801**:\n\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef is_palindrome(str):\n    str_list = list(", "\n    if (n % 2 == 0) {\n        console.log(n + \" is divisible by 2\");\n    }\n/**\n * * Write a JavaScript function to find the sum of odd factors of a number.\n */\n    if (n % 2!= 0) {\n        console.log(n + \" is not divisible by 2\");\n    }\n};\n// For all odd numbers:\n// * Write a JavaScript ", "\n", "\n"]}
{"task_id": "MBJSP/454", "prompt": "function textMatchWordz(text) {\n/**\n * * Write a function that matches a word containing 'z'.\n */", "entry_point": "textMatchWordz", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"pythonz.\";\nvar x0 = textMatchWordz(arg00);\nvar v0 = \"Found a match!\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"xyz.\";\nvar x1 = textMatchWordz(arg10);\nvar v1 = \"Found a match!\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"  lang  .\";\nvar x2 = textMatchWordz(arg20);\nvar v2 = \"Not matched!\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function that matches a word containing 'z'.", "language": "javascript", "canonical_solution": "  var regex = /z/g;\n  var match = text.match(regex);\n  if (match) {\n    return \"Found a match!\";\n  } else {\n    return \"Not matched!\";\n  }\n}", "completion": ["\n", "\n", "\n", "\n// This function is optimized for speed.  It is guaranteed to never\n// match a word containing 'z'.\n", "\n"]}
{"task_id": "MBJSP/455", "prompt": "function checkMonthnumbNumber(monthnum2) {\n/**\n * * Write a function to check whether the given month number contains 31 days or not.\n */", "entry_point": "checkMonthnumbNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = checkMonthnumbNumber(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = checkMonthnumbNumber(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 6;\nvar x2 = checkMonthnumbNumber(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check whether the given month number contains 31 days or not.", "language": "javascript", "canonical_solution": "    return (new Date(2019, monthnum2, 0)).getDate() === 31;\n}", "completion": ["\n\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\n\n/**\n * * Write a function to check whether the given month number contains 29 days or not.\n */\n\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\n\n/**\n * * Write a function to check whether the given month number contains a leap month or not.\n */\n\n/**\n * * Write a function to check whether the given month number contains a leap month or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a function to check whether the given year number contains a leap year or not.\n */\n\n/**\n * * Write a ", "\nsetMonth(monthnum2) {\n  return monthnum2 === 31? false : true;\n}\n/**\n * * Write a function to check whether the given year is a leap year or not.\n */\nsetYear(year) {\n  return year % 4 === 0 && year % 100!== 0 || year % 400 === 0;\n}\n/**\n * * Write a function to check whether the given date is a leap day or not.\n */\nsetDay(day) {\n  return day === 31 || day === 30 || day === 29? false : true;\n}\n/**\n * * Write a function to check whether the given date is a weekend or not.\n */\nsetWeekend(day) {\n  return day === 7 || day === 0? false : true;\n}\n/**\n * * Write a function to check whether the given date is a weekend or not.\n */\nsetWeekday(day) {\n  return day === 1 || day === 2 || day === 3 || day === 4 || day === 5 || day === 6? false : true;\n}\n/**\n * * Write a function to check whether the given date is a weekend or not.\n */\nsetDayOfWeek(day) {\n  return day === 1 || day === 2 || day === 3 || day === 4 || day === 5 || day === 6? false : true;\n}\n/**\n * * Write a ", "\nlet monthnum2 = monthnum2;\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\nlet monthnum1 = monthnum1;\n/**\n * * Write a function to check whether the given month number contains 29 days or not.\n */\nlet monthnum3 = monthnum3;\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\nlet monthnum4 = monthnum4;\n/**\n * * Write a function to check whether the given month number contains 31 days or not.\n */\nlet monthnum5 = monthnum5;\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\nlet monthnum6 = monthnum6;\n/**\n * * Write a function to check whether the given month number contains 29 days or not.\n */\nlet monthnum7 = monthnum7;\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\nlet monthnum8 = monthnum8;\n/**\n * * Write a function to check whether the given month number contains 31 days or not.\n */\nlet monthnum9 = monthnum9;\n/**\n * * Write a function to check whether the given month number contains 30 days or not.\n */\nlet monthnum10 = monthnum10;\n/**\n * * Write a function to check whether the given month number contains 29 days or not.\n */\nlet monthnum11 = monthnum11;\n/**\n * * Write a function to check whether the given month number contains 28 days or not.\n */\nlet monthnum12 = monthnum12;\n/**\n * * Write a ", "\n\n", "\n\n"]}
{"task_id": "MBJSP/456", "prompt": "function reverseStringList(stringlist) {\n/**\n * * Write a function to reverse strings in a given list of string values.\n */", "entry_point": "reverseStringList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"];\nvar x0 = reverseStringList(arg00);\nvar v0 = [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"john\", \"amal\", \"joel\", \"george\"];\nvar x1 = reverseStringList(arg10);\nvar v1 = [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"jack\", \"john\", \"mary\"];\nvar x2 = reverseStringList(arg20);\nvar v2 = [\"kcaj\", \"nhoj\", \"yram\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to reverse strings in a given list of string values.", "language": "javascript", "canonical_solution": "  return stringlist.map(string => string.split(\"\").reverse().join(\"\"));\n}", "completion": ["\n\nlet reverseStrings = function(stringlist) {\n    let last = null;\n    for (let i = 0; i < stringlist.length; i++) {\n        let current = stringlist[i];\n        if (last!= null) {\n            stringlist[i] = last + current;\n        }\n        last = current;\n    }\n    return stringlist;\n}\n```\n\n\u4f60\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2astringlist\uff0c\u53ea\u6709\u4e24\u4e2a\u5143\u7d20\u3002\u901a\u8fc7\u4e86\u89e3\u4e00\u4e0b`reverseStrings`\u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e00\u4e2areverse\u7684\u7248\u672c\uff0c\u7136\u540e\u518d\u5c06\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7ffb\u8f6c\u3002\n\n### \u5b9e\u73b0\n\n\u5c06\u4e0a\u9762\u7684\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u90fd\u7ffb\u8f6c\uff0c\u7136\u540e\u5c06\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u7684\u7ffb\u8f6c\uff0c\u518d\u5c06\u7ed3\u679c\u62fc\u63a5\u8d77\u6765\u3002\n\n```js\nlet reverseStrings = ", "\nreverse(str) {\nreturn str.split('').reverse().join('');\n}\n}\n/**\n * * Write a ", "\n\n/**\n * * Given a list of strings, return a new list with the strings in reverse order.\n */\n\n/**\n * * Given a string, return the reverse of the string, taken from the left as 0 through the length of the string.\n */\n\n/**\n * * Given a string, return the reverse of the string, taken from the right as the length of the string.\n */\n\n/**\n * * Given a string, return the reversed of the string, taken from the left as 1 through the length of the string.\n */\n\n/**\n * * Given a string, return the reversed of the string, taken from the right as 0 through the length of the string.\n */\n\n/**\n * * Write a function to determine if all the letters in the string are unique.\n */\n\n/**\n * * Write a function to find the largest substring of a given string that contains all of the letters of a given list.\n */\n\n/**\n * * Write a function to find the largest substrings of a given string that contain all of the letters of the given list.\n */\n\n/**\n * * Write a function to find the largest substrings of a given string that contain all of the letters of the given list.\n */\n\n/**\n * * Given a string, write a function to determine if the first and last characters of the string match each other.\n */\n\n/**\n * * Write a function to find the longest string that can be formed by inserting a character between two of its substrings.\n */\n\n/**\n * * Given a string, write a function to find the longest string that can be formed by inserting a character between two of its substrings.\n */\n\n/**\n * * Write a ", "\n", "\n\n/**\n * * Write a function to delete all duplicate characters in a given string value.\n */\n\n/**\n * * Write a function to find the length of a given string value.\n */\n\n/**\n * * Write a function to generate the nth Fibonacci number.\n */\n\n/**\n * * Write a function to create a new array with the values of a given array.\n */\n\n/**\n * * Write a function to print a given list of string values.\n */\n\n/**\n * * Write a function to print a given string value.\n */\n\n/**\n * * Write a function to create a new array with the values of a given array.\n */\n\n/**\n * * Write a function to count the number of times a given substring appears in a given string value.\n */\n\n/**\n * * Write a function to check if a given string value is palindrome or not.\n */\n\n/**\n * * Write a function to create a new string value with all letters in a given string value uppercase.\n */\n\n/**\n * * Write a function to create a new string value with all letters in a given string value uppercase.\n */\n\n/**\n * * Write a function to check if a given string value is a substring of another given string value.\n */\n\n/**\n * * Write a function to count the number of substrings of a given string value containing a specified set of characters.\n */\n\n/**\n * * Write a function to count the number of substrings of a given string value containing the same set of characters as the given substring.\n */\n\n/**\n * * Write a function to replace all the occurrences of a given substring in a given string value with a specified new substring value.\n */\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/457", "prompt": "function findMin(lst) {\n/**\n * * Write a JavaScript function to find the sublist having minimum length.\n */", "entry_point": "findMin", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1], [1, 2], [1, 2, 3]];\nvar x0 = findMin(arg00);\nvar v0 = [1];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 1], [1, 1, 1], [1, 2, 7, 8]];\nvar x1 = findMin(arg10);\nvar v1 = [1, 1];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]];\nvar x2 = findMin(arg20);\nvar v2 = [\"x\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sublist having minimum length.", "language": "javascript", "canonical_solution": "  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length < min) {\n      min = lst[i].length;\n      minIndex = i;\n    }\n  }\n  return lst[minIndex];\n}", "completion": ["\n\n", "\n\nif ( lst[0]!== lst[lst.length - 1] ) {\n  var j;\n  // We can use sort() function to sort a list.\n  lst.sort();\n  for ( j = 0; j < lst.length - 1; j++ ) {\n    if ( lst[j + 1] - lst[j] === 1 ) {\n      break;\n    }\n  }\n  console.log(`This is the minimum length sublist: ${lst[j]} - ${lst[j + 1]}`);\n} else {\n  console.log(`There is no minimum length sublist, so this is the list: ${lst}`);\n}\n\n/**\n * * Write a JavaScript function to find the sublist having maximum length.\n */\n\nif ( lst[0]!== lst[lst.length - 1] ) {\n  var j;\n  // We can use sort() function to sort a list.\n  lst.sort();\n  for ( j = 0; j < lst.length - 1; j++ ) {\n    if ( lst[j + 1] - lst[j] === -1 ) {\n      break;\n    }\n  }\n  console.log(`This is the maximum length sublist: ${lst[j]} - ${lst[j + 1]}`);\n} else {\n  console.log(`There is no maximum length sublist, so this is the list: ${lst}`);\n}\n\n/**\n * * Write a JavaScript ", "\na = ", "\n\nif (typeof Array.prototype.findIndex === 'undefined') {\nArray.prototype.findIndex = function (func) {\n    var i;\n    for (i = 0; i < this.length; i++) {\n        if (func(this[i])) {\n            return i;\n        }\n    }\n    return -1;\n};\n}\n\nvar _ = require('underscore');\nvar $ = require('jquery');\nvar request = require('request');\nvar baseUrl = 'http://sublist3r.com/';\nvar userAgent ='sublist3r/' + require('os').platform() +'' + require('os').release();\n\n/**\n * * Write a JavaScript function to find the sublist having minimum length.\n */\n\nif (typeof Array.prototype.findIndex === 'undefined') {\nArray.prototype.findIndex = function (func) {\n    var i;\n    for (i = 0; i < this.length; i++) {\n        if (func(this[i])) {\n            return i;\n        }\n    }\n    return -1;\n};\n}\n\n/**\n * * Write a JavaScript function to find the sublist having minimum length.\n */\n\nif (typeof Array.prototype.findIndex === 'undefined') {\nArray.prototype.findIndex = function (func) {\n    var i;\n    for (i = 0; i < this.length; i++) {\n        if (func(this[i])) {\n            return i;\n        }\n    }\n    return -1;\n};\n}\n\n/**\n * * Write a JavaScript ", "\nconst writeMinLengthFunction = (functionToWrite) => {\n  functionToWrite.write(`"]}
{"task_id": "MBJSP/458", "prompt": "function rectangleArea(l, b) {\n/**\n * * Write a function to find the area of a rectangle.\n */", "entry_point": "rectangleArea", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 20;\nvar x0 = rectangleArea(arg00, arg01);\nvar v0 = 200;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 5;\nvar x1 = rectangleArea(arg10, arg11);\nvar v1 = 50;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = 2;\nvar x2 = rectangleArea(arg20, arg21);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the area of a rectangle.", "language": "javascript", "canonical_solution": "  return l * b;\n}", "completion": ["\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\nrect_area = function (l, b) {\n  // Add the width.\n  var width = l;\n\n  // Add the height.\n  var height = b;\n\n  // Add the width and height.\n  return width * height;\n};\n\n/**\n * * Write a function to find the area of a rectangle.\n */\nrect_area_const = function (width, height) {\n  return width * height;\n};\n\n/**\n * * Write a function to find the area of a rectangle.\n */\nrect_area_const2 = function (width, height) {\n  return width * height;\n};\n\n/**\n * * Write a function to find the area of a rectangle.\n */\nrect_area_const3 = function (width, height) {\n  return width * height;\n};\n\n/**\n * * Write a function to find the area of a triangle.\n */\ntriangle_area = function (l, b) {\n  // Add the width.\n  var width = l;\n\n  // Add the height.\n  var height = b;\n\n  // Add the width and height.\n  return width * height / 2;\n};\n\n/**\n * * Write a function to find the area of a triangle.\n */\ntriangle_area_const = function (width, height) {\n  return width * height / 2;\n};\n\n/**\n * * Write a function to find the area of a triangle.\n */\ntriangle_area_const2 = function (width, height) {\n  return width * height / 2;\n};\n\n/**\n * * Write a function to find the area of a triangle.\n */\ntriangle_area_const3 = ", "\nconsole.log('The area of a rectangle is'+ this.area());\n/**\n * * Write a function to find the perimeter of a rectangle.\n */\nconsole.log('The perimeter of a rectangle is'+ this.perimeter());\n/**\n * Write a function to find the length of one side of a triangle.\n */\nconsole.log('The length of one side of a triangle is'+ this.length());\n/**\n * Write a function to find the area of a triangle.\n */\nconsole.log('The area of a triangle is'+ this.area());\n/**\n * Write a function to find the perimeter of a triangle.\n */\nconsole.log('The perimeter of a triangle is'+ this.perimeter());\n/**\n * Write a function to find the length of one side of a right triangle.\n */\nconsole.log('The length of one side of a right triangle is'+ this.length());\n/**\n * Write a function to find the area of a right triangle.\n */\nconsole.log('The area of a right triangle is'+ this.area());\n/**\n * Write a function to find the perimeter of a right triangle.\n */\nconsole.log('The perimeter of a right triangle is'+ this.perimeter());\n/**\n * Write a function to find the length of one side of a pentagon.\n */\nconsole.log('The length of one side of a pentagon is'+ this.length());\n/**\n * Write a function to find the area of a pentagon.\n */\nconsole.log('The area of a pentagon is'+ this.area());\n/**\n * Write a function to find the perimeter of a pentagon.\n */\nconsole.log('The perimeter of a pentagon is'+ this.perimeter());\n/**\n * Write a ", "\n    l = getPadding(l);\n/**\n * * Insert all rectangles in a list into another list.\n */\n    for (b = 0; b < rects.length; b++) {\n/**\n * * Write a function to check whether two rectangles are overlapped.\n */\n        r = rects[b];\n        if (l.x < r.x + r.width && l.x + l.width > r.x && l.y < r.y + r.height && l.y + l.height > r.y) {\n/**\n * * Write a function to find the area of a rectangle.\n */\n            area += Math.abs(r.x - l.x) * Math.abs(r.y - l.y);\n        }\n    }\n/**\n * * Write a function to find the area of a rectangle.\n */\n    return area;\n}\n/**\n * * Write a function to find the largest rectangle.\n */\n", "\nconst area_of_a_rectangle = (l, b) => {\n\tconst width = l * 2;\n\tconst height = b * 2;\n\treturn width * height;\n};\n\n/**\n * * Write a function to find the area of a triangle.\n */\nconst area_of_a_triangle = (base, height) => {\n\tconst base_height = base * height;\n\treturn base_height / 2;\n};\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/459", "prompt": "function removeUppercase(str1) {\n/**\n * * Write a function to remove uppercase substrings from a given string by using regex.\n */", "entry_point": "removeUppercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"cAstyoUrFavoRitETVshoWs\";\nvar x0 = removeUppercase(arg00);\nvar v0 = \"cstyoravoitshos\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"wAtchTheinTernEtrAdIo\";\nvar x1 = removeUppercase(arg10);\nvar v1 = \"wtchheinerntrdo\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"VoicESeaRchAndreComMendaTionS\";\nvar x2 = removeUppercase(arg20);\nvar v2 = \"oiceachndreomendaion\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove uppercase substrings from a given string by using regex.", "language": "javascript", "canonical_solution": "  return str1.replace(/[A-Z]/g, \"\");\n}", "completion": ["\n\n/**\n * * Remove uppercase substrings from a given string by using regex.\n * */\n", "\n", "\n", "\n", "\n\nconst function1 = (str, num) => str.replace(\n\t/\\b(a|A|\\w*|\\s*\\w*|\\s+\\w*|\\S+)\\b/g,\n\t(full_match, str) => full_match.toLowerCase()\n);\nconst str1 = \"I'm a robot.\";\nconst str2 = \"I'm a robot!\";\nconst str3 = \"i'm a robot!\";\n\nconsole.log(function1(str1, 1));\nconsole.log(function1(str2, 1));\nconsole.log(function1(str3, 1));\n```\n\n</details>\n\n### is\n\n```javascript\nconst is = (x, y) => (x === y)\n```\n\n<details>\n<summary><strong>Tests</strong></summary>\n\n```javascript\nimport { is } from './is'\n\ntest('equals', () => {\n\texpect(is('1', 1)).toBe(true)\n\texpect(is(1, 1)).toBe(true)\n\texpect(is(1, '1')).toBe(false)\n})\n\ntest('empty string', () => {\n\texpect(is('', '')).toBe(true)\n\texpect(is('')).toBe(true)\n\texpect(is(null, null)).toBe(true)\n\texpect(is(undefined, undefined)).toBe(true)\n\texpect(is(0, 0)).toBe(true)\n\texpect(is(0, '')).toBe(false)\n\texpect(is(0, '0')).toBe(false)"]}
{"task_id": "MBJSP/460", "prompt": "function extract(lst) {\n/**\n * * Write a JavaScript function to get the first element of each sublist.\n */", "entry_point": "extract", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 2], [3, 4, 5], [6, 7, 8, 9]];\nvar x0 = extract(arg00);\nvar v0 = [1, 3, 6];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[1, 2, 3], [4, 5]];\nvar x1 = extract(arg10);\nvar v1 = [1, 4];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[9, 8, 1], [1, 2]];\nvar x2 = extract(arg20);\nvar v2 = [9, 1];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to get the first element of each sublist.", "language": "javascript", "canonical_solution": "    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i][0]);\n    }\n    return result;\n}", "completion": ["\n\tvar writeJsFunc = function (jsFunc) {\n\t\treturn jsFunc();\n\t};\n\t// Array of sublists.\n\tvar subLists = lst.slice(1, lst.length - 1);\n\tsubLists.unshift(lst[0]);\n\t// get the topmost element of each sublist.\n\tvar topmostElements = lst.map(", "\n\nvar _slicedToArray = (", "\n    ", "\n", "\nlst[lst.length - 1].write("]}
{"task_id": "MBJSP/461", "prompt": "function upperCtr(str) {\n/**\n * * Write a JavaScript function to count the upper case characters in a given string.\n */", "entry_point": "upperCtr", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"PYthon\";\nvar x0 = upperCtr(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"BigData\";\nvar x1 = upperCtr(arg10);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"program\";\nvar x2 = upperCtr(arg20);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to count the upper case characters in a given string.", "language": "javascript", "canonical_solution": "  return str.split('').reduce((acc, curr) => {\n    return acc + (curr.charCodeAt(0) >= 65 && curr.charCodeAt(0) <= 90) ? 1 : 0;\n  }, 0)\n}", "completion": ["\nvar upperCaseCharCount = (str) => {\nvar upperCaseCharCount = 0;\n\nstr.replace(/[A-Z]/g, (char) => {\nupperCaseCharCount += 1;\n});\n\nreturn upperCaseCharCount;\n};\n\nconsole.log(upperCaseCharCount(str));\n\n\n\n/**\n * * Write a JavaScript function to count the upper case characters in a given string.\n */\nvar upperCaseCharCount = (str) => {\nvar upperCaseCharCount = 0;\n\nstr.replace(/[A-Z]/g, (char) => {\nupperCaseCharCount += 1;\n});\n\nreturn upperCaseCharCount;\n};\n\nconsole.log(upperCaseCharCount(str));\n\n\n\n/**\n * * Write a JavaScript function to count the upper case characters in a given string.\n */\nvar upperCaseCharCount = (str) => {\nvar upperCaseCharCount = 0;\n\nstr.replace(/[A-Z]/g, (char) => {\nupperCaseCharCount += 1;\n});\n\nreturn upperCaseCharCount;\n};\n\nconsole.log(upperCaseCharCount(str));\n\n\n\n/**\n * * Write a JavaScript function to count the upper case characters in a given string.\n */\nvar upperCaseCharCount = (str) => {\nvar upperCaseCharCount = 0;\n\nstr.replace(/[A-Z]/g, (char) => {\nupperCaseCharCount += 1;\n});\n\nreturn upperCaseCharCount;\n};\n\nconsole.log(upperCaseCharCount(str));\n\n\n\n/**\n * * Write a JavaScript ", "\n\nvar lower = \"\";\nvar upper = \"\";\nvar str = \"\";\nvar upperCount = 0;\n\n", "\n    ", "\nconst writeUppercase = (str) => {\n  return str.split(\"\").map(char => {\n    return char.charCodeAt(0).toString(16).toUpperCase();\n  }).join('');\n};\n/**\n * * Write a JavaScript function to count the lower case characters in a given string.\n */\nconst writeLowercase = (str) => {\n  return str.split(\"\").map(char => {\n    return char.charCodeAt(0).toString(16).toLowerCase();\n  }).join('');\n};\n/**\n * * Write a JavaScript function to count the number of characters in a given string.\n */\nconst writeCharCount = (str) => {\n  return str.split(\"\").map(char => {\n    return char.charCodeAt(0).toString(16);\n  }).join('');\n};\n/**\n * * Write a JavaScript function to calculate a given number using a given base.\n */\nconst writeBaseCalculator = (num, base) => {\n  return num.toString(base);\n};\n/**\n * * Write a JavaScript function to calculate the sum of the integers in a given array.\n */\nconst writeIntegerSum = (arr) => {\n  return arr.reduce((acc, item) => acc + item, 0);\n};\n/**\n * * Write a JavaScript function to calculate the sum of the squares in a given array.\n */\nconst writeSquareSum = (arr) => {\n  return arr.reduce((acc, item) => acc + item * item, 0);\n};\n/**\n * * Write a JavaScript ", "\n\nvar f = "]}
{"task_id": "MBJSP/462", "prompt": "function combinationsList(list1) {\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */", "entry_point": "combinationsList", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"orange\", \"red\", \"green\", \"blue\"];\nvar x0 = combinationsList(arg00);\nvar v0 = [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar x1 = combinationsList(arg10);\nvar v1 = [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"black\", \"orange\"];\nvar x2 = combinationsList(arg20);\nvar v2 = [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find all possible combinations of the elements of a given list.", "language": "javascript", "canonical_solution": "    if (list1.length === 0) {\n        return [[]];\n    }\n    else {\n        let ret = [];\n        let rest = combinationsList(list1.slice(1));\n        for (let comb of rest) {\n            ret.push(comb.slice(0));\n            ret.push(comb.concat([list1[0]]));\n        }\n        return ret;\n    }\n}", "completion": ["\n  return _arrayCombinations(list1);\n}\n\n/**\n * * Find all possible combinations of the elements of a given list.\n * *\n * For example, the given list `[1, 2, 3]` yields the following possible combinations of the elements of `[1, 2, 3]`:\n *\n * ```\n *   [1, 2, 3]\n *   [1, 3, 2]\n *   [2, 1, 3]\n *   [2, 3, 1]\n *   [3, 1, 2]\n *   [3, 2, 1]\n * ```\n *\n * @param list1\n */\n", "\nvar combine = (list1) => {\nvar list = [], n = list1.length;\nlist[0] = list1[0];\nlist[1] = list1[1];\nlist[2] = list1[2];\nlist[3] = list1[3];\nlist[4] = list1[4];\nlist[5] = list1[5];\nlist[6] = list1[6];\n\nfor (var i = 7; i < n + 1; i++) {\nlist[i] = list1[i - 1];\n}\n\nfor (var j = 0; j < n + 1; j++) {\nconsole.log(list[j]);\n}\n};\ncombine(list1);\n```\n\n<p class=\"example-code\">Example code:</p>\n\n```python\n>>> combine([1,2,3,4,5,6,7])\n1\n2\n3\n4\n5\n6\n7\n```\n\n<p class=\"example-code\">Example code:</p>\n\n```python\n>>> combine([1,2,3,4,5,6,7])\n\n1\n2\n3\n4\n5\n6\n7\n\n```\n\n<p class=\"example-code\">Example code:</p>\n\n```python\n>>> combine([1,2,3,4,5,6,7])\n\n1\n2\n3\n4\n5\n6\n7\n```\n\n<p class=\"example-code\">Example code:</p>\n\n```python\n>>> combine([1,2,3,4,5,6,7])\n\n1\n2\n3\n4\n5\n6\n7\n", "\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a function to find all possible combinations of the elements of a given list.\n */\n\n/**\n * * Write a ", "\n\nvar list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nvar List3 = {};\n\nfor (var i = 0; i <= list2.length; i++) {\n    for (var j = 0; j <= list3.length; j++) {\n        if (i == list2.length) {\n            for (var k = 0; k <= list2.length; k++) {\n                if (j == list3.length) {\n                    List3[i][j][k] = '';\n                }\n            }\n        } else {\n            List3[i][j] = list2[i];\n            for (var k = 0; k <= list2.length; k++) {\n                List3[i][j][k] = List3[i][j] + List3[i][k];\n            }\n        }\n    }\n}\n\n/**\n * * Write a ", "\n$('#search').click("]}
{"task_id": "MBJSP/463", "prompt": "function maxSubarrayProduct(arr) {\n/**\n * * Write a function to find the maximum product subarray of the given array.\n */", "entry_point": "maxSubarrayProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, -2, -3, 0, 7, -8, -2];\nvar x0 = maxSubarrayProduct(arg00);\nvar v0 = 112;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [6, -3, -10, 0, 2];\nvar x1 = maxSubarrayProduct(arg10);\nvar v1 = 180;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [-2, -40, 0, -2, -3];\nvar x2 = maxSubarrayProduct(arg20);\nvar v2 = 80;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum product subarray of the given array.", "language": "javascript", "canonical_solution": "  if (arr.length === 0) return 0;\n  let max = arr[0];\n  let min = arr[0];\n  let maxProduct = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    const current = arr[i];\n    const currentMin = Math.min(current, current * min, current * max);\n    const currentMax = Math.max(current, current * min, current * max);\n    max = currentMax;\n    min = currentMin;\n    maxProduct = Math.max(maxProduct, max);\n  }\n  return maxProduct;\n}", "completion": ["\n\n/**\n * * Given an array of integers nums, find the maximum product subarray.\n * */\n\n/**\n * * The product of any three integers in the array is never greater than the product of any two integers.\n * */\n\n/**\n * * Given an array of integers nums, find the maximum product subarray.\n * */\n\n/**\n * * Write a ", "\nvar maxProductSubarray = function(arr) {\n/**\n * * Write a function to find the maximum product subarray of the given array.\n */\nreturn Math.max(...arr.map(", "\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */\n\n/**\n * * Given an integer array nums, find the maximum product subarray.\n */\n\n/**\n * * Return the product of the maximum product subarray.\n */", "\n/**\n * * Write a ", "\n        return arr[1] * arr[2] * arr[3] * arr[4];\n        }\n\n// function to find the maximum product subarray of the given array\n\n/**\n * * Write a function to find the maximum product subarray of the given array.\n */\n"]}
{"task_id": "MBJSP/464", "prompt": "function checkValue(dict, n) {\n/**\n * * Write a function to check if all values are same in a dictionary.\n */", "entry_point": "checkValue", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg01 = 10;\nvar x0 = checkValue(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg11 = 12;\nvar x1 = checkValue(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Cierra Vega\"':12,'\"Alden Cantrell\"':12,'\"Kierra Gentry\"':12,'\"Pierre Cox\"':12};\nvar arg21 = 5;\nvar x2 = checkValue(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if all values are same in a dictionary.", "language": "javascript", "canonical_solution": "  let keys = Object.keys(dict);\n  let values = Object.values(dict);\n  let result = true;\n  for (let i = 0; i < keys.length; i++) {\n    if (values[i] !== n) {\n      result = false;\n    }\n  }\n  return result;\n}", "completion": ["\nconst eq = (dict, n) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const item = dict[keys[i]];\n    for (let j = i + 1; j < keys.length; j++) {\n      const item2 = dict[keys[j]];\n      if (item!= item2) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n/**\n * * Write a function to check if any value is different in a dictionary.\n */\nconst neq = (dict, n) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const item = dict[keys[i]];\n    for (let j = i + 1; j < keys.length; j++) {\n      const item2 = dict[keys[j]];\n      if (item2!= item) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n/**\n * * Write a function to check if all values are different in a dictionary.\n */\nconst diff = (dict, n) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const item = dict[keys[i]];\n    for (let j = i + 1; j < keys.length; j++) {\n      const item2 = dict[keys[j]];\n      if (item == item2) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * * Write a ", "\n\n/**\n * * Check if all values are same in a dictionary.\n */\n\n/**\n * * Check if all values are same in a dictionary.\n */\n\n/**\n * * Write a function to check if any value is different in a dictionary.\n */\n\n/**\n * * Check if any value is different in a dictionary.\n */\n\n/**\n * * Write a function to check if all values are same in a dictionary.\n */\n\n/**\n * * Write a function to check if any value is different in a dictionary.\n */\n\n/**\n * * Check if any value is different in a dictionary.\n */\n\n/**\n * * Write a function to check if all values are same in a dictionary.\n */\n\n/**\n * * Write a function to check if any value is different in a dictionary.\n */\n\n/**\n * * Check if all values are same in a dictionary.\n */\n\n/**\n * * Check if any value is different in a dictionary.\n */\n\n/**\n * * Write a function to check if all values are same in a dictionary.\n */\n\n/**\n * * Write a function to check if any value is different in a dictionary.\n */\n\n/**\n * * Check if all values are same in a dictionary.\n */\n\n/**\n * * Check if any value is different in a dictionary.\n */\n\n/**\n * * Write a function to check if all values are same in a dictionary.\n */\n\n/**\n * * Write a function to check if any value is different in a dictionary.\n */\n\n/**\n * * Check if all values are same in a dictionary.\n */\n\n/**\n * * Check if any value is different in a dictionary.\n */\n\n/**\n * * Write a ", "\n", "\n\n/**\n * * Check if all values are same in a dictionary.\n */\n\n/**\n * * * Write a function to check if any value in a dictionary is same as a given value.\n */\n\n/**\n * * * Check if any value in a dictionary is same as a given value.\n */\n\n/**\n * * * Write a function to check if all values in a dictionary are same.\n */\n\n/**\n * * * Check if all values in a dictionary are same.\n */\n\n/**\n * * * Write a function to check if any value in a dictionary is same.\n */\n\n/**\n * * * Check if any value in a dictionary is same.\n */\n\n/**\n * * * Write a function to check if a value in a dictionary is same as a given value.\n */\n\n/**\n * * * Check if a value in a dictionary is same as a given value.\n */\n\n/**\n * * * Write a function to check if a value in a dictionary is same.\n */\n\n/**\n * * * Check if a value in a dictionary is same.\n */\n\n/**\n * * * Write a function to check if a value in a dictionary is same.\n */\n\n/**\n * * * Check if a value in a dictionary is same.\n */\n\n/**\n * * * Write a function to check if a value in a dictionary is same.\n */\n\n/**\n * * * Check if a value in a dictionary is same.\n */\n\n/**\n * * * Write a function to check if a value in a dictionary is same.\n */\n\n/**\n * * * Check if a value in a dictionary is same.\n */\n\n/**\n * * * Write a ", "\nvar AllSame = function (dict) {\n  var values = getAllValues(dict);\n  return values.length === 1 && values[0] === values[0];\n};\n\n/**\n * * Write a function to check if all values are different in a dictionary.\n */\nvar AllDifferent = function (dict) {\n  var values = getAllValues(dict);\n  return values.length > 1 &&!values.every("]}
{"task_id": "MBJSP/465", "prompt": "function dropEmpty(dict1) {\n/**\n * * Write a function to drop empty items from a given dictionary.\n */", "entry_point": "dropEmpty", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"c1\"':\"Red\",'\"c2\"':\"Green\",'\"c3\"':null};\nvar x0 = dropEmpty(arg00);\nvar v0 = {'\"c1\"':\"Red\",'\"c2\"':\"Green\"};\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"c1\"':\"Red\",'\"c2\"':null,'\"c3\"':null};\nvar x1 = dropEmpty(arg10);\nvar v1 = {'\"c1\"':\"Red\"};\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"c1\"':null,'\"c2\"':\"Green\",'\"c3\"':null};\nvar x2 = dropEmpty(arg20);\nvar v2 = {'\"c2\"':\"Green\"};\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to drop empty items from a given dictionary.", "language": "javascript", "canonical_solution": "  let dict2 = {};\n  for (let key in dict1) {\n    if (dict1[key] !== null && dict1[key] !== undefined) {\n      dict2[key] = dict1[key];\n    }\n  }\n  return dict2;\n}", "completion": ["\n \n", "\n\n", "\ndrop_empty_items(dict1);\ndict1 = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\",\n    \"key4\": \"value4\",\n    \"key5\": \"value5\",\n};\ndump(dict1)\n    \"key1\"\n    \"key2\"\n    \"key3\"\n    \"key4\"\n    \"key5\"\ndrop_empty_items(dict1);\ndict1 = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\",\n    \"key4\": \"value4\",\n    \"key5\": \"value5\",\n};\ndump(dict1)\n    \"key1\"\n    \"key2\"\n    \"key3\"\n    \"key4\"\n    \"key5\"\ndrop_empty_items(dict1);\ndict1 = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\",\n    \"key4\": \"value4\",\n    \"key5\": \"value5\",\n};\ndump(dict1)\n    \"key1\"\n    \"key2\"\n    \"key3\"\n    \"key4\"\n    \"key5\"\ndrop_empty_items(dict1);\ndict1 = {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\",\n    \"key4\": \"value4\",\n    \"key5\": \"value5\",\n};\ndump(dict1)\n    \"key1\"\n    \"key2\"\n    \"key3\"", "\nreturn function (dict) {\n    var keys = Object.keys(dict).filter(", "\ndict1.drop = function drop(dict1, keys) {\nvar new_dict = dict1.empty();\nfor (var i in keys) {\nif (dict1.has(keys[i])) {\nnew_dict.set(keys[i], dict1.get(keys[i]));\n}\n}\nreturn new_dict;\n}\ndict1.drop_if = function drop_if(dict1, condition) {\nvar new_dict = dict1.empty();\nfor (var item in dict1) {\nif (condition(dict1[item])) {\nnew_dict.set(item, dict1[item]);\n}\n}\nreturn new_dict;\n}\ndict1.drop_if_not = function drop_if_not(dict1, condition) {\nvar new_dict = dict1.empty();\nfor (var item in dict1) {\nif (!condition(dict1[item])) {\nnew_dict.set(item, dict1[item]);\n}\n}\nreturn new_dict;\n}\ndict1.reversed = function reversed(dict1) {\nvar keys = dict1.keys();\nvar new_dict = dict1.empty();\nfor (var i in keys) {\nnew_dict.set(keys[i], dict1.get(i));\n}\nreturn new_dict;\n}\ndict1.subtract = function subtract(dict1, dict2) {\nvar result = dict1.empty();\nfor (var item in dict1) {\nif (!dict2.has(item)) {\nresult.set(item, dict1.get(item));\n}\n}\nreturn result;\n}\ndict1.intersect = "]}
{"task_id": "MBJSP/466", "prompt": "function findPeak(arr, n) {\n/**\n * * Write a function to find the peak element in the given array.\n */", "entry_point": "findPeak", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 3, 20, 4, 1, 0];\nvar arg01 = 6;\nvar x0 = findPeak(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 3, 4, 5, 6];\nvar arg11 = 5;\nvar x1 = findPeak(arg10, arg11);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [8, 9, 11, 12, 14, 15];\nvar arg21 = 6;\nvar x2 = findPeak(arg20, arg21);\nvar v2 = 5;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the peak element in the given array.", "language": "javascript", "canonical_solution": "  let left = 0;\n  let right = n - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] < arr[mid + 1]) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return left;\n}", "completion": ["\nvar peakElement = function (arr, n) {\n  var l = arr.length - 1;\n  var h = 0;\n  while (h <= l) {\n    var m = (l + h) >> 1;\n    if (arr[m] < arr[m + 1]) {\n      h = m + 1;\n    } else {\n      l = m;\n    }\n  }\n  var m = h;\n  while (m >= 0 && arr[m] > arr[m + 1]) {\n    m--;\n  }\n  var fn = arr[m] > arr[m + 1]?'max' :'min';\n  return fn + '(' + arr[m] + ',' + arr[m + 1] + ')';\n};\n```\n\n### \u6570\u7ec4\u4e2d\u6700\u5927\u5143\u7d20\n\n```js\nvar max = function (arr, n) {\n    var fn = arr[0] > arr[1]?'max' :'min';\n    return fn + '(' + arr[0] + ',' + arr[1] + ')';\n};\n```\n\n### \u6570\u7ec4\u4e2d\u6700\u5c0f\u5143\u7d20\n\n```js\nvar min = function (arr, n) {\n    var fn = arr[0] < arr[1]?'max' :'min';\n    return fn + '(' + arr[0] + ',' + arr[1] + ')';\n};\n```\n\n### \u6570\u7ec4\u4e2d\u7684\u6700\u957f\u5b50\u6570\u7ec4\n\n```js\nvar maxLength = ", "\n\n/**\n *\n * @param {Array} arr\n * @param {Number} n\n * @return {Number}\n */\nreturn arr[n - 1];\n}\n\n/**\n * * Find the peak element in the given array.\n */\n", "\n    var findPeakElement = function(arr, n) {\n        // when we reach the last element\n        if (arr.length === 1)\n            return arr[0];\n        // if the first element is smaller than the second element\n        if (arr[0] < arr[1])\n            return arr[0];\n        // if the first element is bigger than the second element\n        if (arr[0] > arr[1])\n            return arr[1];\n        // if the element is equal to both element\n        if (arr[0] == arr[1])\n            return arr[0];\n        // if there are more than two elements\n        if (arr.length > 2) {\n            // if the first element is bigger than the second element\n            if (arr[0] > arr[1])\n                return findPeakElement(arr.slice(1), n);\n            // if the first element is smaller than the second element\n            else if (arr[0] < arr[1])\n                return findPeakElement(arr.slice(2), n);\n            // if the first element is equal to the second element\n            else\n                return findPeakElement(arr.slice(3), n);\n        }\n    };\n/**\n * * Write a function to find the peak element in the given array.\n */\n    var findPeakElement2 = ", "\n", "\nconst peak = arr => arr.reduce((a, b) => a < b? b : a, arr[0])\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/467", "prompt": "function decimalToOctal(decinum) {\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */", "entry_point": "decimalToOctal", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = decimalToOctal(arg00);\nvar v0 = 12;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = decimalToOctal(arg10);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 33;\nvar x2 = decimalToOctal(arg20);\nvar v2 = 41;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to convert decimal number to octal number.", "language": "javascript", "canonical_solution": "    return parseInt(decinum.toString(8), 10);\n}", "completion": ["\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript function to convert decimal number to octal number.\n */\n/**\n * * Write a JavaScript ", "\n\n  this.write(`(", "\nvar octal_decimal = function octal_decimal(decinum) {\n\tvar val = parseInt(decinum, 10);\n\tvar octalString = octal.substring(0, val);\n\treturn octalString + octal;\n};\n\n/**\n * * Write a JavaScript function to convert octal number to decimal number.\n */\nvar decimal_octal = function decimal_octal(octal) {\n\tvar val = parseInt(octal, 10);\n\tvar decinumString = decimal.substring(0, val);\n\treturn decinumString + decimal;\n};\n\n/**\n * * Write a JavaScript function to convert binary number to decimal number.\n */\nvar binary_decimal = function binary_decimal(decinum) {\n\tvar val = parseInt(decinum, 2);\n\tvar decinumString = binary.substring(0, val);\n\treturn decinumString + binary;\n};\n\n/**\n * * Write a JavaScript function to convert decimal number to binary number.\n */\nvar decimal_binary = function decimal_binary(decinum) {\n\tvar val = parseInt(decinum, 10);\n\tvar decinumString = decimal.substring(0, val);\n\treturn decinumString + decimal;\n};\n\n/**\n * * Write a JavaScript function to convert base-10 number to base-2 number.\n */\nvar base10_binary = function base10_binary(decinum) {\n\tvar val = parseInt(decinum, 10);\n\tvar decinumString = binary.substring(0, val);\n\treturn decinumString + binary;\n};\n\n/**\n * * Write a JavaScript ", "\n\n$('.decimal-to-octal-btn').on('click', ", "\n"]}
{"task_id": "MBJSP/468", "prompt": "function maxProduct(arr, n) {\n/**\n * * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n */", "entry_point": "maxProduct", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 100, 4, 5, 150, 6];\nvar arg01 = 6;\nvar x0 = maxProduct(arg00, arg01);\nvar v0 = 45000;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 42, 55, 68, 80];\nvar arg11 = 5;\nvar x1 = maxProduct(arg10, arg11);\nvar v1 = 50265600;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 22, 9, 33, 21, 50, 41, 60];\nvar arg21 = 8;\nvar x2 = maxProduct(arg20, arg21);\nvar v2 = 21780000;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "language": "javascript", "canonical_solution": "  let max = 0;\n  let min = 0;\n  let temp = 0;\n  for (let i = 0; i < n; i++) {\n    max = Math.max(max, arr[i]);\n    min = Math.min(min, arr[i]);\n  }\n  for (let i = 0; i < n; i++) {\n    temp = max * arr[i];\n    if (temp > max) {\n      max = temp;\n    }\n    temp = min * arr[i];\n    if (temp < min) {\n      min = temp;\n    }\n  }\n  return max;\n}", "completion": ["\n\n", "\n\nvar multiply = function multiply(arr, n) {\n  var max = 0;\n  for (var i = 0; i < n; i++) {\n    var prod = 1;\n    for (var j = 0; j < i; j++) {\n      prod *= arr[j];\n    }\n    max = Math.max(max, prod);\n  }\n  return max;\n};\n\nmodule.exports = multiply;\n},{}],134:[", "\n\nlet maxProduct = Math.max(arr.map(a => a * a * a)).toString();\n\nconsole.log('Array: ', arr.toString());\nconsole.log('Maximum Product: ', maxProduct);\n\n```\n\n### Reference\n\n- [Dynamic Programming - Leetcode](https://leetcode.com/problems/maximum-product-subarray/discuss/)\n- [Maximum Product Subarray](https://www.youtube.com/watch?v=u9W_uZY8r0)\n- [Maximum Product Subarray - Sliding Window](https://www.youtube.com/watch?v=u9W_uZY8r0)\n<|endoftext|>", "\n\nvar arr = [];\nfor (var i = 0; i < 10; i++) {\narr.push(i);\n}\nconsole.log(arr);\nvar product = arr.reduce(", "\n    var arr = arr || [];\n    var n = arr.length;\n    var product = 0;\n    var leftMax = 0;\n    var rightMin = 0;\n\n    for (var i = 0; i < n; i++) {\n        leftMax = Math.max(leftMax, arr[i]);\n    }\n\n    for (var i = n - 1; i >= 0; i--) {\n        rightMin = Math.min(rightMin, arr[i]);\n    }\n\n    for (var i = 0; i < n - 1; i++) {\n        if (arr[i] * arr[i + 1] > product) {\n            product = arr[i] * arr[i + 1];\n        }\n    }\n\n    return product;\n}\n\n/**\n * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n */\n"]}
{"task_id": "MBJSP/469", "prompt": "function maxProfit(price, k) {\n/**\n * * Write a function to find the maximum profit earned from a maximum of k stock transactions\n */", "entry_point": "maxProfit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 2, 3, 7, 6, 4, 5];\nvar arg01 = 3;\nvar x0 = maxProfit(arg00, arg01);\nvar v0 = 10;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 4, 7, 5, 4, 3, 5];\nvar arg11 = 2;\nvar x1 = maxProfit(arg10, arg11);\nvar v1 = 7;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [10, 6, 8, 4, 2];\nvar arg21 = 2;\nvar x2 = maxProfit(arg20, arg21);\nvar v2 = 2;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "language": "javascript", "canonical_solution": "  let profit = 0;\n  for (let i = 0; i < price.length - 1; i++) {\n    if (price[i] < price[i + 1]) {\n      profit += price[i + 1] - price[i];\n    }\n  }\n  return profit > 0 ? profit : 0;\n}", "completion": ["\nreturn (profit) => {\n    const [max, min] = profit.sort((a, b) => a - b);\n    for (let i = 1; i < k; i++) {\n        max = max.max(price[i] - price[i - 1]);\n        min = min.min(price[i] - price[i - 1]);\n    }\n    return [max, min];\n};\n});\n//# sourceMappingURL=max_k_profit.js.map<|endoftext|>", "\nconst max_k_stock = async ", "\nconst maxProfit = k => {\n  let maxprofit = 0;\n  for (let i = 0; i < k; i++) {\n    maxprofit += price[i];\n  }\n  return maxprofit;\n};\n```\n\n## Problem Statement\n\nSuppose you have a set of stock prices for a company that makes at most k transactions. How can you calculate the maximum profit you can earn if you make at most k transactions?\n\n## Example\n\nInput: prices = [1,2,3,4,5,6,7,8,9], k = 3\nOutput: 8\n\nThe optimal solution is to buy the stock on day 9 and sell it on day 11, which results in a profit of `(11 - 9) = 8`.\n\n## Complexity\n\nTime complexity: `O(nk)`.\n\nSpace complexity: `O(1)`.\n\n## Pseudocode\n\n```\n// Returns the maximum profit you can earn by buying at a given price price[i] and selling at a given price price[j]\n// profit[i,j] = max profit from buying at price[i] and selling at price[j]\n// maxprofit[i,j] = max profit from buying at price[i] and selling at price[j]\n// maxprofit[i,j] = max (profit[i,j-1] + prices[j]-prices[i], profit[i,j-1], maxprofit[i+1,j])\n\n// Returns the maximum profit earned from a maximum of k stock transactions\nprofit[i,j] = max profit from buying at price[i] and selling at price[j]\nmaxprofit[i,j] = max profit from buying at price[i] and selling at price[j", "\n/**\n * @", "\n\n\n// Test case 1\n\n// Find the maximum profit earned from a maximum of k transactions:\n// Given a list of stock prices and a list of transactions (k), find the maximum profit earned from a maximum of k transactions.\n\n// The length of the transaction array is k + 1, and the length of the stock array is n.\n\n// The first transaction (t[0]) can only happen after the second transaction (t[1]) and so on.\n\n// You can only buy and sell stock on the first day.\n\n// Return the maximum profit earned from a maximum of k transactions.\n\n// Input: prices = [1,3,2,8,4,9], k = 2\n// Output: 8\n// Explanation:\n// - Buy on day 1 (at price = 1) and sell on day 4 (at price = 8), profit = 8 - 1 = 7.\n// - Buy on day 2 (at price = 3) and sell on day 4 (at price = 8), profit = 7 - 3 = 4.\n// - Buy on day 3 (at price = 2) and sell on day 4 (at price = 8), profit = 4 - 2 = 2.\n\n// Input: prices = [1,2,3,4,5,6,7,8,9], k = 3\n// Output: 5\n// Explanation:\n// - Buy on day 1 (at price = 1) and sell on day 7 (at price = 9), profit = 9 - 1 = 8.\n// - Buy on day 2 (at price = 2) and sell on day 8 (at price = 9), profit = 8 - 2 = 6.\n// - Buy on day 3 (at price = 3) and sell on day 8 (at price = 9), profit = 6 - 3 = 5.\n// - Buy on day"]}
{"task_id": "MBJSP/470", "prompt": "function addPairwise(testtup) {\n/**\n * * Write a function to find the pairwise addition of the elements of the given tuples.\n */", "entry_point": "addPairwise", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 5, 7, 8, 10];\nvar x0 = addPairwise(arg00);\nvar v0 = [6, 12, 15, 18];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [2, 6, 8, 9, 11];\nvar x1 = addPairwise(arg10);\nvar v1 = [8, 14, 17, 20];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 7, 9, 10, 12];\nvar x2 = addPairwise(arg20);\nvar v2 = [10, 16, 19, 22];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the pairwise addition of the elements of the given tuples.", "language": "javascript", "canonical_solution": "  return [...testTup].sort((a, b) => a - b).reduce((acc, cur, idx, arr) => {\n    if (idx === 0) return acc;\n    if (arr[idx - 1] + cur > arr[idx] * 2) {\n      return acc;\n    } else {\n      acc.push(arr[idx - 1] + cur);\n      return acc;\n    }\n  }, []);\n}", "completion": ["\n\nconst pairwise = tup => {\n    let result = 0;\n    for (let i = 0; i < tup.length; i += 1) {\n        const next = tup[i];\n        result += next;\n    }\n    return result;\n};\n\n/**\n * * Find the pairwise addition of the elements of the given tuples.\n */\n\nconst sum = tup => Math.floor(pairwise(tup) / 2);\n\n/**\n * * Find the pairwise subtraction of the elements of the given tuples.\n */\n\nconst difference = tup => Math.floor(pairwise(tup) * 2);\n\n/**\n * * Find the pairwise product of the elements of the given tuples.\n */\n\nconst product = tup => {\n    let result = 1;\n    for (let i = 0; i < tup.length; i += 1) {\n        const next = tup[i];\n        result *= next;\n    }\n    return result;\n};\n\n/**\n * * Find the pairwise quotient of the elements of the given tuples.\n */\n\nconst quotient = tup => {\n    let result = 1;\n    for (let i = 0; i < tup.length; i += 1) {\n        const next = tup[i];\n        result /= next;\n    }\n    return result;\n};\n\n/**\n * * Find the pairwise magnitude of the elements of the given tuples.\n */\n\nconst magnitude = tup => {\n    let result = 0;\n    for (let i = 0; i < tup.length; i += 1) {\n        const next = tup[i];\n        result += next *", "\n$pairs: $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data, $data", "\n", "\n", "\n"]}
{"task_id": "MBJSP/471", "prompt": "function findRemainder(arr, lens, n) {\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */", "entry_point": "findRemainder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [100, 10, 5, 25, 35, 14];\nvar arg01 = 6;\nvar arg02 = 11;\nvar x0 = findRemainder(arg00, arg01, arg02);\nvar v0 = 9;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 1, 1];\nvar arg11 = 3;\nvar arg12 = 1;\nvar x1 = findRemainder(arg10, arg11, arg12);\nvar v1 = 0;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar arg21 = 3;\nvar arg22 = 2;\nvar x2 = findRemainder(arg20, arg21, arg22);\nvar v2 = 0;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find remainder of array multiplication divided by n.", "language": "javascript", "canonical_solution": "    let remainder = 1;\n    for(let i = 0; i < lens; i++){\n        remainder = remainder * arr[i];\n    }\n    return remainder % n;\n}", "completion": ["\n/**\n * Function `write`\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n", "\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript function to find remainder of array multiplication divided by n.\n */\n\n/**\n * * Write a JavaScript ", "\nreturn _curry2(", "\n  return arr.reduce((_result, cur, i) => {\n    if (i === lens.length) {\n      return _result;\n    }\n    return cur % n === 0? _result : _result + cur;\n  }, 0);\n}\n```\n\n</details>\n\n<details><summary><code>generate_mod_div_by_constant</code> example</summary>\n\n```python\nfrom src.utils import generate_mod_div_by_constant\nimport torch\n\nn = 11\n\narr = torch.randint(0, n, [2])\nlens = torch.tensor([2])\n\n# all possible remainder values\nprint(generate_mod_div_by_constant(arr, lens, n))\n\n# all possible quotient values\nprint(generate_mod_div_by_constant(arr.t(), lens, n))\n```\n\n</details>\n\n<details><summary><code>generate_mod_div_by_constant_from_n</code> example</summary>\n\n```python\nfrom src.utils import generate_mod_div_by_constant_from_n\nimport torch\n\nn = 11\n\narr = torch.randint(0, n, [2])\nlens = torch.tensor([2])\n\n# all possible quotient values\nprint(generate_mod_div_by_constant_from_n(arr, lens, n))\n\n# all possible remainder values\nprint(generate_mod_div_by_constant_from_n(arr.t(), lens, n))\n```\n\n</details>\n\n\n### generate_prime\n\nThis ", "\n    const arr = [0, 1, 2];\n    const lens = [1, 3];\n    const n = 2;\n    arr.write("]}
{"task_id": "MBJSP/472", "prompt": "function checkConsecutive(l) {\n/**\n * * Write a JavaScript function to check whether the given list contains consecutive numbers or not.\n */", "entry_point": "checkConsecutive", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4, 5];\nvar x0 = checkConsecutive(arg00);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 5, 6];\nvar x1 = checkConsecutive(arg10);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 1];\nvar x2 = checkConsecutive(arg20);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to check whether the given list contains consecutive numbers or not.", "language": "javascript", "canonical_solution": "    let result = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] + 1 !== l[i + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}", "completion": ["\n", "\n", "\nvar WriteConsecutiveNumbers = function () {\n    var createFunction = function createFunction(consecutiveNumbers) {\n        var isConsecutive = function isConsecutive(number1, number2) {\n            var difference = Math.abs(number1 - number2);\n\n            if (difference === consecutiveNumbers) {\n                return true;\n            }\n\n            return false;\n        };\n\n        return function writeConsecutiveNumbers(values, list) {\n            var result = [];\n\n            if (values.length === 0) {\n                return [];\n            }\n\n            for (var i = 0; i < values.length; i++) {\n                for (var j = 1; j < consecutiveNumbers; j++) {\n                    result.push(values[i] + j);\n                }\n            }\n\n            return list.concat(result);\n        };\n    };\n\n    var properties = ['consecutiveNumbers'];\n\n    var types = ['Array'];\n\n    var allowedValues = [[1, 2]];\n\n    return {\n        createFunction: createFunction,\n        properties: properties,\n        types: types,\n        allowedValues: allowedValues\n    };\n}();\n\n/**\n * * Generate an array of numbers from 1 to maxValue.\n */\nvar GenerateNumbers = function () {\n    var createFunction = function createFunction(maxValue) {\n        var generateNumbers = function generateNumbers(startValue) {\n            var number = startValue;\n\n            while (number <= maxValue) {\n                yield number++;\n            }\n        };\n\n        return ", "\n\n/**\n * * The JavaScript function that returns the given list divided by the given divisor.\n * *\n * * @param {number} divisor - A number.\n * * @param {number[]} list - A list of numbers.\n * * @returns {number[]} - A list of numbers divided by the given divisor.\n */\n\n/**\n * * The JavaScript function that returns the given list multiplied by the given number.\n * *\n * * @param {number} number - A number.\n * * @param {number[]} list - A list of numbers.\n * * @returns {number[]} - A list of numbers multiplied by the given number.\n */\n\n/**\n * * The JavaScript function that returns the given list divided by the given divisor.\n * *\n * * @param {number} divisor - A number.\n * * @param {number[]} list - A list of numbers.\n * * @returns {number[]} - A list of numbers divided by the given divisor.\n */\n\n/**\n * * The JavaScript function that returns the given list multiplied by the given number.\n * *\n * * @param {number} number - A number.\n * * @param {number[]} list - A list of numbers.\n * * @returns {number[]} - A list of numbers multiplied by the given number.\n */\n\n/**\n * * The JavaScript function that returns the sum of the elements in the given list.\n * *\n * * @param {number[]} list - A list of numbers.\n * * @returns {number} - The sum of the elements in the given list.\n */\n\n/**\n * * The JavaScript ", "\n"]}
{"task_id": "MBJSP/473", "prompt": "function tupleIntersection(testlist1, testlist2) {\n/**\n * * Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n */", "entry_point": "tupleIntersection", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[3, 4], [5, 6], [9, 10], [4, 5]];\nvar arg01 = [[5, 4], [3, 4], [6, 5], [9, 11]];\nvar x0 = tupleIntersection(arg00, arg01);\nvar v0 = new Set([[4, 5],[5, 6],[3, 4]]);\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[4, 1], [7, 4], [11, 13], [17, 14]];\nvar arg11 = [[1, 4], [7, 4], [16, 12], [10, 13]];\nvar x1 = tupleIntersection(arg10, arg11);\nvar v1 = new Set([[4, 7],[1, 4]]);\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[2, 1], [3, 2], [1, 3], [1, 4]];\nvar arg21 = [[11, 2], [2, 3], [6, 2], [1, 3]];\nvar x2 = tupleIntersection(arg20, arg21);\nvar v2 = new Set([[2, 3],[1, 3]]);\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "language": "javascript", "canonical_solution": "  let intersectionSet = new Set();\n  testList1.forEach(tuple => {\n    for (let i = 0; i < testList2.length; i++) {\n      if (tuple.sort().join() === testList2[i].sort().join()) {\n        intersectionSet.add(tuple);\n      }\n    }\n  });\n  return intersectionSet;\n}", "completion": ["\nvar intersectTupleList = ", "\n", "\n    let a = testlist1[i];\n    let b = testlist2[j];\n    let c = a;\n    while (a!= b) {\n        c = a;\n        a = testlist1[i + 1];\n    }\n    return c;\n}\n\nconsole.log(section(testlist1, testlist2));\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nif ((val == 'the') && (count == 2)) {\n\n}\n\nif ((count == 1) && (val == 'a')) {\n\n}\n\nif ((count == 1) && (val == 'an')) {\n\n}\n\nif ((count == 1) && (val == 'a')) {\n\n}\n\nif ((count == 1) && (val == 'a')) {\n\n}\n\nif ((count == 1) && (val == 'a')) {\n\n}\n\nif ((count == 1) && (val == 'a')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n\nif ((count == 1) && (val == 'the')) {\n\n}\n", "\n};\n```\n\n#### Answer\n\n```python\ndef section(testlist1, testlist2):\n    return testlist1 & testlist2\n```\n\n#### Explanation\n\nThis is the example that was given in the first section of the book. It shows how we could have defined this function in Python and then used it on the examples in the book.\n\nNote that the functions `testlist1` and `testlist2` are actually tuples and that the elements of the tuples are of type `int`. Hence, `testlist1 & testlist2` would return a list of `int`s.\n\n#### Extra Credit\n\nThis problem is a slightly modified version of the previous one. The modified version is intended to find the tuples intersection of elements in the given tuple list regardless of their order. \n\nIn this version, the elements of the tuples are not of type `int`s. Hence, `testlist1 & testlist2` would return a list of tuples. The elements of these tuples are of type `str`, and hence, `testlist1 & testlist2` would return a list of strings. \n\nIn this version, the "]}
{"task_id": "MBJSP/474", "prompt": "function replaceChar(str1, ch, newch) {\n/**\n * * Write a function to replace characters in a string.\n */", "entry_point": "replaceChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"polygon\";\nvar arg01 = \"y\";\nvar arg02 = \"l\";\nvar x0 = replaceChar(arg00, arg01, arg02);\nvar v0 = \"pollgon\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"character\";\nvar arg11 = \"c\";\nvar arg12 = \"a\";\nvar x1 = replaceChar(arg10, arg11, arg12);\nvar v1 = \"aharaater\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"python\";\nvar arg21 = \"l\";\nvar arg22 = \"a\";\nvar x2 = replaceChar(arg20, arg21, arg22);\nvar v2 = \"python\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to replace characters in a string.", "language": "javascript", "canonical_solution": "  let newStr = \"\";\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === ch) {\n      newStr += newch;\n    } else {\n      newStr += str1[i];\n    }\n  }\n  return newStr;\n}", "completion": ["\n    ch = ch || '.';\n    newch = newch || '_';\n\n    if (ch!== newch) {\n        str1 = str1.replace(ch, newch);\n        return str1;\n    }\n    ch = ch || '.';\n    newch = newch || '_';\n    //check special character\n    var special_ch = ['<', '>', '\"', '{', '}', '#', '|', '&', '?'];\n    for (var i = 0; i < special_ch.length; i++) {\n        if (str1.indexOf(special_ch[i]) > -1) {\n            str1 = str1.replace(special_ch[i], newch);\n        }\n    }\n\n    //check letter\n    var letter_ch = ['a', 'e', 'i', 'o', 'u'];\n    for (var i = 0; i < letter_ch.length; i++) {\n        if (str1.indexOf(letter_ch[i]) > -1) {\n            str1 = str1.replace(letter_ch[i], newch);\n        }\n    }\n\n    //check number\n    var number_ch = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n    for (var i = 0; i < number_ch.length; i++) {\n        if (str1.indexOf(number_ch[i]) > -1) {\n            str1 = str1.replace(number_ch[i], newch);\n        }\n    }\n    //check symbol\n    var symbol_ch = [", "\n", "\n    var str2 = str1.substr(ch.start, ch.length) + str2.substr(newch.start, newch.length);\n    return str2;\n  }\n\n  // -----------------------------\n  // -- Add all strings to a vector --\n  // -----------------------------\n  ", "\nconst replaceString = (str1, ch, newch) => {\n/**\n * * Replace the ch in the str1 with newch.\n */\nstr1.replace(new RegExp(ch, 'g'), newch);\n/**\n * * If the ch is found in the str1, replace it with newch.\n */\nif (str1.includes(ch)) str1.replace(new RegExp(ch, 'g'), newch);\n/**\n * * Return the string without the ch.\n */\nreturn str1.slice(0, -1);\n};\n\n/**\n * * Replace characters in a string.\n */\nconst replaceCharacter = (str1, ch, newch) => {\n/**\n * * Replace the ch in the str1 with newch.\n */\nconst replaceWith = newch;\nstr1.replace(new RegExp(ch, 'g'), replaceWith);\n/**\n * * Return the string without the ch.\n */\nreturn str1.slice(0, -1);\n};\n\n/**\n * * Replace all of the characters in a string with the newch.\n */\nconst replaceAllCharacters = (str1, ch, newch) => {\n/**\n * * If the str1 does not contain ch, return the string.\n */\nif (!str1.includes(ch)) return str1;\n/**\n * * Replace the ch in the str1 with newch.\n */\nstr1 = str1.replace(new RegExp(ch, 'g'), newch);\n/**\n * * Return the string without the ch.\n */\nreturn str1.slice(0, -1);\n};\n\n/**\n * * Count the number of times a character appears in a string.\n */\nconst countCharacter = (str1,", "\n"]}
{"task_id": "MBJSP/475", "prompt": "function sortCounter(dict1) {\n/**\n * * Write a function to sort counter by value.\n */", "entry_point": "sortCounter", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = {'\"Math\"':81,'\"Physics\"':83,'\"Chemistry\"':87};\nvar x0 = sortCounter(arg00);\nvar v0 = [[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = {'\"Math\"':400,'\"Physics\"':300,'\"Chemistry\"':250};\nvar x1 = sortCounter(arg10);\nvar v1 = [[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = {'\"Math\"':900,'\"Physics\"':1000,'\"Chemistry\"':1250};\nvar x2 = sortCounter(arg20);\nvar v2 = [[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort counter by value.", "language": "javascript", "canonical_solution": "  let arr = [];\n  for (let key in dict1) {\n    arr.push([key, dict1[key]]);\n  }\n  arr.sort((a, b) => b[1] - a[1]);\n  return arr;\n}", "completion": ["\n\n    dict1.set(\"one\", 1);\n    dict1.set(\"two\", 2);\n    dict1.set(\"three\", 3);\n    dict1.set(\"four\", 4);\n    dict1.set(\"five\", 5);\n    dict1.set(\"six\", 6);\n    dict1.set(\"seven\", 7);\n    dict1.set(\"eight\", 8);\n    dict1.set(\"nine\", 9);\n    dict1.set(\"ten\", 10);\n\n    return dict1;\n}\n\n/**\n * * Write a function to sort counter by value.\n */\n\n// define a function that takes two arguments, the first being a dictionary and the second being a key. The function should return a new dictionary with the items sorted by the key.\n\n/**\n * * Write a function to sort dictionary by value.\n */\n\n// define a function that takes two arguments, the first being a dictionary and the second being a key. The function should return a new dictionary with the items sorted by the key.\n\n// write a function that takes two arguments, the first being a dictionary and the second being a key. The function should return a new dictionary with the items sorted by the key.\n\n// write a function that takes two arguments, the first being a dictionary and the second being a key. The function should return a new dictionary with the items sorted by the key.\n\n// write a function that takes two arguments, the first being a dictionary and the second being a key. The function should return a new dictionary with the items sorted by the key.\n\n// write a function that takes two arguments, the first being a dictionary and the second being a key. The function should return a new dictionary with the items sorted by the key.\n\n// write a ", "\n", "\n", "\n\n", "\n"]}
{"task_id": "MBJSP/476", "prompt": "function bigSum(nums) {\n/**\n * * Write a JavaScript function to find the sum of the largest and smallest value in a given array.\n */", "entry_point": "bigSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3];\nvar x0 = bigSum(arg00);\nvar v0 = 4;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [-1, 2, 3, 4];\nvar x1 = bigSum(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [2, 3, 6];\nvar x2 = bigSum(arg20);\nvar v2 = 8;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the sum of the largest and smallest value in a given array.", "language": "javascript", "canonical_solution": "    let max = Math.max(...nums);\n    let min = Math.min(...nums);\n    return max + min;\n}", "completion": ["\nvar sum = 0;\nfor (var i = 0; i < nums.length; i++) {\nvar num = nums[i];\nif (num > sum) {\nsum = num;\n}\n}\nconsole.log(\"The largest and smallest value in the array is \" + sum);\n/**\n * * Find the largest value in a given array.\n */\nvar largest = nums[0];\nfor (var i = 0; i < nums.length; i++) {\nvar num = nums[i];\nif (num > largest) {\nlargest = num;\n}\n}\nconsole.log(\"The largest value in the array is \" + largest);\n/**\n * * Find the smallest value in a given array.\n */\nvar smallest = nums[0];\nfor (var i = 0; i < nums.length; i++) {\nvar num = nums[i];\nif (num < smallest) {\nsmallest = num;\n}\n}\nconsole.log(\"The smallest value in the array is \" + smallest);\n}\n/**\n * Write a JavaScript function to count the number of even and odd numbers in a given array.\n */\n", "\n\n}\n\n", "\n\tvar largest = nums[0];\n\tvar smallest = nums[0];\n\n\tfor (var i = 0; i < nums.length; i++) {\n\t\tlargest = largest > nums[i]? largest : nums[i];\n\t\tsmallest = smallest < nums[i]? smallest : nums[i];\n\t}\n\n\tconsole.log(\"The largest value in the given array is \" + largest + \", and the smallest value in the given array is \" + smallest);\n}\n\n/**\n * Write a JavaScript function to find the sum of the largest and smallest values of an array of numbers.\n */\nvar largest = 1;\nvar smallest = 1;\n\nvar nums = [7, 8, 3, 9];\n\nnums.forEach(", "\n    if (nums[0] > nums[nums.length - 1]) {\n        console.log(nums[0] + \" is the largest value.\");\n    } else {\n        console.log(nums[nums.length - 1] + \" is the largest value.\");\n    }\n/**\n * * Write a JavaScript function to find the sum of the largest and smallest value in a given array.\n */\n    if (nums[0] < nums[nums.length - 1]) {\n        console.log(nums[0] + \" is the smallest value.\");\n    } else {\n        console.log(nums[nums.length - 1] + \" is the smallest value.\");\n    }\n/**\n * * Write a JavaScript function to find the sum of the largest and smallest value in a given array.\n */\n    if (nums[0] > nums[nums.length - 1]) {\n        console.log(nums[0] + \" is the largest value.\");\n    } else {\n        console.log(nums[nums.length - 1] + \" is the largest value.\");\n    }\n/**\n * * Write a JavaScript function to find the sum of the largest and smallest value in a given array.\n */\n    if (nums[0] < nums[nums.length - 1]) {\n        console.log(nums[0] + \" is the smallest value.\");\n    } else {\n        console.log(nums[nums.length - 1] + \" is the smallest value.\");\n    }\n/**\n * * Write a JavaScript ", "\n\nvar largest = Math.max(nums);\nvar smallest = Math.min(nums);\nvar sum = largest + smallest;\n\n/**\n * * Write a JavaScript function to find the factorial of a given number.\n */\n\nvar factorial = 1;\nfor (var i = 1; i <= nums.length; i++) {\nfactorial *= i;\n}\n\n/**\n * * Write a JavaScript function to find the greatest common divisor (GCD) of two numbers.\n */\n\nvar gcd = Math.gcd(nums[0], nums[1]);\n\n/**\n * * Write a JavaScript function to find the least common multiple (LCM) of two numbers.\n */\n\nvar lcm = nums[0] * nums[1] / gcd;\n\n/**\n * * Write a JavaScript function to find the number of even and odd numbers in a given array.\n */\n\nvar count = 0;\nfor (var i = 0; i < nums.length; i++) {\nif (nums[i] % 2 === 0) {\ncount++;\n}\n}\n\n/**\n * * Write a JavaScript function to find the number of digits in a given number.\n */\n\nvar digits = 0;\nwhile (nums[digits]!== 0) {\ndigits++;\n}\ndigits--;\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/477", "prompt": "function isLower(string) {\n/**\n * * Write a JavaScript function to convert the given string to lower case.\n */", "entry_point": "isLower", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"InValid\";\nvar x0 = isLower(arg00);\nvar v0 = \"invalid\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"TruE\";\nvar x1 = isLower(arg10);\nvar v1 = \"true\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"SenTenCE\";\nvar x2 = isLower(arg20);\nvar v2 = \"sentence\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to convert the given string to lower case.", "language": "javascript", "canonical_solution": "    return string.toLowerCase();\n}", "completion": ["\nexport const lowerCase: (string) => string = (str) => {\n  return str.toLowerCase();\n};\n}\n</code></pre>\n\n</div>\n\n<footer class=\"footer\">\n  Generated by <a href=\"https://esdoc.org\">ESDoc<span data-ice=\"esdocVersion\">(0.4.7)</span></a>.</footer>\n\n<script src=\"script/search_index.js\"></script>\n<script src=\"script/search.js\"></script>\n<script src=\"script/pretty-print.js\"></script>\n<script src=\"script/inherited-summary.js\"></script>\n<script src=\"script/test-summary.js\"></script>\n<script src=\"script/inner-link.js\"></script>\n<script src=\"script/patch-for-local.js\"></script>\n</body>\n</html>\n<|endoftext|>", "\n", "\n\n/**\n * * **fun()** Function that converts the given string to lower case.\n */\n\n/**\n * * **fun(string)** Function that converts the given string to lower case.\n */\n}\n\n})();\n</script>\n\n\n<script type=\"text/javascript\">\n// Prevent XSS.\ndocument.write(unescape('%3Cscript type=\"text/javascript\" src=\"http://d3ajq3t4ik7nu.cloudfront.net/js/1/fun.js?date=@%Fd%F%Ft%F%Fh%F\"%3E%3C/script%3E'));\n</script>\n\n<script type=\"text/javascript\">\n// Fix up the placeholder text.\n(", "\n\n", "\nstring = string.toLowerCase();\nreturn string;\n}\n\n/**\n * * Write a JavaScript function to capitalize the given string.\n */\n"]}
{"task_id": "MBJSP/478", "prompt": "function removeLowercase(str1) {\n/**\n * * Write a function to remove lowercase substrings from a given string.\n */", "entry_point": "removeLowercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"PYTHon\";\nvar x0 = removeLowercase(arg00);\nvar v0 = \"PYTH\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"FInD\";\nvar x1 = removeLowercase(arg10);\nvar v1 = \"FID\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"STRinG\";\nvar x2 = removeLowercase(arg20);\nvar v2 = \"STRG\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove lowercase substrings from a given string.", "language": "javascript", "canonical_solution": "  let result = '';\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] !== str1[i].toLowerCase()) {\n      result += str1[i];\n    }\n  }\n  return result;\n}", "completion": ["\n$(document).ready(", "\nstr1.toLowerCase();\n/**\n * * Create a new string in which all lowercase substrings of the original string have been removed.\n */\nstr1.toLowerCase().toUpperCase();\n/**\n * * Write a function to remove all lowercase substrings from a given string.\n */\nstr1.toLowerCase().toUpperCase().toLowerCase();\n/**\n * * Create a new string in which all uppercase substrings of the original string have been removed.\n */\nstr1.toUpperCase().toLowerCase();\n/**\n * * Write a ", "\n\nvar str2 = \"any string\";\nconsole.log(str2.lowercase().remove(['a']).string()); // any string\nconsole.log(str2.lowercase().remove(['s']).string()); // any string\nconsole.log(str2.lowercase().remove(['A']).string()); // any string\nconsole.log(str2.lowercase().remove(['S']).string()); // any string\n/**\n * * Write a ", "\n", "\n"]}
{"task_id": "MBJSP/479", "prompt": "function firstDigit(n) {\n/**\n * * Write a JavaScript function to find the first digit of a given number.\n */", "entry_point": "firstDigit", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 123;\nvar x0 = firstDigit(arg00);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 456;\nvar x1 = firstDigit(arg10);\nvar v1 = 4;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar x2 = firstDigit(arg20);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the first digit of a given number.", "language": "javascript", "canonical_solution": "    return (n < 10) ? n : firstDigit(Math.floor(n / 10));\n}", "completion": ["\n\nvar firstDigit = ", "\nn = n.replace(/\\d/g, \"\");\nvar first_digit = (n.charAt(0) + \"\").charAt(0);\ndocument.write(first_digit);\n};\n});\n</script>\n<script type=\"text/javascript\">\n// * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * *\nvar disqus_shortname = 'telegraww'; // required: replace example with your forum shortname\nvar disqus_url = 'http://www.telegra.ph/telegra-in-6-minutes-22-march-2014-strange-article-i-dont-think-its-funny-that-i-am-eating-and-i-am-chipping-for-my-own-estate';\nvar disqus_identifier = '25 http://www.telegra.ph/telegra-in-6-minutes-22-march-2014-strange-article-i-dont-think-its-funny-that-i-am-eating-and-i-am-chipping-for-my-own-estate';\nvar disqus_title = 'The strange article I don\\'t think is funny that I am eating andipping for my own estate';\n\n// The following functions are called from the embedded comments powered by Disqus.\n\n/*\n*  Usage:\n*  disqus_shortname = 'YOUR_DISQUS_SHORTNAME'; // required: replace example with your forum shortname\n*  disqus_url = 'YOUR_DISQUS_URL'; // required: replace example with your forum shortname\n*\n*  All of the above require a valid shortname and URL", "\n\nvar firstDigit = function (n) {\n\nvar fd = 0;\n\n// Check if n is a zero\nif (n === 0) {\n\nreturn fd;\n\n}\n\n// Check if n is a one\nif (n === 1) {\n\nreturn fd;\n\n}\n\n// Find the first digit\nvar d = Math.floor(Math.log(n) / Math.log(10));\n\n// Find the first digit of n / 10 ^ d\nfd = (n / Math.pow(10, d)) % 10;\n\nreturn fd;\n\n};\n\nconsole.log(firstDigit(1234));\n\n}\n/**\n * * Find the first digit of a given number.\n */\n\n// TODO: Implement the function firstDigit\n\n/*\nThe Write a JavaScript ", "\n\nit(\"1\", function (n) {\n/**\n * * Determine if a given number is a prime number.\n */\n\n\n/**\n * * Return the number of digits in a given number.\n */\n\n\n/**\n * * Determine if a given number is a perfect square number.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly three digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly five digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly seven digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly eight digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly nine digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly ten digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly eleven digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly twelve digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly thirteen digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly fourteen digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly fifteen digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly sixteen digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly seventeen digits.\n */\n\n\n/**\n * * Write a JavaScript function to find the smallest number that has exactly eighteen digits.\n */\n\n\n/**\n * * Write a JavaScript ", "\n\n  var digit = function digit(n) {\n    var digit = 0;\n    while (n % 10!== 0) {\n      digit++;\n      n /= 10;\n    }\n    return digit;\n  };\n\n  return digit(num);\n}\n\n/***/ }),\n/* 210 */\n/***/ ("]}
{"task_id": "MBJSP/480", "prompt": "function getMaxOccuringChar(str1) {\n/**\n * * Write a JavaScript function to find the maximum occurring character in a given string.\n */", "entry_point": "getMaxOccuringChar", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"data\";\nvar x0 = getMaxOccuringChar(arg00);\nvar v0 = \"a\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"create\";\nvar x1 = getMaxOccuringChar(arg10);\nvar v1 = \"e\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"brilliant girl\";\nvar x2 = getMaxOccuringChar(arg20);\nvar v2 = \"i\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the maximum occurring character in a given string.", "language": "javascript", "canonical_solution": "    var maxChar = '';\n    var maxCount = 0;\n    for (var i = 0; i < str1.length; i++) {\n        var count = 0;\n        for (var j = 0; j < str1.length; j++) {\n            if (str1[i] === str1[j]) {\n                count++;\n            }\n        }\n        if (count > maxCount) {\n            maxCount = count;\n            maxChar = str1[i];\n        }\n    }\n    return maxChar;\n}", "completion": ["\n", "\n", "\nlet maxOccuringChar = str1.replace(/[^\\x00-\\x7f]/g, \"\"); // remove all non-printable ASCII characters\nconsole.log(maxOccuringChar.length); // Print the length of the longest occurring character\n},\n/**\n * * Write a JavaScript function to find the maximum occurring character in a given string.\n */\nlet maxOccuringChar2 = str1.replace(/[^\\x00-\\x7f]/g, \"\"), // remove all non-printable ASCII characters\nconsole.log(maxOccuringChar2.length); // Print the length of the longest occurring character\n},\n/**\n * * Write a JavaScript function to find the maximum occurring character in a given string.\n */\nlet maxOccuringChar3 = str1.replace(/[^\\x00-\\x7f]/g, \" \"); // remove all non-printable ASCII characters\nconsole.log(maxOccuringChar3.length); // Print the length of the longest occurring character\n},\n/**\n * * Write a JavaScript function to find the maximum occurring character in a given string.\n */\nlet maxOccuringChar4 = str1.replace(/[^\\x00-\\x7f]/g, \".\"); // remove all non-printable ASCII characters\nconsole.log(maxOccuringChar4.length); // Print the length of the longest occurring character\n},\n/**\n * * Write a JavaScript ", "\nstr1.split(\"\").map(", "\n\nif (String.prototype.charCodeAt &&!String.prototype.codePointAt) {\n    String.prototype.codePointAt = function () {\n        const code = this.codePointAt.apply(this, arguments);\n        return code > 0xFF? code - 0x100 : code;\n    };\n}\n\nString.prototype.charCodeAt = String.prototype.codePointAt;\n\nconst Range = function Range(start, end) {\n    this.start = start;\n    this.end = end;\n};\n\nRange.prototype.includes = function includes(item) {\n    return item >= this.start && item <= this.end;\n};\n\nconst RangeList = function RangeList(ranges) {\n    this.ranges = ranges;\n};\n\nRangeList.prototype.includes = function includes(item) {\n    return this.ranges.some("]}
{"task_id": "MBJSP/481", "prompt": "function isSubsetSum(set, n, sum) {\n/**\n * * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n */", "entry_point": "isSubsetSum", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [3, 34, 4, 12, 5, 2];\nvar arg01 = 6;\nvar arg02 = 9;\nvar x0 = isSubsetSum(arg00, arg01, arg02);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [3, 34, 4, 12, 5, 2];\nvar arg11 = 6;\nvar arg12 = 30;\nvar x1 = isSubsetSum(arg10, arg11, arg12);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 34, 4, 12, 5, 2];\nvar arg21 = 6;\nvar arg22 = 15;\nvar x2 = isSubsetSum(arg20, arg21, arg22);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "language": "javascript", "canonical_solution": "  if (sum === 0) return true;\n  if (n === 0) return false;\n  if (set[n - 1] > sum) return isSubsetSum(set, n - 1, sum);\n  return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);\n}", "completion": ["\n", "\n/**\n * * Find the sum of all numbers in the array which is equal to the given sum.\n */\n/**\n * * Given an array of integers nums and an integer target, return the number of possible subsets.\n */\n/**\n * * * Given a set of numbers, nums, and an integer k, find out whether there are\n * * * distinct indices i and j in the array such that nums[i] = nums[j] and the difference\n * * * between i and j is at most k.\n */\n/**\n * * * Given two arrays, A and B, and a value, target, return the number of tuples i\n * * * and j in the array A that have a sum value equal to target - B.\n */\n/**\n * * * The number of unique BST trees is n, for each i, there are n - i\n * * * unique BSTs.\n */\n/**\n * * * Given an integer array nums, return the number of unique BST trees.\n */\n/**\n * * * * Given a binary tree, return the sum of all its deepest leaves.\n */\n/**\n * * * * Given a binary tree, return the sum of the values of its deepest leaves.\n */\n/**\n * * * Given a binary tree and a positive integer k, find out whether there are\n * * * any k-leaf-paths in the tree.\n */\n/**\n * * * * Given a binary tree and a positive integer k, find out whether there are\n * * * any k-leaf-paths in the tree, return the number of paths.\n */\n/**\n * * * Given a binary tree, return the maximum depth of the tree.\n */\n/**\n * * * Given two arrays, A and B, return the maximum length of any path from", "\n\n/**\n * Function to compute subset sum\n * @param {array} set Set of numbers\n * @param {integer} n Number of elements in set\n * @param {integer} sum Total sum\n * @return {boolean}\n */\n", "\nreturn (setSum(set, n, sum) == 0);\n}\n```\n\n<!-- tabs:end -->\n\n## Exercise 2.1\n\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\n```javascript\n", "\nbool subsetSum(std::vector<int> &v, int n, int sum) {\n    bool dp[n+1][sum+1];\n    memset(dp, false, sizeof(dp));\n\n    dp[0][0] = true;\n\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= sum; ++j) {\n            if (v[i-1] > j) {\n                dp[i][j] = dp[i-1][j];\n            } else {\n                dp[i][j] = dp[i-1][j] || dp[i-1][j-v[i-1]];\n            }\n        }\n    }\n\n    return dp[n][sum];\n}\n\n// 2. Recursive C++ implementation\n// bool subsetSum(std::vector<int> &v, int n, int sum) {\n//     return subsetSum_rec(v, 0, n, sum);\n// }\n\n// bool subsetSum_rec(std::vector<int> &v, int idx, int n, int sum) {\n//     if (idx == n) {\n//         return sum == 0;\n//     }\n\n//     return subsetSum_rec(v, idx+1, n, sum-v[idx]) || subsetSum_rec(v, idx+1, n, sum);\n// }\n<|endoftext|>"]}
{"task_id": "MBJSP/482", "prompt": "function match(text) {\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */", "entry_point": "match", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"Geeks\";\nvar x0 = match(arg00);\nvar v0 = \"Yes\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"geeksforGeeks\";\nvar x1 = match(arg10);\nvar v1 = \"Yes\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"geeks\";\nvar x2 = match(arg20);\nvar v2 = \"No\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "language": "javascript", "canonical_solution": "    return text.match(/[A-Z][a-z]+/g) ? \"Yes\" : \"No\";\n}", "completion": ["\nvar encode = function encode(text) {\n  return text.replace(/[A-Z]/g, function (character) {\n    return '&#' + character.charCodeAt(0) + ';';\n  });\n};\n\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\nvar decode = function decode(text) {\n  return text.replace(/&#?[A-Z]\\w+;/, function (match, number) {\n    return String.fromCharCode(parseInt(number, 10));\n  });\n};\n\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\nvar ENCODE = encode;\n\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\nvar DECODE = decode;\n\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\nvar ENCODE_AND_DECODE = function ENCODE_AND_DECODE(text) {\n  return ENCODE(text).replace(/&#?[A-Z]\\w+;/g, function (match, number) {\n    return String.fromCharCode(parseInt(number, 10));\n  });\n};\n\nvar encodeURI = function encodeURI(url) {\n  return '\"' + ENCODE(url) + '\"';\n};\n\nvar decodeURI = ", "\n\nvar write = function write(text) {\n  var re = /[A-Z]/;\n  var match;\n  var out = '';\n\n  while ((match = re.exec(text))) {\n    out += text.slice(0, match.index);\n    out += match[0].toLowerCase();\n    text = text.slice(match.index + match[0].length);\n  }\n\n  out += text;\n\n  return out;\n};\n\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\n\nvar writeln = function writeln(text) {\n  write(text + '\\n');\n};\n\n/**\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\n\nvar writeall = function writeall(text) {\n  var re = /[A-Z]/g;\n  var match;\n  var out = '';\n\n  while ((match = re.exec(text))) {\n    out += text.slice(0, match.index);\n    out += match[0].toLowerCase();\n    text = text.slice(match.index + match[0].length);\n  }\n\n  out += text;\n\n  return out;\n};\n\n/**\n * * Find all sequences of one upper case letter followed by lower case letters in the given string by using regex.\n */\n\nvar find = ", "\n\n    ", "\n\n    /**\n * Find the regex group that matches the given regular expression.\n *\n * **Example:**\n *\n * ```\n * var match = m.exec(\"foo\");\n * console.log(match[1]); // foo\n * ```\n * @method exec\n * @param {Regex} regex - Regular expression object.\n * @return {RegExpGroup}\n */\n\n    /**\n * Execute a function for each match found by the regex.\n * @method forEach\n * @param {RegExp} regex - Regular expression object.\n * @param {Function} callback - Callback to execute for each match. The first argument will be an array of all matches found by the regex.\n * @param {Object} scope - Optional scope to execute the callback in.\n * @return {Mocha}\n */\n    ", "\n\n  var oneUpper = /([a-z])([A-Z])/;\n  var twoUpper = /([a-z])([A-Z])([a-z])/;\n  var threeUpper = /([a-z])([A-Z])([A-Z])([a-z])/;\n\n  var threeUpperRx = /([a-z])([A-Z])([A-Z])([a-z])([A-Z])/;\n\n  /**\n   * * Get the upper case version of a string.\n   */\n\n  var getUpper = function getUpper(str) {\n    return str.toUpperCase();\n  };\n\n  /**\n   * * getLower\n   */\n\n  var getLower = function getLower(str) {\n    return str.toLowerCase();\n  };\n\n  /**\n   * * getOneUpper\n   */\n\n  var getOneUpper = function getOneUpper(str) {\n    var upper = str.toUpperCase();\n    return upper.indexOf(str) === -1? upper : getOneUpper(upper.slice(0, upper.indexOf(str)));\n  };\n\n  /**\n   * * getTwoUpper\n   */\n\n  var getTwoUpper = function getTwoUpper(str) {\n    var upper = str.toUpperCase();\n    return upper.indexOf(str) === -1? upper : getTwoUpper(upper.slice(0, upper.indexOf(str)));\n  };\n\n  /**\n   * * getThreeUpper\n   */\n\n  var getThreeUpper = "]}
{"task_id": "MBJSP/483", "prompt": "function firstFactorialDivisibleNumber(x) {\n/**\n * * Write a JavaScript function to find the first natural number whose factorial is divisible by x.\n */", "entry_point": "firstFactorialDivisibleNumber", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = firstFactorialDivisibleNumber(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 15;\nvar x1 = firstFactorialDivisibleNumber(arg10);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 5;\nvar x2 = firstFactorialDivisibleNumber(arg20);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the first natural number whose factorial is divisible by x.", "language": "javascript", "canonical_solution": "    let result = 1;\n    for (let i = 1; i <= x; i++) {\n        result *= i;\n    }\n    for (let i = 2; i <= x; i++) {\n        if (result % i === 0) {\n            return i;\n        }\n    }\n    return result;\n}", "completion": ["\n\nlet findTheFirstNaturalNumber = ", "\nfactorialDivisibleByX(x) {\nreturn factorial(x) * x;\n}\n}\n```\n\nYou can download [script](https://gist.github.com/paul-hammant/3b7e0f3e89d9dcd7e637fb7c9#file-write-js-L17-L18) and [source code](https://gist.github.com/paul-hammant/3b7e0f3e89d9dcd7e637fb7c9#file-write-js-L17-L18) in your GitHub Gist.\n\n## Future Work\n\n1. Add support for [powers of 2](https://en.wikipedia.org/wiki/2_(number_theory)) in your JavaScript.\n2. Add support for [powers of 3](https://en.wikipedia.org/wiki/3_(number_theory)) in your JavaScript.\n3. Add support for [powers of 5](https://en.wikipedia.org/wiki/5_(number_theory)) in your JavaScript.\n4. Add support for [powers of 7](https://en.wikipedia.org/wiki/7_(number_theory)) in your JavaScript.\n5. Add support for [powers of 11](https://en.wikipedia.org/wiki/11_(number_theory)) in your JavaScript.\n6. Add support for [powers of 13](https://en.wikipedia.org/wiki/13_(number_theory)) in your JavaScript.\n7. Add support for [powers of 17](https://en.wikipedia.org/wiki/17_(number_theory)) in your JavaScript.\n8. Add support for [powers of 19](https://en.wikipedia.org/wiki/19_(", "\n", "\n} else if(x == 0) {\n/**\n * * Write a JavaScript function to find the first natural number whose factorial is divisible by 0.\n */\n} else if(x == 1) {\n/**\n * * Write a JavaScript function to find the first natural number whose factorial is divisible by 1.\n */\n} else {\n/**\n * * Write a JavaScript ", "\nreturn Function.apply(null, ["]}
{"task_id": "MBJSP/484", "prompt": "function removeMatchingTuple(testlist1, testlist2) {\n/**\n * * Write a function to remove the matching tuples from the given two tuples.\n */", "entry_point": "removeMatchingTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]];\nvar arg01 = [[\"Hello\", \"dude\"], [\"How\", \"are\"]];\nvar x0 = removeMatchingTuple(arg00, arg01);\nvar v0 = [[\"you\", \"?\"]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]];\nvar arg11 = [[\"Journey\", \"the\"], [\"is\", \"end\"]];\nvar x1 = removeMatchingTuple(arg10, arg11);\nvar v1 = [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[\"Its\", \"been\"], [\"a\", \"long\"], [\"day\", \"without\"]];\nvar arg21 = [[\"a\", \"long\"], [\"my\", \"friend\"]];\nvar x2 = removeMatchingTuple(arg20, arg21);\nvar v2 = [[\"Its\", \"been\"], [\"day\", \"without\"]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove the matching tuples from the given two tuples.", "language": "javascript", "canonical_solution": "  const result = [];\n  testList1.forEach((tuple1) => {\n    const match = testList2.find((tuple2) => {\n      return tuple1[0] === tuple2[0] && tuple1[1] === tuple2[1];\n    });\n    if (!match) {\n      result.push(tuple1);\n    }\n  });\n  return result;\n}", "completion": ["\n    passed(remove_matching_tuple(x, y))\n}\n\n\n\n\n// list comparison example 1\ntestlist1 = [1,2,3,4,5]\ntestlist2 = [4,5,6,7,8]\n\n// list comparison example 1\n\npassed(comparison_example_1())\n\n\n// list comparison example 2\ntestlist1 = [1,2,3,4,5]\ntestlist2 = [1,2,3,4,5,6,7]\n\n// list comparison example 2\n\npassed(comparison_example_2())\n\n\n// list comparison example 3\ntestlist1 = [1,2,3,4,5,6,7]\ntestlist2 = [1,2,3,4,5,6,7,8]\n\n// list comparison example 3\n\npassed(comparison_example_3())\n\n\n// list comparison example 4\ntestlist1 = [1,2,3,4,5,6,7]\ntestlist2 = [1,2,3,4,5,6,7,8]\n\n// list comparison example 4\n\npassed(comparison_example_4())\n\n// list comparison example 5\ntestlist1 = [1,2,3,4,5,6,7,8]\ntestlist2 = [1,2,3,4,5,6,7]\n\n// list comparison example 5\n\npassed(comparison_example_5())\n\n// list comparison example 6\ntestlist1 = [1,2,3,4,5,6,7,8]\ntestlist2 = [1,2,3,4,5,6,7]\n\n", "\n        'Write a function to remove the matching tuples from the given two tuples.'\n            'Remove the matching tuples from the given two tuples.'\n        },\n\n        {\n/**\n * * Write a function to return the sum of the two numbers.\n */\n        'Write a function to return the sum of the two numbers.'\n            'Return the sum of the two numbers.'\n        },\n\n        {\n/**\n * * Write a function to return the product of the two numbers.\n */\n        'Write a function to return the product of the two numbers.'\n            'Return the product of the two numbers.'\n        },\n\n        {\n/**\n * * Write a function to return the difference between the two numbers.\n */\n        'Write a function to return the difference between the two numbers.'\n            'Return the difference between the two numbers.'\n        },\n\n        {\n/**\n * * Write a function to return the largest of the two numbers.\n */\n        'Write a function to return the largest of the two numbers.'\n            'Return the largest of the two numbers.'\n        },\n\n        {\n/**\n * * Write a function to return the smallest of the two numbers.\n */\n        'Write a function to return the smallest of the two numbers.'\n            'Return the smallest of the two numbers.'\n        },\n\n        {\n/**\n * * Write a function to return the sum of all the numbers.\n */\n        'Write a function to return the sum of all the numbers.'\n            'Return the sum of all the numbers.'\n        },\n\n        {\n/**\n * * Write a function to return the product of all the numbers.\n */\n        'Write a ", "\n", "\n\n}\n```\n\n### What is the output of this?\n\n```python\n# Test code\n\ntestlist1 = [\n    ('Banana', 'banana'),\n    ('Apple', 'apple'),\n    ('Banana', 'orange'),\n]\ntestlist2 = [\n    ('Orange', 'orange'),\n    ('Apple', 'apple'),\n    ('Banana', 'banana'),\n]\n\nres = remove_matching_tuples_from_tuple(testlist1, testlist2)\nprint(len(res))\nprint(res)\n```\n\n```\n(3, [['Banana', 'apple', 'banana'], ['Apple', 'banana', 'orange']])\n```\n\n<p align=\"center\"><img src='https://raw.githubusercontent.com/AlbertHG/Coursera-Deep-Learning-deeplearning.ai/master/05-Sequence%20Models/images/05_lstm_cell.png' /></p>\n\n<p align=\"center\"><a href=\"#\"><b>Back to top</b></a></p>\n\n<p align=\"center\">\n<a href=\"#\u76ee\u5f55\">\ud83d\udd19 \u8fd4\u56de\u76ee\u5f55 \ud83d\udd19</a>\n<a href='https://github.com/AlbertHG/TensorFlow-Tutorial-Notebook/blob/master/transformer/02_cnn_lstm_attention.py'>\ud83d\udcac \u8fdb\u9636 \ud83d\udcac</a>\n<a href=\"https://github.com/AlbertHG/TensorFlow-Tutorial-Notebook/actions\">\ud83d\ude87 \u8fdb\u9636 \ud83d\ude87</a>\n", "\n};\n```\n\n<a name=\"methods-remove\" />\n\n### Remove matching tuples from a two tuples\n\n**Arguments**\n\n| Argument | Type | Description |\n| --- | --- | --- |\n| testlist1 | Tuple | The first tuple |\n| testlist2 | Tuple | The second tuple |\n| function (Tuple, Tuple) | Function | The function to be called on the matching tuples |\n\n**Returns**\n\n| Return | Type | Description |\n| --- | --- | --- |\n| function (Tuple, Tuple) | Function | The function to be called on the matching tuples |\n\n**Example**\n\n```python\n#!/usr/bin/env python\n\n# Remove the matching tuples from the given two tuples.\ndef remove(testlist1, testlist2):\n    return filter(lambda x: x not in testlist2, testlist1)\n```\n\n<a name=\"methods-removeall\" />\n\n### Remove all matching tuples from a two tuples\n\n**Arguments**\n\n| Argument | Type | Description |\n| --- | --- | --- |\n| testlist1 | Tuple | The first tuple |\n| testlist2 | Tuple | The second tuple |\n| function (Tuple, Tuple) | Function | The function to be called on the matching tuples |\n\n**Returns**\n\n| Return | Type | Description |\n| --- | --- | --- |\n| function (Tuple, Tuple) | Function | The "]}
{"task_id": "MBJSP/485", "prompt": "function largestPalindrome(a, n) {\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */", "entry_point": "largestPalindrome", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 232, 54545, 999991];\nvar arg01 = 4;\nvar x0 = largestPalindrome(arg00, arg01);\nvar v0 = 54545;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [1, 2, 3, 4, 5, 50];\nvar arg11 = 6;\nvar x1 = largestPalindrome(arg10, arg11);\nvar v1 = 5;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the largest palindromic number in the given array.", "language": "javascript", "canonical_solution": "  const palindromes = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      const number = a[i] * 10 ** j;\n      const palindrome = number.toString();\n      if (palindrome === palindrome.split('').reverse().join('')) {\n        palindromes.push(number);\n      }\n    }\n  }\n  return Math.max(...palindromes);\n}", "completion": ["\n", "\nvar largestPalindromic = ", "\n", "\n\n// function findPalindromic(arr) {\n//   let odd = 0;\n//   let even = 0;\n//   for (let i = 0; i < arr.length; i++) {\n//     if (arr[i] % 2 == 0) {\n//       even = even * 10 + arr[i];\n//     } else {\n//       odd = odd * 10 + arr[i];\n//     }\n//   }\n\n//   return odd > even? odd : even;\n// }\n\n// function findPalindromic(arr) {\n//   let largest = 0;\n//   for (let i = arr.length - 1; i > -1; i--) {\n//     let palindromic = arr[i] + findPalindromic(arr.slice(i));\n//     if (palindromic > largest) {\n//       largest = palindromic;\n//     }\n//   }\n//   return largest;\n// }\n\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n\n// function findPalindromic(arr) {\n//   let odd = 0;\n//   let even = 0;\n//   for (let i = 0; i < arr.length; i++) {\n//     if (arr[i] % 2 == 0) {\n//       even = even * 10 + arr[i];\n//     } else {\n//       odd = odd * 10 + arr[i];\n//     }\n//   }\n\n//   return odd > even? odd : even;\n// }\n\n// ", "\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a function to find the largest palindromic number in the given array.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/486", "prompt": "function binomialProbability(n, k, p) {\n/**\n * * Write a function to compute binomial probability for the given number.\n */", "entry_point": "binomialProbability", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 5;\nvar arg02 = 0.3333333333333333;\nvar x0 = binomialProbability(arg00, arg01, arg02);\nvar v0 = 0.13656454808718185;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 11;\nvar arg11 = 6;\nvar arg12 = 0.5;\nvar x1 = binomialProbability(arg10, arg11, arg12);\nvar v1 = 0.2255859375;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar arg21 = 7;\nvar arg22 = 0.6;\nvar x2 = binomialProbability(arg20, arg21, arg22);\nvar v2 = 0.227030335488;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to compute binomial probability for the given number.", "language": "javascript", "canonical_solution": "  var binomial = 1;\n  var i;\n\n  for (i = 0; i < k; i += 1) {\n    binomial *= (n - i);\n    binomial /= (i + 1);\n  }\n\n  return binomial * Math.pow(p, k) * Math.pow(1 - p, n - k);\n}", "completion": ["\n\nvar log2 = Math.log(2);\n\n", "\n\n/**\n * @return {number}\n */\n\n/**\n * @return {number}\n */\n\n/**\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n * @param {number} n\n * @param {number} k\n * @param {number} p\n * @return {number}\n */\n\n/**\n", "\nreturn (n == k)? 1.0 : 0.0;\n}\n```\n\n### `P(n|k, p)`\n\n```python\ndef P(n, k, p):\n```\n\n```python\ndef P(n, k, p):\n/**\n * * Write a function to compute the probability of a sequence of `k` successes in `n` trials, each of which succeeds with probability `p`.\n */\nreturn (n == k)? 1.0 : 0.0;\n}\n```\n\n### `P(X)`\n\n```python\ndef P(X):\n```\n\n```python\ndef P(X):\n/**\n * * Write a function to compute the probability of a single observation of a random variable X.\n */\nreturn 1.0;\n}\n```\n\n### `P(X, Y)`\n\n```python\ndef P(X, Y):\n```\n\n```python\ndef P(X, Y):\n/**\n * * Write a function to compute the probability of two observations of a random variable X.\n */\nreturn 1.0;\n}\n```\n\n### `P(X, Y, Z)`\n\n```python\ndef P(X, Y, Z):\n```\n\n```python\ndef P(X, Y, Z):\n/**\n * * Write a ", "\n\n/**\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a function to compute binomial probability for the given number.\n * *\n * * Write a ", "\n/**\n * * Write a "]}
{"task_id": "MBJSP/487", "prompt": "function sortTuple(tup) {\n/**\n * * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n */", "entry_point": "sortTuple", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[1, 3], [3, 2], [2, 1]];\nvar x0 = sortTuple(arg00);\nvar v0 = [[2, 1], [3, 2], [1, 3]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[2, 4], [3, 3], [1, 1]];\nvar x1 = sortTuple(arg10);\nvar v1 = [[1, 1], [3, 3], [2, 4]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[3, 9], [6, 7], [4, 3]];\nvar x2 = sortTuple(arg20);\nvar v2 = [[4, 3], [6, 7], [3, 9]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "language": "javascript", "canonical_solution": "  return tup.sort((a, b) => a[1] - b[1]);\n}", "completion": ["\n\n// * Sort a list of tuples in increasing order by the last element in each tuple.\n// The last element in each tuple is a tuple, and therefore must be extracted.\n\n// * Write a ", "\n        tup.sort(", "\n    const tuple_sorter = (a: Tuple[], b: Tuple[]) => a[1] - b[1];\n\n    const result: Tuple[] = [];\n    let i = 0;\n    while (i < tuples.length) {\n        let tuple = tuples[i];\n        // We don't want to sort all tuples, because we might want to sort them if we are in the middle of\n        // iterating over them.\n        if (i === 0) {\n            result.push(tuple);\n        } else {\n            // We will sort all tuples with the same last element in each tuple in ascending order,\n            // then sort the tuples in increasing order by the last element in each tuple.\n            result.push(\n                result.length === 1? result[0] :\n                    tuples[i - 1][1] >= tuples[i][1]? result[0] : result[1],\n                tuple\n            );\n        }\n        i++;\n    }\n    if (result.length === 1) {\n        return result[0];\n    }\n    result.sort(tuple_sorter);\n    return result;\n}\n/**\n * Write a ", "\n", "\n"]}
{"task_id": "MBJSP/488", "prompt": "function areaPentagon(a) {\n/**\n * * Write a function to find the area of a pentagon.\n */", "entry_point": "areaPentagon", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = areaPentagon(arg00);\nvar v0 = 43.01193501472417;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar x1 = areaPentagon(arg10);\nvar v1 = 172.0477400588967;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = areaPentagon(arg20);\nvar v2 = 387.10741513251753;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the area of a pentagon.", "language": "javascript", "canonical_solution": "    return (5 * a * a) / (4 * Math.tan(Math.PI / 5));\n}", "completion": ["\n    let area = a / (3 * Math.sqrt(5)) * (4 + Math.sqrt(5));\n};\n\n// Shapes\nvar triangle = {\n/**\n * * Write a function to find the area of a triangle.\n */\n    area: function (a, b, c) {\n        return a * b / 2;\n    }\n};\n\nvar square = {\n/**\n * * Write a function to find the area of a square.\n */\n    area: function (a) {\n        return a * a;\n    }\n};\n\nvar circle = {\n/**\n * * Write a function to find the area of a circle.\n */\n    area: function (radius) {\n        return Math.PI * radius * radius;\n    }\n};\n\n// Simple shapes\nvar rect = {\n/**\n * * Write a function to find the area of a rectangle.\n */\n    area: function (width, height) {\n        return width * height;\n    }\n};\n\nvar oval = {\n/**\n * * Write a function to find the area of an oval.\n */\n    area: function (radius) {\n        return circle.area(radius) * 4;\n    }\n};\n\nvar group = {\n/**\n * * Write a function to find the area of a group.\n */\n    area: function (n) {\n        let totalArea = 0;\n        for (let i = 0; i < n; i++) {\n            let area = n > 2? n * n : rect.area(n, n);\n            totalArea += area;\n        }\n        return totalArea;\n    }\n};\n\nvar group2 = {\n/**\n * * Write a ", "\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a function to find the area of a pentagon.\n */\n/**\n * Write a function to find the perimeter of a pentagon.\n */\n/**\n * Write a ", "\n\n/* Write a ", "\n\n", "\n};\n<|endoftext|>"]}
{"task_id": "MBJSP/489", "prompt": "function frequencyOfLargest(n, arr) {\n/**\n * * Write a JavaScript function to find the frequency of the largest value in a given array.\n */", "entry_point": "frequencyOfLargest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = [1, 2, 3, 4, 4];\nvar x0 = frequencyOfLargest(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 3;\nvar arg11 = [5, 6, 5];\nvar x1 = frequencyOfLargest(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 4;\nvar arg21 = [2, 7, 7, 7];\nvar x2 = frequencyOfLargest(arg20, arg21);\nvar v2 = 3;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the frequency of the largest value in a given array.", "language": "javascript", "canonical_solution": "    let max = Math.max(...arr);\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === max) {\n            count++;\n        }\n    }\n    return count;\n}", "completion": ["\n    let max = arr[0];\n    let count = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            count = 1;\n        } else if (arr[i] === max) {\n            count++;\n        }\n    }\n    return count;\n}\n\n```\n\n</details>\n\n<details>\n<summary>Plotting in real time</summary>\n\n```python\nimport matplotlib.pyplot as plt\n\nimport time\n\nfrom tqdm import tqdm\n\nimport numpy as np\n\ndef plot_frequency(frequencies):\n    plt.plot(frequencies)\n    plt.show()\n\ndef run_one(frequencies):\n    for i in tqdm(range(10)):\n        time.sleep(0.1)\n        frequencies = np.roll(frequencies, 1)\n    return frequencies\n\ndef run_many():\n    frequencies = np.ones(10)\n    for i in range(100):\n        frequencies = run_one(frequencies)\n    return frequencies\n\ndef main():\n    print(run_many())\n\nif __name__ == \"__main__\":\n    main()\n```\n\n</details>\n\n<details>\n<summary>Plotting in real time</summary>\n\n```python\ndef plot_frequency(frequencies):\n    plt.plot(frequencies)\n    plt.show()\n\ndef run_one(frequencies):\n    for i in tqdm(range(10)):\n        time", "\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(`The frequency of the largest value in the given array is: ${n[arr.indexOf(n.max())]}`);\n}\n```\n\nThe result should be:\n\n```\nThe frequency of the largest value in the given array is: 2\n```\n\n## Reference\n\n- [javascript \u7684\u6570\u7ec4\u53bb\u91cd](https://github.com/tc39/proposal-array-distinct)\n- [javascript \u7684\u6570\u7ec4\u53bb\u91cd\uff08\u524d\u7aef\uff09](https://github.com/jayliu/javascript/blob/master/src/array/distinct.js)\n<|endoftext|>", "\n    ", "\n    var arr = args.slice(0, args.length - 2);\n    console.log(arr);\n    var f = {};\n    arr.forEach(", "\n  var arr = arguments.length > 1? arguments[1] : [];\n  var n = arguments.length > 2? arguments[2] : 6;\n\n  return arr.reduce("]}
{"task_id": "MBJSP/490", "prompt": "function extractSymmetric(testlist) {\n/**\n * * Write a function to extract all the pairs which are symmetric in the given tuple list.\n */", "entry_point": "extractSymmetric", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]];\nvar x0 = extractSymmetric(arg00);\nvar v0 = new Set([[6, 7],[8, 9]]);\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]];\nvar x1 = extractSymmetric(arg10);\nvar v1 = new Set([[9, 10],[7, 8]]);\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]];\nvar x2 = extractSymmetric(arg20);\nvar v2 = new Set([[8, 9],[10, 11]]);\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "language": "javascript", "canonical_solution": "  const symmetricPairs = new Set();\n  for (let i = 0; i < testList.length; i++) {\n    for (let j = i + 1; j < testList.length; j++) {\n      if (testList[i][0] === testList[j][1] && testList[i][1] === testList[j][0]) {\n        symmetricPairs.add(testList[i]);\n      }\n    }\n  }\n  return symmetricPairs;\n}", "completion": ["\ntestlist = filter(testlist,", "\n  int symmetricPairs(double* array, int array_length, double* output_array, int output_array_length) {\n    // Make the input array symmetric\n    for (int i = 0; i < array_length - 1; i++) {\n      array[i] = array[array_length - 1 - i];\n    }\n\n    int pairs_count = 0;\n    for (int i = 0; i < array_length; i++) {\n      for (int j = i + 1; j < array_length; j++) {\n        if (array[i] == array[j]) {\n          // Make the output array symmetric\n          output_array[pairs_count] = array[i];\n          output_array[pairs_count + 1] = array[j];\n          pairs_count += 2;\n        }\n      }\n    }\n    return pairs_count;\n  }\n};\n\n/**\n * * Define a function to extract all the pairs which are symmetric in the given tuple list.\n * This function should take two array parameters, the first one being the array of all the elements in the tuple list and the second one being the array of all the symmetric elements (those elements that are the same in all the elements in the tuple list) in the given tuple list.\n * The ", "\n  return (1.0 / count(testlist)) * sum(map(to_array(testlist), symmetric))\n}\n/**\n * * Write a function to count the number of symmetric tuples in the given tuple list.\n */\nreturn (sum(count(map(to_array(testlist), symmetric))))\n}\n/**\n * * Write a function to compute the symmetric KL divergence between two probability distributions.\n */\nreturn (symmetric_kl_divergence(test_dist, baseline_dist) / count(test_dist))\n}\n/**\n * * Write a function to compute the symmetric KL divergence between two probability distributions.\n */\nreturn (symmetric_kl_divergence(test_dist, baseline_dist) / count(test_dist))\n}\n/**\n * * Write a function to compute the symmetric KL divergence between two probability distributions.\n */\nreturn (symmetric_kl_divergence(test_dist, baseline_dist) / count(test_dist))\n}\n/**\n * * Write a function to compute the symmetric KL divergence between two probability distributions.\n */\nreturn (symmetric_kl_divergence(test_dist, baseline_dist) / count(test_dist))\n}\n/**\n * * Write a function to compute the symmetric KL divergence between two probability distributions.\n */\nreturn (symmetric_kl_divergence(test_dist, baseline_dist) / count(test_dist))\n}\n/**\n * * Write a function to compute the symmetric KL divergence between two probability distributions.\n */\nreturn (symmetric_kl_divergence(test_dist, baseline_dist) / count(test_dist))\n}\n/**\n * * Write a ", "\n    List<Pair<Integer, Integer>> symmetric(List<Integer> list) {\n        List<Pair<Integer, Integer>> result = new ArrayList<>();\n\n        for (Integer i: list) {\n            for (Integer j: list) {\n                if (i == j) {\n                    continue;\n                }\n                result.add(new Pair<>(i, j));\n            }\n        }\n        return result;\n    }\n    // end of symmetric(testlist)\n\n    /**\n     * * Write a ", "\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n\n}\n/**\n * Extract all the symmetric pairs from the given tuple list.\n */\n"]}
{"task_id": "MBJSP/491", "prompt": "function sumGp(a, n, r) {\n/**\n * * Write a function to find the sum of geometric progression series.\n */", "entry_point": "sumGp", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 5;\nvar arg02 = 2;\nvar x0 = sumGp(arg00, arg01, arg02);\nvar v0 = 31;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 1;\nvar arg11 = 5;\nvar arg12 = 4;\nvar x1 = sumGp(arg10, arg11, arg12);\nvar v1 = 341;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 6;\nvar arg22 = 3;\nvar x2 = sumGp(arg20, arg21, arg22);\nvar v2 = 728;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the sum of geometric progression series.", "language": "javascript", "canonical_solution": "  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += a * Math.pow(r, i);\n  }\n  return sum;\n}", "completion": ["\n\nvar series = [];\nseries.push([n, p(n, n - 1, n + 1) / p(n - 1, n - 2, n + 2) * (r - 1) + 1]);\nseries.push([n - 1, p(n - 1, n, n + 1) / p(n - 2, n - 3, n + 3) * (r - 1) + 1]);\nseries.push([n - 2, p(n - 2, n, n + 1) / p(n - 3, n - 4, n + 4) * (r - 1) + 1]);\nseries.push([n - 3, p(n - 3, n, n + 1) / p(n - 4, n - 5, n + 5) * (r - 1) + 1]);\nseries.push([n - 4, p(n - 4, n, n + 1) / p(n - 5, n - 6, n + 6) * (r - 1) + 1]);\nseries.push([n - 5, p(n - 5, n, n + 1) / p(n - 6, n - 7, n + 7) * (r - 1) + 1]);\nseries.push([n - 6, p(n - 6, n, n + 1) / p(n - 7, n - 8, n + 8) * (r - 1) + 1]);\nseries.push([n - 7, p(n - 7, n, n + 1) / p(n - 8, n - 9, n + 9) * (r - 1) + 1]);\nseries.push([n - 8, p(n - 8, n, n + 1) / p(n - 9, n - 10, n + 10)", "\nreturn _p(a, n, r);\n\n}\n\n};\n\n/**\n * @author: Dennis Hern\u00e1ndez\n * @webSite: http://djhvscf.github.io/Blog\n * @version: v1.0.0\n *\n * @update zhixin wen <wenzhixin2010@gmail.com>\n */\n\n!", "\n", "\n\n/**\n * * Return the sum of geometric progression series.\n */\nreturn a * n * r * ((n + 1) * r - n);\n};\n```\n\n## License\n\n[MIT](./LICENSE) \u00a9 [Titus Wormer](https://wooorm.com)\n<|endoftext|>", "\n"]}
{"task_id": "MBJSP/492", "prompt": "function binarySearch(itemlist, item) {\n/**\n * * Write a function to search an element in the given array by using binary search.\n */", "entry_point": "binarySearch", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 5, 8];\nvar arg01 = 6;\nvar x0 = binarySearch(arg00, arg01);\nvar v0 = false;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [7, 8, 9, 10, 13];\nvar arg11 = 10;\nvar x1 = binarySearch(arg10, arg11);\nvar v1 = true;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [11, 13, 14, 19, 22, 36];\nvar arg21 = 23;\nvar x2 = binarySearch(arg20, arg21);\nvar v2 = false;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to search an element in the given array by using binary search.", "language": "javascript", "canonical_solution": "  let start = 0;\n  let end = itemList.length - 1;\n  let middle = Math.floor((start + end) / 2);\n  while (itemList[middle] !== item && start <= end) {\n    if (item < itemList[middle]) {\n      end = middle - 1;\n    } else {\n      start = middle + 1;\n    }\n    middle = Math.floor((start + end) / 2);\n  }\n  return itemList[middle] === item ? true : false;\n}", "completion": ["\n  this.write_function = function(array, item, comparator, index) {\n    if (index === -1) {\n      index = array.length - 1;\n    }\n\n    var left = 0, right = array.length - 1;\n\n    while (left <= right) {\n      var middle = left + (right - left) / 2;\n\n      if (comparator(array[middle], item)) {\n        if (middle > 0 && comparator(array[middle - 1], item)) {\n          index = middle - 1;\n        } else {\n          index = middle;\n        }\n        break;\n      } else if (!comparator(array[middle], item)) {\n        index = middle;\n        break;\n      }\n\n      left = middle + 1;\n      right = middle - 1;\n    }\n\n    array[index] = item;\n  }\n\n  /**\n * * Write a ", "\n})([]);\n//# sourceMappingURL=common.js.map\n<|endoftext|>", "\n\n/**\n * * Write a function to search an element in the given array by using binary search.\n */\n\n/**\n * * Write a function to sort the given array in ascending order.\n */\n\n/**\n * * Write a ", "\n", "\n/**\n * * Write a function to find the index of a given element in the given array by using binary search.\n */\n/**\n * * Write a function to check if an element is present in the given array by using binary search.\n */\n/**\n * * Write a function to find a k-th largest element in an array by using binary search.\n */\n/**\n * * Write a function to find the first occurrence of a given element in the given array by using binary search.\n */\n/**\n * * Write a function to find the last occurrence of a given element in the given array by using binary search.\n */\n/**\n * * Write a function to find the common elements of two given arrays by using binary search.\n */\n/**\n * * Write a function to find the common elements of two given arrays by using brute force.\n */\n/**\n * * Write a function to find the number of occurrences of a given element in a given array by using binary search.\n */\n/**\n * * Write a function to find the highest occurrences of a given element in the given array by using binary search.\n */\n/**\n * * Write a function to find the highest occurrences of a given element in the given array by using brute force.\n */\n/**\n * * Write a function to find the longest possible common prefix of two given strings by using brute force.\n */\n/**\n * * Write a function to find the longest possible common prefix of two given strings by using binary search.\n */\n/**\n * * Write a function to find the longest possible common suffix of two given strings by using brute force.\n */\n/**\n * * Write a function to find the longest possible common suffix of two given strings by using binary search.\n */\n/**\n * * Write a "]}
{"task_id": "MBJSP/493", "prompt": "function calculatePolygons(startx, starty, endx, endy, radius) {\n/**\n * * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n */", "entry_point": "calculatePolygons", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 1;\nvar arg01 = 1;\nvar arg02 = 4;\nvar arg03 = 4;\nvar arg04 = 3;\nvar x0 = calculatePolygons(arg00, arg01, arg02, arg03, arg04);\nvar v0 = [[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar arg11 = 4;\nvar arg12 = 7;\nvar arg13 = 9;\nvar arg14 = 8;\nvar x1 = calculatePolygons(arg10, arg11, arg12, arg13, arg14);\nvar v1 = [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 9;\nvar arg21 = 6;\nvar arg22 = 4;\nvar arg23 = 3;\nvar arg24 = 2;\nvar x2 = calculatePolygons(arg20, arg21, arg22, arg23, arg24);\nvar v2 = [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "language": "javascript", "canonical_solution": "    var points = [];\n    var x, y, dx, dy, d;\n    var i, j;\n    var x1, y1, x2, y2, x3, y3, x4, y4;\n    var p1, p2, p3, p4;\n    var x1, y1, x2, y2, x3, y3, x4, y4;\n    var p1, p2, p3, p4;\n    var x1, y1, x2, y2, x3, y3, x4, y4;\n    var p1, p2, p3, p4;\n    var x1, y1, x2, y2, x3, y3, x4, y4;\n    var p1, p2, p3, p4;\n    var x1, y1, x2, y2, x3, y3, x4, y4;\n    var p1, p2, p3, p4;\n    var x1, y1, x2, y2, x3,\n", "completion": ["\n\n\n  var hexes = _hexagon(radius);\n\n  var xy = _createXY(hexes);\n\n  var grid = _grid(xy);\n\n  var coordinates = _createCoordinates(grid);\n\n  var output = _createOutput(coordinates);\n\n  var source = \"", "\n\n// 1.\n// Consider a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n// Write a function to calculate a grid of hexagon coordinates where ", "\nvar hexagon = function hexagon(radius) {\n    var points = [];\n\n    for (var i = 0; i < 6; i++) {\n        var angle = i * Math.PI / 3;\n        var x = radius * Math.cos(angle);\n        var y = radius * Math.sin(angle);\n        points.push([x, y]);\n    }\n\n    return points;\n};\n\nhexagon.gons = function gons(startx, starty, endx, endy, radius) {\n    return hexagon(radius).map(", "\n\nconsole.log('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n", "\n\nvar coord, x, y,\n    m = Math,\n    sqrt = m.sqrt,\n    abs = m.abs,\n    sin = m.sin,\n    cos = m.cos,\n    PI = m.PI,\n    round = Math.round,\n    floor = Math.floor,\n    ceil = Math.ceil,\n    log = Math.log,\n    e = m.e;\n\n"]}
{"task_id": "MBJSP/494", "prompt": "function binaryToInteger(testtup) {\n/**\n * * Write a function to convert the given binary tuple to integer.\n */", "entry_point": "binaryToInteger", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 0, 1, 0, 0, 1];\nvar x0 = binaryToInteger(arg00);\nvar v0 = \"105\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [0, 1, 1, 0, 0, 1, 0, 1];\nvar x1 = binaryToInteger(arg10);\nvar v1 = \"101\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 1, 0, 1, 0, 1];\nvar x2 = binaryToInteger(arg20);\nvar v2 = \"53\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to convert the given binary tuple to integer.", "language": "javascript", "canonical_solution": "    let result = 0;\n    for (let i = testTup.length - 1; i >= 0; i--) {\n        if (testTup[i] === 1) result += Math.pow(2, testTup.length - 1 - i);\n    }\n    return result.toString();\n}", "completion": ["\nvar write = function write(binarytup) {\n    var tup = binarytup.tup;\n    var tokens = tup.split(\" \");\n    var tokens_int = tokens.map(", "\nreturn function testtup_toint(testtup) {\n  var testtup_int = 0;\n  testtup_int |= testtup[0];\n  testtup_int <<= 32;\n  testtup_int |= testtup[1];\n  testtup_int <<= 32;\n  testtup_int |= testtup[2];\n  testtup_int <<= 32;\n  testtup_int |= testtup[3];\n\n  return testtup_int;\n};\n\n/**\n * * Write a function to convert the given integer to binary tuple.\n */\nreturn function int_totesttup(testtup_int) {\n  var testtup = new Array(4);\n  testtup[0] = testtup_int >> 32;\n  testtup[1] = testtup_int >> 16;\n  testtup[2] = testtup_int >> 8;\n  testtup[3] = testtup_int;\n\n  return testtup;\n};\n\n/**\n * * Write a function to convert the given float to binary tuple.\n */\nreturn ", "\nconst Tuple2Int = (tup) => {\n  let arr = [], tup_len = 0, tup_len_bytes = 0, tup_len_bytes_remaining = 0;\n  const [tup_len_bytes_remaining, tup_len_bytes] = tup.slice(0, 2).map((val) => val.byteValue());\n  const [tup_len, tup_len_b] = tup.slice(2, 4).map((val) => val.byteValue());\n  const [tup_len_bytes_remaining, tup_len_bytes] = tup.slice(4, 6).map((val) => val.byteValue());\n  const [tup_len_bytes_remaining, tup_len_bytes] = tup.slice(6, 8).map((val) => val.byteValue());\n  const [tup_len_bytes_remaining, tup_len_bytes] = tup.slice(8, 10).map((val) => val.byteValue());\n  let i = 0;\n  while (i < tup_len) {\n    const i_bytes = tup[i].byteValue();\n    const i_bytes_remaining = tup_len_bytes_remaining + tup_len_bytes - i_bytes;\n    if (i_bytes_remaining == 0) {\n      let j = 0;\n      while (j < tup_len) {\n        const j_bytes = tup[j].byteValue();\n        const j_bytes_remaining = tup_len_bytes_remaining + tup_len_bytes - j_bytes;\n        if (j_bytes_", "\ntup: (arr: BinaryTuple[]) => number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\ntup: {\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\n(arr: BinaryTuple[]): number;\n};\n/**\n * * Write a function to convert the given binary tuple to integer.\n */\ntup: (arr: BinaryTuple[]) => number;\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/495", "prompt": "function removeLowercase(str1) {\n/**\n * * Write a function to remove lowercase substrings from a given string by using regex.\n */", "entry_point": "removeLowercase", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = \"KDeoALOklOOHserfLoAJSIskdsf\";\nvar x0 = removeLowercase(arg00);\nvar v0 = \"KDALOOOHLAJSI\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = \"ProducTnamEstreAmIngMediAplAYer\";\nvar x1 = removeLowercase(arg10);\nvar v1 = \"PTEAIMAAY\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = \"maNufacTuredbYSheZenTechNolOGIes\";\nvar x2 = removeLowercase(arg20);\nvar v2 = \"NTYSZTNOGI\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove lowercase substrings from a given string by using regex.", "language": "javascript", "canonical_solution": "  return str1.replace(/[a-z]/g, '');\n}", "completion": ["\n", "\n                ", "\n", "\n    str1.replace(' ','')\n    } else {\n/**\n * * Write a function to remove lowercase substrings from a given string by using a case-insensitive regex.\n */\n    str1.replace(/[A-Z]/g,'')\n    }\n    } else {\n/**\n * * Write a function to remove lowercase substrings from a given string by using regex.\n */\n    str1.replace(/[A-Z]/g,'')\n    }\n    } else {\n/**\n * * Write a function to remove lowercase substrings from a given string by using a case-insensitive regex.\n */\n    str1.replace(/[A-Z]/g,'')\n    }\n    } else {\n/**\n * * Write a function to remove lowercase substrings from a given string by using regex.\n */\n    str1.replace(/[A-Z]/g,'')\n    }\n    } else {\n/**\n * * Write a function to remove lowercase substrings from a given string by using regex.\n */\n    str1.replace(/[A-Z]/g,'')\n    }\n    } else {\n/**\n * * Write a function to remove lowercase substrings from a given string by using a case-insensitive regex.\n */\n    str1.replace(/[A-Z]/g,'')\n    }\n    } else {\n/**\n * * Write a function to remove lowercase substrings from a given string by using regex.\n */\n    str1.replace(/[A-Z]/g,'')\n    }\n    } else {\n/**\n * * Write a ", "\n\nconst replace = (str1, str2) => {\n  const { match, replace } = str1;\n  return match.slice(0, 2) === '<'? str2.replace(str1, replace) : str2;\n};\n\n/**\n * * Write a function to remove lowercase substrings from a given string by using regex.\n */\n\nconst replaceLowercase = (str1, str2) => {\n  const { match, replace } = str1;\n  return match.slice(0, 2) === '<'? str2.replace(str1, replace.toLowerCase()) : str2;\n};\n\n/**\n * * Write a function to strip the non-word characters from a given string.\n */\n\nconst removeNonWordCharacters = (str1, str2) => {\n  const { match, replace } = str1;\n  return match.slice(0, 2) === '<'? str2.replace(str1, replace) : str2;\n};\n\n/**\n * * Write a function to capitalize the first character in a given string.\n */\n\nconst capitalizeFirstCharacter = (str1, str2) => {\n  const { match, replace } = str1;\n  return match.slice(0, 1) === '<'? str2.replace(str1, replace.charAt(0).toUpperCase()) : str2;\n};\n\n/**\n * * Write a "]}
{"task_id": "MBJSP/496", "prompt": "function heapQueueSmallest(nums, n) {\n/**\n * * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n */", "entry_point": "heapQueueSmallest", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg01 = 3;\nvar x0 = heapQueueSmallest(arg00, arg01);\nvar v0 = [14, 22, 25];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [25, 35, 22, 85, 14, 65, 75, 25, 58];\nvar arg11 = 2;\nvar x1 = heapQueueSmallest(arg10, arg11);\nvar v1 = [14, 22];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [25, 35, 22, 85, 14, 65, 75, 22, 58];\nvar arg21 = 5;\nvar x2 = heapQueueSmallest(arg20, arg21);\nvar v2 = [14, 22, 22, 25, 35];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "language": "javascript", "canonical_solution": "  const sortedArray = [...nums].sort((a, b) => a - b);\n  let output = [];\n  while (output.length < n) {\n    output.push(sortedArray.shift());\n  }\n  return output;\n}", "completion": ["\n\n\n/**\n * @param {number[]} nums\n * @param {number} n\n * @return {number[]}\n */\n\n\n", "\nconst minHeap = (nums, n) => {\n  return new Heap({\n    comparator: () => nums[0],\n    compare: (a, b) => b - a\n  });\n};\n```\n\n### A.3.19. Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n\n- Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n- Write the algorithm using a hash table to store all the numbers.\n- Write a ", "\n\n", "\nconst heap = (nums, n = 3) => {\n  // \ud83d\udea8 Do not edit the following function\n  // \ud83d\udea8 Instead, edit the function in the editor below\n  // \ud83d\udea8 Refer to the sample function at the bottom\n\n  // Write your function here\n  return nums.sort((a, b) => a - b)[0]\n}\n```\n\n</details>\n\n<details>\n<summary>TypeScript Sample</summary>\n\n```typescript\n// \ud83d\udea8 Do not edit the following function\n// \ud83d\udea8 Instead, edit the function in the editor below\n// \ud83d\udea8 Refer to the sample function at the bottom\n\n\n// Write your function here\nasync function heap(nums: number[], n: number = 3) {\n  // \ud83d\udea8 Do not edit the following function\n  // \ud83d\udea8 Instead, edit the function in the editor below\n  // \ud83d\udea8 Refer to the sample function at the bottom\n\n  // Write your ", "\n    for (let i = 0; i < nums.length; ++i) {\n        const num = nums[i];\n        if (i === 0) {\n            push(nums, i, num);\n            continue;\n        }\n\n        if (num < nums[0]) {\n            push(nums, i, num);\n        } else {\n            const smallest = pop(nums, 0);\n            push(nums, i, num);\n\n            if (num < nums[smallest]) {\n                push(nums, smallest, num);\n            }\n        }\n    }\n\n    return nums;\n}\n\n\n```\n\n## \u5b57\u7b26\u4e32\u7ffb\u8f6c\n\n### 1\u3001\u5176\u4ed6\u65b9\u6cd5\n\n```\n// \u9012\u5f52\nstring reverse(string s, int start, int end) {\n    if (start >= end) {\n        return s;\n    }\n\n    const tmp = s[start];\n    s[start] = s[end];\n    s[end] = tmp;\n\n    return reverse(s, start + 1, end - 1);\n}\n\n// \u5faa\u73af\nstring reverse(string s) {\n    for (let i = 0; i < s.length / 2; ++i) {\n        const tmp = s[i];\n        s[i] = s[s.length - 1 - i];\n        s[s.length - 1 - i] = tmp;\n    }\n\n    return s;\n}\n```\n\n### 2\u3001Python\n\n```python\nclass Solution:\n    def reverse(self, s: str) -> str:\n"]}
{"task_id": "MBJSP/497", "prompt": "function surfaceareaCone(r, h) {\n/**\n * * Write a function to find the surface area of a cone.\n */", "entry_point": "surfaceareaCone", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar arg01 = 12;\nvar x0 = surfaceareaCone(arg00, arg01);\nvar v0 = 282.7433388230814;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 15;\nvar x1 = surfaceareaCone(arg10, arg11);\nvar v1 = 880.5179353159282;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 19;\nvar arg21 = 17;\nvar x2 = surfaceareaCone(arg20, arg21);\nvar v2 = 2655.923961165254;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the surface area of a cone.", "language": "javascript", "canonical_solution": "    let result = Math.PI * r * (r + Math.sqrt(r * r + h * h))\n    return result\n}", "completion": ["\n    if (h < 1 || h >= r)\n        return 0;\n    else {\n        int i = 0;\n        int j = r;\n        while (i <= j) {\n            float d = i / r;\n            float alpha = d * 2 * PI;\n            float beta = h / r;\n            float z = beta * d;\n            float x = sqrt(r * r - z * z);\n            float S = (alpha + beta) * r;\n            data[z + 0.5][x + 0.5] += 1;\n            if (i!= 0 && i!= r) {\n                S += 2 * beta * i;\n                data[z + 0.5][x + 0.5] += 2;\n            }\n            if (i!= 0 && i == r) {\n                S += 2 * beta * i;\n                data[z + 0.5][x + 0.5] += 2;\n                i = j + 1;\n            }\n            i += 1;\n        }\n        return S;\n    }\n}\nint main() {\n    int n = 5;\n    float v = 1;\n    float h = 1;\n    int T = 0;\n    float time = 0;\n    float res = 0;\n    srand(time(NULL));\n    while (res < 0.2) {\n        float r1 = 1 - res * 0.5;\n        float r2 = 1 - res;\n        float r3 = 1 - res * 0.5;\n        float r4 = 1 - res * 0.5;\n        float r5 = 1 - res;\n        float r6 = 1", "\n/**\n * **/\n}\n/**\n * * Write a function to find the surface area of a cylinder.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the surface area of a pyramid.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the surface area of a sphere.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a cone.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a cylinder.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a pyramid.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a sphere.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a cone.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a cylinder.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a pyramid.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a sphere.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a cone.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a cylinder.\n */\n/**\n * **/\n}\n/**\n * * Write a function to find the volume of a pyramid.\n */\n/**\n * **/\n}\n/**\n * * Write a ", "\nconst _write = (surfaceArea, i) => {\n  if (i === 0) {\n    console.log('surfaceArea', surfaceArea);\n    console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n    console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  } else {\n    console.log('surfaceArea', surfaceArea);\n    console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n    console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  }\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea', surfaceArea[i]);\n  console.log('surfaceArea', i, 'index of surfaceArea", "\nreturn {\n  type: 'cone',\n  x: r,\n  y: h,\n  z: 0\n};\n};\n/**\n * * Write a function to find the surface area of a sphere.\n */\none(r, h) {\n/**\n * * Write a function to find the volume of a sphere.\n */\nreturn {\n  type:'sphere',\n  x: r,\n  y: r,\n  z: h\n};\n};\n/**\n * * Write a function to find the surface area of a torus.\n */\none(r, h) {\n/**\n * * Write a function to find the volume of a torus.\n */\nreturn {\n  type: 'torus',\n  x: r,\n  y: r,\n  z: h\n};\n};\n/**\n * * Write a function to find the surface area of a cylinder.\n */\none(r, h) {\n/**\n * * Write a function to find the volume of a cylinder.\n */\nreturn {\n  type: 'cylinder',\n  x: r,\n  y: h,\n  z: 0\n};\n};\n/**\n * * Write a function to find the surface area of a cone.\n */\none(r, h) {\n/**\n * * Write a function to find the volume of a cone.\n */\nreturn {\n  type: 'cone',\n  x: r,\n  y: h,\n  z: 0\n};\n};\n/**\n * * Write a function to find the surface area of a sphere.\n */\none(r, h) {\n/**\n * * Write a ", "\n"]}
{"task_id": "MBJSP/498", "prompt": "function gcd(x, y) {\n/**\n * * Write a JavaScript function to find gcd of two positive integers.\n */", "entry_point": "gcd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 12;\nvar arg01 = 17;\nvar x0 = gcd(arg00, arg01);\nvar v0 = 1;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 4;\nvar arg11 = 6;\nvar x1 = gcd(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 2;\nvar arg21 = 9;\nvar x2 = gcd(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find gcd of two positive integers.", "language": "javascript", "canonical_solution": "    if (y === 0) {\n        return x;\n    }\n    return gcd(y, x % y);\n}", "completion": ["\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript function to find gcd of two positive integers.\n */\n\n/**\n * Write a JavaScript ", "\ngcd(x, y) {\n    return y === 0? x : gcd(y, x % y);\n}\n}\n\nmodule.exports = gcd;\n\n},{\"@jscad/io-utils\":67}],101:[", "\n\n/**\n * @", "\n\nvar gcd = ", "\n\n/**\n *\n *  How to get gcd of two positive integers?\n *\n *  1. Write a JavaScript function to find gcd of two positive integers.\n *  2. Write the "]}
{"task_id": "MBJSP/499", "prompt": "function diameterCircle(r) {\n/**\n * * Write a function to find the diameter of a circle.\n */", "entry_point": "diameterCircle", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar x0 = diameterCircle(arg00);\nvar v0 = 20;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 40;\nvar x1 = diameterCircle(arg10);\nvar v1 = 80;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 15;\nvar x2 = diameterCircle(arg20);\nvar v2 = 30;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the diameter of a circle.", "language": "javascript", "canonical_solution": "  return 2 * r;\n}", "completion": ["\nvar circle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a function to find the diameter of a circle.\n */\ncircle_diameter = function(radius) {\n/**\n * * Write a ", "\n\n/**\n * Write a function to find the perimeter of a circle.\n */\n\n/**\n * Write a function to find the radius of a circle.\n */\n\n/**\n * Write a function to find the area of a circle.\n */\n\n/**\n * Write a function to find the circumference of a circle.\n */\n\n/**\n * Write a function to check whether a circle is valid or invalid.\n */\n\n/**\n * Write a function to find the distance between two points.\n */\n\n/**\n * Write a function to find the angle between two vectors.\n */\n\n/**\n * Write a function to find the area of a rectangle.\n */\n\n/**\n * Write a function to find the area of a triangle.\n */\n\n/**\n * Write a function to find the area of a trapezoid.\n */\n\n/**\n * Write a function to find the area of a parallelogram.\n */\n\n/**\n * Write a function to find the area of a circle.\n */\n\n/**\n * Write a function to find the area of a polygon.\n */\n\n/**\n * Write a function to find the area of a polygon with n vertices.\n */\n\n/**\n * Write a function to find the area of a triangle.\n */\n\n/**\n * Write a function to find the area of a trapezoid.\n */\n\n/**\n * Write a function to find the area of a parallelogram.\n */\n\n/**\n * Write a function to find the area of a circle.\n */\n\n/**\n * Write a function to find the area of a polygon.\n */\n\n/**\n * Write a function to find the area of a polygon with n vertices.\n */\n\n/**\n * Write a ", "\n", "\n\n// find the diameter of a circle.\n// Write a function to find the diameter of a circle.\n\n// find the diameter of a circle.\n// Write a ", "\n"]}
{"task_id": "MBJSP/500", "prompt": "function concatenateElements(list) {\n/**\n * * Write a function to concatenate all elements of the given list into a string.\n */", "entry_point": "concatenateElements", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"];\nvar x0 = concatenateElements(arg00);\nvar v0 = \"  hello there have a rocky day\";\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"Hi\", \"there\", \"How\", \"are\", \"you\"];\nvar x1 = concatenateElements(arg10);\nvar v1 = \"  Hi there How are you\";\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"];\nvar x2 = concatenateElements(arg20);\nvar v2 = \"  Part of the journey is end\";\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to concatenate all elements of the given list into a string.", "language": "javascript", "canonical_solution": "  return \"  \" + list.join(\" \");\n}", "completion": ["\n", "\n\n},{}],11:[", "\n", "\n", "\n"]}
{"task_id": "MBJSP/501", "prompt": "function numCommDiv(x, y) {\n/**\n * * Write a JavaScript function to find common divisor between two numbers in a given pair.\n */", "entry_point": "numCommDiv", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 2;\nvar arg01 = 4;\nvar x0 = numCommDiv(arg00, arg01);\nvar v0 = 2;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar arg11 = 8;\nvar x1 = numCommDiv(arg10, arg11);\nvar v1 = 2;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 12;\nvar arg21 = 24;\nvar x2 = numCommDiv(arg20, arg21);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find common divisor between two numbers in a given pair.", "language": "javascript", "canonical_solution": "    var divisors = [];\n    for (var i = 1; i <= y; i++) {\n        if (x % i === 0 && y % i === 0) {\n            divisors.push(i);\n        }\n    }\n    return divisors.length;\n}", "completion": ["\nreturn x.map(value => {\n    return y.map(value2 => {\n        // computes the product of values in both arrays\n        const product = value * value2;\n        // returns the sum of values in both arrays\n        const sum = value + value2;\n        // returns the product of values in both arrays\n        const difference = Math.abs(product - sum);\n        // returns the minimum value of values in both arrays\n        const minimum = Math.min(value, value2);\n        // returns the maximum value of values in both arrays\n        const maximum = Math.max(value, value2);\n        // returns the average value of values in both arrays\n        const average = (sum + product) / 2;\n        return difference + minimum + maximum + average;\n    });\n});\n```\n\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"prompt input_prompt\">In&nbsp;[16]:</div>\n<div class=\"inner_cell\">\n    <div class=\"input_area\">\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"c1\"># x and y are arrays that contain the values for x and y</span>\n<span class=\"c1\"># x and y are the actual values</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <", "\n}\n```\n\nIf you run this code, you should see the following output:\n\n```\n", "\n\nconst fn = (x, y) => (x * y) / (x - y);\n\nconsole.log(fn(3, 2)) // 3\n```\n\n![](./img/2-3.png)\n\n## 2.4 \u5982\u4f55\u8fd4\u56de\u591a\u4e2a\u6570\n\n##### 2.4.1 \u5b9a\u4e49\u7c7b\u578b\n\n```javascript\nconst mylist = [1, 2, 3, 4, 5, 6, 7, 8];\nconst myset = {1, 2, 3, 4, 5, 6, 7, 8};\nconst mytuple = (1, 2, 3, 4, 5, 6, 7, 8);\nconst mystring = \"hello world\";\n```\n\n##### 2.4.2 \u8fd4\u56de\u591a\u4e2a\u6570\n\n```javascript\n// 1. return multi-valued tuple\nconst multi = mytuple.reduce((acc, item) => {\n    acc.push(item);\n    return acc;\n}, []);\nconsole.log(multi) // [1, 2, 3, 4, 5, 6, 7, 8]\n\n// 2. return multi-valued list\nconst multiList = mylist.reduce((acc, item) => {\n    acc.push(item);\n    return acc;\n}, []);\nconsole.log(multiList) // [1, 2, 3, 4, 5, 6, 7, 8]\n\n// 3. return multi-valued set\nconst multiSet = myset.reduce((acc, item) => {\n    acc.push(item);\n    return acc;\n}, []);\nconsole.log(multiSet) // [1, 2, 3", "\n    ", "\n\n    return a / b;\n}\n\n```\n\nIt should return `3.0`.\n\n## Related\n\n- [Divisor](https://github.com/code-name/divisor)\n- [Vin-Vin](https://github.com/vin-vin/vin-vin)\n- [Divisor of two numbers](https://github.com/tangweiwei/divisor)\n\n## License\n\n[MIT](https://github.com/code-name/divisor/blob/master/LICENSE)\n<|endoftext|>"]}
{"task_id": "MBJSP/502", "prompt": "function find(n, m) {\n/**\n * * Write a JavaScript function to find remainder of two numbers.\n */", "entry_point": "find", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 3;\nvar arg01 = 3;\nvar x0 = find(arg00, arg01);\nvar v0 = 0;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 3;\nvar x1 = find(arg10, arg11);\nvar v1 = 1;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 16;\nvar arg21 = 5;\nvar x2 = find(arg20, arg21);\nvar v2 = 1;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find remainder of two numbers.", "language": "javascript", "canonical_solution": "    return n % m;\n}", "completion": ["\n    var index = n.indexOf(m)\n    return index >= 0\n}\n</pre>\n\n<h3>Write a function to find remainder of two numbers.</h3>\n\n<pre>\n(", "\nlet writeJSFunction = (n, m) => {\n    return `var div = (${n}) / (${m})`,\n}\n\n// Replace'replace' with'replaceWith'.\n// Replace any character in'search' with'replace'.\n// Count the number of occurrences of'search'.\n// Write a JavaScript function to remove all occurrences of'search' in'string'.\nlet writeJSFunction = (n, m) => {\n    return `var search = \"${m}\";`,\n}\n\n// Replace'replace' with'replaceWith'.\n// Replace any character in'search' with'replace'.\n// Count the number of occurrences of'search'.\n// Write a JavaScript function to remove all occurrences of'search' in'string'.\nlet writeJSFunction = (n, m) => {\n    return `var search = \"${m}\";`,\n}\n\n// Replace'replace' with'replaceWith'.\n// Replace any character in'search' with'replace'.\n// Count the number of occurrences of'search'.\n// Write a JavaScript function to remove all occurrences of'search' in'string'.\nlet writeJSFunction = (n, m) => {\n    return `var search = \"${m}\";`,\n}\n\n// Replace'replace' with'replaceWith'.\n// Replace any character in'search' with'replace'.\n// Count the number of occurrences of'search'.\n// Write a JavaScript ", "\nvar writeJSFunc = function (node, n, m) {\n\n};\n\nreturn writeJSFunc;\n\n});\n\nrequire.register(\"test/lib/browser/tcp.js\", function(exports, require, module){\n/**\n * * A TCP socket.\n */\nvar tcp = function (options) {\n\n};\n\n/**\n * * Listen for incoming connections on a given port.\n */\ntcp.listen = function (port, host, callback) {\n\n};\n\n/**\n * * Close the TCP listener.\n */\ntcp.close = function () {\n\n};\n\nreturn tcp;\n\n});\n\nrequire.register(\"test/lib/browser/buffer.js\", function(exports, require, module){\n/**\n * * Buffer with fixed length.\n */\nvar buffer = function () {\n\n};\n\n/**\n * * Write a buffer.\n */\nbuffer.prototype.write = function (buf, offset, length, encoding) {\n\n};\n\n/**\n * * Read a buffer.\n */\nbuffer.prototype.read = function (buf, offset, length, encoding) {\n\n};\n\n/**\n * * Truncate a buffer.\n */\nbuffer.prototype.truncate = function (length) {\n\n};\n\n/**\n * * Clear a buffer.\n */\nbuffer.prototype.clear = function () {\n\n};\n\n/**\n * * Size of a buffer.\n */\nbuffer.prototype.size = function () {\n\n};\n\n/**\n * * Destroy a buffer.\n */\nbuffer.prototype.destroy = function () {\n\n};\n\n/**\n * * Cast to a buffer.\n */\nbuffer.prototype.toBuffer = ", "\nvar writeJsFunc = function() {\n\tvar jsFunc = '", "\n\n/**\n * * Return the remainder of a/b.\n */\n\n/**\n * * Return the remainder of a % b.\n */\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a number.\n */\n\n/**\n * * Write a JavaScript function to find the largest prime factor of a number.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript function to find the sum of all the natural numbers up to and including n.\n */\n\n/**\n * * Write a JavaScript "]}
{"task_id": "MBJSP/503", "prompt": "function addConsecutiveNums(nums) {\n/**\n * * Write a function to add consecutive numbers of a given list.\n */", "entry_point": "addConsecutiveNums", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 1, 3, 4, 4, 5, 6, 7];\nvar x0 = addConsecutiveNums(arg00);\nvar v0 = [2, 4, 7, 8, 9, 11, 13];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 5, 8, 9, 6, 10];\nvar x1 = addConsecutiveNums(arg10);\nvar v1 = [9, 13, 17, 15, 16];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar x2 = addConsecutiveNums(arg20);\nvar v2 = [3, 5, 7, 9, 11, 13, 15, 17, 19];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to add consecutive numbers of a given list.", "language": "javascript", "canonical_solution": "  // code goes here\n  let result = [];\n  for (let i = 1; i < nums.length; i++) {\n    result.push(nums[i] + nums[i - 1]);\n  }\n  return result;\n}", "completion": ["\n}\n\n/**\n * Write a ", "\n    ", "\n\n}\n```\n\n### \ud83d\udce6 \ud83d\udcbb \n\n## \ud83d\udca1 \n\n\ud83c\udfc6 Get all the links from a given URL.\n\n\ud83d\ude80 Get all the links from a given URL.\n\n## \ud83d\udd27 \n\n\ud83c\udfc6 Get all the images from a given URL.\n\n\ud83d\ude80 Get all the images from a given URL.\n\n## \ud83d\udce6 \n\n\ud83c\udfc6 Get all the videos from a given URL.\n\n\ud83d\ude80 Get all the videos from a given URL.\n\n## \ud83e\udd1d \n\n\ud83c\udfc6 Get all the text from a given URL.\n\n\ud83d\ude80 Get all the text from a given URL.\n\n## \ud83e\udd16 \n\n\ud83c\udfc6 Get all the colors from a given URL.\n\n\ud83d\ude80 Get all the colors from a given URL.\n\n## \ud83d\udcc3 \n\n\ud83c\udfc6 Get all the colors from a given URL.\n\n## \ud83d\udc69\u200d\ud83d\udcbc\u200d\ud83d\udc66\u200d\ud83d\udc66\u200d\ud83d\udc66\n\n\ud83c\udfc6 Get all the links from a given URL.\n\n\ud83d\ude80 Get all the links from a given URL.\n\n## \ud83d\udde3 \n\n\ud83c\udfc6 Get all the images from a given URL.\n\n\ud83d\ude80 Get all the images from a given URL.\n\n## \ud83d\udcf6 \n\n\ud83c\udfc6 Get all the videos from a given URL.\n\n\ud83d\ude80 Get all the videos from a given URL.\n\n## \ud83d\udcbb \n\n\ud83c\udfc6 Get all the text from a given URL.\n\n\ud83d\ude80 Get all the text from a given URL.\n\n## \ud83d\udd27 \n\n\ud83c\udfc6 Get all the colors from a given URL.\n\n\ud83d\ude80 Get all the colors from a given", "\nvar nums = {\n\t\"1\": [1],\n\t\"2\": [2, 3],\n\t\"3\": [4, 5, 6, 7],\n\t\"4\": [8, 9, 10, 11, 12, 13],\n\t\"5\": [14, 15, 16, 17, 18, 19, 20]\n};\n<|endoftext|>", "\n  return _slicedToArray(nums, 1);\n}\n```\n\nIt works, just like the `Array.prototype.concat` method, but the `concat` function doesn't modify the source array.\n\nLet's take a look at the output.\n\n```javascript\noutput: 1,2,3,4,5\n```\n\nHow can we get the `output` variable from the `concat` function?\n\n```javascript\nconcat(nums, 1) // 1,2,3,4,5,1\n```\n\nBecause we are passing `nums` as an argument to the `concat` function, the `concat` function doesn't modify the source array. The `concat` function isn't modifying the source array.\n\nThen, what is the output variable of the `concat` function?\n\n```javascript\nconcat(nums, 1)\n// 1,2,3,4,5,1\n\nnums\n// 1,2,3,4,5,1\n\n```\n\nWe can use the `concat` function to insert a value into a list of numbers. We do this by using the `concat` "]}
{"task_id": "MBJSP/504", "prompt": "function sumOfSeries(n) {\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */", "entry_point": "sumOfSeries", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 5;\nvar x0 = sumOfSeries(arg00);\nvar v0 = 225;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 2;\nvar x1 = sumOfSeries(arg10);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 3;\nvar x2 = sumOfSeries(arg20);\nvar v2 = 36;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the cube sum of first n natural numbers.", "language": "javascript", "canonical_solution": "    let sum = 0;\n    for (let i = 0; i <= n; i++) {\n        sum += Math.pow(i, 3);\n    }\n    return sum;\n}", "completion": ["\n\n", "\nvar n = 5;\nconsole.log(n, 'Cube Sum:', cubescoresum(n));\n}\n\n// ---------------------\n//     MAIN\n// ---------------------\nconsole.log('\\n\\nWelcome to the JS Cubesum Calculator!\\n');\n\n// program loop\nwhile (true) {\n    console.log(''); // blank line\n    // get the number from user\n    var n;\n    var type;\n    while (!is_numeric(n) || n < 1) {\n        var nStr = input('Enter a natural number (or type \"q\" to quit):');\n        if (nStr.toLowerCase() === 'q') {\n            // quit program\n            break;\n        }\n        n = parseInt(nStr, 10);\n    }\n    if (n === 0) {\n        // zero cannot be a valid number\n        continue;\n    }\n    console.log('\\nCalculating...\\n');\n\n    // calculate the sum of cubes\n    var sum;\n    if (n === 1) {\n        sum = 1;\n    } else {\n        sum = cubescoresum(n);\n    }\n\n    // display the results\n    console.log(n, 'Cube Sum:', sum);\n\n    // prompt user to continue or exit\n    while (!is_numeric(type = input('Enter \"c\" for a list of cube sums, \"q\" to quit: ')) || type.toLowerCase() === 'q') {\n    }\n\n    // quit program\n    if (type.toLowerCase() === 'q') {\n        break;\n    }\n}\n```\n\n# How to use this program\n\n- [Input prompt](https://github", "\n\nvar n = 3\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = 2\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = 1\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = 0\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = -3\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = -2\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = -1\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = -0\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = +0\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = +1\nvar x = 0\n\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n\nvar n = +2\nvar x = 0\n\n/**\n * * Write a JavaScript ", "\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript function to find the cube sum of first n natural numbers.\n */\n};\n/**\n * * Write a JavaScript ", "\ncube_sum = function(n) {\nreturn n * n * n;\n};\n\n/**\n * * Write a JavaScript function to find the number of prime numbers between n and m.\n */\nprime_count = "]}
{"task_id": "MBJSP/505", "prompt": "function reOrder(a) {\n/**\n * * Write a function to move all zeroes to the end of the given array.\n */", "entry_point": "reOrder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [6, 0, 8, 2, 3, 0, 4, 0, 1];\nvar x0 = reOrder(arg00);\nvar v0 = [6, 8, 2, 3, 4, 1, 0, 0, 0];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 0, 2, 7, 0, 9, 0, 12, 0];\nvar x1 = reOrder(arg10);\nvar v1 = [4, 2, 7, 9, 12, 0, 0, 0, 0];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [3, 11, 0, 74, 14, 0, 1, 0, 2];\nvar x2 = reOrder(arg20);\nvar v2 = [3, 11, 74, 14, 1, 2, 0, 0, 0];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to move all zeroes to the end of the given array.", "language": "javascript", "canonical_solution": "  const zeroes = a.filter(item => item === 0);\n  const nonZeroes = a.filter(item => item !== 0);\n  return [...nonZeroes, ...zeroes];\n}", "completion": ["\nconst moveZeroes = (a) => {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === 0) {\n      for (let j = i + 1; j < a.length; j++) {\n        if (a[j]!== 0) {\n          const temp = a[i];\n          a[i] = a[j];\n          a[j] = temp;\n        }\n      }\n    }\n  }\n  return a;\n};\n\n/**\n * * Write a function to count the number of words in the given string.\n */\nconst countWords = (a) => {\n  const words = a.split(' ');\n  return words.length;\n};\n\n/**\n * * Write a function to count the number of characters in the given string.\n */\nconst countCharacters = (a) => {\n  let charactersCount = 0;\n  for (let i = 0; i < a.length; i++) {\n    charactersCount++;\n  }\n  return charactersCount;\n};\n\n/**\n * * Write a function to count the number of vowels in the given string.\n */\nconst countVowels = (a) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (vowels.includes(a[i])) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\n/**\n * * Write a ", "\nvar addZeroToEnd = function addZeroToEnd(a) {\n  for (var i = a.length - 1; i >= 0 && a[i] === 0; i--) {\n    a[i] = \"0\";\n  }\n  return a.join(\"\");\n};\n\nmodule.exports = addZeroToEnd;\n\n},{}],67:[", "\n/**\n * * Function to move all zeroes to the end of the given array.\n * */\nvar moveZeroesToEnd = function moveZeroesToEnd(a) {\n  var _a = a,\n      zeroCount = _a.zeroCount,\n      result = _a.result;\n\n  var index = zeroCount - 1;\n  var count = 0;\n\n  for (var i = a.length - 1; i >= 0; --i) {\n    if (a[i]) {\n      result[index] = a[i];\n      index--;\n      count++;\n    }\n  }\n\n  for (var _i = 0; _i < count; _i++) {\n    result[_i] = 0;\n  }\n\n  result.zeroCount = zeroCount;\n  return result;\n};\n\nmodule.exports = moveZeroesToEnd;\n}, 327, null, \"moveZeroesToEnd\");\n__d(/* reduceRight */", "\nvar moveZeroes = ", "\n"]}
{"task_id": "MBJSP/506", "prompt": "function permutationCoefficient(n, k) {\n/**\n * * Write a function to calculate the permutation coefficient of given p(n, k).\n */", "entry_point": "permutationCoefficient", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 10;\nvar arg01 = 2;\nvar x0 = permutationCoefficient(arg00, arg01);\nvar v0 = 90;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 10;\nvar arg11 = 3;\nvar x1 = permutationCoefficient(arg10, arg11);\nvar v1 = 720;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 10;\nvar arg21 = 1;\nvar x2 = permutationCoefficient(arg20, arg21);\nvar v2 = 10;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to calculate the permutation coefficient of given p(n, k).", "language": "javascript", "canonical_solution": "  let result = 1;\n  for (let i = 0; i < k; i++) {\n    result *= (n - i);\n  }\n  return result;\n}", "completion": ["\n\n/**\n * Function to calculate the permutation coefficient of given p(n, k).\n * @param {number} n - The number of elements to calculate permutation coefficient of.\n * @param {number} k - The number of elements to calculate permutation coefficient of.\n * @returns {number} Returns the permutation coefficient of given p(n, k).\n */\n\n/**\n * @param {number} n - The number of elements to calculate permutation coefficient of.\n * @param {number} k - The number of elements to calculate permutation coefficient of.\n * @returns {number} Returns the permutation coefficient of given p(n, k).\n */\n\n  }\n\n  ", "\n", "\n\n/**\n * @param {number} n - number of elements\n * @param {number} k - number of occurrences\n * @returns {number}\n */\n", "\n/**\n * @param {number} n - size of array\n * @param {number} k - size of sub-array\n * @return {number}\n */\n", "\n\n}\n\n/**\n * @typedef {Object} PermutationCoefficient\n * @property {number} pn - number of permutations of n objects\n * @property {number} pk - number of permutations of k objects\n */\n\n/**\n * @param {number} n - number of permutations of n objects\n * @param {number} k - number of permutations of k objects\n * @returns {PermutationCoefficient}\n */\n"]}
{"task_id": "MBJSP/507", "prompt": "function removeWords(list1, removewords) {\n/**\n * * Write a function to remove specific words from a given list.\n */", "entry_point": "removeWords", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg01 = [\"white\", \"orange\"];\nvar x0 = removeWords(arg00, arg01);\nvar v0 = [\"red\", \"green\", \"blue\", \"black\"];\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg11 = [\"black\", \"orange\"];\nvar x1 = removeWords(arg10, arg11);\nvar v1 = [\"red\", \"green\", \"blue\", \"white\"];\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"];\nvar arg21 = [\"blue\", \"white\"];\nvar x2 = removeWords(arg20, arg21);\nvar v2 = [\"red\", \"green\", \"black\", \"orange\"];\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to remove specific words from a given list.", "language": "javascript", "canonical_solution": "  let newList = [];\n  for (let i = 0; i < list1.length; i++) {\n    let word = list1[i];\n    if (!removewords.includes(word)) {\n      newList.push(word);\n    }\n  }\n  return newList;\n}", "completion": ["\n\n/**\n * * Check if a given word is in a list.\n */\n\n(", "\nconst list = [\n  \"A\",\n  \"AB\",\n  \"AC\",\n  \"AD\",\n  \"AE\",\n  \"AF\",\n  \"AG\",\n  \"AH\",\n  \"AJ\",\n  \"AK\",\n  \"AL\",\n  \"AM\",\n  \"AN\",\n  \"AO\",\n  \"AP\",\n  \"AQ\",\n  \"AR\",\n  \"AS\",\n  \"AT\",\n  \"AV\",\n  \"AW\",\n  \"AX\",\n  \"AY\",\n  \"AZ\",\n  \"BA\",\n  \"BB\",\n  \"BC\",\n  \"BD\",\n  \"BE\",\n  \"BF\",\n  \"BG\",\n  \"BH\",\n  \"BI\",\n  \"BJ\",\n  \"BK\",\n  \"BL\",\n  \"BM\",\n  \"BN\",\n  \"BO\",\n  \"BP\",\n  \"BQ\",\n  \"BR\",\n  \"BS\",\n  \"BT\",\n  \"BU\",\n  \"BV\",\n  \"BW\",\n  \"BX\",\n  \"BY\",\n  \"BZ\",\n  \"CA\",\n  \"CB\",\n  \"CC\",\n  \"CD\",\n  \"CE\",\n  \"CF\",\n  \"CG\",\n  \"CH\",\n  \"CI\",\n  \"CJ\",\n  \"CK\",\n  \"CL\",\n  \"CM\",\n  \"CN\",\n  \"CO\",\n  \"CP\",\n  \"CQ\",\n  \"CR\",\n  \"CS\",\n  \"CT\",\n  \"CU\",\n  \"CV\",\n  \"CW\",\n  \"CX\",\n  \"Cy\",\n  \"Cz\",", "\n", "\nconst removeWords = (str, words) => {\n  const str2 = str.toLowerCase();\n  const words2 = words.toLowerCase();\n  const words2Words = words2.split(' ');\n  const words2WordsClean = words2Words.filter(word =>!str2.includes(word));\n  const words2WordsClean2 = words2WordsClean.filter(word => str2.includes(word));\n  const words2WordsClean3 = words2WordsClean2.filter(word => str2.endsWith(word));\n  return words2WordsClean3.join(' ');\n};\n\nconst str2hex = function (str) {\n  const hex = [];\n  for (let i = 0; i < str.length; i++) {\n    hex.push((str.charCodeAt(i) + '').slice(-2));\n  }\n  return hex;\n};\n\nconst strToBin = function (str) {\n  const bin = [];\n  for (let i = 0; i < str.length; i++) {\n    bin.push(str.charCodeAt(i));\n  }\n  return bin;\n};\n\nconst strToNum = function (str) {\n  const num = [];\n  for (let i = 0; i < str.length; i++) {\n    num.push(str[i]);\n  }\n  return num;\n};\n\nconst strToNumHex = function (str) {\n  const num = [];\n  for (let i = 0; i < str.length; i++) {\n    num.push(str[i].toString(16));\n  }\n  return num;\n};\n\nconst strToNumBin = ", "\n\n"]}
{"task_id": "MBJSP/508", "prompt": "function sameOrder(l1, l2) {\n/**\n * * Write a function to check if the common elements between two given lists are in the same order or not.\n */", "entry_point": "sameOrder", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [\"red\", \"green\", \"black\", \"orange\"];\nvar arg01 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar x0 = sameOrder(arg00, arg01);\nvar v0 = true;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar arg11 = [\"white\", \"orange\", \"pink\", \"black\"];\nvar x1 = sameOrder(arg10, arg11);\nvar v1 = false;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [\"red\", \"green\", \"black\", \"orange\"];\nvar arg21 = [\"red\", \"pink\", \"green\", \"white\", \"black\"];\nvar x2 = sameOrder(arg20, arg21);\nvar v2 = true;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to check if the common elements between two given lists are in the same order or not.", "language": "javascript", "canonical_solution": "  const l1Map = {};\n  const l2Map = {};\n  for (let i = 0; i < l1.length; i++) {\n    l1Map[l1[i]] = true;\n  }\n  for (let i = 0; i < l2.length; i++) {\n    l2Map[l2[i]] = true;\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1Map[l1[i]] !== l2Map[l2[i]]) {\n      return false;\n    }\n  }\n  return true;\n}", "completion": ["\n", "\nreturn function(f) {\n  var _this = this;\n  var matchingElements = _.map(this.lists, function(l1, l2) {\n    var l1Dup = _.intersection(l1, l2);\n    var l2Dup = _.intersection(l2, l1);\n    if (l1Dup.length === 0 && l2Dup.length === 0) return false;\n    else return f(l1Dup, l2Dup);\n  });\n  return _.all(matchingElements, function(matchingElement) {\n    return matchingElement === true;\n  });\n};\n\n/**\n * * Write a function to check if the given lists contain any duplicates or not.\n */\nvar containsDuplicates = function(lists) {\n  return _.any(lists, function(l) {\n    return _.any(l, function(el) {\n      return _.contains(l, el);\n    });\n  });\n};\n\n/**\n * * Write a function to check if the given lists contain any duplicates in the same order or not.\n */\nvar containsDuplicatesInOrder = function(lists) {\n  var sortedLists = _.sortBy(lists, function(list) {\n    return list.length;\n  });\n  var sortedListsStr = _.map(sortedLists, function(list) {\n    return _.map(list, ", "\n", "\nexport function _check_ordered_eq(l1, l2) {\n/**\n * * Write a function to check if the common elements between two given lists are in the same order or not.\n */\n    return l1.map(", "\n("]}
{"task_id": "MBJSP/509", "prompt": "function averageOdd(n) {\n/**\n * * Write a JavaScript function to find the average of odd numbers till a given odd number.\n */", "entry_point": "averageOdd", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = 9;\nvar x0 = averageOdd(arg00);\nvar v0 = 5;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = 5;\nvar x1 = averageOdd(arg10);\nvar v1 = 3;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = 11;\nvar x2 = averageOdd(arg20);\nvar v2 = 6;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a JavaScript function to find the average of odd numbers till a given odd number.", "language": "javascript", "canonical_solution": "    var oddSum = 0;\n    var count = 0;\n    for (var i = 1; i <= n; i++) {\n        if (i % 2 !== 0) {\n            oddSum = oddSum + i;\n            count++;\n        }\n    }\n    return oddSum / count;\n}", "completion": ["\n    ", "\n\n", "\n}\n```\n\n## Coding style\n\nTo keep our code style consistent, we use the same coding style for our Node.js projects. The coding style which we specify is as follows:\n\n```javascript\n/**\n * * Write a JavaScript function to find the average of odd numbers till a given odd number.\n */\n\n", "\n    var n = _input.value;\n    var count = 1;\n    while (n % 2 === 0) {\n        if (n % 5 === 0) {\n            count++;\n        }\n        n = n / 2;\n    }\n    _input.value = count / 5;\n}\n```\n\nThe server request will be:\n\n```text\nGET /average/odd HTTP/1.1\nHost: localhost:8080\n```\n\nThe server response will be:\n\n```text\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 2\n\n0.16666666667\n```\n\nThe output will be:\n\n```text\n$ curl localhost:8080/average/odd\n0.16666666667\n```\n\n### Rational Coding\n\n**[Rational Coding](http://en.wikipedia.org/wiki/Rational_coding)** is a probabilistic coding method that helps us compress a stream of data. It also helps us to compress different types of data with different choices of probabilities. Rational Coding is different from the probabilistic coding.\n\nIn contrast to probabilistic coding, Rational Coding is deterministic. In deterministic coding, we cannot tell the probability of a data value. In probabilistic coding, we cannot tell the probability of a data value. For example, we cannot tell the probability of `0` because the probability of `0` is 0 and the probability of `1` is 1.\n\nIn Rational Coding, we can tell the probability of a data value by using the output of the encoder. For example, if we feed the data value `10` to the encoder, the probability of `10` is 0.5. If we feed the data", "\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript function to find the average of odd numbers till a given odd number.\n\n// Write a JavaScript "]}
{"task_id": "MBJSP/510", "prompt": "function noOfSubsequences(arr, k) {\n/**\n * * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n */", "entry_point": "noOfSubsequences", "test": "\nconst _ = require(\"lodash\")\n\nfunction compare(object1, object2){\n    return _.isEqual(object1, object2)\n}\n\nvar arg00 = [1, 2, 3, 4];\nvar arg01 = 10;\nvar x0 = noOfSubsequences(arg00, arg01);\nvar v0 = 11;\nif(!compare(x0, v0)){\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg10 = [4, 8, 7, 2];\nvar arg11 = 50;\nvar x1 = noOfSubsequences(arg10, arg11);\nvar v1 = 9;\nif(!compare(x1, v1)){\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \n}\n\nvar arg20 = [5, 6, 7, 8];\nvar arg21 = 15;\nvar x2 = noOfSubsequences(arg20, arg21);\nvar v2 = 4;\nif(!compare(x2, v2)){\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \n}\n\n", "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "language": "javascript", "canonical_solution": "  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] * arr[j] < k) {\n        count++;\n      }\n    }\n  }\n  return count;\n}", "completion": ["\n  let allSubSeqs = (arr, k) => {\n    let result = new Array(arr.length).fill(0);\n\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length; j++) {\n        if (i > j) {\n          continue;\n        }\n\n        let new_result = new Array(arr.length).fill(0);\n        for (let m = 0; m < arr.length; m++) {\n          if (m > j || m < i) {\n            continue;\n          }\n\n          new_result[m] = arr[m] + result[m];\n        }\n        let product = new_result[i] * new_result[j];\n        if (product < k) {\n          result[i] += 1;\n          result[j] += 1;\n        }\n      }\n    }\n\n    return result.filter(v => v > 1).reduce((v, i) => v + i, 0);\n  };\n<|endoftext|>", "\nconst count = (arr, k) => {\n    const cache = new Map();\n\n    return (arr, idx, cache) => {\n        const count = cache.get(arr[idx]) || 0;\n        count += 1;\n\n        cache.set(arr[idx], count);\n\n        if (idx === arr.length - 1) {\n            if (arr[idx] * count < k) {\n                return count;\n            }\n\n            return 1;\n        }\n\n        return (arr, idx + 1, cache) => {\n            cache.set(arr[idx] * count, 0);\n\n            if (arr[idx] * count < k) {\n                return count;\n            }\n\n            return count;\n        }\n    }\n};\n\n```\n\n</section>\n\n\n## Challenge Seed\n<section id='challengeSeed'>\n\n<div id='js-seed'>\n\n```js\nconst countSubsequences = (arr, k) => {\n    // If the product of the subsequence is smaller than k,\n    // return the number of subsequences\n    return (arr, idx, cache) => {\n        const count = cache.get(arr[idx]) || 0;\n        count += 1;\n\n        cache.set(arr[idx], count);\n\n        if (idx === arr.length - 1) {\n            if (arr[idx] * count < k) {\n                return count;\n            }\n\n            return 1;\n        }\n\n        return (arr, idx + 1, cache) => {\n            cache.set(arr[idx] * count, 0);\n\n            if", "\n\nconst countSubsequences = arr => arr.map((num, i) => ({\n    idx: i,\n    num\n}));\n\nconsole.log(countSubsequences([1, 2, 3, 4, 5]));\n\n/**\n * * Write a function to find the number of subsequences of length k having product smaller than k for the given non negative array.\n */\n\nconst countSubsequences = arr => arr.slice(0, k);\n\nconsole.log(countSubsequences([1, 2, 3, 4, 5]));\n\n/**\n * * Write a ", "\n\nconst k = 10;\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n", "\nlet prod = Array.from({length: arr.length}, (v, i) => v * arr[i]);\nlet product = Array.from({length: arr.length}, (v, i) => v * arr[i]);\nlet prodCount = 0;\nlet prodCountList = [];\nfor (let i = 0; i < prodCountList.length; i++) {\n    if (prodCountList[i] < prodCount && product[i] < k) {\n        prodCountList[i] = prodCountList[i] + 1;\n        prodCount++;\n    }\n}\nprodCountList.sort((a, b) => a - b);\nreturn prodCountList[prodCountList.length - 1];\n}<|endoftext|>"]}
